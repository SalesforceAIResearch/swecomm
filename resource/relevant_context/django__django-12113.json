{"instance_id": "django__django-12113", "identified_spans": [{"file_path": "django/db/backends/sqlite3/base.py", "span_ids": ["DatabaseWrapper.disable_constraint_checking", "DatabaseWrapper.close", "DatabaseWrapper.enable_constraint_checking", "DatabaseWrapper.get_new_connection", "DatabaseWrapper._set_autocommit", "DatabaseWrapper.get_connection_params", "DatabaseWrapper"], "content": [{"span_id": "DatabaseWrapper.disable_constraint_checking", "start_line": 289, "end_line": 296, "content": ["    def disable_constraint_checking(self):\n", "        with self.cursor() as cursor:\n", "            cursor.execute('PRAGMA foreign_keys = OFF')\n", "            # Foreign key constraints cannot be turned off while in a multi-\n", "            # statement transaction. Fetch the current state of the pragma\n", "            # to determine if constraints are effectively disabled.\n", "            enabled = cursor.execute('PRAGMA foreign_keys').fetchone()[0]\n", "        return not bool(enabled)\n"]}, {"span_id": "DatabaseWrapper.close", "start_line": 260, "end_line": 267, "content": ["    @async_unsafe\n", "    def close(self):\n", "        self.validate_thread_sharing()\n", "        # If database is in memory, closing the connection destroys the\n", "        # database. To prevent accidental data loss, ignore close requests on\n", "        # an in-memory db.\n", "        if not self.is_in_memory_db():\n", "            BaseDatabaseWrapper.close(self)\n"]}, {"span_id": "DatabaseWrapper.enable_constraint_checking", "start_line": 298, "end_line": 299, "content": ["    def enable_constraint_checking(self):\n", "        self.cursor().execute('PRAGMA foreign_keys = ON')\n"]}, {"span_id": "DatabaseWrapper.get_new_connection", "start_line": 202, "end_line": 252, "content": ["    @async_unsafe\n", "    def get_new_connection(self, conn_params):\n", "        conn = Database.connect(**conn_params)\n", "        conn.create_function(\"django_date_extract\", 2, _sqlite_datetime_extract)\n", "        conn.create_function(\"django_date_trunc\", 2, _sqlite_date_trunc)\n", "        conn.create_function('django_datetime_cast_date', 3, _sqlite_datetime_cast_date)\n", "        conn.create_function('django_datetime_cast_time', 3, _sqlite_datetime_cast_time)\n", "        conn.create_function('django_datetime_extract', 4, _sqlite_datetime_extract)\n", "        conn.create_function('django_datetime_trunc', 4, _sqlite_datetime_trunc)\n", "        conn.create_function(\"django_time_extract\", 2, _sqlite_time_extract)\n", "        conn.create_function(\"django_time_trunc\", 2, _sqlite_time_trunc)\n", "        conn.create_function(\"django_time_diff\", 2, _sqlite_time_diff)\n", "        conn.create_function(\"django_timestamp_diff\", 2, _sqlite_timestamp_diff)\n", "        conn.create_function(\"django_format_dtdelta\", 3, _sqlite_format_dtdelta)\n", "        conn.create_function('regexp', 2, _sqlite_regexp)\n", "        conn.create_function('ACOS', 1, none_guard(math.acos))\n", "        conn.create_function('ASIN', 1, none_guard(math.asin))\n", "        conn.create_function('ATAN', 1, none_guard(math.atan))\n", "        conn.create_function('ATAN2', 2, none_guard(math.atan2))\n", "        conn.create_function('CEILING', 1, none_guard(math.ceil))\n", "        conn.create_function('COS', 1, none_guard(math.cos))\n", "        conn.create_function('COT', 1, none_guard(lambda x: 1 / math.tan(x)))\n", "        conn.create_function('DEGREES', 1, none_guard(math.degrees))\n", "        conn.create_function('EXP', 1, none_guard(math.exp))\n", "        conn.create_function('FLOOR', 1, none_guard(math.floor))\n", "        conn.create_function('LN', 1, none_guard(math.log))\n", "        conn.create_function('LOG', 2, none_guard(lambda x, y: math.log(y, x)))\n", "        conn.create_function('LPAD', 3, _sqlite_lpad)\n", "        conn.create_function('MD5', 1, none_guard(lambda x: hashlib.md5(x.encode()).hexdigest()))\n", "        conn.create_function('MOD', 2, none_guard(math.fmod))\n", "        conn.create_function('PI', 0, lambda: math.pi)\n", "        conn.create_function('POWER', 2, none_guard(operator.pow))\n", "        conn.create_function('RADIANS', 1, none_guard(math.radians))\n", "        conn.create_function('REPEAT', 2, none_guard(operator.mul))\n", "        conn.create_function('REVERSE', 1, none_guard(lambda x: x[::-1]))\n", "        conn.create_function('RPAD', 3, _sqlite_rpad)\n", "        conn.create_function('SHA1', 1, none_guard(lambda x: hashlib.sha1(x.encode()).hexdigest()))\n", "        conn.create_function('SHA224', 1, none_guard(lambda x: hashlib.sha224(x.encode()).hexdigest()))\n", "        conn.create_function('SHA256', 1, none_guard(lambda x: hashlib.sha256(x.encode()).hexdigest()))\n", "        conn.create_function('SHA384', 1, none_guard(lambda x: hashlib.sha384(x.encode()).hexdigest()))\n", "        conn.create_function('SHA512', 1, none_guard(lambda x: hashlib.sha512(x.encode()).hexdigest()))\n", "        conn.create_function('SIGN', 1, none_guard(lambda x: (x > 0) - (x < 0)))\n", "        conn.create_function('SIN', 1, none_guard(math.sin))\n", "        conn.create_function('SQRT', 1, none_guard(math.sqrt))\n", "        conn.create_function('TAN', 1, none_guard(math.tan))\n", "        conn.create_aggregate('STDDEV_POP', 1, list_aggregate(statistics.pstdev))\n", "        conn.create_aggregate('STDDEV_SAMP', 1, list_aggregate(statistics.stdev))\n", "        conn.create_aggregate('VAR_POP', 1, list_aggregate(statistics.pvariance))\n", "        conn.create_aggregate('VAR_SAMP', 1, list_aggregate(statistics.variance))\n", "        conn.execute('PRAGMA foreign_keys = ON')\n", "        return conn\n"]}, {"span_id": "DatabaseWrapper._set_autocommit", "start_line": 277, "end_line": 287, "content": ["    def _set_autocommit(self, autocommit):\n", "        if autocommit:\n", "            level = None\n", "        else:\n", "            # sqlite3's internal default is ''. It's different from None.\n", "            # See Modules/_sqlite/connection.c.\n", "            level = ''\n", "        # 'isolation_level' is a misleading API.\n", "        # SQLite always runs at the SERIALIZABLE isolation level.\n", "        with self.wrap_database_errors:\n", "            self.connection.isolation_level = level\n"]}, {"span_id": "DatabaseWrapper.get_connection_params", "start_line": 172, "end_line": 200, "content": ["    def get_connection_params(self):\n", "        settings_dict = self.settings_dict\n", "        if not settings_dict['NAME']:\n", "            raise ImproperlyConfigured(\n", "                \"settings.DATABASES is improperly configured. \"\n", "                \"Please supply the NAME value.\")\n", "        kwargs = {\n", "            # TODO: Remove str() when dropping support for PY36.\n", "            # https://bugs.python.org/issue33496\n", "            'database': str(settings_dict['NAME']),\n", "            'detect_types': Database.PARSE_DECLTYPES | Database.PARSE_COLNAMES,\n", "            **settings_dict['OPTIONS'],\n", "        }\n", "        # Always allow the underlying SQLite connection to be shareable\n", "        # between multiple threads. The safe-guarding will be handled at a\n", "        # higher level by the `BaseDatabaseWrapper.allow_thread_sharing`\n", "        # property. This is necessary as the shareability is disabled by\n", "        # default in pysqlite and it cannot be changed once a connection is\n", "        # opened.\n", "        if 'check_same_thread' in kwargs and kwargs['check_same_thread']:\n", "            warnings.warn(\n", "                'The `check_same_thread` option was provided and set to '\n", "                'True. It will be overridden with False. Use the '\n", "                '`DatabaseWrapper.allow_thread_sharing` property instead '\n", "                'for controlling thread shareability.',\n", "                RuntimeWarning\n", "            )\n", "        kwargs.update({'check_same_thread': False, 'uri': True})\n", "        return kwargs\n"]}, {"span_id": "DatabaseWrapper", "start_line": 80, "end_line": 170, "content": ["class DatabaseWrapper(BaseDatabaseWrapper):\n", "    vendor = 'sqlite'\n", "    display_name = 'SQLite'\n", "    # SQLite doesn't actually support most of these types, but it \"does the right\n", "    # thing\" given more verbose field definitions, so leave them as is so that\n", "    # schema inspection is more useful.\n", "    data_types = {\n", "        'AutoField': 'integer',\n", "        'BigAutoField': 'integer',\n", "        'BinaryField': 'BLOB',\n", "        'BooleanField': 'bool',\n", "        'CharField': 'varchar(%(max_length)s)',\n", "        'DateField': 'date',\n", "        'DateTimeField': 'datetime',\n", "        'DecimalField': 'decimal',\n", "        'DurationField': 'bigint',\n", "        'FileField': 'varchar(%(max_length)s)',\n", "        'FilePathField': 'varchar(%(max_length)s)',\n", "        'FloatField': 'real',\n", "        'IntegerField': 'integer',\n", "        'BigIntegerField': 'bigint',\n", "        'IPAddressField': 'char(15)',\n", "        'GenericIPAddressField': 'char(39)',\n", "        'NullBooleanField': 'bool',\n", "        'OneToOneField': 'integer',\n", "        'PositiveBigIntegerField': 'bigint unsigned',\n", "        'PositiveIntegerField': 'integer unsigned',\n", "        'PositiveSmallIntegerField': 'smallint unsigned',\n", "        'SlugField': 'varchar(%(max_length)s)',\n", "        'SmallAutoField': 'integer',\n", "        'SmallIntegerField': 'smallint',\n", "        'TextField': 'text',\n", "        'TimeField': 'time',\n", "        'UUIDField': 'char(32)',\n", "    }\n", "    data_type_check_constraints = {\n", "        'PositiveBigIntegerField': '\"%(column)s\" >= 0',\n", "        'PositiveIntegerField': '\"%(column)s\" >= 0',\n", "        'PositiveSmallIntegerField': '\"%(column)s\" >= 0',\n", "    }\n", "    data_types_suffix = {\n", "        'AutoField': 'AUTOINCREMENT',\n", "        'BigAutoField': 'AUTOINCREMENT',\n", "        'SmallAutoField': 'AUTOINCREMENT',\n", "    }\n", "    # SQLite requires LIKE statements to include an ESCAPE clause if the value\n", "    # being escaped has a percent or underscore in it.\n", "    # See https://www.sqlite.org/lang_expr.html for an explanation.\n", "    operators = {\n", "        'exact': '= %s',\n", "        'iexact': \"LIKE %s ESCAPE '\\\\'\",\n", "        'contains': \"LIKE %s ESCAPE '\\\\'\",\n", "        'icontains': \"LIKE %s ESCAPE '\\\\'\",\n", "        'regex': 'REGEXP %s',\n", "        'iregex': \"REGEXP '(?i)' || %s\",\n", "        'gt': '> %s',\n", "        'gte': '>= %s',\n", "        'lt': '< %s',\n", "        'lte': '<= %s',\n", "        'startswith': \"LIKE %s ESCAPE '\\\\'\",\n", "        'endswith': \"LIKE %s ESCAPE '\\\\'\",\n", "        'istartswith': \"LIKE %s ESCAPE '\\\\'\",\n", "        'iendswith': \"LIKE %s ESCAPE '\\\\'\",\n", "    }\n", "\n", "    # The patterns below are used to generate SQL pattern lookup clauses when\n", "    # the right-hand side of the lookup isn't a raw string (it might be an expression\n", "    # or the result of a bilateral transformation).\n", "    # In those cases, special characters for LIKE operators (e.g. \\, *, _) should be\n", "    # escaped on database side.\n", "    #\n", "    # Note: we use str.format() here for readability as '%' is used as a wildcard for\n", "    # the LIKE operator.\n", "    pattern_esc = r\"REPLACE(REPLACE(REPLACE({}, '\\', '\\\\'), '%%', '\\%%'), '_', '\\_')\"\n", "    pattern_ops = {\n", "        'contains': r\"LIKE '%%' || {} || '%%' ESCAPE '\\'\",\n", "        'icontains': r\"LIKE '%%' || UPPER({}) || '%%' ESCAPE '\\'\",\n", "        'startswith': r\"LIKE {} || '%%' ESCAPE '\\'\",\n", "        'istartswith': r\"LIKE UPPER({}) || '%%' ESCAPE '\\'\",\n", "        'endswith': r\"LIKE '%%' || {} ESCAPE '\\'\",\n", "        'iendswith': r\"LIKE '%%' || UPPER({}) ESCAPE '\\'\",\n", "    }\n", "\n", "    Database = Database\n", "    SchemaEditorClass = DatabaseSchemaEditor\n", "    # Classes instantiated in __init__().\n", "    client_class = DatabaseClient\n", "    creation_class = DatabaseCreation\n", "    features_class = DatabaseFeatures\n", "    introspection_class = DatabaseIntrospection\n", "    ops_class = DatabaseOperations\n"]}]}, {"file_path": "django/db/backends/sqlite3/creation.py", "span_ids": ["DatabaseCreation._create_test_db", "DatabaseCreation", "DatabaseCreation._destroy_test_db"], "content": [{"span_id": "DatabaseCreation._create_test_db", "start_line": 23, "end_line": 49, "content": ["    def _create_test_db(self, verbosity, autoclobber, keepdb=False):\n", "        test_database_name = self._get_test_db_name()\n", "\n", "        if keepdb:\n", "            return test_database_name\n", "        if not self.is_in_memory_db(test_database_name):\n", "            # Erase the old test database\n", "            if verbosity >= 1:\n", "                self.log('Destroying old test database for alias %s...' % (\n", "                    self._get_database_display_str(verbosity, test_database_name),\n", "                ))\n", "            if os.access(test_database_name, os.F_OK):\n", "                if not autoclobber:\n", "                    confirm = input(\n", "                        \"Type 'yes' if you would like to try deleting the test \"\n", "                        \"database '%s', or 'no' to cancel: \" % test_database_name\n", "                    )\n", "                if autoclobber or confirm == 'yes':\n", "                    try:\n", "                        os.remove(test_database_name)\n", "                    except Exception as e:\n", "                        self.log('Got an error deleting the old test database: %s' % e)\n", "                        sys.exit(2)\n", "                else:\n", "                    self.log('Tests cancelled.')\n", "                    sys.exit(1)\n", "        return test_database_name\n"]}, {"span_id": "DatabaseCreation", "start_line": 9, "end_line": 9, "content": ["class DatabaseCreation(BaseDatabaseCreation):\n"]}, {"span_id": "DatabaseCreation._destroy_test_db", "start_line": 84, "end_line": 87, "content": ["    def _destroy_test_db(self, test_database_name, verbosity):\n", "        if test_database_name and not self.is_in_memory_db(test_database_name):\n", "            # Remove the SQLite database file\n", "            os.remove(test_database_name)\n"]}]}]}