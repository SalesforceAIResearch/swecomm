{"instance_id": "sympy__sympy-13043", "identified_spans": [{"file_path": "sympy/integrals/intpoly.py", "span_ids": ["decompose"], "content": [{"span_id": "decompose", "start_line": 538, "end_line": 597, "content": ["def decompose(expr, separate=False):\n", "    \"\"\"Decomposes an input polynomial into homogeneous ones of\n", "    smaller or equal degree.\n", "    Returns a dictionary with keys as the degree of the smaller\n", "    constituting polynomials. Values are the constituting polynomials.\n", "    Parameters\n", "    ==========\n", "    expr : Polynomial(SymPy expression)\n", "\n", "    Optional Parameters :\n", "\n", "    separate : If True then simply return a list of the constituent monomials\n", "               If not then break up the polynomial into constituent homogeneous\n", "               polynomials.\n", "    Examples\n", "    ========\n", "    >>> from sympy.abc import x, y\n", "    >>> from sympy.integrals.intpoly import decompose\n", "    >>> decompose(x**2 + x*y + x + y + x**3*y**2 + y**5)\n", "    {1: x + y, 2: x**2 + x*y, 5: x**3*y**2 + y**5}\n", "    >>> decompose(x**2 + x*y + x + y + x**3*y**2 + y**5, True)\n", "    [x, y, x**2, y**5, x*y, x**3*y**2]\n", "    \"\"\"\n", "    expr = S(expr)\n", "    poly_dict = {}\n", "\n", "    if isinstance(expr, Expr) and not expr.is_number:\n", "        if expr.is_Symbol:\n", "            poly_dict[1] = expr\n", "        elif expr.is_Add:\n", "            symbols = expr.atoms(Symbol)\n", "            degrees = [(sum(degree_list(monom, *symbols)), monom)\n", "                       for monom in expr.args]\n", "            if separate:\n", "                return [monom[1] for monom in degrees]\n", "            else:\n", "                for monom in degrees:\n", "                    degree, term = monom\n", "                    if poly_dict.get(degree):\n", "                        poly_dict[degree] += term\n", "                    else:\n", "                        poly_dict[degree] = term\n", "        elif expr.is_Pow:\n", "            _, degree = expr.args\n", "            poly_dict[degree] = expr\n", "        else:  # Now expr can only be of `Mul` type\n", "            degree = 0\n", "            for term in expr.args:\n", "                term_type = len(term.args)\n", "                if term_type == 0 and term.is_Symbol:\n", "                    degree += 1\n", "                elif term_type == 2:\n", "                    degree += term.args[1]\n", "            poly_dict[degree] = expr\n", "    else:\n", "        poly_dict[0] = expr\n", "\n", "    if separate:\n", "        return list(poly_dict.values())\n", "    return poly_dict\n"]}]}]}