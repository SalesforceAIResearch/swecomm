{"instance_id": "pylint-dev__pylint-7228", "identified_spans": [{"file_path": "pylint/config/config_file_parser.py", "span_ids": ["_ConfigurationFileParser._parse_ini_file"], "content": [{"span_id": "_ConfigurationFileParser._parse_ini_file", "start_line": 34, "end_line": 61, "content": ["    def _parse_ini_file(self, file_path: Path) -> tuple[dict[str, str], list[str]]:\n", "        \"\"\"Parse and handle errors of a ini configuration file.\"\"\"\n", "        parser = configparser.ConfigParser(inline_comment_prefixes=(\"#\", \";\"))\n", "\n", "        # Use this encoding in order to strip the BOM marker, if any.\n", "        with open(file_path, encoding=\"utf_8_sig\") as fp:\n", "            parser.read_file(fp)\n", "\n", "        config_content: dict[str, str] = {}\n", "        options: list[str] = []\n", "        for section in parser.sections():\n", "            if self._ini_file_with_sections(file_path) and not section.startswith(\n", "                \"pylint\"\n", "            ):\n", "                if section.lower() == \"master\":\n", "                    # TODO: 3.0: Remove deprecated handling of master, only allow 'pylint.' sections\n", "                    warnings.warn(\n", "                        \"The use of 'MASTER' or 'master' as configuration section for pylint \"\n", "                        \"has been deprecated, as it's bad practice to not start sections titles with the \"\n", "                        \"tool name. Please use 'pylint.main' instead.\",\n", "                        UserWarning,\n", "                    )\n", "                else:\n", "                    continue\n", "            for opt, value in parser[section].items():\n", "                config_content[opt] = value\n", "                options += [f\"--{opt}\", value]\n", "        return config_content, options\n"]}]}, {"file_path": "pylint/config/option.py", "span_ids": ["_regexp_validator"], "content": [{"span_id": "_regexp_validator", "start_line": 23, "end_line": 26, "content": ["def _regexp_validator(_, name, value):\n", "    if hasattr(value, \"pattern\"):\n", "        return value\n", "    return re.compile(value)\n"]}]}, {"file_path": "pylint/lint/pylinter.py", "span_ids": ["PyLinter"], "content": [{"span_id": "PyLinter", "start_line": 237, "end_line": 267, "content": ["class PyLinter(\n", "    _ArgumentsManager,\n", "    _MessageStateHandler,\n", "    reporters.ReportsHandlerMixIn,\n", "    checkers.BaseChecker,\n", "):\n", "    \"\"\"Lint Python modules using external checkers.\n", "\n", "    This is the main checker controlling the other ones and the reports\n", "    generation. It is itself both a raw checker and an astroid checker in order\n", "    to:\n", "    * handle message activation / deactivation at the module level\n", "    * handle some basic but necessary stats' data (number of classes, methods...)\n", "\n", "    IDE plugin developers: you may have to call\n", "    `astroid.MANAGER.clear_cache()` across runs if you want\n", "    to ensure the latest code version is actually checked.\n", "\n", "    This class needs to support pickling for parallel linting to work. The exception\n", "    is reporter member; see check_parallel function for more details.\n", "    \"\"\"\n", "\n", "    name = MAIN_CHECKER_NAME\n", "    msgs = MSGS\n", "    # Will be used like this : datetime.now().strftime(crash_file_path)\n", "    crash_file_path: str = \"pylint-crash-%Y-%m-%d-%H-%M-%S.txt\"\n", "\n", "    option_groups_descs = {\n", "        \"Messages control\": \"Options controlling analysis messages\",\n", "        \"Reports\": \"Options related to output formatting and reporting\",\n", "    }\n"]}]}]}