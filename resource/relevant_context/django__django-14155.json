{"instance_id": "django__django-14155", "identified_spans": [{"file_path": "django/urls/resolvers.py", "span_ids": ["ResolverMatch", "ResolverMatch.__init__", "URLPattern.lookup_str", "ResolverMatch.__repr__"], "content": [{"span_id": "ResolverMatch", "start_line": 32, "end_line": 32, "content": ["class ResolverMatch:\n"]}, {"span_id": "ResolverMatch.__init__", "start_line": 33, "end_line": 56, "content": ["    def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n", "        self.func = func\n", "        self.args = args\n", "        self.kwargs = kwargs\n", "        self.url_name = url_name\n", "        self.route = route\n", "        self.tried = tried\n", "\n", "        # If a URLRegexResolver doesn't have a namespace or app_name, it passes\n", "        # in an empty value.\n", "        self.app_names = [x for x in app_names if x] if app_names else []\n", "        self.app_name = ':'.join(self.app_names)\n", "        self.namespaces = [x for x in namespaces if x] if namespaces else []\n", "        self.namespace = ':'.join(self.namespaces)\n", "\n", "        if not hasattr(func, '__name__'):\n", "            # A class-based view\n", "            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n", "        else:\n", "            # A function-based view\n", "            self._func_path = func.__module__ + '.' + func.__name__\n", "\n", "        view_path = url_name or self._func_path\n", "        self.view_name = ':'.join(self.namespaces + [view_path])\n"]}, {"span_id": "URLPattern.lookup_str", "start_line": 365, "end_line": 376, "content": ["    @cached_property\n", "    def lookup_str(self):\n", "        \"\"\"\n", "        A string that identifies the view (e.g. 'path.to.view_function' or\n", "        'path.to.ClassBasedView').\n", "        \"\"\"\n", "        callback = self.callback\n", "        if isinstance(callback, functools.partial):\n", "            callback = callback.func\n", "        if not hasattr(callback, '__name__'):\n", "            return callback.__module__ + \".\" + callback.__class__.__name__\n", "        return callback.__module__ + \".\" + callback.__qualname__\n"]}, {"span_id": "ResolverMatch.__repr__", "start_line": 61, "end_line": 65, "content": ["    def __repr__(self):\n", "        return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n", "            self._func_path, self.args, self.kwargs, self.url_name,\n", "            self.app_names, self.namespaces, self.route,\n", "        )\n"]}]}]}