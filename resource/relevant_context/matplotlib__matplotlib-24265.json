{"instance_id": "matplotlib__matplotlib-24265", "identified_spans": [{"file_path": "lib/matplotlib/style/core.py", "span_ids": ["use", "reload_library"], "content": [{"span_id": "use", "start_line": 65, "end_line": 161, "content": ["@_docstring.Substitution(\n", "    \"\\n\".join(map(\"- {}\".format, sorted(STYLE_BLACKLIST, key=str.lower)))\n", ")\n", "def use(style):\n", "    \"\"\"\n", "    Use Matplotlib style settings from a style specification.\n", "\n", "    The style name of 'default' is reserved for reverting back to\n", "    the default style settings.\n", "\n", "    .. note::\n", "\n", "       This updates the `.rcParams` with the settings from the style.\n", "       `.rcParams` not defined in the style are kept.\n", "\n", "    Parameters\n", "    ----------\n", "    style : str, dict, Path or list\n", "        A style specification. Valid options are:\n", "\n", "        +------+-------------------------------------------------------------+\n", "        | str  | The name of a style or a path/URL to a style file. For a    |\n", "        |      | list of available style names, see `.style.available`.      |\n", "        +------+-------------------------------------------------------------+\n", "        | dict | Dictionary with valid key/value pairs for                   |\n", "        |      | `matplotlib.rcParams`.                                      |\n", "        +------+-------------------------------------------------------------+\n", "        | Path | A path-like object which is a path to a style file.         |\n", "        +------+-------------------------------------------------------------+\n", "        | list | A list of style specifiers (str, Path or dict) applied from |\n", "        |      | first to last in the list.                                  |\n", "        +------+-------------------------------------------------------------+\n", "\n", "    Notes\n", "    -----\n", "    The following `.rcParams` are not related to style and will be ignored if\n", "    found in a style specification:\n", "\n", "    %s\n", "    \"\"\"\n", "    if isinstance(style, (str, Path)) or hasattr(style, 'keys'):\n", "        # If name is a single str, Path or dict, make it a single element list.\n", "        styles = [style]\n", "    else:\n", "        styles = style\n", "\n", "    style_alias = {'mpl20': 'default', 'mpl15': 'classic'}\n", "\n", "    def fix_style(s):\n", "        if isinstance(s, str):\n", "            s = style_alias.get(s, s)\n", "            if s in [\n", "                \"seaborn\",\n", "                \"seaborn-bright\",\n", "                \"seaborn-colorblind\",\n", "                \"seaborn-dark\",\n", "                \"seaborn-darkgrid\",\n", "                \"seaborn-dark-palette\",\n", "                \"seaborn-deep\",\n", "                \"seaborn-muted\",\n", "                \"seaborn-notebook\",\n", "                \"seaborn-paper\",\n", "                \"seaborn-pastel\",\n", "                \"seaborn-poster\",\n", "                \"seaborn-talk\",\n", "                \"seaborn-ticks\",\n", "                \"seaborn-white\",\n", "                \"seaborn-whitegrid\",\n", "            ]:\n", "                _api.warn_deprecated(\n", "                    \"3.6\", message=\"The seaborn styles shipped by Matplotlib \"\n", "                    \"are deprecated since %(since)s, as they no longer \"\n", "                    \"correspond to the styles shipped by seaborn. However, \"\n", "                    \"they will remain available as 'seaborn-v0_8-<style>'. \"\n", "                    \"Alternatively, directly use the seaborn API instead.\")\n", "                s = s.replace(\"seaborn\", \"seaborn-v0_8\")\n", "        return s\n", "\n", "    for style in map(fix_style, styles):\n", "        if not isinstance(style, (str, Path)):\n", "            _apply_style(style)\n", "        elif style == 'default':\n", "            # Deprecation warnings were already handled when creating\n", "            # rcParamsDefault, no need to reemit them here.\n", "            with _api.suppress_matplotlib_deprecation_warning():\n", "                _apply_style(rcParamsDefault, warn=False)\n", "        elif style in library:\n", "            _apply_style(library[style])\n", "        else:\n", "            try:\n", "                rc = rc_params_from_file(style, use_default_template=False)\n", "                _apply_style(rc)\n", "            except IOError as err:\n", "                raise IOError(\n", "                    \"{!r} not found in the style library and input is not a \"\n", "                    \"valid URL or path; see `style.available` for list of \"\n", "                    \"available styles\".format(style)) from err\n"]}, {"span_id": "reload_library", "start_line": 254, "end_line": 258, "content": ["def reload_library():\n", "    \"\"\"Reload the style library.\"\"\"\n", "    global library\n", "    library = update_user_library(_base_library)\n", "    available[:] = sorted(library.keys())\n"]}]}]}