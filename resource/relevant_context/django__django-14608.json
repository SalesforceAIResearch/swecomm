{"instance_id": "django__django-14608", "identified_spans": [{"file_path": "django/forms/forms.py", "span_ids": ["BaseForm.non_field_errors"], "content": [{"span_id": "BaseForm.non_field_errors", "start_line": 311, "end_line": 317, "content": ["    def non_field_errors(self):\n", "        \"\"\"\n", "        Return an ErrorList of errors that aren't associated with a particular\n", "        field -- i.e., from Form.clean(). Return an empty ErrorList if there\n", "        are none.\n", "        \"\"\"\n", "        return self.errors.get(NON_FIELD_ERRORS, self.error_class(error_class='nonfield'))\n"]}]}, {"file_path": "django/forms/formsets.py", "span_ids": ["BaseFormSet.non_form_errors", "BaseFormSet.full_clean", "BaseFormSet"], "content": [{"span_id": "BaseFormSet.non_form_errors", "start_line": 290, "end_line": 298, "content": ["    def non_form_errors(self):\n", "        \"\"\"\n", "        Return an ErrorList of errors that aren't associated with a particular\n", "        form -- i.e., from formset.clean(). Return an empty ErrorList if there\n", "        are none.\n", "        \"\"\"\n", "        if self._non_form_errors is None:\n", "            self.full_clean()\n", "        return self._non_form_errors\n"]}, {"span_id": "BaseFormSet.full_clean", "start_line": 330, "end_line": 383, "content": ["    def full_clean(self):\n", "        \"\"\"\n", "        Clean all of self.data and populate self._errors and\n", "        self._non_form_errors.\n", "        \"\"\"\n", "        self._errors = []\n", "        self._non_form_errors = self.error_class()\n", "        empty_forms_count = 0\n", "\n", "        if not self.is_bound:  # Stop further processing.\n", "            return\n", "\n", "        if not self.management_form.is_valid():\n", "            error = ValidationError(\n", "                self.error_messages['missing_management_form'],\n", "                params={\n", "                    'field_names': ', '.join(\n", "                        self.management_form.add_prefix(field_name)\n", "                        for field_name in self.management_form.errors\n", "                    ),\n", "                },\n", "                code='missing_management_form',\n", "            )\n", "            self._non_form_errors.append(error)\n", "\n", "        for i, form in enumerate(self.forms):\n", "            # Empty forms are unchanged forms beyond those with initial data.\n", "            if not form.has_changed() and i >= self.initial_form_count():\n", "                empty_forms_count += 1\n", "            # Accessing errors calls full_clean() if necessary.\n", "            # _should_delete_form() requires cleaned_data.\n", "            form_errors = form.errors\n", "            if self.can_delete and self._should_delete_form(form):\n", "                continue\n", "            self._errors.append(form_errors)\n", "        try:\n", "            if (self.validate_max and\n", "                    self.total_form_count() - len(self.deleted_forms) > self.max_num) or \\\n", "                    self.management_form.cleaned_data[TOTAL_FORM_COUNT] > self.absolute_max:\n", "                raise ValidationError(ngettext(\n", "                    \"Please submit at most %d form.\",\n", "                    \"Please submit at most %d forms.\", self.max_num) % self.max_num,\n", "                    code='too_many_forms',\n", "                )\n", "            if (self.validate_min and\n", "                    self.total_form_count() - len(self.deleted_forms) - empty_forms_count < self.min_num):\n", "                raise ValidationError(ngettext(\n", "                    \"Please submit at least %d form.\",\n", "                    \"Please submit at least %d forms.\", self.min_num) % self.min_num,\n", "                    code='too_few_forms')\n", "            # Give self.clean() a chance to do cross-form validation.\n", "            self.clean()\n", "        except ValidationError as e:\n", "            self._non_form_errors = self.error_class(e.error_list)\n"]}, {"span_id": "BaseFormSet", "start_line": 53, "end_line": 64, "content": ["@html_safe\n", "class BaseFormSet:\n", "    \"\"\"\n", "    A collection of instances of the same Form class.\n", "    \"\"\"\n", "    ordering_widget = NumberInput\n", "    default_error_messages = {\n", "        'missing_management_form': _(\n", "            'ManagementForm data is missing or has been tampered with. Missing fields: '\n", "            '%(field_names)s. You may need to file a bug report if the issue persists.'\n", "        ),\n", "    }\n"]}]}]}