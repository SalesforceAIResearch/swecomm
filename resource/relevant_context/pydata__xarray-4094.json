{"instance_id": "pydata__xarray-4094", "identified_spans": [{"file_path": "xarray/core/dataarray.py", "span_ids": ["DataArray.to_unstacked_dataset"], "content": [{"span_id": "DataArray.to_unstacked_dataset", "start_line": 1901, "end_line": 1967, "content": ["    def to_unstacked_dataset(self, dim, level=0):\n", "        \"\"\"Unstack DataArray expanding to Dataset along a given level of a\n", "        stacked coordinate.\n", "\n", "        This is the inverse operation of Dataset.to_stacked_array.\n", "\n", "        Parameters\n", "        ----------\n", "        dim : str\n", "            Name of existing dimension to unstack\n", "        level : int or str\n", "            The MultiIndex level to expand to a dataset along. Can either be\n", "            the integer index of the level or its name.\n", "        label : int, default 0\n", "            Label of the level to expand dataset along. Overrides the label\n", "            argument if given.\n", "\n", "        Returns\n", "        -------\n", "        unstacked: Dataset\n", "\n", "        Examples\n", "        --------\n", "        >>> import xarray as xr\n", "        >>> arr = xr.DataArray(\n", "        ...     np.arange(6).reshape(2, 3),\n", "        ...     coords=[(\"x\", [\"a\", \"b\"]), (\"y\", [0, 1, 2])],\n", "        ... )\n", "        >>> data = xr.Dataset({\"a\": arr, \"b\": arr.isel(y=0)})\n", "        >>> data\n", "        <xarray.Dataset>\n", "        Dimensions:  (x: 2, y: 3)\n", "        Coordinates:\n", "          * x        (x) <U1 'a' 'b'\n", "          * y        (y) int64 0 1 2\n", "        Data variables:\n", "            a        (x, y) int64 0 1 2 3 4 5\n", "            b        (x) int64 0 3\n", "        >>> stacked = data.to_stacked_array(\"z\", [\"y\"])\n", "        >>> stacked.indexes[\"z\"]\n", "        MultiIndex(levels=[['a', 'b'], [0, 1, 2]],\n", "                labels=[[0, 0, 0, 1], [0, 1, 2, -1]],\n", "                names=['variable', 'y'])\n", "        >>> roundtripped = stacked.to_unstacked_dataset(dim=\"z\")\n", "        >>> data.identical(roundtripped)\n", "        True\n", "\n", "        See Also\n", "        --------\n", "        Dataset.to_stacked_array\n", "        \"\"\"\n", "\n", "        idx = self.indexes[dim]\n", "        if not isinstance(idx, pd.MultiIndex):\n", "            raise ValueError(f\"'{dim}' is not a stacked coordinate\")\n", "\n", "        level_number = idx._get_level_number(level)\n", "        variables = idx.levels[level_number]\n", "        variable_dim = idx.names[level_number]\n", "\n", "        # pull variables out of datarray\n", "        data_dict = {}\n", "        for k in variables:\n", "            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n", "\n", "        # unstacked dataset\n", "        return Dataset(data_dict)\n"]}]}]}