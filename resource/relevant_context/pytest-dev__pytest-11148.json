{"instance_id": "pytest-dev__pytest-11148", "identified_spans": [{"file_path": "src/_pytest/config/__init__.py", "span_ids": ["import_path"], "content": []}, {"file_path": "src/_pytest/main.py", "span_ids": ["pytest_addoption"], "content": [{"span_id": "pytest_addoption", "start_line": 50, "end_line": 229, "content": ["def pytest_addoption(parser: Parser) -> None:\n", "    parser.addini(\n", "        \"norecursedirs\",\n", "        \"Directory patterns to avoid for recursion\",\n", "        type=\"args\",\n", "        default=[\n", "            \"*.egg\",\n", "            \".*\",\n", "            \"_darcs\",\n", "            \"build\",\n", "            \"CVS\",\n", "            \"dist\",\n", "            \"node_modules\",\n", "            \"venv\",\n", "            \"{arch}\",\n", "        ],\n", "    )\n", "    parser.addini(\n", "        \"testpaths\",\n", "        \"Directories to search for tests when no files or directories are given on the \"\n", "        \"command line\",\n", "        type=\"args\",\n", "        default=[],\n", "    )\n", "    group = parser.getgroup(\"general\", \"Running and selection options\")\n", "    group._addoption(\n", "        \"-x\",\n", "        \"--exitfirst\",\n", "        action=\"store_const\",\n", "        dest=\"maxfail\",\n", "        const=1,\n", "        help=\"Exit instantly on first error or failed test\",\n", "    )\n", "    group = parser.getgroup(\"pytest-warnings\")\n", "    group.addoption(\n", "        \"-W\",\n", "        \"--pythonwarnings\",\n", "        action=\"append\",\n", "        help=\"Set which warnings to report, see -W option of Python itself\",\n", "    )\n", "    parser.addini(\n", "        \"filterwarnings\",\n", "        type=\"linelist\",\n", "        help=\"Each line specifies a pattern for \"\n", "        \"warnings.filterwarnings. \"\n", "        \"Processed after -W/--pythonwarnings.\",\n", "    )\n", "    group._addoption(\n", "        \"--maxfail\",\n", "        metavar=\"num\",\n", "        action=\"store\",\n", "        type=int,\n", "        dest=\"maxfail\",\n", "        default=0,\n", "        help=\"Exit after first num failures or errors\",\n", "    )\n", "    group._addoption(\n", "        \"--strict-config\",\n", "        action=\"store_true\",\n", "        help=\"Any warnings encountered while parsing the `pytest` section of the \"\n", "        \"configuration file raise errors\",\n", "    )\n", "    group._addoption(\n", "        \"--strict-markers\",\n", "        action=\"store_true\",\n", "        help=\"Markers not registered in the `markers` section of the configuration \"\n", "        \"file raise errors\",\n", "    )\n", "    group._addoption(\n", "        \"--strict\",\n", "        action=\"store_true\",\n", "        help=\"(Deprecated) alias to --strict-markers\",\n", "    )\n", "    group._addoption(\n", "        \"-c\",\n", "        \"--config-file\",\n", "        metavar=\"FILE\",\n", "        type=str,\n", "        dest=\"inifilename\",\n", "        help=\"Load configuration from `FILE` instead of trying to locate one of the \"\n", "        \"implicit configuration files.\",\n", "    )\n", "    group._addoption(\n", "        \"--continue-on-collection-errors\",\n", "        action=\"store_true\",\n", "        default=False,\n", "        dest=\"continue_on_collection_errors\",\n", "        help=\"Force test execution even if collection errors occur\",\n", "    )\n", "    group._addoption(\n", "        \"--rootdir\",\n", "        action=\"store\",\n", "        dest=\"rootdir\",\n", "        help=\"Define root directory for tests. Can be relative path: 'root_dir', './root_dir', \"\n", "        \"'root_dir/another_dir/'; absolute path: '/home/user/root_dir'; path with variables: \"\n", "        \"'$HOME/root_dir'.\",\n", "    )\n", "\n", "    group = parser.getgroup(\"collect\", \"collection\")\n", "    group.addoption(\n", "        \"--collectonly\",\n", "        \"--collect-only\",\n", "        \"--co\",\n", "        action=\"store_true\",\n", "        help=\"Only collect tests, don't execute them\",\n", "    )\n", "    group.addoption(\n", "        \"--pyargs\",\n", "        action=\"store_true\",\n", "        help=\"Try to interpret all arguments as Python packages\",\n", "    )\n", "    group.addoption(\n", "        \"--ignore\",\n", "        action=\"append\",\n", "        metavar=\"path\",\n", "        help=\"Ignore path during collection (multi-allowed)\",\n", "    )\n", "    group.addoption(\n", "        \"--ignore-glob\",\n", "        action=\"append\",\n", "        metavar=\"path\",\n", "        help=\"Ignore path pattern during collection (multi-allowed)\",\n", "    )\n", "    group.addoption(\n", "        \"--deselect\",\n", "        action=\"append\",\n", "        metavar=\"nodeid_prefix\",\n", "        help=\"Deselect item (via node id prefix) during collection (multi-allowed)\",\n", "    )\n", "    group.addoption(\n", "        \"--confcutdir\",\n", "        dest=\"confcutdir\",\n", "        default=None,\n", "        metavar=\"dir\",\n", "        type=functools.partial(directory_arg, optname=\"--confcutdir\"),\n", "        help=\"Only load conftest.py's relative to specified dir\",\n", "    )\n", "    group.addoption(\n", "        \"--noconftest\",\n", "        action=\"store_true\",\n", "        dest=\"noconftest\",\n", "        default=False,\n", "        help=\"Don't load any conftest.py files\",\n", "    )\n", "    group.addoption(\n", "        \"--keepduplicates\",\n", "        \"--keep-duplicates\",\n", "        action=\"store_true\",\n", "        dest=\"keepduplicates\",\n", "        default=False,\n", "        help=\"Keep duplicate tests\",\n", "    )\n", "    group.addoption(\n", "        \"--collect-in-virtualenv\",\n", "        action=\"store_true\",\n", "        dest=\"collect_in_virtualenv\",\n", "        default=False,\n", "        help=\"Don't ignore tests in a local virtualenv directory\",\n", "    )\n", "    group.addoption(\n", "        \"--import-mode\",\n", "        default=\"prepend\",\n", "        choices=[\"prepend\", \"append\", \"importlib\"],\n", "        dest=\"importmode\",\n", "        help=\"Prepend/append to sys.path when importing test modules and conftest \"\n", "        \"files. Default: prepend.\",\n", "    )\n", "\n", "    group = parser.getgroup(\"debugconfig\", \"test session debugging and configuration\")\n", "    group.addoption(\n", "        \"--basetemp\",\n", "        dest=\"basetemp\",\n", "        default=None,\n", "        type=validate_basetemp,\n", "        metavar=\"dir\",\n", "        help=(\n", "            \"Base temporary directory for this test run. \"\n", "            \"(Warning: this directory is removed if it exists.)\"\n", "        ),\n", "    )\n"]}]}, {"file_path": "src/_pytest/python.py", "span_ids": ["Module._importtestmodule"], "content": [{"span_id": "Module._importtestmodule", "start_line": 613, "end_line": 658, "content": ["    def _importtestmodule(self):\n", "        # We assume we are only called once per module.\n", "        importmode = self.config.getoption(\"--import-mode\")\n", "        try:\n", "            mod = import_path(self.path, mode=importmode, root=self.config.rootpath)\n", "        except SyntaxError as e:\n", "            raise self.CollectError(\n", "                ExceptionInfo.from_current().getrepr(style=\"short\")\n", "            ) from e\n", "        except ImportPathMismatchError as e:\n", "            raise self.CollectError(\n", "                \"import file mismatch:\\n\"\n", "                \"imported module %r has this __file__ attribute:\\n\"\n", "                \"  %s\\n\"\n", "                \"which is not the same as the test file we want to collect:\\n\"\n", "                \"  %s\\n\"\n", "                \"HINT: remove __pycache__ / .pyc files and/or use a \"\n", "                \"unique basename for your test file modules\" % e.args\n", "            ) from e\n", "        except ImportError as e:\n", "            exc_info = ExceptionInfo.from_current()\n", "            if self.config.getoption(\"verbose\") < 2:\n", "                exc_info.traceback = exc_info.traceback.filter(filter_traceback)\n", "            exc_repr = (\n", "                exc_info.getrepr(style=\"short\")\n", "                if exc_info.traceback\n", "                else exc_info.exconly()\n", "            )\n", "            formatted_tb = str(exc_repr)\n", "            raise self.CollectError(\n", "                \"ImportError while importing test module '{path}'.\\n\"\n", "                \"Hint: make sure your test modules/packages have valid Python names.\\n\"\n", "                \"Traceback:\\n\"\n", "                \"{traceback}\".format(path=self.path, traceback=formatted_tb)\n", "            ) from e\n", "        except skip.Exception as e:\n", "            if e.allow_module_level:\n", "                raise\n", "            raise self.CollectError(\n", "                \"Using pytest.skip outside of a test will skip the entire module. \"\n", "                \"If that's your intention, pass `allow_module_level=True`. \"\n", "                \"If you want to skip a specific test or an entire class, \"\n", "                \"use the @pytest.mark.skip or @pytest.mark.skipif decorators.\"\n", "            ) from e\n", "        self.config.pluginmanager.consider_module(mod)\n", "        return mod\n"]}]}]}