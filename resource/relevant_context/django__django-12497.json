{"instance_id": "django__django-12497", "identified_spans": [{"file_path": "django/db/models/fields/related.py", "span_ids": ["ManyToManyField", "ManyToManyField._check_relationship_model"], "content": [{"span_id": "ManyToManyField", "start_line": 1124, "end_line": 1142, "content": ["class ManyToManyField(RelatedField):\n", "    \"\"\"\n", "    Provide a many-to-many relation by using an intermediary model that\n", "    holds two ForeignKey fields pointed at the two sides of the relation.\n", "\n", "    Unless a ``through`` model was provided, ManyToManyField will use the\n", "    create_many_to_many_intermediary_model factory to automatically generate\n", "    the intermediary model.\n", "    \"\"\"\n", "\n", "    # Field flags\n", "    many_to_many = True\n", "    many_to_one = False\n", "    one_to_many = False\n", "    one_to_one = False\n", "\n", "    rel_class = ManyToManyRel\n", "\n", "    description = _(\"Many-to-many relationship\")\n"]}, {"span_id": "ManyToManyField._check_relationship_model", "start_line": 1235, "end_line": 1426, "content": ["    def _check_relationship_model(self, from_model=None, **kwargs):\n", "        if hasattr(self.remote_field.through, '_meta'):\n", "            qualified_model_name = \"%s.%s\" % (\n", "                self.remote_field.through._meta.app_label, self.remote_field.through.__name__)\n", "        else:\n", "            qualified_model_name = self.remote_field.through\n", "\n", "        errors = []\n", "\n", "        if self.remote_field.through not in self.opts.apps.get_models(include_auto_created=True):\n", "            # The relationship model is not installed.\n", "            errors.append(\n", "                checks.Error(\n", "                    \"Field specifies a many-to-many relation through model \"\n", "                    \"'%s', which has not been installed.\" % qualified_model_name,\n", "                    obj=self,\n", "                    id='fields.E331',\n", "                )\n", "            )\n", "\n", "        else:\n", "            assert from_model is not None, (\n", "                \"ManyToManyField with intermediate \"\n", "                \"tables cannot be checked if you don't pass the model \"\n", "                \"where the field is attached to.\"\n", "            )\n", "            # Set some useful local variables\n", "            to_model = resolve_relation(from_model, self.remote_field.model)\n", "            from_model_name = from_model._meta.object_name\n", "            if isinstance(to_model, str):\n", "                to_model_name = to_model\n", "            else:\n", "                to_model_name = to_model._meta.object_name\n", "            relationship_model_name = self.remote_field.through._meta.object_name\n", "            self_referential = from_model == to_model\n", "            # Count foreign keys in intermediate model\n", "            if self_referential:\n", "                seen_self = sum(\n", "                    from_model == getattr(field.remote_field, 'model', None)\n", "                    for field in self.remote_field.through._meta.fields\n", "                )\n", "\n", "                if seen_self > 2 and not self.remote_field.through_fields:\n", "                    errors.append(\n", "                        checks.Error(\n", "                            \"The model is used as an intermediate model by \"\n", "                            \"'%s', but it has more than two foreign keys \"\n", "                            \"to '%s', which is ambiguous. You must specify \"\n", "                            \"which two foreign keys Django should use via the \"\n", "                            \"through_fields keyword argument.\" % (self, from_model_name),\n", "                            hint=\"Use through_fields to specify which two foreign keys Django should use.\",\n", "                            obj=self.remote_field.through,\n", "                            id='fields.E333',\n", "                        )\n", "                    )\n", "\n", "            else:\n", "                # Count foreign keys in relationship model\n", "                seen_from = sum(\n", "                    from_model == getattr(field.remote_field, 'model', None)\n", "                    for field in self.remote_field.through._meta.fields\n", "                )\n", "                seen_to = sum(\n", "                    to_model == getattr(field.remote_field, 'model', None)\n", "                    for field in self.remote_field.through._meta.fields\n", "                )\n", "\n", "                if seen_from > 1 and not self.remote_field.through_fields:\n", "                    errors.append(\n", "                        checks.Error(\n", "                            (\"The model is used as an intermediate model by \"\n", "                             \"'%s', but it has more than one foreign key \"\n", "                             \"from '%s', which is ambiguous. You must specify \"\n", "                             \"which foreign key Django should use via the \"\n", "                             \"through_fields keyword argument.\") % (self, from_model_name),\n", "                            hint=(\n", "                                'If you want to create a recursive relationship, '\n", "                                'use ForeignKey(\"%s\", symmetrical=False, through=\"%s\").'\n", "                            ) % (\n", "                                RECURSIVE_RELATIONSHIP_CONSTANT,\n", "                                relationship_model_name,\n", "                            ),\n", "                            obj=self,\n", "                            id='fields.E334',\n", "                        )\n", "                    )\n", "\n", "                if seen_to > 1 and not self.remote_field.through_fields:\n", "                    errors.append(\n", "                        checks.Error(\n", "                            \"The model is used as an intermediate model by \"\n", "                            \"'%s', but it has more than one foreign key \"\n", "                            \"to '%s', which is ambiguous. You must specify \"\n", "                            \"which foreign key Django should use via the \"\n", "                            \"through_fields keyword argument.\" % (self, to_model_name),\n", "                            hint=(\n", "                                'If you want to create a recursive relationship, '\n", "                                'use ForeignKey(\"%s\", symmetrical=False, through=\"%s\").'\n", "                            ) % (\n", "                                RECURSIVE_RELATIONSHIP_CONSTANT,\n", "                                relationship_model_name,\n", "                            ),\n", "                            obj=self,\n", "                            id='fields.E335',\n", "                        )\n", "                    )\n", "\n", "                if seen_from == 0 or seen_to == 0:\n", "                    errors.append(\n", "                        checks.Error(\n", "                            \"The model is used as an intermediate model by \"\n", "                            \"'%s', but it does not have a foreign key to '%s' or '%s'.\" % (\n", "                                self, from_model_name, to_model_name\n", "                            ),\n", "                            obj=self.remote_field.through,\n", "                            id='fields.E336',\n", "                        )\n", "                    )\n", "\n", "        # Validate `through_fields`.\n", "        if self.remote_field.through_fields is not None:\n", "            # Validate that we're given an iterable of at least two items\n", "            # and that none of them is \"falsy\".\n", "            if not (len(self.remote_field.through_fields) >= 2 and\n", "                    self.remote_field.through_fields[0] and self.remote_field.through_fields[1]):\n", "                errors.append(\n", "                    checks.Error(\n", "                        \"Field specifies 'through_fields' but does not provide \"\n", "                        \"the names of the two link fields that should be used \"\n", "                        \"for the relation through model '%s'.\" % qualified_model_name,\n", "                        hint=\"Make sure you specify 'through_fields' as through_fields=('field1', 'field2')\",\n", "                        obj=self,\n", "                        id='fields.E337',\n", "                    )\n", "                )\n", "\n", "            # Validate the given through fields -- they should be actual\n", "            # fields on the through model, and also be foreign keys to the\n", "            # expected models.\n", "            else:\n", "                assert from_model is not None, (\n", "                    \"ManyToManyField with intermediate \"\n", "                    \"tables cannot be checked if you don't pass the model \"\n", "                    \"where the field is attached to.\"\n", "                )\n", "\n", "                source, through, target = from_model, self.remote_field.through, self.remote_field.model\n", "                source_field_name, target_field_name = self.remote_field.through_fields[:2]\n", "\n", "                for field_name, related_model in ((source_field_name, source),\n", "                                                  (target_field_name, target)):\n", "\n", "                    possible_field_names = []\n", "                    for f in through._meta.fields:\n", "                        if hasattr(f, 'remote_field') and getattr(f.remote_field, 'model', None) == related_model:\n", "                            possible_field_names.append(f.name)\n", "                    if possible_field_names:\n", "                        hint = \"Did you mean one of the following foreign keys to '%s': %s?\" % (\n", "                            related_model._meta.object_name,\n", "                            ', '.join(possible_field_names),\n", "                        )\n", "                    else:\n", "                        hint = None\n", "\n", "                    try:\n", "                        field = through._meta.get_field(field_name)\n", "                    except exceptions.FieldDoesNotExist:\n", "                        errors.append(\n", "                            checks.Error(\n", "                                \"The intermediary model '%s' has no field '%s'.\"\n", "                                % (qualified_model_name, field_name),\n", "                                hint=hint,\n", "                                obj=self,\n", "                                id='fields.E338',\n", "                            )\n", "                        )\n", "                    else:\n", "                        if not (hasattr(field, 'remote_field') and\n", "                                getattr(field.remote_field, 'model', None) == related_model):\n", "                            errors.append(\n", "                                checks.Error(\n", "                                    \"'%s.%s' is not a foreign key to '%s'.\" % (\n", "                                        through._meta.object_name, field_name,\n", "                                        related_model._meta.object_name,\n", "                                    ),\n", "                                    hint=hint,\n", "                                    obj=self,\n", "                                    id='fields.E339',\n", "                                )\n", "                            )\n", "\n", "        return errors\n"]}]}]}