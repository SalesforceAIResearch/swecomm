{"instance_id": "django__django-15781", "identified_spans": [{"file_path": "django/core/management/base.py", "span_ids": ["CommandParser", "BaseCommand", "DjangoHelpFormatter"], "content": [{"span_id": "CommandParser", "start_line": 46, "end_line": 51, "content": ["class CommandParser(ArgumentParser):\n", "    \"\"\"\n", "    Customized ArgumentParser class to improve some error messages and prevent\n", "    SystemExit in several occasions, as SystemExit is unacceptable when a\n", "    command is called programmatically.\n", "    \"\"\"\n"]}, {"span_id": "BaseCommand", "start_line": 173, "end_line": 258, "content": ["class BaseCommand:\n", "    \"\"\"\n", "    The base class from which all management commands ultimately\n", "    derive.\n", "\n", "    Use this class if you want access to all of the mechanisms which\n", "    parse the command-line arguments and work out what code to call in\n", "    response; if you don't need to change any of that behavior,\n", "    consider using one of the subclasses defined in this file.\n", "\n", "    If you are interested in overriding/customizing various aspects of\n", "    the command-parsing and -execution behavior, the normal flow works\n", "    as follows:\n", "\n", "    1. ``django-admin`` or ``manage.py`` loads the command class\n", "       and calls its ``run_from_argv()`` method.\n", "\n", "    2. The ``run_from_argv()`` method calls ``create_parser()`` to get\n", "       an ``ArgumentParser`` for the arguments, parses them, performs\n", "       any environment changes requested by options like\n", "       ``pythonpath``, and then calls the ``execute()`` method,\n", "       passing the parsed arguments.\n", "\n", "    3. The ``execute()`` method attempts to carry out the command by\n", "       calling the ``handle()`` method with the parsed arguments; any\n", "       output produced by ``handle()`` will be printed to standard\n", "       output and, if the command is intended to produce a block of\n", "       SQL statements, will be wrapped in ``BEGIN`` and ``COMMIT``.\n", "\n", "    4. If ``handle()`` or ``execute()`` raised any exception (e.g.\n", "       ``CommandError``), ``run_from_argv()`` will  instead print an error\n", "       message to ``stderr``.\n", "\n", "    Thus, the ``handle()`` method is typically the starting point for\n", "    subclasses; many built-in commands and command types either place\n", "    all of their logic in ``handle()``, or perform some additional\n", "    parsing work in ``handle()`` and then delegate from it to more\n", "    specialized methods as needed.\n", "\n", "    Several attributes affect behavior at various steps along the way:\n", "\n", "    ``help``\n", "        A short description of the command, which will be printed in\n", "        help messages.\n", "\n", "    ``output_transaction``\n", "        A boolean indicating whether the command outputs SQL\n", "        statements; if ``True``, the output will automatically be\n", "        wrapped with ``BEGIN;`` and ``COMMIT;``. Default value is\n", "        ``False``.\n", "\n", "    ``requires_migrations_checks``\n", "        A boolean; if ``True``, the command prints a warning if the set of\n", "        migrations on disk don't match the migrations in the database.\n", "\n", "    ``requires_system_checks``\n", "        A list or tuple of tags, e.g. [Tags.staticfiles, Tags.models]. System\n", "        checks registered in the chosen tags will be checked for errors prior\n", "        to executing the command. The value '__all__' can be used to specify\n", "        that all system checks should be performed. Default value is '__all__'.\n", "\n", "        To validate an individual application's models\n", "        rather than all applications' models, call\n", "        ``self.check(app_configs)`` from ``handle()``, where ``app_configs``\n", "        is the list of application's configuration provided by the\n", "        app registry.\n", "\n", "    ``stealth_options``\n", "        A tuple of any options the command uses which aren't defined by the\n", "        argument parser.\n", "    \"\"\"\n", "\n", "    # Metadata about this command.\n", "    help = \"\"\n", "\n", "    # Configuration shortcuts that alter various logic.\n", "    _called_from_command_line = False\n", "    output_transaction = False  # Whether to wrap the output in a \"BEGIN; COMMIT;\"\n", "    requires_migrations_checks = False\n", "    requires_system_checks = \"__all__\"\n", "    # Arguments, common to all commands, which aren't defined by the argument\n", "    # parser.\n", "    base_stealth_options = (\"stderr\", \"stdout\")\n", "    # Command-specific options not defined by the argument parser.\n", "    stealth_options = ()\n", "    suppressed_base_arguments = set()\n"]}, {"span_id": "DjangoHelpFormatter", "start_line": 105, "end_line": 120, "content": ["class DjangoHelpFormatter(HelpFormatter):\n", "    \"\"\"\n", "    Customized formatter so that command-specific arguments appear in the\n", "    --help output before arguments common to all commands.\n", "    \"\"\"\n", "\n", "    show_last = {\n", "        \"--version\",\n", "        \"--verbosity\",\n", "        \"--traceback\",\n", "        \"--settings\",\n", "        \"--pythonpath\",\n", "        \"--no-color\",\n", "        \"--force-color\",\n", "        \"--skip-checks\",\n", "    }\n"]}]}]}