{"instance_id": "django__django-14667", "identified_spans": [{"file_path": "django/db/models/query.py", "span_ids": ["QuerySet.only", "QuerySet.defer"], "content": [{"span_id": "QuerySet.only", "start_line": 1227, "end_line": 1246, "content": ["    def only(self, *fields):\n", "        \"\"\"\n", "        Essentially, the opposite of defer(). Only the fields passed into this\n", "        method and that are not already specified as deferred are loaded\n", "        immediately when the queryset is evaluated.\n", "        \"\"\"\n", "        self._not_support_combined_queries('only')\n", "        if self._fields is not None:\n", "            raise TypeError(\"Cannot call only() after .values() or .values_list()\")\n", "        if fields == (None,):\n", "            # Can only pass None to defer(), not only(), as the rest option.\n", "            # That won't stop people trying to do this, so let's be explicit.\n", "            raise TypeError(\"Cannot pass None as an argument to only().\")\n", "        for field in fields:\n", "            field = field.split(LOOKUP_SEP, 1)[0]\n", "            if field in self.query._filtered_relations:\n", "                raise ValueError('only() is not supported with FilteredRelation.')\n", "        clone = self._chain()\n", "        clone.query.add_immediate_loading(fields)\n", "        return clone\n"]}, {"span_id": "QuerySet.defer", "start_line": 1210, "end_line": 1225, "content": ["    def defer(self, *fields):\n", "        \"\"\"\n", "        Defer the loading of data for certain fields until they are accessed.\n", "        Add the set of deferred fields to any existing set of deferred fields.\n", "        The only exception to this is if None is passed in as the only\n", "        parameter, in which case removal all deferrals.\n", "        \"\"\"\n", "        self._not_support_combined_queries('defer')\n", "        if self._fields is not None:\n", "            raise TypeError(\"Cannot call defer() after .values() or .values_list()\")\n", "        clone = self._chain()\n", "        if fields == (None,):\n", "            clone.query.clear_deferred_loading()\n", "        else:\n", "            clone.query.add_deferred_loading(fields)\n", "        return clone\n"]}]}, {"file_path": "django/db/models/sql/query.py", "span_ids": ["Query.add_immediate_loading", "Query.add_deferred_loading"], "content": [{"span_id": "Query.add_immediate_loading", "start_line": 2091, "end_line": 2113, "content": ["    def add_immediate_loading(self, field_names):\n", "        \"\"\"\n", "        Add the given list of model field names to the set of fields to\n", "        retrieve when the SQL is executed (\"immediate loading\" fields). The\n", "        field names replace any existing immediate loading field names. If\n", "        there are field names already specified for deferred loading, remove\n", "        those names from the new field_names before storing the new names\n", "        for immediate loading. (That is, immediate loading overrides any\n", "        existing immediate values, but respects existing deferrals.)\n", "        \"\"\"\n", "        existing, defer = self.deferred_loading\n", "        field_names = set(field_names)\n", "        if 'pk' in field_names:\n", "            field_names.remove('pk')\n", "            field_names.add(self.get_meta().pk.name)\n", "\n", "        if defer:\n", "            # Remove any existing deferred names from the current set before\n", "            # setting the new names.\n", "            self.deferred_loading = field_names.difference(existing), False\n", "        else:\n", "            # Replace any existing \"immediate load\" field names.\n", "            self.deferred_loading = frozenset(field_names), False\n"]}, {"span_id": "Query.add_deferred_loading", "start_line": 2071, "end_line": 2089, "content": ["    def add_deferred_loading(self, field_names):\n", "        \"\"\"\n", "        Add the given list of model field names to the set of fields to\n", "        exclude from loading from the database when automatic column selection\n", "        is done. Add the new field names to any existing field names that\n", "        are deferred (or removed from any existing field names that are marked\n", "        as the only ones for immediate loading).\n", "        \"\"\"\n", "        # Fields on related models are stored in the literal double-underscore\n", "        # format, so that we can use a set datastructure. We do the foo__bar\n", "        # splitting and handling when computing the SQL column names (as part of\n", "        # get_columns()).\n", "        existing, defer = self.deferred_loading\n", "        if defer:\n", "            # Add to existing deferred names.\n", "            self.deferred_loading = existing.union(field_names), True\n", "        else:\n", "            # Remove names from the set of any existing \"immediate load\" names.\n", "            self.deferred_loading = existing.difference(field_names), False\n"]}]}]}