{"instance_id": "sympy__sympy-19007", "identified_spans": [{"file_path": "sympy/matrices/expressions/blockmatrix.py", "span_ids": ["BlockMatrix._entry"], "content": [{"span_id": "BlockMatrix._entry", "start_line": 235, "end_line": 247, "content": ["    def _entry(self, i, j, **kwargs):\n", "        # Find row entry\n", "        for row_block, numrows in enumerate(self.rowblocksizes):\n", "            if (i < numrows) != False:\n", "                break\n", "            else:\n", "                i -= numrows\n", "        for col_block, numcols in enumerate(self.colblocksizes):\n", "            if (j < numcols) != False:\n", "                break\n", "            else:\n", "                j -= numcols\n", "        return self.blocks[row_block, col_block][i, j]\n"]}]}, {"file_path": "sympy/matrices/expressions/matexpr.py", "span_ids": ["MatrixExpr.__getitem__"], "content": [{"span_id": "MatrixExpr.__getitem__", "start_line": 285, "end_line": 318, "content": ["    def __getitem__(self, key):\n", "        if not isinstance(key, tuple) and isinstance(key, slice):\n", "            from sympy.matrices.expressions.slice import MatrixSlice\n", "            return MatrixSlice(self, key, (0, None, 1))\n", "        if isinstance(key, tuple) and len(key) == 2:\n", "            i, j = key\n", "            if isinstance(i, slice) or isinstance(j, slice):\n", "                from sympy.matrices.expressions.slice import MatrixSlice\n", "                return MatrixSlice(self, i, j)\n", "            i, j = _sympify(i), _sympify(j)\n", "            if self.valid_index(i, j) != False:\n", "                return self._entry(i, j)\n", "            else:\n", "                raise IndexError(\"Invalid indices (%s, %s)\" % (i, j))\n", "        elif isinstance(key, (SYMPY_INTS, Integer)):\n", "            # row-wise decomposition of matrix\n", "            rows, cols = self.shape\n", "            # allow single indexing if number of columns is known\n", "            if not isinstance(cols, Integer):\n", "                raise IndexError(filldedent('''\n", "                    Single indexing is only supported when the number\n", "                    of columns is known.'''))\n", "            key = _sympify(key)\n", "            i = key // cols\n", "            j = key % cols\n", "            if self.valid_index(i, j) != False:\n", "                return self._entry(i, j)\n", "            else:\n", "                raise IndexError(\"Invalid index %s\" % key)\n", "        elif isinstance(key, (Symbol, Expr)):\n", "                raise IndexError(filldedent('''\n", "                    Only integers may be used when addressing the matrix\n", "                    with a single index.'''))\n", "        raise IndexError(\"Invalid index, wanted %s[i,j]\" % self)\n"]}]}]}