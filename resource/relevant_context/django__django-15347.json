{"instance_id": "django__django-15347", "identified_spans": [{"file_path": "django/contrib/messages/storage/base.py", "span_ids": ["Message._prepare", "Message"], "content": [{"span_id": "Message._prepare", "start_line": 19, "end_line": 25, "content": ["    def _prepare(self):\n", "        \"\"\"\n", "        Prepare the message for serialization by forcing the ``message``\n", "        and ``extra_tags`` to str in case they are lazy translations.\n", "        \"\"\"\n", "        self.message = str(self.message)\n", "        self.extra_tags = str(self.extra_tags) if self.extra_tags is not None else None\n"]}, {"span_id": "Message", "start_line": 7, "end_line": 12, "content": ["class Message:\n", "    \"\"\"\n", "    Represent an actual message that can be stored in any of the supported\n", "    storage classes (typically session- or cookie-based) and rendered in a view\n", "    or template.\n", "    \"\"\"\n"]}]}, {"file_path": "django/contrib/messages/storage/cookie.py", "span_ids": ["MessageEncoder", "MessageDecoder", "MessageEncoder.default", "MessageDecoder.decode"], "content": [{"span_id": "MessageEncoder", "start_line": 11, "end_line": 15, "content": ["class MessageEncoder(json.JSONEncoder):\n", "    \"\"\"\n", "    Compactly serialize instances of the ``Message`` class as JSON.\n", "    \"\"\"\n", "    message_key = '__json_message'\n"]}, {"span_id": "MessageDecoder", "start_line": 28, "end_line": 31, "content": ["class MessageDecoder(json.JSONDecoder):\n", "    \"\"\"\n", "    Decode JSON that includes serialized ``Message`` instances.\n", "    \"\"\"\n"]}, {"span_id": "MessageEncoder.default", "start_line": 17, "end_line": 25, "content": ["    def default(self, obj):\n", "        if isinstance(obj, Message):\n", "            # Using 0/1 here instead of False/True to produce more compact json\n", "            is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n", "            message = [self.message_key, is_safedata, obj.level, obj.message]\n", "            if obj.extra_tags:\n", "                message.append(obj.extra_tags)\n", "            return message\n", "        return super().default(obj)\n"]}, {"span_id": "MessageDecoder.decode", "start_line": 45, "end_line": 47, "content": ["    def decode(self, s, **kwargs):\n", "        decoded = super().decode(s, **kwargs)\n", "        return self.process_messages(decoded)\n"]}]}]}