{"instance_id": "sympy__sympy-20639", "identified_spans": [{"file_path": "sympy/printing/pretty/pretty.py", "span_ids": ["PrettyPrinter._print_ExpBase", "PrettyPrinter._print_Pow"], "content": [{"span_id": "PrettyPrinter._print_ExpBase", "start_line": 1466, "end_line": 1470, "content": ["    def _print_ExpBase(self, e):\n", "        # TODO should exp_polar be printed differently?\n", "        #      what about exp_polar(0), exp_polar(1)?\n", "        base = prettyForm(pretty_atom('Exp1', 'e'))\n", "        return base ** self._print(e.args[0])\n"]}, {"span_id": "PrettyPrinter._print_Pow", "start_line": 1950, "end_line": 1965, "content": ["    def _print_Pow(self, power):\n", "        from sympy.simplify.simplify import fraction\n", "        b, e = power.as_base_exp()\n", "        if power.is_commutative:\n", "            if e is S.NegativeOne:\n", "                return prettyForm(\"1\")/self._print(b)\n", "            n, d = fraction(e)\n", "            if n is S.One and d.is_Atom and not e.is_Integer and self._settings['root_notation']:\n", "                return self._print_nth_root(b, e)\n", "            if e.is_Rational and e < 0:\n", "                return prettyForm(\"1\")/self._print(Pow(b, -e, evaluate=False))\n", "\n", "        if b.is_Relational:\n", "            return prettyForm(*self._print(b).parens()).__pow__(self._print(e))\n", "\n", "        return self._print(b)**self._print(e)\n"]}]}, {"file_path": "sympy/printing/pretty/stringpict.py", "span_ids": ["prettyForm.__pow__"], "content": [{"span_id": "prettyForm.__pow__", "start_line": 479, "end_line": 507, "content": ["    def __pow__(self, b):\n", "        \"\"\"Make a pretty power.\n", "        \"\"\"\n", "        a = self\n", "        use_inline_func_form = False\n", "        if b.binding == prettyForm.POW:\n", "            b = stringPict(*b.parens())\n", "        if a.binding > prettyForm.FUNC:\n", "            a = stringPict(*a.parens())\n", "        elif a.binding == prettyForm.FUNC:\n", "            # heuristic for when to use inline power\n", "            if b.height() > 1:\n", "                a = stringPict(*a.parens())\n", "            else:\n", "                use_inline_func_form = True\n", "\n", "        if use_inline_func_form:\n", "            #         2\n", "            #  sin  +   + (x)\n", "            b.baseline = a.prettyFunc.baseline + b.height()\n", "            func = stringPict(*a.prettyFunc.right(b))\n", "            return prettyForm(*func.right(a.prettyArgs))\n", "        else:\n", "            #      2    <-- top\n", "            # (x+y)     <-- bot\n", "            top = stringPict(*b.left(' '*a.width()))\n", "            bot = stringPict(*a.right(' '*b.width()))\n", "\n", "        return prettyForm(binding=prettyForm.POW, *bot.above(top))\n"]}]}]}