{"instance_id": "django__django-16816", "identified_spans": [{"file_path": "django/contrib/admin/checks.py", "span_ids": ["ModelAdminChecks._check_list_display_item"], "content": [{"span_id": "ModelAdminChecks._check_list_display_item", "start_line": 893, "end_line": 930, "content": ["    def _check_list_display_item(self, obj, item, label):\n", "        if callable(item):\n", "            return []\n", "        elif hasattr(obj, item):\n", "            return []\n", "        try:\n", "            field = obj.model._meta.get_field(item)\n", "        except FieldDoesNotExist:\n", "            try:\n", "                field = getattr(obj.model, item)\n", "            except AttributeError:\n", "                return [\n", "                    checks.Error(\n", "                        \"The value of '%s' refers to '%s', which is not a \"\n", "                        \"callable, an attribute of '%s', or an attribute or \"\n", "                        \"method on '%s'.\"\n", "                        % (\n", "                            label,\n", "                            item,\n", "                            obj.__class__.__name__,\n", "                            obj.model._meta.label,\n", "                        ),\n", "                        obj=obj.__class__,\n", "                        id=\"admin.E108\",\n", "                    )\n", "                ]\n", "        if isinstance(field, models.ManyToManyField) or (\n", "            getattr(field, \"rel\", None) and field.rel.field.many_to_one\n", "        ):\n", "            return [\n", "                checks.Error(\n", "                    f\"The value of '{label}' must not be a many-to-many field or a \"\n", "                    f\"reverse foreign key.\",\n", "                    obj=obj.__class__,\n", "                    id=\"admin.E109\",\n", "                )\n", "            ]\n", "        return []\n"]}]}, {"file_path": "django/contrib/admin/options.py", "span_ids": ["ModelAdmin"], "content": [{"span_id": "ModelAdmin", "start_line": 630, "end_line": 666, "content": ["class ModelAdmin(BaseModelAdmin):\n", "    \"\"\"Encapsulate all admin options and functionality for a given model.\"\"\"\n", "\n", "    list_display = (\"__str__\",)\n", "    list_display_links = ()\n", "    list_filter = ()\n", "    list_select_related = False\n", "    list_per_page = 100\n", "    list_max_show_all = 200\n", "    list_editable = ()\n", "    search_fields = ()\n", "    search_help_text = None\n", "    date_hierarchy = None\n", "    save_as = False\n", "    save_as_continue = True\n", "    save_on_top = False\n", "    paginator = Paginator\n", "    preserve_filters = True\n", "    show_facets = ShowFacets.ALLOW\n", "    inlines = ()\n", "\n", "    # Custom templates (designed to be over-ridden in subclasses)\n", "    add_form_template = None\n", "    change_form_template = None\n", "    change_list_template = None\n", "    delete_confirmation_template = None\n", "    delete_selected_confirmation_template = None\n", "    object_history_template = None\n", "    popup_response_template = None\n", "\n", "    # Actions\n", "    actions = ()\n", "    action_form = helpers.ActionForm\n", "    actions_on_top = True\n", "    actions_on_bottom = False\n", "    actions_selection_counter = True\n", "    checks_class = ModelAdminChecks\n"]}]}, {"file_path": "django/contrib/admin/utils.py", "span_ids": ["label_for_field"], "content": [{"span_id": "label_for_field", "start_line": 340, "end_line": 402, "content": ["def label_for_field(name, model, model_admin=None, return_attr=False, form=None):\n", "    \"\"\"\n", "    Return a sensible label for a field name. The name can be a callable,\n", "    property (but not created with @property decorator), or the name of an\n", "    object's attribute, as well as a model field. If return_attr is True, also\n", "    return the resolved attribute (which could be a callable). This will be\n", "    None if (and only if) the name refers to a field.\n", "    \"\"\"\n", "    attr = None\n", "    try:\n", "        field = _get_non_gfk_field(model._meta, name)\n", "        try:\n", "            label = field.verbose_name\n", "        except AttributeError:\n", "            # field is likely a ForeignObjectRel\n", "            label = field.related_model._meta.verbose_name\n", "    except FieldDoesNotExist:\n", "        if name == \"__str__\":\n", "            label = str(model._meta.verbose_name)\n", "            attr = str\n", "        else:\n", "            if callable(name):\n", "                attr = name\n", "            elif hasattr(model_admin, name):\n", "                attr = getattr(model_admin, name)\n", "            elif hasattr(model, name):\n", "                attr = getattr(model, name)\n", "            elif form and name in form.fields:\n", "                attr = form.fields[name]\n", "            else:\n", "                message = \"Unable to lookup '%s' on %s\" % (\n", "                    name,\n", "                    model._meta.object_name,\n", "                )\n", "                if model_admin:\n", "                    message += \" or %s\" % model_admin.__class__.__name__\n", "                if form:\n", "                    message += \" or %s\" % form.__class__.__name__\n", "                raise AttributeError(message)\n", "\n", "            if hasattr(attr, \"short_description\"):\n", "                label = attr.short_description\n", "            elif (\n", "                isinstance(attr, property)\n", "                and hasattr(attr, \"fget\")\n", "                and hasattr(attr.fget, \"short_description\")\n", "            ):\n", "                label = attr.fget.short_description\n", "            elif callable(attr):\n", "                if attr.__name__ == \"<lambda>\":\n", "                    label = \"--\"\n", "                else:\n", "                    label = pretty_name(attr.__name__)\n", "            else:\n", "                label = pretty_name(name)\n", "    except FieldIsAForeignKeyColumnName:\n", "        label = pretty_name(name)\n", "        attr = name\n", "\n", "    if return_attr:\n", "        return (label, attr)\n", "    else:\n", "        return label\n"]}]}]}