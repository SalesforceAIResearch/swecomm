{"instance_id": "sympy__sympy-13031", "identified_spans": [{"file_path": "sympy/matrices/common.py", "span_ids": ["MatrixShaping", "MatrixShaping.row_join", "MatrixShaping.hstack"], "content": [{"span_id": "MatrixShaping", "start_line": 73, "end_line": 74, "content": ["class MatrixShaping(MatrixRequired):\n", "    \"\"\"Provides basic matrix shaping and extracting of submatrices\"\"\"\n"]}, {"span_id": "MatrixShaping.row_join", "start_line": 457, "end_line": 485, "content": ["    def row_join(self, other):\n", "        \"\"\"Concatenates two matrices along self's last and rhs's first column\n", "\n", "        Examples\n", "        ========\n", "\n", "        >>> from sympy import zeros, ones\n", "        >>> M = zeros(3)\n", "        >>> V = ones(3, 1)\n", "        >>> M.row_join(V)\n", "        Matrix([\n", "        [0, 0, 0, 1],\n", "        [0, 0, 0, 1],\n", "        [0, 0, 0, 1]])\n", "\n", "        See Also\n", "        ========\n", "\n", "        row\n", "        col_join\n", "        \"\"\"\n", "        # A null matrix can always be stacked (see  #10770)\n", "        if self.cols == 0 and self.rows != other.rows:\n", "            return self._new(other.rows, 0, []).row_join(other)\n", "\n", "        if self.rows != other.rows:\n", "            raise ShapeError(\n", "                \"`self` and `rhs` must have the same number of rows.\")\n", "        return self._eval_row_join(other)\n"]}, {"span_id": "MatrixShaping.hstack", "start_line": 363, "end_line": 381, "content": ["    @classmethod\n", "    def hstack(cls, *args):\n", "        \"\"\"Return a matrix formed by joining args horizontally (i.e.\n", "        by repeated application of row_join).\n", "\n", "        Examples\n", "        ========\n", "\n", "        >>> from sympy.matrices import Matrix, eye\n", "        >>> Matrix.hstack(eye(2), 2*eye(2))\n", "        Matrix([\n", "        [1, 0, 2, 0],\n", "        [0, 1, 0, 2]])\n", "        \"\"\"\n", "        if len(args) == 0:\n", "            return cls._new()\n", "\n", "        kls = type(args[0])\n", "        return reduce(kls.row_join, args)\n"]}]}]}