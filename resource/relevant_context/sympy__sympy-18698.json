{"instance_id": "sympy__sympy-18698", "identified_spans": [{"file_path": "sympy/polys/polytools.py", "span_ids": ["Poly.sqf_list", "_generic_factor_list"], "content": [{"span_id": "Poly.sqf_list", "start_line": 3210, "end_line": 3237, "content": ["    def sqf_list(f, all=False):\n", "        \"\"\"\n", "        Returns a list of square-free factors of ``f``.\n", "\n", "        Examples\n", "        ========\n", "\n", "        >>> from sympy import Poly\n", "        >>> from sympy.abc import x\n", "\n", "        >>> f = 2*x**5 + 16*x**4 + 50*x**3 + 76*x**2 + 56*x + 16\n", "\n", "        >>> Poly(f).sqf_list()\n", "        (2, [(Poly(x + 1, x, domain='ZZ'), 2),\n", "             (Poly(x + 2, x, domain='ZZ'), 3)])\n", "\n", "        >>> Poly(f).sqf_list(all=True)\n", "        (2, [(Poly(1, x, domain='ZZ'), 1),\n", "             (Poly(x + 1, x, domain='ZZ'), 2),\n", "             (Poly(x + 2, x, domain='ZZ'), 3)])\n", "\n", "        \"\"\"\n", "        if hasattr(f.rep, 'sqf_list'):\n", "            coeff, factors = f.rep.sqf_list(all)\n", "        else:  # pragma: no cover\n", "            raise OperationNotSupported(f, 'sqf_list')\n", "\n", "        return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors]\n"]}, {"span_id": "_generic_factor_list", "start_line": 5971, "end_line": 6012, "content": ["def _generic_factor_list(expr, gens, args, method):\n", "    \"\"\"Helper function for :func:`sqf_list` and :func:`factor_list`. \"\"\"\n", "    options.allowed_flags(args, ['frac', 'polys'])\n", "    opt = options.build_options(gens, args)\n", "\n", "    expr = sympify(expr)\n", "\n", "    if isinstance(expr, (Expr, Poly)):\n", "        if isinstance(expr, Poly):\n", "            numer, denom = expr, 1\n", "        else:\n", "            numer, denom = together(expr).as_numer_denom()\n", "\n", "        cp, fp = _symbolic_factor_list(numer, opt, method)\n", "        cq, fq = _symbolic_factor_list(denom, opt, method)\n", "\n", "        if fq and not opt.frac:\n", "            raise PolynomialError(\"a polynomial expected, got %s\" % expr)\n", "\n", "        _opt = opt.clone(dict(expand=True))\n", "\n", "        for factors in (fp, fq):\n", "            for i, (f, k) in enumerate(factors):\n", "                if not f.is_Poly:\n", "                    f, _ = _poly_from_expr(f, _opt)\n", "                    factors[i] = (f, k)\n", "\n", "        fp = _sorted_factors(fp, method)\n", "        fq = _sorted_factors(fq, method)\n", "\n", "        if not opt.polys:\n", "            fp = [(f.as_expr(), k) for f, k in fp]\n", "            fq = [(f.as_expr(), k) for f, k in fq]\n", "\n", "        coeff = cp/cq\n", "\n", "        if not opt.frac:\n", "            return coeff, fp\n", "        else:\n", "            return coeff, fp, fq\n", "    else:\n", "        raise PolynomialError(\"a polynomial expected, got %s\" % expr)\n"]}]}]}