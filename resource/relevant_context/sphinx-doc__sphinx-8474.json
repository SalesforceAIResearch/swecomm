{"instance_id": "sphinx-doc__sphinx-8474", "identified_spans": [{"file_path": "sphinx/transforms/__init__.py", "span_ids": ["AutoNumbering.apply", "AutoNumbering"], "content": [{"span_id": "AutoNumbering.apply", "start_line": 172, "end_line": 179, "content": ["    def apply(self, **kwargs: Any) -> None:\n", "        domain = self.env.get_domain('std')  # type: StandardDomain\n", "\n", "        for node in self.document.traverse(nodes.Element):\n", "            if (domain.is_enumerable_node(node) and\n", "                    domain.get_numfig_title(node) is not None and\n", "                    node['ids'] == []):\n", "                self.document.note_implicit_target(node)\n"]}, {"span_id": "AutoNumbering", "start_line": 166, "end_line": 170, "content": ["class AutoNumbering(SphinxTransform):\n", "    \"\"\"\n", "    Register IDs of tables, figures and literal_blocks to assign numbers.\n", "    \"\"\"\n", "    default_priority = 210\n"]}]}, {"file_path": "sphinx/writers/latex.py", "span_ids": ["LaTeXTranslator", "LaTeXTranslator.visit_table", "LaTeXTranslator.generate_numfig_format"], "content": [{"span_id": "LaTeXTranslator", "start_line": 274, "end_line": 282, "content": ["class LaTeXTranslator(SphinxTranslator):\n", "    builder = None  # type: LaTeXBuilder\n", "\n", "    secnumdepth = 2  # legacy sphinxhowto.cls uses this, whereas article.cls\n", "    # default is originally 3. For book/report, 2 is already LaTeX default.\n", "    ignore_missing_images = False\n", "\n", "    # sphinx specific document classes\n", "    docclasses = ('howto', 'manual')\n"]}, {"span_id": "LaTeXTranslator.visit_table", "start_line": 857, "end_line": 878, "content": ["    def visit_table(self, node: Element) -> None:\n", "        if len(self.tables) == 1:\n", "            if self.table.get_table_type() == 'longtable':\n", "                raise UnsupportedError(\n", "                    '%s:%s: longtable does not support nesting a table.' %\n", "                    (self.curfilestack[-1], node.line or ''))\n", "            else:\n", "                # change type of parent table to tabular\n", "                # see https://groups.google.com/d/msg/sphinx-users/7m3NeOBixeo/9LKP2B4WBQAJ\n", "                self.table.has_problematic = True\n", "        elif len(self.tables) > 2:\n", "            raise UnsupportedError(\n", "                '%s:%s: deeply nested tables are not implemented.' %\n", "                (self.curfilestack[-1], node.line or ''))\n", "\n", "        self.tables.append(Table(node))\n", "        if self.next_table_colspec:\n", "            self.table.colspec = '{%s}\\n' % self.next_table_colspec\n", "            if 'colwidths-given' in node.get('classes', []):\n", "                logger.info(__('both tabularcolumns and :widths: option are given. '\n", "                               ':widths: is ignored.'), location=node)\n", "        self.next_table_colspec = None\n"]}, {"span_id": "LaTeXTranslator.generate_numfig_format", "start_line": 2086, "end_line": 2121, "content": ["    def generate_numfig_format(self, builder: \"LaTeXBuilder\") -> str:\n", "        warnings.warn('generate_numfig_format() is deprecated.',\n", "                      RemovedInSphinx40Warning, stacklevel=2)\n", "        ret = []  # type: List[str]\n", "        figure = self.builder.config.numfig_format['figure'].split('%s', 1)\n", "        if len(figure) == 1:\n", "            ret.append('\\\\def\\\\fnum@figure{%s}\\n' % self.escape(figure[0]).strip())\n", "        else:\n", "            definition = escape_abbr(self.escape(figure[0]))\n", "            ret.append(self.babel_renewcommand('\\\\figurename', definition))\n", "            ret.append('\\\\makeatletter\\n')\n", "            ret.append('\\\\def\\\\fnum@figure{\\\\figurename\\\\thefigure{}%s}\\n' %\n", "                       self.escape(figure[1]))\n", "            ret.append('\\\\makeatother\\n')\n", "\n", "        table = self.builder.config.numfig_format['table'].split('%s', 1)\n", "        if len(table) == 1:\n", "            ret.append('\\\\def\\\\fnum@table{%s}\\n' % self.escape(table[0]).strip())\n", "        else:\n", "            definition = escape_abbr(self.escape(table[0]))\n", "            ret.append(self.babel_renewcommand('\\\\tablename', definition))\n", "            ret.append('\\\\makeatletter\\n')\n", "            ret.append('\\\\def\\\\fnum@table{\\\\tablename\\\\thetable{}%s}\\n' %\n", "                       self.escape(table[1]))\n", "            ret.append('\\\\makeatother\\n')\n", "\n", "        codeblock = self.builder.config.numfig_format['code-block'].split('%s', 1)\n", "        if len(codeblock) == 1:\n", "            pass  # FIXME\n", "        else:\n", "            definition = self.escape(codeblock[0]).strip()\n", "            ret.append(self.babel_renewcommand('\\\\literalblockname', definition))\n", "            if codeblock[1]:\n", "                pass  # FIXME\n", "\n", "        return ''.join(ret)\n"]}]}]}