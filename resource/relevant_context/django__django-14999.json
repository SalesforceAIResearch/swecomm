{"instance_id": "django__django-14999", "identified_spans": [{"file_path": "django/db/backends/base/schema.py", "span_ids": ["BaseDatabaseSchemaEditor.alter_db_table"], "content": [{"span_id": "BaseDatabaseSchemaEditor.alter_db_table", "start_line": 468, "end_line": 481, "content": ["    def alter_db_table(self, model, old_db_table, new_db_table):\n", "        \"\"\"Rename the table a model points to.\"\"\"\n", "        if (old_db_table == new_db_table or\n", "            (self.connection.features.ignores_table_name_case and\n", "                old_db_table.lower() == new_db_table.lower())):\n", "            return\n", "        self.execute(self.sql_rename_table % {\n", "            \"old_table\": self.quote_name(old_db_table),\n", "            \"new_table\": self.quote_name(new_db_table),\n", "        })\n", "        # Rename all references to the old table name.\n", "        for sql in self.deferred_sql:\n", "            if isinstance(sql, Statement):\n", "                sql.rename_table_references(old_db_table, new_db_table)\n"]}]}, {"file_path": "django/db/migrations/operations/models.py", "span_ids": ["RenameModel", "RenameModel.database_forwards"], "content": [{"span_id": "RenameModel", "start_line": 289, "end_line": 290, "content": ["class RenameModel(ModelOperation):\n", "    \"\"\"Rename a model.\"\"\"\n"]}, {"span_id": "RenameModel.database_forwards", "start_line": 319, "end_line": 368, "content": ["    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n", "        new_model = to_state.apps.get_model(app_label, self.new_name)\n", "        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n", "            old_model = from_state.apps.get_model(app_label, self.old_name)\n", "            # Move the main table\n", "            schema_editor.alter_db_table(\n", "                new_model,\n", "                old_model._meta.db_table,\n", "                new_model._meta.db_table,\n", "            )\n", "            # Alter the fields pointing to us\n", "            for related_object in old_model._meta.related_objects:\n", "                if related_object.related_model == old_model:\n", "                    model = new_model\n", "                    related_key = (app_label, self.new_name_lower)\n", "                else:\n", "                    model = related_object.related_model\n", "                    related_key = (\n", "                        related_object.related_model._meta.app_label,\n", "                        related_object.related_model._meta.model_name,\n", "                    )\n", "                to_field = to_state.apps.get_model(\n", "                    *related_key\n", "                )._meta.get_field(related_object.field.name)\n", "                schema_editor.alter_field(\n", "                    model,\n", "                    related_object.field,\n", "                    to_field,\n", "                )\n", "            # Rename M2M fields whose name is based on this model's name.\n", "            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n", "            for (old_field, new_field) in fields:\n", "                # Skip self-referential fields as these are renamed above.\n", "                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n", "                    continue\n", "                # Rename the M2M table that's based on this model's name.\n", "                old_m2m_model = old_field.remote_field.through\n", "                new_m2m_model = new_field.remote_field.through\n", "                schema_editor.alter_db_table(\n", "                    new_m2m_model,\n", "                    old_m2m_model._meta.db_table,\n", "                    new_m2m_model._meta.db_table,\n", "                )\n", "                # Rename the column in the M2M table that's based on this\n", "                # model's name.\n", "                schema_editor.alter_field(\n", "                    new_m2m_model,\n", "                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n", "                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n", "                )\n"]}]}, {"file_path": "django/db/migrations/state.py", "span_ids": ["ProjectState.rename_model"], "content": [{"span_id": "ProjectState.rename_model", "start_line": 133, "end_line": 168, "content": ["    def rename_model(self, app_label, old_name, new_name):\n", "        # Add a new model.\n", "        old_name_lower = old_name.lower()\n", "        new_name_lower = new_name.lower()\n", "        renamed_model = self.models[app_label, old_name_lower].clone()\n", "        renamed_model.name = new_name\n", "        self.models[app_label, new_name_lower] = renamed_model\n", "        # Repoint all fields pointing to the old model to the new one.\n", "        old_model_tuple = (app_label, old_name_lower)\n", "        new_remote_model = f'{app_label}.{new_name}'\n", "        to_reload = set()\n", "        for model_state, name, field, reference in get_references(self, old_model_tuple):\n", "            changed_field = None\n", "            if reference.to:\n", "                changed_field = field.clone()\n", "                changed_field.remote_field.model = new_remote_model\n", "            if reference.through:\n", "                if changed_field is None:\n", "                    changed_field = field.clone()\n", "                changed_field.remote_field.through = new_remote_model\n", "            if changed_field:\n", "                model_state.fields[name] = changed_field\n", "                to_reload.add((model_state.app_label, model_state.name_lower))\n", "        if self._relations is not None:\n", "            old_name_key = app_label, old_name_lower\n", "            new_name_key = app_label, new_name_lower\n", "            if old_name_key in self._relations:\n", "                self._relations[new_name_key] = self._relations.pop(old_name_key)\n", "            for model_relations in self._relations.values():\n", "                if old_name_key in model_relations:\n", "                    model_relations[new_name_key] = model_relations.pop(old_name_key)\n", "        # Reload models related to old model before removing the old model.\n", "        self.reload_models(to_reload, delay=True)\n", "        # Remove the old model.\n", "        self.remove_model(app_label, old_name_lower)\n", "        self.reload_model(app_label, new_name_lower, delay=True)\n"]}]}]}