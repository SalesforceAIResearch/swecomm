{"instance_id": "sympy__sympy-14774", "identified_spans": [{"file_path": "sympy/printing/latex.py", "span_ids": ["LatexPrinter._print_Function"], "content": [{"span_id": "LatexPrinter._print_Function", "start_line": 715, "end_line": 782, "content": ["    def _print_Function(self, expr, exp=None):\n", "        r'''\n", "        Render functions to LaTeX, handling functions that LaTeX knows about\n", "        e.g., sin, cos, ... by using the proper LaTeX command (\\sin, \\cos, ...).\n", "        For single-letter function names, render them as regular LaTeX math\n", "        symbols. For multi-letter function names that LaTeX does not know\n", "        about, (e.g., Li, sech) use \\operatorname{} so that the function name\n", "        is rendered in Roman font and LaTeX handles spacing properly.\n", "\n", "        expr is the expression involving the function\n", "        exp is an exponent\n", "        '''\n", "        func = expr.func.__name__\n", "        if hasattr(self, '_print_' + func) and \\\n", "            not isinstance(expr.func, UndefinedFunction):\n", "            return getattr(self, '_print_' + func)(expr, exp)\n", "        else:\n", "            args = [ str(self._print(arg)) for arg in expr.args ]\n", "            # How inverse trig functions should be displayed, formats are:\n", "            # abbreviated: asin, full: arcsin, power: sin^-1\n", "            inv_trig_style = self._settings['inv_trig_style']\n", "            # If we are dealing with a power-style inverse trig function\n", "            inv_trig_power_case = False\n", "            # If it is applicable to fold the argument brackets\n", "            can_fold_brackets = self._settings['fold_func_brackets'] and \\\n", "                len(args) == 1 and \\\n", "                not self._needs_function_brackets(expr.args[0])\n", "\n", "            inv_trig_table = [\"asin\", \"acos\", \"atan\", \"acot\"]\n", "\n", "            # If the function is an inverse trig function, handle the style\n", "            if func in inv_trig_table:\n", "                if inv_trig_style == \"abbreviated\":\n", "                    func = func\n", "                elif inv_trig_style == \"full\":\n", "                    func = \"arc\" + func[1:]\n", "                elif inv_trig_style == \"power\":\n", "                    func = func[1:]\n", "                    inv_trig_power_case = True\n", "\n", "                    # Can never fold brackets if we're raised to a power\n", "                    if exp is not None:\n", "                        can_fold_brackets = False\n", "\n", "            if inv_trig_power_case:\n", "                if func in accepted_latex_functions:\n", "                    name = r\"\\%s^{-1}\" % func\n", "                else:\n", "                    name = r\"\\operatorname{%s}^{-1}\" % func\n", "            elif exp is not None:\n", "                name = r'%s^{%s}' % (self._hprint_Function(func), exp)\n", "            else:\n", "                name = self._hprint_Function(func)\n", "\n", "            if can_fold_brackets:\n", "                if func in accepted_latex_functions:\n", "                    # Wrap argument safely to avoid parse-time conflicts\n", "                    # with the function name itself\n", "                    name += r\" {%s}\"\n", "                else:\n", "                    name += r\"%s\"\n", "            else:\n", "                name += r\"{\\left (%s \\right )}\"\n", "\n", "            if inv_trig_power_case and exp is not None:\n", "                name += r\"^{%s}\" % exp\n", "\n", "            return name % \",\".join(args)\n"]}]}]}