{"instance_id": "django__django-15061", "identified_spans": [{"file_path": "django/forms/widgets.py", "span_ids": ["MultiWidget", "MultiWidget.get_context", "MultiWidget.id_for_label"], "content": [{"span_id": "MultiWidget", "start_line": 793, "end_line": 803, "content": ["class MultiWidget(Widget):\n", "    \"\"\"\n", "    A widget that is composed of multiple widgets.\n", "\n", "    In addition to the values added by Widget.get_context(), this widget\n", "    adds a list of subwidgets to the context as widget['subwidgets'].\n", "    These can be looped over and rendered like normal widgets.\n", "\n", "    You'll probably want to use this class with MultiValueField.\n", "    \"\"\"\n", "    template_name = 'django/forms/widgets/multiwidget.html'\n"]}, {"span_id": "MultiWidget.get_context", "start_line": 820, "end_line": 849, "content": ["    def get_context(self, name, value, attrs):\n", "        context = super().get_context(name, value, attrs)\n", "        if self.is_localized:\n", "            for widget in self.widgets:\n", "                widget.is_localized = self.is_localized\n", "        # value is a list of values, each corresponding to a widget\n", "        # in self.widgets.\n", "        if not isinstance(value, list):\n", "            value = self.decompress(value)\n", "\n", "        final_attrs = context['widget']['attrs']\n", "        input_type = final_attrs.pop('type', None)\n", "        id_ = final_attrs.get('id')\n", "        subwidgets = []\n", "        for i, (widget_name, widget) in enumerate(zip(self.widgets_names, self.widgets)):\n", "            if input_type is not None:\n", "                widget.input_type = input_type\n", "            widget_name = name + widget_name\n", "            try:\n", "                widget_value = value[i]\n", "            except IndexError:\n", "                widget_value = None\n", "            if id_:\n", "                widget_attrs = final_attrs.copy()\n", "                widget_attrs['id'] = '%s_%s' % (id_, i)\n", "            else:\n", "                widget_attrs = final_attrs\n", "            subwidgets.append(widget.get_context(widget_name, widget_value, widget_attrs)['widget'])\n", "        context['widget']['subwidgets'] = subwidgets\n", "        return context\n"]}, {"span_id": "MultiWidget.id_for_label", "start_line": 851, "end_line": 854, "content": ["    def id_for_label(self, id_):\n", "        if id_:\n", "            id_ += '_0'\n", "        return id_\n"]}]}]}