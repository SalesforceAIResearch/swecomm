{"instance_id": "django__django-13230", "identified_spans": [{"file_path": "django/contrib/syndication/views.py", "span_ids": ["Feed.get_feed"], "content": [{"span_id": "Feed.get_feed", "start_line": 123, "end_line": 219, "content": ["    def get_feed(self, obj, request):\n", "        \"\"\"\n", "        Return a feedgenerator.DefaultFeed object, fully populated, for\n", "        this feed. Raise FeedDoesNotExist for invalid parameters.\n", "        \"\"\"\n", "        current_site = get_current_site(request)\n", "\n", "        link = self._get_dynamic_attr('link', obj)\n", "        link = add_domain(current_site.domain, link, request.is_secure())\n", "\n", "        feed = self.feed_type(\n", "            title=self._get_dynamic_attr('title', obj),\n", "            subtitle=self._get_dynamic_attr('subtitle', obj),\n", "            link=link,\n", "            description=self._get_dynamic_attr('description', obj),\n", "            language=self.language or get_language(),\n", "            feed_url=add_domain(\n", "                current_site.domain,\n", "                self._get_dynamic_attr('feed_url', obj) or request.path,\n", "                request.is_secure(),\n", "            ),\n", "            author_name=self._get_dynamic_attr('author_name', obj),\n", "            author_link=self._get_dynamic_attr('author_link', obj),\n", "            author_email=self._get_dynamic_attr('author_email', obj),\n", "            categories=self._get_dynamic_attr('categories', obj),\n", "            feed_copyright=self._get_dynamic_attr('feed_copyright', obj),\n", "            feed_guid=self._get_dynamic_attr('feed_guid', obj),\n", "            ttl=self._get_dynamic_attr('ttl', obj),\n", "            **self.feed_extra_kwargs(obj)\n", "        )\n", "\n", "        title_tmp = None\n", "        if self.title_template is not None:\n", "            try:\n", "                title_tmp = loader.get_template(self.title_template)\n", "            except TemplateDoesNotExist:\n", "                pass\n", "\n", "        description_tmp = None\n", "        if self.description_template is not None:\n", "            try:\n", "                description_tmp = loader.get_template(self.description_template)\n", "            except TemplateDoesNotExist:\n", "                pass\n", "\n", "        for item in self._get_dynamic_attr('items', obj):\n", "            context = self.get_context_data(item=item, site=current_site,\n", "                                            obj=obj, request=request)\n", "            if title_tmp is not None:\n", "                title = title_tmp.render(context, request)\n", "            else:\n", "                title = self._get_dynamic_attr('item_title', item)\n", "            if description_tmp is not None:\n", "                description = description_tmp.render(context, request)\n", "            else:\n", "                description = self._get_dynamic_attr('item_description', item)\n", "            link = add_domain(\n", "                current_site.domain,\n", "                self._get_dynamic_attr('item_link', item),\n", "                request.is_secure(),\n", "            )\n", "            enclosures = self._get_dynamic_attr('item_enclosures', item)\n", "            author_name = self._get_dynamic_attr('item_author_name', item)\n", "            if author_name is not None:\n", "                author_email = self._get_dynamic_attr('item_author_email', item)\n", "                author_link = self._get_dynamic_attr('item_author_link', item)\n", "            else:\n", "                author_email = author_link = None\n", "\n", "            tz = get_default_timezone()\n", "\n", "            pubdate = self._get_dynamic_attr('item_pubdate', item)\n", "            if pubdate and is_naive(pubdate):\n", "                pubdate = make_aware(pubdate, tz)\n", "\n", "            updateddate = self._get_dynamic_attr('item_updateddate', item)\n", "            if updateddate and is_naive(updateddate):\n", "                updateddate = make_aware(updateddate, tz)\n", "\n", "            feed.add_item(\n", "                title=title,\n", "                link=link,\n", "                description=description,\n", "                unique_id=self._get_dynamic_attr('item_guid', item, link),\n", "                unique_id_is_permalink=self._get_dynamic_attr(\n", "                    'item_guid_is_permalink', item),\n", "                enclosures=enclosures,\n", "                pubdate=pubdate,\n", "                updateddate=updateddate,\n", "                author_name=author_name,\n", "                author_email=author_email,\n", "                author_link=author_link,\n", "                categories=self._get_dynamic_attr('item_categories', item),\n", "                item_copyright=self._get_dynamic_attr('item_copyright', item),\n", "                **self.item_extra_kwargs(item)\n", "            )\n", "        return feed\n"]}]}, {"file_path": "django/utils/feedgenerator.py", "span_ids": ["Rss201rev2Feed.add_item_elements", "SyndicationFeed.add_item"], "content": [{"span_id": "Rss201rev2Feed.add_item_elements", "start_line": 246, "end_line": 291, "content": ["    def add_item_elements(self, handler, item):\n", "        handler.addQuickElement(\"title\", item['title'])\n", "        handler.addQuickElement(\"link\", item['link'])\n", "        if item['description'] is not None:\n", "            handler.addQuickElement(\"description\", item['description'])\n", "\n", "        # Author information.\n", "        if item[\"author_name\"] and item[\"author_email\"]:\n", "            handler.addQuickElement(\"author\", \"%s (%s)\" % (item['author_email'], item['author_name']))\n", "        elif item[\"author_email\"]:\n", "            handler.addQuickElement(\"author\", item[\"author_email\"])\n", "        elif item[\"author_name\"]:\n", "            handler.addQuickElement(\n", "                \"dc:creator\", item[\"author_name\"], {\"xmlns:dc\": \"http://purl.org/dc/elements/1.1/\"}\n", "            )\n", "\n", "        if item['pubdate'] is not None:\n", "            handler.addQuickElement(\"pubDate\", rfc2822_date(item['pubdate']))\n", "        if item['comments'] is not None:\n", "            handler.addQuickElement(\"comments\", item['comments'])\n", "        if item['unique_id'] is not None:\n", "            guid_attrs = {}\n", "            if isinstance(item.get('unique_id_is_permalink'), bool):\n", "                guid_attrs['isPermaLink'] = str(item['unique_id_is_permalink']).lower()\n", "            handler.addQuickElement(\"guid\", item['unique_id'], guid_attrs)\n", "        if item['ttl'] is not None:\n", "            handler.addQuickElement(\"ttl\", item['ttl'])\n", "\n", "        # Enclosure.\n", "        if item['enclosures']:\n", "            enclosures = list(item['enclosures'])\n", "            if len(enclosures) > 1:\n", "                raise ValueError(\n", "                    \"RSS feed items may only have one enclosure, see \"\n", "                    \"http://www.rssboard.org/rss-profile#element-channel-item-enclosure\"\n", "                )\n", "            enclosure = enclosures[0]\n", "            handler.addQuickElement('enclosure', '', {\n", "                'url': enclosure.url,\n", "                'length': enclosure.length,\n", "                'type': enclosure.mime_type,\n", "            })\n", "\n", "        # Categories.\n", "        for cat in item['categories']:\n", "            handler.addQuickElement(\"category\", cat)\n"]}, {"span_id": "SyndicationFeed.add_item", "start_line": 85, "end_line": 114, "content": ["    def add_item(self, title, link, description, author_email=None,\n", "                 author_name=None, author_link=None, pubdate=None, comments=None,\n", "                 unique_id=None, unique_id_is_permalink=None, categories=(),\n", "                 item_copyright=None, ttl=None, updateddate=None, enclosures=None, **kwargs):\n", "        \"\"\"\n", "        Add an item to the feed. All args are expected to be strings except\n", "        pubdate and updateddate, which are datetime.datetime objects, and\n", "        enclosures, which is an iterable of instances of the Enclosure class.\n", "        \"\"\"\n", "        def to_str(s):\n", "            return str(s) if s is not None else s\n", "        categories = categories and [to_str(c) for c in categories]\n", "        self.items.append({\n", "            'title': to_str(title),\n", "            'link': iri_to_uri(link),\n", "            'description': to_str(description),\n", "            'author_email': to_str(author_email),\n", "            'author_name': to_str(author_name),\n", "            'author_link': iri_to_uri(author_link),\n", "            'pubdate': pubdate,\n", "            'updateddate': updateddate,\n", "            'comments': to_str(comments),\n", "            'unique_id': to_str(unique_id),\n", "            'unique_id_is_permalink': unique_id_is_permalink,\n", "            'enclosures': enclosures or (),\n", "            'categories': categories or (),\n", "            'item_copyright': to_str(item_copyright),\n", "            'ttl': to_str(ttl),\n", "            **kwargs,\n", "        })\n"]}]}]}