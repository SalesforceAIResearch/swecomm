{"instance_id": "django__django-13447", "identified_spans": [{"file_path": "django/contrib/admin/sites.py", "span_ids": ["AdminSite._build_app_dict", "AdminSite.get_app_list", "AdminSite.index", "AdminSite.app_index"], "content": [{"span_id": "AdminSite._build_app_dict", "start_line": 433, "end_line": 499, "content": ["    def _build_app_dict(self, request, label=None):\n", "        \"\"\"\n", "        Build the app dictionary. The optional `label` parameter filters models\n", "        of a specific app.\n", "        \"\"\"\n", "        app_dict = {}\n", "\n", "        if label:\n", "            models = {\n", "                m: m_a for m, m_a in self._registry.items()\n", "                if m._meta.app_label == label\n", "            }\n", "        else:\n", "            models = self._registry\n", "\n", "        for model, model_admin in models.items():\n", "            app_label = model._meta.app_label\n", "\n", "            has_module_perms = model_admin.has_module_permission(request)\n", "            if not has_module_perms:\n", "                continue\n", "\n", "            perms = model_admin.get_model_perms(request)\n", "\n", "            # Check whether user has any perm for this module.\n", "            # If so, add the module to the model_list.\n", "            if True not in perms.values():\n", "                continue\n", "\n", "            info = (app_label, model._meta.model_name)\n", "            model_dict = {\n", "                'name': capfirst(model._meta.verbose_name_plural),\n", "                'object_name': model._meta.object_name,\n", "                'perms': perms,\n", "                'admin_url': None,\n", "                'add_url': None,\n", "            }\n", "            if perms.get('change') or perms.get('view'):\n", "                model_dict['view_only'] = not perms.get('change')\n", "                try:\n", "                    model_dict['admin_url'] = reverse('admin:%s_%s_changelist' % info, current_app=self.name)\n", "                except NoReverseMatch:\n", "                    pass\n", "            if perms.get('add'):\n", "                try:\n", "                    model_dict['add_url'] = reverse('admin:%s_%s_add' % info, current_app=self.name)\n", "                except NoReverseMatch:\n", "                    pass\n", "\n", "            if app_label in app_dict:\n", "                app_dict[app_label]['models'].append(model_dict)\n", "            else:\n", "                app_dict[app_label] = {\n", "                    'name': apps.get_app_config(app_label).verbose_name,\n", "                    'app_label': app_label,\n", "                    'app_url': reverse(\n", "                        'admin:app_list',\n", "                        kwargs={'app_label': app_label},\n", "                        current_app=self.name,\n", "                    ),\n", "                    'has_module_perms': has_module_perms,\n", "                    'models': [model_dict],\n", "                }\n", "\n", "        if label:\n", "            return app_dict.get(label)\n", "        return app_dict\n"]}, {"span_id": "AdminSite.get_app_list", "start_line": 501, "end_line": 515, "content": ["    def get_app_list(self, request):\n", "        \"\"\"\n", "        Return a sorted list of all the installed apps that have been\n", "        registered in this site.\n", "        \"\"\"\n", "        app_dict = self._build_app_dict(request)\n", "\n", "        # Sort the apps alphabetically.\n", "        app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())\n", "\n", "        # Sort the models alphabetically within each app.\n", "        for app in app_list:\n", "            app['models'].sort(key=lambda x: x['name'])\n", "\n", "        return app_list\n"]}, {"span_id": "AdminSite.index", "start_line": 517, "end_line": 534, "content": ["    def index(self, request, extra_context=None):\n", "        \"\"\"\n", "        Display the main admin index page, which lists all of the installed\n", "        apps that have been registered in this site.\n", "        \"\"\"\n", "        app_list = self.get_app_list(request)\n", "\n", "        context = {\n", "            **self.each_context(request),\n", "            'title': self.index_title,\n", "            'subtitle': None,\n", "            'app_list': app_list,\n", "            **(extra_context or {}),\n", "        }\n", "\n", "        request.current_app = self.name\n", "\n", "        return TemplateResponse(request, self.index_template or 'admin/index.html', context)\n"]}, {"span_id": "AdminSite.app_index", "start_line": 536, "end_line": 556, "content": ["    def app_index(self, request, app_label, extra_context=None):\n", "        app_dict = self._build_app_dict(request, app_label)\n", "        if not app_dict:\n", "            raise Http404('The requested admin page does not exist.')\n", "        # Sort the models alphabetically within each app.\n", "        app_dict['models'].sort(key=lambda x: x['name'])\n", "        context = {\n", "            **self.each_context(request),\n", "            'title': _('%(app)s administration') % {'app': app_dict['name']},\n", "            'subtitle': None,\n", "            'app_list': [app_dict],\n", "            'app_label': app_label,\n", "            **(extra_context or {}),\n", "        }\n", "\n", "        request.current_app = self.name\n", "\n", "        return TemplateResponse(request, self.app_index_template or [\n", "            'admin/%s/app_index.html' % app_label,\n", "            'admin/app_index.html'\n", "        ], context)\n"]}]}]}