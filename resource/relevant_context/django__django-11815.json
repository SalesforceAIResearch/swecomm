{"instance_id": "django__django-11815", "identified_spans": [{"file_path": "django/db/migrations/serializer.py", "span_ids": ["EnumSerializer", "serializer_factory", "EnumSerializer.serialize"], "content": [{"span_id": "EnumSerializer", "start_line": 119, "end_line": 119, "content": ["class EnumSerializer(BaseSerializer):\n"]}, {"span_id": "serializer_factory", "start_line": 313, "end_line": 339, "content": ["def serializer_factory(value):\n", "    if isinstance(value, Promise):\n", "        value = str(value)\n", "    elif isinstance(value, LazyObject):\n", "        # The unwrapped value is returned as the first item of the arguments\n", "        # tuple.\n", "        value = value.__reduce__()[1][0]\n", "\n", "    if isinstance(value, models.Field):\n", "        return ModelFieldSerializer(value)\n", "    if isinstance(value, models.manager.BaseManager):\n", "        return ModelManagerSerializer(value)\n", "    if isinstance(value, Operation):\n", "        return OperationSerializer(value)\n", "    if isinstance(value, type):\n", "        return TypeSerializer(value)\n", "    # Anything that knows how to deconstruct itself.\n", "    if hasattr(value, 'deconstruct'):\n", "        return DeconstructableSerializer(value)\n", "    for type_, serializer_cls in Serializer._registry.items():\n", "        if isinstance(value, type_):\n", "            return serializer_cls(value)\n", "    raise ValueError(\n", "        \"Cannot serialize: %r\\nThere are some values Django cannot serialize into \"\n", "        \"migration files.\\nFor more, see https://docs.djangoproject.com/en/%s/\"\n", "        \"topics/migrations/#migration-serializing\" % (value, get_docs_version())\n", "    )\n"]}, {"span_id": "EnumSerializer.serialize", "start_line": 120, "end_line": 125, "content": ["    def serialize(self):\n", "        enum_class = self.value.__class__\n", "        module = enum_class.__module__\n", "        v_string, v_imports = serializer_factory(self.value.value).serialize()\n", "        imports = {'import %s' % module, *v_imports}\n", "        return \"%s.%s(%s)\" % (module, enum_class.__name__, v_string), imports\n"]}]}, {"file_path": "django/db/models/enums.py", "span_ids": ["IntegerChoices", "TextChoices", "Choices"], "content": [{"span_id": "IntegerChoices", "start_line": 66, "end_line": 68, "content": ["class IntegerChoices(int, Choices):\n", "    \"\"\"Class for creating enumerated integer choices.\"\"\"\n", "    pass\n"]}, {"span_id": "TextChoices", "start_line": 71, "end_line": 72, "content": ["class TextChoices(str, Choices):\n", "    \"\"\"Class for creating enumerated string choices.\"\"\"\n"]}, {"span_id": "Choices", "start_line": 61, "end_line": 63, "content": ["class Choices(enum.Enum, metaclass=ChoicesMeta):\n", "    \"\"\"Class for creating enumerated choices.\"\"\"\n", "    pass\n"]}]}, {"file_path": "django/db/models/fields/__init__.py", "span_ids": ["CharField"], "content": [{"span_id": "CharField", "start_line": 968, "end_line": 969, "content": ["class CharField(Field):\n", "    description = _(\"String (up to %(max_length)s)\")\n"]}]}]}