{"instance_id": "matplotlib__matplotlib-18869", "identified_spans": [{"file_path": "lib/matplotlib/__init__.py", "span_ids": ["imports", "__getattr__"], "content": [{"span_id": "imports", "start_line": 84, "end_line": 130, "content": ["import atexit\n", "from collections import namedtuple\n", "from collections.abc import MutableMapping\n", "import contextlib\n", "import functools\n", "import importlib\n", "import inspect\n", "from inspect import Parameter\n", "import locale\n", "import logging\n", "import os\n", "from pathlib import Path\n", "import pprint\n", "import re\n", "import shutil\n", "import subprocess\n", "import sys\n", "import tempfile\n", "import warnings\n", "\n", "import numpy\n", "from packaging.version import parse as parse_version\n", "\n", "# cbook must import matplotlib only within function\n", "# definitions, so it is safe to import from it here.\n", "from . import _api, _version, cbook, docstring, rcsetup\n", "from matplotlib.cbook import MatplotlibDeprecationWarning, sanitize_sequence\n", "from matplotlib.cbook import mplDeprecation  # deprecated\n", "from matplotlib.rcsetup import validate_backend, cycler\n", "\n", "\n", "_log = logging.getLogger(__name__)\n", "\n", "__bibtex__ = r\"\"\"@Article{Hunter:2007,\n", "  Author    = {Hunter, J. D.},\n", "  Title     = {Matplotlib: A 2D graphics environment},\n", "  Journal   = {Computing in Science \\& Engineering},\n", "  Volume    = {9},\n", "  Number    = {3},\n", "  Pages     = {90--95},\n", "  abstract  = {Matplotlib is a 2D graphics package used for Python\n", "  for application development, interactive scripting, and\n", "  publication-quality image generation across user\n", "  interfaces and operating systems.},\n", "  publisher = {IEEE COMPUTER SOC},\n", "  year      = 2007\n", "}\"\"\"\n"]}, {"span_id": "__getattr__", "start_line": 133, "end_line": 151, "content": ["def __getattr__(name):\n", "    if name == \"__version__\":\n", "        import setuptools_scm\n", "        global __version__  # cache it.\n", "        # Only shell out to a git subprocess if really needed, and not on a\n", "        # shallow clone, such as those used by CI, as the latter would trigger\n", "        # a warning from setuptools_scm.\n", "        root = Path(__file__).resolve().parents[2]\n", "        if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n", "            __version__ = setuptools_scm.get_version(\n", "                root=root,\n", "                version_scheme=\"post-release\",\n", "                local_scheme=\"node-and-date\",\n", "                fallback_version=_version.version,\n", "            )\n", "        else:  # Get the version from the _version.py setuptools_scm file.\n", "            __version__ = _version.version\n", "        return __version__\n", "    raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n"]}]}]}