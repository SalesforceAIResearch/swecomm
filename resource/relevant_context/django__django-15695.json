{"instance_id": "django__django-15695", "identified_spans": [{"file_path": "django/db/migrations/operations/models.py", "span_ids": ["RenameIndex.database_backwards", "RenameIndex.__init__", "RenameIndex.database_forwards", "RenameIndex.state_forwards", "RenameIndex"], "content": [{"span_id": "RenameIndex.database_backwards", "start_line": 968, "end_line": 985, "content": ["    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n", "        if self.old_fields:\n", "            # Backward operation with unnamed index is a no-op.\n", "            return\n", "\n", "        self.new_name_lower, self.old_name_lower = (\n", "            self.old_name_lower,\n", "            self.new_name_lower,\n", "        )\n", "        self.new_name, self.old_name = self.old_name, self.new_name\n", "\n", "        self.database_forwards(app_label, schema_editor, from_state, to_state)\n", "\n", "        self.new_name_lower, self.old_name_lower = (\n", "            self.old_name_lower,\n", "            self.new_name_lower,\n", "        )\n", "        self.new_name, self.old_name = self.old_name, self.new_name\n"]}, {"span_id": "RenameIndex.__init__", "start_line": 882, "end_line": 895, "content": ["    def __init__(self, model_name, new_name, old_name=None, old_fields=None):\n", "        if not old_name and not old_fields:\n", "            raise ValueError(\n", "                \"RenameIndex requires one of old_name and old_fields arguments to be \"\n", "                \"set.\"\n", "            )\n", "        if old_name and old_fields:\n", "            raise ValueError(\n", "                \"RenameIndex.old_name and old_fields are mutually exclusive.\"\n", "            )\n", "        self.model_name = model_name\n", "        self.new_name = new_name\n", "        self.old_name = old_name\n", "        self.old_fields = old_fields\n"]}, {"span_id": "RenameIndex.database_forwards", "start_line": 934, "end_line": 966, "content": ["    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n", "        model = to_state.apps.get_model(app_label, self.model_name)\n", "        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n", "            return\n", "\n", "        if self.old_fields:\n", "            from_model = from_state.apps.get_model(app_label, self.model_name)\n", "            columns = [\n", "                from_model._meta.get_field(field).column for field in self.old_fields\n", "            ]\n", "            matching_index_name = schema_editor._constraint_names(\n", "                from_model, column_names=columns, index=True\n", "            )\n", "            if len(matching_index_name) != 1:\n", "                raise ValueError(\n", "                    \"Found wrong number (%s) of indexes for %s(%s).\"\n", "                    % (\n", "                        len(matching_index_name),\n", "                        from_model._meta.db_table,\n", "                        \", \".join(columns),\n", "                    )\n", "                )\n", "            old_index = models.Index(\n", "                fields=self.old_fields,\n", "                name=matching_index_name[0],\n", "            )\n", "        else:\n", "            from_model_state = from_state.models[app_label, self.model_name_lower]\n", "            old_index = from_model_state.get_index_by_name(self.old_name)\n", "\n", "        to_model_state = to_state.models[app_label, self.model_name_lower]\n", "        new_index = to_model_state.get_index_by_name(self.new_name)\n", "        schema_editor.rename_index(model, old_index, new_index)\n"]}, {"span_id": "RenameIndex.state_forwards", "start_line": 916, "end_line": 932, "content": ["    def state_forwards(self, app_label, state):\n", "        if self.old_fields:\n", "            state.add_index(\n", "                app_label,\n", "                self.model_name_lower,\n", "                models.Index(fields=self.old_fields, name=self.new_name),\n", "            )\n", "            state.remove_model_options(\n", "                app_label,\n", "                self.model_name_lower,\n", "                AlterIndexTogether.option_name,\n", "                self.old_fields,\n", "            )\n", "        else:\n", "            state.rename_index(\n", "                app_label, self.model_name_lower, self.old_name, self.new_name\n", "            )\n"]}, {"span_id": "RenameIndex", "start_line": 879, "end_line": 880, "content": ["class RenameIndex(IndexOperation):\n", "    \"\"\"Rename an index.\"\"\"\n"]}]}]}