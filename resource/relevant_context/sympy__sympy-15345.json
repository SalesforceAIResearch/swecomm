{"instance_id": "sympy__sympy-15345", "identified_spans": [{"file_path": "sympy/printing/mathematica.py", "span_ids": ["MCodePrinter._print_Function", "mathematica_code", "docstring", "MCodePrinter"], "content": [{"span_id": "MCodePrinter._print_Function", "start_line": 96, "end_line": 102, "content": ["    def _print_Function(self, expr):\n", "        if expr.func.__name__ in self.known_functions:\n", "            cond_mfunc = self.known_functions[expr.func.__name__]\n", "            for cond, mfunc in cond_mfunc:\n", "                if cond(*expr.args):\n", "                    return \"%s[%s]\" % (mfunc, self.stringify(expr.args, \", \"))\n", "        return expr.func.__name__ + \"[%s]\" % self.stringify(expr.args, \", \")\n"]}, {"span_id": "mathematica_code", "start_line": 120, "end_line": 131, "content": ["def mathematica_code(expr, **settings):\n", "    r\"\"\"Converts an expr to a string of the Wolfram Mathematica code\n", "\n", "    Examples\n", "    ========\n", "\n", "    >>> from sympy import mathematica_code as mcode, symbols, sin\n", "    >>> x = symbols('x')\n", "    >>> mcode(sin(x).series(x).removeO())\n", "    '(1/120)*x^5 - 1/6*x^3 + x'\n", "    \"\"\"\n", "    return MCodePrinter(settings).doprint(expr)\n"]}, {"span_id": "docstring", "start_line": 1, "end_line": 35, "content": ["\"\"\"\n", "Mathematica code printer\n", "\"\"\"\n", "\n", "from __future__ import print_function, division\n", "from sympy.printing.codeprinter import CodePrinter\n", "from sympy.printing.str import StrPrinter\n", "from sympy.printing.precedence import precedence\n", "\n", "# Used in MCodePrinter._print_Function(self)\n", "known_functions = {\n", "    \"exp\": [(lambda x: True, \"Exp\")],\n", "    \"log\": [(lambda x: True, \"Log\")],\n", "    \"sin\": [(lambda x: True, \"Sin\")],\n", "    \"cos\": [(lambda x: True, \"Cos\")],\n", "    \"tan\": [(lambda x: True, \"Tan\")],\n", "    \"cot\": [(lambda x: True, \"Cot\")],\n", "    \"asin\": [(lambda x: True, \"ArcSin\")],\n", "    \"acos\": [(lambda x: True, \"ArcCos\")],\n", "    \"atan\": [(lambda x: True, \"ArcTan\")],\n", "    \"sinh\": [(lambda x: True, \"Sinh\")],\n", "    \"cosh\": [(lambda x: True, \"Cosh\")],\n", "    \"tanh\": [(lambda x: True, \"Tanh\")],\n", "    \"coth\": [(lambda x: True, \"Coth\")],\n", "    \"sech\": [(lambda x: True, \"Sech\")],\n", "    \"csch\": [(lambda x: True, \"Csch\")],\n", "    \"asinh\": [(lambda x: True, \"ArcSinh\")],\n", "    \"acosh\": [(lambda x: True, \"ArcCosh\")],\n", "    \"atanh\": [(lambda x: True, \"ArcTanh\")],\n", "    \"acoth\": [(lambda x: True, \"ArcCoth\")],\n", "    \"asech\": [(lambda x: True, \"ArcSech\")],\n", "    \"acsch\": [(lambda x: True, \"ArcCsch\")],\n", "    \"conjugate\": [(lambda x: True, \"Conjugate\")],\n", "\n", "}\n"]}, {"span_id": "MCodePrinter", "start_line": 38, "end_line": 54, "content": ["class MCodePrinter(CodePrinter):\n", "    \"\"\"A printer to convert python expressions to\n", "    strings of the Wolfram's Mathematica code\n", "    \"\"\"\n", "    printmethod = \"_mcode\"\n", "\n", "    _default_settings = {\n", "        'order': None,\n", "        'full_prec': 'auto',\n", "        'precision': 15,\n", "        'user_functions': {},\n", "        'human': True,\n", "        'allow_unknown_functions': False,\n", "    }\n", "\n", "    _number_symbols = set()\n", "    _not_supported = set()\n"]}]}]}