{"instance_id": "sympy__sympy-23117", "identified_spans": [{"file_path": "sympy/tensor/array/__init__.py", "span_ids": ["impl"], "content": []}, {"file_path": "sympy/tensor/array/ndim_array.py", "span_ids": ["NDimArray._scan_iterable_shape", "NDimArray._handle_ndarray_creation_inputs", "NDimArray"], "content": [{"span_id": "NDimArray._scan_iterable_shape", "start_line": 191, "end_line": 205, "content": ["    @classmethod\n", "    def _scan_iterable_shape(cls, iterable):\n", "        def f(pointer):\n", "            if not isinstance(pointer, Iterable):\n", "                return [pointer], ()\n", "\n", "            result = []\n", "            elems, shapes = zip(*[f(i) for i in pointer])\n", "            if len(set(shapes)) != 1:\n", "                raise ValueError(\"could not determine shape unambiguously\")\n", "            for i in elems:\n", "                result.extend(i)\n", "            return result, (len(shapes),)+shapes[0]\n", "\n", "        return f(iterable)\n"]}, {"span_id": "NDimArray._handle_ndarray_creation_inputs", "start_line": 207, "end_line": 252, "content": ["    @classmethod\n", "    def _handle_ndarray_creation_inputs(cls, iterable=None, shape=None, **kwargs):\n", "        from sympy.matrices.matrices import MatrixBase\n", "        from sympy.tensor.array import SparseNDimArray\n", "\n", "        if shape is None:\n", "            if iterable is None:\n", "                shape = ()\n", "                iterable = ()\n", "            # Construction of a sparse array from a sparse array\n", "            elif isinstance(iterable, SparseNDimArray):\n", "                return iterable._shape, iterable._sparse_array\n", "\n", "            # Construct N-dim array from another N-dim array:\n", "            elif isinstance(iterable, NDimArray):\n", "                shape = iterable.shape\n", "\n", "            # Construct N-dim array from an iterable (numpy arrays included):\n", "            elif isinstance(iterable, Iterable):\n", "                iterable, shape = cls._scan_iterable_shape(iterable)\n", "\n", "            # Construct N-dim array from a Matrix:\n", "            elif isinstance(iterable, MatrixBase):\n", "                shape = iterable.shape\n", "\n", "            else:\n", "                shape = ()\n", "                iterable = (iterable,)\n", "\n", "        if isinstance(iterable, (Dict, dict)) and shape is not None:\n", "            new_dict = iterable.copy()\n", "            for k, v in new_dict.items():\n", "                if isinstance(k, (tuple, Tuple)):\n", "                    new_key = 0\n", "                    for i, idx in enumerate(k):\n", "                        new_key = new_key * shape[i] + idx\n", "                    iterable[new_key] = iterable[k]\n", "                    del iterable[k]\n", "\n", "        if isinstance(shape, (SYMPY_INTS, Integer)):\n", "            shape = (shape,)\n", "\n", "        if not all(isinstance(dim, (SYMPY_INTS, Integer)) for dim in shape):\n", "            raise TypeError(\"Shape should contain integers only.\")\n", "\n", "        return tuple(shape), iterable\n"]}, {"span_id": "NDimArray", "start_line": 86, "end_line": 140, "content": ["class NDimArray(Printable):\n", "    \"\"\"\n", "\n", "    Examples\n", "    ========\n", "\n", "    Create an N-dim array of zeros:\n", "\n", "    >>> from sympy import MutableDenseNDimArray\n", "    >>> a = MutableDenseNDimArray.zeros(2, 3, 4)\n", "    >>> a\n", "    [[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]]\n", "\n", "    Create an N-dim array from a list;\n", "\n", "    >>> a = MutableDenseNDimArray([[2, 3], [4, 5]])\n", "    >>> a\n", "    [[2, 3], [4, 5]]\n", "\n", "    >>> b = MutableDenseNDimArray([[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]])\n", "    >>> b\n", "    [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]]\n", "\n", "    Create an N-dim array from a flat list with dimension shape:\n", "\n", "    >>> a = MutableDenseNDimArray([1, 2, 3, 4, 5, 6], (2, 3))\n", "    >>> a\n", "    [[1, 2, 3], [4, 5, 6]]\n", "\n", "    Create an N-dim array from a matrix:\n", "\n", "    >>> from sympy import Matrix\n", "    >>> a = Matrix([[1,2],[3,4]])\n", "    >>> a\n", "    Matrix([\n", "    [1, 2],\n", "    [3, 4]])\n", "    >>> b = MutableDenseNDimArray(a)\n", "    >>> b\n", "    [[1, 2], [3, 4]]\n", "\n", "    Arithmetic operations on N-dim arrays\n", "\n", "    >>> a = MutableDenseNDimArray([1, 1, 1, 1], (2, 2))\n", "    >>> b = MutableDenseNDimArray([4, 4, 4, 4], (2, 2))\n", "    >>> c = a + b\n", "    >>> c\n", "    [[5, 5], [5, 5]]\n", "    >>> a - b\n", "    [[-3, -3], [-3, -3]]\n", "\n", "    \"\"\"\n", "\n", "    _diff_wrt = True\n", "    is_scalar = False\n"]}]}]}