{"instance_id": "django__django-13265", "identified_spans": [{"file_path": "django/db/migrations/autodetector.py", "span_ids": ["MigrationAutodetector.generate_added_indexes", "MigrationAutodetector.generate_altered_order_with_respect_to"], "content": [{"span_id": "MigrationAutodetector.generate_added_indexes", "start_line": 1015, "end_line": 1024, "content": ["    def generate_added_indexes(self):\n", "        for (app_label, model_name), alt_indexes in self.altered_indexes.items():\n", "            for index in alt_indexes['added_indexes']:\n", "                self.add_operation(\n", "                    app_label,\n", "                    operations.AddIndex(\n", "                        model_name=model_name,\n", "                        index=index,\n", "                    )\n", "                )\n"]}, {"span_id": "MigrationAutodetector.generate_altered_order_with_respect_to", "start_line": 1192, "end_line": 1217, "content": ["    def generate_altered_order_with_respect_to(self):\n", "        for app_label, model_name in sorted(self.kept_model_keys):\n", "            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n", "            old_model_state = self.from_state.models[app_label, old_model_name]\n", "            new_model_state = self.to_state.models[app_label, model_name]\n", "            if (old_model_state.options.get(\"order_with_respect_to\") !=\n", "                    new_model_state.options.get(\"order_with_respect_to\")):\n", "                # Make sure it comes second if we're adding\n", "                # (removal dependency is part of RemoveField)\n", "                dependencies = []\n", "                if new_model_state.options.get(\"order_with_respect_to\"):\n", "                    dependencies.append((\n", "                        app_label,\n", "                        model_name,\n", "                        new_model_state.options[\"order_with_respect_to\"],\n", "                        True,\n", "                    ))\n", "                # Actually generate the operation\n", "                self.add_operation(\n", "                    app_label,\n", "                    operations.AlterOrderWithRespectTo(\n", "                        name=model_name,\n", "                        order_with_respect_to=new_model_state.options.get('order_with_respect_to'),\n", "                    ),\n", "                    dependencies=dependencies,\n", "                )\n"]}]}, {"file_path": "django/db/migrations/operations/models.py", "span_ids": ["AddIndex.__init__", "AlterOrderWithRespectTo", "AlterOrderWithRespectTo.__init__", "AddIndex.database_forwards", "AddIndex", "AlterOrderWithRespectTo.database_forwards"], "content": [{"span_id": "AddIndex.__init__", "start_line": 740, "end_line": 747, "content": ["    def __init__(self, model_name, index):\n", "        self.model_name = model_name\n", "        if not index.name:\n", "            raise ValueError(\n", "                \"Indexes passed to AddIndex operations require a name \"\n", "                \"argument. %r doesn't have one.\" % index\n", "            )\n", "        self.index = index\n"]}, {"span_id": "AlterOrderWithRespectTo", "start_line": 572, "end_line": 575, "content": ["class AlterOrderWithRespectTo(ModelOptionOperation):\n", "    \"\"\"Represent a change with the order_with_respect_to option.\"\"\"\n", "\n", "    option_name = 'order_with_respect_to'\n"]}, {"span_id": "AlterOrderWithRespectTo.__init__", "start_line": 577, "end_line": 579, "content": ["    def __init__(self, name, order_with_respect_to):\n", "        self.order_with_respect_to = order_with_respect_to\n", "        super().__init__(name)\n"]}, {"span_id": "AddIndex.database_forwards", "start_line": 754, "end_line": 757, "content": ["    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n", "        model = to_state.apps.get_model(app_label, self.model_name)\n", "        if self.allow_migrate_model(schema_editor.connection.alias, model):\n", "            schema_editor.add_index(model, self.index)\n"]}, {"span_id": "AddIndex", "start_line": 737, "end_line": 738, "content": ["class AddIndex(IndexOperation):\n", "    \"\"\"Add an index on a model.\"\"\"\n"]}, {"span_id": "AlterOrderWithRespectTo.database_forwards", "start_line": 597, "end_line": 613, "content": ["    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n", "        to_model = to_state.apps.get_model(app_label, self.name)\n", "        if self.allow_migrate_model(schema_editor.connection.alias, to_model):\n", "            from_model = from_state.apps.get_model(app_label, self.name)\n", "            # Remove a field if we need to\n", "            if from_model._meta.order_with_respect_to and not to_model._meta.order_with_respect_to:\n", "                schema_editor.remove_field(from_model, from_model._meta.get_field(\"_order\"))\n", "            # Add a field if we need to (altering the column is untouched as\n", "            # it's likely a rename)\n", "            elif to_model._meta.order_with_respect_to and not from_model._meta.order_with_respect_to:\n", "                field = to_model._meta.get_field(\"_order\")\n", "                if not field.has_default():\n", "                    field.default = 0\n", "                schema_editor.add_field(\n", "                    from_model,\n", "                    field,\n", "                )\n"]}]}]}