{"instance_id": "django__django-10914", "identified_spans": [{"file_path": "django/conf/global_settings.py", "span_ids": ["impl:105"], "content": [{"span_id": "impl:105", "start_line": 290, "end_line": 335, "content": ["FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n", "\n", "# Maximum size in bytes of request data (excluding file uploads) that will be\n", "# read before a SuspiciousOperation (RequestDataTooBig) is raised.\n", "DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\n", "\n", "# Maximum number of GET/POST parameters that will be read before a\n", "# SuspiciousOperation (TooManyFieldsSent) is raised.\n", "DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\n", "\n", "# Directory in which upload streamed files will be temporarily saved. A value of\n", "# `None` will make Django use the operating system's default temporary directory\n", "# (i.e. \"/tmp\" on *nix systems).\n", "FILE_UPLOAD_TEMP_DIR = None\n", "\n", "# The numeric mode to set newly-uploaded files to. The value should be a mode\n", "# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n", "FILE_UPLOAD_PERMISSIONS = None\n", "\n", "# The numeric mode to assign to newly-created directories, when uploading files.\n", "# The value should be a mode as you'd pass to os.chmod;\n", "# see https://docs.python.org/library/os.html#files-and-directories.\n", "FILE_UPLOAD_DIRECTORY_PERMISSIONS = None\n", "\n", "# Python module path where user will place custom format definition.\n", "# The directory where this setting is pointing should contain subdirectories\n", "# named as the locales, containing a formats.py file\n", "# (i.e. \"myproject.locale\" for myproject/locale/en/formats.py etc. use)\n", "FORMAT_MODULE_PATH = None\n", "\n", "# Default formatting for date objects. See all available format strings here:\n", "# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n", "DATE_FORMAT = 'N j, Y'\n", "\n", "# Default formatting for datetime objects. See all available format strings here:\n", "# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n", "DATETIME_FORMAT = 'N j, Y, P'\n", "\n", "# Default formatting for time objects. See all available format strings here:\n", "# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n", "TIME_FORMAT = 'P'\n", "\n", "# Default formatting for date objects when only the year and month are relevant.\n", "# See all available format strings here:\n", "# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n", "YEAR_MONTH_FORMAT = 'F Y'\n"]}]}, {"file_path": "django/core/files/storage.py", "span_ids": ["FileSystemStorage._save", "FileSystemStorage.file_permissions_mode"], "content": [{"span_id": "FileSystemStorage._save", "start_line": 226, "end_line": 287, "content": ["    def _save(self, name, content):\n", "        full_path = self.path(name)\n", "\n", "        # Create any intermediate directories that do not exist.\n", "        directory = os.path.dirname(full_path)\n", "        try:\n", "            if self.directory_permissions_mode is not None:\n", "                # os.makedirs applies the global umask, so we reset it,\n", "                # for consistency with file_permissions_mode behavior.\n", "                old_umask = os.umask(0)\n", "                try:\n", "                    os.makedirs(directory, self.directory_permissions_mode, exist_ok=True)\n", "                finally:\n", "                    os.umask(old_umask)\n", "            else:\n", "                os.makedirs(directory, exist_ok=True)\n", "        except FileExistsError:\n", "            raise FileExistsError('%s exists and is not a directory.' % directory)\n", "\n", "        # There's a potential race condition between get_available_name and\n", "        # saving the file; it's possible that two threads might return the\n", "        # same name, at which point all sorts of fun happens. So we need to\n", "        # try to create the file, but if it already exists we have to go back\n", "        # to get_available_name() and try again.\n", "\n", "        while True:\n", "            try:\n", "                # This file has a file path that we can move.\n", "                if hasattr(content, 'temporary_file_path'):\n", "                    file_move_safe(content.temporary_file_path(), full_path)\n", "\n", "                # This is a normal uploadedfile that we can stream.\n", "                else:\n", "                    # The current umask value is masked out by os.open!\n", "                    fd = os.open(full_path, self.OS_OPEN_FLAGS, 0o666)\n", "                    _file = None\n", "                    try:\n", "                        locks.lock(fd, locks.LOCK_EX)\n", "                        for chunk in content.chunks():\n", "                            if _file is None:\n", "                                mode = 'wb' if isinstance(chunk, bytes) else 'wt'\n", "                                _file = os.fdopen(fd, mode)\n", "                            _file.write(chunk)\n", "                    finally:\n", "                        locks.unlock(fd)\n", "                        if _file is not None:\n", "                            _file.close()\n", "                        else:\n", "                            os.close(fd)\n", "            except FileExistsError:\n", "                # A new name is needed if the file exists.\n", "                name = self.get_available_name(name)\n", "                full_path = self.path(name)\n", "            else:\n", "                # OK, the file save worked. Break out of the loop.\n", "                break\n", "\n", "        if self.file_permissions_mode is not None:\n", "            os.chmod(full_path, self.file_permissions_mode)\n", "\n", "        # Store filenames with forward slashes, even on Windows.\n", "        return name.replace('\\\\', '/')\n"]}, {"span_id": "FileSystemStorage.file_permissions_mode", "start_line": 215, "end_line": 217, "content": ["    @cached_property\n", "    def file_permissions_mode(self):\n", "        return self._value_or_setting(self._file_permissions_mode, settings.FILE_UPLOAD_PERMISSIONS)\n"]}]}]}