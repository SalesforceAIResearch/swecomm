{"instance_id": "pallets__flask-4992", "identified_spans": [{"file_path": "src/flask/config.py", "span_ids": ["Config.from_file"], "content": [{"span_id": "Config.from_file", "start_line": 232, "end_line": 273, "content": ["    def from_file(\n", "        self,\n", "        filename: str,\n", "        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n", "        silent: bool = False,\n", "    ) -> bool:\n", "        \"\"\"Update the values in the config from a file that is loaded\n", "        using the ``load`` parameter. The loaded data is passed to the\n", "        :meth:`from_mapping` method.\n", "\n", "        .. code-block:: python\n", "\n", "            import json\n", "            app.config.from_file(\"config.json\", load=json.load)\n", "\n", "            import toml\n", "            app.config.from_file(\"config.toml\", load=toml.load)\n", "\n", "        :param filename: The path to the data file. This can be an\n", "            absolute path or relative to the config root path.\n", "        :param load: A callable that takes a file handle and returns a\n", "            mapping of loaded data from the file.\n", "        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n", "            implements a ``read`` method.\n", "        :param silent: Ignore the file if it doesn't exist.\n", "        :return: ``True`` if the file was loaded successfully.\n", "\n", "        .. versionadded:: 2.0\n", "        \"\"\"\n", "        filename = os.path.join(self.root_path, filename)\n", "\n", "        try:\n", "            with open(filename) as f:\n", "                obj = load(f)\n", "        except OSError as e:\n", "            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n", "                return False\n", "\n", "            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n", "            raise\n", "\n", "        return self.from_mapping(obj)\n"]}]}]}