{"instance_id": "django__django-15320", "identified_spans": [{"file_path": "django/db/models/expressions.py", "span_ids": ["Subquery", "Subquery.as_sql"], "content": [{"span_id": "Subquery", "start_line": 1141, "end_line": 1148, "content": ["class Subquery(BaseExpression, Combinable):\n", "    \"\"\"\n", "    An explicit subquery. It may contain OuterRef() references to the outer\n", "    query which will be resolved when it is applied to that query.\n", "    \"\"\"\n", "    template = '(%(subquery)s)'\n", "    contains_aggregate = False\n", "    empty_result_set_value = None\n"]}, {"span_id": "Subquery.as_sql", "start_line": 1177, "end_line": 1186, "content": ["    def as_sql(self, compiler, connection, template=None, query=None, **extra_context):\n", "        connection.ops.check_expression_support(self)\n", "        template_params = {**self.extra, **extra_context}\n", "        query = query or self.query\n", "        subquery_sql, sql_params = query.as_sql(compiler, connection)\n", "        template_params['subquery'] = subquery_sql[1:-1]\n", "\n", "        template = template or template_params.get('template', self.template)\n", "        sql = template % template_params\n", "        return sql, sql_params\n"]}]}, {"file_path": "django/db/models/sql/query.py", "span_ids": ["Query.as_sql"], "content": [{"span_id": "Query.as_sql", "start_line": 1079, "end_line": 1090, "content": ["    def as_sql(self, compiler, connection):\n", "        # Some backends (e.g. Oracle) raise an error when a subquery contains\n", "        # unnecessary ORDER BY clause.\n", "        if (\n", "            self.subquery and\n", "            not connection.features.ignores_unnecessary_order_by_in_subqueries\n", "        ):\n", "            self.clear_ordering(force=False)\n", "        sql, params = self.get_compiler(connection=connection).as_sql()\n", "        if self.subquery:\n", "            sql = '(%s)' % sql\n", "        return sql, params\n"]}]}]}