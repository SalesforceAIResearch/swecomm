{"instance_id": "sympy__sympy-14308", "identified_spans": [{"file_path": "sympy/physics/vector/vector.py", "span_ids": ["VectorAdd", "Vector"], "content": [{"span_id": "Vector", "start_line": 10, "end_line": 24, "content": ["class Vector(object):\n", "    \"\"\"The class used to define vectors.\n", "\n", "    It along with ReferenceFrame are the building blocks of describing a\n", "    classical mechanics system in PyDy and sympy.physics.vector.\n", "\n", "    Attributes\n", "    ==========\n", "\n", "    simp : Boolean\n", "        Let certain methods use trigsimp on their outputs\n", "\n", "    \"\"\"\n", "\n", "    simp = False\n"]}]}, {"file_path": "sympy/printing/latex.py", "span_ids": ["LatexPrinter._print_BasisDependent"], "content": [{"span_id": "LatexPrinter._print_BasisDependent", "start_line": 582, "end_line": 610, "content": ["    def _print_BasisDependent(self, expr):\n", "        from sympy.vector import Vector\n", "\n", "        o1 = []\n", "        if expr == expr.zero:\n", "            return expr.zero._latex_form\n", "        if isinstance(expr, Vector):\n", "            items = expr.separate().items()\n", "        else:\n", "            items = [(0, expr)]\n", "\n", "        for system, vect in items:\n", "            inneritems = list(vect.components.items())\n", "            inneritems.sort(key = lambda x:x[0].__str__())\n", "            for k, v in inneritems:\n", "                if v == 1:\n", "                    o1.append(' + ' + k._latex_form)\n", "                elif v == -1:\n", "                    o1.append(' - ' + k._latex_form)\n", "                else:\n", "                    arg_str = '(' + LatexPrinter().doprint(v) + ')'\n", "                    o1.append(' + ' + arg_str + k._latex_form)\n", "\n", "        outstr = (''.join(o1))\n", "        if outstr[1] != '-':\n", "            outstr = outstr[3:]\n", "        else:\n", "            outstr = outstr[1:]\n", "        return outstr\n"]}]}, {"file_path": "sympy/printing/pretty/pretty.py", "span_ids": ["PrettyPrinter", "PrettyPrinter._print_BasisDependent"], "content": [{"span_id": "PrettyPrinter", "start_line": 37, "end_line": 48, "content": ["class PrettyPrinter(Printer):\n", "    \"\"\"Printer, which converts an expression into 2D ASCII-art figure.\"\"\"\n", "    printmethod = \"_pretty\"\n", "\n", "    _default_settings = {\n", "        \"order\": None,\n", "        \"full_prec\": \"auto\",\n", "        \"use_unicode\": None,\n", "        \"wrap_line\": True,\n", "        \"num_columns\": None,\n", "        \"use_unicode_sqrt_char\": True,\n", "    }\n"]}, {"span_id": "PrettyPrinter._print_BasisDependent", "start_line": 889, "end_line": 964, "content": ["    def _print_BasisDependent(self, expr):\n", "        from sympy.vector import Vector\n", "\n", "        if not self._use_unicode:\n", "            raise NotImplementedError(\"ASCII pretty printing of BasisDependent is not implemented\")\n", "\n", "        if expr == expr.zero:\n", "            return prettyForm(expr.zero._pretty_form)\n", "        o1 = []\n", "        vectstrs = []\n", "        if isinstance(expr, Vector):\n", "            items = expr.separate().items()\n", "        else:\n", "            items = [(0, expr)]\n", "        for system, vect in items:\n", "            inneritems = list(vect.components.items())\n", "            inneritems.sort(key = lambda x: x[0].__str__())\n", "            for k, v in inneritems:\n", "                #if the coef of the basis vector is 1\n", "                #we skip the 1\n", "                if v == 1:\n", "                    o1.append(u\"\" +\n", "                              k._pretty_form)\n", "                #Same for -1\n", "                elif v == -1:\n", "                    o1.append(u\"(-1) \" +\n", "                              k._pretty_form)\n", "                #For a general expr\n", "                else:\n", "                    #We always wrap the measure numbers in\n", "                    #parentheses\n", "                    arg_str = self._print(\n", "                        v).parens()[0]\n", "\n", "                    o1.append(arg_str + ' ' + k._pretty_form)\n", "                vectstrs.append(k._pretty_form)\n", "\n", "        #outstr = u(\"\").join(o1)\n", "        if o1[0].startswith(u\" + \"):\n", "            o1[0] = o1[0][3:]\n", "        elif o1[0].startswith(\" \"):\n", "            o1[0] = o1[0][1:]\n", "        #Fixing the newlines\n", "        lengths = []\n", "        strs = ['']\n", "        for i, partstr in enumerate(o1):\n", "            # XXX: What is this hack?\n", "            if '\\n' in partstr:\n", "                tempstr = partstr\n", "                tempstr = tempstr.replace(vectstrs[i], '')\n", "                tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',\n", "                                          u'\\N{RIGHT PARENTHESIS UPPER HOOK}'\n", "                                          + ' ' + vectstrs[i])\n", "                o1[i] = tempstr\n", "        o1 = [x.split('\\n') for x in o1]\n", "        n_newlines = max([len(x) for x in o1])\n", "        for parts in o1:\n", "            lengths.append(len(parts[0]))\n", "            for j in range(n_newlines):\n", "                if j+1 <= len(parts):\n", "                    if j >= len(strs):\n", "                        strs.append(' ' * (sum(lengths[:-1]) +\n", "                                           3*(len(lengths)-1)))\n", "                    if j == 0:\n", "                        strs[0] += parts[0] + ' + '\n", "                    else:\n", "                        strs[j] += parts[j] + ' '*(lengths[-1] -\n", "                                                   len(parts[j])+\n", "                                                   3)\n", "                else:\n", "                    if j >= len(strs):\n", "                        strs.append(' ' * (sum(lengths[:-1]) +\n", "                                           3*(len(lengths)-1)))\n", "                    strs[j] += ' '*(lengths[-1]+3)\n", "\n", "        return prettyForm(u'\\n'.join([s[:-3] for s in strs]))\n"]}]}, {"file_path": "sympy/printing/str.py", "span_ids": ["StrPrinter"], "content": [{"span_id": "StrPrinter", "start_line": 18, "end_line": 27, "content": ["class StrPrinter(Printer):\n", "    printmethod = \"_sympystr\"\n", "    _default_settings = {\n", "        \"order\": None,\n", "        \"full_prec\": \"auto\",\n", "        \"sympy_integers\": False,\n", "        \"abbrev\": False,\n", "    }\n", "\n", "    _relationals = dict()\n"]}]}]}