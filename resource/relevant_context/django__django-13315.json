{"instance_id": "django__django-13315", "identified_spans": [{"file_path": "django/db/models/fields/related.py", "span_ids": ["ForeignKey.formfield", "RelatedField.get_limit_choices_to", "RelatedField.formfield"], "content": [{"span_id": "ForeignKey.formfield", "start_line": 984, "end_line": 995, "content": ["    def formfield(self, *, using=None, **kwargs):\n", "        if isinstance(self.remote_field.model, str):\n", "            raise ValueError(\"Cannot create form field for %r yet, because \"\n", "                             \"its related model %r has not been loaded yet\" %\n", "                             (self.name, self.remote_field.model))\n", "        return super().formfield(**{\n", "            'form_class': forms.ModelChoiceField,\n", "            'queryset': self.remote_field.model._default_manager.using(using),\n", "            'to_field_name': self.remote_field.field_name,\n", "            **kwargs,\n", "            'blank': self.blank,\n", "        })\n"]}, {"span_id": "RelatedField.get_limit_choices_to", "start_line": 390, "end_line": 399, "content": ["    def get_limit_choices_to(self):\n", "        \"\"\"\n", "        Return ``limit_choices_to`` for this model field.\n", "\n", "        If it is a callable, it will be invoked and the result will be\n", "        returned.\n", "        \"\"\"\n", "        if callable(self.remote_field.limit_choices_to):\n", "            return self.remote_field.limit_choices_to()\n", "        return self.remote_field.limit_choices_to\n"]}, {"span_id": "RelatedField.formfield", "start_line": 401, "end_line": 419, "content": ["    def formfield(self, **kwargs):\n", "        \"\"\"\n", "        Pass ``limit_choices_to`` to the field being constructed.\n", "\n", "        Only passes it if there is a type that supports related fields.\n", "        This is a similar strategy used to pass the ``queryset`` to the field\n", "        being constructed.\n", "        \"\"\"\n", "        defaults = {}\n", "        if hasattr(self.remote_field, 'get_related_field'):\n", "            # If this is a callable, do not invoke it here. Just pass\n", "            # it in the defaults for when the form class will later be\n", "            # instantiated.\n", "            limit_choices_to = self.remote_field.limit_choices_to\n", "            defaults.update({\n", "                'limit_choices_to': limit_choices_to,\n", "            })\n", "        defaults.update(kwargs)\n", "        return super().formfield(**defaults)\n"]}]}, {"file_path": "django/forms/models.py", "span_ids": ["ModelChoiceField.get_limit_choices_to", "ModelChoiceField._get_choices", "ModelChoiceField"], "content": [{"span_id": "ModelChoiceField.get_limit_choices_to", "start_line": 1211, "end_line": 1219, "content": ["    def get_limit_choices_to(self):\n", "        \"\"\"\n", "        Return ``limit_choices_to`` for this form field.\n", "\n", "        If it is a callable, invoke it and return the result.\n", "        \"\"\"\n", "        if callable(self.limit_choices_to):\n", "            return self.limit_choices_to()\n", "        return self.limit_choices_to\n"]}, {"span_id": "ModelChoiceField._get_choices", "start_line": 1247, "end_line": 1260, "content": ["    def _get_choices(self):\n", "        # If self._choices is set, then somebody must have manually set\n", "        # the property self.choices. In this case, just return self._choices.\n", "        if hasattr(self, '_choices'):\n", "            return self._choices\n", "\n", "        # Otherwise, execute the QuerySet in self.queryset to determine the\n", "        # choices dynamically. Return a fresh ModelChoiceIterator that has not been\n", "        # consumed. Note that we're instantiating a new ModelChoiceIterator *each*\n", "        # time _get_choices() is called (and, thus, each time self.choices is\n", "        # accessed) so that we can ensure the QuerySet has not been consumed. This\n", "        # construct might look complicated but it allows for lazy evaluation of\n", "        # the queryset.\n", "        return self.iterator(self)\n"]}, {"span_id": "ModelChoiceField", "start_line": 1180, "end_line": 1188, "content": ["class ModelChoiceField(ChoiceField):\n", "    \"\"\"A ChoiceField whose choices are a model QuerySet.\"\"\"\n", "    # This class is a subclass of ChoiceField for purity, but it doesn't\n", "    # actually use any of ChoiceField's implementation.\n", "    default_error_messages = {\n", "        'invalid_choice': _('Select a valid choice. That choice is not one of'\n", "                            ' the available choices.'),\n", "    }\n", "    iterator = ModelChoiceIterator\n"]}]}]}