{"instance_id": "pylint-dev__pylint-7993", "identified_spans": [{"file_path": "pylint/message/message.py", "span_ids": ["Message"], "content": [{"span_id": "Message", "start_line": 15, "end_line": 32, "content": ["@dataclass(unsafe_hash=True)\n", "class Message:  # pylint: disable=too-many-instance-attributes\n", "    \"\"\"This class represent a message to be issued by the reporters.\"\"\"\n", "\n", "    msg_id: str\n", "    symbol: str\n", "    msg: str\n", "    C: str\n", "    category: str\n", "    confidence: Confidence\n", "    abspath: str\n", "    path: str\n", "    module: str\n", "    obj: str\n", "    line: int\n", "    column: int\n", "    end_line: int | None\n", "    end_column: int | None\n"]}]}, {"file_path": "pylint/reporters/text.py", "span_ids": ["TextReporter.on_set_current_module", "TextReporter"], "content": [{"span_id": "TextReporter.on_set_current_module", "start_line": 166, "end_line": 186, "content": ["    def on_set_current_module(self, module: str, filepath: str | None) -> None:\n", "        \"\"\"Set the format template to be used and check for unrecognized arguments.\"\"\"\n", "        template = str(self.linter.config.msg_template or self._template)\n", "\n", "        # Return early if the template is the same as the previous one\n", "        if template == self._template:\n", "            return\n", "\n", "        # Set template to the currently selected template\n", "        self._template = template\n", "\n", "        # Check to see if all parameters in the template are attributes of the Message\n", "        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n", "        for argument in arguments:\n", "            if argument[0] not in MESSAGE_FIELDS:\n", "                warnings.warn(\n", "                    f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n", "                    \"Are you sure it is supported on the current version of pylint?\"\n", "                )\n", "                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n", "        self._fixed_template = template\n"]}, {"span_id": "TextReporter", "start_line": 152, "end_line": 157, "content": ["class TextReporter(BaseReporter):\n", "    \"\"\"Reports messages and layouts in plain text.\"\"\"\n", "\n", "    name = \"text\"\n", "    extension = \"txt\"\n", "    line_format = \"{path}:{line}:{column}: {msg_id}: {msg} ({symbol})\"\n"]}]}]}