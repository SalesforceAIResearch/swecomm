{"instance_id": "django__django-15400", "identified_spans": [{"file_path": "django/utils/functional.py", "span_ids": ["new_method_proxy", "SimpleLazyObject", "LazyObject:7"], "content": [{"span_id": "new_method_proxy", "start_line": 263, "end_line": 269, "content": ["def new_method_proxy(func):\n", "    def inner(self, *args):\n", "        if self._wrapped is empty:\n", "            self._setup()\n", "        return func(self._wrapped, *args)\n", "\n", "    return inner\n"]}, {"span_id": "SimpleLazyObject", "start_line": 385, "end_line": 391, "content": ["class SimpleLazyObject(LazyObject):\n", "    \"\"\"\n", "    A lazy object initialized from any function.\n", "\n", "    Designed for compound objects of unknown type. For builtins or objects of\n", "    known type, use django.utils.functional.lazy.\n", "    \"\"\"\n"]}, {"span_id": "LazyObject:7", "start_line": 352, "end_line": 374, "content": ["    __bytes__ = new_method_proxy(bytes)\n", "    __str__ = new_method_proxy(str)\n", "    __bool__ = new_method_proxy(bool)\n", "\n", "    # Introspection support\n", "    __dir__ = new_method_proxy(dir)\n", "\n", "    # Need to pretend to be the wrapped class, for the sake of objects that\n", "    # care about this (especially in equality tests)\n", "    __class__ = property(new_method_proxy(operator.attrgetter(\"__class__\")))\n", "    __eq__ = new_method_proxy(operator.eq)\n", "    __lt__ = new_method_proxy(operator.lt)\n", "    __gt__ = new_method_proxy(operator.gt)\n", "    __ne__ = new_method_proxy(operator.ne)\n", "    __hash__ = new_method_proxy(hash)\n", "\n", "    # List/Tuple/Dictionary methods support\n", "    __getitem__ = new_method_proxy(operator.getitem)\n", "    __setitem__ = new_method_proxy(operator.setitem)\n", "    __delitem__ = new_method_proxy(operator.delitem)\n", "    __iter__ = new_method_proxy(iter)\n", "    __len__ = new_method_proxy(len)\n", "    __contains__ = new_method_proxy(operator.contains)\n"]}]}]}