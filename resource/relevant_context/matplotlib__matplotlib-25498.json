{"instance_id": "matplotlib__matplotlib-25498", "identified_spans": [{"file_path": "lib/matplotlib/cm.py", "span_ids": ["ScalarMappable.set_norm"], "content": [{"span_id": "ScalarMappable.set_norm", "start_line": 621, "end_line": 635, "content": ["    def set_norm(self, norm):\n", "        \"\"\"\n", "        Set the normalization instance.\n", "\n", "        Parameters\n", "        ----------\n", "        norm : `.Normalize` or str or None\n", "\n", "        Notes\n", "        -----\n", "        If there are any colorbars using the mappable for this norm, setting\n", "        the norm of the mappable will reset the norm, locator, and formatters\n", "        on the colorbar to default.\n", "        \"\"\"\n", "        self.norm = norm\n"]}]}, {"file_path": "lib/matplotlib/colorbar.py", "span_ids": ["Colorbar._draw_all", "Colorbar.update_normal"], "content": [{"span_id": "Colorbar._draw_all", "start_line": 529, "end_line": 579, "content": ["    def _draw_all(self):\n", "        \"\"\"\n", "        Calculate any free parameters based on the current cmap and norm,\n", "        and do all the drawing.\n", "        \"\"\"\n", "        if self.orientation == 'vertical':\n", "            if mpl.rcParams['ytick.minor.visible']:\n", "                self.minorticks_on()\n", "        else:\n", "            if mpl.rcParams['xtick.minor.visible']:\n", "                self.minorticks_on()\n", "        self._long_axis().set(label_position=self.ticklocation,\n", "                              ticks_position=self.ticklocation)\n", "        self._short_axis().set_ticks([])\n", "        self._short_axis().set_ticks([], minor=True)\n", "\n", "        # Set self._boundaries and self._values, including extensions.\n", "        # self._boundaries are the edges of each square of color, and\n", "        # self._values are the value to map into the norm to get the\n", "        # color:\n", "        self._process_values()\n", "        # Set self.vmin and self.vmax to first and last boundary, excluding\n", "        # extensions:\n", "        self.vmin, self.vmax = self._boundaries[self._inside][[0, -1]]\n", "        # Compute the X/Y mesh.\n", "        X, Y = self._mesh()\n", "        # draw the extend triangles, and shrink the inner axes to accommodate.\n", "        # also adds the outline path to self.outline spine:\n", "        self._do_extends()\n", "        lower, upper = self.vmin, self.vmax\n", "        if self._long_axis().get_inverted():\n", "            # If the axis is inverted, we need to swap the vmin/vmax\n", "            lower, upper = upper, lower\n", "        if self.orientation == 'vertical':\n", "            self.ax.set_xlim(0, 1)\n", "            self.ax.set_ylim(lower, upper)\n", "        else:\n", "            self.ax.set_ylim(0, 1)\n", "            self.ax.set_xlim(lower, upper)\n", "\n", "        # set up the tick locators and formatters.  A bit complicated because\n", "        # boundary norms + uniform spacing requires a manual locator.\n", "        self.update_ticks()\n", "\n", "        if self._filled:\n", "            ind = np.arange(len(self._values))\n", "            if self._extend_lower():\n", "                ind = ind[1:]\n", "            if self._extend_upper():\n", "                ind = ind[:-1]\n", "            self._add_solids(X, Y, self._values[ind, np.newaxis])\n"]}, {"span_id": "Colorbar.update_normal", "start_line": 493, "end_line": 519, "content": ["    def update_normal(self, mappable):\n", "        \"\"\"\n", "        Update solid patches, lines, etc.\n", "\n", "        This is meant to be called when the norm of the image or contour plot\n", "        to which this colorbar belongs changes.\n", "\n", "        If the norm on the mappable is different than before, this resets the\n", "        locator and formatter for the axis, so if these have been customized,\n", "        they will need to be customized again.  However, if the norm only\n", "        changes values of *vmin*, *vmax* or *cmap* then the old formatter\n", "        and locator will be preserved.\n", "        \"\"\"\n", "        _log.debug('colorbar update normal %r %r', mappable.norm, self.norm)\n", "        self.mappable = mappable\n", "        self.set_alpha(mappable.get_alpha())\n", "        self.cmap = mappable.cmap\n", "        if mappable.norm != self.norm:\n", "            self.norm = mappable.norm\n", "            self._reset_locator_formatter_scale()\n", "\n", "        self._draw_all()\n", "        if isinstance(self.mappable, contour.ContourSet):\n", "            CS = self.mappable\n", "            if not CS.filled:\n", "                self.add_lines(CS)\n", "        self.stale = True\n"]}]}, {"file_path": "lib/matplotlib/colors.py", "span_ids": ["Normalize.vmin", "Normalize.vmax"], "content": [{"span_id": "Normalize.vmin", "start_line": 1231, "end_line": 1233, "content": ["    @property\n", "    def vmin(self):\n", "        return self._vmin\n"]}, {"span_id": "Normalize.vmax", "start_line": 1242, "end_line": 1244, "content": ["    @property\n", "    def vmax(self):\n", "        return self._vmax\n"]}]}]}