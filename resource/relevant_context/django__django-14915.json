{"instance_id": "django__django-14915", "identified_spans": [{"file_path": "django/forms/models.py", "span_ids": ["ModelChoiceIteratorValue.__eq__", "ModelChoiceIterator.choice", "ModelChoiceIterator", "ModelChoiceIteratorValue.__str__", "ModelChoiceField", "ModelChoiceIteratorValue"], "content": [{"span_id": "ModelChoiceIteratorValue.__eq__", "start_line": 1169, "end_line": 1172, "content": ["    def __eq__(self, other):\n", "        if isinstance(other, ModelChoiceIteratorValue):\n", "            other = other.value\n", "        return self.value == other\n"]}, {"span_id": "ModelChoiceIterator.choice", "start_line": 1199, "end_line": 1203, "content": ["    def choice(self, obj):\n", "        return (\n", "            ModelChoiceIteratorValue(self.field.prepare_value(obj), obj),\n", "            self.field.label_from_instance(obj),\n", "        )\n"]}, {"span_id": "ModelChoiceIterator", "start_line": 1175, "end_line": 1175, "content": ["class ModelChoiceIterator:\n"]}, {"span_id": "ModelChoiceIteratorValue.__str__", "start_line": 1166, "end_line": 1167, "content": ["    def __str__(self):\n", "        return str(self.value)\n"]}, {"span_id": "ModelChoiceField", "start_line": 1206, "end_line": 1214, "content": ["class ModelChoiceField(ChoiceField):\n", "    \"\"\"A ChoiceField whose choices are a model QuerySet.\"\"\"\n", "    # This class is a subclass of ChoiceField for purity, but it doesn't\n", "    # actually use any of ChoiceField's implementation.\n", "    default_error_messages = {\n", "        'invalid_choice': _('Select a valid choice. That choice is not one of'\n", "                            ' the available choices.'),\n", "    }\n", "    iterator = ModelChoiceIterator\n"]}, {"span_id": "ModelChoiceIteratorValue", "start_line": 1161, "end_line": 1161, "content": ["class ModelChoiceIteratorValue:\n"]}]}, {"file_path": "django/forms/widgets.py", "span_ids": ["ChoiceWidget.create_option", "ChoiceWidget"], "content": [{"span_id": "ChoiceWidget.create_option", "start_line": 621, "end_line": 638, "content": ["    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n", "        index = str(index) if subindex is None else \"%s_%s\" % (index, subindex)\n", "        option_attrs = self.build_attrs(self.attrs, attrs) if self.option_inherits_attrs else {}\n", "        if selected:\n", "            option_attrs.update(self.checked_attribute)\n", "        if 'id' in option_attrs:\n", "            option_attrs['id'] = self.id_for_label(option_attrs['id'], index)\n", "        return {\n", "            'name': name,\n", "            'value': value,\n", "            'label': label,\n", "            'selected': selected,\n", "            'index': index,\n", "            'attrs': option_attrs,\n", "            'type': self.input_type,\n", "            'template_name': self.option_template_name,\n", "            'wrap_label': True,\n", "        }\n"]}, {"span_id": "ChoiceWidget", "start_line": 551, "end_line": 558, "content": ["class ChoiceWidget(Widget):\n", "    allow_multiple_selected = False\n", "    input_type = None\n", "    template_name = None\n", "    option_template_name = None\n", "    add_id_index = True\n", "    checked_attribute = {'checked': True}\n", "    option_inherits_attrs = True\n"]}]}]}