{"instance_id": "django__django-13658", "identified_spans": [{"file_path": "django/core/management/__init__.py", "span_ids": ["ManagementUtility.execute", "ManagementUtility"], "content": [{"span_id": "ManagementUtility.execute", "start_line": 334, "end_line": 408, "content": ["    def execute(self):\n", "        \"\"\"\n", "        Given the command-line arguments, figure out which subcommand is being\n", "        run, create a parser appropriate to that command, and run it.\n", "        \"\"\"\n", "        try:\n", "            subcommand = self.argv[1]\n", "        except IndexError:\n", "            subcommand = 'help'  # Display help if no arguments were given.\n", "\n", "        # Preprocess options to extract --settings and --pythonpath.\n", "        # These options could affect the commands that are available, so they\n", "        # must be processed early.\n", "        parser = CommandParser(usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\n", "        parser.add_argument('--settings')\n", "        parser.add_argument('--pythonpath')\n", "        parser.add_argument('args', nargs='*')  # catch-all\n", "        try:\n", "            options, args = parser.parse_known_args(self.argv[2:])\n", "            handle_default_options(options)\n", "        except CommandError:\n", "            pass  # Ignore any option errors at this point.\n", "\n", "        try:\n", "            settings.INSTALLED_APPS\n", "        except ImproperlyConfigured as exc:\n", "            self.settings_exception = exc\n", "        except ImportError as exc:\n", "            self.settings_exception = exc\n", "\n", "        if settings.configured:\n", "            # Start the auto-reloading dev server even if the code is broken.\n", "            # The hardcoded condition is a code smell but we can't rely on a\n", "            # flag on the command class because we haven't located it yet.\n", "            if subcommand == 'runserver' and '--noreload' not in self.argv:\n", "                try:\n", "                    autoreload.check_errors(django.setup)()\n", "                except Exception:\n", "                    # The exception will be raised later in the child process\n", "                    # started by the autoreloader. Pretend it didn't happen by\n", "                    # loading an empty list of applications.\n", "                    apps.all_models = defaultdict(dict)\n", "                    apps.app_configs = {}\n", "                    apps.apps_ready = apps.models_ready = apps.ready = True\n", "\n", "                    # Remove options not compatible with the built-in runserver\n", "                    # (e.g. options for the contrib.staticfiles' runserver).\n", "                    # Changes here require manually testing as described in\n", "                    # #27522.\n", "                    _parser = self.fetch_command('runserver').create_parser('django', 'runserver')\n", "                    _options, _args = _parser.parse_known_args(self.argv[2:])\n", "                    for _arg in _args:\n", "                        self.argv.remove(_arg)\n", "\n", "            # In all other cases, django.setup() is required to succeed.\n", "            else:\n", "                django.setup()\n", "\n", "        self.autocomplete()\n", "\n", "        if subcommand == 'help':\n", "            if '--commands' in args:\n", "                sys.stdout.write(self.main_help_text(commands_only=True) + '\\n')\n", "            elif not options.args:\n", "                sys.stdout.write(self.main_help_text() + '\\n')\n", "            else:\n", "                self.fetch_command(options.args[0]).print_help(self.prog_name, options.args[0])\n", "        # Special-cases: We want 'django-admin --version' and\n", "        # 'django-admin --help' to work, for backwards compatibility.\n", "        elif subcommand == 'version' or self.argv[1:] == ['--version']:\n", "            sys.stdout.write(django.get_version() + '\\n')\n", "        elif self.argv[1:] in (['--help'], ['-h']):\n", "            sys.stdout.write(self.main_help_text() + '\\n')\n", "        else:\n", "            self.fetch_command(subcommand).run_from_argv(self.argv)\n"]}, {"span_id": "ManagementUtility", "start_line": 184, "end_line": 187, "content": ["class ManagementUtility:\n", "    \"\"\"\n", "    Encapsulate the logic of the django-admin and manage.py utilities.\n", "    \"\"\"\n"]}]}]}