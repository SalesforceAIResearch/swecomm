{"instance_id": "matplotlib__matplotlib-23562", "identified_spans": [{"file_path": "lib/matplotlib/collections.py", "span_ids": ["PolyCollection.__init__", "PolyCollection"], "content": [{"span_id": "PolyCollection.__init__", "start_line": 1153, "end_line": 1177, "content": ["    @_api.make_keyword_only(\"3.6\", name=\"closed\")\n", "    def __init__(self, verts, sizes=None, closed=True, **kwargs):\n", "        \"\"\"\n", "        Parameters\n", "        ----------\n", "        verts : list of array-like\n", "            The sequence of polygons [*verts0*, *verts1*, ...] where each\n", "            element *verts_i* defines the vertices of polygon *i* as a 2D\n", "            array-like of shape (M, 2).\n", "        sizes : array-like, default: None\n", "            Squared scaling factors for the polygons. The coordinates of each\n", "            polygon *verts_i* are multiplied by the square-root of the\n", "            corresponding entry in *sizes* (i.e., *sizes* specify the scaling\n", "            of areas). The scaling is applied before the Artist master\n", "            transform.\n", "        closed : bool, default: True\n", "            Whether the polygon should be closed by adding a CLOSEPOLY\n", "            connection at the end.\n", "        **kwargs\n", "            Forwarded to `.Collection`.\n", "        \"\"\"\n", "        super().__init__(**kwargs)\n", "        self.set_sizes(sizes)\n", "        self.set_verts(verts, closed)\n", "        self.stale = True\n"]}, {"span_id": "PolyCollection", "start_line": 1151, "end_line": 1151, "content": ["class PolyCollection(_CollectionWithSizes):\n"]}]}, {"file_path": "lib/mpl_toolkits/mplot3d/art3d.py", "span_ids": ["poly_collection_2d_to_3d", "Poly3DCollection", "Poly3DCollection.__init__"], "content": [{"span_id": "poly_collection_2d_to_3d", "start_line": 876, "end_line": 882, "content": ["def poly_collection_2d_to_3d(col, zs=0, zdir='z'):\n", "    \"\"\"Convert a PolyCollection to a Poly3DCollection object.\"\"\"\n", "    segments_3d, codes = _paths_to_3d_segments_with_codes(\n", "            col.get_paths(), zs, zdir)\n", "    col.__class__ = Poly3DCollection\n", "    col.set_verts_and_codes(segments_3d, codes)\n", "    col.set_3d_properties()\n"]}, {"span_id": "Poly3DCollection", "start_line": 663, "end_line": 682, "content": ["class Poly3DCollection(PolyCollection):\n", "    \"\"\"\n", "    A collection of 3D polygons.\n", "\n", "    .. note::\n", "        **Filling of 3D polygons**\n", "\n", "        There is no simple definition of the enclosed surface of a 3D polygon\n", "        unless the polygon is planar.\n", "\n", "        In practice, Matplotlib fills the 2D projection of the polygon. This\n", "        gives a correct filling appearance only for planar polygons. For all\n", "        other polygons, you'll find orientations in which the edges of the\n", "        polygon intersect in the projection. This will lead to an incorrect\n", "        visualization of the 3D area.\n", "\n", "        If you need filled areas, it is recommended to create them via\n", "        `~mpl_toolkits.mplot3d.axes3d.Axes3D.plot_trisurf`, which creates a\n", "        triangulation and thus generates consistent surfaces.\n", "    \"\"\"\n"]}, {"span_id": "Poly3DCollection.__init__", "start_line": 684, "end_line": 710, "content": ["    def __init__(self, verts, *args, zsort='average', **kwargs):\n", "        \"\"\"\n", "        Parameters\n", "        ----------\n", "        verts : list of (N, 3) array-like\n", "            Each element describes a polygon as a sequence of ``N_i`` points\n", "            ``(x, y, z)``.\n", "        zsort : {'average', 'min', 'max'}, default: 'average'\n", "            The calculation method for the z-order.\n", "            See `~.Poly3DCollection.set_zsort` for details.\n", "        *args, **kwargs\n", "            All other parameters are forwarded to `.PolyCollection`.\n", "\n", "        Notes\n", "        -----\n", "        Note that this class does a bit of magic with the _facecolors\n", "        and _edgecolors properties.\n", "        \"\"\"\n", "        super().__init__(verts, *args, **kwargs)\n", "        if isinstance(verts, np.ndarray):\n", "            if verts.ndim != 3:\n", "                raise ValueError('verts must be a list of (N, 3) array-like')\n", "        else:\n", "            if any(len(np.shape(vert)) != 2 for vert in verts):\n", "                raise ValueError('verts must be a list of (N, 3) array-like')\n", "        self.set_zsort(zsort)\n", "        self._codes3d = None\n"]}]}]}