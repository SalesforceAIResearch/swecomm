{"instance_id": "sphinx-doc__sphinx-8506", "identified_spans": [{"file_path": "sphinx/domains/std.py", "span_ids": ["Cmdoption.handle_signature", "Cmdoption"], "content": [{"span_id": "Cmdoption.handle_signature", "start_line": 186, "end_line": 212, "content": ["    def handle_signature(self, sig: str, signode: desc_signature) -> str:\n", "        \"\"\"Transform an option description into RST nodes.\"\"\"\n", "        count = 0\n", "        firstname = ''\n", "        for potential_option in sig.split(', '):\n", "            potential_option = potential_option.strip()\n", "            m = option_desc_re.match(potential_option)\n", "            if not m:\n", "                logger.warning(__('Malformed option description %r, should '\n", "                                  'look like \"opt\", \"-opt args\", \"--opt args\", '\n", "                                  '\"/opt args\" or \"+opt args\"'), potential_option,\n", "                               location=signode)\n", "                continue\n", "            optname, args = m.groups()\n", "            if count:\n", "                signode += addnodes.desc_addname(', ', ', ')\n", "            signode += addnodes.desc_name(optname, optname)\n", "            signode += addnodes.desc_addname(args, args)\n", "            if not count:\n", "                firstname = optname\n", "                signode['allnames'] = [optname]\n", "            else:\n", "                signode['allnames'].append(optname)\n", "            count += 1\n", "        if not firstname:\n", "            raise ValueError\n", "        return firstname\n"]}, {"span_id": "Cmdoption", "start_line": 181, "end_line": 184, "content": ["class Cmdoption(ObjectDescription):\n", "    \"\"\"\n", "    Description of a command-line option (.. option).\n", "    \"\"\"\n"]}]}]}