{"instance_id": "scikit-learn__scikit-learn-14894", "identified_spans": [{"file_path": "sklearn/svm/base.py", "span_ids": ["BaseLibSVM._sparse_fit"], "content": [{"span_id": "BaseLibSVM._sparse_fit", "start_line": 261, "end_line": 294, "content": ["    def _sparse_fit(self, X, y, sample_weight, solver_type, kernel,\n", "                    random_seed):\n", "        X.data = np.asarray(X.data, dtype=np.float64, order='C')\n", "        X.sort_indices()\n", "\n", "        kernel_type = self._sparse_kernels.index(kernel)\n", "\n", "        libsvm_sparse.set_verbosity_wrap(self.verbose)\n", "\n", "        self.support_, self.support_vectors_, dual_coef_data, \\\n", "            self.intercept_, self._n_support, \\\n", "            self.probA_, self.probB_, self.fit_status_ = \\\n", "            libsvm_sparse.libsvm_sparse_train(\n", "                X.shape[1], X.data, X.indices, X.indptr, y, solver_type,\n", "                kernel_type, self.degree, self._gamma, self.coef0, self.tol,\n", "                self.C, self.class_weight_,\n", "                sample_weight, self.nu, self.cache_size, self.epsilon,\n", "                int(self.shrinking), int(self.probability), self.max_iter,\n", "                random_seed)\n", "\n", "        self._warn_from_fit_status()\n", "\n", "        if hasattr(self, \"classes_\"):\n", "            n_class = len(self.classes_) - 1\n", "        else:  # regression\n", "            n_class = 1\n", "        n_SV = self.support_vectors_.shape[0]\n", "\n", "        dual_coef_indices = np.tile(np.arange(n_SV), n_class)\n", "        dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,\n", "                                     dual_coef_indices.size / n_class)\n", "        self.dual_coef_ = sp.csr_matrix(\n", "            (dual_coef_data, dual_coef_indices, dual_coef_indptr),\n", "            (n_class, n_SV))\n"]}]}]}