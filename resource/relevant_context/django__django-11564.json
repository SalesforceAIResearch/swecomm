{"instance_id": "django__django-11564", "identified_spans": [{"file_path": "django/contrib/staticfiles/handlers.py", "span_ids": ["StaticFilesHandlerMixin"], "content": [{"span_id": "StaticFilesHandlerMixin", "start_line": 13, "end_line": 19, "content": ["class StaticFilesHandlerMixin:\n", "    \"\"\"\n", "    Common methods used by WSGI and ASGI handlers.\n", "    \"\"\"\n", "    # May be used to differentiate between handler types (e.g. in a\n", "    # request_finished signal)\n", "    handles_files = True\n"]}]}, {"file_path": "django/contrib/staticfiles/storage.py", "span_ids": ["StaticFilesStorage", "StaticFilesStorage.__init__"], "content": [{"span_id": "StaticFilesStorage", "start_line": 16, "end_line": 22, "content": ["class StaticFilesStorage(FileSystemStorage):\n", "    \"\"\"\n", "    Standard file system storage for static files.\n", "\n", "    The defaults for ``location`` and ``base_url`` are\n", "    ``STATIC_ROOT`` and ``STATIC_URL``.\n", "    \"\"\"\n"]}, {"span_id": "StaticFilesStorage.__init__", "start_line": 23, "end_line": 34, "content": ["    def __init__(self, location=None, base_url=None, *args, **kwargs):\n", "        if location is None:\n", "            location = settings.STATIC_ROOT\n", "        if base_url is None:\n", "            base_url = settings.STATIC_URL\n", "        check_settings(base_url)\n", "        super().__init__(location, base_url, *args, **kwargs)\n", "        # FileSystemStorage fallbacks to MEDIA_ROOT when location\n", "        # is empty, so we restore the empty value.\n", "        if not location:\n", "            self.base_location = None\n", "            self.location = None\n"]}]}, {"file_path": "django/core/files/storage.py", "span_ids": ["FileSystemStorage.url", "FileSystemStorage"], "content": [{"span_id": "FileSystemStorage.url", "start_line": 329, "end_line": 335, "content": ["    def url(self, name):\n", "        if self.base_url is None:\n", "            raise ValueError(\"This file is not accessible via a URL.\")\n", "        url = filepath_to_uri(name)\n", "        if url is not None:\n", "            url = url.lstrip('/')\n", "        return urljoin(self.base_url, url)\n"]}, {"span_id": "FileSystemStorage", "start_line": 176, "end_line": 183, "content": ["@deconstructible\n", "class FileSystemStorage(Storage):\n", "    \"\"\"\n", "    Standard filesystem storage\n", "    \"\"\"\n", "    # The combination of O_CREAT and O_EXCL makes os.open() raise OSError if\n", "    # the file already exists before it's opened.\n", "    OS_OPEN_FLAGS = os.O_WRONLY | os.O_CREAT | os.O_EXCL | getattr(os, 'O_BINARY', 0)\n"]}]}, {"file_path": "django/template/context_processors.py", "span_ids": ["static", "media"], "content": [{"span_id": "static", "start_line": 66, "end_line": 70, "content": ["def static(request):\n", "    \"\"\"\n", "    Add static-related context variables to the context.\n", "    \"\"\"\n", "    return {'STATIC_URL': settings.STATIC_URL}\n"]}, {"span_id": "media", "start_line": 73, "end_line": 77, "content": ["def media(request):\n", "    \"\"\"\n", "    Add media-related context variables to the context.\n", "    \"\"\"\n", "    return {'MEDIA_URL': settings.MEDIA_URL}\n"]}]}, {"file_path": "django/templatetags/static.py", "span_ids": ["PrefixNode", "StaticNode.render", "StaticNode", "StaticNode.handle_simple"], "content": [{"span_id": "PrefixNode", "start_line": 11, "end_line": 11, "content": ["class PrefixNode(template.Node):\n"]}, {"span_id": "StaticNode.render", "start_line": 105, "end_line": 112, "content": ["    def render(self, context):\n", "        url = self.url(context)\n", "        if context.autoescape:\n", "            url = conditional_escape(url)\n", "        if self.varname is None:\n", "            return url\n", "        context[self.varname] = url\n", "        return ''\n"]}, {"span_id": "StaticNode", "start_line": 93, "end_line": 93, "content": ["class StaticNode(template.Node):\n"]}, {"span_id": "StaticNode.handle_simple", "start_line": 114, "end_line": 120, "content": ["    @classmethod\n", "    def handle_simple(cls, path):\n", "        if apps.is_installed('django.contrib.staticfiles'):\n", "            from django.contrib.staticfiles.storage import staticfiles_storage\n", "            return staticfiles_storage.url(path)\n", "        else:\n", "            return urljoin(PrefixNode.handle_simple(\"STATIC_URL\"), quote(path))\n"]}]}]}