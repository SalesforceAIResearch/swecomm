{"instance_id": "sympy__sympy-13647", "identified_spans": [{"file_path": "sympy/matrices/common.py", "span_ids": ["MatrixShaping._eval_col_insert", "MatrixShaping.col_insert"], "content": [{"span_id": "MatrixShaping._eval_col_insert", "start_line": 81, "end_line": 92, "content": ["    def _eval_col_insert(self, pos, other):\n", "        cols = self.cols\n", "\n", "        def entry(i, j):\n", "            if j < pos:\n", "                return self[i, j]\n", "            elif pos <= j < pos + other.cols:\n", "                return other[i, j - pos]\n", "            return self[i, j - pos - other.cols]\n", "\n", "        return self._new(self.rows, self.cols + other.cols,\n", "                         lambda i, j: entry(i, j))\n"]}, {"span_id": "MatrixShaping.col_insert", "start_line": 182, "end_line": 218, "content": ["    def col_insert(self, pos, other):\n", "        \"\"\"Insert one or more columns at the given column position.\n", "\n", "        Examples\n", "        ========\n", "\n", "        >>> from sympy import zeros, ones\n", "        >>> M = zeros(3)\n", "        >>> V = ones(3, 1)\n", "        >>> M.col_insert(1, V)\n", "        Matrix([\n", "        [0, 1, 0, 0],\n", "        [0, 1, 0, 0],\n", "        [0, 1, 0, 0]])\n", "\n", "        See Also\n", "        ========\n", "\n", "        col\n", "        row_insert\n", "        \"\"\"\n", "        # Allows you to build a matrix even if it is null matrix\n", "        if not self:\n", "            return type(self)(other)\n", "\n", "        if pos < 0:\n", "            pos = self.cols + pos\n", "        if pos < 0:\n", "            pos = 0\n", "        elif pos > self.cols:\n", "            pos = self.cols\n", "\n", "        if self.rows != other.rows:\n", "            raise ShapeError(\n", "                \"self and other must have the same number of rows.\")\n", "\n", "        return self._eval_col_insert(pos, other)\n"]}]}]}