{"instance_id": "sympy__sympy-20590", "identified_spans": [{"file_path": "sympy/core/expr.py", "span_ids": ["AtomicExpr"], "content": [{"span_id": "AtomicExpr", "start_line": 3855, "end_line": 3865, "content": ["class AtomicExpr(Atom, Expr):\n", "    \"\"\"\n", "    A parent class for object which are both atoms and Exprs.\n", "\n", "    For example: Symbol, Number, Rational, Integer, ...\n", "    But not: Add, Mul, Pow, ...\n", "    \"\"\"\n", "    is_number = False\n", "    is_Atom = True\n", "\n", "    __slots__ = ()\n"]}]}, {"file_path": "sympy/core/symbol.py", "span_ids": ["Symbol"], "content": [{"span_id": "Symbol", "start_line": 182, "end_line": 206, "content": ["class Symbol(AtomicExpr, Boolean):\n", "    \"\"\"\n", "    Assumptions:\n", "       commutative = True\n", "\n", "    You can override the default assumptions in the constructor.\n", "\n", "    Examples\n", "    ========\n", "\n", "    >>> from sympy import symbols\n", "    >>> A,B = symbols('A,B', commutative = False)\n", "    >>> bool(A*B != B*A)\n", "    True\n", "    >>> bool(A*B*2 == 2*A*B) == True # multiplication by scalars is commutative\n", "    True\n", "\n", "    \"\"\"\n", "\n", "    is_comparable = False\n", "\n", "    __slots__ = ('name',)\n", "\n", "    is_Symbol = True\n", "    is_symbol = True\n"]}]}]}