{"instance_id": "sympy__sympy-23262", "identified_spans": [{"file_path": "sympy/utilities/lambdify.py", "span_ids": ["_recursive_to_string"], "content": [{"span_id": "_recursive_to_string", "start_line": 948, "end_line": 968, "content": ["def _recursive_to_string(doprint, arg):\n", "    \"\"\"Functions in lambdify accept both SymPy types and non-SymPy types such as python\n", "    lists and tuples. This method ensures that we only call the doprint method of the\n", "    printer with SymPy types (so that the printer safely can use SymPy-methods).\"\"\"\n", "    from sympy.matrices.common import MatrixOperations\n", "    from sympy.core.basic import Basic\n", "\n", "    if isinstance(arg, (Basic, MatrixOperations)):\n", "        return doprint(arg)\n", "    elif iterable(arg):\n", "        if isinstance(arg, list):\n", "            left, right = \"[]\"\n", "        elif isinstance(arg, tuple):\n", "            left, right = \"()\"\n", "        else:\n", "            raise NotImplementedError(\"unhandled type: %s, %s\" % (type(arg), arg))\n", "        return left +', '.join(_recursive_to_string(doprint, e) for e in arg) + right\n", "    elif isinstance(arg, str):\n", "        return arg\n", "    else:\n", "        return doprint(arg)\n"]}]}]}