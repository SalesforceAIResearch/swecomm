{"instance_id": "pytest-dev__pytest-8365", "identified_spans": [{"file_path": "src/_pytest/tmpdir.py", "span_ids": ["get_user", "TempPathFactory.mktemp", "tmp_path_factory", "tmpdir_factory", "tmpdir", "TempPathFactory.getbasetemp"], "content": [{"span_id": "get_user", "start_line": 151, "end_line": 159, "content": ["def get_user() -> Optional[str]:\n", "    \"\"\"Return the current user name, or None if getuser() does not work\n", "    in the current environment (see #1010).\"\"\"\n", "    import getpass\n", "\n", "    try:\n", "        return getpass.getuser()\n", "    except (ImportError, KeyError):\n", "        return None\n"]}, {"span_id": "TempPathFactory.mktemp", "start_line": 78, "end_line": 100, "content": ["    def mktemp(self, basename: str, numbered: bool = True) -> Path:\n", "        \"\"\"Create a new temporary directory managed by the factory.\n", "\n", "        :param basename:\n", "            Directory base name, must be a relative path.\n", "\n", "        :param numbered:\n", "            If ``True``, ensure the directory is unique by adding a numbered\n", "            suffix greater than any existing one: ``basename=\"foo-\"`` and ``numbered=True``\n", "            means that this function will create directories named ``\"foo-0\"``,\n", "            ``\"foo-1\"``, ``\"foo-2\"`` and so on.\n", "\n", "        :returns:\n", "            The path to the new directory.\n", "        \"\"\"\n", "        basename = self._ensure_relative_to_basetemp(basename)\n", "        if not numbered:\n", "            p = self.getbasetemp().joinpath(basename)\n", "            p.mkdir()\n", "        else:\n", "            p = make_numbered_dir(root=self.getbasetemp(), prefix=basename)\n", "            self._trace(\"mktemp\", p)\n", "        return p\n"]}, {"span_id": "tmp_path_factory", "start_line": 184, "end_line": 188, "content": ["@fixture(scope=\"session\")\n", "def tmp_path_factory(request: FixtureRequest) -> TempPathFactory:\n", "    \"\"\"Return a :class:`_pytest.tmpdir.TempPathFactory` instance for the test session.\"\"\"\n", "    # Set dynamically by pytest_configure() above.\n", "    return request.config._tmp_path_factory  # type: ignore\n"]}, {"span_id": "tmpdir_factory", "start_line": 177, "end_line": 181, "content": ["@fixture(scope=\"session\")\n", "def tmpdir_factory(request: FixtureRequest) -> TempdirFactory:\n", "    \"\"\"Return a :class:`_pytest.tmpdir.TempdirFactory` instance for the test session.\"\"\"\n", "    # Set dynamically by pytest_configure() above.\n", "    return request.config._tmpdirhandler  # type: ignore\n"]}, {"span_id": "tmpdir", "start_line": 199, "end_line": 214, "content": ["@fixture\n", "def tmpdir(tmp_path: Path) -> py.path.local:\n", "    \"\"\"Return a temporary directory path object which is unique to each test\n", "    function invocation, created as a sub directory of the base temporary\n", "    directory.\n", "\n", "    By default, a new base temporary directory is created each test session,\n", "    and old bases are removed after 3 sessions, to aid in debugging. If\n", "    ``--basetemp`` is used then it is cleared each session. See :ref:`base\n", "    temporary directory`.\n", "\n", "    The returned object is a `py.path.local`_ path object.\n", "\n", "    .. _`py.path.local`: https://py.readthedocs.io/en/latest/path.html\n", "    \"\"\"\n", "    return py.path.local(tmp_path)\n"]}, {"span_id": "TempPathFactory.getbasetemp", "start_line": 102, "end_line": 125, "content": ["    def getbasetemp(self) -> Path:\n", "        \"\"\"Return base temporary directory.\"\"\"\n", "        if self._basetemp is not None:\n", "            return self._basetemp\n", "\n", "        if self._given_basetemp is not None:\n", "            basetemp = self._given_basetemp\n", "            ensure_reset_dir(basetemp)\n", "            basetemp = basetemp.resolve()\n", "        else:\n", "            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n", "            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n", "            user = get_user() or \"unknown\"\n", "            # use a sub-directory in the temproot to speed-up\n", "            # make_numbered_dir() call\n", "            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n", "            rootdir.mkdir(exist_ok=True)\n", "            basetemp = make_numbered_dir_with_cleanup(\n", "                prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n", "            )\n", "        assert basetemp is not None, basetemp\n", "        self._basetemp = t = basetemp\n", "        self._trace(\"new basetemp\", t)\n", "        return t\n"]}]}]}