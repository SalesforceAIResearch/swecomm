{"instance_id": "django__django-15902", "identified_spans": [{"file_path": "django/contrib/admin/options.py", "span_ids": ["ModelAdmin._create_formsets"], "content": [{"span_id": "ModelAdmin._create_formsets", "start_line": 2246, "end_line": 2279, "content": ["    def _create_formsets(self, request, obj, change):\n", "        \"Helper function to generate formsets for add/change_view.\"\n", "        formsets = []\n", "        inline_instances = []\n", "        prefixes = {}\n", "        get_formsets_args = [request]\n", "        if change:\n", "            get_formsets_args.append(obj)\n", "        for FormSet, inline in self.get_formsets_with_inlines(*get_formsets_args):\n", "            prefix = FormSet.get_default_prefix()\n", "            prefixes[prefix] = prefixes.get(prefix, 0) + 1\n", "            if prefixes[prefix] != 1 or not prefix:\n", "                prefix = \"%s-%s\" % (prefix, prefixes[prefix])\n", "            formset_params = self.get_formset_kwargs(request, obj, inline, prefix)\n", "            formset = FormSet(**formset_params)\n", "\n", "            def user_deleted_form(request, obj, formset, index):\n", "                \"\"\"Return whether or not the user deleted the form.\"\"\"\n", "                return (\n", "                    inline.has_delete_permission(request, obj)\n", "                    and \"{}-{}-DELETE\".format(formset.prefix, index) in request.POST\n", "                )\n", "\n", "            # Bypass validation of each view-only inline form (since the form's\n", "            # data won't be in request.POST), unless the form was deleted.\n", "            if not inline.has_change_permission(request, obj if change else None):\n", "                for index, form in enumerate(formset.initial_forms):\n", "                    if user_deleted_form(request, obj, formset, index):\n", "                        continue\n", "                    form._errors = {}\n", "                    form.cleaned_data = form.initial\n", "            formsets.append(formset)\n", "            inline_instances.append(inline)\n", "        return formsets, inline_instances\n"]}]}, {"file_path": "django/forms/formsets.py", "span_ids": ["BaseFormSet.management_form", "ManagementForm", "formset_factory"], "content": [{"span_id": "BaseFormSet.management_form", "start_line": 144, "end_line": 167, "content": ["    @cached_property\n", "    def management_form(self):\n", "        \"\"\"Return the ManagementForm instance for this FormSet.\"\"\"\n", "        if self.is_bound:\n", "            form = ManagementForm(\n", "                self.data,\n", "                auto_id=self.auto_id,\n", "                prefix=self.prefix,\n", "                renderer=self.renderer,\n", "            )\n", "            form.full_clean()\n", "        else:\n", "            form = ManagementForm(\n", "                auto_id=self.auto_id,\n", "                prefix=self.prefix,\n", "                initial={\n", "                    TOTAL_FORM_COUNT: self.total_form_count(),\n", "                    INITIAL_FORM_COUNT: self.initial_form_count(),\n", "                    MIN_NUM_FORM_COUNT: self.min_num,\n", "                    MAX_NUM_FORM_COUNT: self.max_num,\n", "                },\n", "                renderer=self.renderer,\n", "            )\n", "        return form\n"]}, {"span_id": "ManagementForm", "start_line": 28, "end_line": 41, "content": ["class ManagementForm(Form):\n", "    \"\"\"\n", "    Keep track of how many form instances are displayed on the page. If adding\n", "    new forms via JavaScript, you should increment the count field of this form\n", "    as well.\n", "    \"\"\"\n", "\n", "    TOTAL_FORMS = IntegerField(widget=HiddenInput)\n", "    INITIAL_FORMS = IntegerField(widget=HiddenInput)\n", "    # MIN_NUM_FORM_COUNT and MAX_NUM_FORM_COUNT are output with the rest of the\n", "    # management form, but only for the convenience of client-side code. The\n", "    # POST value of them returned from the client is not checked.\n", "    MIN_NUM_FORMS = IntegerField(required=False, widget=HiddenInput)\n", "    MAX_NUM_FORMS = IntegerField(required=False, widget=HiddenInput)\n"]}, {"span_id": "formset_factory", "start_line": 529, "end_line": 568, "content": ["def formset_factory(\n", "    form,\n", "    formset=BaseFormSet,\n", "    extra=1,\n", "    can_order=False,\n", "    can_delete=False,\n", "    max_num=None,\n", "    validate_max=False,\n", "    min_num=None,\n", "    validate_min=False,\n", "    absolute_max=None,\n", "    can_delete_extra=True,\n", "    renderer=None,\n", "):\n", "    \"\"\"Return a FormSet for the given form class.\"\"\"\n", "    if min_num is None:\n", "        min_num = DEFAULT_MIN_NUM\n", "    if max_num is None:\n", "        max_num = DEFAULT_MAX_NUM\n", "    # absolute_max is a hard limit on forms instantiated, to prevent\n", "    # memory-exhaustion attacks. Default to max_num + DEFAULT_MAX_NUM\n", "    # (which is 2 * DEFAULT_MAX_NUM if max_num is None in the first place).\n", "    if absolute_max is None:\n", "        absolute_max = max_num + DEFAULT_MAX_NUM\n", "    if max_num > absolute_max:\n", "        raise ValueError(\"'absolute_max' must be greater or equal to 'max_num'.\")\n", "    attrs = {\n", "        \"form\": form,\n", "        \"extra\": extra,\n", "        \"can_order\": can_order,\n", "        \"can_delete\": can_delete,\n", "        \"can_delete_extra\": can_delete_extra,\n", "        \"min_num\": min_num,\n", "        \"max_num\": max_num,\n", "        \"absolute_max\": absolute_max,\n", "        \"validate_min\": validate_min,\n", "        \"validate_max\": validate_max,\n", "        \"renderer\": renderer or get_default_renderer(),\n", "    }\n", "    return type(form.__name__ + \"FormSet\", (formset,), attrs)\n"]}]}, {"file_path": "django/forms/models.py", "span_ids": ["BaseInlineFormSet"], "content": [{"span_id": "BaseInlineFormSet", "start_line": 1077, "end_line": 1078, "content": ["class BaseInlineFormSet(BaseModelFormSet):\n", "    \"\"\"A formset for child objects related to a parent.\"\"\"\n"]}]}]}