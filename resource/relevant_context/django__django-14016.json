{"instance_id": "django__django-14016", "identified_spans": [{"file_path": "django/db/models/expressions.py", "span_ids": ["Combinable.__or__"], "content": [{"span_id": "Combinable.__or__", "start_line": 111, "end_line": 116, "content": ["    def __or__(self, other):\n", "        if getattr(self, 'conditional', False) and getattr(other, 'conditional', False):\n", "            return Q(self) | Q(other)\n", "        raise NotImplementedError(\n", "            \"Use .bitand() and .bitor() for bitwise logical operations.\"\n", "        )\n"]}]}, {"file_path": "django/db/models/query.py", "span_ids": ["QuerySet.__or__"], "content": [{"span_id": "QuerySet.__or__", "start_line": 334, "end_line": 346, "content": ["    def __or__(self, other):\n", "        self._merge_sanity_check(other)\n", "        if isinstance(self, EmptyQuerySet):\n", "            return other\n", "        if isinstance(other, EmptyQuerySet):\n", "            return self\n", "        query = self if self.query.can_filter() else self.model._base_manager.filter(pk__in=self.values('pk'))\n", "        combined = query._chain()\n", "        combined._merge_known_related_objects(other)\n", "        if not other.query.can_filter():\n", "            other = other.model._base_manager.filter(pk__in=other.values('pk'))\n", "        combined.query.combine(other.query, sql.OR)\n", "        return combined\n"]}]}, {"file_path": "django/db/models/query_utils.py", "span_ids": ["Q._combine", "Q.__or__", "Q"], "content": [{"span_id": "Q._combine", "start_line": 43, "end_line": 58, "content": ["    def _combine(self, other, conn):\n", "        if not isinstance(other, Q):\n", "            raise TypeError(other)\n", "\n", "        # If the other Q() is empty, ignore it and just use `self`.\n", "        if not other:\n", "            return copy.deepcopy(self)\n", "        # Or if this Q is empty, ignore it and just use `other`.\n", "        elif not self:\n", "            return copy.deepcopy(other)\n", "\n", "        obj = type(self)()\n", "        obj.connector = conn\n", "        obj.add(self, conn)\n", "        obj.add(other, conn)\n", "        return obj\n"]}, {"span_id": "Q.__or__", "start_line": 60, "end_line": 61, "content": ["    def __or__(self, other):\n", "        return self._combine(other, self.OR)\n"]}, {"span_id": "Q", "start_line": 29, "end_line": 38, "content": ["class Q(tree.Node):\n", "    \"\"\"\n", "    Encapsulate filters as objects that can then be combined logically (using\n", "    `&` and `|`).\n", "    \"\"\"\n", "    # Connection types\n", "    AND = 'AND'\n", "    OR = 'OR'\n", "    default = AND\n", "    conditional = True\n"]}]}]}