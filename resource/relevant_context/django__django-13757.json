{"instance_id": "django__django-13757", "identified_spans": [{"file_path": "django/db/models/fields/json.py", "span_ids": ["KeyTransformIsNull.as_sqlite", "KeyTransformIsNull", "JSONField", "HasKey", "KeyTransform", "KeyTransformIsNull.as_oracle"], "content": [{"span_id": "KeyTransformIsNull.as_sqlite", "start_line": 373, "end_line": 376, "content": ["    def as_sqlite(self, compiler, connection):\n", "        if not self.rhs:\n", "            return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n", "        return super().as_sql(compiler, connection)\n"]}, {"span_id": "KeyTransformIsNull", "start_line": 366, "end_line": 367, "content": ["class KeyTransformIsNull(lookups.IsNull):\n", "    # key__isnull=False is the same as has_key='key'\n"]}, {"span_id": "JSONField", "start_line": 16, "end_line": 22, "content": ["class JSONField(CheckFieldDefaultMixin, Field):\n", "    empty_strings_allowed = False\n", "    description = _('A JSON object')\n", "    default_error_messages = {\n", "        'invalid': _('Value must be valid JSON.'),\n", "    }\n", "    _default_hint = ('dict', '{}')\n"]}, {"span_id": "HasKey", "start_line": 219, "end_line": 222, "content": ["class HasKey(HasKeyLookup):\n", "    lookup_name = 'has_key'\n", "    postgres_operator = '?'\n", "    prepare_rhs = False\n"]}, {"span_id": "KeyTransform", "start_line": 271, "end_line": 273, "content": ["class KeyTransform(Transform):\n", "    postgres_operator = '->'\n", "    postgres_nested_operator = '#>'\n"]}, {"span_id": "KeyTransformIsNull.as_oracle", "start_line": 368, "end_line": 371, "content": ["    def as_oracle(self, compiler, connection):\n", "        if not self.rhs:\n", "            return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n", "        return super().as_sql(compiler, connection)\n"]}]}]}