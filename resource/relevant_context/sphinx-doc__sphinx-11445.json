{"instance_id": "sphinx-doc__sphinx-11445", "identified_spans": [{"file_path": "sphinx/config.py", "span_ids": ["Config"], "content": [{"span_id": "Config", "start_line": 71, "end_line": 153, "content": ["class Config:\n", "    r\"\"\"Configuration file abstraction.\n", "\n", "    The config object makes the values of all config values available as\n", "    attributes.\n", "\n", "    It is exposed via the :py:class:`~sphinx.application.Sphinx`\\ ``.config``\n", "    and :py:class:`sphinx.environment.BuildEnvironment`\\ ``.config`` attributes.\n", "    For example, to get the value of :confval:`language`, use either\n", "    ``app.config.language`` or ``env.config.language``.\n", "    \"\"\"\n", "\n", "    # the values are: (default, what needs to be rebuilt if changed)\n", "\n", "    # If you add a value here, don't forget to include it in the\n", "    # quickstart.py file template as well as in the docs!\n", "\n", "    config_values: dict[str, tuple] = {\n", "        # general options\n", "        'project': ('Python', 'env', []),\n", "        'author': ('unknown', 'env', []),\n", "        'project_copyright': ('', 'html', [str, tuple, list]),\n", "        'copyright': (lambda c: c.project_copyright, 'html', [str, tuple, list]),\n", "        'version': ('', 'env', []),\n", "        'release': ('', 'env', []),\n", "        'today': ('', 'env', []),\n", "        # the real default is locale-dependent\n", "        'today_fmt': (None, 'env', [str]),\n", "\n", "        'language': ('en', 'env', [str]),\n", "        'locale_dirs': (['locales'], 'env', []),\n", "        'figure_language_filename': ('{root}.{language}{ext}', 'env', [str]),\n", "        'gettext_allow_fuzzy_translations': (False, 'gettext', []),\n", "\n", "        'master_doc': ('index', 'env', []),\n", "        'root_doc': (lambda config: config.master_doc, 'env', []),\n", "        'source_suffix': ({'.rst': 'restructuredtext'}, 'env', Any),\n", "        'source_encoding': ('utf-8-sig', 'env', []),\n", "        'exclude_patterns': ([], 'env', [str]),\n", "        'include_patterns': ([\"**\"], 'env', [str]),\n", "        'default_role': (None, 'env', [str]),\n", "        'add_function_parentheses': (True, 'env', []),\n", "        'add_module_names': (True, 'env', []),\n", "        'toc_object_entries': (True, 'env', [bool]),\n", "        'toc_object_entries_show_parents': ('domain', 'env',\n", "                                            ENUM('domain', 'all', 'hide')),\n", "        'trim_footnote_reference_space': (False, 'env', []),\n", "        'show_authors': (False, 'env', []),\n", "        'pygments_style': (None, 'html', [str]),\n", "        'highlight_language': ('default', 'env', []),\n", "        'highlight_options': ({}, 'env', []),\n", "        'templates_path': ([], 'html', []),\n", "        'template_bridge': (None, 'html', [str]),\n", "        'keep_warnings': (False, 'env', []),\n", "        'suppress_warnings': ([], 'env', []),\n", "        'modindex_common_prefix': ([], 'html', []),\n", "        'rst_epilog': (None, 'env', [str]),\n", "        'rst_prolog': (None, 'env', [str]),\n", "        'trim_doctest_flags': (True, 'env', []),\n", "        'primary_domain': ('py', 'env', [NoneType]),\n", "        'needs_sphinx': (None, None, [str]),\n", "        'needs_extensions': ({}, None, []),\n", "        'manpages_url': (None, 'env', []),\n", "        'nitpicky': (False, None, []),\n", "        'nitpick_ignore': ([], None, [set, list, tuple]),\n", "        'nitpick_ignore_regex': ([], None, [set, list, tuple]),\n", "        'numfig': (False, 'env', []),\n", "        'numfig_secnum_depth': (1, 'env', []),\n", "        'numfig_format': ({}, 'env', []),  # will be initialized in init_numfig_format()\n", "        'maximum_signature_line_length': (None, 'env', {int, None}),\n", "        'math_number_all': (False, 'env', []),\n", "        'math_eqref_format': (None, 'env', [str]),\n", "        'math_numfig': (True, 'env', []),\n", "        'tls_verify': (True, 'env', []),\n", "        'tls_cacerts': (None, 'env', []),\n", "        'user_agent': (None, 'env', [str]),\n", "        'smartquotes': (True, 'env', []),\n", "        'smartquotes_action': ('qDe', 'env', []),\n", "        'smartquotes_excludes': ({'languages': ['ja'],\n", "                                  'builders': ['man', 'text']},\n", "                                 'env', []),\n", "        'option_emphasise_placeholders': (False, 'env', []),\n", "    }\n"]}]}, {"file_path": "sphinx/domains/python.py", "span_ids": ["PyModule", "PyModule.run"], "content": [{"span_id": "PyModule", "start_line": 1027, "end_line": 1042, "content": ["class PyModule(SphinxDirective):\n", "    \"\"\"\n", "    Directive to mark description of a new module.\n", "    \"\"\"\n", "\n", "    has_content = True\n", "    required_arguments = 1\n", "    optional_arguments = 0\n", "    final_argument_whitespace = False\n", "    option_spec: OptionSpec = {\n", "        'platform': lambda x: x,\n", "        'synopsis': lambda x: x,\n", "        'noindex': directives.flag,\n", "        'nocontentsentry': directives.flag,\n", "        'deprecated': directives.flag,\n", "    }\n"]}, {"span_id": "PyModule.run", "start_line": 1044, "end_line": 1078, "content": ["    def run(self) -> list[Node]:\n", "        domain = cast(PythonDomain, self.env.get_domain('py'))\n", "\n", "        modname = self.arguments[0].strip()\n", "        noindex = 'noindex' in self.options\n", "        self.env.ref_context['py:module'] = modname\n", "\n", "        content_node: Element = nodes.section()\n", "        # necessary so that the child nodes get the right source/line set\n", "        content_node.document = self.state.document\n", "        nested_parse_with_titles(self.state, self.content, content_node, self.content_offset)\n", "\n", "        ret: list[Node] = []\n", "        if not noindex:\n", "            # note module to the domain\n", "            node_id = make_id(self.env, self.state.document, 'module', modname)\n", "            target = nodes.target('', '', ids=[node_id], ismod=True)\n", "            self.set_source_info(target)\n", "            self.state.document.note_explicit_target(target)\n", "\n", "            domain.note_module(modname,\n", "                               node_id,\n", "                               self.options.get('synopsis', ''),\n", "                               self.options.get('platform', ''),\n", "                               'deprecated' in self.options)\n", "            domain.note_object(modname, 'module', node_id, location=target)\n", "\n", "            # the platform and synopsis aren't printed; in fact, they are only\n", "            # used in the modindex currently\n", "            ret.append(target)\n", "            indextext = f'module; {modname}'\n", "            inode = addnodes.index(entries=[('pair', indextext, node_id, '', None)])\n", "            ret.append(inode)\n", "        ret.extend(content_node.children)\n", "        return ret\n"]}]}, {"file_path": "sphinx/parsers.py", "span_ids": ["RSTParser.decorate"], "content": [{"span_id": "RSTParser.decorate", "start_line": 83, "end_line": 86, "content": ["    def decorate(self, content: StringList) -> None:\n", "        \"\"\"Preprocess reST content before parsing.\"\"\"\n", "        prepend_prolog(content, self.config.rst_prolog)\n", "        append_epilog(content, self.config.rst_epilog)\n"]}]}, {"file_path": "sphinx/util/rst.py", "span_ids": ["prepend_prolog"], "content": [{"span_id": "prepend_prolog", "start_line": 78, "end_line": 97, "content": ["def prepend_prolog(content: StringList, prolog: str) -> None:\n", "    \"\"\"Prepend a string to content body as prolog.\"\"\"\n", "    if prolog:\n", "        pos = 0\n", "        for line in content:\n", "            if docinfo_re.match(line):\n", "                pos += 1\n", "            else:\n", "                break\n", "\n", "        if pos > 0:\n", "            # insert a blank line after docinfo\n", "            content.insert(pos, '', '<generated>', 0)\n", "            pos += 1\n", "\n", "        # insert prolog (after docinfo if exists)\n", "        for lineno, line in enumerate(prolog.splitlines()):\n", "            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n", "\n", "        content.insert(pos + lineno + 1, '', '<generated>', 0)\n"]}]}]}