{"instance_id": "sympy__sympy-13480", "identified_spans": [{"file_path": "sympy/functions/elementary/hyperbolic.py", "span_ids": ["coth.eval"], "content": [{"span_id": "coth.eval", "start_line": 556, "end_line": 607, "content": ["    @classmethod\n", "    def eval(cls, arg):\n", "        from sympy import cot\n", "        arg = sympify(arg)\n", "\n", "        if arg.is_Number:\n", "            if arg is S.NaN:\n", "                return S.NaN\n", "            elif arg is S.Infinity:\n", "                return S.One\n", "            elif arg is S.NegativeInfinity:\n", "                return S.NegativeOne\n", "            elif arg is S.Zero:\n", "                return S.ComplexInfinity\n", "            elif arg.is_negative:\n", "                return -cls(-arg)\n", "        else:\n", "            if arg is S.ComplexInfinity:\n", "                return S.NaN\n", "\n", "            i_coeff = arg.as_coefficient(S.ImaginaryUnit)\n", "\n", "            if i_coeff is not None:\n", "                if _coeff_isneg(i_coeff):\n", "                    return S.ImaginaryUnit * cot(-i_coeff)\n", "                return -S.ImaginaryUnit * cot(i_coeff)\n", "            else:\n", "                if _coeff_isneg(arg):\n", "                    return -cls(-arg)\n", "\n", "            if arg.is_Add:\n", "                x, m = _peeloff_ipi(arg)\n", "                if m:\n", "                    cothm = coth(m)\n", "                    if cotm is S.ComplexInfinity:\n", "                        return coth(x)\n", "                    else: # cothm == 0\n", "                        return tanh(x)\n", "\n", "            if arg.func == asinh:\n", "                x = arg.args[0]\n", "                return sqrt(1 + x**2)/x\n", "\n", "            if arg.func == acosh:\n", "                x = arg.args[0]\n", "                return x/(sqrt(x - 1) * sqrt(x + 1))\n", "\n", "            if arg.func == atanh:\n", "                return 1/arg.args[0]\n", "\n", "            if arg.func == acoth:\n", "                return arg.args[0]\n"]}]}]}