{"instance_id": "scikit-learn__scikit-learn-13779", "identified_spans": [{"file_path": "sklearn/ensemble/voting.py", "span_ids": ["_BaseVoting.fit", "_parallel_fit_estimator"], "content": [{"span_id": "_BaseVoting.fit", "start_line": 63, "end_line": 101, "content": ["    @abstractmethod\n", "    def fit(self, X, y, sample_weight=None):\n", "        \"\"\"\n", "        common fit operations.\n", "        \"\"\"\n", "        if self.estimators is None or len(self.estimators) == 0:\n", "            raise AttributeError('Invalid `estimators` attribute, `estimators`'\n", "                                 ' should be a list of (string, estimator)'\n", "                                 ' tuples')\n", "\n", "        if (self.weights is not None and\n", "                len(self.weights) != len(self.estimators)):\n", "            raise ValueError('Number of `estimators` and weights must be equal'\n", "                             '; got %d weights, %d estimators'\n", "                             % (len(self.weights), len(self.estimators)))\n", "\n", "        if sample_weight is not None:\n", "            for name, step in self.estimators:\n", "                if not has_fit_parameter(step, 'sample_weight'):\n", "                    raise ValueError('Underlying estimator \\'%s\\' does not'\n", "                                     ' support sample weights.' % name)\n", "\n", "        names, clfs = zip(*self.estimators)\n", "        self._validate_names(names)\n", "\n", "        n_isnone = np.sum([clf is None for _, clf in self.estimators])\n", "        if n_isnone == len(self.estimators):\n", "            raise ValueError('All estimators are None. At least one is '\n", "                             'required!')\n", "\n", "        self.estimators_ = Parallel(n_jobs=self.n_jobs)(\n", "                delayed(_parallel_fit_estimator)(clone(clf), X, y,\n", "                                                 sample_weight=sample_weight)\n", "                for clf in clfs if clf is not None)\n", "\n", "        self.named_estimators_ = Bunch()\n", "        for k, e in zip(self.estimators, self.estimators_):\n", "            self.named_estimators_[k[0]] = e\n", "        return self\n"]}, {"span_id": "_parallel_fit_estimator", "start_line": 30, "end_line": 36, "content": ["def _parallel_fit_estimator(estimator, X, y, sample_weight=None):\n", "    \"\"\"Private function used to fit an estimator within a job.\"\"\"\n", "    if sample_weight is not None:\n", "        estimator.fit(X, y, sample_weight=sample_weight)\n", "    else:\n", "        estimator.fit(X, y)\n", "    return estimator\n"]}]}]}