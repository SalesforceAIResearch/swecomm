{"instance_id": "django__django-13590", "identified_spans": [{"file_path": "django/db/models/lookups.py", "span_ids": ["Range"], "content": [{"span_id": "Range", "start_line": 483, "end_line": 485, "content": ["@Field.register_lookup\n", "class Range(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n", "    lookup_name = 'range'\n"]}]}, {"file_path": "django/db/models/sql/query.py", "span_ids": ["Query.resolve_lookup_value"], "content": [{"span_id": "Query.resolve_lookup_value", "start_line": 1072, "end_line": 1084, "content": ["    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n", "        if hasattr(value, 'resolve_expression'):\n", "            value = value.resolve_expression(\n", "                self, reuse=can_reuse, allow_joins=allow_joins,\n", "            )\n", "        elif isinstance(value, (list, tuple)):\n", "            # The items of the iterable may be expressions and therefore need\n", "            # to be resolved independently.\n", "            return type(value)(\n", "                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n", "                for sub_value in value\n", "            )\n", "        return value\n"]}]}]}