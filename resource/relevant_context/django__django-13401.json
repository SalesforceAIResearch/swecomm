{"instance_id": "django__django-13401", "identified_spans": [{"file_path": "django/db/models/fields/__init__.py", "span_ids": ["Field.__hash__", "Field.__eq__", "Field", "Field.__lt__"], "content": [{"span_id": "Field.__hash__", "start_line": 528, "end_line": 529, "content": ["    def __hash__(self):\n", "        return hash(self.creation_counter)\n"]}, {"span_id": "Field.__eq__", "start_line": 516, "end_line": 520, "content": ["    def __eq__(self, other):\n", "        # Needed for @total_ordering\n", "        if isinstance(other, Field):\n", "            return self.creation_counter == other.creation_counter\n", "        return NotImplemented\n"]}, {"span_id": "Field", "start_line": 84, "end_line": 122, "content": ["@total_ordering\n", "class Field(RegisterLookupMixin):\n", "    \"\"\"Base class for all field types\"\"\"\n", "\n", "    # Designates whether empty strings fundamentally are allowed at the\n", "    # database level.\n", "    empty_strings_allowed = True\n", "    empty_values = list(validators.EMPTY_VALUES)\n", "\n", "    # These track each time a Field instance is created. Used to retain order.\n", "    # The auto_creation_counter is used for fields that Django implicitly\n", "    # creates, creation_counter is used for all user-specified fields.\n", "    creation_counter = 0\n", "    auto_creation_counter = -1\n", "    default_validators = []  # Default set of validators\n", "    default_error_messages = {\n", "        'invalid_choice': _('Value %(value)r is not a valid choice.'),\n", "        'null': _('This field cannot be null.'),\n", "        'blank': _('This field cannot be blank.'),\n", "        'unique': _('%(model_name)s with this %(field_label)s '\n", "                    'already exists.'),\n", "        # Translators: The 'lookup_type' is one of 'date', 'year' or 'month'.\n", "        # Eg: \"Title must be unique for pub_date year\"\n", "        'unique_for_date': _(\"%(field_label)s must be unique for \"\n", "                             \"%(date_field_label)s %(lookup_type)s.\"),\n", "    }\n", "    system_check_deprecated_details = None\n", "    system_check_removed_details = None\n", "\n", "    # Field flags\n", "    hidden = False\n", "\n", "    many_to_many = None\n", "    many_to_one = None\n", "    one_to_many = None\n", "    one_to_one = None\n", "    related_model = None\n", "\n", "    descriptor_class = DeferredAttribute\n"]}, {"span_id": "Field.__lt__", "start_line": 522, "end_line": 526, "content": ["    def __lt__(self, other):\n", "        # This is needed because bisect does not take a comparison function.\n", "        if isinstance(other, Field):\n", "            return self.creation_counter < other.creation_counter\n", "        return NotImplemented\n"]}]}]}