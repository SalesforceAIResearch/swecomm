{"instance_id": "sympy__sympy-15308", "identified_spans": [{"file_path": "sympy/matrices/expressions/trace.py", "span_ids": ["Trace"], "content": [{"span_id": "Trace", "start_line": 8, "end_line": 21, "content": ["class Trace(Expr):\n", "    \"\"\"Matrix Trace\n", "\n", "    Represents the trace of a matrix expression.\n", "\n", "    >>> from sympy import MatrixSymbol, Trace, eye\n", "    >>> A = MatrixSymbol('A', 3, 3)\n", "    >>> Trace(A)\n", "    Trace(A)\n", "\n", "    See Also:\n", "        trace\n", "    \"\"\"\n", "    is_Trace = True\n"]}]}, {"file_path": "sympy/printing/latex.py", "span_ids": ["LatexPrinter", "LatexPrinter._print_MatrixBase"], "content": [{"span_id": "LatexPrinter", "start_line": 121, "end_line": 138, "content": ["class LatexPrinter(Printer):\n", "    printmethod = \"_latex\"\n", "\n", "    _default_settings = {\n", "        \"order\": None,\n", "        \"mode\": \"plain\",\n", "        \"itex\": False,\n", "        \"fold_frac_powers\": False,\n", "        \"fold_func_brackets\": False,\n", "        \"fold_short_frac\": None,\n", "        \"long_frac_ratio\": None,\n", "        \"mul_symbol\": None,\n", "        \"inv_trig_style\": \"abbreviated\",\n", "        \"mat_str\": None,\n", "        \"mat_delim\": \"[\",\n", "        \"symbol_names\": {},\n", "        \"ln_notation\": False,\n", "    }\n"]}, {"span_id": "LatexPrinter._print_MatrixBase", "start_line": 1406, "end_line": 1431, "content": ["    def _print_MatrixBase(self, expr):\n", "        lines = []\n", "\n", "        for line in range(expr.rows):  # horrible, should be 'rows'\n", "            lines.append(\" & \".join([ self._print(i) for i in expr[line, :] ]))\n", "\n", "        mat_str = self._settings['mat_str']\n", "        if mat_str is None:\n", "            if self._settings['mode'] == 'inline':\n", "                mat_str = 'smallmatrix'\n", "            else:\n", "                if (expr.cols <= 10) is True:\n", "                    mat_str = 'matrix'\n", "                else:\n", "                    mat_str = 'array'\n", "\n", "        out_str = r'\\begin{%MATSTR%}%s\\end{%MATSTR%}'\n", "        out_str = out_str.replace('%MATSTR%', mat_str)\n", "        if mat_str == 'array':\n", "            out_str = out_str.replace('%s', '{' + 'c'*expr.cols + '}%s')\n", "        if self._settings['mat_delim']:\n", "            left_delim = self._settings['mat_delim']\n", "            right_delim = self._delim_dict[left_delim]\n", "            out_str = r'\\left' + left_delim + out_str + \\\n", "                      r'\\right' + right_delim\n", "        return out_str % r\"\\\\\".join(lines)\n"]}]}]}