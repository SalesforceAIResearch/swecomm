{"instance_id": "astropy__astropy-14365", "identified_spans": [{"file_path": "astropy/io/ascii/qdp.py", "span_ids": ["_line_type"], "content": [{"span_id": "_line_type", "start_line": 20, "end_line": 85, "content": ["def _line_type(line, delimiter=None):\n", "    \"\"\"Interpret a QDP file line.\n", "\n", "    Parameters\n", "    ----------\n", "    line : str\n", "        a single line of the file\n", "\n", "    Returns\n", "    -------\n", "    type : str\n", "        Line type: \"comment\", \"command\", or \"data\"\n", "\n", "    Examples\n", "    --------\n", "    >>> _line_type(\"READ SERR 3\")\n", "    'command'\n", "    >>> _line_type(\" \\\\n    !some gibberish\")\n", "    'comment'\n", "    >>> _line_type(\"   \")\n", "    'comment'\n", "    >>> _line_type(\" 21345.45\")\n", "    'data,1'\n", "    >>> _line_type(\" 21345.45 1.53e-3 1e-3 .04 NO nan\")\n", "    'data,6'\n", "    >>> _line_type(\" 21345.45,1.53e-3,1e-3,.04,NO,nan\", delimiter=',')\n", "    'data,6'\n", "    >>> _line_type(\" 21345.45 ! a comment to disturb\")\n", "    'data,1'\n", "    >>> _line_type(\"NO NO NO NO NO\")\n", "    'new'\n", "    >>> _line_type(\"NO,NO,NO,NO,NO\", delimiter=',')\n", "    'new'\n", "    >>> _line_type(\"N O N NOON OON O\")\n", "    Traceback (most recent call last):\n", "        ...\n", "    ValueError: Unrecognized QDP line...\n", "    >>> _line_type(\" some non-comment gibberish\")\n", "    Traceback (most recent call last):\n", "        ...\n", "    ValueError: Unrecognized QDP line...\n", "    \"\"\"\n", "    _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n", "    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n", "\n", "    sep = delimiter\n", "    if delimiter is None:\n", "        sep = r\"\\s+\"\n", "    _new_re = rf\"NO({sep}NO)+\"\n", "    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n", "    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n", "    _line_type_re = re.compile(_type_re)\n", "    line = line.strip()\n", "    if not line:\n", "        return \"comment\"\n", "    match = _line_type_re.match(line)\n", "\n", "    if match is None:\n", "        raise ValueError(f\"Unrecognized QDP line: {line}\")\n", "    for type_, val in match.groupdict().items():\n", "        if val is None:\n", "            continue\n", "        if type_ == \"data\":\n", "            return f\"data,{len(val.split(sep=delimiter))}\"\n", "        else:\n", "            return type_\n"]}]}]}