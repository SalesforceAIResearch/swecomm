{"instance_id": "sympy__sympy-24909", "identified_spans": [{"file_path": "sympy/physics/units/prefixes.py", "span_ids": ["Prefix", "impl", "Prefix.__mul__"], "content": [{"span_id": "Prefix", "start_line": 11, "end_line": 31, "content": ["class Prefix(Expr):\n", "    \"\"\"\n", "    This class represent prefixes, with their name, symbol and factor.\n", "\n", "    Prefixes are used to create derived units from a given unit. They should\n", "    always be encapsulated into units.\n", "\n", "    The factor is constructed from a base (default is 10) to some power, and\n", "    it gives the total multiple or fraction. For example the kilometer km\n", "    is constructed from the meter (factor 1) and the kilo (10 to the power 3,\n", "    i.e. 1000). The base can be changed to allow e.g. binary prefixes.\n", "\n", "    A prefix multiplied by something will always return the product of this\n", "    other object times the factor, except if the other object:\n", "\n", "    - is a prefix and they can be combined into a new prefix;\n", "    - defines multiplication with prefixes (which is the case for the Unit\n", "      class).\n", "    \"\"\"\n", "    _op_priority = 13.0\n", "    is_commutative = True\n"]}, {"span_id": "impl", "start_line": 156, "end_line": 206, "content": ["yotta = Prefix('yotta', 'Y', 24)\n", "zetta = Prefix('zetta', 'Z', 21)\n", "exa = Prefix('exa', 'E', 18)\n", "peta = Prefix('peta', 'P', 15)\n", "tera = Prefix('tera', 'T', 12)\n", "giga = Prefix('giga', 'G', 9)\n", "mega = Prefix('mega', 'M', 6)\n", "kilo = Prefix('kilo', 'k', 3)\n", "hecto = Prefix('hecto', 'h', 2)\n", "deca = Prefix('deca', 'da', 1)\n", "deci = Prefix('deci', 'd', -1)\n", "centi = Prefix('centi', 'c', -2)\n", "milli = Prefix('milli', 'm', -3)\n", "micro = Prefix('micro', 'mu', -6, latex_repr=r\"\\mu\")\n", "nano = Prefix('nano', 'n', -9)\n", "pico = Prefix('pico', 'p', -12)\n", "femto = Prefix('femto', 'f', -15)\n", "atto = Prefix('atto', 'a', -18)\n", "zepto = Prefix('zepto', 'z', -21)\n", "yocto = Prefix('yocto', 'y', -24)\n", "\n", "\n", "# https://physics.nist.gov/cuu/Units/prefixes.html\n", "PREFIXES = {\n", "    'Y': yotta,\n", "    'Z': zetta,\n", "    'E': exa,\n", "    'P': peta,\n", "    'T': tera,\n", "    'G': giga,\n", "    'M': mega,\n", "    'k': kilo,\n", "    'h': hecto,\n", "    'da': deca,\n", "    'd': deci,\n", "    'c': centi,\n", "    'm': milli,\n", "    'mu': micro,\n", "    'n': nano,\n", "    'p': pico,\n", "    'f': femto,\n", "    'a': atto,\n", "    'z': zepto,\n", "    'y': yocto,\n", "}\n", "\n", "\n", "kibi = Prefix('kibi', 'Y', 10, 2)\n", "mebi = Prefix('mebi', 'Y', 20, 2)\n", "gibi = Prefix('gibi', 'Y', 30, 2)\n", "tebi = Prefix('tebi', 'Y', 40, 2)\n"]}, {"span_id": "Prefix.__mul__", "start_line": 81, "end_line": 97, "content": ["    def __mul__(self, other):\n", "        from sympy.physics.units import Quantity\n", "        if not isinstance(other, (Quantity, Prefix)):\n", "            return super().__mul__(other)\n", "\n", "        fact = self.scale_factor * other.scale_factor\n", "\n", "        if fact == 1:\n", "            return 1\n", "        elif isinstance(other, Prefix):\n", "            # simplify prefix\n", "            for p in PREFIXES:\n", "                if PREFIXES[p].scale_factor == fact:\n", "                    return PREFIXES[p]\n", "            return fact\n", "\n", "        return self.scale_factor * other\n"]}]}, {"file_path": "sympy/physics/units/quantities.py", "span_ids": ["Quantity"], "content": [{"span_id": "Quantity", "start_line": 12, "end_line": 22, "content": ["class Quantity(AtomicExpr):\n", "    \"\"\"\n", "    Physical quantity: can be a unit of measure, a constant or a generic quantity.\n", "    \"\"\"\n", "\n", "    is_commutative = True\n", "    is_real = True\n", "    is_number = False\n", "    is_nonzero = True\n", "    is_physical_constant = False\n", "    _diff_wrt = True\n"]}]}]}