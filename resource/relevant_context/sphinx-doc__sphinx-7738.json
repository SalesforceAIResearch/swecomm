{"instance_id": "sphinx-doc__sphinx-7738", "identified_spans": [{"file_path": "sphinx/ext/napoleon/docstring.py", "span_ids": ["GoogleDocstring._parse_attributes_section", "GoogleDocstring._escape_args_and_kwargs", "GoogleDocstring"], "content": [{"span_id": "GoogleDocstring._parse_attributes_section", "start_line": 578, "end_line": 600, "content": ["    def _parse_attributes_section(self, section: str) -> List[str]:\n", "        lines = []\n", "        for _name, _type, _desc in self._consume_fields():\n", "            if self._config.napoleon_use_ivar:\n", "                _name = self._qualify_name(_name, self._obj)\n", "                field = ':ivar %s: ' % _name\n", "                lines.extend(self._format_block(field, _desc))\n", "                if _type:\n", "                    lines.append(':vartype %s: %s' % (_name, _type))\n", "            else:\n", "                lines.append('.. attribute:: ' + _name)\n", "                if self._opt and 'noindex' in self._opt:\n", "                    lines.append('   :noindex:')\n", "                if _type:\n", "                    lines.extend(self._indent([':type: %s' % _type], 3))\n", "                lines.append('')\n", "\n", "                fields = self._format_field('', '', _desc)\n", "                lines.extend(self._indent(fields, 3))\n", "                lines.append('')\n", "        if self._config.napoleon_use_ivar:\n", "            lines.append('')\n", "        return lines\n"]}, {"span_id": "GoogleDocstring._escape_args_and_kwargs", "start_line": 320, "end_line": 329, "content": ["    def _escape_args_and_kwargs(self, name: str) -> str:\n", "        if name.endswith('_'):\n", "            name = name[:-1] + r'\\_'\n", "\n", "        if name[:2] == '**':\n", "            return r'\\*\\*' + name[2:]\n", "        elif name[:1] == '*':\n", "            return r'\\*' + name[1:]\n", "        else:\n", "            return name\n"]}, {"span_id": "GoogleDocstring", "start_line": 43, "end_line": 107, "content": ["class GoogleDocstring:\n", "    \"\"\"Convert Google style docstrings to reStructuredText.\n", "\n", "    Parameters\n", "    ----------\n", "    docstring : :obj:`str` or :obj:`list` of :obj:`str`\n", "        The docstring to parse, given either as a string or split into\n", "        individual lines.\n", "    config: :obj:`sphinx.ext.napoleon.Config` or :obj:`sphinx.config.Config`\n", "        The configuration settings to use. If not given, defaults to the\n", "        config object on `app`; or if `app` is not given defaults to the\n", "        a new :class:`sphinx.ext.napoleon.Config` object.\n", "\n", "\n", "    Other Parameters\n", "    ----------------\n", "    app : :class:`sphinx.application.Sphinx`, optional\n", "        Application object representing the Sphinx process.\n", "    what : :obj:`str`, optional\n", "        A string specifying the type of the object to which the docstring\n", "        belongs. Valid values: \"module\", \"class\", \"exception\", \"function\",\n", "        \"method\", \"attribute\".\n", "    name : :obj:`str`, optional\n", "        The fully qualified name of the object.\n", "    obj : module, class, exception, function, method, or attribute\n", "        The object to which the docstring belongs.\n", "    options : :class:`sphinx.ext.autodoc.Options`, optional\n", "        The options given to the directive: an object with attributes\n", "        inherited_members, undoc_members, show_inheritance and noindex that\n", "        are True if the flag option of same name was given to the auto\n", "        directive.\n", "\n", "\n", "    Example\n", "    -------\n", "    >>> from sphinx.ext.napoleon import Config\n", "    >>> config = Config(napoleon_use_param=True, napoleon_use_rtype=True)\n", "    >>> docstring = '''One line summary.\n", "    ...\n", "    ... Extended description.\n", "    ...\n", "    ... Args:\n", "    ...   arg1(int): Description of `arg1`\n", "    ...   arg2(str): Description of `arg2`\n", "    ... Returns:\n", "    ...   str: Description of return value.\n", "    ... '''\n", "    >>> print(GoogleDocstring(docstring, config))\n", "    One line summary.\n", "    <BLANKLINE>\n", "    Extended description.\n", "    <BLANKLINE>\n", "    :param arg1: Description of `arg1`\n", "    :type arg1: int\n", "    :param arg2: Description of `arg2`\n", "    :type arg2: str\n", "    <BLANKLINE>\n", "    :returns: Description of return value.\n", "    :rtype: str\n", "    <BLANKLINE>\n", "\n", "    \"\"\"\n", "\n", "    _name_rgx = re.compile(r\"^\\s*((?::(?P<role>\\S+):)?`(?P<name>~?[a-zA-Z0-9_.-]+)`|\"\n", "                           r\" (?P<name2>~?[a-zA-Z0-9_.-]+))\\s*\", re.X)\n"]}]}, {"file_path": "sphinx/writers/html.py", "span_ids": ["HTMLTranslator.visit_desc_name", "HTMLTranslator", "HTMLTranslator.depart_desc_name"], "content": [{"span_id": "HTMLTranslator.visit_desc_name", "start_line": 165, "end_line": 166, "content": ["    def visit_desc_name(self, node: Element) -> None:\n", "        self.body.append(self.starttag(node, 'code', '', CLASS='descname'))\n"]}, {"span_id": "HTMLTranslator", "start_line": 82, "end_line": 87, "content": ["class HTMLTranslator(SphinxTranslator, BaseTranslator):\n", "    \"\"\"\n", "    Our custom HTML translator.\n", "    \"\"\"\n", "\n", "    builder = None  # type: StandaloneHTMLBuilder\n"]}, {"span_id": "HTMLTranslator.depart_desc_name", "start_line": 168, "end_line": 169, "content": ["    def depart_desc_name(self, node: Element) -> None:\n", "        self.body.append('</code>')\n"]}]}, {"file_path": "sphinx/writers/html5.py", "span_ids": ["HTML5Translator.visit_desc_name", "HTML5Translator.depart_desc_name", "HTML5Translator"], "content": [{"span_id": "HTML5Translator.visit_desc_name", "start_line": 137, "end_line": 138, "content": ["    def visit_desc_name(self, node: Element) -> None:\n", "        self.body.append(self.starttag(node, 'code', '', CLASS='sig-name descname'))\n"]}, {"span_id": "HTML5Translator.depart_desc_name", "start_line": 140, "end_line": 141, "content": ["    def depart_desc_name(self, node: Element) -> None:\n", "        self.body.append('</code>')\n"]}, {"span_id": "HTML5Translator", "start_line": 54, "end_line": 59, "content": ["class HTML5Translator(SphinxTranslator, BaseTranslator):\n", "    \"\"\"\n", "    Our custom HTML translator.\n", "    \"\"\"\n", "\n", "    builder = None  # type: StandaloneHTMLBuilder\n"]}]}]}