{"instance_id": "sympy__sympy-14317", "identified_spans": [{"file_path": "sympy/polys/polytools.py", "span_ids": ["Poly.as_expr", "Poly.terms"], "content": [{"span_id": "Poly.as_expr", "start_line": 980, "end_line": 1015, "content": ["    def as_expr(f, *gens):\n", "        \"\"\"\n", "        Convert a Poly instance to an Expr instance.\n", "\n", "        Examples\n", "        ========\n", "\n", "        >>> from sympy import Poly\n", "        >>> from sympy.abc import x, y\n", "\n", "        >>> f = Poly(x**2 + 2*x*y**2 - y, x, y)\n", "\n", "        >>> f.as_expr()\n", "        x**2 + 2*x*y**2 - y\n", "        >>> f.as_expr({x: 5})\n", "        10*y**2 - y + 25\n", "        >>> f.as_expr(5, 6)\n", "        379\n", "\n", "        \"\"\"\n", "        if not gens:\n", "            gens = f.gens\n", "        elif len(gens) == 1 and isinstance(gens[0], dict):\n", "            mapping = gens[0]\n", "            gens = list(f.gens)\n", "\n", "            for gen, value in mapping.items():\n", "                try:\n", "                    index = gens.index(gen)\n", "                except ValueError:\n", "                    raise GeneratorsError(\n", "                        \"%s doesn't have %s as generator\" % (f, gen))\n", "                else:\n", "                    gens[index] = value\n", "\n", "        return basic_from_dict(f.rep.to_sympy_dict(), *gens)\n"]}, {"span_id": "Poly.terms", "start_line": 829, "end_line": 847, "content": ["    def terms(f, order=None):\n", "        \"\"\"\n", "        Returns all non-zero terms from ``f`` in lex order.\n", "\n", "        Examples\n", "        ========\n", "\n", "        >>> from sympy import Poly\n", "        >>> from sympy.abc import x, y\n", "\n", "        >>> Poly(x**2 + 2*x*y**2 + x*y + 3*y, x, y).terms()\n", "        [((2, 0), 1), ((1, 2), 2), ((1, 1), 1), ((0, 1), 3)]\n", "\n", "        See Also\n", "        ========\n", "        all_terms\n", "\n", "        \"\"\"\n", "        return [(m, f.rep.dom.to_sympy(c)) for m, c in f.rep.terms(order=order)]\n"]}]}, {"file_path": "sympy/printing/latex.py", "span_ids": ["LatexPrinter._print_Poly"], "content": [{"span_id": "LatexPrinter._print_Poly", "start_line": 1855, "end_line": 1867, "content": ["    def _print_Poly(self, poly):\n", "        cls = poly.__class__.__name__\n", "        expr = self._print(poly.as_expr())\n", "        gens = list(map(self._print, poly.gens))\n", "        domain = \"domain=%s\" % self._print(poly.get_domain())\n", "\n", "        args = \", \".join([expr] + gens + [domain])\n", "        if cls in accepted_latex_functions:\n", "            tex = r\"\\%s {\\left (%s \\right )}\" % (cls, args)\n", "        else:\n", "            tex = r\"\\operatorname{%s}{\\left( %s \\right)}\" % (cls, args)\n", "\n", "        return tex\n"]}]}, {"file_path": "sympy/printing/str.py", "span_ids": ["StrPrinter._print_Poly"], "content": [{"span_id": "StrPrinter._print_Poly", "start_line": 435, "end_line": 499, "content": ["    def _print_Poly(self, expr):\n", "        ATOM_PREC = PRECEDENCE[\"Atom\"] - 1\n", "        terms, gens = [], [ self.parenthesize(s, ATOM_PREC) for s in expr.gens ]\n", "\n", "        for monom, coeff in expr.terms():\n", "            s_monom = []\n", "\n", "            for i, exp in enumerate(monom):\n", "                if exp > 0:\n", "                    if exp == 1:\n", "                        s_monom.append(gens[i])\n", "                    else:\n", "                        s_monom.append(gens[i] + \"**%d\" % exp)\n", "\n", "            s_monom = \"*\".join(s_monom)\n", "\n", "            if coeff.is_Add:\n", "                if s_monom:\n", "                    s_coeff = \"(\" + self._print(coeff) + \")\"\n", "                else:\n", "                    s_coeff = self._print(coeff)\n", "            else:\n", "                if s_monom:\n", "                    if coeff is S.One:\n", "                        terms.extend(['+', s_monom])\n", "                        continue\n", "\n", "                    if coeff is S.NegativeOne:\n", "                        terms.extend(['-', s_monom])\n", "                        continue\n", "\n", "                s_coeff = self._print(coeff)\n", "\n", "            if not s_monom:\n", "                s_term = s_coeff\n", "            else:\n", "                s_term = s_coeff + \"*\" + s_monom\n", "\n", "            if s_term.startswith('-'):\n", "                terms.extend(['-', s_term[1:]])\n", "            else:\n", "                terms.extend(['+', s_term])\n", "\n", "        if terms[0] in ['-', '+']:\n", "            modifier = terms.pop(0)\n", "\n", "            if modifier == '-':\n", "                terms[0] = '-' + terms[0]\n", "\n", "        format = expr.__class__.__name__ + \"(%s, %s\"\n", "\n", "        from sympy.polys.polyerrors import PolynomialError\n", "\n", "        try:\n", "            format += \", modulus=%s\" % expr.get_modulus()\n", "        except PolynomialError:\n", "            format += \", domain='%s'\" % expr.get_domain()\n", "\n", "        format += \")\"\n", "\n", "        for index, item in enumerate(gens):\n", "            if len(item) > 2 and (item[:1] == \"(\" and item[len(item) - 1:] == \")\"):\n", "                gens[index] = item[1:len(item) - 1]\n", "\n", "        return format % (' '.join(terms), ', '.join(gens))\n"]}]}]}