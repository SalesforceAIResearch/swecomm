{"instance_id": "django__django-13768", "identified_spans": [{"file_path": "django/dispatch/dispatcher.py", "span_ids": ["Signal.send_robust"], "content": [{"span_id": "Signal.send_robust", "start_line": 182, "end_line": 214, "content": ["    def send_robust(self, sender, **named):\n", "        \"\"\"\n", "        Send signal from sender to all connected receivers catching errors.\n", "\n", "        Arguments:\n", "\n", "            sender\n", "                The sender of the signal. Can be any Python object (normally one\n", "                registered with a connect if you actually want something to\n", "                occur).\n", "\n", "            named\n", "                Named arguments which will be passed to receivers.\n", "\n", "        Return a list of tuple pairs [(receiver, response), ... ].\n", "\n", "        If any receiver raises an error (specifically any subclass of\n", "        Exception), return the error instance as the result for that receiver.\n", "        \"\"\"\n", "        if not self.receivers or self.sender_receivers_cache.get(sender) is NO_RECEIVERS:\n", "            return []\n", "\n", "        # Call each receiver with whatever arguments it can accept.\n", "        # Return a list of tuple pairs [(receiver, response), ... ].\n", "        responses = []\n", "        for receiver in self._live_receivers(sender):\n", "            try:\n", "                response = receiver(signal=self, sender=sender, **named)\n", "            except Exception as err:\n", "                responses.append((receiver, err))\n", "            else:\n", "                responses.append((receiver, response))\n", "        return responses\n"]}]}]}