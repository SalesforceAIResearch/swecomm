{"instance_id": "django__django-12708", "identified_spans": [{"file_path": "django/db/backends/base/schema.py", "span_ids": ["BaseDatabaseSchemaEditor._delete_composed_index", "BaseDatabaseSchemaEditor", "BaseDatabaseSchemaEditor.alter_unique_together", "BaseDatabaseSchemaEditor.alter_index_together"], "content": [{"span_id": "BaseDatabaseSchemaEditor._delete_composed_index", "start_line": 402, "end_line": 416, "content": ["    def _delete_composed_index(self, model, fields, constraint_kwargs, sql):\n", "        meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n", "        meta_index_names = {constraint.name for constraint in model._meta.indexes}\n", "        columns = [model._meta.get_field(field).column for field in fields]\n", "        constraint_names = self._constraint_names(\n", "            model, columns, exclude=meta_constraint_names | meta_index_names,\n", "            **constraint_kwargs\n", "        )\n", "        if len(constraint_names) != 1:\n", "            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n", "                len(constraint_names),\n", "                model._meta.db_table,\n", "                \", \".join(columns),\n", "            ))\n", "        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n"]}, {"span_id": "BaseDatabaseSchemaEditor", "start_line": 44, "end_line": 94, "content": ["class BaseDatabaseSchemaEditor:\n", "    \"\"\"\n", "    This class and its subclasses are responsible for emitting schema-changing\n", "    statements to the databases - model creation/removal/alteration, field\n", "    renaming, index fiddling, and so on.\n", "    \"\"\"\n", "\n", "    # Overrideable SQL templates\n", "    sql_create_table = \"CREATE TABLE %(table)s (%(definition)s)\"\n", "    sql_rename_table = \"ALTER TABLE %(old_table)s RENAME TO %(new_table)s\"\n", "    sql_retablespace_table = \"ALTER TABLE %(table)s SET TABLESPACE %(new_tablespace)s\"\n", "    sql_delete_table = \"DROP TABLE %(table)s CASCADE\"\n", "\n", "    sql_create_column = \"ALTER TABLE %(table)s ADD COLUMN %(column)s %(definition)s\"\n", "    sql_alter_column = \"ALTER TABLE %(table)s %(changes)s\"\n", "    sql_alter_column_type = \"ALTER COLUMN %(column)s TYPE %(type)s\"\n", "    sql_alter_column_null = \"ALTER COLUMN %(column)s DROP NOT NULL\"\n", "    sql_alter_column_not_null = \"ALTER COLUMN %(column)s SET NOT NULL\"\n", "    sql_alter_column_default = \"ALTER COLUMN %(column)s SET DEFAULT %(default)s\"\n", "    sql_alter_column_no_default = \"ALTER COLUMN %(column)s DROP DEFAULT\"\n", "    sql_delete_column = \"ALTER TABLE %(table)s DROP COLUMN %(column)s CASCADE\"\n", "    sql_rename_column = \"ALTER TABLE %(table)s RENAME COLUMN %(old_column)s TO %(new_column)s\"\n", "    sql_update_with_default = \"UPDATE %(table)s SET %(column)s = %(default)s WHERE %(column)s IS NULL\"\n", "\n", "    sql_unique_constraint = \"UNIQUE (%(columns)s)\"\n", "    sql_check_constraint = \"CHECK (%(check)s)\"\n", "    sql_delete_constraint = \"ALTER TABLE %(table)s DROP CONSTRAINT %(name)s\"\n", "    sql_constraint = \"CONSTRAINT %(name)s %(constraint)s\"\n", "\n", "    sql_create_check = \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s CHECK (%(check)s)\"\n", "    sql_delete_check = sql_delete_constraint\n", "\n", "    sql_create_unique = \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s UNIQUE (%(columns)s)\"\n", "    sql_delete_unique = sql_delete_constraint\n", "\n", "    sql_create_fk = (\n", "        \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s FOREIGN KEY (%(column)s) \"\n", "        \"REFERENCES %(to_table)s (%(to_column)s)%(deferrable)s\"\n", "    )\n", "    sql_create_inline_fk = None\n", "    sql_create_column_inline_fk = None\n", "    sql_delete_fk = sql_delete_constraint\n", "\n", "    sql_create_index = \"CREATE INDEX %(name)s ON %(table)s (%(columns)s)%(extra)s%(condition)s\"\n", "    sql_create_unique_index = \"CREATE UNIQUE INDEX %(name)s ON %(table)s (%(columns)s)%(condition)s\"\n", "    sql_delete_index = \"DROP INDEX %(name)s\"\n", "\n", "    sql_create_pk = \"ALTER TABLE %(table)s ADD CONSTRAINT %(name)s PRIMARY KEY (%(columns)s)\"\n", "    sql_delete_pk = sql_delete_constraint\n", "\n", "    sql_delete_procedure = 'DROP PROCEDURE %(procedure)s'\n"]}, {"span_id": "BaseDatabaseSchemaEditor.alter_unique_together", "start_line": 370, "end_line": 384, "content": ["    def alter_unique_together(self, model, old_unique_together, new_unique_together):\n", "        \"\"\"\n", "        Deal with a model changing its unique_together. The input\n", "        unique_togethers must be doubly-nested, not the single-nested\n", "        [\"foo\", \"bar\"] format.\n", "        \"\"\"\n", "        olds = {tuple(fields) for fields in old_unique_together}\n", "        news = {tuple(fields) for fields in new_unique_together}\n", "        # Deleted uniques\n", "        for fields in olds.difference(news):\n", "            self._delete_composed_index(model, fields, {'unique': True}, self.sql_delete_unique)\n", "        # Created uniques\n", "        for fields in news.difference(olds):\n", "            columns = [model._meta.get_field(field).column for field in fields]\n", "            self.execute(self._create_unique_sql(model, columns))\n"]}, {"span_id": "BaseDatabaseSchemaEditor.alter_index_together", "start_line": 386, "end_line": 400, "content": ["    def alter_index_together(self, model, old_index_together, new_index_together):\n", "        \"\"\"\n", "        Deal with a model changing its index_together. The input\n", "        index_togethers must be doubly-nested, not the single-nested\n", "        [\"foo\", \"bar\"] format.\n", "        \"\"\"\n", "        olds = {tuple(fields) for fields in old_index_together}\n", "        news = {tuple(fields) for fields in new_index_together}\n", "        # Deleted indexes\n", "        for fields in olds.difference(news):\n", "            self._delete_composed_index(model, fields, {'index': True}, self.sql_delete_index)\n", "        # Created indexes\n", "        for field_names in news.difference(olds):\n", "            fields = [model._meta.get_field(field) for field in field_names]\n", "            self.execute(self._create_index_sql(model, fields, suffix=\"_idx\"))\n"]}]}]}