{"instance_id": "sympy__sympy-18621", "identified_spans": [{"file_path": "sympy/matrices/expressions/blockmatrix.py", "span_ids": ["BlockDiagMatrix", "BlockDiagMatrix._entry", "BlockDiagMatrix.__new__", "BlockDiagMatrix.blocks"], "content": [{"span_id": "BlockDiagMatrix", "start_line": 273, "end_line": 289, "content": ["class BlockDiagMatrix(BlockMatrix):\n", "    \"\"\"\n", "    A BlockDiagMatrix is a BlockMatrix with matrices only along the diagonal\n", "\n", "    >>> from sympy import MatrixSymbol, BlockDiagMatrix, symbols, Identity\n", "    >>> n, m, l = symbols('n m l')\n", "    >>> X = MatrixSymbol('X', n, n)\n", "    >>> Y = MatrixSymbol('Y', m ,m)\n", "    >>> BlockDiagMatrix(X, Y)\n", "    Matrix([\n", "    [X, 0],\n", "    [0, Y]])\n", "\n", "    See Also\n", "    ========\n", "    sympy.matrices.dense.diag\n", "    \"\"\"\n"]}, {"span_id": "BlockDiagMatrix.__new__", "start_line": 290, "end_line": 291, "content": ["    def __new__(cls, *mats):\n", "        return Basic.__new__(BlockDiagMatrix, *mats)\n"]}, {"span_id": "BlockDiagMatrix.blocks", "start_line": 297, "end_line": 304, "content": ["    @property\n", "    def blocks(self):\n", "        from sympy.matrices.immutable import ImmutableDenseMatrix\n", "        mats = self.args\n", "        data = [[mats[i] if i == j else ZeroMatrix(mats[i].rows, mats[j].cols)\n", "                        for j in range(len(mats))]\n", "                        for i in range(len(mats))]\n", "        return ImmutableDenseMatrix(data)\n"]}]}]}