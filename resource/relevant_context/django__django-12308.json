{"instance_id": "django__django-12308", "identified_spans": [{"file_path": "django/contrib/admin/utils.py", "span_ids": ["imports", "display_for_value", "display_for_field"], "content": [{"span_id": "imports", "start_line": 1, "end_line": 19, "content": ["import datetime\n", "import decimal\n", "from collections import defaultdict\n", "\n", "from django.core.exceptions import FieldDoesNotExist\n", "from django.db import models, router\n", "from django.db.models.constants import LOOKUP_SEP\n", "from django.db.models.deletion import Collector\n", "from django.forms.utils import pretty_name\n", "from django.urls import NoReverseMatch, reverse\n", "from django.utils import formats, timezone\n", "from django.utils.html import format_html\n", "from django.utils.regex_helper import _lazy_re_compile\n", "from django.utils.text import capfirst\n", "from django.utils.translation import ngettext, override as translation_override\n", "\n", "QUOTE_MAP = {i: '_%02X' % i for i in b'\":/_#?;@&=+$,\"[]<>%\\n\\\\'}\n", "UNQUOTE_MAP = {v: chr(k) for k, v in QUOTE_MAP.items()}\n", "UNQUOTE_RE = _lazy_re_compile('_(?:%s)' % '|'.join([x[1:] for x in UNQUOTE_MAP]))\n"]}, {"span_id": "display_for_value", "start_line": 405, "end_line": 423, "content": ["def display_for_value(value, empty_value_display, boolean=False):\n", "    from django.contrib.admin.templatetags.admin_list import _boolean_icon\n", "\n", "    if boolean:\n", "        return _boolean_icon(value)\n", "    elif value is None:\n", "        return empty_value_display\n", "    elif isinstance(value, bool):\n", "        return str(value)\n", "    elif isinstance(value, datetime.datetime):\n", "        return formats.localize(timezone.template_localtime(value))\n", "    elif isinstance(value, (datetime.date, datetime.time)):\n", "        return formats.localize(value)\n", "    elif isinstance(value, (int, decimal.Decimal, float)):\n", "        return formats.number_format(value)\n", "    elif isinstance(value, (list, tuple)):\n", "        return ', '.join(str(v) for v in value)\n", "    else:\n", "        return str(value)\n"]}, {"span_id": "display_for_field", "start_line": 380, "end_line": 402, "content": ["def display_for_field(value, field, empty_value_display):\n", "    from django.contrib.admin.templatetags.admin_list import _boolean_icon\n", "\n", "    if getattr(field, 'flatchoices', None):\n", "        return dict(field.flatchoices).get(value, empty_value_display)\n", "    # BooleanField needs special-case null-handling, so it comes before the\n", "    # general null test.\n", "    elif isinstance(field, models.BooleanField):\n", "        return _boolean_icon(value)\n", "    elif value is None:\n", "        return empty_value_display\n", "    elif isinstance(field, models.DateTimeField):\n", "        return formats.localize(timezone.template_localtime(value))\n", "    elif isinstance(field, (models.DateField, models.TimeField)):\n", "        return formats.localize(value)\n", "    elif isinstance(field, models.DecimalField):\n", "        return formats.number_format(value, field.decimal_places)\n", "    elif isinstance(field, (models.IntegerField, models.FloatField)):\n", "        return formats.number_format(value)\n", "    elif isinstance(field, models.FileField) and value:\n", "        return format_html('<a href=\"{}\">{}</a>', value.url, value)\n", "    else:\n", "        return display_for_value(value, empty_value_display)\n"]}]}, {"file_path": "django/db/models/fields/json.py", "span_ids": ["JSONField", "JSONField.get_prep_value", "imports"], "content": [{"span_id": "JSONField", "start_line": 16, "end_line": 22, "content": ["class JSONField(CheckFieldDefaultMixin, Field):\n", "    empty_strings_allowed = False\n", "    description = _('A JSON object')\n", "    default_error_messages = {\n", "        'invalid': _('Value must be valid JSON.'),\n", "    }\n", "    _default_hint = ('dict', '{}')\n"]}, {"span_id": "JSONField.get_prep_value", "start_line": 83, "end_line": 86, "content": ["    def get_prep_value(self, value):\n", "        if value is None:\n", "            return value\n", "        return json.dumps(value, cls=self.encoder)\n"]}, {"span_id": "imports", "start_line": 1, "end_line": 13, "content": ["import json\n", "\n", "from django import forms\n", "from django.core import checks, exceptions\n", "from django.db import NotSupportedError, connections, router\n", "from django.db.models import lookups\n", "from django.db.models.lookups import PostgresOperatorLookup, Transform\n", "from django.utils.translation import gettext_lazy as _\n", "\n", "from . import Field\n", "from .mixins import CheckFieldDefaultMixin\n", "\n", "__all__ = ['JSONField']\n"]}]}]}