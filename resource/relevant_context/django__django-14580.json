{"instance_id": "django__django-14580", "identified_spans": [{"file_path": "django/db/migrations/operations/models.py", "span_ids": ["CreateModel"], "content": [{"span_id": "CreateModel", "start_line": 41, "end_line": 44, "content": ["class CreateModel(ModelOperation):\n", "    \"\"\"Create a model's table.\"\"\"\n", "\n", "    serialization_expand_args = ['fields', 'options', 'managers']\n"]}]}, {"file_path": "django/db/migrations/writer.py", "span_ids": ["MigrationWriter.as_string"], "content": [{"span_id": "MigrationWriter.as_string", "start_line": 129, "end_line": 199, "content": ["    def as_string(self):\n", "        \"\"\"Return a string of the file contents.\"\"\"\n", "        items = {\n", "            \"replaces_str\": \"\",\n", "            \"initial_str\": \"\",\n", "        }\n", "\n", "        imports = set()\n", "\n", "        # Deconstruct operations\n", "        operations = []\n", "        for operation in self.migration.operations:\n", "            operation_string, operation_imports = OperationWriter(operation).serialize()\n", "            imports.update(operation_imports)\n", "            operations.append(operation_string)\n", "        items[\"operations\"] = \"\\n\".join(operations) + \"\\n\" if operations else \"\"\n", "\n", "        # Format dependencies and write out swappable dependencies right\n", "        dependencies = []\n", "        for dependency in self.migration.dependencies:\n", "            if dependency[0] == \"__setting__\":\n", "                dependencies.append(\"        migrations.swappable_dependency(settings.%s),\" % dependency[1])\n", "                imports.add(\"from django.conf import settings\")\n", "            else:\n", "                dependencies.append(\"        %s,\" % self.serialize(dependency)[0])\n", "        items[\"dependencies\"] = \"\\n\".join(dependencies) + \"\\n\" if dependencies else \"\"\n", "\n", "        # Format imports nicely, swapping imports of functions from migration files\n", "        # for comments\n", "        migration_imports = set()\n", "        for line in list(imports):\n", "            if re.match(r\"^import (.*)\\.\\d+[^\\s]*$\", line):\n", "                migration_imports.add(line.split(\"import\")[1].strip())\n", "                imports.remove(line)\n", "                self.needs_manual_porting = True\n", "\n", "        # django.db.migrations is always used, but models import may not be.\n", "        # If models import exists, merge it with migrations import.\n", "        if \"from django.db import models\" in imports:\n", "            imports.discard(\"from django.db import models\")\n", "            imports.add(\"from django.db import migrations, models\")\n", "        else:\n", "            imports.add(\"from django.db import migrations\")\n", "\n", "        # Sort imports by the package / module to be imported (the part after\n", "        # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n", "        sorted_imports = sorted(imports, key=lambda i: i.split()[1])\n", "        items[\"imports\"] = \"\\n\".join(sorted_imports) + \"\\n\" if imports else \"\"\n", "        if migration_imports:\n", "            items[\"imports\"] += (\n", "                \"\\n\\n# Functions from the following migrations need manual \"\n", "                \"copying.\\n# Move them and any dependencies into this file, \"\n", "                \"then update the\\n# RunPython operations to refer to the local \"\n", "                \"versions:\\n# %s\"\n", "            ) % \"\\n# \".join(sorted(migration_imports))\n", "        # If there's a replaces, make a string for it\n", "        if self.migration.replaces:\n", "            items['replaces_str'] = \"\\n    replaces = %s\\n\" % self.serialize(self.migration.replaces)[0]\n", "        # Hinting that goes into comment\n", "        if self.include_header:\n", "            items['migration_header'] = MIGRATION_HEADER_TEMPLATE % {\n", "                'version': get_version(),\n", "                'timestamp': now().strftime(\"%Y-%m-%d %H:%M\"),\n", "            }\n", "        else:\n", "            items['migration_header'] = \"\"\n", "\n", "        if self.migration.initial:\n", "            items['initial_str'] = \"\\n    initial = True\\n\"\n", "\n", "        return MIGRATION_TEMPLATE % items\n"]}]}]}