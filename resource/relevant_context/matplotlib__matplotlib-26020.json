{"instance_id": "matplotlib__matplotlib-26020", "identified_spans": [{"file_path": "lib/matplotlib/projections/geo.py", "span_ids": ["GeoAxes.clear", "GeoAxes", "GeoAxes._init_axis"], "content": [{"span_id": "GeoAxes.clear", "start_line": 39, "end_line": 57, "content": ["    def clear(self):\n", "        # docstring inherited\n", "        super().clear()\n", "\n", "        self.set_longitude_grid(30)\n", "        self.set_latitude_grid(15)\n", "        self.set_longitude_grid_ends(75)\n", "        self.xaxis.set_minor_locator(NullLocator())\n", "        self.yaxis.set_minor_locator(NullLocator())\n", "        self.xaxis.set_ticks_position('none')\n", "        self.yaxis.set_ticks_position('none')\n", "        self.yaxis.set_tick_params(label1On=True)\n", "        # Why do we need to turn on yaxis tick labels, but\n", "        # xaxis tick labels are already on?\n", "\n", "        self.grid(mpl.rcParams['axes.grid'])\n", "\n", "        Axes.set_xlim(self, -np.pi, np.pi)\n", "        Axes.set_ylim(self, -np.pi / 2.0, np.pi / 2.0)\n"]}, {"span_id": "GeoAxes", "start_line": 15, "end_line": 16, "content": ["class GeoAxes(Axes):\n", "    \"\"\"An abstract base class for geographic projections.\"\"\"\n"]}, {"span_id": "GeoAxes._init_axis", "start_line": 32, "end_line": 34, "content": ["    def _init_axis(self):\n", "        self.xaxis = maxis.XAxis(self)\n", "        self.yaxis = maxis.YAxis(self)\n"]}]}, {"file_path": "lib/mpl_toolkits/axes_grid1/axes_grid.py", "span_ids": ["Grid.set_label_mode", "Grid", "_tick_only"], "content": [{"span_id": "Grid.set_label_mode", "start_line": 247, "end_line": 297, "content": ["    def set_label_mode(self, mode):\n", "        \"\"\"\n", "        Define which axes have tick labels.\n", "\n", "        Parameters\n", "        ----------\n", "        mode : {\"L\", \"1\", \"all\", \"keep\"}\n", "            The label mode:\n", "\n", "            - \"L\": All axes on the left column get vertical tick labels;\n", "              all axes on the bottom row get horizontal tick labels.\n", "            - \"1\": Only the bottom left axes is labelled.\n", "            - \"all\": All axes are labelled.\n", "            - \"keep\": Do not do anything.\n", "        \"\"\"\n", "        if mode == \"all\":\n", "            for ax in self.axes_all:\n", "                _tick_only(ax, False, False)\n", "        elif mode == \"L\":\n", "            # left-most axes\n", "            for ax in self.axes_column[0][:-1]:\n", "                _tick_only(ax, bottom_on=True, left_on=False)\n", "            # lower-left axes\n", "            ax = self.axes_column[0][-1]\n", "            _tick_only(ax, bottom_on=False, left_on=False)\n", "\n", "            for col in self.axes_column[1:]:\n", "                # axes with no labels\n", "                for ax in col[:-1]:\n", "                    _tick_only(ax, bottom_on=True, left_on=True)\n", "\n", "                # bottom\n", "                ax = col[-1]\n", "                _tick_only(ax, bottom_on=False, left_on=True)\n", "\n", "        elif mode == \"1\":\n", "            for ax in self.axes_all:\n", "                _tick_only(ax, bottom_on=True, left_on=True)\n", "\n", "            ax = self.axes_llc\n", "            _tick_only(ax, bottom_on=False, left_on=False)\n", "        else:\n", "            # Use _api.check_in_list at the top of the method when deprecation\n", "            # period expires\n", "            if mode != 'keep':\n", "                _api.warn_deprecated(\n", "                    '3.7', name=\"Grid label_mode\",\n", "                    message='Passing an undefined label_mode is deprecated '\n", "                            'since %(since)s and will become an error '\n", "                            '%(removal)s. To silence this warning, pass '\n", "                            '\"keep\", which gives the same behaviour.')\n"]}, {"span_id": "Grid", "start_line": 38, "end_line": 49, "content": ["class Grid:\n", "    \"\"\"\n", "    A grid of Axes.\n", "\n", "    In Matplotlib, the Axes location (and size) is specified in normalized\n", "    figure coordinates. This may not be ideal for images that needs to be\n", "    displayed with a given aspect ratio; for example, it is difficult to\n", "    display multiple images of a same size with some fixed padding between\n", "    them.  AxesGrid can be used in such case.\n", "    \"\"\"\n", "\n", "    _defaultAxesClass = Axes\n"]}, {"span_id": "_tick_only", "start_line": 13, "end_line": 17, "content": ["def _tick_only(ax, bottom_on, left_on):\n", "    bottom_off = not bottom_on\n", "    left_off = not left_on\n", "    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n", "    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n"]}]}]}