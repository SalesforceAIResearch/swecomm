{"instance_id": "sympy__sympy-20442", "identified_spans": [{"file_path": "sympy/physics/units/util.py", "span_ids": ["convert_to"], "content": [{"span_id": "convert_to", "start_line": 37, "end_line": 109, "content": ["def convert_to(expr, target_units, unit_system=\"SI\"):\n", "    \"\"\"\n", "    Convert ``expr`` to the same expression with all of its units and quantities\n", "    represented as factors of ``target_units``, whenever the dimension is compatible.\n", "\n", "    ``target_units`` may be a single unit/quantity, or a collection of\n", "    units/quantities.\n", "\n", "    Examples\n", "    ========\n", "\n", "    >>> from sympy.physics.units import speed_of_light, meter, gram, second, day\n", "    >>> from sympy.physics.units import mile, newton, kilogram, atomic_mass_constant\n", "    >>> from sympy.physics.units import kilometer, centimeter\n", "    >>> from sympy.physics.units import gravitational_constant, hbar\n", "    >>> from sympy.physics.units import convert_to\n", "    >>> convert_to(mile, kilometer)\n", "    25146*kilometer/15625\n", "    >>> convert_to(mile, kilometer).n()\n", "    1.609344*kilometer\n", "    >>> convert_to(speed_of_light, meter/second)\n", "    299792458*meter/second\n", "    >>> convert_to(day, second)\n", "    86400*second\n", "    >>> 3*newton\n", "    3*newton\n", "    >>> convert_to(3*newton, kilogram*meter/second**2)\n", "    3*kilogram*meter/second**2\n", "    >>> convert_to(atomic_mass_constant, gram)\n", "    1.660539060e-24*gram\n", "\n", "    Conversion to multiple units:\n", "\n", "    >>> convert_to(speed_of_light, [meter, second])\n", "    299792458*meter/second\n", "    >>> convert_to(3*newton, [centimeter, gram, second])\n", "    300000*centimeter*gram/second**2\n", "\n", "    Conversion to Planck units:\n", "\n", "    >>> convert_to(atomic_mass_constant, [gravitational_constant, speed_of_light, hbar]).n()\n", "    7.62963085040767e-20*gravitational_constant**(-0.5)*hbar**0.5*speed_of_light**0.5\n", "\n", "    \"\"\"\n", "    from sympy.physics.units import UnitSystem\n", "    unit_system = UnitSystem.get_unit_system(unit_system)\n", "\n", "    if not isinstance(target_units, (Iterable, Tuple)):\n", "        target_units = [target_units]\n", "\n", "    if isinstance(expr, Add):\n", "        return Add.fromiter(convert_to(i, target_units, unit_system) for i in expr.args)\n", "\n", "    expr = sympify(expr)\n", "\n", "    if not isinstance(expr, Quantity) and expr.has(Quantity):\n", "        expr = expr.replace(lambda x: isinstance(x, Quantity), lambda x: x.convert_to(target_units, unit_system))\n", "\n", "    def get_total_scale_factor(expr):\n", "        if isinstance(expr, Mul):\n", "            return reduce(lambda x, y: x * y, [get_total_scale_factor(i) for i in expr.args])\n", "        elif isinstance(expr, Pow):\n", "            return get_total_scale_factor(expr.base) ** expr.exp\n", "        elif isinstance(expr, Quantity):\n", "            return unit_system.get_quantity_scale_factor(expr)\n", "        return expr\n", "\n", "    depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n", "    if depmat is None:\n", "        return expr\n", "\n", "    expr_scale_factor = get_total_scale_factor(expr)\n", "    return expr_scale_factor * Mul.fromiter((1/get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat))\n"]}]}]}