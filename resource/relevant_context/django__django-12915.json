{"instance_id": "django__django-12915", "identified_spans": [{"file_path": "django/contrib/staticfiles/handlers.py", "span_ids": ["ASGIStaticFilesHandler", "StaticFilesHandlerMixin.get_response", "StaticFilesHandlerMixin"], "content": [{"span_id": "ASGIStaticFilesHandler", "start_line": 72, "end_line": 76, "content": ["class ASGIStaticFilesHandler(StaticFilesHandlerMixin, ASGIHandler):\n", "    \"\"\"\n", "    ASGI application which wraps another and intercepts requests for static\n", "    files, passing them off to Django's static file serving.\n", "    \"\"\"\n"]}, {"span_id": "StaticFilesHandlerMixin.get_response", "start_line": 49, "end_line": 53, "content": ["    def get_response(self, request):\n", "        try:\n", "            return self.serve(request)\n", "        except Http404 as e:\n", "            return response_for_exception(request, e)\n"]}, {"span_id": "StaticFilesHandlerMixin", "start_line": 13, "end_line": 19, "content": ["class StaticFilesHandlerMixin:\n", "    \"\"\"\n", "    Common methods used by WSGI and ASGI handlers.\n", "    \"\"\"\n", "    # May be used to differentiate between handler types (e.g. in a\n", "    # request_finished signal)\n", "    handles_files = True\n"]}]}, {"file_path": "django/core/handlers/base.py", "span_ids": ["BaseHandler.get_response_async"], "content": [{"span_id": "BaseHandler.get_response_async", "start_line": 138, "end_line": 156, "content": ["    async def get_response_async(self, request):\n", "        \"\"\"\n", "        Asynchronous version of get_response.\n", "\n", "        Funneling everything, including WSGI, into a single async\n", "        get_response() is too slow. Avoid the context switch by using\n", "        a separate async response path.\n", "        \"\"\"\n", "        # Setup default url resolver for this thread.\n", "        set_urlconf(settings.ROOT_URLCONF)\n", "        response = await self._middleware_chain(request)\n", "        response._resource_closers.append(request.close)\n", "        if response.status_code >= 400:\n", "            await sync_to_async(log_response)(\n", "                '%s: %s', response.reason_phrase, request.path,\n", "                response=response,\n", "                request=request,\n", "            )\n", "        return response\n"]}]}]}