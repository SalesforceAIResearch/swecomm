{"instance_id": "scikit-learn__scikit-learn-10297", "identified_spans": [{"file_path": "sklearn/linear_model/ridge.py", "span_ids": ["RidgeClassifierCV", "RidgeClassifierCV.__init__"], "content": [{"span_id": "RidgeClassifierCV", "start_line": 1247, "end_line": 1334, "content": ["class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n", "    \"\"\"Ridge classifier with built-in cross-validation.\n", "\n", "    By default, it performs Generalized Cross-Validation, which is a form of\n", "    efficient Leave-One-Out cross-validation. Currently, only the n_features >\n", "    n_samples case is handled efficiently.\n", "\n", "    Read more in the :ref:`User Guide <ridge_regression>`.\n", "\n", "    Parameters\n", "    ----------\n", "    alphas : numpy array of shape [n_alphas]\n", "        Array of alpha values to try.\n", "        Regularization strength; must be a positive float. Regularization\n", "        improves the conditioning of the problem and reduces the variance of\n", "        the estimates. Larger values specify stronger regularization.\n", "        Alpha corresponds to ``C^-1`` in other linear models such as\n", "        LogisticRegression or LinearSVC.\n", "\n", "    fit_intercept : boolean\n", "        Whether to calculate the intercept for this model. If set\n", "        to false, no intercept will be used in calculations\n", "        (e.g. data is expected to be already centered).\n", "\n", "    normalize : boolean, optional, default False\n", "        This parameter is ignored when ``fit_intercept`` is set to False.\n", "        If True, the regressors X will be normalized before regression by\n", "        subtracting the mean and dividing by the l2-norm.\n", "        If you wish to standardize, please use\n", "        :class:`sklearn.preprocessing.StandardScaler` before calling ``fit``\n", "        on an estimator with ``normalize=False``.\n", "\n", "    scoring : string, callable or None, optional, default: None\n", "        A string (see model evaluation documentation) or\n", "        a scorer callable object / function with signature\n", "        ``scorer(estimator, X, y)``.\n", "\n", "    cv : int, cross-validation generator or an iterable, optional\n", "        Determines the cross-validation splitting strategy.\n", "        Possible inputs for cv are:\n", "\n", "        - None, to use the efficient Leave-One-Out cross-validation\n", "        - integer, to specify the number of folds.\n", "        - An object to be used as a cross-validation generator.\n", "        - An iterable yielding train/test splits.\n", "\n", "        Refer :ref:`User Guide <cross_validation>` for the various\n", "        cross-validation strategies that can be used here.\n", "\n", "    class_weight : dict or 'balanced', optional\n", "        Weights associated with classes in the form ``{class_label: weight}``.\n", "        If not given, all classes are supposed to have weight one.\n", "\n", "        The \"balanced\" mode uses the values of y to automatically adjust\n", "        weights inversely proportional to class frequencies in the input data\n", "        as ``n_samples / (n_classes * np.bincount(y))``\n", "\n", "    Attributes\n", "    ----------\n", "    cv_values_ : array, shape = [n_samples, n_alphas] or \\\n", "    shape = [n_samples, n_responses, n_alphas], optional\n", "        Cross-validation values for each alpha (if `store_cv_values=True` and\n", "    `cv=None`). After `fit()` has been called, this attribute will contain \\\n", "    the mean squared errors (by default) or the values of the \\\n", "    `{loss,score}_func` function (if provided in the constructor).\n", "\n", "    coef_ : array, shape = [n_features] or [n_targets, n_features]\n", "        Weight vector(s).\n", "\n", "    intercept_ : float | array, shape = (n_targets,)\n", "        Independent term in decision function. Set to 0.0 if\n", "        ``fit_intercept = False``.\n", "\n", "    alpha_ : float\n", "        Estimated regularization parameter\n", "\n", "    See also\n", "    --------\n", "    Ridge : Ridge regression\n", "    RidgeClassifier : Ridge classifier\n", "    RidgeCV : Ridge regression with built-in cross validation\n", "\n", "    Notes\n", "    -----\n", "    For multi-class classification, n_class classifiers are trained in\n", "    a one-versus-all approach. Concretely, this is implemented by taking\n", "    advantage of the multi-variate response support in Ridge.\n", "    \"\"\"\n"]}, {"span_id": "RidgeClassifierCV.__init__", "start_line": 1335, "end_line": 1340, "content": ["    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n", "                 normalize=False, scoring=None, cv=None, class_weight=None):\n", "        super(RidgeClassifierCV, self).__init__(\n", "            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n", "            scoring=scoring, cv=cv)\n", "        self.class_weight = class_weight\n"]}]}]}