{"instance_id": "matplotlib__matplotlib-25311", "identified_spans": [{"file_path": "lib/matplotlib/backends/backend_qtagg.py", "span_ids": ["FigureCanvasQTAgg"], "content": [{"span_id": "FigureCanvasQTAgg", "start_line": 16, "end_line": 16, "content": ["class FigureCanvasQTAgg(FigureCanvasAgg, FigureCanvasQT):\n"]}]}, {"file_path": "lib/matplotlib/figure.py", "span_ids": ["Figure.__getstate__"], "content": [{"span_id": "Figure.__getstate__", "start_line": 3159, "end_line": 3177, "content": ["    def __getstate__(self):\n", "        state = super().__getstate__()\n", "\n", "        # The canvas cannot currently be pickled, but this has the benefit\n", "        # of meaning that a figure can be detached from one canvas, and\n", "        # re-attached to another.\n", "        state.pop(\"canvas\")\n", "\n", "        # discard any changes to the dpi due to pixel ratio changes\n", "        state[\"_dpi\"] = state.get('_original_dpi', state['_dpi'])\n", "\n", "        # add version information to the state\n", "        state['__mpl_version__'] = mpl.__version__\n", "\n", "        # check whether the figure manager (if any) is registered with pyplot\n", "        from matplotlib import _pylab_helpers\n", "        if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n", "            state['_restore_to_pylab'] = True\n", "        return state\n"]}]}, {"file_path": "lib/matplotlib/legend.py", "span_ids": ["Legend.set_draggable"], "content": [{"span_id": "Legend.set_draggable", "start_line": 1173, "end_line": 1205, "content": ["    def set_draggable(self, state, use_blit=False, update='loc'):\n", "        \"\"\"\n", "        Enable or disable mouse dragging support of the legend.\n", "\n", "        Parameters\n", "        ----------\n", "        state : bool\n", "            Whether mouse dragging is enabled.\n", "        use_blit : bool, optional\n", "            Use blitting for faster image composition. For details see\n", "            :ref:`func-animation`.\n", "        update : {'loc', 'bbox'}, optional\n", "            The legend parameter to be changed when dragged:\n", "\n", "            - 'loc': update the *loc* parameter of the legend\n", "            - 'bbox': update the *bbox_to_anchor* parameter of the legend\n", "\n", "        Returns\n", "        -------\n", "        `.DraggableLegend` or *None*\n", "            If *state* is ``True`` this returns the `.DraggableLegend` helper\n", "            instance. Otherwise this returns *None*.\n", "        \"\"\"\n", "        if state:\n", "            if self._draggable is None:\n", "                self._draggable = DraggableLegend(self,\n", "                                                  use_blit,\n", "                                                  update=update)\n", "        else:\n", "            if self._draggable is not None:\n", "                self._draggable.disconnect()\n", "            self._draggable = None\n", "        return self._draggable\n"]}]}]}