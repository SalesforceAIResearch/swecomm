{"instance_id": "django__django-12700", "identified_spans": [{"file_path": "django/views/debug.py", "span_ids": ["SafeExceptionReporterFilter", "SafeExceptionReporterFilter.cleanse_setting", "SafeExceptionReporterFilter.get_safe_settings"], "content": [{"span_id": "SafeExceptionReporterFilter", "start_line": 75, "end_line": 81, "content": ["class SafeExceptionReporterFilter:\n", "    \"\"\"\n", "    Use annotations made by the sensitive_post_parameters and\n", "    sensitive_variables decorators to filter out sensitive information.\n", "    \"\"\"\n", "    cleansed_substitute = '********************'\n", "    hidden_settings = _lazy_re_compile('API|TOKEN|KEY|SECRET|PASS|SIGNATURE', flags=re.I)\n"]}, {"span_id": "SafeExceptionReporterFilter.cleanse_setting", "start_line": 83, "end_line": 102, "content": ["    def cleanse_setting(self, key, value):\n", "        \"\"\"\n", "        Cleanse an individual setting key/value of sensitive content. If the\n", "        value is a dictionary, recursively cleanse the keys in that dictionary.\n", "        \"\"\"\n", "        try:\n", "            if self.hidden_settings.search(key):\n", "                cleansed = self.cleansed_substitute\n", "            elif isinstance(value, dict):\n", "                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n", "            else:\n", "                cleansed = value\n", "        except TypeError:\n", "            # If the key isn't regex-able, just return as-is.\n", "            cleansed = value\n", "\n", "        if callable(cleansed):\n", "            cleansed = CallableSettingWrapper(cleansed)\n", "\n", "        return cleansed\n"]}, {"span_id": "SafeExceptionReporterFilter.get_safe_settings", "start_line": 104, "end_line": 113, "content": ["    def get_safe_settings(self):\n", "        \"\"\"\n", "        Return a dictionary of the settings module with values of sensitive\n", "        settings replaced with stars (*********).\n", "        \"\"\"\n", "        settings_dict = {}\n", "        for k in dir(settings):\n", "            if k.isupper():\n", "                settings_dict[k] = self.cleanse_setting(k, getattr(settings, k))\n", "        return settings_dict\n"]}]}]}