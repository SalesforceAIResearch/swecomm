{"instance_id": "scikit-learn__scikit-learn-14983", "identified_spans": [{"file_path": "sklearn/base.py", "span_ids": ["BaseEstimator.__repr__"], "content": [{"span_id": "BaseEstimator.__repr__", "start_line": 237, "end_line": 284, "content": ["    def __repr__(self, N_CHAR_MAX=700):\n", "        # N_CHAR_MAX is the (approximate) maximum number of non-blank\n", "        # characters to render. We pass it as an optional parameter to ease\n", "        # the tests.\n", "\n", "        from .utils._pprint import _EstimatorPrettyPrinter\n", "\n", "        N_MAX_ELEMENTS_TO_SHOW = 30  # number of elements to show in sequences\n", "\n", "        # use ellipsis for sequences with a lot of elements\n", "        pp = _EstimatorPrettyPrinter(\n", "            compact=True, indent=1, indent_at_name=True,\n", "            n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW)\n", "\n", "        repr_ = pp.pformat(self)\n", "\n", "        # Use bruteforce ellipsis when there are a lot of non-blank characters\n", "        n_nonblank = len(''.join(repr_.split()))\n", "        if n_nonblank > N_CHAR_MAX:\n", "            lim = N_CHAR_MAX // 2  # apprx number of chars to keep on both ends\n", "            regex = r'^(\\s*\\S){%d}' % lim\n", "            # The regex '^(\\s*\\S){%d}' % n\n", "            # matches from the start of the string until the nth non-blank\n", "            # character:\n", "            # - ^ matches the start of string\n", "            # - (pattern){n} matches n repetitions of pattern\n", "            # - \\s*\\S matches a non-blank char following zero or more blanks\n", "            left_lim = re.match(regex, repr_).end()\n", "            right_lim = re.match(regex, repr_[::-1]).end()\n", "\n", "            if '\\n' in repr_[left_lim:-right_lim]:\n", "                # The left side and right side aren't on the same line.\n", "                # To avoid weird cuts, e.g.:\n", "                # categoric...ore',\n", "                # we need to start the right side with an appropriate newline\n", "                # character so that it renders properly as:\n", "                # categoric...\n", "                # handle_unknown='ignore',\n", "                # so we add [^\\n]*\\n which matches until the next \\n\n", "                regex += r'[^\\n]*\\n'\n", "                right_lim = re.match(regex, repr_[::-1]).end()\n", "\n", "            ellipsis = '...'\n", "            if left_lim + len(ellipsis) < len(repr_) - right_lim:\n", "                # Only add ellipsis if it results in a shorter repr\n", "                repr_ = repr_[:left_lim] + '...' + repr_[-right_lim:]\n", "\n", "        return repr_\n"]}]}, {"file_path": "sklearn/model_selection/_split.py", "span_ids": ["_RepeatedSplits", "RepeatedStratifiedKFold", "RepeatedKFold"], "content": [{"span_id": "_RepeatedSplits", "start_line": 1066, "end_line": 1089, "content": ["class _RepeatedSplits(metaclass=ABCMeta):\n", "    \"\"\"Repeated splits for an arbitrary randomized CV splitter.\n", "\n", "    Repeats splits for cross-validators n times with different randomization\n", "    in each repetition.\n", "\n", "    Parameters\n", "    ----------\n", "    cv : callable\n", "        Cross-validator class.\n", "\n", "    n_repeats : int, default=10\n", "        Number of times cross-validator needs to be repeated.\n", "\n", "    random_state : int, RandomState instance or None, optional, default=None\n", "        If int, random_state is the seed used by the random number generator;\n", "        If RandomState instance, random_state is the random number generator;\n", "        If None, the random number generator is the RandomState instance used\n", "        by `np.random`.\n", "\n", "    **cvargs : additional params\n", "        Constructor parameters for cv. Must not contain random_state\n", "        and shuffle.\n", "    \"\"\"\n"]}, {"span_id": "RepeatedStratifiedKFold", "start_line": 1220, "end_line": 1267, "content": ["class RepeatedStratifiedKFold(_RepeatedSplits):\n", "    \"\"\"Repeated Stratified K-Fold cross validator.\n", "\n", "    Repeats Stratified K-Fold n times with different randomization in each\n", "    repetition.\n", "\n", "    Read more in the :ref:`User Guide <cross_validation>`.\n", "\n", "    Parameters\n", "    ----------\n", "    n_splits : int, default=5\n", "        Number of folds. Must be at least 2.\n", "\n", "    n_repeats : int, default=10\n", "        Number of times cross-validator needs to be repeated.\n", "\n", "    random_state : None, int or RandomState, default=None\n", "        Random state to be used to generate random state for each\n", "        repetition.\n", "\n", "    Examples\n", "    --------\n", "    >>> import numpy as np\n", "    >>> from sklearn.model_selection import RepeatedStratifiedKFold\n", "    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n", "    >>> y = np.array([0, 0, 1, 1])\n", "    >>> rskf = RepeatedStratifiedKFold(n_splits=2, n_repeats=2,\n", "    ...     random_state=36851234)\n", "    >>> for train_index, test_index in rskf.split(X, y):\n", "    ...     print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n", "    ...     X_train, X_test = X[train_index], X[test_index]\n", "    ...     y_train, y_test = y[train_index], y[test_index]\n", "    ...\n", "    TRAIN: [1 2] TEST: [0 3]\n", "    TRAIN: [0 3] TEST: [1 2]\n", "    TRAIN: [1 3] TEST: [0 2]\n", "    TRAIN: [0 2] TEST: [1 3]\n", "\n", "    Notes\n", "    -----\n", "    Randomized CV splitters may return different results for each call of\n", "    split. You can make the results identical by setting ``random_state``\n", "    to an integer.\n", "\n", "    See also\n", "    --------\n", "    RepeatedKFold: Repeats K-Fold n times.\n", "    \"\"\"\n"]}, {"span_id": "RepeatedKFold", "start_line": 1167, "end_line": 1214, "content": ["class RepeatedKFold(_RepeatedSplits):\n", "    \"\"\"Repeated K-Fold cross validator.\n", "\n", "    Repeats K-Fold n times with different randomization in each repetition.\n", "\n", "    Read more in the :ref:`User Guide <cross_validation>`.\n", "\n", "    Parameters\n", "    ----------\n", "    n_splits : int, default=5\n", "        Number of folds. Must be at least 2.\n", "\n", "    n_repeats : int, default=10\n", "        Number of times cross-validator needs to be repeated.\n", "\n", "    random_state : int, RandomState instance or None, optional, default=None\n", "        If int, random_state is the seed used by the random number generator;\n", "        If RandomState instance, random_state is the random number generator;\n", "        If None, the random number generator is the RandomState instance used\n", "        by `np.random`.\n", "\n", "    Examples\n", "    --------\n", "    >>> import numpy as np\n", "    >>> from sklearn.model_selection import RepeatedKFold\n", "    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n", "    >>> y = np.array([0, 0, 1, 1])\n", "    >>> rkf = RepeatedKFold(n_splits=2, n_repeats=2, random_state=2652124)\n", "    >>> for train_index, test_index in rkf.split(X):\n", "    ...     print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n", "    ...     X_train, X_test = X[train_index], X[test_index]\n", "    ...     y_train, y_test = y[train_index], y[test_index]\n", "    ...\n", "    TRAIN: [0 1] TEST: [2 3]\n", "    TRAIN: [2 3] TEST: [0 1]\n", "    TRAIN: [1 2] TEST: [0 3]\n", "    TRAIN: [0 3] TEST: [1 2]\n", "\n", "    Notes\n", "    -----\n", "    Randomized CV splitters may return different results for each call of\n", "    split. You can make the results identical by setting ``random_state``\n", "    to an integer.\n", "\n", "    See also\n", "    --------\n", "    RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.\n", "    \"\"\"\n"]}]}]}