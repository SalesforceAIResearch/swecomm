{"instance_id": "sphinx-doc__sphinx-8595", "identified_spans": [{"file_path": "sphinx/ext/autodoc/__init__.py", "span_ids": ["ModuleDocumenter", "ModuleDocumenter.get_object_members"], "content": [{"span_id": "ModuleDocumenter", "start_line": 971, "end_line": 987, "content": ["class ModuleDocumenter(Documenter):\n", "    \"\"\"\n", "    Specialized Documenter subclass for modules.\n", "    \"\"\"\n", "    objtype = 'module'\n", "    content_indent = ''\n", "    titles_allowed = True\n", "\n", "    option_spec = {\n", "        'members': members_option, 'undoc-members': bool_option,\n", "        'noindex': bool_option, 'inherited-members': inherited_members_option,\n", "        'show-inheritance': bool_option, 'synopsis': identity,\n", "        'platform': identity, 'deprecated': bool_option,\n", "        'member-order': member_order_option, 'exclude-members': exclude_members_option,\n", "        'private-members': members_option, 'special-members': members_option,\n", "        'imported-members': bool_option, 'ignore-module-all': bool_option\n", "    }  # type: Dict[str, Callable]\n"]}, {"span_id": "ModuleDocumenter.get_object_members", "start_line": 1074, "end_line": 1098, "content": ["    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n", "        members = self.get_module_members()\n", "        if want_all:\n", "            if not self.__all__:\n", "                # for implicit module members, check __module__ to avoid\n", "                # documenting imported objects\n", "                return True, list(members.values())\n", "            else:\n", "                for member in members.values():\n", "                    if member.__name__ not in self.__all__:\n", "                        member.skipped = True\n", "\n", "                return False, list(members.values())\n", "        else:\n", "            memberlist = self.options.members or []\n", "            ret = []\n", "            for name in memberlist:\n", "                if name in members:\n", "                    ret.append(members[name])\n", "                else:\n", "                    logger.warning(__('missing attribute mentioned in :members: option: '\n", "                                      'module %s, attribute %s') %\n", "                                   (safe_getattr(self.object, '__name__', '???'), name),\n", "                                   type='autodoc')\n", "            return False, ret\n"]}]}]}