{"instance_id": "django__django-15996", "identified_spans": [{"file_path": "django/db/migrations/serializer.py", "span_ids": ["EnumSerializer", "serializer_factory", "EnumSerializer.serialize"], "content": [{"span_id": "EnumSerializer", "start_line": 124, "end_line": 124, "content": ["class EnumSerializer(BaseSerializer):\n"]}, {"span_id": "serializer_factory", "start_line": 356, "end_line": 382, "content": ["def serializer_factory(value):\n", "    if isinstance(value, Promise):\n", "        value = str(value)\n", "    elif isinstance(value, LazyObject):\n", "        # The unwrapped value is returned as the first item of the arguments\n", "        # tuple.\n", "        value = value.__reduce__()[1][0]\n", "\n", "    if isinstance(value, models.Field):\n", "        return ModelFieldSerializer(value)\n", "    if isinstance(value, models.manager.BaseManager):\n", "        return ModelManagerSerializer(value)\n", "    if isinstance(value, Operation):\n", "        return OperationSerializer(value)\n", "    if isinstance(value, type):\n", "        return TypeSerializer(value)\n", "    # Anything that knows how to deconstruct itself.\n", "    if hasattr(value, \"deconstruct\"):\n", "        return DeconstructableSerializer(value)\n", "    for type_, serializer_cls in Serializer._registry.items():\n", "        if isinstance(value, type_):\n", "            return serializer_cls(value)\n", "    raise ValueError(\n", "        \"Cannot serialize: %r\\nThere are some values Django cannot serialize into \"\n", "        \"migration files.\\nFor more, see https://docs.djangoproject.com/en/%s/\"\n", "        \"topics/migrations/#migration-serializing\" % (value, get_docs_version())\n", "    )\n"]}, {"span_id": "EnumSerializer.serialize", "start_line": 125, "end_line": 131, "content": ["    def serialize(self):\n", "        enum_class = self.value.__class__\n", "        module = enum_class.__module__\n", "        return (\n", "            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n", "            {\"import %s\" % module},\n", "        )\n"]}]}, {"file_path": "django/db/models/fields/__init__.py", "span_ids": ["IntegerField"], "content": [{"span_id": "IntegerField", "start_line": 1952, "end_line": 1957, "content": ["class IntegerField(Field):\n", "    empty_strings_allowed = False\n", "    default_error_messages = {\n", "        \"invalid\": _(\"\u201c%(value)s\u201d value must be an integer.\"),\n", "    }\n", "    description = _(\"Integer\")\n"]}]}]}