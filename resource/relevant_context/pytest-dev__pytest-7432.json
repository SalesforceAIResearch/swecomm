{"instance_id": "pytest-dev__pytest-7432", "identified_spans": [{"file_path": "src/_pytest/skipping.py", "span_ids": ["pytest_runtest_makereport"], "content": [{"span_id": "pytest_runtest_makereport", "start_line": 260, "end_line": 305, "content": ["@hookimpl(hookwrapper=True)\n", "def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n", "    outcome = yield\n", "    rep = outcome.get_result()\n", "    xfailed = item._store.get(xfailed_key, None)\n", "    # unittest special case, see setting of unexpectedsuccess_key\n", "    if unexpectedsuccess_key in item._store and rep.when == \"call\":\n", "        reason = item._store[unexpectedsuccess_key]\n", "        if reason:\n", "            rep.longrepr = \"Unexpected success: {}\".format(reason)\n", "        else:\n", "            rep.longrepr = \"Unexpected success\"\n", "        rep.outcome = \"failed\"\n", "    elif item.config.option.runxfail:\n", "        pass  # don't interfere\n", "    elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n", "        assert call.excinfo.value.msg is not None\n", "        rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n", "        rep.outcome = \"skipped\"\n", "    elif not rep.skipped and xfailed:\n", "        if call.excinfo:\n", "            raises = xfailed.raises\n", "            if raises is not None and not isinstance(call.excinfo.value, raises):\n", "                rep.outcome = \"failed\"\n", "            else:\n", "                rep.outcome = \"skipped\"\n", "                rep.wasxfail = xfailed.reason\n", "        elif call.when == \"call\":\n", "            if xfailed.strict:\n", "                rep.outcome = \"failed\"\n", "                rep.longrepr = \"[XPASS(strict)] \" + xfailed.reason\n", "            else:\n", "                rep.outcome = \"passed\"\n", "                rep.wasxfail = xfailed.reason\n", "    elif (\n", "        item._store.get(skipped_by_mark_key, True)\n", "        and rep.skipped\n", "        and type(rep.longrepr) is tuple\n", "    ):\n", "        # skipped by mark.skipif; change the location of the failure\n", "        # to point to the item definition, otherwise it will display\n", "        # the location of where the skip exception was raised within pytest\n", "        _, _, reason = rep.longrepr\n", "        filename, line = item.reportinfo()[:2]\n", "        assert line is not None\n", "        rep.longrepr = str(filename), line + 1, reason\n"]}]}]}