{"instance_id": "sympy__sympy-16503", "identified_spans": [{"file_path": "sympy/printing/pretty/pretty.py", "span_ids": ["PrettyPrinter._print_Sum"], "content": [{"span_id": "PrettyPrinter._print_Sum", "start_line": 535, "end_line": 634, "content": ["    def _print_Sum(self, expr):\n", "        ascii_mode = not self._use_unicode\n", "\n", "        def asum(hrequired, lower, upper, use_ascii):\n", "            def adjust(s, wid=None, how='<^>'):\n", "                if not wid or len(s) > wid:\n", "                    return s\n", "                need = wid - len(s)\n", "                if how == '<^>' or how == \"<\" or how not in list('<^>'):\n", "                    return s + ' '*need\n", "                half = need//2\n", "                lead = ' '*half\n", "                if how == \">\":\n", "                    return \" \"*need + s\n", "                return lead + s + ' '*(need - len(lead))\n", "\n", "            h = max(hrequired, 2)\n", "            d = h//2\n", "            w = d + 1\n", "            more = hrequired % 2\n", "\n", "            lines = []\n", "            if use_ascii:\n", "                lines.append(\"_\"*(w) + ' ')\n", "                lines.append(r\"\\%s`\" % (' '*(w - 1)))\n", "                for i in range(1, d):\n", "                    lines.append('%s\\\\%s' % (' '*i, ' '*(w - i)))\n", "                if more:\n", "                    lines.append('%s)%s' % (' '*(d), ' '*(w - d)))\n", "                for i in reversed(range(1, d)):\n", "                    lines.append('%s/%s' % (' '*i, ' '*(w - i)))\n", "                lines.append(\"/\" + \"_\"*(w - 1) + ',')\n", "                return d, h + more, lines, 0\n", "            else:\n", "                w = w + more\n", "                d = d + more\n", "                vsum = vobj('sum', 4)\n", "                lines.append(\"_\"*(w))\n", "                for i in range(0, d):\n", "                    lines.append('%s%s%s' % (' '*i, vsum[2], ' '*(w - i - 1)))\n", "                for i in reversed(range(0, d)):\n", "                    lines.append('%s%s%s' % (' '*i, vsum[4], ' '*(w - i - 1)))\n", "                lines.append(vsum[8]*(w))\n", "                return d, h + 2*more, lines, more\n", "\n", "        f = expr.function\n", "\n", "        prettyF = self._print(f)\n", "\n", "        if f.is_Add:  # add parens\n", "            prettyF = prettyForm(*prettyF.parens())\n", "\n", "        H = prettyF.height() + 2\n", "\n", "        # \\sum \\sum \\sum ...\n", "        first = True\n", "        max_upper = 0\n", "        sign_height = 0\n", "\n", "        for lim in expr.limits:\n", "            if len(lim) == 3:\n", "                prettyUpper = self._print(lim[2])\n", "                prettyLower = self._print(Equality(lim[0], lim[1]))\n", "            elif len(lim) == 2:\n", "                prettyUpper = self._print(\"\")\n", "                prettyLower = self._print(Equality(lim[0], lim[1]))\n", "            elif len(lim) == 1:\n", "                prettyUpper = self._print(\"\")\n", "                prettyLower = self._print(lim[0])\n", "\n", "            max_upper = max(max_upper, prettyUpper.height())\n", "\n", "            # Create sum sign based on the height of the argument\n", "            d, h, slines, adjustment = asum(\n", "                H, prettyLower.width(), prettyUpper.width(), ascii_mode)\n", "            prettySign = stringPict('')\n", "            prettySign = prettyForm(*prettySign.stack(*slines))\n", "\n", "            if first:\n", "                sign_height = prettySign.height()\n", "\n", "            prettySign = prettyForm(*prettySign.above(prettyUpper))\n", "            prettySign = prettyForm(*prettySign.below(prettyLower))\n", "\n", "            if first:\n", "                # change F baseline so it centers on the sign\n", "                prettyF.baseline -= d - (prettyF.height()//2 -\n", "                                         prettyF.baseline) - adjustment\n", "                first = False\n", "\n", "            # put padding to the right\n", "            pad = stringPict('')\n", "            pad = prettyForm(*pad.stack(*[' ']*h))\n", "            prettySign = prettyForm(*prettySign.right(pad))\n", "            # put the present prettyF to the right\n", "            prettyF = prettyForm(*prettySign.right(prettyF))\n", "\n", "        prettyF.baseline = max_upper + sign_height//2\n", "        prettyF.binding = prettyForm.MUL\n", "        return prettyF\n"]}]}]}