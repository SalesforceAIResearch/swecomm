{"instance_id": "scikit-learn__scikit-learn-12471", "identified_spans": [{"file_path": "sklearn/preprocessing/_encoders.py", "span_ids": ["_BaseEncoder._transform", "OneHotEncoder._transform_new"], "content": [{"span_id": "_BaseEncoder._transform", "start_line": 91, "end_line": 118, "content": ["    def _transform(self, X, handle_unknown='error'):\n", "        X = self._check_X(X)\n", "\n", "        _, n_features = X.shape\n", "        X_int = np.zeros_like(X, dtype=np.int)\n", "        X_mask = np.ones_like(X, dtype=np.bool)\n", "\n", "        for i in range(n_features):\n", "            Xi = X[:, i]\n", "            diff, valid_mask = _encode_check_unknown(Xi, self.categories_[i],\n", "                                                     return_mask=True)\n", "\n", "            if not np.all(valid_mask):\n", "                if handle_unknown == 'error':\n", "                    msg = (\"Found unknown categories {0} in column {1}\"\n", "                           \" during transform\".format(diff, i))\n", "                    raise ValueError(msg)\n", "                else:\n", "                    # Set the problematic rows to an acceptable value and\n", "                    # continue `The rows are marked `X_mask` and will be\n", "                    # removed later.\n", "                    X_mask[:, i] = valid_mask\n", "                    Xi = Xi.copy()\n", "                    Xi[~valid_mask] = self.categories_[i][0]\n", "            _, encoded = _encode(Xi, self.categories_[i], encode=True)\n", "            X_int[:, i] = encoded\n", "\n", "        return X_int, X_mask\n"]}, {"span_id": "OneHotEncoder._transform_new", "start_line": 555, "end_line": 583, "content": ["    def _transform_new(self, X):\n", "        \"\"\"New implementation assuming categorical input\"\"\"\n", "        X_temp = check_array(X, dtype=None)\n", "        if not hasattr(X, 'dtype') and np.issubdtype(X_temp.dtype, np.str_):\n", "            X = check_array(X, dtype=np.object)\n", "        else:\n", "            X = X_temp\n", "\n", "        n_samples, n_features = X.shape\n", "\n", "        X_int, X_mask = self._transform(X, handle_unknown=self.handle_unknown)\n", "\n", "        mask = X_mask.ravel()\n", "        n_values = [cats.shape[0] for cats in self.categories_]\n", "        n_values = np.array([0] + n_values)\n", "        feature_indices = np.cumsum(n_values)\n", "\n", "        indices = (X_int + feature_indices[:-1]).ravel()[mask]\n", "        indptr = X_mask.sum(axis=1).cumsum()\n", "        indptr = np.insert(indptr, 0, 0)\n", "        data = np.ones(n_samples * n_features)[mask]\n", "\n", "        out = sparse.csr_matrix((data, indices, indptr),\n", "                                shape=(n_samples, feature_indices[-1]),\n", "                                dtype=self.dtype)\n", "        if not self.sparse:\n", "            return out.toarray()\n", "        else:\n", "            return out\n"]}]}]}