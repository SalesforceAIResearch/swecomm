{"instance_id": "sphinx-doc__sphinx-8721", "identified_spans": [{"file_path": "sphinx/ext/viewcode.py", "span_ids": ["doctree_read"], "content": [{"span_id": "doctree_read", "start_line": 53, "end_line": 123, "content": ["def doctree_read(app: Sphinx, doctree: Node) -> None:\n", "    env = app.builder.env\n", "    if not hasattr(env, '_viewcode_modules'):\n", "        env._viewcode_modules = {}  # type: ignore\n", "    if app.builder.name == \"singlehtml\":\n", "        return\n", "    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n", "        return\n", "\n", "    def has_tag(modname: str, fullname: str, docname: str, refname: str) -> bool:\n", "        entry = env._viewcode_modules.get(modname, None)  # type: ignore\n", "        if entry is False:\n", "            return False\n", "\n", "        code_tags = app.emit_firstresult('viewcode-find-source', modname)\n", "        if code_tags is None:\n", "            try:\n", "                analyzer = ModuleAnalyzer.for_module(modname)\n", "                analyzer.find_tags()\n", "            except Exception:\n", "                env._viewcode_modules[modname] = False  # type: ignore\n", "                return False\n", "\n", "            code = analyzer.code\n", "            tags = analyzer.tags\n", "        else:\n", "            code, tags = code_tags\n", "\n", "        if entry is None or entry[0] != code:\n", "            entry = code, tags, {}, refname\n", "            env._viewcode_modules[modname] = entry  # type: ignore\n", "        _, tags, used, _ = entry\n", "        if fullname in tags:\n", "            used[fullname] = docname\n", "            return True\n", "\n", "        return False\n", "\n", "    for objnode in doctree.traverse(addnodes.desc):\n", "        if objnode.get('domain') != 'py':\n", "            continue\n", "        names = set()  # type: Set[str]\n", "        for signode in objnode:\n", "            if not isinstance(signode, addnodes.desc_signature):\n", "                continue\n", "            modname = signode.get('module')\n", "            fullname = signode.get('fullname')\n", "            refname = modname\n", "            if env.config.viewcode_follow_imported_members:\n", "                new_modname = app.emit_firstresult(\n", "                    'viewcode-follow-imported', modname, fullname,\n", "                )\n", "                if not new_modname:\n", "                    new_modname = _get_full_modname(app, modname, fullname)\n", "                modname = new_modname\n", "            if not modname:\n", "                continue\n", "            fullname = signode.get('fullname')\n", "            if not has_tag(modname, fullname, env.docname, refname):\n", "                continue\n", "            if fullname in names:\n", "                # only one link per name, please\n", "                continue\n", "            names.add(fullname)\n", "            pagename = posixpath.join(OUTPUT_DIRNAME, modname.replace('.', '/'))\n", "            inline = nodes.inline('', _('[source]'), classes=['viewcode-link'])\n", "            onlynode = addnodes.only(expr='html')\n", "            onlynode += addnodes.pending_xref('', inline, reftype='viewcode', refdomain='std',\n", "                                              refexplicit=False, reftarget=pagename,\n", "                                              refid=fullname, refdoc=env.docname)\n", "            signode += onlynode\n"]}]}]}