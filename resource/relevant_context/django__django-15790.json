{"instance_id": "django__django-15790", "identified_spans": [{"file_path": "django/core/checks/templates.py", "span_ids": ["check_for_template_tags_with_the_same_name"], "content": [{"span_id": "check_for_template_tags_with_the_same_name", "start_line": 50, "end_line": 75, "content": ["@register(Tags.templates)\n", "def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n", "    errors = []\n", "    libraries = defaultdict(list)\n", "\n", "    for conf in settings.TEMPLATES:\n", "        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n", "        for module_name, module_path in custom_libraries.items():\n", "            libraries[module_name].append(module_path)\n", "\n", "    for module_name, module_path in get_template_tag_modules():\n", "        libraries[module_name].append(module_path)\n", "\n", "    for library_name, items in libraries.items():\n", "        if len(items) > 1:\n", "            errors.append(\n", "                Error(\n", "                    E003.msg.format(\n", "                        repr(library_name),\n", "                        \", \".join(repr(item) for item in items),\n", "                    ),\n", "                    id=E003.id,\n", "                )\n", "            )\n", "\n", "    return errors\n"]}]}, {"file_path": "django/template/backends/django.py", "span_ids": ["get_package_libraries", "get_template_tag_modules"], "content": [{"span_id": "get_package_libraries", "start_line": 122, "end_line": 137, "content": ["def get_package_libraries(pkg):\n", "    \"\"\"\n", "    Recursively yield template tag libraries defined in submodules of a\n", "    package.\n", "    \"\"\"\n", "    for entry in walk_packages(pkg.__path__, pkg.__name__ + \".\"):\n", "        try:\n", "            module = import_module(entry[1])\n", "        except ImportError as e:\n", "            raise InvalidTemplateLibrary(\n", "                \"Invalid template library specified. ImportError raised when \"\n", "                \"trying to load '%s': %s\" % (entry[1], e)\n", "            ) from e\n", "\n", "        if hasattr(module, \"register\"):\n", "            yield entry[1]\n"]}, {"span_id": "get_template_tag_modules", "start_line": 88, "end_line": 107, "content": ["def get_template_tag_modules():\n", "    \"\"\"\n", "    Yield (module_name, module_path) pairs for all installed template tag\n", "    libraries.\n", "    \"\"\"\n", "    candidates = [\"django.templatetags\"]\n", "    candidates.extend(\n", "        f\"{app_config.name}.templatetags\" for app_config in apps.get_app_configs()\n", "    )\n", "\n", "    for candidate in candidates:\n", "        try:\n", "            pkg = import_module(candidate)\n", "        except ImportError:\n", "            # No templatetags package defined. This is safe to ignore.\n", "            continue\n", "\n", "        if hasattr(pkg, \"__path__\"):\n", "            for name in get_package_libraries(pkg):\n", "                yield name[len(candidate) + 1 :], name\n"]}]}]}