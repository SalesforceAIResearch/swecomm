{"instance_id": "sympy__sympy-14396", "identified_spans": [{"file_path": "sympy/polys/polyoptions.py", "span_ids": ["Domain.preprocess", "Domain"], "content": [{"span_id": "Domain.preprocess", "start_line": 412, "end_line": 483, "content": ["    @classmethod\n", "    def preprocess(cls, domain):\n", "        if isinstance(domain, sympy.polys.domains.Domain):\n", "            return domain\n", "        elif hasattr(domain, 'to_domain'):\n", "            return domain.to_domain()\n", "        elif isinstance(domain, string_types):\n", "            if domain in ['Z', 'ZZ']:\n", "                return sympy.polys.domains.ZZ\n", "\n", "            if domain in ['Q', 'QQ']:\n", "                return sympy.polys.domains.QQ\n", "\n", "            if domain == 'EX':\n", "                return sympy.polys.domains.EX\n", "\n", "            r = cls._re_realfield.match(domain)\n", "\n", "            if r is not None:\n", "                _, _, prec = r.groups()\n", "\n", "                if prec is None:\n", "                    return sympy.polys.domains.RR\n", "                else:\n", "                    return sympy.polys.domains.RealField(int(prec))\n", "\n", "            r = cls._re_complexfield.match(domain)\n", "\n", "            if r is not None:\n", "                _, _, prec = r.groups()\n", "\n", "                if prec is None:\n", "                    return sympy.polys.domains.CC\n", "                else:\n", "                    return sympy.polys.domains.ComplexField(int(prec))\n", "\n", "            r = cls._re_finitefield.match(domain)\n", "\n", "            if r is not None:\n", "                return sympy.polys.domains.FF(int(r.groups()[1]))\n", "\n", "            r = cls._re_polynomial.match(domain)\n", "\n", "            if r is not None:\n", "                ground, gens = r.groups()\n", "\n", "                gens = list(map(sympify, gens.split(',')))\n", "\n", "                if ground in ['Z', 'ZZ']:\n", "                    return sympy.polys.domains.ZZ.poly_ring(*gens)\n", "                else:\n", "                    return sympy.polys.domains.QQ.poly_ring(*gens)\n", "\n", "            r = cls._re_fraction.match(domain)\n", "\n", "            if r is not None:\n", "                ground, gens = r.groups()\n", "\n", "                gens = list(map(sympify, gens.split(',')))\n", "\n", "                if ground in ['Z', 'ZZ']:\n", "                    return sympy.polys.domains.ZZ.frac_field(*gens)\n", "                else:\n", "                    return sympy.polys.domains.QQ.frac_field(*gens)\n", "\n", "            r = cls._re_algebraic.match(domain)\n", "\n", "            if r is not None:\n", "                gens = list(map(sympify, r.groups()[1].split(',')))\n", "                return sympy.polys.domains.QQ.algebraic_field(*gens)\n", "\n", "        raise OptionError('expected a valid domain specification, got %s' % domain)\n"]}, {"span_id": "Domain", "start_line": 395, "end_line": 410, "content": ["class Domain(with_metaclass(OptionType, Option)):\n", "    \"\"\"``domain`` option to polynomial manipulation functions. \"\"\"\n", "\n", "    option = 'domain'\n", "\n", "    requires = []\n", "    excludes = ['field', 'greedy', 'split', 'gaussian', 'extension']\n", "\n", "    after = ['gens']\n", "\n", "    _re_realfield = re.compile(r\"^(R|RR)(_(\\d+))?$\")\n", "    _re_complexfield = re.compile(r\"^(C|CC)(_(\\d+))?$\")\n", "    _re_finitefield = re.compile(r\"^(FF|GF)\\((\\d+)\\)$\")\n", "    _re_polynomial = re.compile(r\"^(Z|ZZ|Q|QQ)\\[(.+)\\]$\")\n", "    _re_fraction = re.compile(r\"^(Z|ZZ|Q|QQ)\\((.+)\\)$\")\n", "    _re_algebraic = re.compile(r\"^(Q|QQ)\\<(.+)\\>$\")\n"]}]}]}