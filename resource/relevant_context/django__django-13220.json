{"instance_id": "django__django-13220", "identified_spans": [{"file_path": "django/core/exceptions.py", "span_ids": ["ValidationError", "ValidationError.messages", "ValidationError.__init__"], "content": [{"span_id": "ValidationError", "start_line": 99, "end_line": 100, "content": ["class ValidationError(Exception):\n", "    \"\"\"An error while validating data.\"\"\"\n"]}, {"span_id": "ValidationError.messages", "start_line": 152, "end_line": 156, "content": ["    @property\n", "    def messages(self):\n", "        if hasattr(self, 'error_dict'):\n", "            return sum(dict(self).values(), [])\n", "        return list(self)\n"]}, {"span_id": "ValidationError.__init__", "start_line": 101, "end_line": 142, "content": ["    def __init__(self, message, code=None, params=None):\n", "        \"\"\"\n", "        The `message` argument can be a single error, a list of errors, or a\n", "        dictionary that maps field names to lists of errors. What we define as\n", "        an \"error\" can be either a simple string or an instance of\n", "        ValidationError with its message attribute set, and what we define as\n", "        list or dictionary can be an actual `list` or `dict` or an instance\n", "        of ValidationError with its `error_list` or `error_dict` attribute set.\n", "        \"\"\"\n", "        super().__init__(message, code, params)\n", "\n", "        if isinstance(message, ValidationError):\n", "            if hasattr(message, 'error_dict'):\n", "                message = message.error_dict\n", "            elif not hasattr(message, 'message'):\n", "                message = message.error_list\n", "            else:\n", "                message, code, params = message.message, message.code, message.params\n", "\n", "        if isinstance(message, dict):\n", "            self.error_dict = {}\n", "            for field, messages in message.items():\n", "                if not isinstance(messages, ValidationError):\n", "                    messages = ValidationError(messages)\n", "                self.error_dict[field] = messages.error_list\n", "\n", "        elif isinstance(message, list):\n", "            self.error_list = []\n", "            for message in message:\n", "                # Normalize plain strings to instances of ValidationError.\n", "                if not isinstance(message, ValidationError):\n", "                    message = ValidationError(message)\n", "                if hasattr(message, 'error_dict'):\n", "                    self.error_list.extend(sum(message.error_dict.values(), []))\n", "                else:\n", "                    self.error_list.extend(message.error_list)\n", "\n", "        else:\n", "            self.message = message\n", "            self.code = code\n", "            self.params = params\n", "            self.error_list = [self]\n"]}]}]}