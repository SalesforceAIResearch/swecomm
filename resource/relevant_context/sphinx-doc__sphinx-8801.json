{"instance_id": "sphinx-doc__sphinx-8801", "identified_spans": [{"file_path": "sphinx/ext/autodoc/__init__.py", "span_ids": ["ClassDocumenter.get_object_members", "ClassDocumenter.filter_members"], "content": [{"span_id": "ClassDocumenter.get_object_members", "start_line": 1633, "end_line": 1650, "content": ["    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n", "        members = get_class_members(self.object, self.objpath, self.get_attr)\n", "        if not want_all:\n", "            if not self.options.members:\n", "                return False, []  # type: ignore\n", "            # specific members given\n", "            selected = []\n", "            for name in self.options.members:  # type: str\n", "                if name in members:\n", "                    selected.append(members[name])\n", "                else:\n", "                    logger.warning(__('missing attribute %s in object %s') %\n", "                                   (name, self.fullname), type='autodoc')\n", "            return False, selected\n", "        elif self.options.inherited_members:\n", "            return False, list(members.values())\n", "        else:\n", "            return False, [m for m in members.values() if m.class_ == self.object]\n"]}]}, {"file_path": "sphinx/ext/autodoc/importer.py", "span_ids": ["get_object_members"], "content": [{"span_id": "get_object_members", "start_line": 184, "end_line": 242, "content": ["def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,\n", "                       analyzer: ModuleAnalyzer = None) -> Dict[str, Attribute]:\n", "    \"\"\"Get members and attributes of target object.\"\"\"\n", "    from sphinx.ext.autodoc import INSTANCEATTR\n", "\n", "    # the members directly defined in the class\n", "    obj_dict = attrgetter(subject, '__dict__', {})\n", "\n", "    members = {}  # type: Dict[str, Attribute]\n", "\n", "    # enum members\n", "    if isenumclass(subject):\n", "        for name, value in subject.__members__.items():\n", "            if name not in members:\n", "                members[name] = Attribute(name, True, value)\n", "\n", "        superclass = subject.__mro__[1]\n", "        for name in obj_dict:\n", "            if name not in superclass.__dict__:\n", "                value = safe_getattr(subject, name)\n", "                members[name] = Attribute(name, True, value)\n", "\n", "    # members in __slots__\n", "    try:\n", "        __slots__ = getslots(subject)\n", "        if __slots__:\n", "            from sphinx.ext.autodoc import SLOTSATTR\n", "\n", "            for name in __slots__:\n", "                members[name] = Attribute(name, True, SLOTSATTR)\n", "    except (TypeError, ValueError):\n", "        pass\n", "\n", "    # other members\n", "    for name in dir(subject):\n", "        try:\n", "            value = attrgetter(subject, name)\n", "            directly_defined = name in obj_dict\n", "            name = unmangle(subject, name)\n", "            if name and name not in members:\n", "                members[name] = Attribute(name, directly_defined, value)\n", "        except AttributeError:\n", "            continue\n", "\n", "    # annotation only member (ex. attr: int)\n", "    for i, cls in enumerate(getmro(subject)):\n", "        for name in getannotations(cls):\n", "            name = unmangle(cls, name)\n", "            if name and name not in members:\n", "                members[name] = Attribute(name, i == 0, INSTANCEATTR)\n", "\n", "    if analyzer:\n", "        # append instance attributes (cf. self.attr1) if analyzer knows\n", "        namespace = '.'.join(objpath)\n", "        for (ns, name) in analyzer.find_attr_docs():\n", "            if namespace == ns and name not in members:\n", "                members[name] = Attribute(name, True, INSTANCEATTR)\n", "\n", "    return members\n"]}]}]}