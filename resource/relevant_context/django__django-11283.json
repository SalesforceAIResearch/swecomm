{"instance_id": "django__django-11283", "identified_spans": [{"file_path": "django/contrib/auth/migrations/0011_update_proxy_permissions.py", "span_ids": ["update_proxy_model_permissions", "Migration"], "content": [{"span_id": "update_proxy_model_permissions", "start_line": 5, "end_line": 30, "content": ["def update_proxy_model_permissions(apps, schema_editor, reverse=False):\n", "    \"\"\"\n", "    Update the content_type of proxy model permissions to use the ContentType\n", "    of the proxy model.\n", "    \"\"\"\n", "    Permission = apps.get_model('auth', 'Permission')\n", "    ContentType = apps.get_model('contenttypes', 'ContentType')\n", "    for Model in apps.get_models():\n", "        opts = Model._meta\n", "        if not opts.proxy:\n", "            continue\n", "        proxy_default_permissions_codenames = [\n", "            '%s_%s' % (action, opts.model_name)\n", "            for action in opts.default_permissions\n", "        ]\n", "        permissions_query = Q(codename__in=proxy_default_permissions_codenames)\n", "        for codename, name in opts.permissions:\n", "            permissions_query = permissions_query | Q(codename=codename, name=name)\n", "        concrete_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=True)\n", "        proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)\n", "        old_content_type = proxy_content_type if reverse else concrete_content_type\n", "        new_content_type = concrete_content_type if reverse else proxy_content_type\n", "        Permission.objects.filter(\n", "            permissions_query,\n", "            content_type=old_content_type,\n", "        ).update(content_type=new_content_type)\n"]}, {"span_id": "Migration", "start_line": 41, "end_line": 48, "content": ["class Migration(migrations.Migration):\n", "    dependencies = [\n", "        ('auth', '0010_alter_group_name_max_length'),\n", "        ('contenttypes', '0002_remove_content_type_name'),\n", "    ]\n", "    operations = [\n", "        migrations.RunPython(update_proxy_model_permissions, revert_proxy_model_permissions),\n", "    ]\n"]}]}, {"file_path": "django/contrib/auth/models.py", "span_ids": ["Permission"], "content": [{"span_id": "Permission", "start_line": 33, "end_line": 64, "content": ["class Permission(models.Model):\n", "    \"\"\"\n", "    The permissions system provides a way to assign permissions to specific\n", "    users and groups of users.\n", "\n", "    The permission system is used by the Django admin site, but may also be\n", "    useful in your own code. The Django admin site uses permissions as follows:\n", "\n", "        - The \"add\" permission limits the user's ability to view the \"add\" form\n", "          and add an object.\n", "        - The \"change\" permission limits a user's ability to view the change\n", "          list, view the \"change\" form and change an object.\n", "        - The \"delete\" permission limits the ability to delete an object.\n", "        - The \"view\" permission limits the ability to view an object.\n", "\n", "    Permissions are set globally per type of object, not per specific object\n", "    instance. It is possible to say \"Mary may change news stories,\" but it's\n", "    not currently possible to say \"Mary may change news stories, but only the\n", "    ones she created herself\" or \"Mary may only change news stories that have a\n", "    certain status or publication date.\"\n", "\n", "    The permissions listed above are automatically created for each model.\n", "    \"\"\"\n", "    name = models.CharField(_('name'), max_length=255)\n", "    content_type = models.ForeignKey(\n", "        ContentType,\n", "        models.CASCADE,\n", "        verbose_name=_('content type'),\n", "    )\n", "    codename = models.CharField(_('codename'), max_length=100)\n", "\n", "    objects = PermissionManager()\n"]}]}, {"file_path": "django/contrib/contenttypes/models.py", "span_ids": ["ContentType", "ContentTypeManager"], "content": [{"span_id": "ContentType", "start_line": 133, "end_line": 136, "content": ["class ContentType(models.Model):\n", "    app_label = models.CharField(max_length=100)\n", "    model = models.CharField(_('python model class name'), max_length=100)\n", "    objects = ContentTypeManager()\n"]}, {"span_id": "ContentTypeManager", "start_line": 8, "end_line": 9, "content": ["class ContentTypeManager(models.Manager):\n", "    use_in_migrations = True\n"]}]}]}