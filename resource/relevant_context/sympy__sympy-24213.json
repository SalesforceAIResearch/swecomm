{"instance_id": "sympy__sympy-24213", "identified_spans": [{"file_path": "sympy/physics/units/unitsystem.py", "span_ids": ["UnitSystem._collect_factor_and_dimension"], "content": [{"span_id": "UnitSystem._collect_factor_and_dimension", "start_line": 152, "end_line": 199, "content": ["    def _collect_factor_and_dimension(self, expr):\n", "        \"\"\"\n", "        Return tuple with scale factor expression and dimension expression.\n", "        \"\"\"\n", "        from sympy.physics.units import Quantity\n", "        if isinstance(expr, Quantity):\n", "            return expr.scale_factor, expr.dimension\n", "        elif isinstance(expr, Mul):\n", "            factor = 1\n", "            dimension = Dimension(1)\n", "            for arg in expr.args:\n", "                arg_factor, arg_dim = self._collect_factor_and_dimension(arg)\n", "                factor *= arg_factor\n", "                dimension *= arg_dim\n", "            return factor, dimension\n", "        elif isinstance(expr, Pow):\n", "            factor, dim = self._collect_factor_and_dimension(expr.base)\n", "            exp_factor, exp_dim = self._collect_factor_and_dimension(expr.exp)\n", "            if self.get_dimension_system().is_dimensionless(exp_dim):\n", "                exp_dim = 1\n", "            return factor ** exp_factor, dim ** (exp_factor * exp_dim)\n", "        elif isinstance(expr, Add):\n", "            factor, dim = self._collect_factor_and_dimension(expr.args[0])\n", "            for addend in expr.args[1:]:\n", "                addend_factor, addend_dim = \\\n", "                    self._collect_factor_and_dimension(addend)\n", "                if dim != addend_dim:\n", "                    raise ValueError(\n", "                        'Dimension of \"{}\" is {}, '\n", "                        'but it should be {}'.format(\n", "                            addend, addend_dim, dim))\n", "                factor += addend_factor\n", "            return factor, dim\n", "        elif isinstance(expr, Derivative):\n", "            factor, dim = self._collect_factor_and_dimension(expr.args[0])\n", "            for independent, count in expr.variable_count:\n", "                ifactor, idim = self._collect_factor_and_dimension(independent)\n", "                factor /= ifactor**count\n", "                dim /= idim**count\n", "            return factor, dim\n", "        elif isinstance(expr, Function):\n", "            fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]\n", "            dims = [Dimension(1) if self.get_dimension_system().is_dimensionless(d[1]) else d[1] for d in fds]\n", "            return (expr.func(*(f[0] for f in fds)), *dims)\n", "        elif isinstance(expr, Dimension):\n", "            return S.One, expr\n", "        else:\n", "            return expr, Dimension(1)\n"]}]}]}