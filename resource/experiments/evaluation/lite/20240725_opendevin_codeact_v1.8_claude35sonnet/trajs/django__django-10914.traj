{
    "instance_id": "django__django-10914",
    "traj": [
        [
            {
                "id": 0,
                "timestamp": "2024-07-16T18:12:14.341259",
                "source": "user",
                "message": "Please fix the following issue for the repository in /workspace/django__django__3.0.\nEnvironment has been set up for you to start working. You may assume all necessary tools are installed.\n\n# Problem Statement\nSet default FILE_UPLOAD_PERMISSION to 0o644.\nDescription\n\t\nHello,\nAs far as I can see, the \u200bFile Uploads documentation page does not mention any permission issues.\nWhat I would like to see is a warning that in absence of explicitly configured FILE_UPLOAD_PERMISSIONS, the permissions for a file uploaded to FileSystemStorage might not be consistent depending on whether a MemoryUploadedFile or a TemporaryUploadedFile was used for temporary storage of the uploaded data (which, with the default FILE_UPLOAD_HANDLERS, in turn depends on the uploaded data size).\nThe tempfile.NamedTemporaryFile + os.rename sequence causes the resulting file permissions to be 0o0600 on some systems (I experience it here on CentOS 7.4.1708 and Python 3.6.5). In all probability, the implementation of Python's built-in tempfile module explicitly sets such permissions for temporary files due to security considerations.\nI found mentions of this issue \u200bon GitHub, but did not manage to find any existing bug report in Django's bug tracker.\n\n\nIMPORTANT: You should ONLY interact with the environment provided to you AND NEVER ASK FOR HUMAN HELP.\nYou should NOT modify any existing test case files. If needed, you can add new test cases in a NEW file to reproduce the issue.\nYou SHOULD INCLUDE PROPER INDENTATION in your edit commands.\nWhen you think you have fixed the issue through code changes, please run the following command: <execute_bash> exit </execute_bash>.\n",
                "action": "message",
                "args": {
                    "content": "Please fix the following issue for the repository in /workspace/django__django__3.0.\nEnvironment has been set up for you to start working. You may assume all necessary tools are installed.\n\n# Problem Statement\nSet default FILE_UPLOAD_PERMISSION to 0o644.\nDescription\n\t\nHello,\nAs far as I can see, the \u200bFile Uploads documentation page does not mention any permission issues.\nWhat I would like to see is a warning that in absence of explicitly configured FILE_UPLOAD_PERMISSIONS, the permissions for a file uploaded to FileSystemStorage might not be consistent depending on whether a MemoryUploadedFile or a TemporaryUploadedFile was used for temporary storage of the uploaded data (which, with the default FILE_UPLOAD_HANDLERS, in turn depends on the uploaded data size).\nThe tempfile.NamedTemporaryFile + os.rename sequence causes the resulting file permissions to be 0o0600 on some systems (I experience it here on CentOS 7.4.1708 and Python 3.6.5). In all probability, the implementation of Python's built-in tempfile module explicitly sets such permissions for temporary files due to security considerations.\nI found mentions of this issue \u200bon GitHub, but did not manage to find any existing bug report in Django's bug tracker.\n\n\nIMPORTANT: You should ONLY interact with the environment provided to you AND NEVER ASK FOR HUMAN HELP.\nYou should NOT modify any existing test case files. If needed, you can add new test cases in a NEW file to reproduce the issue.\nYou SHOULD INCLUDE PROPER INDENTATION in your edit commands.\nWhen you think you have fixed the issue through code changes, please run the following command: <execute_bash> exit </execute_bash>.\n",
                    "wait_for_response": false
                }
            },
            {
                "message": "No observation",
                "observation": "null",
                "content": "",
                "extras": {}
            }
        ],
        [
            {
                "id": 3,
                "timestamp": "2024-07-16T18:12:17.868385",
                "source": "agent",
                "message": "Running command: grep -r \"FILE_UPLOAD_PERMISSION\" /workspace/django__django__3.0",
                "action": "run",
                "args": {
                    "command": "grep -r \"FILE_UPLOAD_PERMISSION\" /workspace/django__django__3.0",
                    "thought": "Certainly! I'll investigate the issue and make the necessary changes to set the default FILE_UPLOAD_PERMISSION to 0o644. Let's start by examining the relevant files.\n\nFirst, let's check the current implementation:",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 4,
                "timestamp": "2024-07-16T18:12:18.238162",
                "source": "agent",
                "message": "Command `grep -r \"FILE_UPLOAD_PERMISSION\" /workspace/django__django__3.0` executed with exit code 0.",
                "cause": 3,
                "observation": "run",
                "content": "/workspace/django__django__3.0/django/conf/global_settings.py:FILE_UPLOAD_PERMISSIONS = None\r\n/workspace/django__django__3.0/django/core/files/storage.py:        elif setting == 'FILE_UPLOAD_PERMISSIONS':\r\n/workspace/django__django__3.0/django/core/files/storage.py:        return self._value_or_setting(self._file_permissions_mode, settings.FILE_UPLOAD_PERMISSIONS)\r\n/workspace/django__django__3.0/docs/ref/contrib/staticfiles.txt::setting:`FILE_UPLOAD_PERMISSIONS` and collected directories receive permissions\r\n/workspace/django__django__3.0/docs/ref/files/storage.txt:        saved. Defaults to :setting:`FILE_UPLOAD_PERMISSIONS`.\r\n/workspace/django__django__3.0/docs/ref/settings.txt::setting:`FILE_UPLOAD_PERMISSIONS` setting.\r\n/workspace/django__django__3.0/docs/ref/settings.txt:.. setting:: FILE_UPLOAD_PERMISSIONS\r\n/workspace/django__django__3.0/docs/ref/settings.txt:``FILE_UPLOAD_PERMISSIONS``\r\n/workspace/django__django__3.0/docs/ref/settings.txt:* :setting:`FILE_UPLOAD_PERMISSIONS`\r\n/workspace/django__django__3.0/docs/releases/1.11.txt:  (often ``0o6644``). Set the :setting:`FILE_UPLOAD_PERMISSIONS` if you need\r\n/workspace/django__django__3.0/docs/releases/1.7.txt:  :setting:`FILE_UPLOAD_PERMISSIONS` does for the files themselves.\r\n/workspace/django__django__3.0/docs/releases/1.5.txt:  them to be executable change :setting:`FILE_UPLOAD_PERMISSIONS` to your\r\n/workspace/django__django__3.0/docs/howto/deployment/checklist.txt::setting:`FILE_UPLOAD_PERMISSIONS`\r\n/workspace/django__django__3.0/docs/howto/deployment/checklist.txt:than larger files as described in :setting:`FILE_UPLOAD_PERMISSIONS`.\r\n/workspace/django__django__3.0/docs/howto/deployment/checklist.txt:Setting :setting:`FILE_UPLOAD_PERMISSIONS` ensures all files are uploaded with\r\n/workspace/django__django__3.0/tests/staticfiles_tests/test_storage.py:        FILE_UPLOAD_PERMISSIONS=0o655,\r\n/workspace/django__django__3.0/tests/staticfiles_tests/test_storage.py:        FILE_UPLOAD_PERMISSIONS=None,\r\n/workspace/django__django__3.0/tests/staticfiles_tests/test_storage.py:        FILE_UPLOAD_PERMISSIONS=0o655,\r\n/workspace/django__django__3.0/tests/test_utils/tests.py:        Overriding the FILE_UPLOAD_PERMISSIONS setting should be reflected in\r\n/workspace/django__django__3.0/tests/test_utils/tests.py:        with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\r\n/workspace/django__django__3.0/tests/file_storage/tests.py:        FILE_UPLOAD_PERMISSIONS=0o777,\r\n/workspace/django__django__3.0/tests/file_storage/tests.py:            'FILE_UPLOAD_PERMISSIONS': 0o333,\r\n/workspace/django__django__3.0/tests/file_storage/tests.py:            self.assertEqual(defaults_storage.file_permissions_mode, settings['FILE_UPLOAD_PERMISSIONS'])\r\n/workspace/django__django__3.0/tests/file_storage/tests.py:    @override_settings(FILE_UPLOAD_PERMISSIONS=0o654)\r\n/workspace/django__django__3.0/tests/file_storage/tests.py:    @override_settings(FILE_UPLOAD_PERMISSIONS=None)",
                "extras": {
                    "command_id": -1,
                    "command": "grep -r \"FILE_UPLOAD_PERMISSION\" /workspace/django__django__3.0",
                    "exit_code": 0
                }
            }
        ],
        [
            {
                "id": 5,
                "timestamp": "2024-07-16T18:12:20.697516",
                "source": "agent",
                "message": "Running Python code interactively: open_file('/workspace/django__django__3.0/django/conf/global_settings.py')",
                "action": "run_ipython",
                "args": {
                    "code": "open_file('/workspace/django__django__3.0/django/conf/global_settings.py')",
                    "thought": "Thank you for the information. I can see that the FILE_UPLOAD_PERMISSIONS setting is defined in the global_settings.py file. Let's modify this file to set the default value to 0o644.\n\nFirst, let's open the file:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 6,
                "timestamp": "2024-07-16T18:12:21.157465",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 5,
                "observation": "run_ipython",
                "content": "[File: /workspace/django__django__3.0/django/conf/global_settings.py (634 lines total)]\r\n(this is the beginning of the file)\r\n1|\"\"\"\r\n2|Default Django settings. Override these with settings in the module pointed to\r\n3|by the DJANGO_SETTINGS_MODULE environment variable.\r\n4|\"\"\"\r\n5|\r\n6|\r\n7|# This is defined here as a do-nothing function because we can't import\r\n8|# django.utils.translation -- that module depends on the settings.\r\n9|def gettext_noop(s):\r\n10|    return s\r\n11|\r\n12|\r\n13|####################\r\n14|# CORE             #\r\n15|####################\r\n16|\r\n17|DEBUG = False\r\n18|\r\n19|# Whether the framework should propagate raw exceptions rather than catching\r\n20|# them. This is useful under some testing situations and should never be used\r\n21|# on a live site.\r\n22|DEBUG_PROPAGATE_EXCEPTIONS = False\r\n23|\r\n24|# People who get code error notifications.\r\n25|# In the format [('Full Name', 'email@example.com'), ('Full Name', 'anotheremail@example.com')]\r\n26|ADMINS = []\r\n27|\r\n28|# List of IP addresses, as strings, that:\r\n29|#   * See debug comments, when DEBUG is true\r\n30|#   * Receive x-headers\r\n31|INTERNAL_IPS = []\r\n32|\r\n33|# Hosts/domain names that are valid for this site.\r\n34|# \"*\" matches anything, \".example.com\" matches example.com and all subdomains\r\n35|ALLOWED_HOSTS = []\r\n36|\r\n37|# Local time zone for this installation. All choices can be found here:\r\n38|# https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all\r\n39|# systems may support all possibilities). When USE_TZ is True, this is\r\n40|# interpreted as the default user time zone.\r\n41|TIME_ZONE = 'America/Chicago'\r\n42|\r\n43|# If you set this to True, Django will use timezone-aware datetimes.\r\n44|USE_TZ = False\r\n45|\r\n46|# Language code for this installation. All choices can be found here:\r\n47|# http://www.i18nguy.com/unicode/language-identifiers.html\r\n48|LANGUAGE_CODE = 'en-us'\r\n49|\r\n50|# Languages we provide translations for, out of the box.\r\n51|LANGUAGES = [\r\n52|    ('af', gettext_noop('Afrikaans')),\r\n53|    ('ar', gettext_noop('Arabic')),\r\n54|    ('ast', gettext_noop('Asturian')),\r\n55|    ('az', gettext_noop('Azerbaijani')),\r\n56|    ('bg', gettext_noop('Bulgarian')),\r\n57|    ('be', gettext_noop('Belarusian')),\r\n58|    ('bn', gettext_noop('Bengali')),\r\n59|    ('br', gettext_noop('Breton')),\r\n60|    ('bs', gettext_noop('Bosnian')),\r\n61|    ('ca', gettext_noop('Catalan')),\r\n62|    ('cs', gettext_noop('Czech')),\r\n63|    ('cy', gettext_noop('Welsh')),\r\n64|    ('da', gettext_noop('Danish')),\r\n65|    ('de', gettext_noop('German')),\r\n66|    ('dsb', gettext_noop('Lower Sorbian')),\r\n67|    ('el', gettext_noop('Greek')),\r\n68|    ('en', gettext_noop('English')),\r\n69|    ('en-au', gettext_noop('Australian English')),\r\n70|    ('en-gb', gettext_noop('British English')),\r\n71|    ('eo', gettext_noop('Esperanto')),\r\n72|    ('es', gettext_noop('Spanish')),\r\n73|    ('es-ar', gettext_noop('Argentinian Spanish')),\r\n74|    ('es-co', gettext_noop('Colombian Spanish')),\r\n75|    ('es-mx', gettext_noop('Mexican Spanish')),\r\n76|    ('es-ni', gettext_noop('Nicaraguan Spanish')),\r\n77|    ('es-ve', gettext_noop('Venezuelan Spanish')),\r\n78|    ('et', gettext_noop('Estonian')),\r\n79|    ('eu', gettext_noop('Basque')),\r\n80|    ('fa', gettext_noop('Persian')),\r\n81|    ('fi', gettext_noop('Finnish')),\r\n82|    ('fr', gettext_noop('French')),\r\n83|    ('fy', gettext_noop('Frisian')),\r\n84|    ('ga', gettext_noop('Irish')),\r\n85|    ('gd', gettext_noop('Scottish Gaelic')),\r\n86|    ('gl', gettext_noop('Galician')),\r\n87|    ('he', gettext_noop('Hebrew')),\r\n88|    ('hi', gettext_noop('Hindi')),\r\n89|    ('hr', gettext_noop('Croatian')),\r\n90|    ('hsb', gettext_noop('Upper Sorbian')),\r\n91|    ('hu', gettext_noop('Hungarian')),\r\n92|    ('hy', gettext_noop('Armenian')),\r\n93|    ('ia', gettext_noop('Interlingua')),\r\n94|    ('id', gettext_noop('Indonesian')),\r\n95|    ('io', gettext_noop('Ido')),\r\n96|    ('is', gettext_noop('Icelandic')),\r\n97|    ('it', gettext_noop('Italian')),\r\n98|    ('ja', gettext_noop('Japanese')),\r\n99|    ('ka', gettext_noop('Georgian')),\r\n100|    ('kab', gettext_noop('Kabyle')),\r\n(534 more lines below)\r\n",
                "extras": {
                    "code": "open_file('/workspace/django__django__3.0/django/conf/global_settings.py')"
                }
            }
        ],
        [
            {
                "id": 7,
                "timestamp": "2024-07-16T18:12:24.284727",
                "source": "agent",
                "message": "Running Python code interactively: search_file(\"FILE_UPLOAD_PERMISSIONS\", \"/workspace/django__django__3.0/django/conf/global_settings.py\")",
                "action": "run_ipython",
                "args": {
                    "code": "search_file(\"FILE_UPLOAD_PERMISSIONS\", \"/workspace/django__django__3.0/django/conf/global_settings.py\")",
                    "thought": "Thank you for showing me the file. Now, let's find the line where FILE_UPLOAD_PERMISSIONS is defined and modify it to set the default value to 0o644.",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 8,
                "timestamp": "2024-07-16T18:12:24.744656",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 7,
                "observation": "run_ipython",
                "content": "[Found 1 matches for \"FILE_UPLOAD_PERMISSIONS\" in /workspace/django__django__3.0/django/conf/global_settings.py]\r\nLine 307: FILE_UPLOAD_PERMISSIONS = None\r\n[End of matches for \"FILE_UPLOAD_PERMISSIONS\" in /workspace/django__django__3.0/django/conf/global_settings.py]\r\n",
                "extras": {
                    "code": "search_file(\"FILE_UPLOAD_PERMISSIONS\", \"/workspace/django__django__3.0/django/conf/global_settings.py\")"
                }
            }
        ],
        [
            {
                "id": 9,
                "timestamp": "2024-07-16T18:12:27.419253",
                "source": "agent",
                "message": "Running Python code interactively: edit_file_by_replace(\n    '/workspace/django__django__3.0/django/conf/global_settings.py',\n    to_replace='FILE_UPLOAD_PERMISSIONS = None',\n    new_content='FILE_UPLOAD_PERMISSIONS = 0o644'\n)",
                "action": "run_ipython",
                "args": {
                    "code": "edit_file_by_replace(\n    '/workspace/django__django__3.0/django/conf/global_settings.py',\n    to_replace='FILE_UPLOAD_PERMISSIONS = None',\n    new_content='FILE_UPLOAD_PERMISSIONS = 0o644'\n)",
                    "thought": "Thank you for the information. Now, let's modify the FILE_UPLOAD_PERMISSIONS setting to set the default value to 0o644.",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 10,
                "timestamp": "2024-07-16T18:12:27.974447",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 9,
                "observation": "run_ipython",
                "content": "[File: /workspace/django__django__3.0/django/conf/global_settings.py (634 lines total after edit)]\r\n(256 more lines above)\r\n257|\r\n258|# A secret key for this particular Django installation. Used in secret-key\r\n259|# hashing algorithms. Set this in your settings, or Django will complain\r\n260|# loudly.\r\n261|SECRET_KEY = ''\r\n262|\r\n263|# Default file storage mechanism that holds media.\r\n264|DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'\r\n265|\r\n266|# Absolute filesystem path to the directory that will hold user-uploaded files.\r\n267|# Example: \"/var/www/example.com/media/\"\r\n268|MEDIA_ROOT = ''\r\n269|\r\n270|# URL that handles the media served from MEDIA_ROOT.\r\n271|# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\r\n272|MEDIA_URL = ''\r\n273|\r\n274|# Absolute path to the directory static files should be collected to.\r\n275|# Example: \"/var/www/example.com/static/\"\r\n276|STATIC_ROOT = None\r\n277|\r\n278|# URL that handles the static files served from STATIC_ROOT.\r\n279|# Example: \"http://example.com/static/\", \"http://static.example.com/\"\r\n280|STATIC_URL = None\r\n281|\r\n282|# List of upload handler classes to be applied in order.\r\n283|FILE_UPLOAD_HANDLERS = [\r\n284|    'django.core.files.uploadhandler.MemoryFileUploadHandler',\r\n285|    'django.core.files.uploadhandler.TemporaryFileUploadHandler',\r\n286|]\r\n287|\r\n288|# Maximum size, in bytes, of a request before it will be streamed to the\r\n289|# file system instead of into memory.\r\n290|FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\r\n291|\r\n292|# Maximum size in bytes of request data (excluding file uploads) that will be\r\n293|# read before a SuspiciousOperation (RequestDataTooBig) is raised.\r\n294|DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\r\n295|\r\n296|# Maximum number of GET/POST parameters that will be read before a\r\n297|# SuspiciousOperation (TooManyFieldsSent) is raised.\r\n298|DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\r\n299|\r\n300|# Directory in which upload streamed files will be temporarily saved. A value of\r\n301|# `None` will make Django use the operating system's default temporary directory\r\n302|# (i.e. \"/tmp\" on *nix systems).\r\n303|FILE_UPLOAD_TEMP_DIR = None\r\n304|\r\n305|# The numeric mode to set newly-uploaded files to. The value should be a mode\r\n306|# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\r\n307|FILE_UPLOAD_PERMISSIONS = 0o644\r\n308|\r\n309|# The numeric mode to assign to newly-created directories, when uploading files.\r\n310|# The value should be a mode as you'd pass to os.chmod;\r\n311|# see https://docs.python.org/library/os.html#files-and-directories.\r\n312|FILE_UPLOAD_DIRECTORY_PERMISSIONS = None\r\n313|\r\n314|# Python module path where user will place custom format definition.\r\n315|# The directory where this setting is pointing should contain subdirectories\r\n316|# named as the locales, containing a formats.py file\r\n317|# (i.e. \"myproject.locale\" for myproject/locale/en/formats.py etc. use)\r\n318|FORMAT_MODULE_PATH = None\r\n319|\r\n320|# Default formatting for date objects. See all available format strings here:\r\n321|# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\r\n322|DATE_FORMAT = 'N j, Y'\r\n323|\r\n324|# Default formatting for datetime objects. See all available format strings here:\r\n325|# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\r\n326|DATETIME_FORMAT = 'N j, Y, P'\r\n327|\r\n328|# Default formatting for time objects. See all available format strings here:\r\n329|# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\r\n330|TIME_FORMAT = 'P'\r\n331|\r\n332|# Default formatting for date objects when only the year and month are relevant.\r\n333|# See all available format strings here:\r\n334|# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\r\n335|YEAR_MONTH_FORMAT = 'F Y'\r\n336|\r\n337|# Default formatting for date objects when only the month and day are relevant.\r\n338|# See all available format strings here:\r\n339|# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\r\n340|MONTH_DAY_FORMAT = 'F j'\r\n341|\r\n342|# Default short formatting for date objects. See all available format strings here:\r\n343|# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\r\n344|SHORT_DATE_FORMAT = 'm/d/Y'\r\n345|\r\n346|# Default short formatting for datetime objects.\r\n347|# See all available format strings here:\r\n348|# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\r\n349|SHORT_DATETIME_FORMAT = 'm/d/Y P'\r\n350|\r\n351|# Default formats to be used when parsing dates from input boxes, in order\r\n352|# See all available format string here:\r\n353|# https://docs.python.org/library/datetime.html#strftime-behavior\r\n354|# * Note that these format strings are different from the ones to display dates\r\n355|DATE_INPUT_FORMATS = [\r\n356|    '%Y-%m-%d', '%m/%d/%Y', '%m/%d/%y',  # '2006-10-25', '10/25/2006', '10/25/06'\r\n357|    '%b %d %Y', '%b %d, %Y',             # 'Oct 25 2006', 'Oct 25, 2006'\r\n(277 more lines below)\r\n[File updated (edited at line 307). Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.]\r\n",
                "extras": {
                    "code": "edit_file_by_replace(\n    '/workspace/django__django__3.0/django/conf/global_settings.py',\n    to_replace='FILE_UPLOAD_PERMISSIONS = None',\n    new_content='FILE_UPLOAD_PERMISSIONS = 0o644'\n)"
                }
            }
        ],
        [
            {
                "id": 11,
                "timestamp": "2024-07-16T18:12:31.140365",
                "source": "agent",
                "message": "Running Python code interactively: open_file('/workspace/django__django__3.0/docs/topics/files.txt')",
                "action": "run_ipython",
                "args": {
                    "code": "open_file('/workspace/django__django__3.0/docs/topics/files.txt')",
                    "thought": "The change has been successfully made. Now, let's update the documentation to include a warning about the permission issues when FILE_UPLOAD_PERMISSIONS is not explicitly set.\n\nLet's open the File Uploads documentation page:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 12,
                "timestamp": "2024-07-16T18:12:31.592511",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 11,
                "observation": "run_ipython",
                "content": "[File: /workspace/django__django__3.0/docs/topics/files.txt (183 lines total)]\r\n(this is the beginning of the file)\r\n1|==============\r\n2|Managing files\r\n3|==============\r\n4|\r\n5|This document describes Django's file access APIs for files such as those\r\n6|uploaded by a user. The lower level APIs are general enough that you could use\r\n7|them for other purposes. If you want to handle \"static files\" (JS, CSS, etc.),\r\n8|see :doc:`/howto/static-files/index`.\r\n9|\r\n10|By default, Django stores files locally, using the :setting:`MEDIA_ROOT` and\r\n11|:setting:`MEDIA_URL` settings. The examples below assume that you're using these\r\n12|defaults.\r\n13|\r\n14|However, Django provides ways to write custom `file storage systems`_ that\r\n15|allow you to completely customize where and how Django stores files. The\r\n16|second half of this document describes how these storage systems work.\r\n17|\r\n18|.. _file storage systems: `File storage`_\r\n19|\r\n20|Using files in models\r\n21|=====================\r\n22|\r\n23|When you use a :class:`~django.db.models.FileField` or\r\n24|:class:`~django.db.models.ImageField`, Django provides a set of APIs you can use\r\n25|to deal with that file.\r\n26|\r\n27|Consider the following model, using an :class:`~django.db.models.ImageField` to\r\n28|store a photo::\r\n29|\r\n30|    from django.db import models\r\n31|\r\n32|    class Car(models.Model):\r\n33|        name = models.CharField(max_length=255)\r\n34|        price = models.DecimalField(max_digits=5, decimal_places=2)\r\n35|        photo = models.ImageField(upload_to='cars')\r\n36|\r\n37|Any ``Car`` instance will have a ``photo`` attribute that you can use to get at\r\n38|the details of the attached photo::\r\n39|\r\n40|    >>> car = Car.objects.get(name=\"57 Chevy\")\r\n41|    >>> car.photo\r\n42|    <ImageFieldFile: chevy.jpg>\r\n43|    >>> car.photo.name\r\n44|    'cars/chevy.jpg'\r\n45|    >>> car.photo.path\r\n46|    '/media/cars/chevy.jpg'\r\n47|    >>> car.photo.url\r\n48|    'http://media.example.com/cars/chevy.jpg'\r\n49|\r\n50|This object -- ``car.photo`` in the example -- is a ``File`` object, which means\r\n51|it has all the methods and attributes described below.\r\n52|\r\n53|.. note::\r\n54|    The file is saved as part of saving the model in the database, so the actual\r\n55|    file name used on disk cannot be relied on until after the model has been\r\n56|    saved.\r\n57|\r\n58|For example, you can change the file name by setting the file's\r\n59|:attr:`~django.core.files.File.name` to a path relative to the file storage's\r\n60|location (:setting:`MEDIA_ROOT` if you are using the default\r\n61|:class:`~django.core.files.storage.FileSystemStorage`)::\r\n62|\r\n63|    >>> import os\r\n64|    >>> from django.conf import settings\r\n65|    >>> initial_path = car.photo.path\r\n66|    >>> car.photo.name = 'cars/chevy_ii.jpg'\r\n67|    >>> new_path = settings.MEDIA_ROOT + car.photo.name\r\n68|    >>> # Move the file on the filesystem\r\n69|    >>> os.rename(initial_path, new_path)\r\n70|    >>> car.save()\r\n71|    >>> car.photo.path\r\n72|    '/media/cars/chevy_ii.jpg'\r\n73|    >>> car.photo.path == new_path\r\n74|    True\r\n75|\r\n76|The ``File`` object\r\n77|===================\r\n78|\r\n79|Internally, Django uses a :class:`django.core.files.File` instance any time it\r\n80|needs to represent a file.\r\n81|\r\n82|Most of the time you'll simply use a ``File`` that Django's given you (i.e. a\r\n83|file attached to a model as above, or perhaps an uploaded file).\r\n84|\r\n85|If you need to construct a ``File`` yourself, the easiest way is to create one\r\n86|using a Python built-in ``file`` object::\r\n87|\r\n88|    >>> from django.core.files import File\r\n89|\r\n90|    # Create a Python file object using open()\r\n91|    >>> f = open('/path/to/hello.world', 'w')\r\n92|    >>> myfile = File(f)\r\n93|\r\n94|Now you can use any of the documented attributes and methods\r\n95|of the :class:`~django.core.files.File` class.\r\n96|\r\n97|Be aware that files created in this way are not automatically closed.\r\n98|The following approach may be used to close files automatically::\r\n99|\r\n100|    >>> from django.core.files import File\r\n(83 more lines below)\r\n",
                "extras": {
                    "code": "open_file('/workspace/django__django__3.0/docs/topics/files.txt')"
                }
            }
        ],
        [
            {
                "id": 13,
                "timestamp": "2024-07-16T18:12:35.085881",
                "source": "agent",
                "message": "Running Python code interactively: search_file(\"File Uploads\", \"/workspace/django__django__3.0/docs/topics/files.txt\")",
                "action": "run_ipython",
                "args": {
                    "code": "search_file(\"File Uploads\", \"/workspace/django__django__3.0/docs/topics/files.txt\")",
                    "thought": "Thank you for showing me the file. We need to add a warning about the permission issues when FILE_UPLOAD_PERMISSIONS is not explicitly set. Let's add this information to the \"File Uploads\" section of the documentation.\n\nFirst, let's search for the \"File Uploads\" section:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 14,
                "timestamp": "2024-07-16T18:12:35.544477",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 13,
                "observation": "run_ipython",
                "content": "[No matches found for \"File Uploads\" in /workspace/django__django__3.0/docs/topics/files.txt]\r\n",
                "extras": {
                    "code": "search_file(\"File Uploads\", \"/workspace/django__django__3.0/docs/topics/files.txt\")"
                }
            }
        ],
        [
            {
                "id": 15,
                "timestamp": "2024-07-16T18:12:38.619331",
                "source": "agent",
                "message": "Running Python code interactively: open_file('/workspace/django__django__3.0/docs/ref/settings.txt')",
                "action": "run_ipython",
                "args": {
                    "code": "open_file('/workspace/django__django__3.0/docs/ref/settings.txt')",
                    "thought": "I apologize for the confusion. It seems that the \"File Uploads\" section is not in this file. Let's check the settings documentation instead, as it's more likely to contain information about FILE_UPLOAD_PERMISSIONS.",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 16,
                "timestamp": "2024-07-16T18:12:39.072237",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 15,
                "observation": "run_ipython",
                "content": "[File: /workspace/django__django__3.0/docs/ref/settings.txt (3484 lines total)]\r\n(this is the beginning of the file)\r\n1|========\r\n2|Settings\r\n3|========\r\n4|\r\n5|.. contents::\r\n6|    :local:\r\n7|    :depth: 1\r\n8|\r\n9|.. warning::\r\n10|\r\n11|    Be careful when you override settings, especially when the default value\r\n12|    is a non-empty list or dictionary, such as :setting:`STATICFILES_FINDERS`.\r\n13|    Make sure you keep the components required by the features of Django you\r\n14|    wish to use.\r\n15|\r\n16|Core Settings\r\n17|=============\r\n18|\r\n19|Here's a list of settings available in Django core and their default values.\r\n20|Settings provided by contrib apps are listed below, followed by a topical index\r\n21|of the core settings. For introductory material, see the :doc:`settings topic\r\n22|guide </topics/settings>`.\r\n23|\r\n24|.. setting:: ABSOLUTE_URL_OVERRIDES\r\n25|\r\n26|``ABSOLUTE_URL_OVERRIDES``\r\n27|--------------------------\r\n28|\r\n29|Default: ``{}`` (Empty dictionary)\r\n30|\r\n31|A dictionary mapping ``\"app_label.model_name\"`` strings to functions that take\r\n32|a model object and return its URL. This is a way of inserting or overriding\r\n33|``get_absolute_url()`` methods on a per-installation basis. Example::\r\n34|\r\n35|    ABSOLUTE_URL_OVERRIDES = {\r\n36|        'blogs.weblog': lambda o: \"/blogs/%s/\" % o.slug,\r\n37|        'news.story': lambda o: \"/stories/%s/%s/\" % (o.pub_year, o.slug),\r\n38|    }\r\n39|\r\n40|The model name used in this setting should be all lowercase, regardless of the\r\n41|case of the actual model class name.\r\n42|\r\n43|.. setting:: ADMINS\r\n44|\r\n45|``ADMINS``\r\n46|----------\r\n47|\r\n48|Default: ``[]`` (Empty list)\r\n49|\r\n50|A list of all the people who get code error notifications. When\r\n51|:setting:`DEBUG=False <DEBUG>` and :class:`~django.utils.log.AdminEmailHandler`\r\n52|is configured in :setting:`LOGGING` (done by default), Django emails these\r\n53|people the details of exceptions raised in the request/response cycle.\r\n54|\r\n55|Each item in the list should be a tuple of (Full name, email address). Example::\r\n56|\r\n57|    [('John', 'john@example.com'), ('Mary', 'mary@example.com')]\r\n58|\r\n59|.. setting:: ALLOWED_HOSTS\r\n60|\r\n61|``ALLOWED_HOSTS``\r\n62|-----------------\r\n63|\r\n64|Default: ``[]`` (Empty list)\r\n65|\r\n66|A list of strings representing the host/domain names that this Django site can\r\n67|serve. This is a security measure to prevent :ref:`HTTP Host header attacks\r\n68|<host-headers-virtual-hosting>`, which are possible even under many\r\n69|seemingly-safe web server configurations.\r\n70|\r\n71|Values in this list can be fully qualified names (e.g. ``'www.example.com'``),\r\n72|in which case they will be matched against the request's ``Host`` header\r\n73|exactly (case-insensitive, not including port). A value beginning with a period\r\n74|can be used as a subdomain wildcard: ``'.example.com'`` will match\r\n75|``example.com``, ``www.example.com``, and any other subdomain of\r\n76|``example.com``. A value of ``'*'`` will match anything; in this case you are\r\n77|responsible to provide your own validation of the ``Host`` header (perhaps in a\r\n78|middleware; if so this middleware must be listed first in\r\n79|:setting:`MIDDLEWARE`).\r\n80|\r\n81|Django also allows the `fully qualified domain name (FQDN)`_ of any entries.\r\n82|Some browsers include a trailing dot in the ``Host`` header which Django\r\n83|strips when performing host validation.\r\n84|\r\n85|.. _`fully qualified domain name (FQDN)`: https://en.wikipedia.org/wiki/Fully_qualified_domain_name\r\n86|\r\n87|If the ``Host`` header (or ``X-Forwarded-Host`` if\r\n88|:setting:`USE_X_FORWARDED_HOST` is enabled) does not match any value in this\r\n89|list, the :meth:`django.http.HttpRequest.get_host()` method will raise\r\n90|:exc:`~django.core.exceptions.SuspiciousOperation`.\r\n91|\r\n92|When :setting:`DEBUG` is ``True`` and ``ALLOWED_HOSTS`` is empty, the host\r\n93|is validated against ``['localhost', '127.0.0.1', '[::1]']``.\r\n94|\r\n95|``ALLOWED_HOSTS`` is also :ref:`checked when running tests\r\n96|<topics-testing-advanced-multiple-hosts>`.\r\n97|\r\n98|This validation only applies via :meth:`~django.http.HttpRequest.get_host()`;\r\n99|if your code accesses the ``Host`` header directly from ``request.META`` you\r\n100|are bypassing this security protection.\r\n(3384 more lines below)\r\n",
                "extras": {
                    "code": "open_file('/workspace/django__django__3.0/docs/ref/settings.txt')"
                }
            }
        ],
        [
            {
                "id": 17,
                "timestamp": "2024-07-16T18:12:48.296781",
                "source": "agent",
                "message": "Running Python code interactively: search_file(\"FILE_UPLOAD_PERMISSIONS\", \"/workspace/django__django__3.0/docs/ref/settings.txt\")",
                "action": "run_ipython",
                "args": {
                    "code": "search_file(\"FILE_UPLOAD_PERMISSIONS\", \"/workspace/django__django__3.0/docs/ref/settings.txt\")",
                    "thought": "Thank you for showing me the settings file. Let's search for the FILE_UPLOAD_PERMISSIONS setting:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 18,
                "timestamp": "2024-07-16T18:12:48.752259",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 17,
                "observation": "run_ipython",
                "content": "[Found 4 matches for \"FILE_UPLOAD_PERMISSIONS\" in /workspace/django__django__3.0/docs/ref/settings.txt]\r\nLine 1480: :setting:`FILE_UPLOAD_PERMISSIONS` setting.\r\nLine 1482: .. setting:: FILE_UPLOAD_PERMISSIONS\r\nLine 1484: ``FILE_UPLOAD_PERMISSIONS``\r\nLine 3373: * :setting:`FILE_UPLOAD_PERMISSIONS`\r\n[End of matches for \"FILE_UPLOAD_PERMISSIONS\" in /workspace/django__django__3.0/docs/ref/settings.txt]\r\n",
                "extras": {
                    "code": "search_file(\"FILE_UPLOAD_PERMISSIONS\", \"/workspace/django__django__3.0/docs/ref/settings.txt\")"
                }
            }
        ],
        [
            {
                "id": 19,
                "timestamp": "2024-07-16T18:13:00.563660",
                "source": "agent",
                "message": "Running Python code interactively: edit_file_by_replace(\n    '/workspace/django__django__3.0/docs/ref/settings.txt',\n    to_replace=\"\"\".. setting:: FILE_UPLOAD_PERMISSIONS\n\n``FILE_UPLOAD_PERMISSIONS``\n---------------------------\n\nDefault: ``None``\n\nThe numeric mode (i.e. ``0o644``) to set newly uploaded files to. For more\ninformation about what these modes mean, see the `Python os.chmod`_\ndocumentation.\n\nIf this isn't given or is ``None``, you'll get operating-system dependent\nbehavior. On most platforms, temporary files will have a mode of ``0o600``, and\nfiles saved from memory will be saved using the system's standard umask.\n\nFor security reasons, these permissions aren't applied to the temporary files\nthat are stored in :setting:`FILE_UPLOAD_TEMP_DIR`.\n\n.. _Python os.chmod: https://docs.python.org/3/library/os.html#os.chmod\n\n.. warning::\n\n    Always prefix the mode with ``0o``. Python considers ``0644`` to be octal by\n    default, but if you try to use ``0644``, you'll get quite a different mode.\"\"\",\n    new_content=\"\"\".. setting:: FILE_UPLOAD_PERMISSIONS\n\n``FILE_UPLOAD_PERMISSIONS``\n---------------------------\n\nDefault: ``0o644``\n\nThe numeric mode (i.e. ``0o644``) to set newly uploaded files to. For more\ninformation about what these modes mean, see the `Python os.chmod`_\ndocumentation.\n\nIf this isn't given or is ``None``, you'll get operating-system dependent\nbehavior. On most platforms, temporary files will have a mode of ``0o600``, and\nfiles saved from memory will be saved using the system's standard umask.\n\nFor security reasons, these permissions aren't applied to the temporary files\nthat are stored in :setting:`FILE_UPLOAD_TEMP_DIR`.\n\n.. _Python os.chmod: https://docs.python.org/3/library/os.html#os.chmod\n\n.. warning::\n\n    Always prefix the mode with ``0o``. Python considers ``0644`` to be octal by\n    default, but if you try to use ``0644``, you'll get quite a different mode.\n\n.. warning::\n\n    When FILE_UPLOAD_PERMISSIONS is not explicitly set, the permissions for \n    uploaded files might not be consistent. This depends on whether a \n    MemoryUploadedFile or a TemporaryUploadedFile was used for temporary \n    storage of the uploaded data, which in turn depends on the uploaded data \n    size with the default FILE_UPLOAD_HANDLERS. On some systems, the \n    tempfile.NamedTemporaryFile + os.rename sequence causes the resulting \n    file permissions to be 0o600. It's recommended to explicitly set \n    FILE_UPLOAD_PERMISSIONS to ensure consistent file permissions.\"\"\"\n)",
                "action": "run_ipython",
                "args": {
                    "code": "edit_file_by_replace(\n    '/workspace/django__django__3.0/docs/ref/settings.txt',\n    to_replace=\"\"\".. setting:: FILE_UPLOAD_PERMISSIONS\n\n``FILE_UPLOAD_PERMISSIONS``\n---------------------------\n\nDefault: ``None``\n\nThe numeric mode (i.e. ``0o644``) to set newly uploaded files to. For more\ninformation about what these modes mean, see the `Python os.chmod`_\ndocumentation.\n\nIf this isn't given or is ``None``, you'll get operating-system dependent\nbehavior. On most platforms, temporary files will have a mode of ``0o600``, and\nfiles saved from memory will be saved using the system's standard umask.\n\nFor security reasons, these permissions aren't applied to the temporary files\nthat are stored in :setting:`FILE_UPLOAD_TEMP_DIR`.\n\n.. _Python os.chmod: https://docs.python.org/3/library/os.html#os.chmod\n\n.. warning::\n\n    Always prefix the mode with ``0o``. Python considers ``0644`` to be octal by\n    default, but if you try to use ``0644``, you'll get quite a different mode.\"\"\",\n    new_content=\"\"\".. setting:: FILE_UPLOAD_PERMISSIONS\n\n``FILE_UPLOAD_PERMISSIONS``\n---------------------------\n\nDefault: ``0o644``\n\nThe numeric mode (i.e. ``0o644``) to set newly uploaded files to. For more\ninformation about what these modes mean, see the `Python os.chmod`_\ndocumentation.\n\nIf this isn't given or is ``None``, you'll get operating-system dependent\nbehavior. On most platforms, temporary files will have a mode of ``0o600``, and\nfiles saved from memory will be saved using the system's standard umask.\n\nFor security reasons, these permissions aren't applied to the temporary files\nthat are stored in :setting:`FILE_UPLOAD_TEMP_DIR`.\n\n.. _Python os.chmod: https://docs.python.org/3/library/os.html#os.chmod\n\n.. warning::\n\n    Always prefix the mode with ``0o``. Python considers ``0644`` to be octal by\n    default, but if you try to use ``0644``, you'll get quite a different mode.\n\n.. warning::\n\n    When FILE_UPLOAD_PERMISSIONS is not explicitly set, the permissions for \n    uploaded files might not be consistent. This depends on whether a \n    MemoryUploadedFile or a TemporaryUploadedFile was used for temporary \n    storage of the uploaded data, which in turn depends on the uploaded data \n    size with the default FILE_UPLOAD_HANDLERS. On some systems, the \n    tempfile.NamedTemporaryFile + os.rename sequence causes the resulting \n    file permissions to be 0o600. It's recommended to explicitly set \n    FILE_UPLOAD_PERMISSIONS to ensure consistent file permissions.\"\"\"\n)",
                    "thought": "Thank you for the information. Let's add the warning about permission issues to the FILE_UPLOAD_PERMISSIONS section. We'll edit the file to include this information:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 20,
                "timestamp": "2024-07-16T18:13:01.024748",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 19,
                "observation": "run_ipython",
                "content": "[No exact match found in /workspace/django__django__3.0/docs/ref/settings.txt for\r\n```\r\n.. setting:: FILE_UPLOAD_PERMISSIONS\r\n\r\n``FILE_UPLOAD_PERMISSIONS``\r\n---------------------------\r\n\r\nDefault: ``None``\r\n\r\nThe numeric mode (i.e. ``0o644``) to set newly uploaded files to. For more\r\ninformation about what these modes mean, see the `Python os.chmod`_\r\ndocumentation.\r\n\r\nIf this isn't given or is ``None``, you'll get operating-system dependent\r\nbehavior. On most platforms, temporary files will have a mode of ``0o600``, and\r\nfiles saved from memory will be saved using the system's standard umask.\r\n\r\nFor security reasons, these permissions aren't applied to the temporary files\r\nthat are stored in :setting:`FILE_UPLOAD_TEMP_DIR`.\r\n\r\n.. _Python os.chmod: https://docs.python.org/3/library/os.html#os.chmod\r\n\r\n.. warning::\r\n\r\n    Always prefix the mode with ``0o``. Python considers ``0644`` to be octal by\r\n    default, but if you try to use ``0644``, you'll get quite a different mode.\r\n```\r\n]\r\n",
                "extras": {
                    "code": "edit_file_by_replace(\n    '/workspace/django__django__3.0/docs/ref/settings.txt',\n    to_replace=\"\"\".. setting:: FILE_UPLOAD_PERMISSIONS\n\n``FILE_UPLOAD_PERMISSIONS``\n---------------------------\n\nDefault: ``None``\n\nThe numeric mode (i.e. ``0o644``) to set newly uploaded files to. For more\ninformation about what these modes mean, see the `Python os.chmod`_\ndocumentation.\n\nIf this isn't given or is ``None``, you'll get operating-system dependent\nbehavior. On most platforms, temporary files will have a mode of ``0o600``, and\nfiles saved from memory will be saved using the system's standard umask.\n\nFor security reasons, these permissions aren't applied to the temporary files\nthat are stored in :setting:`FILE_UPLOAD_TEMP_DIR`.\n\n.. _Python os.chmod: https://docs.python.org/3/library/os.html#os.chmod\n\n.. warning::\n\n    Always prefix the mode with ``0o``. Python considers ``0644`` to be octal by\n    default, but if you try to use ``0644``, you'll get quite a different mode.\"\"\",\n    new_content=\"\"\".. setting:: FILE_UPLOAD_PERMISSIONS\n\n``FILE_UPLOAD_PERMISSIONS``\n---------------------------\n\nDefault: ``0o644``\n\nThe numeric mode (i.e. ``0o644``) to set newly uploaded files to. For more\ninformation about what these modes mean, see the `Python os.chmod`_\ndocumentation.\n\nIf this isn't given or is ``None``, you'll get operating-system dependent\nbehavior. On most platforms, temporary files will have a mode of ``0o600``, and\nfiles saved from memory will be saved using the system's standard umask.\n\nFor security reasons, these permissions aren't applied to the temporary files\nthat are stored in :setting:`FILE_UPLOAD_TEMP_DIR`.\n\n.. _Python os.chmod: https://docs.python.org/3/library/os.html#os.chmod\n\n.. warning::\n\n    Always prefix the mode with ``0o``. Python considers ``0644`` to be octal by\n    default, but if you try to use ``0644``, you'll get quite a different mode.\n\n.. warning::\n\n    When FILE_UPLOAD_PERMISSIONS is not explicitly set, the permissions for \n    uploaded files might not be consistent. This depends on whether a \n    MemoryUploadedFile or a TemporaryUploadedFile was used for temporary \n    storage of the uploaded data, which in turn depends on the uploaded data \n    size with the default FILE_UPLOAD_HANDLERS. On some systems, the \n    tempfile.NamedTemporaryFile + os.rename sequence causes the resulting \n    file permissions to be 0o600. It's recommended to explicitly set \n    FILE_UPLOAD_PERMISSIONS to ensure consistent file permissions.\"\"\"\n)"
                }
            }
        ],
        [
            {
                "id": 21,
                "timestamp": "2024-07-16T18:13:04.639896",
                "source": "agent",
                "message": "Running Python code interactively: search_file(\"FILE_UPLOAD_PERMISSIONS\", \"/workspace/django__django__3.0/docs/ref/settings.txt\")",
                "action": "run_ipython",
                "args": {
                    "code": "search_file(\"FILE_UPLOAD_PERMISSIONS\", \"/workspace/django__django__3.0/docs/ref/settings.txt\")",
                    "thought": "I apologize for the confusion. It seems the content has changed since the last time we viewed it. Let's try to locate the correct section and make the necessary changes.\n\nFirst, let's search for the FILE_UPLOAD_PERMISSIONS section again:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 22,
                "timestamp": "2024-07-16T18:13:05.092573",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 21,
                "observation": "run_ipython",
                "content": "[Found 4 matches for \"FILE_UPLOAD_PERMISSIONS\" in /workspace/django__django__3.0/docs/ref/settings.txt]\r\nLine 1480: :setting:`FILE_UPLOAD_PERMISSIONS` setting.\r\nLine 1482: .. setting:: FILE_UPLOAD_PERMISSIONS\r\nLine 1484: ``FILE_UPLOAD_PERMISSIONS``\r\nLine 3373: * :setting:`FILE_UPLOAD_PERMISSIONS`\r\n[End of matches for \"FILE_UPLOAD_PERMISSIONS\" in /workspace/django__django__3.0/docs/ref/settings.txt]\r\n",
                "extras": {
                    "code": "search_file(\"FILE_UPLOAD_PERMISSIONS\", \"/workspace/django__django__3.0/docs/ref/settings.txt\")"
                }
            }
        ],
        [
            {
                "id": 23,
                "timestamp": "2024-07-16T18:13:08.241626",
                "source": "agent",
                "message": "Running Python code interactively: open_file('/workspace/django__django__3.0/docs/ref/settings.txt', line_number=1482, context_lines=30)",
                "action": "run_ipython",
                "args": {
                    "code": "open_file('/workspace/django__django__3.0/docs/ref/settings.txt', line_number=1482, context_lines=30)",
                    "thought": "Thank you for the reminder. Let's view the content around line 1482 to see the current state of the FILE_UPLOAD_PERMISSIONS section:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 24,
                "timestamp": "2024-07-16T18:13:08.696537",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 23,
                "observation": "run_ipython",
                "content": "[File: /workspace/django__django__3.0/docs/ref/settings.txt (3484 lines total)]\r\n(1466 more lines above)\r\n1467|``FILE_UPLOAD_DIRECTORY_PERMISSIONS``\r\n1468|-------------------------------------\r\n1469|\r\n1470|Default: ``None``\r\n1471|\r\n1472|The numeric mode to apply to directories created in the process of uploading\r\n1473|files.\r\n1474|\r\n1475|This setting also determines the default permissions for collected static\r\n1476|directories when using the :djadmin:`collectstatic` management command. See\r\n1477|:djadmin:`collectstatic` for details on overriding it.\r\n1478|\r\n1479|This value mirrors the functionality and caveats of the\r\n1480|:setting:`FILE_UPLOAD_PERMISSIONS` setting.\r\n1481|\r\n1482|.. setting:: FILE_UPLOAD_PERMISSIONS\r\n1483|\r\n1484|``FILE_UPLOAD_PERMISSIONS``\r\n1485|---------------------------\r\n1486|\r\n1487|Default: ``None``\r\n1488|\r\n1489|The numeric mode (i.e. ``0o644``) to set newly uploaded files to. For\r\n1490|more information about what these modes mean, see the documentation for\r\n1491|:func:`os.chmod`.\r\n1492|\r\n1493|If this isn't given or is ``None``, you'll get operating-system\r\n1494|dependent behavior. On most platforms, temporary files will have a mode\r\n1495|of ``0o600``, and files saved from memory will be saved using the\r\n1496|system's standard umask.\r\n1497|\r\n(1987 more lines below)\r\n",
                "extras": {
                    "code": "open_file('/workspace/django__django__3.0/docs/ref/settings.txt', line_number=1482, context_lines=30)"
                }
            }
        ],
        [
            {
                "id": 25,
                "timestamp": "2024-07-16T18:13:16.602957",
                "source": "agent",
                "message": "Running Python code interactively: edit_file_by_replace(\n    '/workspace/django__django__3.0/docs/ref/settings.txt',\n    to_replace=\"\"\".. setting:: FILE_UPLOAD_PERMISSIONS\n\n``FILE_UPLOAD_PERMISSIONS``\n---------------------------\n\nDefault: ``None``\n\nThe numeric mode (i.e. ``0o644``) to set newly uploaded files to. For\nmore information about what these modes mean, see the documentation for\n:func:`os.chmod`.\n\nIf this isn't given or is ``None``, you'll get operating-system\ndependent behavior. On most platforms, temporary files will have a mode\nof ``0o600``, and files saved from memory will be saved using the\nsystem's standard umask.\"\"\",\n    new_content=\"\"\".. setting:: FILE_UPLOAD_PERMISSIONS\n\n``FILE_UPLOAD_PERMISSIONS``\n---------------------------\n\nDefault: ``0o644``\n\nThe numeric mode (i.e. ``0o644``) to set newly uploaded files to. For\nmore information about what these modes mean, see the documentation for\n:func:`os.chmod`.\n\n.. warning::\n\n    When FILE_UPLOAD_PERMISSIONS is not explicitly set, the permissions for \n    uploaded files might not be consistent. This depends on whether a \n    MemoryUploadedFile or a TemporaryUploadedFile was used for temporary \n    storage of the uploaded data, which in turn depends on the uploaded data \n    size with the default FILE_UPLOAD_HANDLERS. On some systems, the \n    tempfile.NamedTemporaryFile + os.rename sequence causes the resulting \n    file permissions to be 0o600. It's recommended to explicitly set \n    FILE_UPLOAD_PERMISSIONS to ensure consistent file permissions.\n\nIf this isn't given or is ``None``, you'll get operating-system\ndependent behavior. On most platforms, temporary files will have a mode\nof ``0o600``, and files saved from memory will be saved using the\nsystem's standard umask.\"\"\"\n)",
                "action": "run_ipython",
                "args": {
                    "code": "edit_file_by_replace(\n    '/workspace/django__django__3.0/docs/ref/settings.txt',\n    to_replace=\"\"\".. setting:: FILE_UPLOAD_PERMISSIONS\n\n``FILE_UPLOAD_PERMISSIONS``\n---------------------------\n\nDefault: ``None``\n\nThe numeric mode (i.e. ``0o644``) to set newly uploaded files to. For\nmore information about what these modes mean, see the documentation for\n:func:`os.chmod`.\n\nIf this isn't given or is ``None``, you'll get operating-system\ndependent behavior. On most platforms, temporary files will have a mode\nof ``0o600``, and files saved from memory will be saved using the\nsystem's standard umask.\"\"\",\n    new_content=\"\"\".. setting:: FILE_UPLOAD_PERMISSIONS\n\n``FILE_UPLOAD_PERMISSIONS``\n---------------------------\n\nDefault: ``0o644``\n\nThe numeric mode (i.e. ``0o644``) to set newly uploaded files to. For\nmore information about what these modes mean, see the documentation for\n:func:`os.chmod`.\n\n.. warning::\n\n    When FILE_UPLOAD_PERMISSIONS is not explicitly set, the permissions for \n    uploaded files might not be consistent. This depends on whether a \n    MemoryUploadedFile or a TemporaryUploadedFile was used for temporary \n    storage of the uploaded data, which in turn depends on the uploaded data \n    size with the default FILE_UPLOAD_HANDLERS. On some systems, the \n    tempfile.NamedTemporaryFile + os.rename sequence causes the resulting \n    file permissions to be 0o600. It's recommended to explicitly set \n    FILE_UPLOAD_PERMISSIONS to ensure consistent file permissions.\n\nIf this isn't given or is ``None``, you'll get operating-system\ndependent behavior. On most platforms, temporary files will have a mode\nof ``0o600``, and files saved from memory will be saved using the\nsystem's standard umask.\"\"\"\n)",
                    "thought": "Thank you for showing me the current content. Now, let's update the FILE_UPLOAD_PERMISSIONS section with the new default value and add the warning about permission issues:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 26,
                "timestamp": "2024-07-16T18:13:17.065304",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 25,
                "observation": "run_ipython",
                "content": "[File: /workspace/django__django__3.0/docs/ref/settings.txt (3495 lines total after edit)]\r\n(1431 more lines above)\r\n1432|\r\n1433|    This setting is deprecated. Starting with Django 3.1, files read from disk\r\n1434|    must be UTF-8 encoded.\r\n1435|\r\n1436|.. setting:: FILE_UPLOAD_HANDLERS\r\n1437|\r\n1438|``FILE_UPLOAD_HANDLERS``\r\n1439|------------------------\r\n1440|\r\n1441|Default::\r\n1442|\r\n1443|    [\r\n1444|        'django.core.files.uploadhandler.MemoryFileUploadHandler',\r\n1445|        'django.core.files.uploadhandler.TemporaryFileUploadHandler',\r\n1446|    ]\r\n1447|\r\n1448|A list of handlers to use for uploading. Changing this setting allows complete\r\n1449|customization -- even replacement -- of Django's upload process.\r\n1450|\r\n1451|See :doc:`/topics/files` for details.\r\n1452|\r\n1453|.. setting:: FILE_UPLOAD_MAX_MEMORY_SIZE\r\n1454|\r\n1455|``FILE_UPLOAD_MAX_MEMORY_SIZE``\r\n1456|-------------------------------\r\n1457|\r\n1458|Default: ``2621440`` (i.e. 2.5 MB).\r\n1459|\r\n1460|The maximum size (in bytes) that an upload will be before it gets streamed to\r\n1461|the file system. See :doc:`/topics/files` for details.\r\n1462|\r\n1463|See also :setting:`DATA_UPLOAD_MAX_MEMORY_SIZE`.\r\n1464|\r\n1465|.. setting:: FILE_UPLOAD_DIRECTORY_PERMISSIONS\r\n1466|\r\n1467|``FILE_UPLOAD_DIRECTORY_PERMISSIONS``\r\n1468|-------------------------------------\r\n1469|\r\n1470|Default: ``None``\r\n1471|\r\n1472|The numeric mode to apply to directories created in the process of uploading\r\n1473|files.\r\n1474|\r\n1475|This setting also determines the default permissions for collected static\r\n1476|directories when using the :djadmin:`collectstatic` management command. See\r\n1477|:djadmin:`collectstatic` for details on overriding it.\r\n1478|\r\n1479|This value mirrors the functionality and caveats of the\r\n1480|:setting:`FILE_UPLOAD_PERMISSIONS` setting.\r\n1481|\r\n1482|.. setting:: FILE_UPLOAD_PERMISSIONS\r\n1483|\r\n1484|``FILE_UPLOAD_PERMISSIONS``\r\n1485|---------------------------\r\n1486|\r\n1487|Default: ``0o644``\r\n1488|\r\n1489|The numeric mode (i.e. ``0o644``) to set newly uploaded files to. For\r\n1490|more information about what these modes mean, see the documentation for\r\n1491|:func:`os.chmod`.\r\n1492|\r\n1493|.. warning::\r\n1494|\r\n1495|    When FILE_UPLOAD_PERMISSIONS is not explicitly set, the permissions for \r\n1496|    uploaded files might not be consistent. This depends on whether a \r\n1497|    MemoryUploadedFile or a TemporaryUploadedFile was used for temporary \r\n1498|    storage of the uploaded data, which in turn depends on the uploaded data \r\n1499|    size with the default FILE_UPLOAD_HANDLERS. On some systems, the \r\n1500|    tempfile.NamedTemporaryFile + os.rename sequence causes the resulting \r\n1501|    file permissions to be 0o600. It's recommended to explicitly set \r\n1502|    FILE_UPLOAD_PERMISSIONS to ensure consistent file permissions.\r\n1503|\r\n1504|If this isn't given or is ``None``, you'll get operating-system\r\n1505|dependent behavior. On most platforms, temporary files will have a mode\r\n1506|of ``0o600``, and files saved from memory will be saved using the\r\n1507|system's standard umask.\r\n1508|\r\n1509|For security reasons, these permissions aren't applied to the temporary files\r\n1510|that are stored in :setting:`FILE_UPLOAD_TEMP_DIR`.\r\n1511|\r\n1512|This setting also determines the default permissions for collected static files\r\n1513|when using the :djadmin:`collectstatic` management command. See\r\n1514|:djadmin:`collectstatic` for details on overriding it.\r\n1515|\r\n1516|.. warning::\r\n1517|\r\n1518|    **Always prefix the mode with a 0.**\r\n1519|\r\n1520|    If you're not familiar with file modes, please note that the leading\r\n1521|    ``0`` is very important: it indicates an octal number, which is the\r\n1522|    way that modes must be specified. If you try to use ``644``, you'll\r\n1523|    get totally incorrect behavior.\r\n1524|\r\n1525|.. setting:: FILE_UPLOAD_TEMP_DIR\r\n1526|\r\n1527|``FILE_UPLOAD_TEMP_DIR``\r\n1528|------------------------\r\n1529|\r\n1530|Default: ``None``\r\n1531|\r\n1532|The directory to store data to (typically files larger than\r\n(1963 more lines below)\r\n[File updated (edited at line 1482). Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.]\r\n",
                "extras": {
                    "code": "edit_file_by_replace(\n    '/workspace/django__django__3.0/docs/ref/settings.txt',\n    to_replace=\"\"\".. setting:: FILE_UPLOAD_PERMISSIONS\n\n``FILE_UPLOAD_PERMISSIONS``\n---------------------------\n\nDefault: ``None``\n\nThe numeric mode (i.e. ``0o644``) to set newly uploaded files to. For\nmore information about what these modes mean, see the documentation for\n:func:`os.chmod`.\n\nIf this isn't given or is ``None``, you'll get operating-system\ndependent behavior. On most platforms, temporary files will have a mode\nof ``0o600``, and files saved from memory will be saved using the\nsystem's standard umask.\"\"\",\n    new_content=\"\"\".. setting:: FILE_UPLOAD_PERMISSIONS\n\n``FILE_UPLOAD_PERMISSIONS``\n---------------------------\n\nDefault: ``0o644``\n\nThe numeric mode (i.e. ``0o644``) to set newly uploaded files to. For\nmore information about what these modes mean, see the documentation for\n:func:`os.chmod`.\n\n.. warning::\n\n    When FILE_UPLOAD_PERMISSIONS is not explicitly set, the permissions for \n    uploaded files might not be consistent. This depends on whether a \n    MemoryUploadedFile or a TemporaryUploadedFile was used for temporary \n    storage of the uploaded data, which in turn depends on the uploaded data \n    size with the default FILE_UPLOAD_HANDLERS. On some systems, the \n    tempfile.NamedTemporaryFile + os.rename sequence causes the resulting \n    file permissions to be 0o600. It's recommended to explicitly set \n    FILE_UPLOAD_PERMISSIONS to ensure consistent file permissions.\n\nIf this isn't given or is ``None``, you'll get operating-system\ndependent behavior. On most platforms, temporary files will have a mode\nof ``0o600``, and files saved from memory will be saved using the\nsystem's standard umask.\"\"\"\n)"
                }
            }
        ],
        [
            {
                "id": 27,
                "timestamp": "2024-07-16T18:13:22.913759",
                "source": "agent",
                "message": "The changes have been successfully applied. The FILE_UPLOAD_PERMISSIONS section has been updated with the new default value of 0o644 and includes the warning about potential permission inconsistencies.\n\nNow that we have made the necessary changes to both the global_settings.py file and the documentation, we have completed the task of setting the default FILE_UPLOAD_PERMISSION to 0o644 and adding a warning about permission issues.\n\nTo summarize the changes we made:\n\n1. In /workspace/django__django__3.0/django/conf/global_settings.py, we changed the default value of FILE_UPLOAD_PERMISSIONS from None to 0o644.\n\n2. In /workspace/django__django__3.0/docs/ref/settings.txt, we updated the FILE_UPLOAD_PERMISSIONS section to reflect the new default value and added a warning about potential permission inconsistencies.\n\nThese changes address the issue described in the problem statement and provide users with the necessary information about potential permission issues when FILE_UPLOAD_PERMISSIONS is not explicitly set.\n\nThe task is now complete.",
                "action": "finish",
                "args": {
                    "outputs": {},
                    "thought": "The changes have been successfully applied. The FILE_UPLOAD_PERMISSIONS section has been updated with the new default value of 0o644 and includes the warning about potential permission inconsistencies.\n\nNow that we have made the necessary changes to both the global_settings.py file and the documentation, we have completed the task of setting the default FILE_UPLOAD_PERMISSION to 0o644 and adding a warning about permission issues.\n\nTo summarize the changes we made:\n\n1. In /workspace/django__django__3.0/django/conf/global_settings.py, we changed the default value of FILE_UPLOAD_PERMISSIONS from None to 0o644.\n\n2. In /workspace/django__django__3.0/docs/ref/settings.txt, we updated the FILE_UPLOAD_PERMISSIONS section to reflect the new default value and added a warning about potential permission inconsistencies.\n\nThese changes address the issue described in the problem statement and provide users with the necessary information about potential permission issues when FILE_UPLOAD_PERMISSIONS is not explicitly set.\n\nThe task is now complete."
                }
            },
            {
                "message": "No observation",
                "observation": "null",
                "content": "",
                "extras": {}
            }
        ]
    ],
    "info": {
        "submission": "diff --git a/django/conf/.backup.global_settings.py b/django/conf/.backup.global_settings.py\r\nnew file mode 100644\r\nindex 0000000000..acee9887d2\r\n--- /dev/null\r\n+++ b/django/conf/.backup.global_settings.py\r\n@@ -0,0 +1,634 @@\r\n+\"\"\"\r\n+Default Django settings. Override these with settings in the module pointed to\r\n+by the DJANGO_SETTINGS_MODULE environment variable.\r\n+\"\"\"\r\n+\r\n+\r\n+# This is defined here as a do-nothing function because we can't import\r\n+# django.utils.translation -- that module depends on the settings.\r\n+def gettext_noop(s):\r\n+    return s\r\n+\r\n+\r\n+####################\r\n+# CORE             #\r\n+####################\r\n+\r\n+DEBUG = False\r\n+\r\n+# Whether the framework should propagate raw exceptions rather than catching\r\n+# them. This is useful under some testing situations and should never be used\r\n+# on a live site.\r\n+DEBUG_PROPAGATE_EXCEPTIONS = False\r\n+\r\n+# People who get code error notifications.\r\n+# In the format [('Full Name', 'email@example.com'), ('Full Name', 'anotheremail@example.com')]\r\n+ADMINS = []\r\n+\r\n+# List of IP addresses, as strings, that:\r\n+#   * See debug comments, when DEBUG is true\r\n+#   * Receive x-headers\r\n+INTERNAL_IPS = []\r\n+\r\n+# Hosts/domain names that are valid for this site.\r\n+# \"*\" matches anything, \".example.com\" matches example.com and all subdomains\r\n+ALLOWED_HOSTS = []\r\n+\r\n+# Local time zone for this installation. All choices can be found here:\r\n+# https://en.wikipedia.org/wiki/List_of_tz_zones_by_name (although not all\r\n+# systems may support all possibilities). When USE_TZ is True, this is\r\n+# interpreted as the default user time zone.\r\n+TIME_ZONE = 'America/Chicago'\r\n+\r\n+# If you set this to True, Django will use timezone-aware datetimes.\r\n+USE_TZ = False\r\n+\r\n+# Language code for this installation. All choices can be found here:\r\n+# http://www.i18nguy.com/unicode/language-identifiers.html\r\n+LANGUAGE_CODE = 'en-us'\r\n+\r\n+# Languages we provide translations for, out of the box.\r\n+LANGUAGES = [\r\n+    ('af', gettext_noop('Afrikaans')),\r\n+    ('ar', gettext_noop('Arabic')),\r\n+    ('ast', gettext_noop('Asturian')),\r\n+    ('az', gettext_noop('Azerbaijani')),\r\n+    ('bg', gettext_noop('Bulgarian')),\r\n+    ('be', gettext_noop('Belarusian')),\r\n+    ('bn', gettext_noop('Bengali')),\r\n+    ('br', gettext_noop('Breton')),\r\n+    ('bs', gettext_noop('Bosnian')),\r\n+    ('ca', gettext_noop('Catalan')),\r\n+    ('cs', gettext_noop('Czech')),\r\n+    ('cy', gettext_noop('Welsh')),\r\n+    ('da', gettext_noop('Danish')),\r\n+    ('de', gettext_noop('German')),\r\n+    ('dsb', gettext_noop('Lower Sorbian')),\r\n+    ('el', gettext_noop('Greek')),\r\n+    ('en', gettext_noop('English')),\r\n+    ('en-au', gettext_noop('Australian English')),\r\n+    ('en-gb', gettext_noop('British English')),\r\n+    ('eo', gettext_noop('Esperanto')),\r\n+    ('es', gettext_noop('Spanish')),\r\n+    ('es-ar', gettext_noop('Argentinian Spanish')),\r\n+    ('es-co', gettext_noop('Colombian Spanish')),\r\n+    ('es-mx', gettext_noop('Mexican Spanish')),\r\n+    ('es-ni', gettext_noop('Nicaraguan Spanish')),\r\n+    ('es-ve', gettext_noop('Venezuelan Spanish')),\r\n+    ('et', gettext_noop('Estonian')),\r\n+    ('eu', gettext_noop('Basque')),\r\n+    ('fa', gettext_noop('Persian')),\r\n+    ('fi', gettext_noop('Finnish')),\r\n+    ('fr', gettext_noop('French')),\r\n+    ('fy', gettext_noop('Frisian')),\r\n+    ('ga', gettext_noop('Irish')),\r\n+    ('gd', gettext_noop('Scottish Gaelic')),\r\n+    ('gl', gettext_noop('Galician')),\r\n+    ('he', gettext_noop('Hebrew')),\r\n+    ('hi', gettext_noop('Hindi')),\r\n+    ('hr', gettext_noop('Croatian')),\r\n+    ('hsb', gettext_noop('Upper Sorbian')),\r\n+    ('hu', gettext_noop('Hungarian')),\r\n+    ('hy', gettext_noop('Armenian')),\r\n+    ('ia', gettext_noop('Interlingua')),\r\n+    ('id', gettext_noop('Indonesian')),\r\n+    ('io', gettext_noop('Ido')),\r\n+    ('is', gettext_noop('Icelandic')),\r\n+    ('it', gettext_noop('Italian')),\r\n+    ('ja', gettext_noop('Japanese')),\r\n+    ('ka', gettext_noop('Georgian')),\r\n+    ('kab', gettext_noop('Kabyle')),\r\n+    ('kk', gettext_noop('Kazakh')),\r\n+    ('km', gettext_noop('Khmer')),\r\n+    ('kn', gettext_noop('Kannada')),\r\n+    ('ko', gettext_noop('Korean')),\r\n+    ('lb', gettext_noop('Luxembourgish')),\r\n+    ('lt', gettext_noop('Lithuanian')),\r\n+    ('lv', gettext_noop('Latvian')),\r\n+    ('mk', gettext_noop('Macedonian')),\r\n+    ('ml', gettext_noop('Malayalam')),\r\n+    ('mn', gettext_noop('Mongolian')),\r\n+    ('mr', gettext_noop('Marathi')),\r\n+    ('my', gettext_noop('Burmese')),\r\n+    ('nb', gettext_noop('Norwegian Bokm\u00e5l')),\r\n+    ('ne', gettext_noop('Nepali')),\r\n+    ('nl', gettext_noop('Dutch')),\r\n+    ('nn', gettext_noop('Norwegian Nynorsk')),\r\n+    ('os', gettext_noop('Ossetic')),\r\n+    ('pa', gettext_noop('Punjabi')),\r\n+    ('pl', gettext_noop('Polish')),\r\n+    ('pt', gettext_noop('Portuguese')),\r\n+    ('pt-br', gettext_noop('Brazilian Portuguese')),\r\n+    ('ro', gettext_noop('Romanian')),\r\n+    ('ru', gettext_noop('Russian')),\r\n+    ('sk', gettext_noop('Slovak')),\r\n+    ('sl', gettext_noop('Slovenian')),\r\n+    ('sq', gettext_noop('Albanian')),\r\n+    ('sr', gettext_noop('Serbian')),\r\n+    ('sr-latn', gettext_noop('Serbian Latin')),\r\n+    ('sv', gettext_noop('Swedish')),\r\n+    ('sw', gettext_noop('Swahili')),\r\n+    ('ta', gettext_noop('Tamil')),\r\n+    ('te', gettext_noop('Telugu')),\r\n+    ('th', gettext_noop('Thai')),\r\n+    ('tr', gettext_noop('Turkish')),\r\n+    ('tt', gettext_noop('Tatar')),\r\n+    ('udm', gettext_noop('Udmurt')),\r\n+    ('uk', gettext_noop('Ukrainian')),\r\n+    ('ur', gettext_noop('Urdu')),\r\n+    ('vi', gettext_noop('Vietnamese')),\r\n+    ('zh-hans', gettext_noop('Simplified Chinese')),\r\n+    ('zh-hant', gettext_noop('Traditional Chinese')),\r\n+]\r\n+\r\n+# Languages using BiDi (right-to-left) layout\r\n+LANGUAGES_BIDI = [\"he\", \"ar\", \"fa\", \"ur\"]\r\n+\r\n+# If you set this to False, Django will make some optimizations so as not\r\n+# to load the internationalization machinery.\r\n+USE_I18N = True\r\n+LOCALE_PATHS = []\r\n+\r\n+# Settings for language cookie\r\n+LANGUAGE_COOKIE_NAME = 'django_language'\r\n+LANGUAGE_COOKIE_AGE = None\r\n+LANGUAGE_COOKIE_DOMAIN = None\r\n+LANGUAGE_COOKIE_PATH = '/'\r\n+\r\n+\r\n+# If you set this to True, Django will format dates, numbers and calendars\r\n+# according to user current locale.\r\n+USE_L10N = False\r\n+\r\n+# Not-necessarily-technical managers of the site. They get broken link\r\n+# notifications and other various emails.\r\n+MANAGERS = ADMINS\r\n+\r\n+# Default charset to use for all HttpResponse objects, if a MIME type isn't\r\n+# manually specified. It's used to construct the Content-Type header.\r\n+DEFAULT_CHARSET = 'utf-8'\r\n+\r\n+# Encoding of files read from disk (template and initial SQL files).\r\n+FILE_CHARSET = 'utf-8'\r\n+\r\n+# Email address that error messages come from.\r\n+SERVER_EMAIL = 'root@localhost'\r\n+\r\n+# Database connection info. If left empty, will default to the dummy backend.\r\n+DATABASES = {}\r\n+\r\n+# Classes used to implement DB routing behavior.\r\n+DATABASE_ROUTERS = []\r\n+\r\n+# The email backend to use. For possible shortcuts see django.core.mail.\r\n+# The default is to use the SMTP backend.\r\n+# Third-party backends can be specified by providing a Python path\r\n+# to a module that defines an EmailBackend class.\r\n+EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\r\n+\r\n+# Host for sending email.\r\n+EMAIL_HOST = 'localhost'\r\n+\r\n+# Port for sending email.\r\n+EMAIL_PORT = 25\r\n+\r\n+# Whether to send SMTP 'Date' header in the local time zone or in UTC.\r\n+EMAIL_USE_LOCALTIME = False\r\n+\r\n+# Optional SMTP authentication information for EMAIL_HOST.\r\n+EMAIL_HOST_USER = ''\r\n+EMAIL_HOST_PASSWORD = ''\r\n+EMAIL_USE_TLS = False\r\n+EMAIL_USE_SSL = False\r\n+EMAIL_SSL_CERTFILE = None\r\n+EMAIL_SSL_KEYFILE = None\r\n+EMAIL_TIMEOUT = None\r\n+\r\n+# List of strings representing installed apps.\r\n+INSTALLED_APPS = []\r\n+\r\n+TEMPLATES = []\r\n+\r\n+# Default form rendering class.\r\n+FORM_RENDERER = 'django.forms.renderers.DjangoTemplates'\r\n+\r\n+# Default email address to use for various automated correspondence from\r\n+# the site managers.\r\n+DEFAULT_FROM_EMAIL = 'webmaster@localhost'\r\n+\r\n+# Subject-line prefix for email messages send with django.core.mail.mail_admins\r\n+# or ...mail_managers.  Make sure to include the trailing space.\r\n+EMAIL_SUBJECT_PREFIX = '[Django] '\r\n+\r\n+# Whether to append trailing slashes to URLs.\r\n+APPEND_SLASH = True\r\n+\r\n+# Whether to prepend the \"www.\" subdomain to URLs that don't have it.\r\n+PREPEND_WWW = False\r\n+\r\n+# Override the server-derived value of SCRIPT_NAME\r\n+FORCE_SCRIPT_NAME = None\r\n+\r\n+# List of compiled regular expression objects representing User-Agent strings\r\n+# that are not allowed to visit any page, systemwide. Use this for bad\r\n+# robots/crawlers. Here are a few examples:\r\n+#     import re\r\n+#     DISALLOWED_USER_AGENTS = [\r\n+#         re.compile(r'^NaverBot.*'),\r\n+#         re.compile(r'^EmailSiphon.*'),\r\n+#         re.compile(r'^SiteSucker.*'),\r\n+#         re.compile(r'^sohu-search'),\r\n+#     ]\r\n+DISALLOWED_USER_AGENTS = []\r\n+\r\n+ABSOLUTE_URL_OVERRIDES = {}\r\n+\r\n+# List of compiled regular expression objects representing URLs that need not\r\n+# be reported by BrokenLinkEmailsMiddleware. Here are a few examples:\r\n+#    import re\r\n+#    IGNORABLE_404_URLS = [\r\n+#        re.compile(r'^/apple-touch-icon.*\\.png$'),\r\n+#        re.compile(r'^/favicon.ico$'),\r\n+#        re.compile(r'^/robots.txt$'),\r\n+#        re.compile(r'^/phpmyadmin/'),\r\n+#        re.compile(r'\\.(cgi|php|pl)$'),\r\n+#    ]\r\n+IGNORABLE_404_URLS = []\r\n+\r\n+# A secret key for this particular Django installation. Used in secret-key\r\n+# hashing algorithms. Set this in your settings, or Django will complain\r\n+# loudly.\r\n+SECRET_KEY = ''\r\n+\r\n+# Default file storage mechanism that holds media.\r\n+DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'\r\n+\r\n+# Absolute filesystem path to the directory that will hold user-uploaded files.\r\n+# Example: \"/var/www/example.com/media/\"\r\n+MEDIA_ROOT = ''\r\n+\r\n+# URL that handles the media served from MEDIA_ROOT.\r\n+# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\r\n+MEDIA_URL = ''\r\n+\r\n+# Absolute path to the directory static files should be collected to.\r\n+# Example: \"/var/www/example.com/static/\"\r\n+STATIC_ROOT = None\r\n+\r\n+# URL that handles the static files served from STATIC_ROOT.\r\n+# Example: \"http://example.com/static/\", \"http://static.example.com/\"\r\n+STATIC_URL = None\r\n+\r\n+# List of upload handler classes to be applied in order.\r\n+FILE_UPLOAD_HANDLERS = [\r\n+    'django.core.files.uploadhandler.MemoryFileUploadHandler',\r\n+    'django.core.files.uploadhandler.TemporaryFileUploadHandler',\r\n+]\r\n+\r\n+# Maximum size, in bytes, of a request before it will be streamed to the\r\n+# file system instead of into memory.\r\n+FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\r\n+\r\n+# Maximum size in bytes of request data (excluding file uploads) that will be\r\n+# read before a SuspiciousOperation (RequestDataTooBig) is raised.\r\n+DATA_UPLOAD_MAX_MEMORY_SIZE = 2621440  # i.e. 2.5 MB\r\n+\r\n+# Maximum number of GET/POST parameters that will be read before a\r\n+# SuspiciousOperation (TooManyFieldsSent) is raised.\r\n+DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000\r\n+\r\n+# Directory in which upload streamed files will be temporarily saved. A value of\r\n+# `None` will make Django use the operating system's default temporary directory\r\n+# (i.e. \"/tmp\" on *nix systems).\r\n+FILE_UPLOAD_TEMP_DIR = None\r\n+\r\n+# The numeric mode to set newly-uploaded files to. The value should be a mode\r\n+# you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\r\n+FILE_UPLOAD_PERMISSIONS = None\r\n+\r\n+# The numeric mode to assign to newly-created directories, when uploading files.\r\n+# The value should be a mode as you'd pass to os.chmod;\r\n+# see https://docs.python.org/library/os.html#files-and-directories.\r\n+FILE_UPLOAD_DIRECTORY_PERMISSIONS = None\r\n+\r\n+# Python module path where user will place custom format definition.\r\n+# The directory where this setting is pointing should contain subdirectories\r\n+# named as the locales, containing a formats.py file\r\n+# (i.e. \"myproject.locale\" for myproject/locale/en/formats.py etc. use)\r\n+FORMAT_MODULE_PATH = None\r\n+\r\n+# Default formatting for date objects. See all available format strings here:\r\n+# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\r\n+DATE_FORMAT = 'N j, Y'\r\n+\r\n+# Default formatting for datetime objects. See all available format strings here:\r\n+# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\r\n+DATETIME_FORMAT = 'N j, Y, P'\r\n+\r\n+# Default formatting for time objects. See all available format strings here:\r\n+# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\r\n+TIME_FORMAT = 'P'\r\n+\r\n+# Default formatting for date objects when only the year and month are relevant.\r\n+# See all available format strings here:\r\n+# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\r\n+YEAR_MONTH_FORMAT = 'F Y'\r\n+\r\n+# Default formatting for date objects when only the month and day are relevant.\r\n+# See all available format strings here:\r\n+# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\r\n+MONTH_DAY_FORMAT = 'F j'\r\n+\r\n+# Default short formatting for date objects. See all available format strings here:\r\n+# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\r\n+SHORT_DATE_FORMAT = 'm/d/Y'\r\n+\r\n+# Default short formatting for datetime objects.\r\n+# See all available format strings here:\r\n+# https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\r\n+SHORT_DATETIME_FORMAT = 'm/d/Y P'\r\n+\r\n+# Default formats to be used when parsing dates from input boxes, in order\r\n+# See all available format string here:\r\n+# https://docs.python.org/library/datetime.html#strftime-behavior\r\n+# * Note that these format strings are different from the ones to display dates\r\n+DATE_INPUT_FORMATS = [\r\n+    '%Y-%m-%d', '%m/%d/%Y', '%m/%d/%y',  # '2006-10-25', '10/25/2006', '10/25/06'\r\n+    '%b %d %Y', '%b %d, %Y',             # 'Oct 25 2006', 'Oct 25, 2006'\r\n+    '%d %b %Y', '%d %b, %Y',             # '25 Oct 2006', '25 Oct, 2006'\r\n+    '%B %d %Y', '%B %d, %Y',             # 'October 25 2006', 'October 25, 2006'\r\n+    '%d %B %Y', '%d %B, %Y',             # '25 October 2006', '25 October, 2006'\r\n+]\r\n+\r\n+# Default formats to be used when parsing times from input boxes, in order\r\n+# See all available format string here:\r\n+# https://docs.python.org/library/datetime.html#strftime-behavior\r\n+# * Note that these format strings are different from the ones to display dates\r\n+TIME_INPUT_FORMATS = [\r\n+    '%H:%M:%S',     # '14:30:59'\r\n+    '%H:%M:%S.%f',  # '14:30:59.000200'\r\n+    '%H:%M',        # '14:30'\r\n+]\r\n+\r\n+# Default formats to be used when parsing dates and times from input boxes,\r\n+# in order\r\n+# See all available format string here:\r\n+# https://docs.python.org/library/datetime.html#strftime-behavior\r\n+# * Note that these format strings are different from the ones to display dates\r\n+DATETIME_INPUT_FORMATS = [\r\n+    '%Y-%m-%d %H:%M:%S',     # '2006-10-25 14:30:59'\r\n+    '%Y-%m-%d %H:%M:%S.%f',  # '2006-10-25 14:30:59.000200'\r\n+    '%Y-%m-%d %H:%M',        # '2006-10-25 14:30'\r\n+    '%Y-%m-%d',              # '2006-10-25'\r\n+    '%m/%d/%Y %H:%M:%S',     # '10/25/2006 14:30:59'\r\n+    '%m/%d/%Y %H:%M:%S.%f',  # '10/25/2006 14:30:59.000200'\r\n+    '%m/%d/%Y %H:%M',        # '10/25/2006 14:30'\r\n+    '%m/%d/%Y',              # '10/25/2006'\r\n+    '%m/%d/%y %H:%M:%S',     # '10/25/06 14:30:59'\r\n+    '%m/%d/%y %H:%M:%S.%f',  # '10/25/06 14:30:59.000200'\r\n+    '%m/%d/%y %H:%M',        # '10/25/06 14:30'\r\n+    '%m/%d/%y',              # '10/25/06'\r\n+]\r\n+\r\n+# First day of week, to be used on calendars\r\n+# 0 means Sunday, 1 means Monday...\r\n+FIRST_DAY_OF_WEEK = 0\r\n+\r\n+# Decimal separator symbol\r\n+DECIMAL_SEPARATOR = '.'\r\n+\r\n+# Boolean that sets whether to add thousand separator when formatting numbers\r\n+USE_THOUSAND_SEPARATOR = False\r\n+\r\n+# Number of digits that will be together, when splitting them by\r\n+# THOUSAND_SEPARATOR. 0 means no grouping, 3 means splitting by thousands...\r\n+NUMBER_GROUPING = 0\r\n+\r\n+# Thousand separator symbol\r\n+THOUSAND_SEPARATOR = ','\r\n+\r\n+# The tablespaces to use for each model when not specified otherwise.\r\n+DEFAULT_TABLESPACE = ''\r\n+DEFAULT_INDEX_TABLESPACE = ''\r\n+\r\n+# Default X-Frame-Options header value\r\n+X_FRAME_OPTIONS = 'SAMEORIGIN'\r\n+\r\n+USE_X_FORWARDED_HOST = False\r\n+USE_X_FORWARDED_PORT = False\r\n+\r\n+# The Python dotted path to the WSGI application that Django's internal server\r\n+# (runserver) will use. If `None`, the return value of\r\n+# 'django.core.wsgi.get_wsgi_application' is used, thus preserving the same\r\n+# behavior as previous versions of Django. Otherwise this should point to an\r\n+# actual WSGI application object.\r\n+WSGI_APPLICATION = None\r\n+\r\n+# If your Django app is behind a proxy that sets a header to specify secure\r\n+# connections, AND that proxy ensures that user-submitted headers with the\r\n+# same name are ignored (so that people can't spoof it), set this value to\r\n+# a tuple of (header_name, header_value). For any requests that come in with\r\n+# that header/value, request.is_secure() will return True.\r\n+# WARNING! Only set this if you fully understand what you're doing. Otherwise,\r\n+# you may be opening yourself up to a security risk.\r\n+SECURE_PROXY_SSL_HEADER = None\r\n+\r\n+##############\r\n+# MIDDLEWARE #\r\n+##############\r\n+\r\n+# List of middleware to use. Order is important; in the request phase, these\r\n+# middleware will be applied in the order given, and in the response\r\n+# phase the middleware will be applied in reverse order.\r\n+MIDDLEWARE = []\r\n+\r\n+############\r\n+# SESSIONS #\r\n+############\r\n+\r\n+# Cache to store session data if using the cache session backend.\r\n+SESSION_CACHE_ALIAS = 'default'\r\n+# Cookie name. This can be whatever you want.\r\n+SESSION_COOKIE_NAME = 'sessionid'\r\n+# Age of cookie, in seconds (default: 2 weeks).\r\n+SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2\r\n+# A string like \"example.com\", or None for standard domain cookie.\r\n+SESSION_COOKIE_DOMAIN = None\r\n+# Whether the session cookie should be secure (https:// only).\r\n+SESSION_COOKIE_SECURE = False\r\n+# The path of the session cookie.\r\n+SESSION_COOKIE_PATH = '/'\r\n+# Whether to use the non-RFC standard httpOnly flag (IE, FF3+, others)\r\n+SESSION_COOKIE_HTTPONLY = True\r\n+# Whether to set the flag restricting cookie leaks on cross-site requests.\r\n+# This can be 'Lax', 'Strict', or None to disable the flag.\r\n+SESSION_COOKIE_SAMESITE = 'Lax'\r\n+# Whether to save the session data on every request.\r\n+SESSION_SAVE_EVERY_REQUEST = False\r\n+# Whether a user's session cookie expires when the Web browser is closed.\r\n+SESSION_EXPIRE_AT_BROWSER_CLOSE = False\r\n+# The module to store session data\r\n+SESSION_ENGINE = 'django.contrib.sessions.backends.db'\r\n+# Directory to store session files if using the file session module. If None,\r\n+# the backend will use a sensible default.\r\n+SESSION_FILE_PATH = None\r\n+# class to serialize session data\r\n+SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'\r\n+\r\n+#########\r\n+# CACHE #\r\n+#########\r\n+\r\n+# The cache backends to use.\r\n+CACHES = {\r\n+    'default': {\r\n+        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\r\n+    }\r\n+}\r\n+CACHE_MIDDLEWARE_KEY_PREFIX = ''\r\n+CACHE_MIDDLEWARE_SECONDS = 600\r\n+CACHE_MIDDLEWARE_ALIAS = 'default'\r\n+\r\n+##################\r\n+# AUTHENTICATION #\r\n+##################\r\n+\r\n+AUTH_USER_MODEL = 'auth.User'\r\n+\r\n+AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.ModelBackend']\r\n+\r\n+LOGIN_URL = '/accounts/login/'\r\n+\r\n+LOGIN_REDIRECT_URL = '/accounts/profile/'\r\n+\r\n+LOGOUT_REDIRECT_URL = None\r\n+\r\n+# The number of days a password reset link is valid for\r\n+PASSWORD_RESET_TIMEOUT_DAYS = 3\r\n+\r\n+# the first hasher in this list is the preferred algorithm.  any\r\n+# password using different algorithms will be converted automatically\r\n+# upon login\r\n+PASSWORD_HASHERS = [\r\n+    'django.contrib.auth.hashers.PBKDF2PasswordHasher',\r\n+    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',\r\n+    'django.contrib.auth.hashers.Argon2PasswordHasher',\r\n+    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',\r\n+]\r\n+\r\n+AUTH_PASSWORD_VALIDATORS = []\r\n+\r\n+###########\r\n+# SIGNING #\r\n+###########\r\n+\r\n+SIGNING_BACKEND = 'django.core.signing.TimestampSigner'\r\n+\r\n+########\r\n+# CSRF #\r\n+########\r\n+\r\n+# Dotted path to callable to be used as view when a request is\r\n+# rejected by the CSRF middleware.\r\n+CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'\r\n+\r\n+# Settings for CSRF cookie.\r\n+CSRF_COOKIE_NAME = 'csrftoken'\r\n+CSRF_COOKIE_AGE = 60 * 60 * 24 * 7 * 52\r\n+CSRF_COOKIE_DOMAIN = None\r\n+CSRF_COOKIE_PATH = '/'\r\n+CSRF_COOKIE_SECURE = False\r\n+CSRF_COOKIE_HTTPONLY = False\r\n+CSRF_COOKIE_SAMESITE = 'Lax'\r\n+CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'\r\n+CSRF_TRUSTED_ORIGINS = []\r\n+CSRF_USE_SESSIONS = False\r\n+\r\n+############\r\n+# MESSAGES #\r\n+############\r\n+\r\n+# Class to use as messages backend\r\n+MESSAGE_STORAGE = 'django.contrib.messages.storage.fallback.FallbackStorage'\r\n+\r\n+# Default values of MESSAGE_LEVEL and MESSAGE_TAGS are defined within\r\n+# django.contrib.messages to avoid imports in this settings file.\r\n+\r\n+###########\r\n+# LOGGING #\r\n+###########\r\n+\r\n+# The callable to use to configure logging\r\n+LOGGING_CONFIG = 'logging.config.dictConfig'\r\n+\r\n+# Custom logging configuration.\r\n+LOGGING = {}\r\n+\r\n+# Default exception reporter filter class used in case none has been\r\n+# specifically assigned to the HttpRequest instance.\r\n+DEFAULT_EXCEPTION_REPORTER_FILTER = 'django.views.debug.SafeExceptionReporterFilter'\r\n+\r\n+###########\r\n+# TESTING #\r\n+###########\r\n+\r\n+# The name of the class to use to run the test suite\r\n+TEST_RUNNER = 'django.test.runner.DiscoverRunner'\r\n+\r\n+# Apps that don't need to be serialized at test database creation time\r\n+# (only apps with migrations are to start with)\r\n+TEST_NON_SERIALIZED_APPS = []\r\n+\r\n+############\r\n+# FIXTURES #\r\n+############\r\n+\r\n+# The list of directories to search for fixtures\r\n+FIXTURE_DIRS = []\r\n+\r\n+###############\r\n+# STATICFILES #\r\n+###############\r\n+\r\n+# A list of locations of additional static files\r\n+STATICFILES_DIRS = []\r\n+\r\n+# The default file storage backend used during the build process\r\n+STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'\r\n+\r\n+# List of finder classes that know how to find static files in\r\n+# various locations.\r\n+STATICFILES_FINDERS = [\r\n+    'django.contrib.staticfiles.finders.FileSystemFinder',\r\n+    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\r\n+    # 'django.contrib.staticfiles.finders.DefaultStorageFinder',\r\n+]\r\n+\r\n+##############\r\n+# MIGRATIONS #\r\n+##############\r\n+\r\n+# Migration module overrides for apps, by app label.\r\n+MIGRATION_MODULES = {}\r\n+\r\n+#################\r\n+# SYSTEM CHECKS #\r\n+#################\r\n+\r\n+# List of all issues generated by system checks that should be silenced. Light\r\n+# issues like warnings, infos or debugs will not generate a message. Silencing\r\n+# serious issues like errors and criticals does not result in hiding the\r\n+# message, but Django will not stop you from e.g. running server.\r\n+SILENCED_SYSTEM_CHECKS = []\r\n+\r\n+#######################\r\n+# SECURITY MIDDLEWARE #\r\n+#######################\r\n+SECURE_BROWSER_XSS_FILTER = False\r\n+SECURE_CONTENT_TYPE_NOSNIFF = False\r\n+SECURE_HSTS_INCLUDE_SUBDOMAINS = False\r\n+SECURE_HSTS_PRELOAD = False\r\n+SECURE_HSTS_SECONDS = 0\r\n+SECURE_REDIRECT_EXEMPT = []\r\n+SECURE_SSL_HOST = None\r\n+SECURE_SSL_REDIRECT = False\r\ndiff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\r\nindex acee9887d2..bdeec80610 100644\r\n--- a/django/conf/global_settings.py\r\n+++ b/django/conf/global_settings.py\r\n@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None\r\n \r\n # The numeric mode to set newly-uploaded files to. The value should be a mode\r\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\r\n-FILE_UPLOAD_PERMISSIONS = None\r\n+FILE_UPLOAD_PERMISSIONS = 0o644\r\n \r\n # The numeric mode to assign to newly-created directories, when uploading files.\r\n # The value should be a mode as you'd pass to os.chmod;\r\ndiff --git a/docs/ref/.backup.settings.txt b/docs/ref/.backup.settings.txt\r\nnew file mode 100644\r\nindex 0000000000..46e99af993\r\n--- /dev/null\r\n+++ b/docs/ref/.backup.settings.txt\r\n@@ -0,0 +1,3484 @@\r\n+========\r\n+Settings\r\n+========\r\n+\r\n+.. contents::\r\n+    :local:\r\n+    :depth: 1\r\n+\r\n+.. warning::\r\n+\r\n+    Be careful when you override settings, especially when the default value\r\n+    is a non-empty list or dictionary, such as :setting:`STATICFILES_FINDERS`.\r\n+    Make sure you keep the components required by the features of Django you\r\n+    wish to use.\r\n+\r\n+Core Settings\r\n+=============\r\n+\r\n+Here's a list of settings available in Django core and their default values.\r\n+Settings provided by contrib apps are listed below, followed by a topical index\r\n+of the core settings. For introductory material, see the :doc:`settings topic\r\n+guide </topics/settings>`.\r\n+\r\n+.. setting:: ABSOLUTE_URL_OVERRIDES\r\n+\r\n+``ABSOLUTE_URL_OVERRIDES``\r\n+--------------------------\r\n+\r\n+Default: ``{}`` (Empty dictionary)\r\n+\r\n+A dictionary mapping ``\"app_label.model_name\"`` strings to functions that take\r\n+a model object and return its URL. This is a way of inserting or overriding\r\n+``get_absolute_url()`` methods on a per-installation basis. Example::\r\n+\r\n+    ABSOLUTE_URL_OVERRIDES = {\r\n+        'blogs.weblog': lambda o: \"/blogs/%s/\" % o.slug,\r\n+        'news.story': lambda o: \"/stories/%s/%s/\" % (o.pub_year, o.slug),\r\n+    }\r\n+\r\n+The model name used in this setting should be all lowercase, regardless of the\r\n+case of the actual model class name.\r\n+\r\n+.. setting:: ADMINS\r\n+\r\n+``ADMINS``\r\n+----------\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+A list of all the people who get code error notifications. When\r\n+:setting:`DEBUG=False <DEBUG>` and :class:`~django.utils.log.AdminEmailHandler`\r\n+is configured in :setting:`LOGGING` (done by default), Django emails these\r\n+people the details of exceptions raised in the request/response cycle.\r\n+\r\n+Each item in the list should be a tuple of (Full name, email address). Example::\r\n+\r\n+    [('John', 'john@example.com'), ('Mary', 'mary@example.com')]\r\n+\r\n+.. setting:: ALLOWED_HOSTS\r\n+\r\n+``ALLOWED_HOSTS``\r\n+-----------------\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+A list of strings representing the host/domain names that this Django site can\r\n+serve. This is a security measure to prevent :ref:`HTTP Host header attacks\r\n+<host-headers-virtual-hosting>`, which are possible even under many\r\n+seemingly-safe web server configurations.\r\n+\r\n+Values in this list can be fully qualified names (e.g. ``'www.example.com'``),\r\n+in which case they will be matched against the request's ``Host`` header\r\n+exactly (case-insensitive, not including port). A value beginning with a period\r\n+can be used as a subdomain wildcard: ``'.example.com'`` will match\r\n+``example.com``, ``www.example.com``, and any other subdomain of\r\n+``example.com``. A value of ``'*'`` will match anything; in this case you are\r\n+responsible to provide your own validation of the ``Host`` header (perhaps in a\r\n+middleware; if so this middleware must be listed first in\r\n+:setting:`MIDDLEWARE`).\r\n+\r\n+Django also allows the `fully qualified domain name (FQDN)`_ of any entries.\r\n+Some browsers include a trailing dot in the ``Host`` header which Django\r\n+strips when performing host validation.\r\n+\r\n+.. _`fully qualified domain name (FQDN)`: https://en.wikipedia.org/wiki/Fully_qualified_domain_name\r\n+\r\n+If the ``Host`` header (or ``X-Forwarded-Host`` if\r\n+:setting:`USE_X_FORWARDED_HOST` is enabled) does not match any value in this\r\n+list, the :meth:`django.http.HttpRequest.get_host()` method will raise\r\n+:exc:`~django.core.exceptions.SuspiciousOperation`.\r\n+\r\n+When :setting:`DEBUG` is ``True`` and ``ALLOWED_HOSTS`` is empty, the host\r\n+is validated against ``['localhost', '127.0.0.1', '[::1]']``.\r\n+\r\n+``ALLOWED_HOSTS`` is also :ref:`checked when running tests\r\n+<topics-testing-advanced-multiple-hosts>`.\r\n+\r\n+This validation only applies via :meth:`~django.http.HttpRequest.get_host()`;\r\n+if your code accesses the ``Host`` header directly from ``request.META`` you\r\n+are bypassing this security protection.\r\n+\r\n+.. setting:: APPEND_SLASH\r\n+\r\n+``APPEND_SLASH``\r\n+----------------\r\n+\r\n+Default: ``True``\r\n+\r\n+When set to ``True``, if the request URL does not match any of the patterns\r\n+in the URLconf and it doesn't end in a slash, an HTTP redirect is issued to the\r\n+same URL with a slash appended. Note that the redirect may cause any data\r\n+submitted in a POST request to be lost.\r\n+\r\n+The :setting:`APPEND_SLASH` setting is only used if\r\n+:class:`~django.middleware.common.CommonMiddleware` is installed\r\n+(see :doc:`/topics/http/middleware`). See also :setting:`PREPEND_WWW`.\r\n+\r\n+.. setting:: CACHES\r\n+\r\n+``CACHES``\r\n+----------\r\n+\r\n+Default::\r\n+\r\n+    {\r\n+        'default': {\r\n+            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',\r\n+        }\r\n+    }\r\n+\r\n+A dictionary containing the settings for all caches to be used with\r\n+Django. It is a nested dictionary whose contents maps cache aliases\r\n+to a dictionary containing the options for an individual cache.\r\n+\r\n+The :setting:`CACHES` setting must configure a ``default`` cache;\r\n+any number of additional caches may also be specified. If you\r\n+are using a cache backend other than the local memory cache, or\r\n+you need to define multiple caches, other options will be required.\r\n+The following cache options are available.\r\n+\r\n+.. setting:: CACHES-BACKEND\r\n+\r\n+``BACKEND``\r\n+~~~~~~~~~~~\r\n+\r\n+Default: ``''`` (Empty string)\r\n+\r\n+The cache backend to use. The built-in cache backends are:\r\n+\r\n+* ``'django.core.cache.backends.db.DatabaseCache'``\r\n+* ``'django.core.cache.backends.dummy.DummyCache'``\r\n+* ``'django.core.cache.backends.filebased.FileBasedCache'``\r\n+* ``'django.core.cache.backends.locmem.LocMemCache'``\r\n+* ``'django.core.cache.backends.memcached.MemcachedCache'``\r\n+* ``'django.core.cache.backends.memcached.PyLibMCCache'``\r\n+\r\n+You can use a cache backend that doesn't ship with Django by setting\r\n+:setting:`BACKEND <CACHES-BACKEND>` to a fully-qualified path of a cache\r\n+backend class (i.e. ``mypackage.backends.whatever.WhateverCache``).\r\n+\r\n+.. setting:: CACHES-KEY_FUNCTION\r\n+\r\n+``KEY_FUNCTION``\r\n+~~~~~~~~~~~~~~~~\r\n+\r\n+A string containing a dotted path to a function (or any callable) that defines how to\r\n+compose a prefix, version and key into a final cache key. The default\r\n+implementation is equivalent to the function::\r\n+\r\n+    def make_key(key, key_prefix, version):\r\n+        return ':'.join([key_prefix, str(version), key])\r\n+\r\n+You may use any key function you want, as long as it has the same\r\n+argument signature.\r\n+\r\n+See the :ref:`cache documentation <cache_key_transformation>` for more\r\n+information.\r\n+\r\n+.. setting:: CACHES-KEY_PREFIX\r\n+\r\n+``KEY_PREFIX``\r\n+~~~~~~~~~~~~~~\r\n+\r\n+Default: ``''`` (Empty string)\r\n+\r\n+A string that will be automatically included (prepended by default) to\r\n+all cache keys used by the Django server.\r\n+\r\n+See the :ref:`cache documentation <cache_key_prefixing>` for more information.\r\n+\r\n+.. setting:: CACHES-LOCATION\r\n+\r\n+``LOCATION``\r\n+~~~~~~~~~~~~\r\n+\r\n+Default: ``''`` (Empty string)\r\n+\r\n+The location of the cache to use. This might be the directory for a\r\n+file system cache, a host and port for a memcache server, or simply an\r\n+identifying name for a local memory cache. e.g.::\r\n+\r\n+    CACHES = {\r\n+        'default': {\r\n+            'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',\r\n+            'LOCATION': '/var/tmp/django_cache',\r\n+        }\r\n+    }\r\n+\r\n+.. setting:: CACHES-OPTIONS\r\n+\r\n+``OPTIONS``\r\n+~~~~~~~~~~~\r\n+\r\n+Default: ``None``\r\n+\r\n+Extra parameters to pass to the cache backend. Available parameters\r\n+vary depending on your cache backend.\r\n+\r\n+Some information on available parameters can be found in the\r\n+:ref:`cache arguments <cache_arguments>` documentation. For more information,\r\n+consult your backend module's own documentation.\r\n+\r\n+.. setting:: CACHES-TIMEOUT\r\n+\r\n+``TIMEOUT``\r\n+~~~~~~~~~~~\r\n+\r\n+Default: ``300``\r\n+\r\n+The number of seconds before a cache entry is considered stale. If the value of\r\n+this settings is ``None``, cache entries will not expire.\r\n+\r\n+.. setting:: CACHES-VERSION\r\n+\r\n+``VERSION``\r\n+~~~~~~~~~~~\r\n+\r\n+Default: ``1``\r\n+\r\n+The default version number for cache keys generated by the Django server.\r\n+\r\n+See the :ref:`cache documentation <cache_versioning>` for more information.\r\n+\r\n+.. setting:: CACHE_MIDDLEWARE_ALIAS\r\n+\r\n+``CACHE_MIDDLEWARE_ALIAS``\r\n+--------------------------\r\n+\r\n+Default: ``default``\r\n+\r\n+The cache connection to use for the :ref:`cache middleware\r\n+<the-per-site-cache>`.\r\n+\r\n+.. setting:: CACHE_MIDDLEWARE_KEY_PREFIX\r\n+\r\n+``CACHE_MIDDLEWARE_KEY_PREFIX``\r\n+-------------------------------\r\n+\r\n+Default: ``''`` (Empty string)\r\n+\r\n+A string which will be prefixed to the cache keys generated by the :ref:`cache\r\n+middleware <the-per-site-cache>`. This prefix is combined with the\r\n+:setting:`KEY_PREFIX <CACHES-KEY_PREFIX>` setting; it does not replace it.\r\n+\r\n+See :doc:`/topics/cache`.\r\n+\r\n+.. setting:: CACHE_MIDDLEWARE_SECONDS\r\n+\r\n+``CACHE_MIDDLEWARE_SECONDS``\r\n+----------------------------\r\n+\r\n+Default: ``600``\r\n+\r\n+The default number of seconds to cache a page for the :ref:`cache middleware\r\n+<the-per-site-cache>`.\r\n+\r\n+See :doc:`/topics/cache`.\r\n+\r\n+.. _settings-csrf:\r\n+\r\n+.. setting:: CSRF_COOKIE_AGE\r\n+\r\n+``CSRF_COOKIE_AGE``\r\n+-------------------\r\n+\r\n+Default: ``31449600`` (approximately 1 year, in seconds)\r\n+\r\n+The age of CSRF cookies, in seconds.\r\n+\r\n+The reason for setting a long-lived expiration time is to avoid problems in\r\n+the case of a user closing a browser or bookmarking a page and then loading\r\n+that page from a browser cache. Without persistent cookies, the form submission\r\n+would fail in this case.\r\n+\r\n+Some browsers (specifically Internet Explorer) can disallow the use of\r\n+persistent cookies or can have the indexes to the cookie jar corrupted on disk,\r\n+thereby causing CSRF protection checks to (sometimes intermittently) fail.\r\n+Change this setting to ``None`` to use session-based CSRF cookies, which\r\n+keep the cookies in-memory instead of on persistent storage.\r\n+\r\n+.. setting:: CSRF_COOKIE_DOMAIN\r\n+\r\n+``CSRF_COOKIE_DOMAIN``\r\n+----------------------\r\n+\r\n+Default: ``None``\r\n+\r\n+The domain to be used when setting the CSRF cookie.  This can be useful for\r\n+easily allowing cross-subdomain requests to be excluded from the normal cross\r\n+site request forgery protection.  It should be set to a string such as\r\n+``\"example.com\"`` to allow a POST request from a form on one subdomain to be\r\n+accepted by a view served from another subdomain.\r\n+\r\n+Please note that the presence of this setting does not imply that Django's CSRF\r\n+protection is safe from cross-subdomain attacks by default - please see the\r\n+:ref:`CSRF limitations <csrf-limitations>` section.\r\n+\r\n+.. setting:: CSRF_COOKIE_HTTPONLY\r\n+\r\n+``CSRF_COOKIE_HTTPONLY``\r\n+------------------------\r\n+\r\n+Default: ``False``\r\n+\r\n+Whether to use ``HttpOnly`` flag on the CSRF cookie. If this is set to\r\n+``True``, client-side JavaScript will not to be able to access the CSRF cookie.\r\n+\r\n+Designating the CSRF cookie as ``HttpOnly`` doesn't offer any practical\r\n+protection because CSRF is only to protect against cross-domain attacks. If an\r\n+attacker can read the cookie via JavaScript, they're already on the same domain\r\n+as far as the browser knows, so they can do anything they like anyway. (XSS is\r\n+a much bigger hole than CSRF.)\r\n+\r\n+Although the setting offers little practical benefit, it's sometimes required\r\n+by security auditors.\r\n+\r\n+If you enable this and need to send the value of the CSRF token with an AJAX\r\n+request, your JavaScript must pull the value :ref:`from a hidden CSRF token\r\n+form input <acquiring-csrf-token-from-html>` instead of :ref:`from the cookie\r\n+<acquiring-csrf-token-from-cookie>`.\r\n+\r\n+See :setting:`SESSION_COOKIE_HTTPONLY` for details on ``HttpOnly``.\r\n+\r\n+.. setting:: CSRF_COOKIE_NAME\r\n+\r\n+``CSRF_COOKIE_NAME``\r\n+--------------------\r\n+\r\n+Default: ``'csrftoken'``\r\n+\r\n+The name of the cookie to use for the CSRF authentication token. This can be\r\n+whatever you want (as long as it's different from the other cookie names in\r\n+your application). See :doc:`/ref/csrf`.\r\n+\r\n+.. setting:: CSRF_COOKIE_PATH\r\n+\r\n+``CSRF_COOKIE_PATH``\r\n+--------------------\r\n+\r\n+Default: ``'/'``\r\n+\r\n+The path set on the CSRF cookie. This should either match the URL path of your\r\n+Django installation or be a parent of that path.\r\n+\r\n+This is useful if you have multiple Django instances running under the same\r\n+hostname. They can use different cookie paths, and each instance will only see\r\n+its own CSRF cookie.\r\n+\r\n+.. setting:: CSRF_COOKIE_SAMESITE\r\n+\r\n+``CSRF_COOKIE_SAMESITE``\r\n+------------------------\r\n+\r\n+Default: ``'Lax'``\r\n+\r\n+The value of the `SameSite`_ flag on the CSRF cookie. This flag prevents the\r\n+cookie from being sent in cross-site requests.\r\n+\r\n+See :setting:`SESSION_COOKIE_SAMESITE` for details about ``SameSite``.\r\n+\r\n+.. setting:: CSRF_COOKIE_SECURE\r\n+\r\n+``CSRF_COOKIE_SECURE``\r\n+----------------------\r\n+\r\n+Default: ``False``\r\n+\r\n+Whether to use a secure cookie for the CSRF cookie. If this is set to ``True``,\r\n+the cookie will be marked as \"secure,\" which means browsers may ensure that the\r\n+cookie is only sent with an HTTPS connection.\r\n+\r\n+.. setting:: CSRF_USE_SESSIONS\r\n+\r\n+``CSRF_USE_SESSIONS``\r\n+---------------------\r\n+\r\n+Default: ``False``\r\n+\r\n+Whether to store the CSRF token in the user's session instead of in a cookie.\r\n+It requires the use of :mod:`django.contrib.sessions`.\r\n+\r\n+Storing the CSRF token in a cookie (Django's default) is safe, but storing it\r\n+in the session is common practice in other web frameworks and therefore\r\n+sometimes demanded by security auditors.\r\n+\r\n+Since the :ref:`default error views <error-views>` require the CSRF token,\r\n+:class:`~django.contrib.sessions.middleware.SessionMiddleware` must appear in\r\n+:setting:`MIDDLEWARE` before any middleware that may raise an exception to\r\n+trigger an error view (such as :exc:`~django.core.exceptions.PermissionDenied`)\r\n+if you're using ``CSRF_USE_SESSIONS``. See :ref:`middleware-ordering`.\r\n+\r\n+.. setting:: CSRF_FAILURE_VIEW\r\n+\r\n+``CSRF_FAILURE_VIEW``\r\n+---------------------\r\n+\r\n+Default: ``'django.views.csrf.csrf_failure'``\r\n+\r\n+A dotted path to the view function to be used when an incoming request is\r\n+rejected by the :doc:`CSRF protection </ref/csrf>`. The function should have\r\n+this signature::\r\n+\r\n+    def csrf_failure(request, reason=\"\"):\r\n+        ...\r\n+\r\n+where ``reason`` is a short message (intended for developers or logging, not\r\n+for end users) indicating the reason the request was rejected. It should return\r\n+an :class:`~django.http.HttpResponseForbidden`.\r\n+\r\n+``django.views.csrf.csrf_failure()`` accepts an additional ``template_name``\r\n+parameter that defaults to ``'403_csrf.html'``. If a template with that name\r\n+exists, it will be used to render the page.\r\n+\r\n+.. setting:: CSRF_HEADER_NAME\r\n+\r\n+``CSRF_HEADER_NAME``\r\n+--------------------\r\n+\r\n+Default: ``'HTTP_X_CSRFTOKEN'``\r\n+\r\n+The name of the request header used for CSRF authentication.\r\n+\r\n+As with other HTTP headers in ``request.META``, the header name received from\r\n+the server is normalized by converting all characters to uppercase, replacing\r\n+any hyphens with underscores, and adding an ``'HTTP_'`` prefix to the name.\r\n+For example, if your client sends a ``'X-XSRF-TOKEN'`` header, the setting\r\n+should be ``'HTTP_X_XSRF_TOKEN'``.\r\n+\r\n+.. setting:: CSRF_TRUSTED_ORIGINS\r\n+\r\n+``CSRF_TRUSTED_ORIGINS``\r\n+------------------------\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+A list of hosts which are trusted origins for unsafe requests (e.g. ``POST``).\r\n+For a :meth:`secure <django.http.HttpRequest.is_secure>` unsafe\r\n+request, Django's CSRF protection requires that the request have a ``Referer``\r\n+header that matches the origin present in the ``Host`` header. This prevents,\r\n+for example, a ``POST`` request from ``subdomain.example.com`` from succeeding\r\n+against ``api.example.com``. If you need cross-origin unsafe requests over\r\n+HTTPS, continuing the example, add ``\"subdomain.example.com\"`` to this list.\r\n+The setting also supports subdomains, so you could add ``\".example.com\"``, for\r\n+example, to allow access from all subdomains of ``example.com``.\r\n+\r\n+.. setting:: DATABASES\r\n+\r\n+``DATABASES``\r\n+-------------\r\n+\r\n+Default: ``{}`` (Empty dictionary)\r\n+\r\n+A dictionary containing the settings for all databases to be used with\r\n+Django. It is a nested dictionary whose contents map a database alias\r\n+to a dictionary containing the options for an individual database.\r\n+\r\n+The :setting:`DATABASES` setting must configure a ``default`` database;\r\n+any number of additional databases may also be specified.\r\n+\r\n+The simplest possible settings file is for a single-database setup using\r\n+SQLite. This can be configured using the following::\r\n+\r\n+    DATABASES = {\r\n+        'default': {\r\n+            'ENGINE': 'django.db.backends.sqlite3',\r\n+            'NAME': 'mydatabase',\r\n+        }\r\n+    }\r\n+\r\n+When connecting to other database backends, such as MySQL, Oracle, or\r\n+PostgreSQL, additional connection parameters will be required. See\r\n+the :setting:`ENGINE <DATABASE-ENGINE>` setting below on how to specify\r\n+other database types. This example is for PostgreSQL::\r\n+\r\n+    DATABASES = {\r\n+        'default': {\r\n+            'ENGINE': 'django.db.backends.postgresql',\r\n+            'NAME': 'mydatabase',\r\n+            'USER': 'mydatabaseuser',\r\n+            'PASSWORD': 'mypassword',\r\n+            'HOST': '127.0.0.1',\r\n+            'PORT': '5432',\r\n+        }\r\n+    }\r\n+\r\n+The following inner options that may be required for more complex\r\n+configurations are available:\r\n+\r\n+.. setting:: DATABASE-ATOMIC_REQUESTS\r\n+\r\n+``ATOMIC_REQUESTS``\r\n+~~~~~~~~~~~~~~~~~~~\r\n+\r\n+Default: ``False``\r\n+\r\n+Set this to ``True`` to wrap each view in a transaction on this database. See\r\n+:ref:`tying-transactions-to-http-requests`.\r\n+\r\n+.. setting:: DATABASE-AUTOCOMMIT\r\n+\r\n+``AUTOCOMMIT``\r\n+~~~~~~~~~~~~~~\r\n+\r\n+Default: ``True``\r\n+\r\n+Set this to ``False`` if you want to :ref:`disable Django's transaction\r\n+management <deactivate-transaction-management>` and implement your own.\r\n+\r\n+.. setting:: DATABASE-ENGINE\r\n+\r\n+``ENGINE``\r\n+~~~~~~~~~~\r\n+\r\n+Default: ``''`` (Empty string)\r\n+\r\n+The database backend to use. The built-in database backends are:\r\n+\r\n+* ``'django.db.backends.postgresql'``\r\n+* ``'django.db.backends.mysql'``\r\n+* ``'django.db.backends.sqlite3'``\r\n+* ``'django.db.backends.oracle'``\r\n+\r\n+You can use a database backend that doesn't ship with Django by setting\r\n+``ENGINE`` to a fully-qualified path (i.e. ``mypackage.backends.whatever``).\r\n+\r\n+.. setting:: HOST\r\n+\r\n+``HOST``\r\n+~~~~~~~~\r\n+\r\n+Default: ``''`` (Empty string)\r\n+\r\n+Which host to use when connecting to the database. An empty string means\r\n+localhost. Not used with SQLite.\r\n+\r\n+If this value starts with a forward slash (``'/'``) and you're using MySQL,\r\n+MySQL will connect via a Unix socket to the specified socket. For example::\r\n+\r\n+    \"HOST\": '/var/run/mysql'\r\n+\r\n+If you're using MySQL and this value *doesn't* start with a forward slash, then\r\n+this value is assumed to be the host.\r\n+\r\n+If you're using PostgreSQL, by default (empty :setting:`HOST`), the connection\r\n+to the database is done through UNIX domain sockets ('local' lines in\r\n+``pg_hba.conf``). If your UNIX domain socket is not in the standard location,\r\n+use the same value of ``unix_socket_directory`` from ``postgresql.conf``.\r\n+If you want to connect through TCP sockets, set :setting:`HOST` to 'localhost'\r\n+or '127.0.0.1' ('host' lines in ``pg_hba.conf``).\r\n+On Windows, you should always define :setting:`HOST`, as UNIX domain sockets\r\n+are not available.\r\n+\r\n+.. setting:: NAME\r\n+\r\n+``NAME``\r\n+~~~~~~~~\r\n+\r\n+Default: ``''`` (Empty string)\r\n+\r\n+The name of the database to use. For SQLite, it's the full path to the database\r\n+file. When specifying the path, always use forward slashes, even on Windows\r\n+(e.g. ``C:/homes/user/mysite/sqlite3.db``).\r\n+\r\n+.. setting:: CONN_MAX_AGE\r\n+\r\n+``CONN_MAX_AGE``\r\n+~~~~~~~~~~~~~~~~\r\n+\r\n+Default: ``0``\r\n+\r\n+The lifetime of a database connection, in seconds. Use ``0`` to close database\r\n+connections at the end of each request \u2014 Django's historical behavior \u2014 and\r\n+``None`` for unlimited persistent connections.\r\n+\r\n+.. setting:: OPTIONS\r\n+\r\n+``OPTIONS``\r\n+~~~~~~~~~~~\r\n+\r\n+Default: ``{}`` (Empty dictionary)\r\n+\r\n+Extra parameters to use when connecting to the database. Available parameters\r\n+vary depending on your database backend.\r\n+\r\n+Some information on available parameters can be found in the\r\n+:doc:`Database Backends </ref/databases>` documentation. For more information,\r\n+consult your backend module's own documentation.\r\n+\r\n+.. setting:: PASSWORD\r\n+\r\n+``PASSWORD``\r\n+~~~~~~~~~~~~\r\n+\r\n+Default: ``''`` (Empty string)\r\n+\r\n+The password to use when connecting to the database. Not used with SQLite.\r\n+\r\n+.. setting:: PORT\r\n+\r\n+``PORT``\r\n+~~~~~~~~\r\n+\r\n+Default: ``''`` (Empty string)\r\n+\r\n+The port to use when connecting to the database. An empty string means the\r\n+default port. Not used with SQLite.\r\n+\r\n+.. setting:: DATABASE-TIME_ZONE\r\n+\r\n+``TIME_ZONE``\r\n+~~~~~~~~~~~~~\r\n+\r\n+Default: ``None``\r\n+\r\n+A string representing the time zone for datetimes stored in this database\r\n+(assuming that it doesn't support time zones) or ``None``. This inner option of\r\n+the :setting:`DATABASES` setting accepts the same values as the general\r\n+:setting:`TIME_ZONE` setting.\r\n+\r\n+This allows interacting with third-party databases that store datetimes in\r\n+local time rather than UTC. To avoid issues around DST changes, you shouldn't\r\n+set this option for databases managed by Django.\r\n+\r\n+When :setting:`USE_TZ` is ``True`` and the database doesn't support time zones\r\n+(e.g. SQLite, MySQL, Oracle), Django reads and writes datetimes in local time\r\n+according to this option if it is set and in UTC if it isn't.\r\n+\r\n+When :setting:`USE_TZ` is ``True`` and the database supports time zones (e.g.\r\n+PostgreSQL), it is an error to set this option.\r\n+\r\n+When :setting:`USE_TZ` is ``False``, it is an error to set this option.\r\n+\r\n+.. setting:: DATABASE-DISABLE_SERVER_SIDE_CURSORS\r\n+\r\n+``DISABLE_SERVER_SIDE_CURSORS``\r\n+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n+\r\n+Default: ``False``\r\n+\r\n+Set this to ``True`` if you want to disable the use of server-side cursors with\r\n+:meth:`.QuerySet.iterator`. :ref:`transaction-pooling-server-side-cursors`\r\n+describes the use case.\r\n+\r\n+This is a PostgreSQL-specific setting.\r\n+\r\n+.. setting:: USER\r\n+\r\n+``USER``\r\n+~~~~~~~~\r\n+\r\n+Default: ``''`` (Empty string)\r\n+\r\n+The username to use when connecting to the database. Not used with SQLite.\r\n+\r\n+.. setting:: DATABASE-TEST\r\n+\r\n+``TEST``\r\n+~~~~~~~~\r\n+\r\n+Default: ``{}`` (Empty dictionary)\r\n+\r\n+A dictionary of settings for test databases; for more details about the\r\n+creation and use of test databases, see :ref:`the-test-database`.\r\n+\r\n+Here's an example with a test database configuration::\r\n+\r\n+    DATABASES = {\r\n+        'default': {\r\n+            'ENGINE': 'django.db.backends.postgresql',\r\n+            'USER': 'mydatabaseuser',\r\n+            'NAME': 'mydatabase',\r\n+            'TEST': {\r\n+                'NAME': 'mytestdatabase',\r\n+            },\r\n+        },\r\n+    }\r\n+\r\n+The following keys in the ``TEST`` dictionary are available:\r\n+\r\n+.. setting:: TEST_CHARSET\r\n+\r\n+``CHARSET``\r\n+^^^^^^^^^^^\r\n+\r\n+Default: ``None``\r\n+\r\n+The character set encoding used to create the test database. The value of this\r\n+string is passed directly through to the database, so its format is\r\n+backend-specific.\r\n+\r\n+Supported by the PostgreSQL_ (``postgresql``) and MySQL_ (``mysql``) backends.\r\n+\r\n+.. _PostgreSQL: https://www.postgresql.org/docs/current/static/multibyte.html\r\n+.. _MySQL: https://dev.mysql.com/doc/refman/en/charset-database.html\r\n+\r\n+.. setting:: TEST_COLLATION\r\n+\r\n+``COLLATION``\r\n+^^^^^^^^^^^^^\r\n+\r\n+Default: ``None``\r\n+\r\n+The collation order to use when creating the test database. This value is\r\n+passed directly to the backend, so its format is backend-specific.\r\n+\r\n+Only supported for the ``mysql`` backend (see the `MySQL manual`_ for details).\r\n+\r\n+.. _MySQL manual: MySQL_\r\n+\r\n+.. setting:: TEST_DEPENDENCIES\r\n+\r\n+``DEPENDENCIES``\r\n+^^^^^^^^^^^^^^^^\r\n+\r\n+Default: ``['default']``, for all databases other than ``default``,\r\n+which has no dependencies.\r\n+\r\n+The creation-order dependencies of the database. See the documentation\r\n+on :ref:`controlling the creation order of test databases\r\n+<topics-testing-creation-dependencies>` for details.\r\n+\r\n+.. setting:: TEST_MIRROR\r\n+\r\n+``MIRROR``\r\n+^^^^^^^^^^\r\n+\r\n+Default: ``None``\r\n+\r\n+The alias of the database that this database should mirror during\r\n+testing.\r\n+\r\n+This setting exists to allow for testing of primary/replica\r\n+(referred to as master/slave by some databases)\r\n+configurations of multiple databases. See the documentation on\r\n+:ref:`testing primary/replica configurations\r\n+<topics-testing-primaryreplica>` for details.\r\n+\r\n+.. setting:: TEST_NAME\r\n+\r\n+``NAME``\r\n+^^^^^^^^\r\n+\r\n+Default: ``None``\r\n+\r\n+The name of database to use when running the test suite.\r\n+\r\n+If the default value (``None``) is used with the SQLite database engine, the\r\n+tests will use a memory resident database. For all other database engines the\r\n+test database will use the name ``'test_' + DATABASE_NAME``.\r\n+\r\n+See :ref:`the-test-database`.\r\n+\r\n+.. setting:: TEST_SERIALIZE\r\n+\r\n+``SERIALIZE``\r\n+^^^^^^^^^^^^^\r\n+\r\n+Boolean value to control whether or not the default test runner serializes the\r\n+database into an in-memory JSON string before running tests (used to restore\r\n+the database state between tests if you don't have transactions). You can set\r\n+this to ``False`` to speed up creation time if you don't have any test classes\r\n+with :ref:`serialized_rollback=True <test-case-serialized-rollback>`.\r\n+\r\n+.. setting:: TEST_TEMPLATE\r\n+\r\n+``TEMPLATE``\r\n+^^^^^^^^^^^^\r\n+\r\n+This is a PostgreSQL-specific setting.\r\n+\r\n+The name of a `template`_ (e.g. ``'template0'``) from which to create the test\r\n+database.\r\n+\r\n+.. _template: https://www.postgresql.org/docs/current/static/sql-createdatabase.html\r\n+\r\n+.. setting:: TEST_CREATE\r\n+\r\n+``CREATE_DB``\r\n+^^^^^^^^^^^^^\r\n+\r\n+Default: ``True``\r\n+\r\n+This is an Oracle-specific setting.\r\n+\r\n+If it is set to ``False``, the test tablespaces won't be automatically created\r\n+at the beginning of the tests or dropped at the end.\r\n+\r\n+.. setting:: TEST_USER_CREATE\r\n+\r\n+``CREATE_USER``\r\n+^^^^^^^^^^^^^^^\r\n+\r\n+Default: ``True``\r\n+\r\n+This is an Oracle-specific setting.\r\n+\r\n+If it is set to ``False``, the test user won't be automatically created at the\r\n+beginning of the tests and dropped at the end.\r\n+\r\n+.. setting:: TEST_USER\r\n+\r\n+``USER``\r\n+^^^^^^^^\r\n+\r\n+Default: ``None``\r\n+\r\n+This is an Oracle-specific setting.\r\n+\r\n+The username to use when connecting to the Oracle database that will be used\r\n+when running tests. If not provided, Django will use ``'test_' + USER``.\r\n+\r\n+.. setting:: TEST_PASSWD\r\n+\r\n+``PASSWORD``\r\n+^^^^^^^^^^^^\r\n+\r\n+Default: ``None``\r\n+\r\n+This is an Oracle-specific setting.\r\n+\r\n+The password to use when connecting to the Oracle database that will be used\r\n+when running tests. If not provided, Django will generate a random password.\r\n+\r\n+.. setting:: TEST_ORACLE_MANAGED_FILES\r\n+\r\n+``ORACLE_MANAGED_FILES``\r\n+^^^^^^^^^^^^^^^^^^^^^^^^\r\n+\r\n+.. versionadded:: 2.2\r\n+\r\n+Default: ``False``\r\n+\r\n+This is an Oracle-specific setting.\r\n+\r\n+If set to ``True``, Oracle Managed Files (OMF) tablespaces will be used.\r\n+:setting:`DATAFILE` and :setting:`DATAFILE_TMP` will be ignored.\r\n+\r\n+.. setting:: TEST_TBLSPACE\r\n+\r\n+``TBLSPACE``\r\n+^^^^^^^^^^^^\r\n+\r\n+Default: ``None``\r\n+\r\n+This is an Oracle-specific setting.\r\n+\r\n+The name of the tablespace that will be used when running tests. If not\r\n+provided, Django will use ``'test_' + USER``.\r\n+\r\n+.. setting:: TEST_TBLSPACE_TMP\r\n+\r\n+``TBLSPACE_TMP``\r\n+^^^^^^^^^^^^^^^^\r\n+\r\n+Default: ``None``\r\n+\r\n+This is an Oracle-specific setting.\r\n+\r\n+The name of the temporary tablespace that will be used when running tests. If\r\n+not provided, Django will use ``'test_' + USER + '_temp'``.\r\n+\r\n+.. setting:: DATAFILE\r\n+\r\n+``DATAFILE``\r\n+^^^^^^^^^^^^\r\n+\r\n+Default: ``None``\r\n+\r\n+This is an Oracle-specific setting.\r\n+\r\n+The name of the datafile to use for the TBLSPACE. If not provided, Django will\r\n+use ``TBLSPACE + '.dbf'``.\r\n+\r\n+.. setting:: DATAFILE_TMP\r\n+\r\n+``DATAFILE_TMP``\r\n+^^^^^^^^^^^^^^^^\r\n+\r\n+Default: ``None``\r\n+\r\n+This is an Oracle-specific setting.\r\n+\r\n+The name of the datafile to use for the TBLSPACE_TMP. If not provided, Django\r\n+will use ``TBLSPACE_TMP + '.dbf'``.\r\n+\r\n+.. setting:: DATAFILE_MAXSIZE\r\n+\r\n+``DATAFILE_MAXSIZE``\r\n+^^^^^^^^^^^^^^^^^^^^\r\n+\r\n+Default: ``'500M'``\r\n+\r\n+This is an Oracle-specific setting.\r\n+\r\n+The maximum size that the DATAFILE is allowed to grow to.\r\n+\r\n+.. setting:: DATAFILE_TMP_MAXSIZE\r\n+\r\n+``DATAFILE_TMP_MAXSIZE``\r\n+^^^^^^^^^^^^^^^^^^^^^^^^\r\n+\r\n+Default: ``'500M'``\r\n+\r\n+This is an Oracle-specific setting.\r\n+\r\n+The maximum size that the DATAFILE_TMP is allowed to grow to.\r\n+\r\n+.. setting:: DATAFILE_SIZE\r\n+\r\n+``DATAFILE_SIZE``\r\n+^^^^^^^^^^^^^^^^^\r\n+\r\n+Default: ``'50M'``\r\n+\r\n+This is an Oracle-specific setting.\r\n+\r\n+The initial size of the DATAFILE.\r\n+\r\n+.. setting:: DATAFILE_TMP_SIZE\r\n+\r\n+``DATAFILE_TMP_SIZE``\r\n+^^^^^^^^^^^^^^^^^^^^^\r\n+\r\n+Default: ``'50M'``\r\n+\r\n+This is an Oracle-specific setting.\r\n+\r\n+The initial size of the DATAFILE_TMP.\r\n+\r\n+.. setting:: DATAFILE_EXTSIZE\r\n+\r\n+``DATAFILE_EXTSIZE``\r\n+^^^^^^^^^^^^^^^^^^^^\r\n+\r\n+Default: ``'25M'``\r\n+\r\n+This is an Oracle-specific setting.\r\n+\r\n+The amount by which the DATAFILE is extended when more space is required.\r\n+\r\n+.. setting:: DATAFILE_TMP_EXTSIZE\r\n+\r\n+``DATAFILE_TMP_EXTSIZE``\r\n+^^^^^^^^^^^^^^^^^^^^^^^^\r\n+\r\n+Default: ``'25M'``\r\n+\r\n+This is an Oracle-specific setting.\r\n+\r\n+The amount by which the DATAFILE_TMP is extended when more space is required.\r\n+\r\n+.. setting:: DATA_UPLOAD_MAX_MEMORY_SIZE\r\n+\r\n+DATA_UPLOAD_MAX_MEMORY_SIZE\r\n+---------------------------\r\n+\r\n+Default: ``2621440`` (i.e. 2.5 MB).\r\n+\r\n+The maximum size in bytes that a request body may be before a\r\n+:exc:`~django.core.exceptions.SuspiciousOperation` (``RequestDataTooBig``) is\r\n+raised. The check is done when accessing ``request.body`` or ``request.POST``\r\n+and is calculated against the total request size excluding any file upload\r\n+data. You can set this to ``None`` to disable the check. Applications that are\r\n+expected to receive unusually large form posts should tune this setting.\r\n+\r\n+The amount of request data is correlated to the amount of memory needed to\r\n+process the request and populate the GET and POST dictionaries. Large requests\r\n+could be used as a denial-of-service attack vector if left unchecked. Since web\r\n+servers don't typically perform deep request inspection, it's not possible to\r\n+perform a similar check at that level.\r\n+\r\n+See also :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`.\r\n+\r\n+.. setting:: DATA_UPLOAD_MAX_NUMBER_FIELDS\r\n+\r\n+DATA_UPLOAD_MAX_NUMBER_FIELDS\r\n+-----------------------------\r\n+\r\n+Default: ``1000``\r\n+\r\n+The maximum number of parameters that may be received via GET or POST before a\r\n+:exc:`~django.core.exceptions.SuspiciousOperation` (``TooManyFields``) is\r\n+raised. You can set this to ``None`` to disable the check. Applications that\r\n+are expected to receive an unusually large number of form fields should tune\r\n+this setting.\r\n+\r\n+The number of request parameters is correlated to the amount of time needed to\r\n+process the request and populate the GET and POST dictionaries. Large requests\r\n+could be used as a denial-of-service attack vector if left unchecked. Since web\r\n+servers don't typically perform deep request inspection, it's not possible to\r\n+perform a similar check at that level.\r\n+\r\n+.. setting:: DATABASE_ROUTERS\r\n+\r\n+``DATABASE_ROUTERS``\r\n+--------------------\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+The list of routers that will be used to determine which database\r\n+to use when performing a database query.\r\n+\r\n+See the documentation on :ref:`automatic database routing in multi\r\n+database configurations <topics-db-multi-db-routing>`.\r\n+\r\n+.. setting:: DATE_FORMAT\r\n+\r\n+``DATE_FORMAT``\r\n+---------------\r\n+\r\n+Default: ``'N j, Y'`` (e.g. ``Feb. 4, 2003``)\r\n+\r\n+The default formatting to use for displaying date fields in any part of the\r\n+system. Note that if :setting:`USE_L10N` is set to ``True``, then the\r\n+locale-dictated format has higher precedence and will be applied instead. See\r\n+:tfilter:`allowed date format strings <date>`.\r\n+\r\n+See also :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT` and :setting:`SHORT_DATE_FORMAT`.\r\n+\r\n+.. setting:: DATE_INPUT_FORMATS\r\n+\r\n+``DATE_INPUT_FORMATS``\r\n+----------------------\r\n+\r\n+Default::\r\n+\r\n+    [\r\n+        '%Y-%m-%d', '%m/%d/%Y', '%m/%d/%y', # '2006-10-25', '10/25/2006', '10/25/06'\r\n+        '%b %d %Y', '%b %d, %Y',            # 'Oct 25 2006', 'Oct 25, 2006'\r\n+        '%d %b %Y', '%d %b, %Y',            # '25 Oct 2006', '25 Oct, 2006'\r\n+        '%B %d %Y', '%B %d, %Y',            # 'October 25 2006', 'October 25, 2006'\r\n+        '%d %B %Y', '%d %B, %Y',            # '25 October 2006', '25 October, 2006'\r\n+    ]\r\n+\r\n+A list of formats that will be accepted when inputting data on a date field.\r\n+Formats will be tried in order, using the first valid one. Note that these\r\n+format strings use Python's :ref:`datetime module syntax\r\n+<strftime-strptime-behavior>`, not the format strings from the :tfilter:`date`\r\n+template filter.\r\n+\r\n+When :setting:`USE_L10N` is ``True``, the locale-dictated format has higher\r\n+precedence and will be applied instead.\r\n+\r\n+See also :setting:`DATETIME_INPUT_FORMATS` and :setting:`TIME_INPUT_FORMATS`.\r\n+\r\n+.. setting:: DATETIME_FORMAT\r\n+\r\n+``DATETIME_FORMAT``\r\n+-------------------\r\n+\r\n+Default: ``'N j, Y, P'`` (e.g. ``Feb. 4, 2003, 4 p.m.``)\r\n+\r\n+The default formatting to use for displaying datetime fields in any part of the\r\n+system. Note that if :setting:`USE_L10N` is set to ``True``, then the\r\n+locale-dictated format has higher precedence and will be applied instead. See\r\n+:tfilter:`allowed date format strings <date>`.\r\n+\r\n+See also :setting:`DATE_FORMAT`, :setting:`TIME_FORMAT` and :setting:`SHORT_DATETIME_FORMAT`.\r\n+\r\n+.. setting:: DATETIME_INPUT_FORMATS\r\n+\r\n+``DATETIME_INPUT_FORMATS``\r\n+--------------------------\r\n+\r\n+Default::\r\n+\r\n+    [\r\n+        '%Y-%m-%d %H:%M:%S',     # '2006-10-25 14:30:59'\r\n+        '%Y-%m-%d %H:%M:%S.%f',  # '2006-10-25 14:30:59.000200'\r\n+        '%Y-%m-%d %H:%M',        # '2006-10-25 14:30'\r\n+        '%Y-%m-%d',              # '2006-10-25'\r\n+        '%m/%d/%Y %H:%M:%S',     # '10/25/2006 14:30:59'\r\n+        '%m/%d/%Y %H:%M:%S.%f',  # '10/25/2006 14:30:59.000200'\r\n+        '%m/%d/%Y %H:%M',        # '10/25/2006 14:30'\r\n+        '%m/%d/%Y',              # '10/25/2006'\r\n+        '%m/%d/%y %H:%M:%S',     # '10/25/06 14:30:59'\r\n+        '%m/%d/%y %H:%M:%S.%f',  # '10/25/06 14:30:59.000200'\r\n+        '%m/%d/%y %H:%M',        # '10/25/06 14:30'\r\n+        '%m/%d/%y',              # '10/25/06'\r\n+    ]\r\n+\r\n+A list of formats that will be accepted when inputting data on a datetime\r\n+field. Formats will be tried in order, using the first valid one. Note that\r\n+these format strings use Python's :ref:`datetime module syntax\r\n+<strftime-strptime-behavior>`, not the format strings from the :tfilter:`date`\r\n+template filter.\r\n+\r\n+When :setting:`USE_L10N` is ``True``, the locale-dictated format has higher\r\n+precedence and will be applied instead.\r\n+\r\n+See also :setting:`DATE_INPUT_FORMATS` and :setting:`TIME_INPUT_FORMATS`.\r\n+\r\n+.. setting:: DEBUG\r\n+\r\n+``DEBUG``\r\n+---------\r\n+\r\n+Default: ``False``\r\n+\r\n+A boolean that turns on/off debug mode.\r\n+\r\n+Never deploy a site into production with :setting:`DEBUG` turned on.\r\n+\r\n+One of the main features of debug mode is the display of detailed error pages.\r\n+If your app raises an exception when :setting:`DEBUG` is ``True``, Django will\r\n+display a detailed traceback, including a lot of metadata about your\r\n+environment, such as all the currently defined Django settings (from\r\n+``settings.py``).\r\n+\r\n+As a security measure, Django will *not* include settings that might be\r\n+sensitive, such as :setting:`SECRET_KEY`. Specifically, it will exclude any\r\n+setting whose name includes any of the following:\r\n+\r\n+* ``'API'``\r\n+* ``'KEY'``\r\n+* ``'PASS'``\r\n+* ``'SECRET'``\r\n+* ``'SIGNATURE'``\r\n+* ``'TOKEN'``\r\n+\r\n+Note that these are *partial* matches. ``'PASS'`` will also match PASSWORD,\r\n+just as ``'TOKEN'`` will also match TOKENIZED and so on.\r\n+\r\n+Still, note that there are always going to be sections of your debug output\r\n+that are inappropriate for public consumption. File paths, configuration\r\n+options and the like all give attackers extra information about your server.\r\n+\r\n+It is also important to remember that when running with :setting:`DEBUG`\r\n+turned on, Django will remember every SQL query it executes. This is useful\r\n+when you're debugging, but it'll rapidly consume memory on a production server.\r\n+\r\n+Finally, if :setting:`DEBUG` is ``False``, you also need to properly set\r\n+the :setting:`ALLOWED_HOSTS` setting. Failing to do so will result in all\r\n+requests being returned as \"Bad Request (400)\".\r\n+\r\n+.. note::\r\n+\r\n+    The default :file:`settings.py` file created by :djadmin:`django-admin\r\n+    startproject <startproject>` sets ``DEBUG = True`` for convenience.\r\n+\r\n+.. _django/views/debug.py: https://github.com/django/django/blob/master/django/views/debug.py\r\n+\r\n+.. setting:: DEBUG_PROPAGATE_EXCEPTIONS\r\n+\r\n+``DEBUG_PROPAGATE_EXCEPTIONS``\r\n+------------------------------\r\n+\r\n+Default: ``False``\r\n+\r\n+If set to ``True``, Django's exception handling of view functions\r\n+(:data:`~django.conf.urls.handler500`, or the debug view if :setting:`DEBUG`\r\n+is ``True``) and logging of 500 responses (:ref:`django-request-logger`) is\r\n+skipped and exceptions propagate upwards.\r\n+\r\n+This can be useful for some test setups. It shouldn't be used on a live site\r\n+unless you want your web server (instead of Django) to generate \"Internal\r\n+Server Error\" responses. In that case, make sure your server doesn't show the\r\n+stack trace or other sensitive information in the response.\r\n+\r\n+.. setting:: DECIMAL_SEPARATOR\r\n+\r\n+``DECIMAL_SEPARATOR``\r\n+---------------------\r\n+\r\n+Default: ``'.'`` (Dot)\r\n+\r\n+Default decimal separator used when formatting decimal numbers.\r\n+\r\n+Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated\r\n+format has higher precedence and will be applied instead.\r\n+\r\n+See also :setting:`NUMBER_GROUPING`, :setting:`THOUSAND_SEPARATOR` and\r\n+:setting:`USE_THOUSAND_SEPARATOR`.\r\n+\r\n+\r\n+.. setting:: DEFAULT_CHARSET\r\n+\r\n+``DEFAULT_CHARSET``\r\n+-------------------\r\n+\r\n+Default: ``'utf-8'``\r\n+\r\n+Default charset to use for all ``HttpResponse`` objects, if a MIME type isn't\r\n+manually specified. Used when constructing the ``Content-Type`` header.\r\n+\r\n+.. setting:: DEFAULT_EXCEPTION_REPORTER_FILTER\r\n+\r\n+``DEFAULT_EXCEPTION_REPORTER_FILTER``\r\n+-------------------------------------\r\n+\r\n+Default: ``'``:class:`django.views.debug.SafeExceptionReporterFilter`\\ ``'``\r\n+\r\n+Default exception reporter filter class to be used if none has been assigned to\r\n+the :class:`~django.http.HttpRequest` instance yet.\r\n+See :ref:`Filtering error reports<filtering-error-reports>`.\r\n+\r\n+.. setting:: DEFAULT_FILE_STORAGE\r\n+\r\n+``DEFAULT_FILE_STORAGE``\r\n+------------------------\r\n+\r\n+Default: ``'``:class:`django.core.files.storage.FileSystemStorage`\\ ``'``\r\n+\r\n+Default file storage class to be used for any file-related operations that don't\r\n+specify a particular storage system. See :doc:`/topics/files`.\r\n+\r\n+.. setting:: DEFAULT_FROM_EMAIL\r\n+\r\n+``DEFAULT_FROM_EMAIL``\r\n+----------------------\r\n+\r\n+Default: ``'webmaster@localhost'``\r\n+\r\n+Default email address to use for various automated correspondence from the\r\n+site manager(s). This doesn't include error messages sent to :setting:`ADMINS`\r\n+and :setting:`MANAGERS`; for that, see :setting:`SERVER_EMAIL`.\r\n+\r\n+.. setting:: DEFAULT_INDEX_TABLESPACE\r\n+\r\n+``DEFAULT_INDEX_TABLESPACE``\r\n+----------------------------\r\n+\r\n+Default: ``''`` (Empty string)\r\n+\r\n+Default tablespace to use for indexes on fields that don't specify\r\n+one, if the backend supports it (see :doc:`/topics/db/tablespaces`).\r\n+\r\n+.. setting:: DEFAULT_TABLESPACE\r\n+\r\n+``DEFAULT_TABLESPACE``\r\n+----------------------\r\n+\r\n+Default: ``''`` (Empty string)\r\n+\r\n+Default tablespace to use for models that don't specify one, if the\r\n+backend supports it (see :doc:`/topics/db/tablespaces`).\r\n+\r\n+.. setting:: DISALLOWED_USER_AGENTS\r\n+\r\n+``DISALLOWED_USER_AGENTS``\r\n+--------------------------\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+List of compiled regular expression objects representing User-Agent strings\r\n+that are not allowed to visit any page, systemwide. Use this for bots/crawlers.\r\n+This is only used if ``CommonMiddleware`` is installed (see\r\n+:doc:`/topics/http/middleware`).\r\n+\r\n+.. setting:: EMAIL_BACKEND\r\n+\r\n+``EMAIL_BACKEND``\r\n+-----------------\r\n+\r\n+Default: ``'``:class:`django.core.mail.backends.smtp.EmailBackend`\\ ``'``\r\n+\r\n+The backend to use for sending emails. For the list of available backends see\r\n+:doc:`/topics/email`.\r\n+\r\n+.. setting:: EMAIL_FILE_PATH\r\n+\r\n+``EMAIL_FILE_PATH``\r\n+-------------------\r\n+\r\n+Default: Not defined\r\n+\r\n+The directory used by the ``file`` email backend to store output files.\r\n+\r\n+.. setting:: EMAIL_HOST\r\n+\r\n+``EMAIL_HOST``\r\n+--------------\r\n+\r\n+Default: ``'localhost'``\r\n+\r\n+The host to use for sending email.\r\n+\r\n+See also :setting:`EMAIL_PORT`.\r\n+\r\n+.. setting:: EMAIL_HOST_PASSWORD\r\n+\r\n+``EMAIL_HOST_PASSWORD``\r\n+-----------------------\r\n+\r\n+Default: ``''`` (Empty string)\r\n+\r\n+Password to use for the SMTP server defined in :setting:`EMAIL_HOST`. This\r\n+setting is used in conjunction with :setting:`EMAIL_HOST_USER` when\r\n+authenticating to the SMTP server. If either of these settings is empty,\r\n+Django won't attempt authentication.\r\n+\r\n+See also :setting:`EMAIL_HOST_USER`.\r\n+\r\n+.. setting:: EMAIL_HOST_USER\r\n+\r\n+``EMAIL_HOST_USER``\r\n+-------------------\r\n+\r\n+Default: ``''`` (Empty string)\r\n+\r\n+Username to use for the SMTP server defined in :setting:`EMAIL_HOST`.\r\n+If empty, Django won't attempt authentication.\r\n+\r\n+See also :setting:`EMAIL_HOST_PASSWORD`.\r\n+\r\n+.. setting:: EMAIL_PORT\r\n+\r\n+``EMAIL_PORT``\r\n+--------------\r\n+\r\n+Default: ``25``\r\n+\r\n+Port to use for the SMTP server defined in :setting:`EMAIL_HOST`.\r\n+\r\n+.. setting:: EMAIL_SUBJECT_PREFIX\r\n+\r\n+``EMAIL_SUBJECT_PREFIX``\r\n+------------------------\r\n+\r\n+Default: ``'[Django] '``\r\n+\r\n+Subject-line prefix for email messages sent with ``django.core.mail.mail_admins``\r\n+or ``django.core.mail.mail_managers``. You'll probably want to include the\r\n+trailing space.\r\n+\r\n+.. setting:: EMAIL_USE_LOCALTIME\r\n+\r\n+``EMAIL_USE_LOCALTIME``\r\n+-----------------------\r\n+\r\n+Default: ``False``\r\n+\r\n+Whether to send the SMTP ``Date`` header of email messages in the local time\r\n+zone (``True``) or in UTC (``False``).\r\n+\r\n+.. setting:: EMAIL_USE_TLS\r\n+\r\n+``EMAIL_USE_TLS``\r\n+-----------------\r\n+\r\n+Default: ``False``\r\n+\r\n+Whether to use a TLS (secure) connection when talking to the SMTP server.\r\n+This is used for explicit TLS connections, generally on port 587. If you are\r\n+experiencing hanging connections, see the implicit TLS setting\r\n+:setting:`EMAIL_USE_SSL`.\r\n+\r\n+.. setting:: EMAIL_USE_SSL\r\n+\r\n+``EMAIL_USE_SSL``\r\n+-----------------\r\n+\r\n+Default: ``False``\r\n+\r\n+Whether to use an implicit TLS (secure) connection when talking to the SMTP\r\n+server. In most email documentation this type of TLS connection is referred\r\n+to as SSL. It is generally used on port 465. If you are experiencing problems,\r\n+see the explicit TLS setting :setting:`EMAIL_USE_TLS`.\r\n+\r\n+Note that :setting:`EMAIL_USE_TLS`/:setting:`EMAIL_USE_SSL` are mutually\r\n+exclusive, so only set one of those settings to ``True``.\r\n+\r\n+.. setting:: EMAIL_SSL_CERTFILE\r\n+\r\n+``EMAIL_SSL_CERTFILE``\r\n+----------------------\r\n+\r\n+Default: ``None``\r\n+\r\n+If :setting:`EMAIL_USE_SSL` or :setting:`EMAIL_USE_TLS` is ``True``, you can\r\n+optionally specify the path to a PEM-formatted certificate chain file to use\r\n+for the SSL connection.\r\n+\r\n+.. setting:: EMAIL_SSL_KEYFILE\r\n+\r\n+``EMAIL_SSL_KEYFILE``\r\n+---------------------\r\n+\r\n+Default: ``None``\r\n+\r\n+If :setting:`EMAIL_USE_SSL` or :setting:`EMAIL_USE_TLS` is ``True``, you can\r\n+optionally specify the path to a PEM-formatted private key file to use for the\r\n+SSL connection.\r\n+\r\n+Note that setting :setting:`EMAIL_SSL_CERTFILE` and :setting:`EMAIL_SSL_KEYFILE`\r\n+doesn't result in any certificate checking. They're passed to the underlying SSL\r\n+connection. Please refer to the documentation of Python's\r\n+:func:`python:ssl.wrap_socket` function for details on how the certificate chain\r\n+file and private key file are handled.\r\n+\r\n+.. setting:: EMAIL_TIMEOUT\r\n+\r\n+``EMAIL_TIMEOUT``\r\n+-----------------\r\n+\r\n+Default: ``None``\r\n+\r\n+Specifies a timeout in seconds for blocking operations like the connection\r\n+attempt.\r\n+\r\n+.. setting:: FILE_CHARSET\r\n+\r\n+``FILE_CHARSET``\r\n+----------------\r\n+\r\n+Default: ``'utf-8'``\r\n+\r\n+The character encoding used to decode any files read from disk. This includes\r\n+template files, static files, and translation catalogs.\r\n+\r\n+.. deprecated:: 2.2\r\n+\r\n+    This setting is deprecated. Starting with Django 3.1, files read from disk\r\n+    must be UTF-8 encoded.\r\n+\r\n+.. setting:: FILE_UPLOAD_HANDLERS\r\n+\r\n+``FILE_UPLOAD_HANDLERS``\r\n+------------------------\r\n+\r\n+Default::\r\n+\r\n+    [\r\n+        'django.core.files.uploadhandler.MemoryFileUploadHandler',\r\n+        'django.core.files.uploadhandler.TemporaryFileUploadHandler',\r\n+    ]\r\n+\r\n+A list of handlers to use for uploading. Changing this setting allows complete\r\n+customization -- even replacement -- of Django's upload process.\r\n+\r\n+See :doc:`/topics/files` for details.\r\n+\r\n+.. setting:: FILE_UPLOAD_MAX_MEMORY_SIZE\r\n+\r\n+``FILE_UPLOAD_MAX_MEMORY_SIZE``\r\n+-------------------------------\r\n+\r\n+Default: ``2621440`` (i.e. 2.5 MB).\r\n+\r\n+The maximum size (in bytes) that an upload will be before it gets streamed to\r\n+the file system. See :doc:`/topics/files` for details.\r\n+\r\n+See also :setting:`DATA_UPLOAD_MAX_MEMORY_SIZE`.\r\n+\r\n+.. setting:: FILE_UPLOAD_DIRECTORY_PERMISSIONS\r\n+\r\n+``FILE_UPLOAD_DIRECTORY_PERMISSIONS``\r\n+-------------------------------------\r\n+\r\n+Default: ``None``\r\n+\r\n+The numeric mode to apply to directories created in the process of uploading\r\n+files.\r\n+\r\n+This setting also determines the default permissions for collected static\r\n+directories when using the :djadmin:`collectstatic` management command. See\r\n+:djadmin:`collectstatic` for details on overriding it.\r\n+\r\n+This value mirrors the functionality and caveats of the\r\n+:setting:`FILE_UPLOAD_PERMISSIONS` setting.\r\n+\r\n+.. setting:: FILE_UPLOAD_PERMISSIONS\r\n+\r\n+``FILE_UPLOAD_PERMISSIONS``\r\n+---------------------------\r\n+\r\n+Default: ``None``\r\n+\r\n+The numeric mode (i.e. ``0o644``) to set newly uploaded files to. For\r\n+more information about what these modes mean, see the documentation for\r\n+:func:`os.chmod`.\r\n+\r\n+If this isn't given or is ``None``, you'll get operating-system\r\n+dependent behavior. On most platforms, temporary files will have a mode\r\n+of ``0o600``, and files saved from memory will be saved using the\r\n+system's standard umask.\r\n+\r\n+For security reasons, these permissions aren't applied to the temporary files\r\n+that are stored in :setting:`FILE_UPLOAD_TEMP_DIR`.\r\n+\r\n+This setting also determines the default permissions for collected static files\r\n+when using the :djadmin:`collectstatic` management command. See\r\n+:djadmin:`collectstatic` for details on overriding it.\r\n+\r\n+.. warning::\r\n+\r\n+    **Always prefix the mode with a 0.**\r\n+\r\n+    If you're not familiar with file modes, please note that the leading\r\n+    ``0`` is very important: it indicates an octal number, which is the\r\n+    way that modes must be specified. If you try to use ``644``, you'll\r\n+    get totally incorrect behavior.\r\n+\r\n+.. setting:: FILE_UPLOAD_TEMP_DIR\r\n+\r\n+``FILE_UPLOAD_TEMP_DIR``\r\n+------------------------\r\n+\r\n+Default: ``None``\r\n+\r\n+The directory to store data to (typically files larger than\r\n+:setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`) temporarily while uploading files.\r\n+If ``None``, Django will use the standard temporary directory for the operating\r\n+system. For example, this will default to ``/tmp`` on \\*nix-style operating\r\n+systems.\r\n+\r\n+See :doc:`/topics/files` for details.\r\n+\r\n+.. setting:: FIRST_DAY_OF_WEEK\r\n+\r\n+``FIRST_DAY_OF_WEEK``\r\n+---------------------\r\n+\r\n+Default: ``0`` (Sunday)\r\n+\r\n+A number representing the first day of the week. This is especially useful\r\n+when displaying a calendar. This value is only used when not using\r\n+format internationalization, or when a format cannot be found for the\r\n+current locale.\r\n+\r\n+The value must be an integer from 0 to 6, where 0 means Sunday, 1 means\r\n+Monday and so on.\r\n+\r\n+.. setting:: FIXTURE_DIRS\r\n+\r\n+``FIXTURE_DIRS``\r\n+----------------\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+List of directories searched for fixture files, in addition to the\r\n+``fixtures`` directory of each application, in search order.\r\n+\r\n+Note that these paths should use Unix-style forward slashes, even on Windows.\r\n+\r\n+See :ref:`initial-data-via-fixtures` and :ref:`topics-testing-fixtures`.\r\n+\r\n+.. setting:: FORCE_SCRIPT_NAME\r\n+\r\n+``FORCE_SCRIPT_NAME``\r\n+---------------------\r\n+\r\n+Default: ``None``\r\n+\r\n+If not ``None``, this will be used as the value of the ``SCRIPT_NAME``\r\n+environment variable in any HTTP request. This setting can be used to override\r\n+the server-provided value of ``SCRIPT_NAME``, which may be a rewritten version\r\n+of the preferred value or not supplied at all. It is also used by\r\n+:func:`django.setup()` to set the URL resolver script prefix outside of the\r\n+request/response cycle (e.g. in management commands and standalone scripts) to\r\n+generate correct URLs when ``SCRIPT_NAME`` is not ``/``.\r\n+\r\n+.. setting:: FORM_RENDERER\r\n+\r\n+``FORM_RENDERER``\r\n+-----------------\r\n+\r\n+Default: ``'``:class:`django.forms.renderers.DjangoTemplates`\\ ``'``\r\n+\r\n+The class that renders form widgets. It must implement :ref:`the low-level\r\n+render API <low-level-widget-render-api>`.\r\n+\r\n+.. setting:: FORMAT_MODULE_PATH\r\n+\r\n+``FORMAT_MODULE_PATH``\r\n+----------------------\r\n+\r\n+Default: ``None``\r\n+\r\n+A full Python path to a Python package that contains custom format definitions\r\n+for project locales. If not ``None``, Django will check for a ``formats.py``\r\n+file, under the directory named as the current locale, and will use the\r\n+formats defined in this file.\r\n+\r\n+For example, if :setting:`FORMAT_MODULE_PATH` is set to ``mysite.formats``,\r\n+and current language is ``en`` (English), Django will expect a directory tree\r\n+like::\r\n+\r\n+    mysite/\r\n+        formats/\r\n+            __init__.py\r\n+            en/\r\n+                __init__.py\r\n+                formats.py\r\n+\r\n+You can also set this setting to a list of Python paths, for example::\r\n+\r\n+    FORMAT_MODULE_PATH = [\r\n+        'mysite.formats',\r\n+        'some_app.formats',\r\n+    ]\r\n+\r\n+When Django searches for a certain format, it will go through all given Python\r\n+paths until it finds a module that actually defines the given format. This\r\n+means that formats defined in packages farther up in the list will take\r\n+precedence over the same formats in packages farther down.\r\n+\r\n+Available formats are:\r\n+\r\n+* :setting:`DATE_FORMAT`\r\n+* :setting:`DATE_INPUT_FORMATS`\r\n+* :setting:`DATETIME_FORMAT`,\r\n+* :setting:`DATETIME_INPUT_FORMATS`\r\n+* :setting:`DECIMAL_SEPARATOR`\r\n+* :setting:`FIRST_DAY_OF_WEEK`\r\n+* :setting:`MONTH_DAY_FORMAT`\r\n+* :setting:`NUMBER_GROUPING`\r\n+* :setting:`SHORT_DATE_FORMAT`\r\n+* :setting:`SHORT_DATETIME_FORMAT`\r\n+* :setting:`THOUSAND_SEPARATOR`\r\n+* :setting:`TIME_FORMAT`\r\n+* :setting:`TIME_INPUT_FORMATS`\r\n+* :setting:`YEAR_MONTH_FORMAT`\r\n+\r\n+.. setting:: IGNORABLE_404_URLS\r\n+\r\n+``IGNORABLE_404_URLS``\r\n+----------------------\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+List of compiled regular expression objects describing URLs that should be\r\n+ignored when reporting HTTP 404 errors via email (see\r\n+:doc:`/howto/error-reporting`). Regular expressions are matched against\r\n+:meth:`request's full paths <django.http.HttpRequest.get_full_path>` (including\r\n+query string, if any). Use this if your site does not provide a commonly\r\n+requested file such as ``favicon.ico`` or ``robots.txt``.\r\n+\r\n+This is only used if\r\n+:class:`~django.middleware.common.BrokenLinkEmailsMiddleware` is enabled (see\r\n+:doc:`/topics/http/middleware`).\r\n+\r\n+.. setting:: INSTALLED_APPS\r\n+\r\n+``INSTALLED_APPS``\r\n+------------------\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+A list of strings designating all applications that are enabled in this\r\n+Django installation. Each string should be a dotted Python path to:\r\n+\r\n+* an application configuration class (preferred), or\r\n+* a package containing an application.\r\n+\r\n+:doc:`Learn more about application configurations </ref/applications>`.\r\n+\r\n+.. admonition:: Use the application registry for introspection\r\n+\r\n+    Your code should never access :setting:`INSTALLED_APPS` directly. Use\r\n+    :attr:`django.apps.apps` instead.\r\n+\r\n+.. admonition:: Application names and labels must be unique in\r\n+                :setting:`INSTALLED_APPS`\r\n+\r\n+    Application :attr:`names <django.apps.AppConfig.name>` \u2014 the dotted Python\r\n+    path to the application package \u2014 must be unique. There is no way to\r\n+    include the same application twice, short of duplicating its code under\r\n+    another name.\r\n+\r\n+    Application :attr:`labels <django.apps.AppConfig.label>` \u2014 by default the\r\n+    final part of the name \u2014 must be unique too. For example, you can't\r\n+    include both ``django.contrib.auth`` and ``myproject.auth``. However, you\r\n+    can relabel an application with a custom configuration that defines a\r\n+    different :attr:`~django.apps.AppConfig.label`.\r\n+\r\n+    These rules apply regardless of whether :setting:`INSTALLED_APPS`\r\n+    references application configuration classes or application packages.\r\n+\r\n+When several applications provide different versions of the same resource\r\n+(template, static file, management command, translation), the application\r\n+listed first in :setting:`INSTALLED_APPS` has precedence.\r\n+\r\n+.. setting:: INTERNAL_IPS\r\n+\r\n+``INTERNAL_IPS``\r\n+----------------\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+A list of IP addresses, as strings, that:\r\n+\r\n+* Allow the :func:`~django.template.context_processors.debug` context processor\r\n+  to add some variables to the template context.\r\n+* Can use the :ref:`admindocs bookmarklets <admindocs-bookmarklets>` even if\r\n+  not logged in as a staff user.\r\n+* Are marked as \"internal\" (as opposed to \"EXTERNAL\") in\r\n+  :class:`~django.utils.log.AdminEmailHandler` emails.\r\n+\r\n+.. setting:: LANGUAGE_CODE\r\n+\r\n+``LANGUAGE_CODE``\r\n+-----------------\r\n+\r\n+Default: ``'en-us'``\r\n+\r\n+A string representing the language code for this installation. This should be in\r\n+standard :term:`language ID format <language code>`. For example, U.S. English\r\n+is ``\"en-us\"``. See also the `list of language identifiers`_ and\r\n+:doc:`/topics/i18n/index`.\r\n+\r\n+:setting:`USE_I18N` must be active for this setting to have any effect.\r\n+\r\n+It serves two purposes:\r\n+\r\n+* If the locale middleware isn't in use, it decides which translation is served\r\n+  to all users.\r\n+* If the locale middleware is active, it provides a fallback language in case the\r\n+  user's preferred language can't be determined or is not supported by the\r\n+  website. It also provides the fallback translation when a translation for a\r\n+  given literal doesn't exist for the user's preferred language.\r\n+\r\n+See :ref:`how-django-discovers-language-preference` for more details.\r\n+\r\n+.. _list of language identifiers: http://www.i18nguy.com/unicode/language-identifiers.html\r\n+\r\n+.. setting:: LANGUAGE_COOKIE_AGE\r\n+\r\n+``LANGUAGE_COOKIE_AGE``\r\n+-----------------------\r\n+\r\n+Default: ``None`` (expires at browser close)\r\n+\r\n+The age of the language cookie, in seconds.\r\n+\r\n+.. setting:: LANGUAGE_COOKIE_DOMAIN\r\n+\r\n+``LANGUAGE_COOKIE_DOMAIN``\r\n+--------------------------\r\n+\r\n+Default: ``None``\r\n+\r\n+The domain to use for the language cookie. Set this to a string such as\r\n+``\"example.com\"`` for cross-domain cookies, or use ``None`` for a standard\r\n+domain cookie.\r\n+\r\n+Be cautious when updating this setting on a production site. If you update\r\n+this setting to enable cross-domain cookies on a site that previously used\r\n+standard domain cookies, existing user cookies that have the old domain\r\n+will not be updated. This will result in site users being unable to switch\r\n+the language as long as these cookies persist. The only safe and reliable\r\n+option to perform the switch is to change the language cookie name\r\n+permanently (via the :setting:`LANGUAGE_COOKIE_NAME` setting) and to add\r\n+a middleware that copies the value from the old cookie to a new one and then\r\n+deletes the old one.\r\n+\r\n+.. setting:: LANGUAGE_COOKIE_NAME\r\n+\r\n+``LANGUAGE_COOKIE_NAME``\r\n+------------------------\r\n+\r\n+Default: ``'django_language'``\r\n+\r\n+The name of the cookie to use for the language cookie. This can be whatever\r\n+you want (as long as it's different from the other cookie names in your\r\n+application). See :doc:`/topics/i18n/index`.\r\n+\r\n+.. setting:: LANGUAGE_COOKIE_PATH\r\n+\r\n+``LANGUAGE_COOKIE_PATH``\r\n+------------------------\r\n+\r\n+Default: ``'/'``\r\n+\r\n+The path set on the language cookie. This should either match the URL path of your\r\n+Django installation or be a parent of that path.\r\n+\r\n+This is useful if you have multiple Django instances running under the same\r\n+hostname. They can use different cookie paths and each instance will only see\r\n+its own language cookie.\r\n+\r\n+Be cautious when updating this setting on a production site. If you update this\r\n+setting to use a deeper path than it previously used, existing user cookies that\r\n+have the old path will not be updated. This will result in site users being\r\n+unable to switch the language as long as these cookies persist. The only safe\r\n+and reliable option to perform the switch is to change the language cookie name\r\n+permanently (via the :setting:`LANGUAGE_COOKIE_NAME` setting), and to add\r\n+a middleware that copies the value from the old cookie to a new one and then\r\n+deletes the one.\r\n+\r\n+.. setting:: LANGUAGES\r\n+\r\n+``LANGUAGES``\r\n+-------------\r\n+\r\n+Default: A list of all available languages. This list is continually growing\r\n+and including a copy here would inevitably become rapidly out of date. You can\r\n+see the current list of translated languages by looking in\r\n+``django/conf/global_settings.py`` (or view the `online source`_).\r\n+\r\n+.. _online source: https://github.com/django/django/blob/master/django/conf/global_settings.py\r\n+\r\n+The list is a list of two-tuples in the format\r\n+(:term:`language code<language code>`, ``language name``) -- for example,\r\n+``('ja', 'Japanese')``.\r\n+This specifies which languages are available for language selection. See\r\n+:doc:`/topics/i18n/index`.\r\n+\r\n+Generally, the default value should suffice. Only set this setting if you want\r\n+to restrict language selection to a subset of the Django-provided languages.\r\n+\r\n+If you define a custom :setting:`LANGUAGES` setting, you can mark the\r\n+language names as translation strings using the\r\n+:func:`~django.utils.translation.gettext_lazy` function.\r\n+\r\n+Here's a sample settings file::\r\n+\r\n+    from django.utils.translation import gettext_lazy as _\r\n+\r\n+    LANGUAGES = [\r\n+        ('de', _('German')),\r\n+        ('en', _('English')),\r\n+    ]\r\n+\r\n+.. setting:: LOCALE_PATHS\r\n+\r\n+``LOCALE_PATHS``\r\n+----------------\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+A list of directories where Django looks for translation files.\r\n+See :ref:`how-django-discovers-translations`.\r\n+\r\n+Example::\r\n+\r\n+    LOCALE_PATHS = [\r\n+        '/home/www/project/common_files/locale',\r\n+        '/var/local/translations/locale',\r\n+    ]\r\n+\r\n+Django will look within each of these paths for the ``<locale_code>/LC_MESSAGES``\r\n+directories containing the actual translation files.\r\n+\r\n+.. setting:: LOGGING\r\n+\r\n+``LOGGING``\r\n+-----------\r\n+\r\n+Default: A logging configuration dictionary.\r\n+\r\n+A data structure containing configuration information. The contents of\r\n+this data structure will be passed as the argument to the\r\n+configuration method described in :setting:`LOGGING_CONFIG`.\r\n+\r\n+Among other things, the default logging configuration passes HTTP 500 server\r\n+errors to an email log handler when :setting:`DEBUG` is ``False``. See also\r\n+:ref:`configuring-logging`.\r\n+\r\n+You can see the default logging configuration by looking in\r\n+``django/utils/log.py`` (or view the `online source`__).\r\n+\r\n+__ https://github.com/django/django/blob/master/django/utils/log.py\r\n+\r\n+.. setting:: LOGGING_CONFIG\r\n+\r\n+``LOGGING_CONFIG``\r\n+------------------\r\n+\r\n+Default: ``'logging.config.dictConfig'``\r\n+\r\n+A path to a callable that will be used to configure logging in the\r\n+Django project. Points at an instance of Python's :ref:`dictConfig\r\n+<logging-config-dictschema>` configuration method by default.\r\n+\r\n+If you set :setting:`LOGGING_CONFIG` to ``None``, the logging\r\n+configuration process will be skipped.\r\n+\r\n+.. setting:: MANAGERS\r\n+\r\n+``MANAGERS``\r\n+------------\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+A list in the same format as :setting:`ADMINS` that specifies who should get\r\n+broken link notifications when\r\n+:class:`~django.middleware.common.BrokenLinkEmailsMiddleware` is enabled.\r\n+\r\n+.. setting:: MEDIA_ROOT\r\n+\r\n+``MEDIA_ROOT``\r\n+--------------\r\n+\r\n+Default: ``''`` (Empty string)\r\n+\r\n+Absolute filesystem path to the directory that will hold :doc:`user-uploaded\r\n+files </topics/files>`.\r\n+\r\n+Example: ``\"/var/www/example.com/media/\"``\r\n+\r\n+See also :setting:`MEDIA_URL`.\r\n+\r\n+.. warning::\r\n+\r\n+    :setting:`MEDIA_ROOT` and :setting:`STATIC_ROOT` must have different\r\n+    values. Before :setting:`STATIC_ROOT` was introduced, it was common to\r\n+    rely or fallback on :setting:`MEDIA_ROOT` to also serve static files;\r\n+    however, since this can have serious security implications, there is a\r\n+    validation check to prevent it.\r\n+\r\n+.. setting:: MEDIA_URL\r\n+\r\n+``MEDIA_URL``\r\n+-------------\r\n+\r\n+Default: ``''`` (Empty string)\r\n+\r\n+URL that handles the media served from :setting:`MEDIA_ROOT`, used\r\n+for :doc:`managing stored files </topics/files>`. It must end in a slash if set\r\n+to a non-empty value. You will need to :ref:`configure these files to be served\r\n+<serving-uploaded-files-in-development>` in both development and production\r\n+environments.\r\n+\r\n+If you want to use ``{{ MEDIA_URL }}`` in your templates, add\r\n+``'django.template.context_processors.media'`` in the ``'context_processors'``\r\n+option of :setting:`TEMPLATES`.\r\n+\r\n+Example: ``\"http://media.example.com/\"``\r\n+\r\n+.. warning::\r\n+\r\n+    There are security risks if you are accepting uploaded content from\r\n+    untrusted users! See the security guide's topic on\r\n+    :ref:`user-uploaded-content-security` for mitigation details.\r\n+\r\n+.. warning::\r\n+\r\n+    :setting:`MEDIA_URL` and :setting:`STATIC_URL` must have different\r\n+    values. See :setting:`MEDIA_ROOT` for more details.\r\n+\r\n+.. setting:: MIDDLEWARE\r\n+\r\n+``MIDDLEWARE``\r\n+--------------\r\n+\r\n+Default: ``None``\r\n+\r\n+A list of middleware to use. See :doc:`/topics/http/middleware`.\r\n+\r\n+.. setting:: MIGRATION_MODULES\r\n+\r\n+``MIGRATION_MODULES``\r\n+---------------------\r\n+\r\n+Default: ``{}`` (Empty dictionary)\r\n+\r\n+A dictionary specifying the package where migration modules can be found on a\r\n+per-app basis. The default value of this setting is an empty dictionary, but\r\n+the default package name for migration modules is ``migrations``.\r\n+\r\n+Example::\r\n+\r\n+    {'blog': 'blog.db_migrations'}\r\n+\r\n+In this case, migrations pertaining to the ``blog`` app will be contained in\r\n+the ``blog.db_migrations`` package.\r\n+\r\n+If you provide the ``app_label`` argument, :djadmin:`makemigrations` will\r\n+automatically create the package if it doesn't already exist.\r\n+\r\n+When you supply ``None`` as a value for an app, Django will consider the app as\r\n+an app without migrations regardless of an existing ``migrations`` submodule.\r\n+This can be used, for example, in a test settings file to skip migrations while\r\n+testing (tables will still be created for the apps' models). If this is used in\r\n+your general project settings, remember to use the :option:`migrate\r\n+--run-syncdb` option if you want to create tables for the app.\r\n+\r\n+.. setting:: MONTH_DAY_FORMAT\r\n+\r\n+``MONTH_DAY_FORMAT``\r\n+--------------------\r\n+\r\n+Default: ``'F j'``\r\n+\r\n+The default formatting to use for date fields on Django admin change-list\r\n+pages -- and, possibly, by other parts of the system -- in cases when only the\r\n+month and day are displayed.\r\n+\r\n+For example, when a Django admin change-list page is being filtered by a date\r\n+drilldown, the header for a given day displays the day and month. Different\r\n+locales have different formats. For example, U.S. English would say\r\n+\"January 1,\" whereas Spanish might say \"1 Enero.\"\r\n+\r\n+Note that if :setting:`USE_L10N` is set to ``True``, then the corresponding\r\n+locale-dictated format has higher precedence and will be applied.\r\n+\r\n+See :tfilter:`allowed date format strings <date>`. See also\r\n+:setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`,\r\n+:setting:`TIME_FORMAT` and :setting:`YEAR_MONTH_FORMAT`.\r\n+\r\n+.. setting:: NUMBER_GROUPING\r\n+\r\n+``NUMBER_GROUPING``\r\n+-------------------\r\n+\r\n+Default: ``0``\r\n+\r\n+Number of digits grouped together on the integer part of a number.\r\n+\r\n+Common use is to display a thousand separator. If this setting is ``0``, then\r\n+no grouping will be applied to the number. If this setting is greater than\r\n+``0``, then :setting:`THOUSAND_SEPARATOR` will be used as the separator between\r\n+those groups.\r\n+\r\n+Some locales use non-uniform digit grouping, e.g. ``10,00,00,000`` in\r\n+``en_IN``. For this case, you can provide a sequence with the number of digit\r\n+group sizes to be applied. The first number defines the size of the group\r\n+preceding the decimal delimiter, and each number that follows defines the size\r\n+of preceding groups. If the sequence is terminated with ``-1``, no further\r\n+grouping is performed. If the sequence terminates with a ``0``, the last group\r\n+size is used for the remainder of the number.\r\n+\r\n+Example tuple for ``en_IN``::\r\n+\r\n+    NUMBER_GROUPING = (3, 2, 0)\r\n+\r\n+Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated\r\n+format has higher precedence and will be applied instead.\r\n+\r\n+See also :setting:`DECIMAL_SEPARATOR`, :setting:`THOUSAND_SEPARATOR` and\r\n+:setting:`USE_THOUSAND_SEPARATOR`.\r\n+\r\n+.. setting:: PREPEND_WWW\r\n+\r\n+``PREPEND_WWW``\r\n+---------------\r\n+\r\n+Default: ``False``\r\n+\r\n+Whether to prepend the \"www.\" subdomain to URLs that don't have it. This is only\r\n+used if :class:`~django.middleware.common.CommonMiddleware` is installed\r\n+(see :doc:`/topics/http/middleware`). See also :setting:`APPEND_SLASH`.\r\n+\r\n+.. setting:: ROOT_URLCONF\r\n+\r\n+``ROOT_URLCONF``\r\n+----------------\r\n+\r\n+Default: Not defined\r\n+\r\n+A string representing the full Python import path to your root URLconf, for\r\n+example ``\"mydjangoapps.urls\"``. Can be overridden on a per-request basis by\r\n+setting the attribute ``urlconf`` on the incoming ``HttpRequest``\r\n+object. See :ref:`how-django-processes-a-request` for details.\r\n+\r\n+.. setting:: SECRET_KEY\r\n+\r\n+``SECRET_KEY``\r\n+--------------\r\n+\r\n+Default: ``''`` (Empty string)\r\n+\r\n+A secret key for a particular Django installation. This is used to provide\r\n+:doc:`cryptographic signing </topics/signing>`, and should be set to a unique,\r\n+unpredictable value.\r\n+\r\n+:djadmin:`django-admin startproject <startproject>` automatically adds a\r\n+randomly-generated ``SECRET_KEY`` to each new project.\r\n+\r\n+Uses of the key shouldn't assume that it's text or bytes. Every use should go\r\n+through :func:`~django.utils.encoding.force_str` or\r\n+:func:`~django.utils.encoding.force_bytes` to convert it to the desired type.\r\n+\r\n+Django will refuse to start if :setting:`SECRET_KEY` is not set.\r\n+\r\n+.. warning::\r\n+\r\n+    **Keep this value secret.**\r\n+\r\n+    Running Django with a known :setting:`SECRET_KEY` defeats many of Django's\r\n+    security protections, and can lead to privilege escalation and remote code\r\n+    execution vulnerabilities.\r\n+\r\n+The secret key is used for:\r\n+\r\n+* All :doc:`sessions </topics/http/sessions>` if you are using\r\n+  any other session backend than ``django.contrib.sessions.backends.cache``,\r\n+  or are using the default\r\n+  :meth:`~django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash()`.\r\n+* All :doc:`messages </ref/contrib/messages>` if you are using\r\n+  :class:`~django.contrib.messages.storage.cookie.CookieStorage` or\r\n+  :class:`~django.contrib.messages.storage.fallback.FallbackStorage`.\r\n+* All :class:`~django.contrib.auth.views.PasswordResetView` tokens.\r\n+* Any usage of :doc:`cryptographic signing </topics/signing>`, unless a\r\n+  different key is provided.\r\n+\r\n+If you rotate your secret key, all of the above will be invalidated.\r\n+Secret keys are not used for passwords of users and key rotation will not\r\n+affect them.\r\n+\r\n+.. note::\r\n+\r\n+    The default :file:`settings.py` file created by :djadmin:`django-admin\r\n+    startproject <startproject>` creates a unique ``SECRET_KEY`` for\r\n+    convenience.\r\n+\r\n+.. setting:: SECURE_BROWSER_XSS_FILTER\r\n+\r\n+``SECURE_BROWSER_XSS_FILTER``\r\n+-----------------------------\r\n+\r\n+Default: ``False``\r\n+\r\n+If ``True``, the :class:`~django.middleware.security.SecurityMiddleware` sets\r\n+the :ref:`x-xss-protection` header on all responses that do not already have it.\r\n+\r\n+.. setting:: SECURE_CONTENT_TYPE_NOSNIFF\r\n+\r\n+``SECURE_CONTENT_TYPE_NOSNIFF``\r\n+-------------------------------\r\n+\r\n+Default: ``False``\r\n+\r\n+If ``True``, the :class:`~django.middleware.security.SecurityMiddleware`\r\n+sets the :ref:`x-content-type-options` header on all responses that do not\r\n+already have it.\r\n+\r\n+.. setting:: SECURE_HSTS_INCLUDE_SUBDOMAINS\r\n+\r\n+``SECURE_HSTS_INCLUDE_SUBDOMAINS``\r\n+----------------------------------\r\n+\r\n+Default: ``False``\r\n+\r\n+If ``True``, the :class:`~django.middleware.security.SecurityMiddleware` adds\r\n+the ``includeSubDomains`` directive to the :ref:`http-strict-transport-security`\r\n+header. It has no effect unless :setting:`SECURE_HSTS_SECONDS` is set to a\r\n+non-zero value.\r\n+\r\n+.. warning::\r\n+    Setting this incorrectly can irreversibly (for the value of\r\n+    :setting:`SECURE_HSTS_SECONDS`) break your site. Read the\r\n+    :ref:`http-strict-transport-security` documentation first.\r\n+\r\n+.. setting:: SECURE_HSTS_PRELOAD\r\n+\r\n+``SECURE_HSTS_PRELOAD``\r\n+-----------------------\r\n+\r\n+Default: ``False``\r\n+\r\n+If ``True``, the :class:`~django.middleware.security.SecurityMiddleware` adds\r\n+the ``preload`` directive to the :ref:`http-strict-transport-security`\r\n+header. It has no effect unless :setting:`SECURE_HSTS_SECONDS` is set to a\r\n+non-zero value.\r\n+\r\n+.. setting:: SECURE_HSTS_SECONDS\r\n+\r\n+``SECURE_HSTS_SECONDS``\r\n+-----------------------\r\n+\r\n+Default: ``0``\r\n+\r\n+If set to a non-zero integer value, the\r\n+:class:`~django.middleware.security.SecurityMiddleware` sets the\r\n+:ref:`http-strict-transport-security` header on all responses that do not\r\n+already have it.\r\n+\r\n+.. warning::\r\n+    Setting this incorrectly can irreversibly (for some time) break your site.\r\n+    Read the :ref:`http-strict-transport-security` documentation first.\r\n+\r\n+.. setting:: SECURE_PROXY_SSL_HEADER\r\n+\r\n+``SECURE_PROXY_SSL_HEADER``\r\n+---------------------------\r\n+\r\n+Default: ``None``\r\n+\r\n+A tuple representing a HTTP header/value combination that signifies a request\r\n+is secure. This controls the behavior of the request object's ``is_secure()``\r\n+method.\r\n+\r\n+By default, ``is_secure()`` determines if a request is secure by confirming\r\n+that a requested URL uses ``https://``. This method is important for Django's\r\n+CSRF protection, and it may be used by your own code or third-party apps.\r\n+\r\n+If your Django app is behind a proxy, though, the proxy may be \"swallowing\" the\r\n+fact that a request is HTTPS, using a non-HTTPS connection between the proxy\r\n+and Django. In this case, ``is_secure()`` would always return ``False`` -- even\r\n+for requests that were made via HTTPS by the end user.\r\n+\r\n+In this situation, configure your proxy to set a custom HTTP header that tells\r\n+Django whether the request came in via HTTPS, and set\r\n+``SECURE_PROXY_SSL_HEADER`` so that Django knows what header to look for.\r\n+\r\n+Set a tuple with two elements -- the name of the header to look for and the\r\n+required value. For example::\r\n+\r\n+    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\r\n+\r\n+This tells Django to trust the ``X-Forwarded-Proto`` header that comes from our\r\n+proxy, and any time its value is ``'https'``, then the request is guaranteed to\r\n+be secure (i.e., it originally came in via HTTPS).\r\n+\r\n+You should *only* set this setting if you control your proxy or have some other\r\n+guarantee that it sets/strips this header appropriately.\r\n+\r\n+Note that the header needs to be in the format as used by ``request.META`` --\r\n+all caps and likely starting with ``HTTP_``. (Remember, Django automatically\r\n+adds ``'HTTP_'`` to the start of x-header names before making the header\r\n+available in ``request.META``.)\r\n+\r\n+.. warning::\r\n+\r\n+    **Modifying this setting can compromise your site's security. Ensure you\r\n+    fully understand your setup before changing it.**\r\n+\r\n+    Make sure ALL of the following are true before setting this (assuming the\r\n+    values from the example above):\r\n+\r\n+    * Your Django app is behind a proxy.\r\n+    * Your proxy strips the ``X-Forwarded-Proto`` header from all incoming\r\n+      requests. In other words, if end users include that header in their\r\n+      requests, the proxy will discard it.\r\n+    * Your proxy sets the ``X-Forwarded-Proto`` header and sends it to Django,\r\n+      but only for requests that originally come in via HTTPS.\r\n+\r\n+    If any of those are not true, you should keep this setting set to ``None``\r\n+    and find another way of determining HTTPS, perhaps via custom middleware.\r\n+\r\n+.. setting:: SECURE_REDIRECT_EXEMPT\r\n+\r\n+``SECURE_REDIRECT_EXEMPT``\r\n+--------------------------\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+If a URL path matches a regular expression in this list, the request will not be\r\n+redirected to HTTPS. If :setting:`SECURE_SSL_REDIRECT` is ``False``, this\r\n+setting has no effect.\r\n+\r\n+.. setting:: SECURE_SSL_HOST\r\n+\r\n+``SECURE_SSL_HOST``\r\n+-------------------\r\n+\r\n+Default: ``None``\r\n+\r\n+If a string (e.g. ``secure.example.com``), all SSL redirects will be directed\r\n+to this host rather than the originally-requested host\r\n+(e.g. ``www.example.com``). If :setting:`SECURE_SSL_REDIRECT` is ``False``, this\r\n+setting has no effect.\r\n+\r\n+.. setting:: SECURE_SSL_REDIRECT\r\n+\r\n+``SECURE_SSL_REDIRECT``\r\n+-----------------------\r\n+\r\n+Default: ``False``\r\n+\r\n+If ``True``, the :class:`~django.middleware.security.SecurityMiddleware`\r\n+:ref:`redirects <ssl-redirect>` all non-HTTPS requests to HTTPS (except for\r\n+those URLs matching a regular expression listed in\r\n+:setting:`SECURE_REDIRECT_EXEMPT`).\r\n+\r\n+.. note::\r\n+\r\n+   If turning this to ``True`` causes infinite redirects, it probably means\r\n+   your site is running behind a proxy and can't tell which requests are secure\r\n+   and which are not. Your proxy likely sets a header to indicate secure\r\n+   requests; you can correct the problem by finding out what that header is and\r\n+   configuring the :setting:`SECURE_PROXY_SSL_HEADER` setting accordingly.\r\n+\r\n+.. setting:: SERIALIZATION_MODULES\r\n+\r\n+``SERIALIZATION_MODULES``\r\n+-------------------------\r\n+\r\n+Default: Not defined\r\n+\r\n+A dictionary of modules containing serializer definitions (provided as\r\n+strings), keyed by a string identifier for that serialization type. For\r\n+example, to define a YAML serializer, use::\r\n+\r\n+    SERIALIZATION_MODULES = {'yaml': 'path.to.yaml_serializer'}\r\n+\r\n+.. setting:: SERVER_EMAIL\r\n+\r\n+``SERVER_EMAIL``\r\n+----------------\r\n+\r\n+Default: ``'root@localhost'``\r\n+\r\n+The email address that error messages come from, such as those sent to\r\n+:setting:`ADMINS` and :setting:`MANAGERS`.\r\n+\r\n+.. admonition:: Why are my emails sent from a different address?\r\n+\r\n+    This address is used only for error messages. It is *not* the address that\r\n+    regular email messages sent with :meth:`~django.core.mail.send_mail()`\r\n+    come from; for that, see :setting:`DEFAULT_FROM_EMAIL`.\r\n+\r\n+.. setting:: SHORT_DATE_FORMAT\r\n+\r\n+``SHORT_DATE_FORMAT``\r\n+---------------------\r\n+\r\n+Default: ``'m/d/Y'`` (e.g. ``12/31/2003``)\r\n+\r\n+An available formatting that can be used for displaying date fields on\r\n+templates. Note that if :setting:`USE_L10N` is set to ``True``, then the\r\n+corresponding locale-dictated format has higher precedence and will be applied.\r\n+See :tfilter:`allowed date format strings <date>`.\r\n+\r\n+See also :setting:`DATE_FORMAT` and :setting:`SHORT_DATETIME_FORMAT`.\r\n+\r\n+.. setting:: SHORT_DATETIME_FORMAT\r\n+\r\n+``SHORT_DATETIME_FORMAT``\r\n+-------------------------\r\n+\r\n+Default: ``'m/d/Y P'`` (e.g. ``12/31/2003 4 p.m.``)\r\n+\r\n+An available formatting that can be used for displaying datetime fields on\r\n+templates. Note that if :setting:`USE_L10N` is set to ``True``, then the\r\n+corresponding locale-dictated format has higher precedence and will be applied.\r\n+See :tfilter:`allowed date format strings <date>`.\r\n+\r\n+See also :setting:`DATE_FORMAT` and :setting:`SHORT_DATE_FORMAT`.\r\n+\r\n+.. setting:: SIGNING_BACKEND\r\n+\r\n+``SIGNING_BACKEND``\r\n+-------------------\r\n+\r\n+Default: ``'django.core.signing.TimestampSigner'``\r\n+\r\n+The backend used for signing cookies and other data.\r\n+\r\n+See also the :doc:`/topics/signing` documentation.\r\n+\r\n+.. setting:: SILENCED_SYSTEM_CHECKS\r\n+\r\n+``SILENCED_SYSTEM_CHECKS``\r\n+--------------------------\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+A list of identifiers of messages generated by the system check framework\r\n+(i.e. ``[\"models.W001\"]``) that you wish to permanently acknowledge and ignore.\r\n+Silenced checks will not be output to the console.\r\n+\r\n+See also the :doc:`/ref/checks` documentation.\r\n+\r\n+.. setting:: TEMPLATES\r\n+\r\n+``TEMPLATES``\r\n+-------------\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+A list containing the settings for all template engines to be used with\r\n+Django. Each item of the list is a dictionary containing the options for an\r\n+individual engine.\r\n+\r\n+Here's a simple setup that tells the Django template engine to load templates\r\n+from the ``templates`` subdirectory inside each installed application::\r\n+\r\n+    TEMPLATES = [\r\n+        {\r\n+            'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n+            'APP_DIRS': True,\r\n+        },\r\n+    ]\r\n+\r\n+The following options are available for all backends.\r\n+\r\n+.. setting:: TEMPLATES-BACKEND\r\n+\r\n+``BACKEND``\r\n+~~~~~~~~~~~\r\n+\r\n+Default: Not defined\r\n+\r\n+The template backend to use. The built-in template backends are:\r\n+\r\n+* ``'django.template.backends.django.DjangoTemplates'``\r\n+* ``'django.template.backends.jinja2.Jinja2'``\r\n+\r\n+You can use a template backend that doesn't ship with Django by setting\r\n+``BACKEND`` to a fully-qualified path (i.e. ``'mypackage.whatever.Backend'``).\r\n+\r\n+.. setting:: TEMPLATES-NAME\r\n+\r\n+``NAME``\r\n+~~~~~~~~\r\n+\r\n+Default: see below\r\n+\r\n+The alias for this particular template engine. It's an identifier that allows\r\n+selecting an engine for rendering. Aliases must be unique across all\r\n+configured template engines.\r\n+\r\n+It defaults to the name of the module defining the engine class, i.e. the\r\n+next to last piece of :setting:`BACKEND <TEMPLATES-BACKEND>`, when it isn't\r\n+provided. For example if the backend is ``'mypackage.whatever.Backend'`` then\r\n+its default name is ``'whatever'``.\r\n+\r\n+.. setting:: TEMPLATES-DIRS\r\n+\r\n+``DIRS``\r\n+~~~~~~~~\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+Directories where the engine should look for template source files, in search\r\n+order.\r\n+\r\n+.. setting:: TEMPLATES-APP_DIRS\r\n+\r\n+``APP_DIRS``\r\n+~~~~~~~~~~~~\r\n+\r\n+Default: ``False``\r\n+\r\n+Whether the engine should look for template source files inside installed\r\n+applications.\r\n+\r\n+.. note::\r\n+\r\n+    The default :file:`settings.py` file created by :djadmin:`django-admin\r\n+    startproject <startproject>` sets ``'APP_DIRS': True``.\r\n+\r\n+.. setting:: TEMPLATES-OPTIONS\r\n+\r\n+``OPTIONS``\r\n+~~~~~~~~~~~\r\n+\r\n+Default: ``{}`` (Empty dict)\r\n+\r\n+Extra parameters to pass to the template backend. Available parameters vary\r\n+depending on the template backend. See\r\n+:class:`~django.template.backends.django.DjangoTemplates` and\r\n+:class:`~django.template.backends.jinja2.Jinja2` for the options of the\r\n+built-in backends.\r\n+\r\n+.. setting:: TEST_RUNNER\r\n+\r\n+``TEST_RUNNER``\r\n+---------------\r\n+\r\n+Default: ``'django.test.runner.DiscoverRunner'``\r\n+\r\n+The name of the class to use for starting the test suite. See\r\n+:ref:`other-testing-frameworks`.\r\n+\r\n+.. setting:: TEST_NON_SERIALIZED_APPS\r\n+\r\n+``TEST_NON_SERIALIZED_APPS``\r\n+----------------------------\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+In order to restore the database state between tests for\r\n+``TransactionTestCase``\\s and database backends without transactions, Django\r\n+will :ref:`serialize the contents of all apps <test-case-serialized-rollback>`\r\n+when it starts the test run so it can then reload from that copy before running\r\n+tests that need it.\r\n+\r\n+This slows down the startup time of the test runner; if you have apps that\r\n+you know don't need this feature, you can add their full names in here (e.g.\r\n+``'django.contrib.contenttypes'``) to exclude them from this serialization\r\n+process.\r\n+\r\n+.. setting:: THOUSAND_SEPARATOR\r\n+\r\n+``THOUSAND_SEPARATOR``\r\n+----------------------\r\n+\r\n+Default: ``','`` (Comma)\r\n+\r\n+Default thousand separator used when formatting numbers. This setting is\r\n+used only when :setting:`USE_THOUSAND_SEPARATOR` is ``True`` and\r\n+:setting:`NUMBER_GROUPING` is greater than ``0``.\r\n+\r\n+Note that if :setting:`USE_L10N` is set to ``True``, then the locale-dictated\r\n+format has higher precedence and will be applied instead.\r\n+\r\n+See also :setting:`NUMBER_GROUPING`, :setting:`DECIMAL_SEPARATOR` and\r\n+:setting:`USE_THOUSAND_SEPARATOR`.\r\n+\r\n+.. setting:: TIME_FORMAT\r\n+\r\n+``TIME_FORMAT``\r\n+---------------\r\n+\r\n+Default: ``'P'`` (e.g. ``4 p.m.``)\r\n+\r\n+The default formatting to use for displaying time fields in any part of the\r\n+system. Note that if :setting:`USE_L10N` is set to ``True``, then the\r\n+locale-dictated format has higher precedence and will be applied instead. See\r\n+:tfilter:`allowed date format strings <date>`.\r\n+\r\n+See also :setting:`DATE_FORMAT` and :setting:`DATETIME_FORMAT`.\r\n+\r\n+.. setting:: TIME_INPUT_FORMATS\r\n+\r\n+``TIME_INPUT_FORMATS``\r\n+----------------------\r\n+\r\n+Default::\r\n+\r\n+    [\r\n+        '%H:%M:%S',     # '14:30:59'\r\n+        '%H:%M:%S.%f',  # '14:30:59.000200'\r\n+        '%H:%M',        # '14:30'\r\n+    ]\r\n+\r\n+A list of formats that will be accepted when inputting data on a time field.\r\n+Formats will be tried in order, using the first valid one. Note that these\r\n+format strings use Python's :ref:`datetime module syntax\r\n+<strftime-strptime-behavior>`, not the format strings from the :tfilter:`date`\r\n+template filter.\r\n+\r\n+When :setting:`USE_L10N` is ``True``, the locale-dictated format has higher\r\n+precedence and will be applied instead.\r\n+\r\n+See also :setting:`DATE_INPUT_FORMATS` and :setting:`DATETIME_INPUT_FORMATS`.\r\n+\r\n+.. setting:: TIME_ZONE\r\n+\r\n+``TIME_ZONE``\r\n+-------------\r\n+\r\n+Default: ``'America/Chicago'``\r\n+\r\n+A string representing the time zone for this installation. See the `list of\r\n+time zones`_.\r\n+\r\n+.. note::\r\n+    Since Django was first released with the :setting:`TIME_ZONE` set to\r\n+    ``'America/Chicago'``, the global setting (used if nothing is defined in\r\n+    your project's ``settings.py``) remains ``'America/Chicago'`` for backwards\r\n+    compatibility. New project templates default to ``'UTC'``.\r\n+\r\n+Note that this isn't necessarily the time zone of the server. For example, one\r\n+server may serve multiple Django-powered sites, each with a separate time zone\r\n+setting.\r\n+\r\n+When :setting:`USE_TZ` is ``False``, this is the time zone in which Django\r\n+will store all datetimes. When :setting:`USE_TZ` is ``True``, this is the\r\n+default time zone that Django will use to display datetimes in templates and\r\n+to interpret datetimes entered in forms.\r\n+\r\n+On Unix environments (where :func:`time.tzset` is implemented), Django sets the\r\n+``os.environ['TZ']`` variable to the time zone you specify in the\r\n+:setting:`TIME_ZONE` setting. Thus, all your views and models will\r\n+automatically operate in this time zone. However, Django won't set the ``TZ``\r\n+environment variable if you're using the manual configuration option as\r\n+described in :ref:`manually configuring settings\r\n+<settings-without-django-settings-module>`. If Django doesn't set the ``TZ``\r\n+environment variable, it's up to you to ensure your processes are running in\r\n+the correct environment.\r\n+\r\n+.. note::\r\n+    Django cannot reliably use alternate time zones in a Windows environment.\r\n+    If you're running Django on Windows, :setting:`TIME_ZONE` must be set to\r\n+    match the system time zone.\r\n+\r\n+.. _list of time zones: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\r\n+\r\n+.. setting:: USE_I18N\r\n+\r\n+``USE_I18N``\r\n+------------\r\n+\r\n+Default: ``True``\r\n+\r\n+A boolean that specifies whether Django's translation system should be enabled.\r\n+This provides an easy way to turn it off, for performance. If this is set to\r\n+``False``, Django will make some optimizations so as not to load the\r\n+translation machinery.\r\n+\r\n+See also :setting:`LANGUAGE_CODE`, :setting:`USE_L10N` and :setting:`USE_TZ`.\r\n+\r\n+.. note::\r\n+\r\n+    The default :file:`settings.py` file created by :djadmin:`django-admin\r\n+    startproject <startproject>` includes ``USE_I18N = True`` for convenience.\r\n+\r\n+.. setting:: USE_L10N\r\n+\r\n+``USE_L10N``\r\n+------------\r\n+\r\n+Default: ``False``\r\n+\r\n+A boolean that specifies if localized formatting of data will be enabled by\r\n+default or not. If this is set to ``True``, e.g. Django will display numbers and\r\n+dates using the format of the current locale.\r\n+\r\n+See also :setting:`LANGUAGE_CODE`, :setting:`USE_I18N` and :setting:`USE_TZ`.\r\n+\r\n+.. note::\r\n+\r\n+    The default :file:`settings.py` file created by :djadmin:`django-admin\r\n+    startproject <startproject>` includes ``USE_L10N = True`` for convenience.\r\n+\r\n+.. setting:: USE_THOUSAND_SEPARATOR\r\n+\r\n+``USE_THOUSAND_SEPARATOR``\r\n+--------------------------\r\n+\r\n+Default: ``False``\r\n+\r\n+A boolean that specifies whether to display numbers using a thousand separator.\r\n+When :setting:`USE_L10N` is set to ``True`` and if this is also set to\r\n+``True``, Django will use the values of :setting:`THOUSAND_SEPARATOR` and\r\n+:setting:`NUMBER_GROUPING` to format numbers unless the locale already has an\r\n+existing thousands separator. If there is a thousands separator in the locale\r\n+format, it will have higher precedence and will be applied instead.\r\n+\r\n+See also :setting:`DECIMAL_SEPARATOR`, :setting:`NUMBER_GROUPING` and\r\n+:setting:`THOUSAND_SEPARATOR`.\r\n+\r\n+.. setting:: USE_TZ\r\n+\r\n+``USE_TZ``\r\n+----------\r\n+\r\n+Default: ``False``\r\n+\r\n+A boolean that specifies if datetimes will be timezone-aware by default or not.\r\n+If this is set to ``True``, Django will use timezone-aware datetimes internally.\r\n+Otherwise, Django will use naive datetimes in local time.\r\n+\r\n+See also :setting:`TIME_ZONE`, :setting:`USE_I18N` and :setting:`USE_L10N`.\r\n+\r\n+.. note::\r\n+\r\n+    The default :file:`settings.py` file created by\r\n+    :djadmin:`django-admin startproject <startproject>` includes\r\n+    ``USE_TZ = True`` for convenience.\r\n+\r\n+.. setting:: USE_X_FORWARDED_HOST\r\n+\r\n+``USE_X_FORWARDED_HOST``\r\n+------------------------\r\n+\r\n+Default: ``False``\r\n+\r\n+A boolean that specifies whether to use the ``X-Forwarded-Host`` header in\r\n+preference to the ``Host`` header. This should only be enabled if a proxy\r\n+which sets this header is in use.\r\n+\r\n+This setting takes priority over :setting:`USE_X_FORWARDED_PORT`. Per\r\n+:rfc:`7239#page-7`, the ``X-Forwarded-Host`` header can include the port\r\n+number, in which case you shouldn't use :setting:`USE_X_FORWARDED_PORT`.\r\n+\r\n+.. setting:: USE_X_FORWARDED_PORT\r\n+\r\n+``USE_X_FORWARDED_PORT``\r\n+------------------------\r\n+\r\n+Default: ``False``\r\n+\r\n+A boolean that specifies whether to use the ``X-Forwarded-Port`` header in\r\n+preference to the ``SERVER_PORT`` ``META`` variable. This should only be\r\n+enabled if a proxy which sets this header is in use.\r\n+\r\n+:setting:`USE_X_FORWARDED_HOST` takes priority over this setting.\r\n+\r\n+.. setting:: WSGI_APPLICATION\r\n+\r\n+``WSGI_APPLICATION``\r\n+--------------------\r\n+\r\n+Default: ``None``\r\n+\r\n+The full Python path of the WSGI application object that Django's built-in\r\n+servers (e.g. :djadmin:`runserver`) will use. The :djadmin:`django-admin\r\n+startproject <startproject>` management command will create a simple\r\n+``wsgi.py`` file with an ``application`` callable in it, and point this setting\r\n+to that ``application``.\r\n+\r\n+If not set, the return value of ``django.core.wsgi.get_wsgi_application()``\r\n+will be used. In this case, the behavior of :djadmin:`runserver` will be\r\n+identical to previous Django versions.\r\n+\r\n+.. setting:: YEAR_MONTH_FORMAT\r\n+\r\n+``YEAR_MONTH_FORMAT``\r\n+---------------------\r\n+\r\n+Default: ``'F Y'``\r\n+\r\n+The default formatting to use for date fields on Django admin change-list\r\n+pages -- and, possibly, by other parts of the system -- in cases when only the\r\n+year and month are displayed.\r\n+\r\n+For example, when a Django admin change-list page is being filtered by a date\r\n+drilldown, the header for a given month displays the month and the year.\r\n+Different locales have different formats. For example, U.S. English would say\r\n+\"January 2006,\" whereas another locale might say \"2006/January.\"\r\n+\r\n+Note that if :setting:`USE_L10N` is set to ``True``, then the corresponding\r\n+locale-dictated format has higher precedence and will be applied.\r\n+\r\n+See :tfilter:`allowed date format strings <date>`. See also\r\n+:setting:`DATE_FORMAT`, :setting:`DATETIME_FORMAT`, :setting:`TIME_FORMAT`\r\n+and :setting:`MONTH_DAY_FORMAT`.\r\n+\r\n+.. setting:: X_FRAME_OPTIONS\r\n+\r\n+``X_FRAME_OPTIONS``\r\n+-------------------\r\n+\r\n+Default: ``'SAMEORIGIN'``\r\n+\r\n+The default value for the X-Frame-Options header used by\r\n+:class:`~django.middleware.clickjacking.XFrameOptionsMiddleware`. See the\r\n+:doc:`clickjacking protection </ref/clickjacking/>` documentation.\r\n+\r\n+\r\n+Auth\r\n+====\r\n+\r\n+Settings for :mod:`django.contrib.auth`.\r\n+\r\n+.. setting:: AUTHENTICATION_BACKENDS\r\n+\r\n+``AUTHENTICATION_BACKENDS``\r\n+---------------------------\r\n+\r\n+Default: ``['django.contrib.auth.backends.ModelBackend']``\r\n+\r\n+A list of authentication backend classes (as strings) to use when attempting to\r\n+authenticate a user. See the :ref:`authentication backends documentation\r\n+<authentication-backends>` for details.\r\n+\r\n+.. setting:: AUTH_USER_MODEL\r\n+\r\n+``AUTH_USER_MODEL``\r\n+-------------------\r\n+\r\n+Default: ``'auth.User'``\r\n+\r\n+The model to use to represent a User. See :ref:`auth-custom-user`.\r\n+\r\n+.. warning::\r\n+    You cannot change the AUTH_USER_MODEL setting during the lifetime of\r\n+    a project (i.e. once you have made and migrated models that depend on it)\r\n+    without serious effort. It is intended to be set at the project start,\r\n+    and the model it refers to must be available in the first migration of\r\n+    the app that it lives in.\r\n+    See :ref:`auth-custom-user` for more details.\r\n+\r\n+.. setting:: LOGIN_REDIRECT_URL\r\n+\r\n+``LOGIN_REDIRECT_URL``\r\n+----------------------\r\n+\r\n+Default: ``'/accounts/profile/'``\r\n+\r\n+The URL or :ref:`named URL pattern <naming-url-patterns>` where requests are\r\n+redirected after login when the :class:`~django.contrib.auth.views.LoginView`\r\n+doesn't get a ``next`` GET parameter.\r\n+\r\n+.. setting:: LOGIN_URL\r\n+\r\n+``LOGIN_URL``\r\n+-------------\r\n+\r\n+Default: ``'/accounts/login/'``\r\n+\r\n+The URL or :ref:`named URL pattern <naming-url-patterns>` where requests are\r\n+redirected for login when using the\r\n+:func:`~django.contrib.auth.decorators.login_required` decorator,\r\n+:class:`~django.contrib.auth.mixins.LoginRequiredMixin`, or\r\n+:class:`~django.contrib.auth.mixins.AccessMixin`.\r\n+\r\n+.. setting:: LOGOUT_REDIRECT_URL\r\n+\r\n+``LOGOUT_REDIRECT_URL``\r\n+-----------------------\r\n+\r\n+Default: ``None``\r\n+\r\n+The URL or :ref:`named URL pattern <naming-url-patterns>` where requests are\r\n+redirected after logout if :class:`~django.contrib.auth.views.LogoutView`\r\n+doesn't have a ``next_page`` attribute.\r\n+\r\n+If ``None``, no redirect will be performed and the logout view will be\r\n+rendered.\r\n+\r\n+.. setting:: PASSWORD_RESET_TIMEOUT_DAYS\r\n+\r\n+``PASSWORD_RESET_TIMEOUT_DAYS``\r\n+-------------------------------\r\n+\r\n+Default: ``3``\r\n+\r\n+The minimum number of days a password reset link is valid for. Depending on\r\n+when the link is generated, it will be valid for up to a day longer.\r\n+\r\n+Used by the :class:`~django.contrib.auth.views.PasswordResetConfirmView`.\r\n+\r\n+.. setting:: PASSWORD_HASHERS\r\n+\r\n+``PASSWORD_HASHERS``\r\n+--------------------\r\n+\r\n+See :ref:`auth_password_storage`.\r\n+\r\n+Default::\r\n+\r\n+    [\r\n+        'django.contrib.auth.hashers.PBKDF2PasswordHasher',\r\n+        'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',\r\n+        'django.contrib.auth.hashers.Argon2PasswordHasher',\r\n+        'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',\r\n+    ]\r\n+\r\n+.. setting:: AUTH_PASSWORD_VALIDATORS\r\n+\r\n+``AUTH_PASSWORD_VALIDATORS``\r\n+----------------------------\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+The list of validators that are used to check the strength of user's passwords.\r\n+See :ref:`password-validation` for more details. By default, no validation is\r\n+performed and all passwords are accepted.\r\n+\r\n+.. _settings-messages:\r\n+\r\n+Messages\r\n+========\r\n+\r\n+Settings for :mod:`django.contrib.messages`.\r\n+\r\n+.. setting:: MESSAGE_LEVEL\r\n+\r\n+``MESSAGE_LEVEL``\r\n+-----------------\r\n+\r\n+Default: ``messages.INFO``\r\n+\r\n+Sets the minimum message level that will be recorded by the messages\r\n+framework. See :ref:`message levels <message-level>` for more details.\r\n+\r\n+.. admonition:: Important\r\n+\r\n+   If you override ``MESSAGE_LEVEL`` in your settings file and rely on any of\r\n+   the built-in constants, you must import the constants module directly to\r\n+   avoid the potential for circular imports, e.g.::\r\n+\r\n+       from django.contrib.messages import constants as message_constants\r\n+       MESSAGE_LEVEL = message_constants.DEBUG\r\n+\r\n+   If desired, you may specify the numeric values for the constants directly\r\n+   according to the values in the above :ref:`constants table\r\n+   <message-level-constants>`.\r\n+\r\n+.. setting:: MESSAGE_STORAGE\r\n+\r\n+``MESSAGE_STORAGE``\r\n+-------------------\r\n+\r\n+Default: ``'django.contrib.messages.storage.fallback.FallbackStorage'``\r\n+\r\n+Controls where Django stores message data. Valid values are:\r\n+\r\n+* ``'django.contrib.messages.storage.fallback.FallbackStorage'``\r\n+* ``'django.contrib.messages.storage.session.SessionStorage'``\r\n+* ``'django.contrib.messages.storage.cookie.CookieStorage'``\r\n+\r\n+See :ref:`message storage backends <message-storage-backends>` for more details.\r\n+\r\n+The backends that use cookies --\r\n+:class:`~django.contrib.messages.storage.cookie.CookieStorage` and\r\n+:class:`~django.contrib.messages.storage.fallback.FallbackStorage` --\r\n+use the value of :setting:`SESSION_COOKIE_DOMAIN`, :setting:`SESSION_COOKIE_SECURE`\r\n+and :setting:`SESSION_COOKIE_HTTPONLY` when setting their cookies.\r\n+\r\n+.. setting:: MESSAGE_TAGS\r\n+\r\n+``MESSAGE_TAGS``\r\n+----------------\r\n+\r\n+Default::\r\n+\r\n+    {\r\n+        messages.DEBUG: 'debug',\r\n+        messages.INFO: 'info',\r\n+        messages.SUCCESS: 'success',\r\n+        messages.WARNING: 'warning',\r\n+        messages.ERROR: 'error',\r\n+    }\r\n+\r\n+This sets the mapping of message level to message tag, which is typically\r\n+rendered as a CSS class in HTML. If you specify a value, it will extend\r\n+the default. This means you only have to specify those values which you need\r\n+to override. See :ref:`message-displaying` above for more details.\r\n+\r\n+.. admonition:: Important\r\n+\r\n+   If you override ``MESSAGE_TAGS`` in your settings file and rely on any of\r\n+   the built-in constants, you must import the ``constants`` module directly to\r\n+   avoid the potential for circular imports, e.g.::\r\n+\r\n+       from django.contrib.messages import constants as message_constants\r\n+       MESSAGE_TAGS = {message_constants.INFO: ''}\r\n+\r\n+   If desired, you may specify the numeric values for the constants directly\r\n+   according to the values in the above :ref:`constants table\r\n+   <message-level-constants>`.\r\n+\r\n+.. _settings-sessions:\r\n+\r\n+Sessions\r\n+========\r\n+\r\n+Settings for :mod:`django.contrib.sessions`.\r\n+\r\n+.. setting:: SESSION_CACHE_ALIAS\r\n+\r\n+``SESSION_CACHE_ALIAS``\r\n+-----------------------\r\n+\r\n+Default: ``'default'``\r\n+\r\n+If you're using :ref:`cache-based session storage <cached-sessions-backend>`,\r\n+this selects the cache to use.\r\n+\r\n+.. setting:: SESSION_COOKIE_AGE\r\n+\r\n+``SESSION_COOKIE_AGE``\r\n+----------------------\r\n+\r\n+Default: ``1209600`` (2 weeks, in seconds)\r\n+\r\n+The age of session cookies, in seconds.\r\n+\r\n+.. setting:: SESSION_COOKIE_DOMAIN\r\n+\r\n+``SESSION_COOKIE_DOMAIN``\r\n+-------------------------\r\n+\r\n+Default: ``None``\r\n+\r\n+The domain to use for session cookies. Set this to a string such as\r\n+``\"example.com\"`` for cross-domain cookies, or use ``None`` for a standard\r\n+domain cookie.\r\n+\r\n+Be cautious when updating this setting on a production site. If you update\r\n+this setting to enable cross-domain cookies on a site that previously used\r\n+standard domain cookies, existing user cookies will be set to the old\r\n+domain. This may result in them being unable to log in as long as these cookies\r\n+persist.\r\n+\r\n+This setting also affects cookies set by :mod:`django.contrib.messages`.\r\n+\r\n+.. setting:: SESSION_COOKIE_HTTPONLY\r\n+\r\n+``SESSION_COOKIE_HTTPONLY``\r\n+---------------------------\r\n+\r\n+Default: ``True``\r\n+\r\n+Whether to use ``HTTPOnly`` flag on the session cookie. If this is set to\r\n+``True``, client-side JavaScript will not to be able to access the\r\n+session cookie.\r\n+\r\n+HTTPOnly_ is a flag included in a Set-Cookie HTTP response header. It\r\n+is not part of the :rfc:`2109` standard for cookies, and it isn't honored\r\n+consistently by all browsers. However, when it is honored, it can be a\r\n+useful way to mitigate the risk of a client side script accessing the\r\n+protected cookie data.\r\n+\r\n+This makes it less trivial for an attacker to escalate a cross-site scripting\r\n+vulnerability into full hijacking of a user's session. There aren't many good\r\n+reasons for turning this off. Your code shouldn't read session cookies from\r\n+JavaScript.\r\n+\r\n+.. _HTTPOnly: https://www.owasp.org/index.php/HTTPOnly\r\n+\r\n+.. setting:: SESSION_COOKIE_NAME\r\n+\r\n+``SESSION_COOKIE_NAME``\r\n+-----------------------\r\n+\r\n+Default: ``'sessionid'``\r\n+\r\n+The name of the cookie to use for sessions. This can be whatever you want\r\n+(as long as it's different from the other cookie names in your application).\r\n+\r\n+.. setting:: SESSION_COOKIE_PATH\r\n+\r\n+``SESSION_COOKIE_PATH``\r\n+-----------------------\r\n+\r\n+Default: ``'/'``\r\n+\r\n+The path set on the session cookie. This should either match the URL path of your\r\n+Django installation or be parent of that path.\r\n+\r\n+This is useful if you have multiple Django instances running under the same\r\n+hostname. They can use different cookie paths, and each instance will only see\r\n+its own session cookie.\r\n+\r\n+.. setting:: SESSION_COOKIE_SAMESITE\r\n+\r\n+``SESSION_COOKIE_SAMESITE``\r\n+---------------------------\r\n+\r\n+Default: ``'Lax'``\r\n+\r\n+The value of the `SameSite`_ flag on the session cookie. This flag prevents the\r\n+cookie from being sent in cross-site requests thus preventing CSRF attacks and\r\n+making some methods of stealing session cookie impossible.\r\n+\r\n+Possible values for the setting are:\r\n+\r\n+* ``'Strict'``: prevents the cookie from being sent by the browser to the\r\n+  target site in all cross-site browsing context, even when following a regular\r\n+  link.\r\n+\r\n+  For example, for a GitHub-like website this would mean that if a logged-in\r\n+  user follows a link to a private GitHub project posted on a corporate\r\n+  discussion forum or email, GitHub will not receive the session cookie and the\r\n+  user won't be able to access the project. A bank website, however, most\r\n+  likely doesn't want to allow any transactional pages to be linked from\r\n+  external sites so the ``'Strict'`` flag would be appropriate.\r\n+\r\n+* ``'Lax'`` (default): provides a balance between security and usability for\r\n+  websites that want to maintain user's logged-in session after the user\r\n+  arrives from an external link.\r\n+\r\n+  In the GitHub scenario, the session cookie would be allowed when following a\r\n+  regular link from an external website and be blocked in CSRF-prone request\r\n+  methods (e.g. ``POST``).\r\n+\r\n+* ``None``: disables the flag.\r\n+\r\n+.. _SameSite: https://www.owasp.org/index.php/SameSite\r\n+\r\n+.. setting:: SESSION_COOKIE_SECURE\r\n+\r\n+``SESSION_COOKIE_SECURE``\r\n+-------------------------\r\n+\r\n+Default: ``False``\r\n+\r\n+Whether to use a secure cookie for the session cookie. If this is set to\r\n+``True``, the cookie will be marked as \"secure,\" which means browsers may\r\n+ensure that the cookie is only sent under an HTTPS connection.\r\n+\r\n+Leaving this setting off isn't a good idea because an attacker could capture an\r\n+unencrypted session cookie with a packet sniffer and use the cookie to hijack\r\n+the user's session.\r\n+\r\n+.. setting:: SESSION_ENGINE\r\n+\r\n+``SESSION_ENGINE``\r\n+------------------\r\n+\r\n+Default: ``'django.contrib.sessions.backends.db'``\r\n+\r\n+Controls where Django stores session data. Included engines are:\r\n+\r\n+* ``'django.contrib.sessions.backends.db'``\r\n+* ``'django.contrib.sessions.backends.file'``\r\n+* ``'django.contrib.sessions.backends.cache'``\r\n+* ``'django.contrib.sessions.backends.cached_db'``\r\n+* ``'django.contrib.sessions.backends.signed_cookies'``\r\n+\r\n+See :ref:`configuring-sessions` for more details.\r\n+\r\n+.. setting:: SESSION_EXPIRE_AT_BROWSER_CLOSE\r\n+\r\n+``SESSION_EXPIRE_AT_BROWSER_CLOSE``\r\n+-----------------------------------\r\n+\r\n+Default: ``False``\r\n+\r\n+Whether to expire the session when the user closes their browser. See\r\n+:ref:`browser-length-vs-persistent-sessions`.\r\n+\r\n+.. setting:: SESSION_FILE_PATH\r\n+\r\n+``SESSION_FILE_PATH``\r\n+---------------------\r\n+\r\n+Default: ``None``\r\n+\r\n+If you're using file-based session storage, this sets the directory in\r\n+which Django will store session data. When the default value (``None``) is\r\n+used, Django will use the standard temporary directory for the system.\r\n+\r\n+\r\n+.. setting:: SESSION_SAVE_EVERY_REQUEST\r\n+\r\n+``SESSION_SAVE_EVERY_REQUEST``\r\n+------------------------------\r\n+\r\n+Default: ``False``\r\n+\r\n+Whether to save the session data on every request. If this is ``False``\r\n+(default), then the session data will only be saved if it has been modified --\r\n+that is, if any of its dictionary values have been assigned or deleted. Empty\r\n+sessions won't be created, even if this setting is active.\r\n+\r\n+.. setting:: SESSION_SERIALIZER\r\n+\r\n+``SESSION_SERIALIZER``\r\n+----------------------\r\n+\r\n+Default: ``'django.contrib.sessions.serializers.JSONSerializer'``\r\n+\r\n+Full import path of a serializer class to use for serializing session data.\r\n+Included serializers are:\r\n+\r\n+* ``'django.contrib.sessions.serializers.PickleSerializer'``\r\n+* ``'django.contrib.sessions.serializers.JSONSerializer'``\r\n+\r\n+See :ref:`session_serialization` for details, including a warning regarding\r\n+possible remote code execution when using\r\n+:class:`~django.contrib.sessions.serializers.PickleSerializer`.\r\n+\r\n+Sites\r\n+=====\r\n+\r\n+Settings for :mod:`django.contrib.sites`.\r\n+\r\n+.. setting:: SITE_ID\r\n+\r\n+``SITE_ID``\r\n+-----------\r\n+\r\n+Default: Not defined\r\n+\r\n+The ID, as an integer, of the current site in the ``django_site`` database\r\n+table. This is used so that application data can hook into specific sites\r\n+and a single database can manage content for multiple sites.\r\n+\r\n+\r\n+.. _settings-staticfiles:\r\n+\r\n+Static Files\r\n+============\r\n+\r\n+Settings for :mod:`django.contrib.staticfiles`.\r\n+\r\n+.. setting:: STATIC_ROOT\r\n+\r\n+``STATIC_ROOT``\r\n+---------------\r\n+\r\n+Default: ``None``\r\n+\r\n+The absolute path to the directory where :djadmin:`collectstatic` will collect\r\n+static files for deployment.\r\n+\r\n+Example: ``\"/var/www/example.com/static/\"``\r\n+\r\n+If the :doc:`staticfiles</ref/contrib/staticfiles>` contrib app is enabled\r\n+(as in the default project template), the :djadmin:`collectstatic` management\r\n+command will collect static files into this directory. See the how-to on\r\n+:doc:`managing static files</howto/static-files/index>` for more details about\r\n+usage.\r\n+\r\n+.. warning::\r\n+\r\n+    This should be an initially empty destination directory for collecting\r\n+    your static files from their permanent locations into one directory for\r\n+    ease of deployment; it is **not** a place to store your static files\r\n+    permanently. You should do that in directories that will be found by\r\n+    :doc:`staticfiles</ref/contrib/staticfiles>`\u2019s\r\n+    :setting:`finders<STATICFILES_FINDERS>`, which by default, are\r\n+    ``'static/'`` app sub-directories and any directories you include in\r\n+    :setting:`STATICFILES_DIRS`).\r\n+\r\n+.. setting:: STATIC_URL\r\n+\r\n+``STATIC_URL``\r\n+--------------\r\n+\r\n+Default: ``None``\r\n+\r\n+URL to use when referring to static files located in :setting:`STATIC_ROOT`.\r\n+\r\n+Example: ``\"/static/\"`` or ``\"http://static.example.com/\"``\r\n+\r\n+If not ``None``, this will be used as the base path for\r\n+:ref:`asset definitions<form-asset-paths>` (the ``Media`` class) and the\r\n+:doc:`staticfiles app</ref/contrib/staticfiles>`.\r\n+\r\n+It must end in a slash if set to a non-empty value.\r\n+\r\n+You may need to :ref:`configure these files to be served in development\r\n+<serving-static-files-in-development>` and will definitely need to do so\r\n+:doc:`in production </howto/static-files/deployment>`.\r\n+\r\n+.. setting:: STATICFILES_DIRS\r\n+\r\n+``STATICFILES_DIRS``\r\n+--------------------\r\n+\r\n+Default: ``[]`` (Empty list)\r\n+\r\n+This setting defines the additional locations the staticfiles app will traverse\r\n+if the ``FileSystemFinder`` finder is enabled, e.g. if you use the\r\n+:djadmin:`collectstatic` or :djadmin:`findstatic` management command or use the\r\n+static file serving view.\r\n+\r\n+This should be set to a list of strings that contain full paths to\r\n+your additional files directory(ies) e.g.::\r\n+\r\n+    STATICFILES_DIRS = [\r\n+        \"/home/special.polls.com/polls/static\",\r\n+        \"/home/polls.com/polls/static\",\r\n+        \"/opt/webfiles/common\",\r\n+    ]\r\n+\r\n+Note that these paths should use Unix-style forward slashes, even on Windows\r\n+(e.g. ``\"C:/Users/user/mysite/extra_static_content\"``).\r\n+\r\n+Prefixes (optional)\r\n+~~~~~~~~~~~~~~~~~~~\r\n+\r\n+In case you want to refer to files in one of the locations with an additional\r\n+namespace, you can **optionally** provide a prefix as ``(prefix, path)``\r\n+tuples, e.g.::\r\n+\r\n+    STATICFILES_DIRS = [\r\n+        # ...\r\n+        (\"downloads\", \"/opt/webfiles/stats\"),\r\n+    ]\r\n+\r\n+For example, assuming you have :setting:`STATIC_URL` set to ``'/static/'``, the\r\n+:djadmin:`collectstatic` management command would collect the \"stats\" files\r\n+in a ``'downloads'`` subdirectory of :setting:`STATIC_ROOT`.\r\n+\r\n+This would allow you to refer to the local file\r\n+``'/opt/webfiles/stats/polls_20101022.tar.gz'`` with\r\n+``'/static/downloads/polls_20101022.tar.gz'`` in your templates, e.g.:\r\n+\r\n+.. code-block:: html+django\r\n+\r\n+    <a href=\"{% static \"downloads/polls_20101022.tar.gz\" %}\">\r\n+\r\n+.. setting:: STATICFILES_STORAGE\r\n+\r\n+``STATICFILES_STORAGE``\r\n+-----------------------\r\n+\r\n+Default: ``'django.contrib.staticfiles.storage.StaticFilesStorage'``\r\n+\r\n+The file storage engine to use when collecting static files with the\r\n+:djadmin:`collectstatic` management command.\r\n+\r\n+A ready-to-use instance of the storage backend defined in this setting\r\n+can be found at ``django.contrib.staticfiles.storage.staticfiles_storage``.\r\n+\r\n+For an example, see :ref:`staticfiles-from-cdn`.\r\n+\r\n+.. setting:: STATICFILES_FINDERS\r\n+\r\n+``STATICFILES_FINDERS``\r\n+-----------------------\r\n+\r\n+Default::\r\n+\r\n+    [\r\n+        'django.contrib.staticfiles.finders.FileSystemFinder',\r\n+        'django.contrib.staticfiles.finders.AppDirectoriesFinder',\r\n+    ]\r\n+\r\n+The list of finder backends that know how to find static files in\r\n+various locations.\r\n+\r\n+The default will find files stored in the :setting:`STATICFILES_DIRS` setting\r\n+(using ``django.contrib.staticfiles.finders.FileSystemFinder``) and in a\r\n+``static`` subdirectory of each app (using\r\n+``django.contrib.staticfiles.finders.AppDirectoriesFinder``). If multiple\r\n+files with the same name are present, the first file that is found will be\r\n+used.\r\n+\r\n+One finder is disabled by default:\r\n+``django.contrib.staticfiles.finders.DefaultStorageFinder``. If added to\r\n+your :setting:`STATICFILES_FINDERS` setting, it will look for static files in\r\n+the default file storage as defined by the :setting:`DEFAULT_FILE_STORAGE`\r\n+setting.\r\n+\r\n+.. note::\r\n+\r\n+    When using the ``AppDirectoriesFinder`` finder, make sure your apps\r\n+    can be found by staticfiles. Simply add the app to the\r\n+    :setting:`INSTALLED_APPS` setting of your site.\r\n+\r\n+Static file finders are currently considered a private interface, and this\r\n+interface is thus undocumented.\r\n+\r\n+Core Settings Topical Index\r\n+===========================\r\n+\r\n+Cache\r\n+-----\r\n+* :setting:`CACHES`\r\n+* :setting:`CACHE_MIDDLEWARE_ALIAS`\r\n+* :setting:`CACHE_MIDDLEWARE_KEY_PREFIX`\r\n+* :setting:`CACHE_MIDDLEWARE_SECONDS`\r\n+\r\n+Database\r\n+--------\r\n+* :setting:`DATABASES`\r\n+* :setting:`DATABASE_ROUTERS`\r\n+* :setting:`DEFAULT_INDEX_TABLESPACE`\r\n+* :setting:`DEFAULT_TABLESPACE`\r\n+\r\n+Debugging\r\n+---------\r\n+* :setting:`DEBUG`\r\n+* :setting:`DEBUG_PROPAGATE_EXCEPTIONS`\r\n+\r\n+Email\r\n+-----\r\n+* :setting:`ADMINS`\r\n+* :setting:`DEFAULT_CHARSET`\r\n+* :setting:`DEFAULT_FROM_EMAIL`\r\n+* :setting:`EMAIL_BACKEND`\r\n+* :setting:`EMAIL_FILE_PATH`\r\n+* :setting:`EMAIL_HOST`\r\n+* :setting:`EMAIL_HOST_PASSWORD`\r\n+* :setting:`EMAIL_HOST_USER`\r\n+* :setting:`EMAIL_PORT`\r\n+* :setting:`EMAIL_SSL_CERTFILE`\r\n+* :setting:`EMAIL_SSL_KEYFILE`\r\n+* :setting:`EMAIL_SUBJECT_PREFIX`\r\n+* :setting:`EMAIL_TIMEOUT`\r\n+* :setting:`EMAIL_USE_LOCALTIME`\r\n+* :setting:`EMAIL_USE_TLS`\r\n+* :setting:`MANAGERS`\r\n+* :setting:`SERVER_EMAIL`\r\n+\r\n+Error reporting\r\n+---------------\r\n+* :setting:`DEFAULT_EXCEPTION_REPORTER_FILTER`\r\n+* :setting:`IGNORABLE_404_URLS`\r\n+* :setting:`MANAGERS`\r\n+* :setting:`SILENCED_SYSTEM_CHECKS`\r\n+\r\n+.. _file-upload-settings:\r\n+\r\n+File uploads\r\n+------------\r\n+* :setting:`DEFAULT_FILE_STORAGE`\r\n+* :setting:`FILE_UPLOAD_HANDLERS`\r\n+* :setting:`FILE_UPLOAD_MAX_MEMORY_SIZE`\r\n+* :setting:`FILE_UPLOAD_PERMISSIONS`\r\n+* :setting:`FILE_UPLOAD_TEMP_DIR`\r\n+* :setting:`MEDIA_ROOT`\r\n+* :setting:`MEDIA_URL`\r\n+\r\n+Forms\r\n+-----\r\n+* :setting:`FORM_RENDERER`\r\n+\r\n+Globalization (``i18n``/``l10n``)\r\n+---------------------------------\r\n+* :setting:`DATE_FORMAT`\r\n+* :setting:`DATE_INPUT_FORMATS`\r\n+* :setting:`DATETIME_FORMAT`\r\n+* :setting:`DATETIME_INPUT_FORMATS`\r\n+* :setting:`DECIMAL_SEPARATOR`\r\n+* :setting:`FIRST_DAY_OF_WEEK`\r\n+* :setting:`FORMAT_MODULE_PATH`\r\n+* :setting:`LANGUAGE_CODE`\r\n+* :setting:`LANGUAGE_COOKIE_AGE`\r\n+* :setting:`LANGUAGE_COOKIE_DOMAIN`\r\n+* :setting:`LANGUAGE_COOKIE_NAME`\r\n+* :setting:`LANGUAGE_COOKIE_PATH`\r\n+* :setting:`LANGUAGES`\r\n+* :setting:`LOCALE_PATHS`\r\n+* :setting:`MONTH_DAY_FORMAT`\r\n+* :setting:`NUMBER_GROUPING`\r\n+* :setting:`SHORT_DATE_FORMAT`\r\n+* :setting:`SHORT_DATETIME_FORMAT`\r\n+* :setting:`THOUSAND_SEPARATOR`\r\n+* :setting:`TIME_FORMAT`\r\n+* :setting:`TIME_INPUT_FORMATS`\r\n+* :setting:`TIME_ZONE`\r\n+* :setting:`USE_I18N`\r\n+* :setting:`USE_L10N`\r\n+* :setting:`USE_THOUSAND_SEPARATOR`\r\n+* :setting:`USE_TZ`\r\n+* :setting:`YEAR_MONTH_FORMAT`\r\n+\r\n+HTTP\r\n+----\r\n+* :setting:`DATA_UPLOAD_MAX_MEMORY_SIZE`\r\n+* :setting:`DATA_UPLOAD_MAX_NUMBER_FIELDS`\r\n+* :setting:`DEFAULT_CHARSET`\r\n+* :setting:`DISALLOWED_USER_AGENTS`\r\n+* :setting:`FORCE_SCRIPT_NAME`\r\n+* :setting:`INTERNAL_IPS`\r\n+* :setting:`MIDDLEWARE`\r\n+* Security\r\n+\r\n+  * :setting:`SECURE_BROWSER_XSS_FILTER`\r\n+  * :setting:`SECURE_CONTENT_TYPE_NOSNIFF`\r\n+  * :setting:`SECURE_HSTS_INCLUDE_SUBDOMAINS`\r\n+  * :setting:`SECURE_HSTS_PRELOAD`\r\n+  * :setting:`SECURE_HSTS_SECONDS`\r\n+  * :setting:`SECURE_PROXY_SSL_HEADER`\r\n+  * :setting:`SECURE_REDIRECT_EXEMPT`\r\n+  * :setting:`SECURE_SSL_HOST`\r\n+  * :setting:`SECURE_SSL_REDIRECT`\r\n+* :setting:`SIGNING_BACKEND`\r\n+* :setting:`USE_X_FORWARDED_HOST`\r\n+* :setting:`USE_X_FORWARDED_PORT`\r\n+* :setting:`WSGI_APPLICATION`\r\n+\r\n+Logging\r\n+-------\r\n+* :setting:`LOGGING`\r\n+* :setting:`LOGGING_CONFIG`\r\n+\r\n+Models\r\n+------\r\n+* :setting:`ABSOLUTE_URL_OVERRIDES`\r\n+* :setting:`FIXTURE_DIRS`\r\n+* :setting:`INSTALLED_APPS`\r\n+\r\n+Security\r\n+--------\r\n+* Cross Site Request Forgery Protection\r\n+\r\n+  * :setting:`CSRF_COOKIE_DOMAIN`\r\n+  * :setting:`CSRF_COOKIE_NAME`\r\n+  * :setting:`CSRF_COOKIE_PATH`\r\n+  * :setting:`CSRF_COOKIE_SAMESITE`\r\n+  * :setting:`CSRF_COOKIE_SECURE`\r\n+  * :setting:`CSRF_FAILURE_VIEW`\r\n+  * :setting:`CSRF_HEADER_NAME`\r\n+  * :setting:`CSRF_TRUSTED_ORIGINS`\r\n+  * :setting:`CSRF_USE_SESSIONS`\r\n+\r\n+* :setting:`SECRET_KEY`\r\n+* :setting:`X_FRAME_OPTIONS`\r\n+\r\n+Serialization\r\n+-------------\r\n+* :setting:`DEFAULT_CHARSET`\r\n+* :setting:`SERIALIZATION_MODULES`\r\n+\r\n+Templates\r\n+---------\r\n+* :setting:`TEMPLATES`\r\n+\r\n+Testing\r\n+-------\r\n+* Database: :setting:`TEST <DATABASE-TEST>`\r\n+* :setting:`TEST_NON_SERIALIZED_APPS`\r\n+* :setting:`TEST_RUNNER`\r\n+\r\n+URLs\r\n+----\r\n+* :setting:`APPEND_SLASH`\r\n+* :setting:`PREPEND_WWW`\r\n+* :setting:`ROOT_URLCONF`\r\ndiff --git a/docs/ref/settings.txt b/docs/ref/settings.txt\r\nindex 46e99af993..f1e9a4cf37 100644\r\n--- a/docs/ref/settings.txt\r\n+++ b/docs/ref/settings.txt\r\n@@ -1484,12 +1484,23 @@ This value mirrors the functionality and caveats of the\r\n ``FILE_UPLOAD_PERMISSIONS``\r\n ---------------------------\r\n \r\n-Default: ``None``\r\n+Default: ``0o644``\r\n \r\n The numeric mode (i.e. ``0o644``) to set newly uploaded files to. For\r\n more information about what these modes mean, see the documentation for\r\n :func:`os.chmod`.\r\n \r\n+.. warning::\r\n+\r\n+    When FILE_UPLOAD_PERMISSIONS is not explicitly set, the permissions for \r\n+    uploaded files might not be consistent. This depends on whether a \r\n+    MemoryUploadedFile or a TemporaryUploadedFile was used for temporary \r\n+    storage of the uploaded data, which in turn depends on the uploaded data \r\n+    size with the default FILE_UPLOAD_HANDLERS. On some systems, the \r\n+    tempfile.NamedTemporaryFile + os.rename sequence causes the resulting \r\n+    file permissions to be 0o600. It's recommended to explicitly set \r\n+    FILE_UPLOAD_PERMISSIONS to ensure consistent file permissions.\r\n+\r\n If this isn't given or is ``None``, you'll get operating-system\r\n dependent behavior. On most platforms, temporary files will have a mode\r\n of ``0o600``, and files saved from memory will be saved using the",
        "model_stats": {
            "accumulated_cost": 0.45564899999999997,
            "costs": [
                0.015960000000000002,
                0.019299,
                0.02391,
                0.024888,
                0.029637,
                0.033954,
                0.034103999999999995,
                0.03801,
                0.048534,
                0.042135,
                0.042638999999999996,
                0.050532,
                0.052046999999999996
            ]
        }
    }
}