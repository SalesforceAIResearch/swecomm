{
    "instance_id": "django__django-14915",
    "traj": [
        [
            {
                "id": 0,
                "timestamp": "2024-07-16T22:15:58.809012",
                "source": "user",
                "message": "Please fix the following issue for the repository in /workspace/django__django__4.1.\nEnvironment has been set up for you to start working. You may assume all necessary tools are installed.\n\n# Problem Statement\nModelChoiceIteratorValue is not hashable.\nDescription\n\t\nRecently I migrated from Django 3.0 to Django 3.1. In my code, I add custom data-* attributes to the select widget options. After the upgrade some of those options broke. Error is {TypeError}unhashable type: 'ModelChoiceIteratorValue'.\nExample (this one breaks):\n\tdef create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n\t\tcontext = super().create_option(name, value, label, selected, index, subindex, attrs)\n\t\tif not value:\n\t\t\treturn context\n\t\tif value in self.show_fields: # This is a dict {1: ['first_name', 'last_name']}\n\t\t\tcontext['attrs']['data-fields'] = json.dumps(self.show_fields[value])\nHowever, working with arrays is not an issue:\n\tdef create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n\t\tcontext = super().create_option(name, value, label, selected, index, subindex, attrs)\n\t\tif not value:\n\t\t\treturn context\n\t\tif value in allowed_values: # This is an array [1, 2]\n\t\t\t...\n\n\nIMPORTANT: You should ONLY interact with the environment provided to you AND NEVER ASK FOR HUMAN HELP.\nYou should NOT modify any existing test case files. If needed, you can add new test cases in a NEW file to reproduce the issue.\nYou SHOULD INCLUDE PROPER INDENTATION in your edit commands.\nWhen you think you have fixed the issue through code changes, please run the following command: <execute_bash> exit </execute_bash>.\n",
                "action": "message",
                "args": {
                    "content": "Please fix the following issue for the repository in /workspace/django__django__4.1.\nEnvironment has been set up for you to start working. You may assume all necessary tools are installed.\n\n# Problem Statement\nModelChoiceIteratorValue is not hashable.\nDescription\n\t\nRecently I migrated from Django 3.0 to Django 3.1. In my code, I add custom data-* attributes to the select widget options. After the upgrade some of those options broke. Error is {TypeError}unhashable type: 'ModelChoiceIteratorValue'.\nExample (this one breaks):\n\tdef create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n\t\tcontext = super().create_option(name, value, label, selected, index, subindex, attrs)\n\t\tif not value:\n\t\t\treturn context\n\t\tif value in self.show_fields: # This is a dict {1: ['first_name', 'last_name']}\n\t\t\tcontext['attrs']['data-fields'] = json.dumps(self.show_fields[value])\nHowever, working with arrays is not an issue:\n\tdef create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n\t\tcontext = super().create_option(name, value, label, selected, index, subindex, attrs)\n\t\tif not value:\n\t\t\treturn context\n\t\tif value in allowed_values: # This is an array [1, 2]\n\t\t\t...\n\n\nIMPORTANT: You should ONLY interact with the environment provided to you AND NEVER ASK FOR HUMAN HELP.\nYou should NOT modify any existing test case files. If needed, you can add new test cases in a NEW file to reproduce the issue.\nYou SHOULD INCLUDE PROPER INDENTATION in your edit commands.\nWhen you think you have fixed the issue through code changes, please run the following command: <execute_bash> exit </execute_bash>.\n",
                    "wait_for_response": false
                }
            },
            {
                "message": "No observation",
                "observation": "null",
                "content": "",
                "extras": {}
            }
        ],
        [
            {
                "id": 3,
                "timestamp": "2024-07-16T22:16:02.155482",
                "source": "agent",
                "message": "Running command: grep -r \"ModelChoiceIteratorValue\" /workspace/django__django__4.1",
                "action": "run",
                "args": {
                    "command": "grep -r \"ModelChoiceIteratorValue\" /workspace/django__django__4.1",
                    "thought": "Certainly! I'll investigate the issue and try to fix it. Let's start by examining the relevant code.",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 4,
                "timestamp": "2024-07-16T22:16:02.653549",
                "source": "agent",
                "message": "Command `grep -r \"ModelChoiceIteratorValue\" /workspace/django__django__4.1` executed with exit code 0.",
                "cause": 3,
                "observation": "run",
                "content": "/workspace/django__django__4.1/django/forms/models.py:class ModelChoiceIteratorValue:\r\n/workspace/django__django__4.1/django/forms/models.py:        if isinstance(other, ModelChoiceIteratorValue):\r\n/workspace/django__django__4.1/django/forms/models.py:            ModelChoiceIteratorValue(self.field.prepare_value(obj), obj),\r\n/workspace/django__django__4.1/docs/ref/forms/fields.txt::class:`ModelChoiceIteratorValue` instances as the first ``value`` element in\r\n/workspace/django__django__4.1/docs/ref/forms/fields.txt:each choice. ``ModelChoiceIteratorValue`` wraps the choice value while\r\n/workspace/django__django__4.1/docs/ref/forms/fields.txt:        :class:`ModelChoiceIteratorValue` instance.\r\n/workspace/django__django__4.1/docs/ref/forms/fields.txt:``ModelChoiceIteratorValue``\r\n/workspace/django__django__4.1/docs/ref/forms/fields.txt:.. class:: ModelChoiceIteratorValue(value, instance)\r\n/workspace/django__django__4.1/docs/ref/forms/fields.txt:    ``ModelChoiceIteratorValue`` has the following method:\r\n/workspace/django__django__4.1/docs/releases/3.1.txt:  :class:`~django.forms.ModelChoiceIteratorValue` that can be used by widgets\r\n/workspace/django__django__4.1/docs/releases/3.1.txt:  containing :class:`~django.forms.ModelChoiceIteratorValue` instances as the\r\n/workspace/django__django__4.1/docs/releases/3.1.txt:  :attr:`.ModelChoiceIteratorValue.value` attribute instead.",
                "extras": {
                    "command_id": -1,
                    "command": "grep -r \"ModelChoiceIteratorValue\" /workspace/django__django__4.1",
                    "exit_code": 0
                }
            }
        ],
        [
            {
                "id": 5,
                "timestamp": "2024-07-16T22:16:05.647213",
                "source": "agent",
                "message": "Running Python code interactively: open_file('/workspace/django__django__4.1/django/forms/models.py')",
                "action": "run_ipython",
                "args": {
                    "code": "open_file('/workspace/django__django__4.1/django/forms/models.py')",
                    "thought": "Thank you for the information. It seems the issue is related to the `ModelChoiceIteratorValue` class in Django 3.1. Let's examine the `ModelChoiceIteratorValue` class in the `django/forms/models.py` file.",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 6,
                "timestamp": "2024-07-16T22:16:06.110206",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 5,
                "observation": "run_ipython",
                "content": "[File: /workspace/django__django__4.1/django/forms/models.py (1424 lines total)]\r\n(this is the beginning of the file)\r\n1|\"\"\"\r\n2|Helper functions for creating Form classes from Django models\r\n3|and database field objects.\r\n4|\"\"\"\r\n5|from itertools import chain\r\n6|\r\n7|from django.core.exceptions import (\r\n8|    NON_FIELD_ERRORS, FieldError, ImproperlyConfigured, ValidationError,\r\n9|)\r\n10|from django.forms.fields import ChoiceField, Field\r\n11|from django.forms.forms import BaseForm, DeclarativeFieldsMetaclass\r\n12|from django.forms.formsets import BaseFormSet, formset_factory\r\n13|from django.forms.utils import ErrorList\r\n14|from django.forms.widgets import (\r\n15|    HiddenInput, MultipleHiddenInput, RadioSelect, SelectMultiple,\r\n16|)\r\n17|from django.utils.text import capfirst, get_text_list\r\n18|from django.utils.translation import gettext, gettext_lazy as _\r\n19|\r\n20|__all__ = (\r\n21|    'ModelForm', 'BaseModelForm', 'model_to_dict', 'fields_for_model',\r\n22|    'ModelChoiceField', 'ModelMultipleChoiceField', 'ALL_FIELDS',\r\n23|    'BaseModelFormSet', 'modelformset_factory', 'BaseInlineFormSet',\r\n24|    'inlineformset_factory', 'modelform_factory',\r\n25|)\r\n26|\r\n27|ALL_FIELDS = '__all__'\r\n28|\r\n29|\r\n30|def construct_instance(form, instance, fields=None, exclude=None):\r\n31|    \"\"\"\r\n32|    Construct and return a model instance from the bound ``form``'s\r\n33|    ``cleaned_data``, but do not save the returned instance to the database.\r\n34|    \"\"\"\r\n35|    from django.db import models\r\n36|    opts = instance._meta\r\n37|\r\n38|    cleaned_data = form.cleaned_data\r\n39|    file_field_list = []\r\n40|    for f in opts.fields:\r\n41|        if not f.editable or isinstance(f, models.AutoField) \\\r\n42|                or f.name not in cleaned_data:\r\n43|            continue\r\n44|        if fields is not None and f.name not in fields:\r\n45|            continue\r\n46|        if exclude and f.name in exclude:\r\n47|            continue\r\n48|        # Leave defaults for fields that aren't in POST data, except for\r\n49|        # checkbox inputs because they don't appear in POST data if not checked.\r\n50|        if (\r\n51|            f.has_default() and\r\n52|            form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)) and\r\n53|            cleaned_data.get(f.name) in form[f.name].field.empty_values\r\n54|        ):\r\n55|            continue\r\n56|        # Defer saving file-type fields until after the other fields, so a\r\n57|        # callable upload_to can use the values from other fields.\r\n58|        if isinstance(f, models.FileField):\r\n59|            file_field_list.append(f)\r\n60|        else:\r\n61|            f.save_form_data(instance, cleaned_data[f.name])\r\n62|\r\n63|    for f in file_field_list:\r\n64|        f.save_form_data(instance, cleaned_data[f.name])\r\n65|\r\n66|    return instance\r\n67|\r\n68|\r\n69|# ModelForms #################################################################\r\n70|\r\n71|def model_to_dict(instance, fields=None, exclude=None):\r\n72|    \"\"\"\r\n73|    Return a dict containing the data in ``instance`` suitable for passing as\r\n74|    a Form's ``initial`` keyword argument.\r\n75|\r\n76|    ``fields`` is an optional list of field names. If provided, return only the\r\n77|    named.\r\n78|\r\n79|    ``exclude`` is an optional list of field names. If provided, exclude the\r\n80|    named from the returned dict, even if they are listed in the ``fields``\r\n81|    argument.\r\n82|    \"\"\"\r\n83|    opts = instance._meta\r\n84|    data = {}\r\n85|    for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):\r\n86|        if not getattr(f, 'editable', False):\r\n87|            continue\r\n88|        if fields is not None and f.name not in fields:\r\n89|            continue\r\n90|        if exclude and f.name in exclude:\r\n91|            continue\r\n92|        data[f.name] = f.value_from_object(instance)\r\n93|    return data\r\n94|\r\n95|\r\n96|def apply_limit_choices_to_to_formfield(formfield):\r\n97|    \"\"\"Apply limit_choices_to to the formfield's queryset if needed.\"\"\"\r\n98|    from django.db.models import Exists, OuterRef, Q\r\n99|    if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):\r\n100|        limit_choices_to = formfield.get_limit_choices_to()\r\n(1324 more lines below)\r\n",
                "extras": {
                    "code": "open_file('/workspace/django__django__4.1/django/forms/models.py')"
                }
            }
        ],
        [
            {
                "id": 7,
                "timestamp": "2024-07-16T22:16:08.624682",
                "source": "agent",
                "message": "Running Python code interactively: search_file(\"class ModelChoiceIteratorValue\", \"/workspace/django__django__4.1/django/forms/models.py\")",
                "action": "run_ipython",
                "args": {
                    "code": "search_file(\"class ModelChoiceIteratorValue\", \"/workspace/django__django__4.1/django/forms/models.py\")",
                    "thought": "Thank you for providing the file content. Let's search for the `ModelChoiceIteratorValue` class in this file.",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 8,
                "timestamp": "2024-07-16T22:16:09.081904",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 7,
                "observation": "run_ipython",
                "content": "[Found 1 matches for \"class ModelChoiceIteratorValue\" in /workspace/django__django__4.1/django/forms/models.py]\r\nLine 1161: class ModelChoiceIteratorValue:\r\n[End of matches for \"class ModelChoiceIteratorValue\" in /workspace/django__django__4.1/django/forms/models.py]\r\n",
                "extras": {
                    "code": "search_file(\"class ModelChoiceIteratorValue\", \"/workspace/django__django__4.1/django/forms/models.py\")"
                }
            }
        ],
        [
            {
                "id": 9,
                "timestamp": "2024-07-16T22:16:11.398018",
                "source": "agent",
                "message": "Running Python code interactively: open_file('/workspace/django__django__4.1/django/forms/models.py', 1161, 50)",
                "action": "run_ipython",
                "args": {
                    "code": "open_file('/workspace/django__django__4.1/django/forms/models.py', 1161, 50)",
                    "thought": "Thank you for the information. Let's examine the `ModelChoiceIteratorValue` class and its implementation.",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 10,
                "timestamp": "2024-07-16T22:16:11.858718",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 9,
                "observation": "run_ipython",
                "content": "[File: /workspace/django__django__4.1/django/forms/models.py (1424 lines total)]\r\n(1135 more lines above)\r\n1136|                kwargs[\"initial\"] = getattr(self.parent_instance, self.to_field)\r\n1137|            else:\r\n1138|                kwargs[\"initial\"] = self.parent_instance.pk\r\n1139|        kwargs[\"required\"] = False\r\n1140|        super().__init__(*args, **kwargs)\r\n1141|\r\n1142|    def clean(self, value):\r\n1143|        if value in self.empty_values:\r\n1144|            if self.pk_field:\r\n1145|                return None\r\n1146|            # if there is no value act as we did before.\r\n1147|            return self.parent_instance\r\n1148|        # ensure the we compare the values as equal types.\r\n1149|        if self.to_field:\r\n1150|            orig = getattr(self.parent_instance, self.to_field)\r\n1151|        else:\r\n1152|            orig = self.parent_instance.pk\r\n1153|        if str(value) != str(orig):\r\n1154|            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\r\n1155|        return self.parent_instance\r\n1156|\r\n1157|    def has_changed(self, initial, data):\r\n1158|        return False\r\n1159|\r\n1160|\r\n1161|class ModelChoiceIteratorValue:\r\n1162|    def __init__(self, value, instance):\r\n1163|        self.value = value\r\n1164|        self.instance = instance\r\n1165|\r\n1166|    def __str__(self):\r\n1167|        return str(self.value)\r\n1168|\r\n1169|    def __eq__(self, other):\r\n1170|        if isinstance(other, ModelChoiceIteratorValue):\r\n1171|            other = other.value\r\n1172|        return self.value == other\r\n1173|\r\n1174|\r\n1175|class ModelChoiceIterator:\r\n1176|    def __init__(self, field):\r\n1177|        self.field = field\r\n1178|        self.queryset = field.queryset\r\n1179|\r\n1180|    def __iter__(self):\r\n1181|        if self.field.empty_label is not None:\r\n1182|            yield (\"\", self.field.empty_label)\r\n1183|        queryset = self.queryset\r\n1184|        # Can't use iterator() when queryset uses prefetch_related()\r\n1185|        if not queryset._prefetch_related_lookups:\r\n1186|            queryset = queryset.iterator()\r\n(238 more lines below)\r\n",
                "extras": {
                    "code": "open_file('/workspace/django__django__4.1/django/forms/models.py', 1161, 50)"
                }
            }
        ],
        [
            {
                "id": 11,
                "timestamp": "2024-07-16T22:16:17.084520",
                "source": "agent",
                "message": "Running Python code interactively: edit_file_by_replace(\n    '/workspace/django__django__4.1/django/forms/models.py',\n    to_replace=\"\"\"class ModelChoiceIteratorValue:\n    def __init__(self, value, instance):\n        self.value = value\n        self.instance = instance\n\n    def __str__(self):\n        return str(self.value)\n\n    def __eq__(self, other):\n        if isinstance(other, ModelChoiceIteratorValue):\n            other = other.value\n        return self.value == other\"\"\",\n    new_content=\"\"\"class ModelChoiceIteratorValue:\n    def __init__(self, value, instance):\n        self.value = value\n        self.instance = instance\n\n    def __str__(self):\n        return str(self.value)\n\n    def __eq__(self, other):\n        if isinstance(other, ModelChoiceIteratorValue):\n            other = other.value\n        return self.value == other\n\n    def __hash__(self):\n        return hash(self.value)\"\"\"\n)",
                "action": "run_ipython",
                "args": {
                    "code": "edit_file_by_replace(\n    '/workspace/django__django__4.1/django/forms/models.py',\n    to_replace=\"\"\"class ModelChoiceIteratorValue:\n    def __init__(self, value, instance):\n        self.value = value\n        self.instance = instance\n\n    def __str__(self):\n        return str(self.value)\n\n    def __eq__(self, other):\n        if isinstance(other, ModelChoiceIteratorValue):\n            other = other.value\n        return self.value == other\"\"\",\n    new_content=\"\"\"class ModelChoiceIteratorValue:\n    def __init__(self, value, instance):\n        self.value = value\n        self.instance = instance\n\n    def __str__(self):\n        return str(self.value)\n\n    def __eq__(self, other):\n        if isinstance(other, ModelChoiceIteratorValue):\n            other = other.value\n        return self.value == other\n\n    def __hash__(self):\n        return hash(self.value)\"\"\"\n)",
                    "thought": "Thank you for providing the `ModelChoiceIteratorValue` class implementation. The issue is that this class is not hashable, which is causing problems when it's used in dictionary operations. To fix this, we need to implement the `__hash__` method for the `ModelChoiceIteratorValue` class.\n\nLet's modify the class to make it hashable:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 12,
                "timestamp": "2024-07-16T22:16:17.815017",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 11,
                "observation": "run_ipython",
                "content": "[File: /workspace/django__django__4.1/django/forms/models.py (1427 lines total after edit)]\r\n(1110 more lines above)\r\n1111|        'renderer': renderer,\r\n1112|    }\r\n1113|    FormSet = modelformset_factory(model, **kwargs)\r\n1114|    FormSet.fk = fk\r\n1115|    return FormSet\r\n1116|\r\n1117|\r\n1118|# Fields #####################################################################\r\n1119|\r\n1120|class InlineForeignKeyField(Field):\r\n1121|    \"\"\"\r\n1122|    A basic integer field that deals with validating the given value to a\r\n1123|    given parent instance in an inline.\r\n1124|    \"\"\"\r\n1125|    widget = HiddenInput\r\n1126|    default_error_messages = {\r\n1127|        'invalid_choice': _('The inline value did not match the parent instance.'),\r\n1128|    }\r\n1129|\r\n1130|    def __init__(self, parent_instance, *args, pk_field=False, to_field=None, **kwargs):\r\n1131|        self.parent_instance = parent_instance\r\n1132|        self.pk_field = pk_field\r\n1133|        self.to_field = to_field\r\n1134|        if self.parent_instance is not None:\r\n1135|            if self.to_field:\r\n1136|                kwargs[\"initial\"] = getattr(self.parent_instance, self.to_field)\r\n1137|            else:\r\n1138|                kwargs[\"initial\"] = self.parent_instance.pk\r\n1139|        kwargs[\"required\"] = False\r\n1140|        super().__init__(*args, **kwargs)\r\n1141|\r\n1142|    def clean(self, value):\r\n1143|        if value in self.empty_values:\r\n1144|            if self.pk_field:\r\n1145|                return None\r\n1146|            # if there is no value act as we did before.\r\n1147|            return self.parent_instance\r\n1148|        # ensure the we compare the values as equal types.\r\n1149|        if self.to_field:\r\n1150|            orig = getattr(self.parent_instance, self.to_field)\r\n1151|        else:\r\n1152|            orig = self.parent_instance.pk\r\n1153|        if str(value) != str(orig):\r\n1154|            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\r\n1155|        return self.parent_instance\r\n1156|\r\n1157|    def has_changed(self, initial, data):\r\n1158|        return False\r\n1159|\r\n1160|\r\n1161|class ModelChoiceIteratorValue:\r\n1162|    def __init__(self, value, instance):\r\n1163|        self.value = value\r\n1164|        self.instance = instance\r\n1165|\r\n1166|    def __str__(self):\r\n1167|        return str(self.value)\r\n1168|\r\n1169|    def __eq__(self, other):\r\n1170|        if isinstance(other, ModelChoiceIteratorValue):\r\n1171|            other = other.value\r\n1172|        return self.value == other\r\n1173|\r\n1174|    def __hash__(self):\r\n1175|        return hash(self.value)\r\n1176|\r\n1177|\r\n1178|class ModelChoiceIterator:\r\n1179|    def __init__(self, field):\r\n1180|        self.field = field\r\n1181|        self.queryset = field.queryset\r\n1182|\r\n1183|    def __iter__(self):\r\n1184|        if self.field.empty_label is not None:\r\n1185|            yield (\"\", self.field.empty_label)\r\n1186|        queryset = self.queryset\r\n1187|        # Can't use iterator() when queryset uses prefetch_related()\r\n1188|        if not queryset._prefetch_related_lookups:\r\n1189|            queryset = queryset.iterator()\r\n1190|        for obj in queryset:\r\n1191|            yield self.choice(obj)\r\n1192|\r\n1193|    def __len__(self):\r\n1194|        # count() adds a query but uses less memory since the QuerySet results\r\n1195|        # won't be cached. In most cases, the choices will only be iterated on,\r\n1196|        # and __len__() won't be called.\r\n1197|        return self.queryset.count() + (1 if self.field.empty_label is not None else 0)\r\n1198|\r\n1199|    def __bool__(self):\r\n1200|        return self.field.empty_label is not None or self.queryset.exists()\r\n1201|\r\n1202|    def choice(self, obj):\r\n1203|        return (\r\n1204|            ModelChoiceIteratorValue(self.field.prepare_value(obj), obj),\r\n1205|            self.field.label_from_instance(obj),\r\n1206|        )\r\n1207|\r\n1208|\r\n1209|class ModelChoiceField(ChoiceField):\r\n1210|    \"\"\"A ChoiceField whose choices are a model QuerySet.\"\"\"\r\n1211|    # This class is a subclass of ChoiceField for purity, but it doesn't\r\n(216 more lines below)\r\n[File updated (edited at line 1161). Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.]\r\n",
                "extras": {
                    "code": "edit_file_by_replace(\n    '/workspace/django__django__4.1/django/forms/models.py',\n    to_replace=\"\"\"class ModelChoiceIteratorValue:\n    def __init__(self, value, instance):\n        self.value = value\n        self.instance = instance\n\n    def __str__(self):\n        return str(self.value)\n\n    def __eq__(self, other):\n        if isinstance(other, ModelChoiceIteratorValue):\n            other = other.value\n        return self.value == other\"\"\",\n    new_content=\"\"\"class ModelChoiceIteratorValue:\n    def __init__(self, value, instance):\n        self.value = value\n        self.instance = instance\n\n    def __str__(self):\n        return str(self.value)\n\n    def __eq__(self, other):\n        if isinstance(other, ModelChoiceIteratorValue):\n            other = other.value\n        return self.value == other\n\n    def __hash__(self):\n        return hash(self.value)\"\"\"\n)"
                }
            }
        ],
        [
            {
                "id": 13,
                "timestamp": "2024-07-16T22:16:22.232122",
                "source": "agent",
                "message": "Running command: cd /workspace/django__django__4.1 && python3 tests/runtests.py forms",
                "action": "run",
                "args": {
                    "command": "cd /workspace/django__django__4.1 && python3 tests/runtests.py forms",
                    "thought": "The changes look correct. We've added the `__hash__` method to the `ModelChoiceIteratorValue` class, which should make it hashable and resolve the issue.\n\nNow, let's verify if this change fixes the problem by running the Django test suite. We'll focus on the forms tests, as they are most likely to be affected by this change.",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 14,
                "timestamp": "2024-07-16T22:16:22.990813",
                "source": "agent",
                "message": "Command `cd /workspace/django__django__4.1 && python3 tests/runtests.py forms` executed with exit code 1.",
                "cause": 13,
                "observation": "run",
                "content": "Testing against Django installed in '/workspace/django__django__4.1/django' with up to 8 processes\r\nFound 1 test(s).\r\nSystem check identified no issues (0 silenced).\r\nE\r\n======================================================================\r\nERROR: forms (unittest.loader._FailedTest)\r\n----------------------------------------------------------------------\r\nImportError: Failed to import test module: forms\r\nTraceback (most recent call last):\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/loader.py\", line 154, in loadTestsFromName\r\n    module = __import__(module_name)\r\nModuleNotFoundError: No module named 'forms'\r\n\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.000s\r\n\r\nFAILED (errors=1)",
                "extras": {
                    "command_id": -1,
                    "command": "cd /workspace/django__django__4.1 && python3 tests/runtests.py forms",
                    "exit_code": 1
                }
            }
        ],
        [
            {
                "id": 15,
                "timestamp": "2024-07-16T22:16:25.649710",
                "source": "agent",
                "message": "Running command: cd /workspace/django__django__4.1 && python3 tests/manage.py test forms",
                "action": "run",
                "args": {
                    "command": "cd /workspace/django__django__4.1 && python3 tests/manage.py test forms",
                    "thought": "I apologize for the confusion. It seems the test command didn't work as expected. Let's try running the tests in a different way. We'll use the `manage.py` script to run the tests for the forms app.",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 16,
                "timestamp": "2024-07-16T22:16:25.825467",
                "source": "agent",
                "message": "Command `cd /workspace/django__django__4.1 && python3 tests/manage.py test forms` executed with exit code 2.",
                "cause": 15,
                "observation": "run",
                "content": "python3: can't open file '/workspace/django__django__4.1/tests/manage.py': [Errno 2] No such file or directory",
                "extras": {
                    "command_id": -1,
                    "command": "cd /workspace/django__django__4.1 && python3 tests/manage.py test forms",
                    "exit_code": 2
                }
            }
        ],
        [
            {
                "id": 17,
                "timestamp": "2024-07-16T22:16:28.275451",
                "source": "agent",
                "message": "Running command: find /workspace/django__django__4.1 -name \"runtests.py\"",
                "action": "run",
                "args": {
                    "command": "find /workspace/django__django__4.1 -name \"runtests.py\"",
                    "thought": "I apologize for the confusion. It seems the directory structure is different from what I expected. Let's try to find the correct location of the test files.",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 18,
                "timestamp": "2024-07-16T22:16:28.468902",
                "source": "agent",
                "message": "Command `find /workspace/django__django__4.1 -name \"runtests.py\"` executed with exit code 0.",
                "cause": 17,
                "observation": "run",
                "content": "/workspace/django__django__4.1/tests/runtests.py",
                "extras": {
                    "command_id": -1,
                    "command": "find /workspace/django__django__4.1 -name \"runtests.py\"",
                    "exit_code": 0
                }
            }
        ],
        [
            {
                "id": 19,
                "timestamp": "2024-07-16T22:16:30.813311",
                "source": "agent",
                "message": "Running command: cd /workspace/django__django__4.1 && python3 tests/runtests.py forms",
                "action": "run",
                "args": {
                    "command": "cd /workspace/django__django__4.1 && python3 tests/runtests.py forms",
                    "thought": "Thank you for the reminder. Let's use the correct path to run the tests for the forms app.",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 20,
                "timestamp": "2024-07-16T22:16:31.219431",
                "source": "agent",
                "message": "Command `cd /workspace/django__django__4.1 && python3 tests/runtests.py forms` executed with exit code 1.",
                "cause": 19,
                "observation": "run",
                "content": "Testing against Django installed in '/workspace/django__django__4.1/django' with up to 8 processes\r\nFound 1 test(s).\r\nSystem check identified no issues (0 silenced).\r\nE\r\n======================================================================\r\nERROR: forms (unittest.loader._FailedTest)\r\n----------------------------------------------------------------------\r\nImportError: Failed to import test module: forms\r\nTraceback (most recent call last):\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/loader.py\", line 154, in loadTestsFromName\r\n    module = __import__(module_name)\r\nModuleNotFoundError: No module named 'forms'\r\n\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.000s\r\n\r\nFAILED (errors=1)",
                "extras": {
                    "command_id": -1,
                    "command": "cd /workspace/django__django__4.1 && python3 tests/runtests.py forms",
                    "exit_code": 1
                }
            }
        ],
        [
            {
                "id": 21,
                "timestamp": "2024-07-16T22:16:33.816771",
                "source": "agent",
                "message": "Running command: cd /workspace/django__django__4.1 && python3 tests/runtests.py",
                "action": "run",
                "args": {
                    "command": "cd /workspace/django__django__4.1 && python3 tests/runtests.py",
                    "thought": "I apologize for the confusion. It seems that the test runner is not finding the forms module. Let's try to run the tests for all apps to see if we can get more information about the issue.",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 22,
                "timestamp": "2024-07-16T22:18:16.333581",
                "source": "agent",
                "message": "Command `cd /workspace/django__django__4.1 && python3 tests/runtests.py` executed with exit code 1.",
                "cause": 21,
                "observation": "run",
                "content": "Testing against Django installed in '/workspace/django__django__4.1/django' with up to 8 processes\r\nFound 15227 test(s).\r\nCreating test database for alias 'default'...\r\nCloning test database for alias 'default'...\r\nCloning test database for alias 'default'...\r\nCloning test database for alias 'default'...\r\nCloning test database for alias 'default'...\r\nCloning test database for alias 'default'...\r\nCloning test database for alias 'default'...\r\nCloning test database for alias 'default'...\r\nCloning test database for alias 'default'...\r\nCreating test database for alias 'other'...\r\nCloning test database for alias 'other'...\r\nCloning test database for alias 'other'...\r\nCloning test database for alias 'other'...\r\nCloning test database for alias 'other'...\r\nCloning test database for alias 'other'...\r\nCloning test database for alias 'other'...\r\nCloning test database for alias 'other'...\r\nCloning test database for alias 'other'...\r\nSystem check identified no issues (17 silenced).\r\n.......................................ss...................................................................................................................s.....................................................................s...............................................................................ssss.ss......ssssss.......ssssssssssssss.....sssssssssssssss...........................s...........s.........................................................................................ss.sss.s...................s..........s..................................................................................................................................................................................................................................................................................sss.......................................................................................................................................................................................................................s...........................................s..................................................s.......ss..............................................................................................................................................s.................................................s.............................................................................s......................sssssssssssssssssssssssssssssssssssssssssssssssssss.....sssssssssssssssssss................ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss............ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss............x.................sssssssssssssssssssss...s...s................ssss..............................s.........................ssss.............................................................................................................................................................................................................................................................................................................................................................................................s.sss................s.......................................................s.........x..........x.......................................s...............s.............................................................................................s........................................................................................................................................................................................................................................................F............s.........ssss..................................s.s.s................................................................................................................................................................................................................s..s...................................................................................s...s.........s.s...s..s...........s.s.......s.s.................................................................................................................s..s..s..s.........s...........................................................................s........................................................s......................................................s..................................................s.....................................................................................................................................................................s.............................................................................................................................s............................ss....................s.sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss...................................s.................................................................................................................................................s.........................................................................................................s.................................................................................................................................................s..........................................................................................................................................................................................................................................................s...................s..............................................................................................................................................................................................................................sss..ss.....................................................................................................s................ssssss......................s......................................................................................................................................................s..................s.....s.................................ss..............................s..................................................................................................................................................................................................................................................................ssssssssssssss....ssssssssssss..........................................ssss..........ss...ss...s.s..................ss......................................................sss.sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss...............................................................................................................................................................................................................................................x..............................ss....................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................sssssssssssssssssssss...s..............s......................................................................................................ss.......sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss.......................................................................................sss....................................ss...................................................................................................................................................................................sssssssssssssssss.........s..............................................................................................................................................................................sss....sssssssssssssss...........ssss.......................................................................................................................................................s.............sss...........s..........................sss...............................................................................................................................................ss.........................................................................sssssssssssss......F............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................ssssss.F...................ss............................sssssss......sssss............................................................................................................................................................................................................................s..................................................................................................................................................................................................................................................................................................................................................................................s..............sss...s.ss.....s..ss.sss.s......ss.s.........s............s............s.....................s..s....s...s....................s............s......s...s...s.......................................................................................................................................................................................................................................................................................................................s.............................................................................................................................s...s.................................................................s........................................................sssssssssssssssssss.s.sssss.ssssssss....................................................................................................................................................................sssssss.................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................\r\n======================================================================\r\nFAIL: test_custom_fields (inspectdb.tests.InspectDBTestCase)\r\nIntrospection of columns with a custom field (#21090)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/case.py\", line 59, in testPartExecutor\r\n    yield\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/case.py\", line 592, in run\r\n    self._callTestMethod(testMethod)\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/case.py\", line 550, in _callTestMethod\r\n    method()\r\n  File \"/workspace/django__django__4.1/tests/inspectdb/tests.py\", line 313, in test_custom_fields\r\n    self.assertIn(\"text_field = myfields.TextField()\", output)\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/case.py\", line 1104, in assertIn\r\n    self.fail(self._formatMessage(msg, standardMsg))\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/case.py\", line 676, in fail\r\n    raise self.failureException(msg)\r\nAssertionError: 'text_field = myfields.TextField()' not found in \"# This is an auto-generated Django model module.\\n# You'll have to do the following manually to clean this up:\\n#   * Rearrange models' order\\n#   * Make sure each model has one field with primary_key=True\\n#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior\\n#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table\\n# Feel free to rename the models, but don't rename db_table values or field names.\\nfrom django.db import models\\n\\n\\nclass InspectdbColumntypes(models.Model):\\n    id = models.TextField(primary_key=True)  # This field type is a guess.\\n    big_int_field = models.BigIntegerField()\\n    bool_field = models.TextField()  # This field type is a guess.\\n    null_bool_field = models.TextField(blank=True, null=True)  # This field type is a guess.\\n    char_field = models.TextField()  # This field type is a guess.\\n    null_char_field = models.TextField(blank=True, null=True)  # This field type is a guess.\\n    date_field = models.TextField()  # This field type is a guess.\\n    date_time_field = models.TextField()  # This field type is a guess.\\n    decimal_field = models.TextField()  # This field type is a guess.\\n    email_field = models.TextField()  # This field type is a guess.\\n    file_field = models.TextField()  # This field type is a guess.\\n    file_path_field = models.TextField()  # This field type is a guess.\\n    float_field = models.TextField()  # This field type is a guess.\\n    int_field = models.TextField()  # This field type is a guess.\\n    gen_ip_address_field = models.TextField()  # This field type is a guess.\\n    pos_big_int_field = models.TextField()  # This field type is a guess.\\n    pos_int_field = models.TextField()  # This field type is a guess.\\n    pos_small_int_field = models.TextField()  # This field type is a guess.\\n    slug_field = models.TextField()  # This field type is a guess.\\n    small_int_field = models.TextField()  # This field type is a guess.\\n    text_field = models.TextField()  # This field type is a guess.\\n    time_field = models.TextField()  # This field type is a guess.\\n    url_field = models.TextField()  # This field type is a guess.\\n    uuid_field = models.TextField()  # This field type is a guess.\\n\\n    class Meta:\\n        managed = False\\n        db_table = 'inspectdb_columntypes'\\n\"\r\n\r\n======================================================================\r\nFAIL: test_permissions_error (template_tests.test_loaders.FileSystemLoaderTests)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/case.py\", line 59, in testPartExecutor\r\n    yield\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/case.py\", line 592, in run\r\n    self._callTestMethod(testMethod)\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/case.py\", line 550, in _callTestMethod\r\n    method()\r\n  File \"/workspace/django__django__4.1/tests/template_tests/test_loaders.py\", line 199, in test_permissions_error\r\n    self.engine.get_template(tmpfile.name)\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/contextlib.py\", line 126, in __exit__\r\n    next(self.gen)\r\n  File \"/workspace/django__django__4.1/django/test/testcases.py\", line 684, in _assert_raises_or_warns_cm\r\n    yield cm\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/case.py\", line 226, in __exit__\r\n    self._raiseFailure(\"{} not raised\".format(exc_name))\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/case.py\", line 163, in _raiseFailure\r\n    raise self.test_case.failureException(msg)\r\nAssertionError: PermissionError not raised\r\n\r\n======================================================================\r\nFAIL: test_readonly_root (file_uploads.tests.DirectoryCreationTests)\r\nPermission errors are not swallowed\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/case.py\", line 59, in testPartExecutor\r\n    yield\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/case.py\", line 592, in run\r\n    self._callTestMethod(testMethod)\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/case.py\", line 550, in _callTestMethod\r\n    method()\r\n  File \"/workspace/django__django__4.1/tests/file_uploads/tests.py\", line 687, in test_readonly_root\r\n    self.obj.testfile.save('foo.txt', SimpleUploadedFile('foo.txt', b'x'), save=False)\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/case.py\", line 226, in __exit__\r\n    self._raiseFailure(\"{} not raised\".format(exc_name))\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/case.py\", line 163, in _raiseFailure\r\n    raise self.test_case.failureException(msg)\r\nAssertionError: PermissionError not raised\r\n\r\n----------------------------------------------------------------------\r\nRan 15225 tests in 82.152s\r\n\r\nFAILED (failures=3, skipped=1173, expected failures=4)\r\nDestroying test database for alias 'default'...\r\nDestroying test database for alias 'default'...\r\nDestroying test database for alias 'default'...\r\nDestroying test database for alias 'default'...\r\nDestroying test database for alias 'default'...\r\nDestroying test database for alias 'default'...\r\nDestroying test database for alias 'default'...\r\nDestroying test database for alias 'default'...\r\nDestroying test database for alias 'default'...\r\nDestroying test database for alias 'other'...\r\nDestroying test database for alias 'other'...\r\nDestroying test database for alias 'other'...\r\nDestroying test database for alias 'other'...\r\nDestroying test database for alias 'other'...\r\nDestroying test database for alias 'other'...\r\nDestroying test database for alias 'other'...\r\nDestroying test database for alias 'other'...\r\nDestroying test database for alias 'other'...",
                "extras": {
                    "command_id": -1,
                    "command": "cd /workspace/django__django__4.1 && python3 tests/runtests.py",
                    "exit_code": 1
                }
            }
        ],
        [
            {
                "id": 23,
                "timestamp": "2024-07-16T22:18:21.539037",
                "source": "agent",
                "message": "Running command: cd /workspace/django__django__4.1 && python3 tests/runtests.py forms -v 2",
                "action": "run",
                "args": {
                    "command": "cd /workspace/django__django__4.1 && python3 tests/runtests.py forms -v 2",
                    "thought": "Thank you for running the tests. It appears that our change to the `ModelChoiceIteratorValue` class didn't cause any new failures related to forms. The failures we see are unrelated to our changes and seem to be permission-related issues in the test environment.\n\nSince our change didn't introduce any new errors and the original issue was about `ModelChoiceIteratorValue` not being hashable, it's likely that our fix has resolved the problem.\n\nTo further verify this, let's run a specific test that involves `ModelChoiceIteratorValue`. We'll run the tests for the `forms` app again, but this time with more verbosity to see if there are any specific issues related to our changes.",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 24,
                "timestamp": "2024-07-16T22:18:22.006566",
                "source": "agent",
                "message": "Command `cd /workspace/django__django__4.1 && python3 tests/runtests.py forms -v 2` executed with exit code 1.",
                "cause": 23,
                "observation": "run",
                "content": "Testing against Django installed in '/workspace/django__django__4.1/django' with up to 8 processes\r\nFound 1 test(s).\r\nSkipping setup of unused database(s): default, other.\r\nSystem check identified no issues (0 silenced).\r\nforms (unittest.loader._FailedTest) ... ERROR\r\n\r\n======================================================================\r\nERROR: forms (unittest.loader._FailedTest)\r\n----------------------------------------------------------------------\r\nImportError: Failed to import test module: forms\r\nTraceback (most recent call last):\r\n  File \"/opt/miniconda3/envs/testbed/lib/python3.9/unittest/loader.py\", line 154, in loadTestsFromName\r\n    module = __import__(module_name)\r\nModuleNotFoundError: No module named 'forms'\r\n\r\n\r\n----------------------------------------------------------------------\r\nRan 1 test in 0.000s\r\n\r\nFAILED (errors=1)",
                "extras": {
                    "command_id": -1,
                    "command": "cd /workspace/django__django__4.1 && python3 tests/runtests.py forms -v 2",
                    "exit_code": 1
                }
            }
        ],
        [
            {
                "id": 25,
                "timestamp": "2024-07-16T22:18:25.346728",
                "source": "agent",
                "message": "Running command: find /workspace/django__django__4.1/tests -name \"*form*.py\"",
                "action": "run",
                "args": {
                    "command": "find /workspace/django__django__4.1/tests -name \"*form*.py\"",
                    "thought": "I apologize for the confusion. It seems that the test runner is not finding the forms module correctly. Let's try to locate the forms tests and run them directly.\n\nFirst, let's find the forms test files:",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 26,
                "timestamp": "2024-07-16T22:18:25.525175",
                "source": "agent",
                "message": "Command `find /workspace/django__django__4.1/tests -name \"*form*.py\"` executed with exit code 0.",
                "cause": 25,
                "observation": "run",
                "content": "/workspace/django__django__4.1/tests/i18n/other/locale/de/formats.py\r\n/workspace/django__django__4.1/tests/i18n/other/locale/fr/formats.py\r\n/workspace/django__django__4.1/tests/i18n/forms.py\r\n/workspace/django__django__4.1/tests/i18n/other2/locale/de/formats.py\r\n/workspace/django__django__4.1/tests/staticfiles_tests/test_forms.py\r\n/workspace/django__django__4.1/tests/utils_tests/test_dateformat.py\r\n/workspace/django__django__4.1/tests/utils_tests/test_numberformat.py\r\n/workspace/django__django__4.1/tests/generic_relations/test_forms.py\r\n/workspace/django__django__4.1/tests/forms_tests/tests/test_forms.py\r\n/workspace/django__django__4.1/tests/forms_tests/tests/test_input_formats.py\r\n/workspace/django__django__4.1/tests/forms_tests/tests/test_deprecation_forms.py\r\n/workspace/django__django__4.1/tests/forms_tests/tests/test_formsets.py\r\n/workspace/django__django__4.1/tests/admin_views/test_forms.py\r\n/workspace/django__django__4.1/tests/admin_views/forms.py\r\n/workspace/django__django__4.1/tests/timezones/forms.py\r\n/workspace/django__django__4.1/tests/generic_views/forms.py\r\n/workspace/django__django__4.1/tests/gis_tests/test_geoforms.py\r\n/workspace/django__django__4.1/tests/template_tests/filter_tests/test_stringformat.py\r\n/workspace/django__django__4.1/tests/template_tests/filter_tests/test_filesizeformat.py\r\n/workspace/django__django__4.1/tests/template_tests/filter_tests/test_floatformat.py\r\n/workspace/django__django__4.1/tests/flatpages_tests/test_forms.py\r\n/workspace/django__django__4.1/tests/auth_tests/test_forms.py\r\n/workspace/django__django__4.1/tests/foreign_object/test_forms.py",
                "extras": {
                    "command_id": -1,
                    "command": "find /workspace/django__django__4.1/tests -name \"*form*.py\"",
                    "exit_code": 0
                }
            }
        ],
        [
            {
                "id": 27,
                "timestamp": "2024-07-16T22:18:28.523691",
                "source": "agent",
                "message": "Running command: cd /workspace/django__django__4.1 && python3 tests/runtests.py forms_tests -v 2",
                "action": "run",
                "args": {
                    "command": "cd /workspace/django__django__4.1 && python3 tests/runtests.py forms_tests -v 2",
                    "thought": "Thank you for the information. It looks like the main forms tests are located in the `/workspace/django__django__4.1/tests/forms_tests/tests/` directory. Let's run these tests specifically:",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 28,
                "timestamp": "2024-07-16T22:18:29.522863",
                "source": "agent",
                "message": "Command `cd /workspace/django__django__4.1 && python3 tests/runtests.py forms_tests -v 2` executed with exit code 0.",
                "cause": 27,
                "observation": "run",
                "content": "Testing against Django installed in '/workspace/django__django__4.1/django' with up to 8 processes\r\nImporting application forms_tests\r\nFound 882 test(s).\r\nSkipping setup of unused database(s): other.\r\nCreating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\n\u001b[36;1mOperations to perform:\u001b[0m\r\n\u001b[1m  Synchronize unmigrated apps: \u001b[0mauth, contenttypes, forms_tests, messages, sessions, staticfiles\r\n\u001b[1m  Apply all migrations: \u001b[0madmin, sites\r\n\u001b[36;1mSynchronizing apps without migrations:\u001b[0m\r\n  Creating tables...\r\n    Creating table django_content_type\r\n    Creating table auth_permission\r\n    Creating table auth_group\r\n    Creating table auth_user\r\n    Creating table django_session\r\n    Creating table forms_tests_boundarymodel\r\n    Creating table forms_tests_defaults\r\n    Creating table forms_tests_choicemodel\r\n    Creating table forms_tests_choiceoptionmodel\r\n    Creating table forms_tests_choicefieldmodel\r\n    Creating table forms_tests_optionalmultichoicemodel\r\n    Creating table forms_tests_filemodel\r\n    Creating table forms_tests_article\r\n    Running deferred SQL...\r\n\u001b[36;1mRunning migrations:\u001b[0m\r\n  Applying admin.0001_initial...\u001b[32;1m OK\u001b[0m\r\n  Applying admin.0002_logentry_remove_auto_add...\u001b[32;1m OK\u001b[0m\r\n  Applying admin.0003_logentry_add_action_flag_choices...\u001b[32;1m OK\u001b[0m\r\n  Applying sites.0001_initial...\u001b[32;1m OK\u001b[0m\r\n  Applying sites.0002_alter_domain_unique...\u001b[32;1m OK\u001b[0m\r\nCloning test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\nCloning test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\nCloning test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\nCloning test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\nCloning test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\nCloning test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\nCloning test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\nCloning test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\nSystem check identified no issues (0 silenced).\r\ntest_cooperative_multiple_inheritance (forms_tests.field_tests.test_base.BasicFieldsTests) ... ok\r\ntest_field_deepcopies_widget_instance (forms_tests.field_tests.test_base.BasicFieldsTests) ... ok\r\ntest_field_sets_widget_is_required (forms_tests.field_tests.test_base.BasicFieldsTests) ... ok\r\ntest_disabled_field_has_changed_always_false (forms_tests.field_tests.test_base.DisabledFieldTests) ... ok\r\ntest_modelchoicefield (forms_tests.tests.test_error_messages.ModelChoiceFieldErrorMessagesTestCase) ... ok\r\ntest_modelchoicefield_value_placeholder (forms_tests.tests.test_error_messages.ModelChoiceFieldErrorMessagesTestCase) ... ok\r\ntest_boolean_picklable (forms_tests.field_tests.test_booleanfield.BooleanFieldTest) ... ok\r\ntest_booleanfield_changed (forms_tests.field_tests.test_booleanfield.BooleanFieldTest) ... ok\r\ntest_booleanfield_clean_1 (forms_tests.field_tests.test_booleanfield.BooleanFieldTest) ... ok\r\ntest_booleanfield_clean_2 (forms_tests.field_tests.test_booleanfield.BooleanFieldTest) ... ok\r\ntest_disabled_has_changed (forms_tests.field_tests.test_booleanfield.BooleanFieldTest) ... ok\r\ntest_empty_queryset_return (forms_tests.tests.tests.TestTicket14567)\r\nIf a model's ManyToManyField has blank=True and is saved with no data, a queryset is returned. ... ok\r\ntest_combofield_1 (forms_tests.field_tests.test_combofield.ComboFieldTest) ... ok\r\ntest_combofield_2 (forms_tests.field_tests.test_combofield.ComboFieldTest) ... ok\r\ntest_m2m_field_exclusion (forms_tests.tests.tests.ManyToManyExclusionTestCase) ... ok\r\ntest_charfield_1 (forms_tests.field_tests.test_charfield.CharFieldTest) ... ok\r\ntest_charfield_2 (forms_tests.field_tests.test_charfield.CharFieldTest) ... ok\r\ntest_charfield_3 (forms_tests.field_tests.test_charfield.CharFieldTest) ... ok\r\ntest_charfield_4 (forms_tests.field_tests.test_charfield.CharFieldTest) ... ok\r\ntest_charfield_5 (forms_tests.field_tests.test_charfield.CharFieldTest) ... ok\r\ntest_charfield_disabled (forms_tests.field_tests.test_charfield.CharFieldTest) ... ok\r\ntest_charfield_length_not_int (forms_tests.field_tests.test_charfield.CharFieldTest)\r\nSetting min_length or max_length to something that is not a number ... ok\r\ntest_charfield_strip (forms_tests.field_tests.test_charfield.CharFieldTest)\r\nValues have whitespace stripped but not if strip=False. ... ok\r\ntest_charfield_widget_attrs (forms_tests.field_tests.test_charfield.CharFieldTest)\r\nCharField.widget_attrs() always returns a dictionary and includes ... ok\r\ntest_clean_non_string (forms_tests.field_tests.test_charfield.CharFieldTest)\r\nCharField.clean() calls str(value) before stripping it. ... ok\r\ntest_null_characters_prohibited (forms_tests.field_tests.test_charfield.CharFieldTest) ... ok\r\ntest_strip_before_checking_empty (forms_tests.field_tests.test_charfield.CharFieldTest)\r\nA whitespace-only value, ' ', is stripped to an empty string and then ... ok\r\ntest_choicefield_1 (forms_tests.field_tests.test_choicefield.ChoiceFieldTest) ... ok\r\ntest_choicefield_2 (forms_tests.field_tests.test_choicefield.ChoiceFieldTest) ... ok\r\ntest_choicefield_3 (forms_tests.field_tests.test_choicefield.ChoiceFieldTest) ... ok\r\ntest_choicefield_4 (forms_tests.field_tests.test_choicefield.ChoiceFieldTest) ... ok\r\ntest_choicefield_callable (forms_tests.field_tests.test_choicefield.ChoiceFieldTest) ... ok\r\ntest_choicefield_callable_may_evaluate_to_different_values (forms_tests.field_tests.test_choicefield.ChoiceFieldTest) ... ok\r\ntest_choicefield_choices_default (forms_tests.field_tests.test_choicefield.ChoiceFieldTest) ... ok\r\ntest_choicefield_disabled (forms_tests.field_tests.test_choicefield.ChoiceFieldTest) ... ok\r\ntest_choicefield_enumeration (forms_tests.field_tests.test_choicefield.ChoiceFieldTest) ... ok\r\ntest_durationfield_clean (forms_tests.field_tests.test_durationfield.DurationFieldTest) ... ok\r\ntest_durationfield_clean_not_required (forms_tests.field_tests.test_durationfield.DurationFieldTest) ... ok\r\ntest_durationfield_integer_value (forms_tests.field_tests.test_durationfield.DurationFieldTest) ... ok\r\ntest_durationfield_prepare_value (forms_tests.field_tests.test_durationfield.DurationFieldTest) ... ok\r\ntest_durationfield_render (forms_tests.field_tests.test_durationfield.DurationFieldTest) ... ok\r\ntest_overflow (forms_tests.field_tests.test_durationfield.DurationFieldTest) ... ok\r\ntest_overflow_translation (forms_tests.field_tests.test_durationfield.DurationFieldTest) ... ok\r\ntest_empty_field_char (forms_tests.tests.tests.EmptyLabelTestCase) ... ok\r\ntest_empty_field_char_none (forms_tests.tests.tests.EmptyLabelTestCase) ... ok\r\ntest_empty_field_integer (forms_tests.tests.tests.EmptyLabelTestCase) ... ok\r\ntest_get_display_value_on_none (forms_tests.tests.tests.EmptyLabelTestCase) ... ok\r\ntest_html_rendering_of_prepopulated_models (forms_tests.tests.tests.EmptyLabelTestCase) ... ok\r\ntest_save_empty_label_forms (forms_tests.tests.tests.EmptyLabelTestCase) ... ok\r\ntest_decimalfield_1 (forms_tests.field_tests.test_decimalfield.DecimalFieldTest) ... ok\r\ntest_decimalfield_2 (forms_tests.field_tests.test_decimalfield.DecimalFieldTest) ... ok\r\ntest_decimalfield_3 (forms_tests.field_tests.test_decimalfield.DecimalFieldTest) ... ok\r\ntest_decimalfield_4 (forms_tests.field_tests.test_decimalfield.DecimalFieldTest) ... ok\r\ntest_decimalfield_5 (forms_tests.field_tests.test_decimalfield.DecimalFieldTest) ... ok\r\ntest_decimalfield_6 (forms_tests.field_tests.test_decimalfield.DecimalFieldTest) ... ok\r\ntest_decimalfield_changed (forms_tests.field_tests.test_decimalfield.DecimalFieldTest) ... ok\r\ntest_decimalfield_localized (forms_tests.field_tests.test_decimalfield.DecimalFieldTest)\r\nA localized DecimalField's widget renders to a text input without ... ok\r\ntest_decimalfield_scientific (forms_tests.field_tests.test_decimalfield.DecimalFieldTest) ... ok\r\ntest_decimalfield_support_decimal_separator (forms_tests.field_tests.test_decimalfield.DecimalFieldTest) ... ok\r\ntest_decimalfield_support_thousands_separator (forms_tests.field_tests.test_decimalfield.DecimalFieldTest) ... ok\r\ntest_decimalfield_widget_attrs (forms_tests.field_tests.test_decimalfield.DecimalFieldTest) ... ok\r\ntest_enter_a_number_error (forms_tests.field_tests.test_decimalfield.DecimalFieldTest) ... ok\r\ntest_disabled_has_changed (forms_tests.field_tests.test_filefield.FileFieldTest) ... ok\r\ntest_file_picklable (forms_tests.field_tests.test_filefield.FileFieldTest) ... ok\r\ntest_filefield_1 (forms_tests.field_tests.test_filefield.FileFieldTest) ... ok\r\ntest_filefield_2 (forms_tests.field_tests.test_filefield.FileFieldTest) ... ok\r\ntest_filefield_3 (forms_tests.field_tests.test_filefield.FileFieldTest) ... ok\r\ntest_filefield_changed (forms_tests.field_tests.test_filefield.FileFieldTest)\r\nThe value of data will more than likely come from request.FILES. The ... ok\r\ntest_allow_folders (forms_tests.field_tests.test_filepathfield.FilePathFieldTest) ... ok\r\ntest_clean (forms_tests.field_tests.test_filepathfield.FilePathFieldTest) ... ok\r\ntest_fix_os_paths (forms_tests.field_tests.test_filepathfield.FilePathFieldTest) ... ok\r\ntest_match (forms_tests.field_tests.test_filepathfield.FilePathFieldTest) ... ok\r\ntest_no_options (forms_tests.field_tests.test_filepathfield.FilePathFieldTest) ... ok\r\ntest_nonexistent_path (forms_tests.field_tests.test_filepathfield.FilePathFieldTest) ... ok\r\ntest_recursive (forms_tests.field_tests.test_filepathfield.FilePathFieldTest) ... ok\r\ntest_recursive_folders_without_files (forms_tests.field_tests.test_filepathfield.FilePathFieldTest) ... ok\r\ntest_recursive_no_folders_or_files (forms_tests.field_tests.test_filepathfield.FilePathFieldTest) ... ok\r\ntest_email_regexp_for_performance (forms_tests.field_tests.test_emailfield.EmailFieldTest) ... ok\r\ntest_emailfield_1 (forms_tests.field_tests.test_emailfield.EmailFieldTest) ... ok\r\ntest_emailfield_min_max_length (forms_tests.field_tests.test_emailfield.EmailFieldTest) ... ok\r\ntest_emailfield_not_required (forms_tests.field_tests.test_emailfield.EmailFieldTest) ... ok\r\ntest_emailfield_strip_on_none_value (forms_tests.field_tests.test_emailfield.EmailFieldTest) ... ok\r\ntest_emailfield_unable_to_set_strip_kwarg (forms_tests.field_tests.test_emailfield.EmailFieldTest) ... ok\r\ntest_boundary_conditions (forms_tests.tests.tests.FormsModelTestCase) ... ok\r\ntest_formfield_initial (forms_tests.tests.tests.FormsModelTestCase) ... ok\r\ntest_unicode_filename (forms_tests.tests.tests.FormsModelTestCase) ... ok\r\ntest_generic_ipaddress_as_generic (forms_tests.field_tests.test_genericipaddressfield.GenericIPAddressFieldTest) ... ok\r\ntest_generic_ipaddress_as_generic_not_required (forms_tests.field_tests.test_genericipaddressfield.GenericIPAddressFieldTest) ... ok\r\ntest_generic_ipaddress_as_ipv4_only (forms_tests.field_tests.test_genericipaddressfield.GenericIPAddressFieldTest) ... ok\r\ntest_generic_ipaddress_as_ipv6_only (forms_tests.field_tests.test_genericipaddressfield.GenericIPAddressFieldTest) ... ok\r\ntest_generic_ipaddress_invalid_arguments (forms_tests.field_tests.test_genericipaddressfield.GenericIPAddressFieldTest) ... ok\r\ntest_generic_ipaddress_normalization (forms_tests.field_tests.test_genericipaddressfield.GenericIPAddressFieldTest) ... ok\r\ntest_callable_initial_value (forms_tests.tests.tests.ModelFormCallableModelDefault)\r\nThe initial value for a callable default returning a queryset is the pk (refs #13769) ... ok\r\ntest_initial_instance_value (forms_tests.tests.tests.ModelFormCallableModelDefault)\r\nInitial instances for model fields may also be instances (refs #7287) ... ok\r\ntest_no_empty_option (forms_tests.tests.tests.ModelFormCallableModelDefault)\r\nIf a model's ForeignKey has blank=False and a default, no empty option is created (Refs #10792). ... ok\r\ntest_empty_field_char (forms_tests.tests.tests.Jinja2EmptyLabelTestCase) ... ok\r\ntest_empty_field_char_none (forms_tests.tests.tests.Jinja2EmptyLabelTestCase) ... ok\r\ntest_empty_field_integer (forms_tests.tests.tests.Jinja2EmptyLabelTestCase) ... ok\r\ntest_get_display_value_on_none (forms_tests.tests.tests.Jinja2EmptyLabelTestCase) ... ok\r\ntest_html_rendering_of_prepopulated_models (forms_tests.tests.tests.Jinja2EmptyLabelTestCase) ... ok\r\ntest_save_empty_label_forms (forms_tests.tests.tests.Jinja2EmptyLabelTestCase) ... ok\r\ntest_disabled_has_changed (forms_tests.field_tests.test_multiplechoicefield.MultipleChoiceFieldTest) ... ok\r\ntest_multiplechoicefield_1 (forms_tests.field_tests.test_multiplechoicefield.MultipleChoiceFieldTest) ... ok\r\ntest_multiplechoicefield_2 (forms_tests.field_tests.test_multiplechoicefield.MultipleChoiceFieldTest) ... ok\r\ntest_multiplechoicefield_3 (forms_tests.field_tests.test_multiplechoicefield.MultipleChoiceFieldTest) ... ok\r\ntest_multiplechoicefield_changed (forms_tests.field_tests.test_multiplechoicefield.MultipleChoiceFieldTest) ... ok\r\ntest_integerfield_1 (forms_tests.field_tests.test_integerfield.IntegerFieldTest) ... ok\r\ntest_integerfield_2 (forms_tests.field_tests.test_integerfield.IntegerFieldTest) ... ok\r\ntest_integerfield_3 (forms_tests.field_tests.test_integerfield.IntegerFieldTest) ... ok\r\ntest_integerfield_4 (forms_tests.field_tests.test_integerfield.IntegerFieldTest) ... ok\r\ntest_integerfield_5 (forms_tests.field_tests.test_integerfield.IntegerFieldTest) ... ok\r\ntest_integerfield_big_num (forms_tests.field_tests.test_integerfield.IntegerFieldTest) ... ok\r\ntest_integerfield_float (forms_tests.field_tests.test_integerfield.IntegerFieldTest) ... ok\r\ntest_integerfield_localized (forms_tests.field_tests.test_integerfield.IntegerFieldTest)\r\nA localized IntegerField's widget renders to a text input without any ... ok\r\ntest_integerfield_subclass (forms_tests.field_tests.test_integerfield.IntegerFieldTest)\r\nClass-defined widget is not overwritten by __init__() (#22245). ... ok\r\ntest_integerfield_unicode_number (forms_tests.field_tests.test_integerfield.IntegerFieldTest) ... ok\r\ntest_datetimefield_changed (forms_tests.field_tests.test_datetimefield.DateTimeFieldTest) ... ok\r\ntest_datetimefield_clean (forms_tests.field_tests.test_datetimefield.DateTimeFieldTest) ... ok\r\ntest_datetimefield_clean_input_formats (forms_tests.field_tests.test_datetimefield.DateTimeFieldTest) ... ok\r\ntest_datetimefield_clean_invalid (forms_tests.field_tests.test_datetimefield.DateTimeFieldTest) ... ok\r\ntest_datetimefield_not_required (forms_tests.field_tests.test_datetimefield.DateTimeFieldTest) ... ok\r\ntest_empty_value (forms_tests.field_tests.test_slugfield.SlugFieldTest) ... ok\r\ntest_slugfield_normalization (forms_tests.field_tests.test_slugfield.SlugFieldTest) ... ok\r\ntest_slugfield_unicode_normalization (forms_tests.field_tests.test_slugfield.SlugFieldTest) ... ok\r\ntest_nullbooleanfield_2 (forms_tests.field_tests.test_nullbooleanfield.NullBooleanFieldTest) ... ok\r\ntest_nullbooleanfield_3 (forms_tests.field_tests.test_nullbooleanfield.NullBooleanFieldTest) ... ok\r\ntest_nullbooleanfield_4 (forms_tests.field_tests.test_nullbooleanfield.NullBooleanFieldTest) ... ok\r\ntest_nullbooleanfield_changed (forms_tests.field_tests.test_nullbooleanfield.NullBooleanFieldTest) ... ok\r\ntest_nullbooleanfield_clean (forms_tests.field_tests.test_nullbooleanfield.NullBooleanFieldTest) ... ok\r\ntest_change_regex_after_init (forms_tests.field_tests.test_regexfield.RegexFieldTest) ... ok\r\ntest_empty_value (forms_tests.field_tests.test_regexfield.RegexFieldTest) ... ok\r\ntest_get_regex (forms_tests.field_tests.test_regexfield.RegexFieldTest) ... ok\r\ntest_regexfield_1 (forms_tests.field_tests.test_regexfield.RegexFieldTest) ... ok\r\ntest_regexfield_2 (forms_tests.field_tests.test_regexfield.RegexFieldTest) ... ok\r\ntest_regexfield_3 (forms_tests.field_tests.test_regexfield.RegexFieldTest) ... ok\r\ntest_regexfield_4 (forms_tests.field_tests.test_regexfield.RegexFieldTest) ... ok\r\ntest_regexfield_strip (forms_tests.field_tests.test_regexfield.RegexFieldTest) ... ok\r\ntest_regexfield_unicode_characters (forms_tests.field_tests.test_regexfield.RegexFieldTest) ... ok\r\ntest_decimalfield_support_decimal_separator (forms_tests.field_tests.test_floatfield.FloatFieldTest) ... ok\r\ntest_decimalfield_support_thousands_separator (forms_tests.field_tests.test_floatfield.FloatFieldTest) ... ok\r\ntest_floatfield_1 (forms_tests.field_tests.test_floatfield.FloatFieldTest) ... ok\r\ntest_floatfield_2 (forms_tests.field_tests.test_floatfield.FloatFieldTest) ... ok\r\ntest_floatfield_3 (forms_tests.field_tests.test_floatfield.FloatFieldTest) ... ok\r\ntest_floatfield_changed (forms_tests.field_tests.test_floatfield.FloatFieldTest) ... ok\r\ntest_floatfield_localized (forms_tests.field_tests.test_floatfield.FloatFieldTest)\r\nA localized FloatField's widget renders to a text input without any ... ok\r\ntest_floatfield_widget_attrs (forms_tests.field_tests.test_floatfield.FloatFieldTest) ... ok\r\ntest_typedchoicefield_1 (forms_tests.field_tests.test_typedchoicefield.TypedChoiceFieldTest) ... ok\r\ntest_typedchoicefield_2 (forms_tests.field_tests.test_typedchoicefield.TypedChoiceFieldTest) ... ok\r\ntest_typedchoicefield_3 (forms_tests.field_tests.test_typedchoicefield.TypedChoiceFieldTest) ... ok\r\ntest_typedchoicefield_4 (forms_tests.field_tests.test_typedchoicefield.TypedChoiceFieldTest) ... ok\r\ntest_typedchoicefield_5 (forms_tests.field_tests.test_typedchoicefield.TypedChoiceFieldTest) ... ok\r\ntest_typedchoicefield_6 (forms_tests.field_tests.test_typedchoicefield.TypedChoiceFieldTest) ... ok\r\ntest_typedchoicefield_has_changed (forms_tests.field_tests.test_typedchoicefield.TypedChoiceFieldTest) ... ok\r\ntest_typedchoicefield_special_coerce (forms_tests.field_tests.test_typedchoicefield.TypedChoiceFieldTest)\r\nA coerce function which results in a value not present in choices ... ok\r\ntest_typedmultiplechoicefield_1 (forms_tests.field_tests.test_typedmultiplechoicefield.TypedMultipleChoiceFieldTest) ... ok\r\ntest_typedmultiplechoicefield_2 (forms_tests.field_tests.test_typedmultiplechoicefield.TypedMultipleChoiceFieldTest) ... ok\r\ntest_typedmultiplechoicefield_3 (forms_tests.field_tests.test_typedmultiplechoicefield.TypedMultipleChoiceFieldTest) ... ok\r\ntest_typedmultiplechoicefield_4 (forms_tests.field_tests.test_typedmultiplechoicefield.TypedMultipleChoiceFieldTest) ... ok\r\ntest_typedmultiplechoicefield_5 (forms_tests.field_tests.test_typedmultiplechoicefield.TypedMultipleChoiceFieldTest) ... ok\r\ntest_typedmultiplechoicefield_6 (forms_tests.field_tests.test_typedmultiplechoicefield.TypedMultipleChoiceFieldTest) ... ok\r\ntest_typedmultiplechoicefield_7 (forms_tests.field_tests.test_typedmultiplechoicefield.TypedMultipleChoiceFieldTest) ... ok\r\ntest_typedmultiplechoicefield_has_changed (forms_tests.field_tests.test_typedmultiplechoicefield.TypedMultipleChoiceFieldTest) ... ok\r\ntest_typedmultiplechoicefield_special_coerce (forms_tests.field_tests.test_typedmultiplechoicefield.TypedMultipleChoiceFieldTest)\r\nA coerce function which results in a value not present in choices ... ok\r\ntest_clean_value_with_dashes (forms_tests.field_tests.test_uuidfield.UUIDFieldTest) ... ok\r\ntest_uuidfield_1 (forms_tests.field_tests.test_uuidfield.UUIDFieldTest) ... ok\r\ntest_uuidfield_2 (forms_tests.field_tests.test_uuidfield.UUIDFieldTest) ... ok\r\ntest_uuidfield_3 (forms_tests.field_tests.test_uuidfield.UUIDFieldTest) ... ok\r\ntest_uuidfield_4 (forms_tests.field_tests.test_uuidfield.UUIDFieldTest) ... ok\r\ntest_timefield_1 (forms_tests.field_tests.test_timefield.TimeFieldTest) ... ok\r\ntest_timefield_2 (forms_tests.field_tests.test_timefield.TimeFieldTest) ... ok\r\ntest_timefield_3 (forms_tests.field_tests.test_timefield.TimeFieldTest) ... ok\r\ntest_timefield_changed (forms_tests.field_tests.test_timefield.TimeFieldTest) ... ok\r\ntest_converted_value (forms_tests.field_tests.test_jsonfield.JSONFieldTest) ... ok\r\ntest_custom_encoder_decoder (forms_tests.field_tests.test_jsonfield.JSONFieldTest) ... ok\r\ntest_custom_widget_attribute (forms_tests.field_tests.test_jsonfield.JSONFieldTest)\r\nThe widget can be overridden with an attribute. ... ok\r\ntest_custom_widget_kwarg (forms_tests.field_tests.test_jsonfield.JSONFieldTest) ... ok\r\ntest_formfield_disabled (forms_tests.field_tests.test_jsonfield.JSONFieldTest) ... ok\r\ntest_has_changed (forms_tests.field_tests.test_jsonfield.JSONFieldTest) ... ok\r\ntest_invalid (forms_tests.field_tests.test_jsonfield.JSONFieldTest) ... ok\r\ntest_prepare_value (forms_tests.field_tests.test_jsonfield.JSONFieldTest) ... ok\r\ntest_redisplay_none_input (forms_tests.field_tests.test_jsonfield.JSONFieldTest) ... ok\r\ntest_redisplay_wrong_input (forms_tests.field_tests.test_jsonfield.JSONFieldTest)\r\nDisplaying a bound form (typically due to invalid input). The form ... ok\r\ntest_valid (forms_tests.field_tests.test_jsonfield.JSONFieldTest) ... ok\r\ntest_valid_empty (forms_tests.field_tests.test_jsonfield.JSONFieldTest) ... ok\r\ntest_widget (forms_tests.field_tests.test_jsonfield.JSONFieldTest) ... ok\r\ntest_splitdatetimefield_1 (forms_tests.field_tests.test_splitdatetimefield.SplitDateTimeFieldTest) ... ok\r\ntest_splitdatetimefield_2 (forms_tests.field_tests.test_splitdatetimefield.SplitDateTimeFieldTest) ... ok\r\ntest_splitdatetimefield_changed (forms_tests.field_tests.test_splitdatetimefield.SplitDateTimeFieldTest) ... ok\r\ntest_deprecation_warning_error_list (forms_tests.tests.test_deprecation_forms.DeprecationTests) ... ok\r\ntest_deprecation_warning_html_output (forms_tests.tests.test_deprecation_forms.DeprecationTests) ... ok\r\ntest_datefield_1 (forms_tests.field_tests.test_datefield.DateFieldTest) ... ok\r\ntest_datefield_2 (forms_tests.field_tests.test_datefield.DateFieldTest) ... ok\r\ntest_datefield_3 (forms_tests.field_tests.test_datefield.DateFieldTest) ... ok\r\ntest_datefield_4 (forms_tests.field_tests.test_datefield.DateFieldTest) ... ok\r\ntest_datefield_5 (forms_tests.field_tests.test_datefield.DateFieldTest) ... ok\r\ntest_datefield_changed (forms_tests.field_tests.test_datefield.DateFieldTest) ... ok\r\ntest_datefield_strptime (forms_tests.field_tests.test_datefield.DateFieldTest)\r\nfield.strptime() doesn't raise a UnicodeEncodeError (#16123) ... ok\r\ntest_form_field (forms_tests.field_tests.test_datefield.DateFieldTest) ... ok\r\ntest_form_label_association (forms_tests.field_tests.test_datefield.DateFieldTest) ... ok\r\ntest_l10n_date_changed (forms_tests.field_tests.test_datefield.DateFieldTest)\r\nDateField.has_changed() with SelectDateWidget works with a localized ... ok\r\ntest_l10n_invalid_date_in (forms_tests.field_tests.test_datefield.DateFieldTest) ... ok\r\ntest_errorlist_override_str (forms_tests.tests.test_deprecation_forms.DeprecatedTests) ... ok\r\ntest_field_name (forms_tests.tests.test_deprecation_forms.DeprecatedTests)\r\n#5749 - `field_name` may be used as a key in _html_output(). ... ok\r\ntest_field_name_with_hidden_input (forms_tests.tests.test_deprecation_forms.DeprecatedTests)\r\nBaseForm._html_output() should merge all the hidden input fields and ... ok\r\ntest_field_name_with_hidden_input_and_non_matching_row_ender (forms_tests.tests.test_deprecation_forms.DeprecatedTests)\r\nBaseForm._html_output() should merge all the hidden input fields and ... ok\r\ntest_field_with_css_class (forms_tests.tests.test_deprecation_forms.DeprecatedTests)\r\n`css_classes` may be used as a key in _html_output() (class comes ... ok\r\ntest_field_without_css_classes (forms_tests.tests.test_deprecation_forms.DeprecatedTests)\r\n`css_classes` may be used as a key in _html_output() (empty classes). ... ok\r\ntest_attribute_class (forms_tests.tests.test_forms.RendererTests) ... ok\r\ntest_attribute_instance (forms_tests.tests.test_forms.RendererTests) ... ok\r\ntest_attribute_override (forms_tests.tests.test_forms.RendererTests) ... ok\r\ntest_default (forms_tests.tests.test_forms.RendererTests) ... ok\r\ntest_kwarg_class (forms_tests.tests.test_forms.RendererTests) ... ok\r\ntest_kwarg_instance (forms_tests.tests.test_forms.RendererTests) ... ok\r\ntest_cyclic_context_boundfield_render (forms_tests.tests.test_forms.OverrideTests) ... ok\r\ntest_errorlist_override (forms_tests.tests.test_forms.OverrideTests) ... ok\r\ntest_use_custom_template (forms_tests.tests.test_forms.OverrideTests) ... ok\r\ntest_bad_choice (forms_tests.field_tests.test_multivaluefield.MultiValueFieldTest) ... ok\r\ntest_clean (forms_tests.field_tests.test_multivaluefield.MultiValueFieldTest) ... ok\r\ntest_clean_disabled_multivalue (forms_tests.field_tests.test_multivaluefield.MultiValueFieldTest) ... ok\r\ntest_disabled_has_changed (forms_tests.field_tests.test_multivaluefield.MultiValueFieldTest) ... ok\r\ntest_form_as_table (forms_tests.field_tests.test_multivaluefield.MultiValueFieldTest) ... ok\r\ntest_form_as_table_data (forms_tests.field_tests.test_multivaluefield.MultiValueFieldTest) ... ok\r\ntest_form_cleaned_data (forms_tests.field_tests.test_multivaluefield.MultiValueFieldTest) ... ok\r\ntest_has_changed_first_widget (forms_tests.field_tests.test_multivaluefield.MultiValueFieldTest)\r\nTest when the first widget's data has changed. ... ok\r\ntest_has_changed_last_widget (forms_tests.field_tests.test_multivaluefield.MultiValueFieldTest)\r\nTest when the last widget's data has changed. This ensures that it is ... ok\r\ntest_has_changed_no_initial (forms_tests.field_tests.test_multivaluefield.MultiValueFieldTest) ... ok\r\ntest_has_changed_same (forms_tests.field_tests.test_multivaluefield.MultiValueFieldTest) ... ok\r\ntest_no_value (forms_tests.field_tests.test_multivaluefield.MultiValueFieldTest)\r\nIf insufficient data is provided, None is substituted. ... ok\r\ntest_render_required_attributes (forms_tests.field_tests.test_multivaluefield.MultiValueFieldTest) ... ok\r\ntest_invalid (forms_tests.tests.test_formsets.AllValidTests)\r\nall_valid() validates all forms, even when some are invalid. ... ok\r\ntest_valid (forms_tests.tests.test_formsets.AllValidTests) ... ok\r\ntest_corrupted_image (forms_tests.field_tests.test_imagefield.ImageFieldTest) ... ok\r\ntest_file_extension_validation (forms_tests.field_tests.test_imagefield.ImageFieldTest) ... ok\r\ntest_imagefield_annotate_with_bitmap_image_after_clean (forms_tests.field_tests.test_imagefield.ImageFieldTest)\r\nThis also tests the situation when Pillow doesn't detect the MIME type ... ok\r\ntest_imagefield_annotate_with_image_after_clean (forms_tests.field_tests.test_imagefield.ImageFieldTest) ... ok\r\ntest_widget_attrs_accept_false (forms_tests.field_tests.test_imagefield.ImageFieldTest) ... ok\r\ntest_widget_attrs_accept_specified (forms_tests.field_tests.test_imagefield.ImageFieldTest) ... ok\r\ntest_widget_attrs_default_accept (forms_tests.field_tests.test_imagefield.ImageFieldTest) ... ok\r\ntest_as_p (forms_tests.tests.test_formsets.FormsetAsTagTests) ... ok\r\ntest_as_table (forms_tests.tests.test_formsets.FormsetAsTagTests) ... ok\r\ntest_as_ul (forms_tests.tests.test_formsets.FormsetAsTagTests) ... ok\r\ntest_basic_processing_in_view (forms_tests.tests.test_forms.TemplateTests) ... ok\r\ntest_iterate_checkboxes (forms_tests.tests.test_forms.TemplateTests) ... ok\r\ntest_iterate_radios (forms_tests.tests.test_forms.TemplateTests) ... ok\r\ntest_templates_with_forms (forms_tests.tests.test_forms.TemplateTests) ... ok\r\ntest_empty_formset_is_multipart (forms_tests.tests.test_formsets.TestEmptyFormSet)\r\nis_multipart() works with an empty formset. ... ok\r\ntest_empty_formset_is_valid (forms_tests.tests.test_formsets.TestEmptyFormSet)\r\nAn empty formset still calls clean() ... ok\r\ntest_empty_formset_media (forms_tests.tests.test_formsets.TestEmptyFormSet)\r\nMedia is available on empty formset. ... ok\r\ntest_as_p (forms_tests.tests.test_formsets.Jinja2FormsetAsTagTests) ... ok\r\ntest_as_table (forms_tests.tests.test_formsets.Jinja2FormsetAsTagTests) ... ok\r\ntest_as_ul (forms_tests.tests.test_formsets.Jinja2FormsetAsTagTests) ... ok\r\ntest_url_regex_ticket11198 (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok\r\ntest_urlfield_1 (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok\r\ntest_urlfield_10 (forms_tests.field_tests.test_urlfield.URLFieldTest)\r\nURLField correctly validates IPv6 (#18779). ... ok\r\ntest_urlfield_2 (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok\r\ntest_urlfield_5 (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok\r\ntest_urlfield_6 (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok\r\ntest_urlfield_7 (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok\r\ntest_urlfield_9 (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok\r\ntest_urlfield_normalization (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok\r\ntest_urlfield_not_string (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok\r\ntest_urlfield_strip_on_none_value (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok\r\ntest_urlfield_unable_to_set_strip_kwarg (forms_tests.field_tests.test_urlfield.URLFieldTest) ... ok\r\ntest_customize_management_form_error (forms_tests.tests.test_formsets.TestIsBoundBehavior) ... ok\r\ntest_empty_forms_are_unbound (forms_tests.tests.test_formsets.TestIsBoundBehavior) ... ok\r\ntest_form_errors_are_caught_by_formset (forms_tests.tests.test_formsets.TestIsBoundBehavior) ... ok\r\ntest_management_form_invalid_data (forms_tests.tests.test_formsets.TestIsBoundBehavior) ... ok\r\ntest_no_data_error (forms_tests.tests.test_formsets.TestIsBoundBehavior) ... ok\r\ntest_with_management_data_attrs_work_fine (forms_tests.tests.test_formsets.TestIsBoundBehavior) ... ok\r\ntest_lazy_labels (forms_tests.tests.test_i18n.FormsI18nTests) ... ok\r\ntest_non_ascii_choices (forms_tests.tests.test_i18n.FormsI18nTests) ... ok\r\ntest_non_ascii_label (forms_tests.tests.test_i18n.FormsI18nTests) ... ok\r\ntest_select_translated_text (forms_tests.tests.test_i18n.FormsI18nTests) ... ok\r\ntest_booleanfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_charfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_choicefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_datefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_datetimefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_decimalfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_emailfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_error_messages_escaping (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_filefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_floatfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_generic_ipaddressfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_integerfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_multiplechoicefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_regexfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_splitdatetimefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_subclassing_errorlist (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_timefield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_urlfield (forms_tests.tests.test_error_messages.FormsErrorMessagesTestCase) ... ok\r\ntest_dateField (forms_tests.tests.test_input_formats.LocalizedDateTests)\r\nDateFields can parse dates in the default format ... ok\r\ntest_dateField_with_inputformat (forms_tests.tests.test_input_formats.LocalizedDateTests)\r\nDateFields with manually specified input formats can accept those formats ... ok\r\ntest_localized_dateField (forms_tests.tests.test_input_formats.LocalizedDateTests)\r\nLocalized DateFields act as unlocalized widgets ... ok\r\ntest_localized_dateField_with_inputformat (forms_tests.tests.test_input_formats.LocalizedDateTests)\r\nLocalized DateFields with manually specified input formats can accept those formats ... ok\r\ntest_dateTimeField (forms_tests.tests.test_input_formats.LocalizedDateTimeTests)\r\nDateTimeFields can parse dates in the default format ... ok\r\ntest_dateTimeField_with_inputformat (forms_tests.tests.test_input_formats.LocalizedDateTimeTests)\r\nDateTimeFields with manually specified input formats can accept those formats ... ok\r\ntest_localized_dateTimeField (forms_tests.tests.test_input_formats.LocalizedDateTimeTests)\r\nLocalized DateTimeFields act as unlocalized widgets ... ok\r\ntest_localized_dateTimeField_with_inputformat (forms_tests.tests.test_input_formats.LocalizedDateTimeTests)\r\nLocalized DateTimeFields with manually specified input formats can accept those formats ... ok\r\ntest_dateField (forms_tests.tests.test_input_formats.SimpleDateFormatTests)\r\nDateFields can parse dates in the default format ... ok\r\ntest_dateField_with_inputformat (forms_tests.tests.test_input_formats.SimpleDateFormatTests)\r\nDateFields with manually specified input formats can accept those formats ... ok\r\ntest_localized_dateField (forms_tests.tests.test_input_formats.SimpleDateFormatTests)\r\nLocalized DateFields in a non-localized environment act as unlocalized widgets ... ok\r\ntest_localized_dateField_with_inputformat (forms_tests.tests.test_input_formats.SimpleDateFormatTests)\r\nLocalized DateFields with manually specified input formats can accept those formats ... ok\r\ntest_localized_timeField (forms_tests.tests.test_input_formats.LocalizedTimeTests)\r\nLocalized TimeFields act as unlocalized widgets ... ok\r\ntest_localized_timeField_with_inputformat (forms_tests.tests.test_input_formats.LocalizedTimeTests)\r\nLocalized TimeFields with manually specified input formats can accept those formats ... ok\r\ntest_timeField (forms_tests.tests.test_input_formats.LocalizedTimeTests)\r\nTimeFields can parse dates in the default format ... ok\r\ntest_timeField_with_inputformat (forms_tests.tests.test_input_formats.LocalizedTimeTests)\r\nTimeFields with manually specified input formats can accept those formats ... ok\r\ntest_dateTimeField (forms_tests.tests.test_input_formats.SimpleDateTimeFormatTests)\r\nDateTimeFields can parse dates in the default format ... ok\r\ntest_dateTimeField_with_inputformat (forms_tests.tests.test_input_formats.SimpleDateTimeFormatTests)\r\nDateTimeFields with manually specified input formats can accept those formats ... ok\r\ntest_localized_dateTimeField (forms_tests.tests.test_input_formats.SimpleDateTimeFormatTests)\r\nLocalized DateTimeFields in a non-localized environment act as unlocalized widgets ... ok\r\ntest_localized_dateTimeField_with_inputformat (forms_tests.tests.test_input_formats.SimpleDateTimeFormatTests)\r\nLocalized DateTimeFields with manually specified input formats can accept those formats ... ok\r\ntest_get_renderer (forms_tests.tests.test_renderers.BaseTemplateRendererTests) ... ok\r\ntest_installed_apps_template_found (forms_tests.tests.test_renderers.DjangoTemplatesTests)\r\nCan find a custom template in INSTALLED_APPS. ... ok\r\ntest_installed_apps_template_found (forms_tests.tests.test_renderers.Jinja2Tests)\r\nCan find a custom template in INSTALLED_APPS. ... ok\r\ntest_installed_apps_template_found (forms_tests.tests.test_renderers.TemplatesSettingTests)\r\nCan find a custom template in INSTALLED_APPS. ... ok\r\ntest_lazy_labels (forms_tests.tests.test_i18n.Jinja2FormsI18nTests) ... ok\r\ntest_non_ascii_choices (forms_tests.tests.test_i18n.Jinja2FormsI18nTests) ... ok\r\ntest_non_ascii_label (forms_tests.tests.test_i18n.Jinja2FormsI18nTests) ... ok\r\ntest_select_translated_text (forms_tests.tests.test_i18n.Jinja2FormsI18nTests) ... ok\r\ntest_textarea_trailing_newlines (forms_tests.tests.test_widgets.LiveWidgetTests)\r\nA roundtrip on a ModelForm doesn't alter the TextField value ... skipped 'No browsers specified.'\r\ntest_localized_timeField (forms_tests.tests.test_input_formats.SimpleTimeFormatTests)\r\nLocalized TimeFields in a non-localized environment act as unlocalized widgets ... ok\r\ntest_localized_timeField_with_inputformat (forms_tests.tests.test_input_formats.SimpleTimeFormatTests)\r\nLocalized TimeFields with manually specified input formats can accept those formats ... ok\r\ntest_timeField (forms_tests.tests.test_input_formats.SimpleTimeFormatTests)\r\nTimeFields can parse dates in the default format ... ok\r\ntest_timeField_with_inputformat (forms_tests.tests.test_input_formats.SimpleTimeFormatTests)\r\nTimeFields with manually specified input formats can accept those formats ... ok\r\ntest_invalid_loading_order (forms_tests.tests.tests.RelatedModelFormTests)\r\nTest for issue 10405 ... ok\r\ntest_valid_loading_order (forms_tests.tests.tests.RelatedModelFormTests)\r\nTest for issue 10405 ... ok\r\ntest_add_css_deduplication (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_add_empty (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_add_js_deduplication (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_combine_media (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_construction (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_form_media (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_html_safe (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_media_deduplication (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_media_dsl (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_media_inheritance (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_media_inheritance_extends (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_media_inheritance_from_property (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_media_inheritance_single_type (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_media_property (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_media_property_parent_references (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_merge (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_merge_css_three_way (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_merge_js_three_way (forms_tests.tests.test_media.FormsMediaTestCase)\r\nThe relative order of scripts is preserved in a three-way merge. ... ok\r\ntest_merge_js_three_way2 (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_merge_warning (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_multi_media (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_multi_widget (forms_tests.tests.test_media.FormsMediaTestCase) ... ok\r\ntest_error_dict_copy (forms_tests.tests.test_utils.FormsUtilsTestCase) ... ok\r\ntest_error_dict_html_safe (forms_tests.tests.test_utils.FormsUtilsTestCase) ... ok\r\ntest_error_dict_is_dict (forms_tests.tests.test_utils.FormsUtilsTestCase) ... ok\r\ntest_error_dict_is_json_serializable (forms_tests.tests.test_utils.FormsUtilsTestCase) ... ok\r\ntest_error_list_html_safe (forms_tests.tests.test_utils.FormsUtilsTestCase) ... ok\r\ntest_flatatt (forms_tests.tests.test_utils.FormsUtilsTestCase) ... ok\r\ntest_flatatt_no_side_effects (forms_tests.tests.test_utils.FormsUtilsTestCase)\r\nflatatt() does not modify the dict passed in. ... ok\r\ntest_validation_error (forms_tests.tests.test_utils.FormsUtilsTestCase) ... ok\r\ntest_get_context_does_not_mutate_attrs (forms_tests.widget_tests.test_checkboxinput.CheckboxInputTest) ... ok\r\ntest_render_check_exception (forms_tests.widget_tests.test_checkboxinput.CheckboxInputTest)\r\nCalling check_test() shouldn't swallow exceptions (#17888). ... ok\r\ntest_render_check_test (forms_tests.widget_tests.test_checkboxinput.CheckboxInputTest)\r\nYou can pass 'check_test' to the constructor. This is a callable that ... ok\r\ntest_render_empty (forms_tests.widget_tests.test_checkboxinput.CheckboxInputTest) ... ok\r\ntest_render_false (forms_tests.widget_tests.test_checkboxinput.CheckboxInputTest) ... ok\r\ntest_render_int (forms_tests.widget_tests.test_checkboxinput.CheckboxInputTest)\r\nIntegers are handled by value, not as booleans (#17114). ... ok\r\ntest_render_none (forms_tests.widget_tests.test_checkboxinput.CheckboxInputTest) ... ok\r\ntest_render_true (forms_tests.widget_tests.test_checkboxinput.CheckboxInputTest) ... ok\r\ntest_render_value (forms_tests.widget_tests.test_checkboxinput.CheckboxInputTest)\r\nUsing any value that's not in ('', None, False, True) will check the ... ok\r\ntest_value_from_datadict (forms_tests.widget_tests.test_checkboxinput.CheckboxInputTest)\r\nThe CheckboxInput widget will return False if the key is not found in ... ok\r\ntest_value_from_datadict_string_int (forms_tests.widget_tests.test_checkboxinput.CheckboxInputTest) ... ok\r\ntest_value_omitted_from_data (forms_tests.widget_tests.test_checkboxinput.CheckboxInputTest) ... ok\r\ntest_format (forms_tests.widget_tests.test_dateinput.DateInputTest)\r\nUse 'format' to change the way a value is displayed. ... ok\r\ntest_l10n (forms_tests.widget_tests.test_dateinput.DateInputTest) ... ok\r\ntest_render_none (forms_tests.widget_tests.test_dateinput.DateInputTest) ... ok\r\ntest_render_value (forms_tests.widget_tests.test_dateinput.DateInputTest) ... ok\r\ntest_string (forms_tests.widget_tests.test_dateinput.DateInputTest)\r\nShould be able to initialize from a string value. ... ok\r\ntest_l10n (forms_tests.widget_tests.test_datetimeinput.DateTimeInputTest) ... ok\r\ntest_locale_aware (forms_tests.widget_tests.test_datetimeinput.DateTimeInputTest) ... ok\r\ntest_render_formatted (forms_tests.widget_tests.test_datetimeinput.DateTimeInputTest)\r\nUse 'format' to change the way a value is displayed. ... ok\r\ntest_render_none (forms_tests.widget_tests.test_datetimeinput.DateTimeInputTest) ... ok\r\ntest_render_value (forms_tests.widget_tests.test_datetimeinput.DateTimeInputTest)\r\nThe microseconds are trimmed on display, by default. ... ok\r\ntest_clear_input_checked_returns_false (forms_tests.widget_tests.test_clearablefileinput.ClearableFileInputTest)\r\nClearableFileInput.value_from_datadict returns False if the clear ... ok\r\ntest_clear_input_checked_returns_false_only_if_not_required (forms_tests.widget_tests.test_clearablefileinput.ClearableFileInputTest)\r\nClearableFileInput.value_from_datadict never returns False if the field ... ok\r\ntest_clear_input_renders (forms_tests.widget_tests.test_clearablefileinput.ClearableFileInputTest)\r\nA ClearableFileInput with is_required False and rendered with an ... ok\r\ntest_clear_input_renders_only_if_initial (forms_tests.widget_tests.test_clearablefileinput.ClearableFileInputTest)\r\nA ClearableFileInput instantiated with no initial value does not render ... ok\r\ntest_clear_input_renders_only_if_not_required (forms_tests.widget_tests.test_clearablefileinput.ClearableFileInputTest)\r\nA ClearableFileInput with is_required=True does not render a clear ... ok\r\ntest_html_does_not_mask_exceptions (forms_tests.widget_tests.test_clearablefileinput.ClearableFileInputTest)\r\nA ClearableFileInput should not mask exceptions produced while ... ok\r\ntest_html_escaped (forms_tests.widget_tests.test_clearablefileinput.ClearableFileInputTest)\r\nA ClearableFileInput should escape name, filename, and URL ... ok\r\ntest_render_as_subwidget (forms_tests.widget_tests.test_clearablefileinput.ClearableFileInputTest)\r\nA ClearableFileInput as a subwidget of MultiWidget. ... ok\r\ntest_render_disabled (forms_tests.widget_tests.test_clearablefileinput.ClearableFileInputTest) ... ok\r\ntest_return_false_if_url_does_not_exists (forms_tests.widget_tests.test_clearablefileinput.ClearableFileInputTest) ... ok\r\ntest_url_as_property (forms_tests.widget_tests.test_clearablefileinput.ClearableFileInputTest) ... ok\r\ntest_use_required_attribute (forms_tests.widget_tests.test_clearablefileinput.ClearableFileInputTest) ... ok\r\ntest_value_omitted_from_data (forms_tests.widget_tests.test_clearablefileinput.ClearableFileInputTest) ... ok\r\ntest_render (forms_tests.widget_tests.test_fileinput.FileInputTest)\r\nFileInput widgets never render the value attribute. The old value ... ok\r\ntest_use_required_attribute (forms_tests.widget_tests.test_fileinput.FileInputTest) ... ok\r\ntest_value_omitted_from_data (forms_tests.widget_tests.test_fileinput.FileInputTest) ... ok\r\ntest_render (forms_tests.widget_tests.test_hiddeninput.HiddenInputTest) ... ok\r\ntest_use_required_attribute (forms_tests.widget_tests.test_hiddeninput.HiddenInputTest) ... ok\r\ntest_doesnt_localize_input_value (forms_tests.widget_tests.test_checkboxselectmultiple.CheckboxSelectMultipleTest) ... ok\r\ntest_label (forms_tests.widget_tests.test_checkboxselectmultiple.CheckboxSelectMultipleTest)\r\nCheckboxSelectMultiple doesn't contain 'for=\"field_0\"' in the <label> ... ok\r\ntest_nested_choices (forms_tests.widget_tests.test_checkboxselectmultiple.CheckboxSelectMultipleTest) ... ok\r\ntest_nested_choices_without_id (forms_tests.widget_tests.test_checkboxselectmultiple.CheckboxSelectMultipleTest) ... ok\r\ntest_render_none (forms_tests.widget_tests.test_checkboxselectmultiple.CheckboxSelectMultipleTest)\r\nIf the value is None, none of the options are selected, even if the ... ok\r\ntest_render_value (forms_tests.widget_tests.test_checkboxselectmultiple.CheckboxSelectMultipleTest) ... ok\r\ntest_render_value_multiple (forms_tests.widget_tests.test_checkboxselectmultiple.CheckboxSelectMultipleTest) ... ok\r\ntest_separate_ids (forms_tests.widget_tests.test_checkboxselectmultiple.CheckboxSelectMultipleTest)\r\nEach input gets a separate ID. ... ok\r\ntest_separate_ids_constructor (forms_tests.widget_tests.test_checkboxselectmultiple.CheckboxSelectMultipleTest)\r\nEach input gets a separate ID when the ID is passed to the constructor. ... ok\r\ntest_use_required_attribute (forms_tests.widget_tests.test_checkboxselectmultiple.CheckboxSelectMultipleTest) ... ok\r\ntest_value_omitted_from_data (forms_tests.widget_tests.test_checkboxselectmultiple.CheckboxSelectMultipleTest) ... ok\r\ntest_attrs_with_type (forms_tests.widget_tests.test_input.InputTests) ... ok\r\ntest_attrs_not_localized (forms_tests.widget_tests.test_numberinput.NumberInputTests) ... ok\r\ntest_render_attrs (forms_tests.widget_tests.test_multiplehiddeninput.MultipleHiddenInputTest) ... ok\r\ntest_render_attrs_constructor (forms_tests.widget_tests.test_multiplehiddeninput.MultipleHiddenInputTest) ... ok\r\ntest_render_attrs_multiple (forms_tests.widget_tests.test_multiplehiddeninput.MultipleHiddenInputTest) ... ok\r\ntest_render_empty (forms_tests.widget_tests.test_multiplehiddeninput.MultipleHiddenInputTest) ... ok\r\ntest_render_increment_id (forms_tests.widget_tests.test_multiplehiddeninput.MultipleHiddenInputTest)\r\nEach input should get a separate ID. ... ok\r\ntest_render_multiple (forms_tests.widget_tests.test_multiplehiddeninput.MultipleHiddenInputTest) ... ok\r\ntest_render_none (forms_tests.widget_tests.test_multiplehiddeninput.MultipleHiddenInputTest) ... ok\r\ntest_render_single (forms_tests.widget_tests.test_multiplehiddeninput.MultipleHiddenInputTest) ... ok\r\ntest_render (forms_tests.widget_tests.test_passwordinput.PasswordInputTest) ... ok\r\ntest_render_ignore_value (forms_tests.widget_tests.test_passwordinput.PasswordInputTest) ... ok\r\ntest_render_value_true (forms_tests.widget_tests.test_passwordinput.PasswordInputTest)\r\nThe render_value argument lets you specify whether the widget should ... ok\r\ntest_constructor_attrs (forms_tests.widget_tests.test_multiwidget.MultiWidgetTest) ... ok\r\ntest_constructor_attrs_with_type (forms_tests.widget_tests.test_multiwidget.MultiWidgetTest) ... ok\r\ntest_deepcopy (forms_tests.widget_tests.test_multiwidget.MultiWidgetTest)\r\nMultiWidget should define __deepcopy__() (#12048). ... ok\r\ntest_needs_multipart_false (forms_tests.widget_tests.test_multiwidget.MultiWidgetTest)\r\nneeds_multipart_form should be False if no widgets need it. ... ok\r\ntest_needs_multipart_true (forms_tests.widget_tests.test_multiwidget.MultiWidgetTest)\r\nneeds_multipart_form should be True if any widgets need it. ... ok\r\ntest_nested_multiwidget (forms_tests.widget_tests.test_multiwidget.MultiWidgetTest)\r\nMultiWidgets can be composed of other MultiWidgets. ... ok\r\ntest_no_whitespace_between_widgets (forms_tests.widget_tests.test_multiwidget.MultiWidgetTest) ... ok\r\ntest_subwidgets_name (forms_tests.widget_tests.test_multiwidget.MultiWidgetTest) ... ok\r\ntest_text_inputs (forms_tests.widget_tests.test_multiwidget.MultiWidgetTest) ... ok\r\ntest_value_from_datadict_subwidgets_name (forms_tests.widget_tests.test_multiwidget.MultiWidgetTest) ... ok\r\ntest_value_omitted_from_data (forms_tests.widget_tests.test_multiwidget.MultiWidgetTest) ... ok\r\ntest_value_omitted_from_data_subwidgets_name (forms_tests.widget_tests.test_multiwidget.MultiWidgetTest) ... ok\r\ntest_l10n (forms_tests.widget_tests.test_nullbooleanselect.NullBooleanSelectTest)\r\nThe NullBooleanSelect widget's options are lazily localized (#17190). ... ok\r\ntest_render_false (forms_tests.widget_tests.test_nullbooleanselect.NullBooleanSelectTest) ... ok\r\ntest_render_none (forms_tests.widget_tests.test_nullbooleanselect.NullBooleanSelectTest) ... ok\r\ntest_render_true (forms_tests.widget_tests.test_nullbooleanselect.NullBooleanSelectTest) ... ok\r\ntest_render_value_1 (forms_tests.widget_tests.test_nullbooleanselect.NullBooleanSelectTest) ... ok\r\ntest_render_value_2 (forms_tests.widget_tests.test_nullbooleanselect.NullBooleanSelectTest) ... ok\r\ntest_render_value_3 (forms_tests.widget_tests.test_nullbooleanselect.NullBooleanSelectTest) ... ok\r\ntest_render_value_false (forms_tests.widget_tests.test_nullbooleanselect.NullBooleanSelectTest) ... ok\r\ntest_render_value_true (forms_tests.widget_tests.test_nullbooleanselect.NullBooleanSelectTest) ... ok\r\ntest_render_value_unknown (forms_tests.widget_tests.test_nullbooleanselect.NullBooleanSelectTest) ... ok\r\ntest_class_attrs (forms_tests.widget_tests.test_radioselect.RadioSelectTest)\r\nThe <div> in the multiple_input.html widget template include the class ... ok\r\ntest_constructor_attrs (forms_tests.widget_tests.test_radioselect.RadioSelectTest)\r\nAttributes provided at instantiation are passed to the constituent ... ok\r\ntest_doesnt_localize_input_value (forms_tests.widget_tests.test_radioselect.RadioSelectTest) ... ok\r\ntest_nested_choices (forms_tests.widget_tests.test_radioselect.RadioSelectTest) ... ok\r\ntest_render (forms_tests.widget_tests.test_radioselect.RadioSelectTest) ... ok\r\ntest_render_as_subwidget (forms_tests.widget_tests.test_radioselect.RadioSelectTest)\r\nA RadioSelect as a subwidget of MultiWidget. ... ok\r\ntest_render_attrs (forms_tests.widget_tests.test_radioselect.RadioSelectTest)\r\nAttributes provided at render-time are passed to the constituent ... ok\r\ntest_compare_string (forms_tests.widget_tests.test_selectmultiple.SelectMultipleTest) ... ok\r\ntest_format_value (forms_tests.widget_tests.test_selectmultiple.SelectMultipleTest) ... ok\r\ntest_multiple_options_same_value (forms_tests.widget_tests.test_selectmultiple.SelectMultipleTest)\r\nMultiple options with the same value can be selected (#8103). ... ok\r\ntest_multiple_values_invalid (forms_tests.widget_tests.test_selectmultiple.SelectMultipleTest)\r\nIf multiple values are given, but some of them are not valid, the valid ... ok\r\ntest_optgroup_select_multiple (forms_tests.widget_tests.test_selectmultiple.SelectMultipleTest) ... ok\r\ntest_render_multiple_selected (forms_tests.widget_tests.test_selectmultiple.SelectMultipleTest) ... ok\r\ntest_render_none (forms_tests.widget_tests.test_selectmultiple.SelectMultipleTest)\r\nIf the value is None, none of the options are selected, even if the ... ok\r\ntest_render_selected (forms_tests.widget_tests.test_selectmultiple.SelectMultipleTest) ... ok\r\ntest_render_value_label (forms_tests.widget_tests.test_selectmultiple.SelectMultipleTest)\r\nIf the value corresponds to a label (but not to an option value), none ... ok\r\ntest_value_omitted_from_data (forms_tests.widget_tests.test_selectmultiple.SelectMultipleTest) ... ok\r\ntest_choices_constructor (forms_tests.widget_tests.test_select.SelectTest) ... ok\r\ntest_choices_constructor_generator (forms_tests.widget_tests.test_select.SelectTest)\r\nIf choices is passed to the constructor and is a generator, it can be ... ok\r\ntest_choices_escaping (forms_tests.widget_tests.test_select.SelectTest) ... ok\r\ntest_choices_optgroup (forms_tests.widget_tests.test_select.SelectTest)\r\nChoices can be nested one level in order to create HTML optgroups. ... ok\r\ntest_choices_select_inner (forms_tests.widget_tests.test_select.SelectTest) ... ok\r\ntest_choices_select_outer (forms_tests.widget_tests.test_select.SelectTest) ... ok\r\ntest_choices_unicode (forms_tests.widget_tests.test_select.SelectTest) ... ok\r\ntest_compare_to_str (forms_tests.widget_tests.test_select.SelectTest)\r\nThe value is compared to its str(). ... ok\r\ntest_constructor_attrs (forms_tests.widget_tests.test_select.SelectTest)\r\nSelect options shouldn't inherit the parent widget attrs. ... ok\r\ntest_deepcopy (forms_tests.widget_tests.test_select.SelectTest)\r\n__deepcopy__() should copy all attributes properly (#25085). ... ok\r\ntest_doesnt_localize_option_value (forms_tests.widget_tests.test_select.SelectTest) ... ok\r\ntest_doesnt_render_required_when_impossible_to_select_empty_field (forms_tests.widget_tests.test_select.SelectTest) ... ok\r\ntest_doesnt_render_required_when_no_choices_are_available (forms_tests.widget_tests.test_select.SelectTest) ... ok\r\ntest_optgroups (forms_tests.widget_tests.test_select.SelectTest) ... ok\r\ntest_optgroups_integer_choices (forms_tests.widget_tests.test_select.SelectTest)\r\nThe option 'value' is the same type as what's in `choices`. ... ok\r\ntest_options (forms_tests.widget_tests.test_select.SelectTest) ... ok\r\ntest_render (forms_tests.widget_tests.test_select.SelectTest) ... ok\r\ntest_render_label_value (forms_tests.widget_tests.test_select.SelectTest)\r\nIf the value corresponds to a label (but not to an option value), none ... ok\r\ntest_render_none (forms_tests.widget_tests.test_select.SelectTest)\r\nIf the value is None, none of the options are selected. ... ok\r\ntest_render_selected (forms_tests.widget_tests.test_select.SelectTest)\r\nOnly one option can be selected (#8103). ... ok\r\ntest_renders_required_when_possible_to_select_empty_field_list (forms_tests.widget_tests.test_select.SelectTest) ... ok\r\ntest_renders_required_when_possible_to_select_empty_field_none (forms_tests.widget_tests.test_select.SelectTest) ... ok\r\ntest_renders_required_when_possible_to_select_empty_field_str (forms_tests.widget_tests.test_select.SelectTest) ... ok\r\ntest_constructor_attrs (forms_tests.widget_tests.test_splitdatetimewidget.SplitDateTimeWidgetTest) ... ok\r\ntest_constructor_different_attrs (forms_tests.widget_tests.test_splitdatetimewidget.SplitDateTimeWidgetTest) ... ok\r\ntest_formatting (forms_tests.widget_tests.test_splitdatetimewidget.SplitDateTimeWidgetTest)\r\nUse 'date_format' and 'time_format' to change the way a value is ... ok\r\ntest_render_date_and_time (forms_tests.widget_tests.test_splitdatetimewidget.SplitDateTimeWidgetTest) ... ok\r\ntest_render_datetime (forms_tests.widget_tests.test_splitdatetimewidget.SplitDateTimeWidgetTest) ... ok\r\ntest_render_empty (forms_tests.widget_tests.test_splitdatetimewidget.SplitDateTimeWidgetTest) ... ok\r\ntest_render_none (forms_tests.widget_tests.test_splitdatetimewidget.SplitDateTimeWidgetTest) ... ok\r\ntest_constructor_different_attrs (forms_tests.widget_tests.test_splithiddendatetimewidget.SplitHiddenDateTimeWidgetTest) ... ok\r\ntest_l10n (forms_tests.widget_tests.test_splithiddendatetimewidget.SplitHiddenDateTimeWidgetTest) ... ok\r\ntest_render_empty (forms_tests.widget_tests.test_splithiddendatetimewidget.SplitHiddenDateTimeWidgetTest) ... ok\r\ntest_render_value (forms_tests.widget_tests.test_splithiddendatetimewidget.SplitHiddenDateTimeWidgetTest) ... ok\r\ntest_escaping (forms_tests.widget_tests.test_textarea.TextareaTest) ... ok\r\ntest_mark_safe (forms_tests.widget_tests.test_textarea.TextareaTest) ... ok\r\ntest_render (forms_tests.widget_tests.test_textarea.TextareaTest) ... ok\r\ntest_render_empty (forms_tests.widget_tests.test_textarea.TextareaTest) ... ok\r\ntest_render_none (forms_tests.widget_tests.test_textarea.TextareaTest) ... ok\r\ntest_render_required (forms_tests.widget_tests.test_textarea.TextareaTest) ... ok\r\ntest_attrs_precedence (forms_tests.widget_tests.test_textinput.TextInputTest)\r\n`attrs` passed to render() get precedence over those passed to the ... ok\r\ntest_attrs_safestring (forms_tests.widget_tests.test_textinput.TextInputTest) ... ok\r\ntest_constructor_attrs (forms_tests.widget_tests.test_textinput.TextInputTest) ... ok\r\ntest_render (forms_tests.widget_tests.test_textinput.TextInputTest) ... ok\r\ntest_render_boolean (forms_tests.widget_tests.test_textinput.TextInputTest)\r\nBoolean values are rendered to their string forms (\"True\" and ... ok\r\ntest_render_custom_attrs (forms_tests.widget_tests.test_textinput.TextInputTest) ... ok\r\ntest_render_none (forms_tests.widget_tests.test_textinput.TextInputTest) ... ok\r\ntest_render_quoted (forms_tests.widget_tests.test_textinput.TextInputTest) ... ok\r\ntest_render_unicode (forms_tests.widget_tests.test_textinput.TextInputTest) ... ok\r\ntest_render_value (forms_tests.widget_tests.test_textinput.TextInputTest) ... ok\r\ntest_use_required_attribute (forms_tests.widget_tests.test_textinput.TextInputTest) ... ok\r\ntest_all_errors_get_reported (forms_tests.tests.test_validators.TestFieldWithValidators) ... ok\r\ntest_field_validators_can_be_any_iterable (forms_tests.tests.test_validators.TestFieldWithValidators) ... ok\r\ntest_format (forms_tests.widget_tests.test_timeinput.TimeInputTest)\r\nUse 'format' to change the way a value is displayed. ... ok\r\ntest_l10n (forms_tests.widget_tests.test_timeinput.TimeInputTest) ... ok\r\ntest_render_none (forms_tests.widget_tests.test_timeinput.TimeInputTest) ... ok\r\ntest_render_value (forms_tests.widget_tests.test_timeinput.TimeInputTest)\r\nThe microseconds are trimmed on display, by default. ... ok\r\ntest_string (forms_tests.widget_tests.test_timeinput.TimeInputTest)\r\nInitializing from a string value. ... ok\r\ntest_attr_false_not_rendered (forms_tests.widget_tests.test_widget.WidgetTests) ... ok\r\ntest_format_value (forms_tests.widget_tests.test_widget.WidgetTests) ... ok\r\ntest_no_trailing_newline_in_attrs (forms_tests.widget_tests.test_widget.WidgetTests) ... ok\r\ntest_value_omitted_from_data (forms_tests.widget_tests.test_widget.WidgetTests) ... ok\r\ntest_custom_input_format (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest) ... ok\r\ntest_custom_months (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest) ... ok\r\ntest_format_value (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest) ... ok\r\ntest_l10n (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest) ... ok\r\ntest_render_datetime (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest) ... ok\r\ntest_render_empty (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest) ... ok\r\ntest_render_invalid_date (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest)\r\nInvalid dates should still render the failed date. ... ok\r\ntest_render_none (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest)\r\nRendering the None or '' values should yield the same output. ... ok\r\ntest_render_string (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest) ... ok\r\ntest_selectdate_empty_label (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest) ... ok\r\ntest_selectdate_required (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest) ... ok\r\ntest_value_from_datadict (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest) ... ok\r\ntest_value_omitted_from_data (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest) ... ok\r\ntest_years_rendered_without_separator (forms_tests.widget_tests.test_selectdatewidget.SelectDateWidgetTest) ... ok\r\ntest_accessing_clean (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_auto_id (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_auto_id_false (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_auto_id_on_form_and_field (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_auto_id_true (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_baseform_repr (forms_tests.tests.test_forms.Jinja2FormsTestCase)\r\nBaseForm.__repr__() should contain some basic information about the ... ok\r\ntest_baseform_repr_dont_trigger_validation (forms_tests.tests.test_forms.Jinja2FormsTestCase)\r\nBaseForm.__repr__() shouldn't trigger the form validation. ... ok\r\ntest_boundfield_bool (forms_tests.tests.test_forms.Jinja2FormsTestCase)\r\nBoundField without any choices (subwidgets) evaluates to True. ... ok\r\ntest_boundfield_css_classes (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_boundfield_empty_label (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_boundfield_id_for_label (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_boundfield_id_for_label_override_by_attrs (forms_tests.tests.test_forms.Jinja2FormsTestCase)\r\nIf an id is provided in `Widget.attrs`, it overrides the generated ID, ... ok\r\ntest_boundfield_initial_called_once (forms_tests.tests.test_forms.Jinja2FormsTestCase)\r\nMultiple calls to BoundField().value() in an unbound form should return ... ok\r\ntest_boundfield_invalid_index (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_boundfield_label_tag (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_boundfield_label_tag_custom_widget_id_for_label (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_boundfield_label_tag_no_id (forms_tests.tests.test_forms.Jinja2FormsTestCase)\r\nIf a widget has no id, label_tag just returns the text with no ... ok\r\ntest_boundfield_slice (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_boundfield_subwidget_id_for_label (forms_tests.tests.test_forms.Jinja2FormsTestCase)\r\nIf auto_id is provided when initializing the form, the generated ID in ... ok\r\ntest_boundfield_value_disabled_callable_initial (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_boundfield_values (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_boundfield_widget_type (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_callable_initial_data (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_changed_data (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_changing_cleaned_data_in_clean (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_changing_cleaned_data_nothing_returned (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_checkbox_auto_id (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_class_prefix (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_cleaned_data_only_fields (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_custom_boundfield (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_custom_empty_values (forms_tests.tests.test_forms.Jinja2FormsTestCase)\r\nForm fields can customize what is considered as an empty value ... ok\r\ntest_datetime_changed_data_callable_with_microseconds (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_datetime_clean_disabled_callable_initial_bound_field (forms_tests.tests.test_forms.Jinja2FormsTestCase)\r\nThe cleaned value for a form with a disabled DateTimeField and callable ... ok\r\ntest_datetime_clean_disabled_callable_initial_microseconds (forms_tests.tests.test_forms.Jinja2FormsTestCase)\r\nCleaning a form with a disabled DateTimeField and callable initial ... ok\r\ntest_dynamic_construction (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_dynamic_initial_data (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_empty_data_files_multi_value_dict (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_empty_dict (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_empty_permitted (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_empty_permitted_and_use_required_attribute (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_empty_querydict_args (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_error_dict (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_error_dict_as_json_escape_html (forms_tests.tests.test_forms.Jinja2FormsTestCase)\r\n#21962 - adding html escape flag to ErrorDict ... ok\r\ntest_error_escaping (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_error_html_required_html_classes (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_error_list (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_error_list_class_has_one_class_specified (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_error_list_class_not_specified (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_error_list_with_hidden_field_errors_has_correct_class (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_error_list_with_non_field_errors_has_correct_class (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_escaping (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_explicit_field_order (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_extracting_hidden_and_visible (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_field_deep_copy_error_messages (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_field_named_data (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_field_order (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_filefield_initial_callable (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_filefield_with_fileinput_required (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_form (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_form_html_attributes (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_form_with_disabled_fields (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_form_with_iterable_boundfield (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_form_with_iterable_boundfield_id (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_form_with_noniterable_boundfield (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_forms_with_choices (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_forms_with_file_fields (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_forms_with_multiple_choice (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_forms_with_null_boolean (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_forms_with_prefixes (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_forms_with_radio (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_get_initial_for_field (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_has_error (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_help_text (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_hidden_data (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_hidden_initial_gets_id (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_hidden_widget (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_html_output_with_hidden_input_field_errors (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_html_safe (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_id_on_field (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_initial_data (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_initial_datetime_values (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_iterable_boundfield_select (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_label_attrs_not_localized (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_label_does_not_include_new_line (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_label_has_required_css_class (forms_tests.tests.test_forms.Jinja2FormsTestCase)\r\n#17922 - required_css_class is added to the label_tag() of required fields. ... ok\r\ntest_label_split_datetime_not_displayed (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_label_suffix (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_label_tag_override (forms_tests.tests.test_forms.Jinja2FormsTestCase)\r\nBoundField label_suffix (if provided) overrides Form label_suffix ... ok\r\ntest_multipart_encoded_form (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_multiple_choice_checkbox (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_multiple_choice_list_data (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_multiple_hidden (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_multivalue_deep_copy (forms_tests.tests.test_forms.Jinja2FormsTestCase)\r\n#19298 -- MultiValueField needs to override the default as it needs ... ok\r\ntest_multivalue_field_validation (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_multivalue_initial_data (forms_tests.tests.test_forms.Jinja2FormsTestCase)\r\n#23674 -- invalid initial data should not break form.changed_data() ... ok\r\ntest_multivalue_optional_subfields (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_multivalue_optional_subfields_rendering (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_only_hidden_fields (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_optional_data (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_specifying_labels (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_subclassing_forms (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_unbound_form (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_unicode_values (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_update_error_dict (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_use_required_attribute_false (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_use_required_attribute_true (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_validating_multiple_fields (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_validators_independence (forms_tests.tests.test_forms.Jinja2FormsTestCase)\r\nThe list of form field validators can be modified without polluting ... ok\r\ntest_various_boolean_values (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_widget_output (forms_tests.tests.test_forms.Jinja2FormsTestCase) ... ok\r\ntest_value_placeholder_with_char_field (forms_tests.tests.test_validators.ValidatorCustomMessageTests) ... ok\r\ntest_value_placeholder_with_decimal_field (forms_tests.tests.test_validators.ValidatorCustomMessageTests) ... ok\r\ntest_value_placeholder_with_file_field (forms_tests.tests.test_validators.ValidatorCustomMessageTests) ... ok\r\ntest_value_placeholder_with_integer_field (forms_tests.tests.test_validators.ValidatorCustomMessageTests) ... ok\r\ntest_value_placeholder_with_null_character (forms_tests.tests.test_validators.ValidatorCustomMessageTests) ... ok\r\ntest_accessing_clean (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_auto_id (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_auto_id_false (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_auto_id_on_form_and_field (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_auto_id_true (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_baseform_repr (forms_tests.tests.test_forms.FormsTestCase)\r\nBaseForm.__repr__() should contain some basic information about the ... ok\r\ntest_baseform_repr_dont_trigger_validation (forms_tests.tests.test_forms.FormsTestCase)\r\nBaseForm.__repr__() shouldn't trigger the form validation. ... ok\r\ntest_boundfield_bool (forms_tests.tests.test_forms.FormsTestCase)\r\nBoundField without any choices (subwidgets) evaluates to True. ... ok\r\ntest_boundfield_css_classes (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_boundfield_empty_label (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_boundfield_id_for_label (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_boundfield_id_for_label_override_by_attrs (forms_tests.tests.test_forms.FormsTestCase)\r\nIf an id is provided in `Widget.attrs`, it overrides the generated ID, ... ok\r\ntest_boundfield_initial_called_once (forms_tests.tests.test_forms.FormsTestCase)\r\nMultiple calls to BoundField().value() in an unbound form should return ... ok\r\ntest_boundfield_invalid_index (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_boundfield_label_tag (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_boundfield_label_tag_custom_widget_id_for_label (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_boundfield_label_tag_no_id (forms_tests.tests.test_forms.FormsTestCase)\r\nIf a widget has no id, label_tag just returns the text with no ... ok\r\ntest_boundfield_slice (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_boundfield_subwidget_id_for_label (forms_tests.tests.test_forms.FormsTestCase)\r\nIf auto_id is provided when initializing the form, the generated ID in ... ok\r\ntest_boundfield_value_disabled_callable_initial (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_boundfield_values (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_boundfield_widget_type (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_callable_initial_data (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_changed_data (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_changing_cleaned_data_in_clean (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_changing_cleaned_data_nothing_returned (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_checkbox_auto_id (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_class_prefix (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_cleaned_data_only_fields (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_custom_boundfield (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_custom_empty_values (forms_tests.tests.test_forms.FormsTestCase)\r\nForm fields can customize what is considered as an empty value ... ok\r\ntest_datetime_changed_data_callable_with_microseconds (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_datetime_clean_disabled_callable_initial_bound_field (forms_tests.tests.test_forms.FormsTestCase)\r\nThe cleaned value for a form with a disabled DateTimeField and callable ... ok\r\ntest_datetime_clean_disabled_callable_initial_microseconds (forms_tests.tests.test_forms.FormsTestCase)\r\nCleaning a form with a disabled DateTimeField and callable initial ... ok\r\ntest_dynamic_construction (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_dynamic_initial_data (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_empty_data_files_multi_value_dict (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_empty_dict (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_empty_permitted (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_empty_permitted_and_use_required_attribute (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_empty_querydict_args (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_error_dict (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_error_dict_as_json_escape_html (forms_tests.tests.test_forms.FormsTestCase)\r\n#21962 - adding html escape flag to ErrorDict ... ok\r\ntest_error_escaping (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_error_html_required_html_classes (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_error_list (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_error_list_class_has_one_class_specified (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_error_list_class_not_specified (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_error_list_with_hidden_field_errors_has_correct_class (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_error_list_with_non_field_errors_has_correct_class (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_escaping (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_explicit_field_order (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_extracting_hidden_and_visible (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_field_deep_copy_error_messages (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_field_named_data (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_field_order (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_filefield_initial_callable (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_filefield_with_fileinput_required (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_form (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_form_html_attributes (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_form_with_disabled_fields (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_form_with_iterable_boundfield (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_form_with_iterable_boundfield_id (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_form_with_noniterable_boundfield (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_forms_with_choices (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_forms_with_file_fields (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_forms_with_multiple_choice (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_forms_with_null_boolean (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_forms_with_prefixes (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_forms_with_radio (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_get_initial_for_field (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_has_error (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_help_text (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_hidden_data (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_hidden_initial_gets_id (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_hidden_widget (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_html_output_with_hidden_input_field_errors (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_html_safe (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_id_on_field (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_initial_data (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_initial_datetime_values (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_iterable_boundfield_select (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_label_attrs_not_localized (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_label_does_not_include_new_line (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_label_has_required_css_class (forms_tests.tests.test_forms.FormsTestCase)\r\n#17922 - required_css_class is added to the label_tag() of required fields. ... ok\r\ntest_label_split_datetime_not_displayed (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_label_suffix (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_label_tag_override (forms_tests.tests.test_forms.FormsTestCase)\r\nBoundField label_suffix (if provided) overrides Form label_suffix ... ok\r\ntest_multipart_encoded_form (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_multiple_choice_checkbox (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_multiple_choice_list_data (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_multiple_hidden (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_multivalue_deep_copy (forms_tests.tests.test_forms.FormsTestCase)\r\n#19298 -- MultiValueField needs to override the default as it needs ... ok\r\ntest_multivalue_field_validation (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_multivalue_initial_data (forms_tests.tests.test_forms.FormsTestCase)\r\n#23674 -- invalid initial data should not break form.changed_data() ... ok\r\ntest_multivalue_optional_subfields (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_multivalue_optional_subfields_rendering (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_only_hidden_fields (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_optional_data (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_specifying_labels (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_subclassing_forms (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_unbound_form (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_unicode_values (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_update_error_dict (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_use_required_attribute_false (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_use_required_attribute_true (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_validating_multiple_fields (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_validators_independence (forms_tests.tests.test_forms.FormsTestCase)\r\nThe list of form field validators can be modified without polluting ... ok\r\ntest_various_boolean_values (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_widget_output (forms_tests.tests.test_forms.FormsTestCase) ... ok\r\ntest_absolute_max (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_absolute_max_invalid (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_absolute_max_with_max_num (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_basic_formset (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nA FormSet constructor takes the same arguments as Form. Create a ... ok\r\ntest_blank_form_unfilled (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nA form that's displayed as blank may be submitted as blank. ... ok\r\ntest_can_delete_extra_formset_forms (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_clean_hook (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nFormSets have a clean() hook for doing extra validation that isn't tied ... ok\r\ntest_custom_renderer (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nA custom renderer passed to a formset_factory() is passed to all forms ... ok\r\ntest_default_absolute_max (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_delete_prefilled_data (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nDeleting prefilled data is an error. Removing data from form fields ... ok\r\ntest_disable_delete_extra_formset_forms (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_displaying_more_than_one_blank_form (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nMore than 1 empty form can be displayed using formset_factory's ... ok\r\ntest_empty_ordered_fields (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nOrdering fields are allowed to be left blank. If they are left blank, ... ok\r\ntest_form_kwargs_empty_form (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_form_kwargs_formset (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nCustom kwargs set on the formset instance are passed to the ... ok\r\ntest_form_kwargs_formset_dynamic (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nForm kwargs can be passed dynamically in a formset. ... ok\r\ntest_formset_calls_forms_is_valid (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nFormsets call is_valid() on each form. ... ok\r\ntest_formset_error_class (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nFormset's forms use the formset's error_class. ... ok\r\ntest_formset_has_changed (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nFormSet.has_changed() is True if any data is passed to its forms, even ... ok\r\ntest_formset_initial_data (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nA FormSet can be prefilled with existing data by providing a list of ... ok\r\ntest_formset_iteration (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nFormset instances are iterable. ... ok\r\ntest_formset_nonzero (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nA formsets without any forms evaluates as True. ... ok\r\ntest_formset_splitdatetimefield (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nFormset works with SplitDateTimeField(initial=datetime.datetime.now). ... ok\r\ntest_formset_total_error_count (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nA valid formset should have 0 total errors. ... ok\r\ntest_formset_total_error_count_with_non_form_errors (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_formset_validate_max_flag (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nIf validate_max is set and max_num is less than TOTAL_FORMS in the ... ok\r\ntest_formset_validate_min_excludes_empty_forms (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_formset_validate_min_flag (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nIf validate_min is set and min_num is more than TOTAL_FORMS in the ... ok\r\ntest_formset_validate_min_unchanged_forms (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nmin_num validation doesn't consider unchanged forms with initial data ... ok\r\ntest_formset_validation (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_formset_validation_count (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nA formset's ManagementForm is validated once per FormSet.is_valid() ... ok\r\ntest_formset_with_deletion (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nformset_factory's can_delete argument adds a boolean \"delete\" field to ... ok\r\ntest_formset_with_deletion_custom_widget (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_formset_with_deletion_invalid_deleted_form (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\ndeleted_forms works on a valid formset even if a deleted form would ... ok\r\ntest_formset_with_deletion_remove_deletion_flag (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nIf a form is filled with something and can_delete is also checked, that ... ok\r\ntest_formset_with_ordering_and_deletion (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nFormSets with ordering + deletion. ... ok\r\ntest_formsets_with_ordering (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nformset_factory's can_order argument adds an integer field to each ... ok\r\ntest_formsets_with_ordering_custom_widget (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_hard_limit_on_instantiated_forms (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nA formset has a hard limit on the number of forms instantiated. ... ok\r\ntest_html_safe (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_increase_hard_limit (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nCan increase the built-in forms limit via a higher max_num. ... ok\r\ntest_invalid_deleted_form_with_ordering (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nCan get ordered_forms from a valid formset even if a deleted form ... ok\r\ntest_limited_max_forms_two (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_limiting_extra_lest_than_max_num (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nmax_num has no effect when extra is less than max_num. ... ok\r\ntest_limiting_max_forms (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nLimiting the maximum number of forms with max_num. ... ok\r\ntest_management_form_prefix (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nThe management form has the correct prefix. ... ok\r\ntest_max_num_with_initial_data (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_max_num_zero (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nIf max_num is 0 then no form is rendered at all, regardless of extra, ... ok\r\ntest_max_num_zero_with_initial (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_min_num_displaying_more_than_one_blank_form (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nMore than 1 empty form can also be displayed using formset_factory's ... ok\r\ntest_min_num_displaying_more_than_one_blank_form_with_zero_extra (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nMore than 1 empty form can be displayed using min_num. ... ok\r\ntest_more_initial_data (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nThe extra argument works when the formset is pre-filled with initial ... ok\r\ntest_more_initial_form_result_in_one (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nOne form from initial and extra=3 with max_num=2 results in the one ... ok\r\ntest_more_initial_than_max_num (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nMore initial forms than max_num results in all initial forms being ... ok\r\ntest_non_form_errors (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_non_form_errors_run_full_clean (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nIf non_form_errors() is called without calling is_valid() first, ... ok\r\ntest_ordering_blank_fieldsets (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nOrdering works with blank fieldsets. ... ok\r\ntest_second_form_partially_filled (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nIf at least one field is filled out on a blank form, it will be ... ok\r\ntest_second_form_partially_filled_2 (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nA partially completed form is invalid. ... ok\r\ntest_single_form_completed (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase)\r\nJust one form may be completed. ... ok\r\ntest_validate_max_ignores_forms_marked_for_deletion (forms_tests.tests.test_formsets.Jinja2FormsFormsetTestCase) ... ok\r\ntest_absolute_max (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\ntest_absolute_max_invalid (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\ntest_absolute_max_with_max_num (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\ntest_basic_formset (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nA FormSet constructor takes the same arguments as Form. Create a ... ok\r\ntest_blank_form_unfilled (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nA form that's displayed as blank may be submitted as blank. ... ok\r\ntest_can_delete_extra_formset_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\ntest_clean_hook (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nFormSets have a clean() hook for doing extra validation that isn't tied ... ok\r\ntest_custom_renderer (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nA custom renderer passed to a formset_factory() is passed to all forms ... ok\r\ntest_default_absolute_max (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\ntest_delete_prefilled_data (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nDeleting prefilled data is an error. Removing data from form fields ... ok\r\ntest_disable_delete_extra_formset_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\ntest_displaying_more_than_one_blank_form (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nMore than 1 empty form can be displayed using formset_factory's ... ok\r\ntest_empty_ordered_fields (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nOrdering fields are allowed to be left blank. If they are left blank, ... ok\r\ntest_form_kwargs_empty_form (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\ntest_form_kwargs_formset (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nCustom kwargs set on the formset instance are passed to the ... ok\r\ntest_form_kwargs_formset_dynamic (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nForm kwargs can be passed dynamically in a formset. ... ok\r\ntest_formset_calls_forms_is_valid (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nFormsets call is_valid() on each form. ... ok\r\ntest_formset_error_class (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nFormset's forms use the formset's error_class. ... ok\r\ntest_formset_has_changed (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nFormSet.has_changed() is True if any data is passed to its forms, even ... ok\r\ntest_formset_initial_data (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nA FormSet can be prefilled with existing data by providing a list of ... ok\r\ntest_formset_iteration (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nFormset instances are iterable. ... ok\r\ntest_formset_nonzero (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nA formsets without any forms evaluates as True. ... ok\r\ntest_formset_splitdatetimefield (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nFormset works with SplitDateTimeField(initial=datetime.datetime.now). ... ok\r\ntest_formset_total_error_count (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nA valid formset should have 0 total errors. ... ok\r\ntest_formset_total_error_count_with_non_form_errors (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\ntest_formset_validate_max_flag (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nIf validate_max is set and max_num is less than TOTAL_FORMS in the ... ok\r\ntest_formset_validate_min_excludes_empty_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\ntest_formset_validate_min_flag (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nIf validate_min is set and min_num is more than TOTAL_FORMS in the ... ok\r\ntest_formset_validate_min_unchanged_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nmin_num validation doesn't consider unchanged forms with initial data ... ok\r\ntest_formset_validation (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\ntest_formset_validation_count (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nA formset's ManagementForm is validated once per FormSet.is_valid() ... ok\r\ntest_formset_with_deletion (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nformset_factory's can_delete argument adds a boolean \"delete\" field to ... ok\r\ntest_formset_with_deletion_custom_widget (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\ntest_formset_with_deletion_invalid_deleted_form (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\ndeleted_forms works on a valid formset even if a deleted form would ... ok\r\ntest_formset_with_deletion_remove_deletion_flag (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nIf a form is filled with something and can_delete is also checked, that ... ok\r\ntest_formset_with_ordering_and_deletion (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nFormSets with ordering + deletion. ... ok\r\ntest_formsets_with_ordering (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nformset_factory's can_order argument adds an integer field to each ... ok\r\ntest_formsets_with_ordering_custom_widget (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\ntest_hard_limit_on_instantiated_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nA formset has a hard limit on the number of forms instantiated. ... ok\r\ntest_html_safe (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\ntest_increase_hard_limit (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nCan increase the built-in forms limit via a higher max_num. ... ok\r\ntest_invalid_deleted_form_with_ordering (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nCan get ordered_forms from a valid formset even if a deleted form ... ok\r\ntest_limited_max_forms_two (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\ntest_limiting_extra_lest_than_max_num (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nmax_num has no effect when extra is less than max_num. ... ok\r\ntest_limiting_max_forms (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nLimiting the maximum number of forms with max_num. ... ok\r\ntest_management_form_prefix (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nThe management form has the correct prefix. ... ok\r\ntest_max_num_with_initial_data (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\ntest_max_num_zero (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nIf max_num is 0 then no form is rendered at all, regardless of extra, ... ok\r\ntest_max_num_zero_with_initial (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\ntest_min_num_displaying_more_than_one_blank_form (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nMore than 1 empty form can also be displayed using formset_factory's ... ok\r\ntest_min_num_displaying_more_than_one_blank_form_with_zero_extra (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nMore than 1 empty form can be displayed using min_num. ... ok\r\ntest_more_initial_data (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nThe extra argument works when the formset is pre-filled with initial ... ok\r\ntest_more_initial_form_result_in_one (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nOne form from initial and extra=3 with max_num=2 results in the one ... ok\r\ntest_more_initial_than_max_num (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nMore initial forms than max_num results in all initial forms being ... ok\r\ntest_non_form_errors (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\ntest_non_form_errors_run_full_clean (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nIf non_form_errors() is called without calling is_valid() first, ... ok\r\ntest_ordering_blank_fieldsets (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nOrdering works with blank fieldsets. ... ok\r\ntest_second_form_partially_filled (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nIf at least one field is filled out on a blank form, it will be ... ok\r\ntest_second_form_partially_filled_2 (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nA partially completed form is invalid. ... ok\r\ntest_single_form_completed (forms_tests.tests.test_formsets.FormsFormsetTestCase)\r\nJust one form may be completed. ... ok\r\ntest_validate_max_ignores_forms_marked_for_deletion (forms_tests.tests.test_formsets.FormsFormsetTestCase) ... ok\r\n\r\n----------------------------------------------------------------------\r\nRan 882 tests in 0.465s\r\n\r\nOK (skipped=1)\r\nDestroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\nDestroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\nDestroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\nDestroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\nDestroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\nDestroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\nDestroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\nDestroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...\r\nDestroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...",
                "extras": {
                    "command_id": -1,
                    "command": "cd /workspace/django__django__4.1 && python3 tests/runtests.py forms_tests -v 2",
                    "exit_code": 0
                }
            }
        ],
        [
            {
                "id": 29,
                "timestamp": "2024-07-16T22:18:36.026561",
                "source": "agent",
                "message": "Great news! All the forms tests have passed successfully. This indicates that our change to make `ModelChoiceIteratorValue` hashable by implementing the `__hash__` method has not introduced any regressions in the forms functionality.\n\nThe test results show that 882 tests were run, and all of them passed (with one test skipped). This includes tests for `ModelChoiceField`, which uses `ModelChoiceIteratorValue`.\n\nGiven these results, we can conclude that our fix for the `ModelChoiceIteratorValue` class has resolved the original issue of it not being hashable, without causing any new problems in the forms functionality.\n\nTo summarize:\n1. We identified the issue with `ModelChoiceIteratorValue` not being hashable.\n2. We added a `__hash__` method to the `ModelChoiceIteratorValue` class.\n3. We ran the full test suite for the forms module.\n4. All tests passed successfully, indicating that our change fixed the issue without introducing new problems.\n\nThe original problem has been resolved, and the Django forms functionality is working as expected. Unless there are any other specific concerns or tests you'd like me to run, I believe we have successfully completed the task of fixing the `ModelChoiceIteratorValue` hashability issue.",
                "action": "finish",
                "args": {
                    "outputs": {},
                    "thought": "Great news! All the forms tests have passed successfully. This indicates that our change to make `ModelChoiceIteratorValue` hashable by implementing the `__hash__` method has not introduced any regressions in the forms functionality.\n\nThe test results show that 882 tests were run, and all of them passed (with one test skipped). This includes tests for `ModelChoiceField`, which uses `ModelChoiceIteratorValue`.\n\nGiven these results, we can conclude that our fix for the `ModelChoiceIteratorValue` class has resolved the original issue of it not being hashable, without causing any new problems in the forms functionality.\n\nTo summarize:\n1. We identified the issue with `ModelChoiceIteratorValue` not being hashable.\n2. We added a `__hash__` method to the `ModelChoiceIteratorValue` class.\n3. We ran the full test suite for the forms module.\n4. All tests passed successfully, indicating that our change fixed the issue without introducing new problems.\n\nThe original problem has been resolved, and the Django forms functionality is working as expected. Unless there are any other specific concerns or tests you'd like me to run, I believe we have successfully completed the task of fixing the `ModelChoiceIteratorValue` hashability issue."
                }
            },
            {
                "message": "No observation",
                "observation": "null",
                "content": "",
                "extras": {}
            }
        ]
    ],
    "info": {
        "submission": "diff --git a/django/forms/.backup.models.py b/django/forms/.backup.models.py\r\nnew file mode 100644\r\nindex 0000000000..5dcf923c12\r\n--- /dev/null\r\n+++ b/django/forms/.backup.models.py\r\n@@ -0,0 +1,1424 @@\r\n+\"\"\"\r\n+Helper functions for creating Form classes from Django models\r\n+and database field objects.\r\n+\"\"\"\r\n+from itertools import chain\r\n+\r\n+from django.core.exceptions import (\r\n+    NON_FIELD_ERRORS, FieldError, ImproperlyConfigured, ValidationError,\r\n+)\r\n+from django.forms.fields import ChoiceField, Field\r\n+from django.forms.forms import BaseForm, DeclarativeFieldsMetaclass\r\n+from django.forms.formsets import BaseFormSet, formset_factory\r\n+from django.forms.utils import ErrorList\r\n+from django.forms.widgets import (\r\n+    HiddenInput, MultipleHiddenInput, RadioSelect, SelectMultiple,\r\n+)\r\n+from django.utils.text import capfirst, get_text_list\r\n+from django.utils.translation import gettext, gettext_lazy as _\r\n+\r\n+__all__ = (\r\n+    'ModelForm', 'BaseModelForm', 'model_to_dict', 'fields_for_model',\r\n+    'ModelChoiceField', 'ModelMultipleChoiceField', 'ALL_FIELDS',\r\n+    'BaseModelFormSet', 'modelformset_factory', 'BaseInlineFormSet',\r\n+    'inlineformset_factory', 'modelform_factory',\r\n+)\r\n+\r\n+ALL_FIELDS = '__all__'\r\n+\r\n+\r\n+def construct_instance(form, instance, fields=None, exclude=None):\r\n+    \"\"\"\r\n+    Construct and return a model instance from the bound ``form``'s\r\n+    ``cleaned_data``, but do not save the returned instance to the database.\r\n+    \"\"\"\r\n+    from django.db import models\r\n+    opts = instance._meta\r\n+\r\n+    cleaned_data = form.cleaned_data\r\n+    file_field_list = []\r\n+    for f in opts.fields:\r\n+        if not f.editable or isinstance(f, models.AutoField) \\\r\n+                or f.name not in cleaned_data:\r\n+            continue\r\n+        if fields is not None and f.name not in fields:\r\n+            continue\r\n+        if exclude and f.name in exclude:\r\n+            continue\r\n+        # Leave defaults for fields that aren't in POST data, except for\r\n+        # checkbox inputs because they don't appear in POST data if not checked.\r\n+        if (\r\n+            f.has_default() and\r\n+            form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)) and\r\n+            cleaned_data.get(f.name) in form[f.name].field.empty_values\r\n+        ):\r\n+            continue\r\n+        # Defer saving file-type fields until after the other fields, so a\r\n+        # callable upload_to can use the values from other fields.\r\n+        if isinstance(f, models.FileField):\r\n+            file_field_list.append(f)\r\n+        else:\r\n+            f.save_form_data(instance, cleaned_data[f.name])\r\n+\r\n+    for f in file_field_list:\r\n+        f.save_form_data(instance, cleaned_data[f.name])\r\n+\r\n+    return instance\r\n+\r\n+\r\n+# ModelForms #################################################################\r\n+\r\n+def model_to_dict(instance, fields=None, exclude=None):\r\n+    \"\"\"\r\n+    Return a dict containing the data in ``instance`` suitable for passing as\r\n+    a Form's ``initial`` keyword argument.\r\n+\r\n+    ``fields`` is an optional list of field names. If provided, return only the\r\n+    named.\r\n+\r\n+    ``exclude`` is an optional list of field names. If provided, exclude the\r\n+    named from the returned dict, even if they are listed in the ``fields``\r\n+    argument.\r\n+    \"\"\"\r\n+    opts = instance._meta\r\n+    data = {}\r\n+    for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):\r\n+        if not getattr(f, 'editable', False):\r\n+            continue\r\n+        if fields is not None and f.name not in fields:\r\n+            continue\r\n+        if exclude and f.name in exclude:\r\n+            continue\r\n+        data[f.name] = f.value_from_object(instance)\r\n+    return data\r\n+\r\n+\r\n+def apply_limit_choices_to_to_formfield(formfield):\r\n+    \"\"\"Apply limit_choices_to to the formfield's queryset if needed.\"\"\"\r\n+    from django.db.models import Exists, OuterRef, Q\r\n+    if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):\r\n+        limit_choices_to = formfield.get_limit_choices_to()\r\n+        if limit_choices_to:\r\n+            complex_filter = limit_choices_to\r\n+            if not isinstance(complex_filter, Q):\r\n+                complex_filter = Q(**limit_choices_to)\r\n+            complex_filter &= Q(pk=OuterRef('pk'))\r\n+            # Use Exists() to avoid potential duplicates.\r\n+            formfield.queryset = formfield.queryset.filter(\r\n+                Exists(formfield.queryset.model._base_manager.filter(complex_filter)),\r\n+            )\r\n+\r\n+\r\n+def fields_for_model(model, fields=None, exclude=None, widgets=None,\r\n+                     formfield_callback=None, localized_fields=None,\r\n+                     labels=None, help_texts=None, error_messages=None,\r\n+                     field_classes=None, *, apply_limit_choices_to=True):\r\n+    \"\"\"\r\n+    Return a dictionary containing form fields for the given model.\r\n+\r\n+    ``fields`` is an optional list of field names. If provided, return only the\r\n+    named fields.\r\n+\r\n+    ``exclude`` is an optional list of field names. If provided, exclude the\r\n+    named fields from the returned fields, even if they are listed in the\r\n+    ``fields`` argument.\r\n+\r\n+    ``widgets`` is a dictionary of model field names mapped to a widget.\r\n+\r\n+    ``formfield_callback`` is a callable that takes a model field and returns\r\n+    a form field.\r\n+\r\n+    ``localized_fields`` is a list of names of fields which should be localized.\r\n+\r\n+    ``labels`` is a dictionary of model field names mapped to a label.\r\n+\r\n+    ``help_texts`` is a dictionary of model field names mapped to a help text.\r\n+\r\n+    ``error_messages`` is a dictionary of model field names mapped to a\r\n+    dictionary of error messages.\r\n+\r\n+    ``field_classes`` is a dictionary of model field names mapped to a form\r\n+    field class.\r\n+\r\n+    ``apply_limit_choices_to`` is a boolean indicating if limit_choices_to\r\n+    should be applied to a field's queryset.\r\n+    \"\"\"\r\n+    field_dict = {}\r\n+    ignored = []\r\n+    opts = model._meta\r\n+    # Avoid circular import\r\n+    from django.db.models import Field as ModelField\r\n+    sortable_private_fields = [f for f in opts.private_fields if isinstance(f, ModelField)]\r\n+    for f in sorted(chain(opts.concrete_fields, sortable_private_fields, opts.many_to_many)):\r\n+        if not getattr(f, 'editable', False):\r\n+            if (fields is not None and f.name in fields and\r\n+                    (exclude is None or f.name not in exclude)):\r\n+                raise FieldError(\r\n+                    \"'%s' cannot be specified for %s model form as it is a non-editable field\" % (\r\n+                        f.name, model.__name__)\r\n+                )\r\n+            continue\r\n+        if fields is not None and f.name not in fields:\r\n+            continue\r\n+        if exclude and f.name in exclude:\r\n+            continue\r\n+\r\n+        kwargs = {}\r\n+        if widgets and f.name in widgets:\r\n+            kwargs['widget'] = widgets[f.name]\r\n+        if localized_fields == ALL_FIELDS or (localized_fields and f.name in localized_fields):\r\n+            kwargs['localize'] = True\r\n+        if labels and f.name in labels:\r\n+            kwargs['label'] = labels[f.name]\r\n+        if help_texts and f.name in help_texts:\r\n+            kwargs['help_text'] = help_texts[f.name]\r\n+        if error_messages and f.name in error_messages:\r\n+            kwargs['error_messages'] = error_messages[f.name]\r\n+        if field_classes and f.name in field_classes:\r\n+            kwargs['form_class'] = field_classes[f.name]\r\n+\r\n+        if formfield_callback is None:\r\n+            formfield = f.formfield(**kwargs)\r\n+        elif not callable(formfield_callback):\r\n+            raise TypeError('formfield_callback must be a function or callable')\r\n+        else:\r\n+            formfield = formfield_callback(f, **kwargs)\r\n+\r\n+        if formfield:\r\n+            if apply_limit_choices_to:\r\n+                apply_limit_choices_to_to_formfield(formfield)\r\n+            field_dict[f.name] = formfield\r\n+        else:\r\n+            ignored.append(f.name)\r\n+    if fields:\r\n+        field_dict = {\r\n+            f: field_dict.get(f) for f in fields\r\n+            if (not exclude or f not in exclude) and f not in ignored\r\n+        }\r\n+    return field_dict\r\n+\r\n+\r\n+class ModelFormOptions:\r\n+    def __init__(self, options=None):\r\n+        self.model = getattr(options, 'model', None)\r\n+        self.fields = getattr(options, 'fields', None)\r\n+        self.exclude = getattr(options, 'exclude', None)\r\n+        self.widgets = getattr(options, 'widgets', None)\r\n+        self.localized_fields = getattr(options, 'localized_fields', None)\r\n+        self.labels = getattr(options, 'labels', None)\r\n+        self.help_texts = getattr(options, 'help_texts', None)\r\n+        self.error_messages = getattr(options, 'error_messages', None)\r\n+        self.field_classes = getattr(options, 'field_classes', None)\r\n+\r\n+\r\n+class ModelFormMetaclass(DeclarativeFieldsMetaclass):\r\n+    def __new__(mcs, name, bases, attrs):\r\n+        base_formfield_callback = None\r\n+        for b in bases:\r\n+            if hasattr(b, 'Meta') and hasattr(b.Meta, 'formfield_callback'):\r\n+                base_formfield_callback = b.Meta.formfield_callback\r\n+                break\r\n+\r\n+        formfield_callback = attrs.pop('formfield_callback', base_formfield_callback)\r\n+\r\n+        new_class = super().__new__(mcs, name, bases, attrs)\r\n+\r\n+        if bases == (BaseModelForm,):\r\n+            return new_class\r\n+\r\n+        opts = new_class._meta = ModelFormOptions(getattr(new_class, 'Meta', None))\r\n+\r\n+        # We check if a string was passed to `fields` or `exclude`,\r\n+        # which is likely to be a mistake where the user typed ('foo') instead\r\n+        # of ('foo',)\r\n+        for opt in ['fields', 'exclude', 'localized_fields']:\r\n+            value = getattr(opts, opt)\r\n+            if isinstance(value, str) and value != ALL_FIELDS:\r\n+                msg = (\"%(model)s.Meta.%(opt)s cannot be a string. \"\r\n+                       \"Did you mean to type: ('%(value)s',)?\" % {\r\n+                           'model': new_class.__name__,\r\n+                           'opt': opt,\r\n+                           'value': value,\r\n+                       })\r\n+                raise TypeError(msg)\r\n+\r\n+        if opts.model:\r\n+            # If a model is defined, extract form fields from it.\r\n+            if opts.fields is None and opts.exclude is None:\r\n+                raise ImproperlyConfigured(\r\n+                    \"Creating a ModelForm without either the 'fields' attribute \"\r\n+                    \"or the 'exclude' attribute is prohibited; form %s \"\r\n+                    \"needs updating.\" % name\r\n+                )\r\n+\r\n+            if opts.fields == ALL_FIELDS:\r\n+                # Sentinel for fields_for_model to indicate \"get the list of\r\n+                # fields from the model\"\r\n+                opts.fields = None\r\n+\r\n+            fields = fields_for_model(\r\n+                opts.model, opts.fields, opts.exclude, opts.widgets,\r\n+                formfield_callback, opts.localized_fields, opts.labels,\r\n+                opts.help_texts, opts.error_messages, opts.field_classes,\r\n+                # limit_choices_to will be applied during ModelForm.__init__().\r\n+                apply_limit_choices_to=False,\r\n+            )\r\n+\r\n+            # make sure opts.fields doesn't specify an invalid field\r\n+            none_model_fields = {k for k, v in fields.items() if not v}\r\n+            missing_fields = none_model_fields.difference(new_class.declared_fields)\r\n+            if missing_fields:\r\n+                message = 'Unknown field(s) (%s) specified for %s'\r\n+                message = message % (', '.join(missing_fields),\r\n+                                     opts.model.__name__)\r\n+                raise FieldError(message)\r\n+            # Override default model fields with any custom declared ones\r\n+            # (plus, include all the other declared fields).\r\n+            fields.update(new_class.declared_fields)\r\n+        else:\r\n+            fields = new_class.declared_fields\r\n+\r\n+        new_class.base_fields = fields\r\n+\r\n+        return new_class\r\n+\r\n+\r\n+class BaseModelForm(BaseForm):\r\n+    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\r\n+                 initial=None, error_class=ErrorList, label_suffix=None,\r\n+                 empty_permitted=False, instance=None, use_required_attribute=None,\r\n+                 renderer=None):\r\n+        opts = self._meta\r\n+        if opts.model is None:\r\n+            raise ValueError('ModelForm has no model class specified.')\r\n+        if instance is None:\r\n+            # if we didn't get an instance, instantiate a new one\r\n+            self.instance = opts.model()\r\n+            object_data = {}\r\n+        else:\r\n+            self.instance = instance\r\n+            object_data = model_to_dict(instance, opts.fields, opts.exclude)\r\n+        # if initial was provided, it should override the values from instance\r\n+        if initial is not None:\r\n+            object_data.update(initial)\r\n+        # self._validate_unique will be set to True by BaseModelForm.clean().\r\n+        # It is False by default so overriding self.clean() and failing to call\r\n+        # super will stop validate_unique from being called.\r\n+        self._validate_unique = False\r\n+        super().__init__(\r\n+            data, files, auto_id, prefix, object_data, error_class,\r\n+            label_suffix, empty_permitted, use_required_attribute=use_required_attribute,\r\n+            renderer=renderer,\r\n+        )\r\n+        for formfield in self.fields.values():\r\n+            apply_limit_choices_to_to_formfield(formfield)\r\n+\r\n+    def _get_validation_exclusions(self):\r\n+        \"\"\"\r\n+        For backwards-compatibility, exclude several types of fields from model\r\n+        validation. See tickets #12507, #12521, #12553.\r\n+        \"\"\"\r\n+        exclude = []\r\n+        # Build up a list of fields that should be excluded from model field\r\n+        # validation and unique checks.\r\n+        for f in self.instance._meta.fields:\r\n+            field = f.name\r\n+            # Exclude fields that aren't on the form. The developer may be\r\n+            # adding these values to the model after form validation.\r\n+            if field not in self.fields:\r\n+                exclude.append(f.name)\r\n+\r\n+            # Don't perform model validation on fields that were defined\r\n+            # manually on the form and excluded via the ModelForm's Meta\r\n+            # class. See #12901.\r\n+            elif self._meta.fields and field not in self._meta.fields:\r\n+                exclude.append(f.name)\r\n+            elif self._meta.exclude and field in self._meta.exclude:\r\n+                exclude.append(f.name)\r\n+\r\n+            # Exclude fields that failed form validation. There's no need for\r\n+            # the model fields to validate them as well.\r\n+            elif field in self._errors:\r\n+                exclude.append(f.name)\r\n+\r\n+            # Exclude empty fields that are not required by the form, if the\r\n+            # underlying model field is required. This keeps the model field\r\n+            # from raising a required error. Note: don't exclude the field from\r\n+            # validation if the model field allows blanks. If it does, the blank\r\n+            # value may be included in a unique check, so cannot be excluded\r\n+            # from validation.\r\n+            else:\r\n+                form_field = self.fields[field]\r\n+                field_value = self.cleaned_data.get(field)\r\n+                if not f.blank and not form_field.required and field_value in form_field.empty_values:\r\n+                    exclude.append(f.name)\r\n+        return exclude\r\n+\r\n+    def clean(self):\r\n+        self._validate_unique = True\r\n+        return self.cleaned_data\r\n+\r\n+    def _update_errors(self, errors):\r\n+        # Override any validation error messages defined at the model level\r\n+        # with those defined at the form level.\r\n+        opts = self._meta\r\n+\r\n+        # Allow the model generated by construct_instance() to raise\r\n+        # ValidationError and have them handled in the same way as others.\r\n+        if hasattr(errors, 'error_dict'):\r\n+            error_dict = errors.error_dict\r\n+        else:\r\n+            error_dict = {NON_FIELD_ERRORS: errors}\r\n+\r\n+        for field, messages in error_dict.items():\r\n+            if (field == NON_FIELD_ERRORS and opts.error_messages and\r\n+                    NON_FIELD_ERRORS in opts.error_messages):\r\n+                error_messages = opts.error_messages[NON_FIELD_ERRORS]\r\n+            elif field in self.fields:\r\n+                error_messages = self.fields[field].error_messages\r\n+            else:\r\n+                continue\r\n+\r\n+            for message in messages:\r\n+                if (isinstance(message, ValidationError) and\r\n+                        message.code in error_messages):\r\n+                    message.message = error_messages[message.code]\r\n+\r\n+        self.add_error(None, errors)\r\n+\r\n+    def _post_clean(self):\r\n+        opts = self._meta\r\n+\r\n+        exclude = self._get_validation_exclusions()\r\n+\r\n+        # Foreign Keys being used to represent inline relationships\r\n+        # are excluded from basic field value validation. This is for two\r\n+        # reasons: firstly, the value may not be supplied (#12507; the\r\n+        # case of providing new values to the admin); secondly the\r\n+        # object being referred to may not yet fully exist (#12749).\r\n+        # However, these fields *must* be included in uniqueness checks,\r\n+        # so this can't be part of _get_validation_exclusions().\r\n+        for name, field in self.fields.items():\r\n+            if isinstance(field, InlineForeignKeyField):\r\n+                exclude.append(name)\r\n+\r\n+        try:\r\n+            self.instance = construct_instance(self, self.instance, opts.fields, opts.exclude)\r\n+        except ValidationError as e:\r\n+            self._update_errors(e)\r\n+\r\n+        try:\r\n+            self.instance.full_clean(exclude=exclude, validate_unique=False)\r\n+        except ValidationError as e:\r\n+            self._update_errors(e)\r\n+\r\n+        # Validate uniqueness if needed.\r\n+        if self._validate_unique:\r\n+            self.validate_unique()\r\n+\r\n+    def validate_unique(self):\r\n+        \"\"\"\r\n+        Call the instance's validate_unique() method and update the form's\r\n+        validation errors if any were raised.\r\n+        \"\"\"\r\n+        exclude = self._get_validation_exclusions()\r\n+        try:\r\n+            self.instance.validate_unique(exclude=exclude)\r\n+        except ValidationError as e:\r\n+            self._update_errors(e)\r\n+\r\n+    def _save_m2m(self):\r\n+        \"\"\"\r\n+        Save the many-to-many fields and generic relations for this form.\r\n+        \"\"\"\r\n+        cleaned_data = self.cleaned_data\r\n+        exclude = self._meta.exclude\r\n+        fields = self._meta.fields\r\n+        opts = self.instance._meta\r\n+        # Note that for historical reasons we want to include also\r\n+        # private_fields here. (GenericRelation was previously a fake\r\n+        # m2m field).\r\n+        for f in chain(opts.many_to_many, opts.private_fields):\r\n+            if not hasattr(f, 'save_form_data'):\r\n+                continue\r\n+            if fields and f.name not in fields:\r\n+                continue\r\n+            if exclude and f.name in exclude:\r\n+                continue\r\n+            if f.name in cleaned_data:\r\n+                f.save_form_data(self.instance, cleaned_data[f.name])\r\n+\r\n+    def save(self, commit=True):\r\n+        \"\"\"\r\n+        Save this form's self.instance object if commit=True. Otherwise, add\r\n+        a save_m2m() method to the form which can be called after the instance\r\n+        is saved manually at a later time. Return the model instance.\r\n+        \"\"\"\r\n+        if self.errors:\r\n+            raise ValueError(\r\n+                \"The %s could not be %s because the data didn't validate.\" % (\r\n+                    self.instance._meta.object_name,\r\n+                    'created' if self.instance._state.adding else 'changed',\r\n+                )\r\n+            )\r\n+        if commit:\r\n+            # If committing, save the instance and the m2m data immediately.\r\n+            self.instance.save()\r\n+            self._save_m2m()\r\n+        else:\r\n+            # If not committing, add a method to the form to allow deferred\r\n+            # saving of m2m data.\r\n+            self.save_m2m = self._save_m2m\r\n+        return self.instance\r\n+\r\n+    save.alters_data = True\r\n+\r\n+\r\n+class ModelForm(BaseModelForm, metaclass=ModelFormMetaclass):\r\n+    pass\r\n+\r\n+\r\n+def modelform_factory(model, form=ModelForm, fields=None, exclude=None,\r\n+                      formfield_callback=None, widgets=None, localized_fields=None,\r\n+                      labels=None, help_texts=None, error_messages=None,\r\n+                      field_classes=None):\r\n+    \"\"\"\r\n+    Return a ModelForm containing form fields for the given model. You can\r\n+    optionally pass a `form` argument to use as a starting point for\r\n+    constructing the ModelForm.\r\n+\r\n+    ``fields`` is an optional list of field names. If provided, include only\r\n+    the named fields in the returned fields. If omitted or '__all__', use all\r\n+    fields.\r\n+\r\n+    ``exclude`` is an optional list of field names. If provided, exclude the\r\n+    named fields from the returned fields, even if they are listed in the\r\n+    ``fields`` argument.\r\n+\r\n+    ``widgets`` is a dictionary of model field names mapped to a widget.\r\n+\r\n+    ``localized_fields`` is a list of names of fields which should be localized.\r\n+\r\n+    ``formfield_callback`` is a callable that takes a model field and returns\r\n+    a form field.\r\n+\r\n+    ``labels`` is a dictionary of model field names mapped to a label.\r\n+\r\n+    ``help_texts`` is a dictionary of model field names mapped to a help text.\r\n+\r\n+    ``error_messages`` is a dictionary of model field names mapped to a\r\n+    dictionary of error messages.\r\n+\r\n+    ``field_classes`` is a dictionary of model field names mapped to a form\r\n+    field class.\r\n+    \"\"\"\r\n+    # Create the inner Meta class. FIXME: ideally, we should be able to\r\n+    # construct a ModelForm without creating and passing in a temporary\r\n+    # inner class.\r\n+\r\n+    # Build up a list of attributes that the Meta object will have.\r\n+    attrs = {'model': model}\r\n+    if fields is not None:\r\n+        attrs['fields'] = fields\r\n+    if exclude is not None:\r\n+        attrs['exclude'] = exclude\r\n+    if widgets is not None:\r\n+        attrs['widgets'] = widgets\r\n+    if localized_fields is not None:\r\n+        attrs['localized_fields'] = localized_fields\r\n+    if labels is not None:\r\n+        attrs['labels'] = labels\r\n+    if help_texts is not None:\r\n+        attrs['help_texts'] = help_texts\r\n+    if error_messages is not None:\r\n+        attrs['error_messages'] = error_messages\r\n+    if field_classes is not None:\r\n+        attrs['field_classes'] = field_classes\r\n+\r\n+    # If parent form class already has an inner Meta, the Meta we're\r\n+    # creating needs to inherit from the parent's inner meta.\r\n+    bases = (form.Meta,) if hasattr(form, 'Meta') else ()\r\n+    Meta = type('Meta', bases, attrs)\r\n+    if formfield_callback:\r\n+        Meta.formfield_callback = staticmethod(formfield_callback)\r\n+    # Give this new form class a reasonable name.\r\n+    class_name = model.__name__ + 'Form'\r\n+\r\n+    # Class attributes for the new form class.\r\n+    form_class_attrs = {\r\n+        'Meta': Meta,\r\n+        'formfield_callback': formfield_callback\r\n+    }\r\n+\r\n+    if (getattr(Meta, 'fields', None) is None and\r\n+            getattr(Meta, 'exclude', None) is None):\r\n+        raise ImproperlyConfigured(\r\n+            \"Calling modelform_factory without defining 'fields' or \"\r\n+            \"'exclude' explicitly is prohibited.\"\r\n+        )\r\n+\r\n+    # Instantiate type(form) in order to use the same metaclass as form.\r\n+    return type(form)(class_name, (form,), form_class_attrs)\r\n+\r\n+\r\n+# ModelFormSets ##############################################################\r\n+\r\n+class BaseModelFormSet(BaseFormSet):\r\n+    \"\"\"\r\n+    A ``FormSet`` for editing a queryset and/or adding new objects to it.\r\n+    \"\"\"\r\n+    model = None\r\n+\r\n+    # Set of fields that must be unique among forms of this set.\r\n+    unique_fields = set()\r\n+\r\n+    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\r\n+                 queryset=None, *, initial=None, **kwargs):\r\n+        self.queryset = queryset\r\n+        self.initial_extra = initial\r\n+        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\r\n+\r\n+    def initial_form_count(self):\r\n+        \"\"\"Return the number of forms that are required in this FormSet.\"\"\"\r\n+        if not self.is_bound:\r\n+            return len(self.get_queryset())\r\n+        return super().initial_form_count()\r\n+\r\n+    def _existing_object(self, pk):\r\n+        if not hasattr(self, '_object_dict'):\r\n+            self._object_dict = {o.pk: o for o in self.get_queryset()}\r\n+        return self._object_dict.get(pk)\r\n+\r\n+    def _get_to_python(self, field):\r\n+        \"\"\"\r\n+        If the field is a related field, fetch the concrete field's (that\r\n+        is, the ultimate pointed-to field's) to_python.\r\n+        \"\"\"\r\n+        while field.remote_field is not None:\r\n+            field = field.remote_field.get_related_field()\r\n+        return field.to_python\r\n+\r\n+    def _construct_form(self, i, **kwargs):\r\n+        pk_required = i < self.initial_form_count()\r\n+        if pk_required:\r\n+            if self.is_bound:\r\n+                pk_key = '%s-%s' % (self.add_prefix(i), self.model._meta.pk.name)\r\n+                try:\r\n+                    pk = self.data[pk_key]\r\n+                except KeyError:\r\n+                    # The primary key is missing. The user may have tampered\r\n+                    # with POST data.\r\n+                    pass\r\n+                else:\r\n+                    to_python = self._get_to_python(self.model._meta.pk)\r\n+                    try:\r\n+                        pk = to_python(pk)\r\n+                    except ValidationError:\r\n+                        # The primary key exists but is an invalid value. The\r\n+                        # user may have tampered with POST data.\r\n+                        pass\r\n+                    else:\r\n+                        kwargs['instance'] = self._existing_object(pk)\r\n+            else:\r\n+                kwargs['instance'] = self.get_queryset()[i]\r\n+        elif self.initial_extra:\r\n+            # Set initial values for extra forms\r\n+            try:\r\n+                kwargs['initial'] = self.initial_extra[i - self.initial_form_count()]\r\n+            except IndexError:\r\n+                pass\r\n+        form = super()._construct_form(i, **kwargs)\r\n+        if pk_required:\r\n+            form.fields[self.model._meta.pk.name].required = True\r\n+        return form\r\n+\r\n+    def get_queryset(self):\r\n+        if not hasattr(self, '_queryset'):\r\n+            if self.queryset is not None:\r\n+                qs = self.queryset\r\n+            else:\r\n+                qs = self.model._default_manager.get_queryset()\r\n+\r\n+            # If the queryset isn't already ordered we need to add an\r\n+            # artificial ordering here to make sure that all formsets\r\n+            # constructed from this queryset have the same form order.\r\n+            if not qs.ordered:\r\n+                qs = qs.order_by(self.model._meta.pk.name)\r\n+\r\n+            # Removed queryset limiting here. As per discussion re: #13023\r\n+            # on django-dev, max_num should not prevent existing\r\n+            # related objects/inlines from being displayed.\r\n+            self._queryset = qs\r\n+        return self._queryset\r\n+\r\n+    def save_new(self, form, commit=True):\r\n+        \"\"\"Save and return a new model instance for the given form.\"\"\"\r\n+        return form.save(commit=commit)\r\n+\r\n+    def save_existing(self, form, instance, commit=True):\r\n+        \"\"\"Save and return an existing model instance for the given form.\"\"\"\r\n+        return form.save(commit=commit)\r\n+\r\n+    def delete_existing(self, obj, commit=True):\r\n+        \"\"\"Deletes an existing model instance.\"\"\"\r\n+        if commit:\r\n+            obj.delete()\r\n+\r\n+    def save(self, commit=True):\r\n+        \"\"\"\r\n+        Save model instances for every form, adding and changing instances\r\n+        as necessary, and return the list of instances.\r\n+        \"\"\"\r\n+        if not commit:\r\n+            self.saved_forms = []\r\n+\r\n+            def save_m2m():\r\n+                for form in self.saved_forms:\r\n+                    form.save_m2m()\r\n+            self.save_m2m = save_m2m\r\n+        return self.save_existing_objects(commit) + self.save_new_objects(commit)\r\n+\r\n+    save.alters_data = True\r\n+\r\n+    def clean(self):\r\n+        self.validate_unique()\r\n+\r\n+    def validate_unique(self):\r\n+        # Collect unique_checks and date_checks to run from all the forms.\r\n+        all_unique_checks = set()\r\n+        all_date_checks = set()\r\n+        forms_to_delete = self.deleted_forms\r\n+        valid_forms = [form for form in self.forms if form.is_valid() and form not in forms_to_delete]\r\n+        for form in valid_forms:\r\n+            exclude = form._get_validation_exclusions()\r\n+            unique_checks, date_checks = form.instance._get_unique_checks(exclude=exclude)\r\n+            all_unique_checks.update(unique_checks)\r\n+            all_date_checks.update(date_checks)\r\n+\r\n+        errors = []\r\n+        # Do each of the unique checks (unique and unique_together)\r\n+        for uclass, unique_check in all_unique_checks:\r\n+            seen_data = set()\r\n+            for form in valid_forms:\r\n+                # Get the data for the set of fields that must be unique among the forms.\r\n+                row_data = (\r\n+                    field if field in self.unique_fields else form.cleaned_data[field]\r\n+                    for field in unique_check if field in form.cleaned_data\r\n+                )\r\n+                # Reduce Model instances to their primary key values\r\n+                row_data = tuple(\r\n+                    d._get_pk_val() if hasattr(d, '_get_pk_val')\r\n+                    # Prevent \"unhashable type: list\" errors later on.\r\n+                    else tuple(d) if isinstance(d, list)\r\n+                    else d for d in row_data\r\n+                )\r\n+                if row_data and None not in row_data:\r\n+                    # if we've already seen it then we have a uniqueness failure\r\n+                    if row_data in seen_data:\r\n+                        # poke error messages into the right places and mark\r\n+                        # the form as invalid\r\n+                        errors.append(self.get_unique_error_message(unique_check))\r\n+                        form._errors[NON_FIELD_ERRORS] = self.error_class(\r\n+                            [self.get_form_error()],\r\n+                            renderer=self.renderer,\r\n+                        )\r\n+                        # remove the data from the cleaned_data dict since it was invalid\r\n+                        for field in unique_check:\r\n+                            if field in form.cleaned_data:\r\n+                                del form.cleaned_data[field]\r\n+                    # mark the data as seen\r\n+                    seen_data.add(row_data)\r\n+        # iterate over each of the date checks now\r\n+        for date_check in all_date_checks:\r\n+            seen_data = set()\r\n+            uclass, lookup, field, unique_for = date_check\r\n+            for form in valid_forms:\r\n+                # see if we have data for both fields\r\n+                if (form.cleaned_data and form.cleaned_data[field] is not None and\r\n+                        form.cleaned_data[unique_for] is not None):\r\n+                    # if it's a date lookup we need to get the data for all the fields\r\n+                    if lookup == 'date':\r\n+                        date = form.cleaned_data[unique_for]\r\n+                        date_data = (date.year, date.month, date.day)\r\n+                    # otherwise it's just the attribute on the date/datetime\r\n+                    # object\r\n+                    else:\r\n+                        date_data = (getattr(form.cleaned_data[unique_for], lookup),)\r\n+                    data = (form.cleaned_data[field],) + date_data\r\n+                    # if we've already seen it then we have a uniqueness failure\r\n+                    if data in seen_data:\r\n+                        # poke error messages into the right places and mark\r\n+                        # the form as invalid\r\n+                        errors.append(self.get_date_error_message(date_check))\r\n+                        form._errors[NON_FIELD_ERRORS] = self.error_class(\r\n+                            [self.get_form_error()],\r\n+                            renderer=self.renderer,\r\n+                        )\r\n+                        # remove the data from the cleaned_data dict since it was invalid\r\n+                        del form.cleaned_data[field]\r\n+                    # mark the data as seen\r\n+                    seen_data.add(data)\r\n+\r\n+        if errors:\r\n+            raise ValidationError(errors)\r\n+\r\n+    def get_unique_error_message(self, unique_check):\r\n+        if len(unique_check) == 1:\r\n+            return gettext(\"Please correct the duplicate data for %(field)s.\") % {\r\n+                \"field\": unique_check[0],\r\n+            }\r\n+        else:\r\n+            return gettext(\"Please correct the duplicate data for %(field)s, which must be unique.\") % {\r\n+                \"field\": get_text_list(unique_check, _(\"and\")),\r\n+            }\r\n+\r\n+    def get_date_error_message(self, date_check):\r\n+        return gettext(\r\n+            \"Please correct the duplicate data for %(field_name)s \"\r\n+            \"which must be unique for the %(lookup)s in %(date_field)s.\"\r\n+        ) % {\r\n+            'field_name': date_check[2],\r\n+            'date_field': date_check[3],\r\n+            'lookup': str(date_check[1]),\r\n+        }\r\n+\r\n+    def get_form_error(self):\r\n+        return gettext(\"Please correct the duplicate values below.\")\r\n+\r\n+    def save_existing_objects(self, commit=True):\r\n+        self.changed_objects = []\r\n+        self.deleted_objects = []\r\n+        if not self.initial_forms:\r\n+            return []\r\n+\r\n+        saved_instances = []\r\n+        forms_to_delete = self.deleted_forms\r\n+        for form in self.initial_forms:\r\n+            obj = form.instance\r\n+            # If the pk is None, it means either:\r\n+            # 1. The object is an unexpected empty model, created by invalid\r\n+            #    POST data such as an object outside the formset's queryset.\r\n+            # 2. The object was already deleted from the database.\r\n+            if obj.pk is None:\r\n+                continue\r\n+            if form in forms_to_delete:\r\n+                self.deleted_objects.append(obj)\r\n+                self.delete_existing(obj, commit=commit)\r\n+            elif form.has_changed():\r\n+                self.changed_objects.append((obj, form.changed_data))\r\n+                saved_instances.append(self.save_existing(form, obj, commit=commit))\r\n+                if not commit:\r\n+                    self.saved_forms.append(form)\r\n+        return saved_instances\r\n+\r\n+    def save_new_objects(self, commit=True):\r\n+        self.new_objects = []\r\n+        for form in self.extra_forms:\r\n+            if not form.has_changed():\r\n+                continue\r\n+            # If someone has marked an add form for deletion, don't save the\r\n+            # object.\r\n+            if self.can_delete and self._should_delete_form(form):\r\n+                continue\r\n+            self.new_objects.append(self.save_new(form, commit=commit))\r\n+            if not commit:\r\n+                self.saved_forms.append(form)\r\n+        return self.new_objects\r\n+\r\n+    def add_fields(self, form, index):\r\n+        \"\"\"Add a hidden field for the object's primary key.\"\"\"\r\n+        from django.db.models import AutoField, ForeignKey, OneToOneField\r\n+        self._pk_field = pk = self.model._meta.pk\r\n+        # If a pk isn't editable, then it won't be on the form, so we need to\r\n+        # add it here so we can tell which object is which when we get the\r\n+        # data back. Generally, pk.editable should be false, but for some\r\n+        # reason, auto_created pk fields and AutoField's editable attribute is\r\n+        # True, so check for that as well.\r\n+\r\n+        def pk_is_not_editable(pk):\r\n+            return (\r\n+                (not pk.editable) or (pk.auto_created or isinstance(pk, AutoField)) or (\r\n+                    pk.remote_field and pk.remote_field.parent_link and\r\n+                    pk_is_not_editable(pk.remote_field.model._meta.pk)\r\n+                )\r\n+            )\r\n+        if pk_is_not_editable(pk) or pk.name not in form.fields:\r\n+            if form.is_bound:\r\n+                # If we're adding the related instance, ignore its primary key\r\n+                # as it could be an auto-generated default which isn't actually\r\n+                # in the database.\r\n+                pk_value = None if form.instance._state.adding else form.instance.pk\r\n+            else:\r\n+                try:\r\n+                    if index is not None:\r\n+                        pk_value = self.get_queryset()[index].pk\r\n+                    else:\r\n+                        pk_value = None\r\n+                except IndexError:\r\n+                    pk_value = None\r\n+            if isinstance(pk, (ForeignKey, OneToOneField)):\r\n+                qs = pk.remote_field.model._default_manager.get_queryset()\r\n+            else:\r\n+                qs = self.model._default_manager.get_queryset()\r\n+            qs = qs.using(form.instance._state.db)\r\n+            if form._meta.widgets:\r\n+                widget = form._meta.widgets.get(self._pk_field.name, HiddenInput)\r\n+            else:\r\n+                widget = HiddenInput\r\n+            form.fields[self._pk_field.name] = ModelChoiceField(qs, initial=pk_value, required=False, widget=widget)\r\n+        super().add_fields(form, index)\r\n+\r\n+\r\n+def modelformset_factory(model, form=ModelForm, formfield_callback=None,\r\n+                         formset=BaseModelFormSet, extra=1, can_delete=False,\r\n+                         can_order=False, max_num=None, fields=None, exclude=None,\r\n+                         widgets=None, validate_max=False, localized_fields=None,\r\n+                         labels=None, help_texts=None, error_messages=None,\r\n+                         min_num=None, validate_min=False, field_classes=None,\r\n+                         absolute_max=None, can_delete_extra=True, renderer=None):\r\n+    \"\"\"Return a FormSet class for the given Django model class.\"\"\"\r\n+    meta = getattr(form, 'Meta', None)\r\n+    if (getattr(meta, 'fields', fields) is None and\r\n+            getattr(meta, 'exclude', exclude) is None):\r\n+        raise ImproperlyConfigured(\r\n+            \"Calling modelformset_factory without defining 'fields' or \"\r\n+            \"'exclude' explicitly is prohibited.\"\r\n+        )\r\n+\r\n+    form = modelform_factory(model, form=form, fields=fields, exclude=exclude,\r\n+                             formfield_callback=formfield_callback,\r\n+                             widgets=widgets, localized_fields=localized_fields,\r\n+                             labels=labels, help_texts=help_texts,\r\n+                             error_messages=error_messages, field_classes=field_classes)\r\n+    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\r\n+                              can_order=can_order, can_delete=can_delete,\r\n+                              validate_min=validate_min, validate_max=validate_max,\r\n+                              absolute_max=absolute_max, can_delete_extra=can_delete_extra,\r\n+                              renderer=renderer)\r\n+    FormSet.model = model\r\n+    return FormSet\r\n+\r\n+\r\n+# InlineFormSets #############################################################\r\n+\r\n+class BaseInlineFormSet(BaseModelFormSet):\r\n+    \"\"\"A formset for child objects related to a parent.\"\"\"\r\n+    def __init__(self, data=None, files=None, instance=None,\r\n+                 save_as_new=False, prefix=None, queryset=None, **kwargs):\r\n+        if instance is None:\r\n+            self.instance = self.fk.remote_field.model()\r\n+        else:\r\n+            self.instance = instance\r\n+        self.save_as_new = save_as_new\r\n+        if queryset is None:\r\n+            queryset = self.model._default_manager\r\n+        if self.instance.pk is not None:\r\n+            qs = queryset.filter(**{self.fk.name: self.instance})\r\n+        else:\r\n+            qs = queryset.none()\r\n+        self.unique_fields = {self.fk.name}\r\n+        super().__init__(data, files, prefix=prefix, queryset=qs, **kwargs)\r\n+\r\n+        # Add the generated field to form._meta.fields if it's defined to make\r\n+        # sure validation isn't skipped on that field.\r\n+        if self.form._meta.fields and self.fk.name not in self.form._meta.fields:\r\n+            if isinstance(self.form._meta.fields, tuple):\r\n+                self.form._meta.fields = list(self.form._meta.fields)\r\n+            self.form._meta.fields.append(self.fk.name)\r\n+\r\n+    def initial_form_count(self):\r\n+        if self.save_as_new:\r\n+            return 0\r\n+        return super().initial_form_count()\r\n+\r\n+    def _construct_form(self, i, **kwargs):\r\n+        form = super()._construct_form(i, **kwargs)\r\n+        if self.save_as_new:\r\n+            mutable = getattr(form.data, '_mutable', None)\r\n+            # Allow modifying an immutable QueryDict.\r\n+            if mutable is not None:\r\n+                form.data._mutable = True\r\n+            # Remove the primary key from the form's data, we are only\r\n+            # creating new instances\r\n+            form.data[form.add_prefix(self._pk_field.name)] = None\r\n+            # Remove the foreign key from the form's data\r\n+            form.data[form.add_prefix(self.fk.name)] = None\r\n+            if mutable is not None:\r\n+                form.data._mutable = mutable\r\n+\r\n+        # Set the fk value here so that the form can do its validation.\r\n+        fk_value = self.instance.pk\r\n+        if self.fk.remote_field.field_name != self.fk.remote_field.model._meta.pk.name:\r\n+            fk_value = getattr(self.instance, self.fk.remote_field.field_name)\r\n+            fk_value = getattr(fk_value, 'pk', fk_value)\r\n+        setattr(form.instance, self.fk.get_attname(), fk_value)\r\n+        return form\r\n+\r\n+    @classmethod\r\n+    def get_default_prefix(cls):\r\n+        return cls.fk.remote_field.get_accessor_name(model=cls.model).replace('+', '')\r\n+\r\n+    def save_new(self, form, commit=True):\r\n+        # Ensure the latest copy of the related instance is present on each\r\n+        # form (it may have been saved after the formset was originally\r\n+        # instantiated).\r\n+        setattr(form.instance, self.fk.name, self.instance)\r\n+        return super().save_new(form, commit=commit)\r\n+\r\n+    def add_fields(self, form, index):\r\n+        super().add_fields(form, index)\r\n+        if self._pk_field == self.fk:\r\n+            name = self._pk_field.name\r\n+            kwargs = {'pk_field': True}\r\n+        else:\r\n+            # The foreign key field might not be on the form, so we poke at the\r\n+            # Model field to get the label, since we need that for error messages.\r\n+            name = self.fk.name\r\n+            kwargs = {\r\n+                'label': getattr(form.fields.get(name), 'label', capfirst(self.fk.verbose_name))\r\n+            }\r\n+\r\n+        # The InlineForeignKeyField assumes that the foreign key relation is\r\n+        # based on the parent model's pk. If this isn't the case, set to_field\r\n+        # to correctly resolve the initial form value.\r\n+        if self.fk.remote_field.field_name != self.fk.remote_field.model._meta.pk.name:\r\n+            kwargs['to_field'] = self.fk.remote_field.field_name\r\n+\r\n+        # If we're adding a new object, ignore a parent's auto-generated key\r\n+        # as it will be regenerated on the save request.\r\n+        if self.instance._state.adding:\r\n+            if kwargs.get('to_field') is not None:\r\n+                to_field = self.instance._meta.get_field(kwargs['to_field'])\r\n+            else:\r\n+                to_field = self.instance._meta.pk\r\n+            if to_field.has_default():\r\n+                setattr(self.instance, to_field.attname, None)\r\n+\r\n+        form.fields[name] = InlineForeignKeyField(self.instance, **kwargs)\r\n+\r\n+    def get_unique_error_message(self, unique_check):\r\n+        unique_check = [field for field in unique_check if field != self.fk.name]\r\n+        return super().get_unique_error_message(unique_check)\r\n+\r\n+\r\n+def _get_foreign_key(parent_model, model, fk_name=None, can_fail=False):\r\n+    \"\"\"\r\n+    Find and return the ForeignKey from model to parent if there is one\r\n+    (return None if can_fail is True and no such field exists). If fk_name is\r\n+    provided, assume it is the name of the ForeignKey field. Unless can_fail is\r\n+    True, raise an exception if there isn't a ForeignKey from model to\r\n+    parent_model.\r\n+    \"\"\"\r\n+    # avoid circular import\r\n+    from django.db.models import ForeignKey\r\n+    opts = model._meta\r\n+    if fk_name:\r\n+        fks_to_parent = [f for f in opts.fields if f.name == fk_name]\r\n+        if len(fks_to_parent) == 1:\r\n+            fk = fks_to_parent[0]\r\n+            parent_list = parent_model._meta.get_parent_list()\r\n+            if not isinstance(fk, ForeignKey) or (\r\n+                # ForeignKey to proxy models.\r\n+                fk.remote_field.model._meta.proxy and\r\n+                fk.remote_field.model._meta.proxy_for_model not in parent_list\r\n+            ) or (\r\n+                # ForeignKey to concrete models.\r\n+                not fk.remote_field.model._meta.proxy and\r\n+                fk.remote_field.model != parent_model and\r\n+                fk.remote_field.model not in parent_list\r\n+            ):\r\n+                raise ValueError(\r\n+                    \"fk_name '%s' is not a ForeignKey to '%s'.\" % (fk_name, parent_model._meta.label)\r\n+                )\r\n+        elif not fks_to_parent:\r\n+            raise ValueError(\r\n+                \"'%s' has no field named '%s'.\" % (model._meta.label, fk_name)\r\n+            )\r\n+    else:\r\n+        # Try to discover what the ForeignKey from model to parent_model is\r\n+        parent_list = parent_model._meta.get_parent_list()\r\n+        fks_to_parent = [\r\n+            f for f in opts.fields\r\n+            if isinstance(f, ForeignKey) and (\r\n+                f.remote_field.model == parent_model or\r\n+                f.remote_field.model in parent_list or (\r\n+                    f.remote_field.model._meta.proxy and\r\n+                    f.remote_field.model._meta.proxy_for_model in parent_list\r\n+                )\r\n+            )\r\n+        ]\r\n+        if len(fks_to_parent) == 1:\r\n+            fk = fks_to_parent[0]\r\n+        elif not fks_to_parent:\r\n+            if can_fail:\r\n+                return\r\n+            raise ValueError(\r\n+                \"'%s' has no ForeignKey to '%s'.\" % (\r\n+                    model._meta.label,\r\n+                    parent_model._meta.label,\r\n+                )\r\n+            )\r\n+        else:\r\n+            raise ValueError(\r\n+                \"'%s' has more than one ForeignKey to '%s'. You must specify \"\r\n+                \"a 'fk_name' attribute.\" % (\r\n+                    model._meta.label,\r\n+                    parent_model._meta.label,\r\n+                )\r\n+            )\r\n+    return fk\r\n+\r\n+\r\n+def inlineformset_factory(parent_model, model, form=ModelForm,\r\n+                          formset=BaseInlineFormSet, fk_name=None,\r\n+                          fields=None, exclude=None, extra=3, can_order=False,\r\n+                          can_delete=True, max_num=None, formfield_callback=None,\r\n+                          widgets=None, validate_max=False, localized_fields=None,\r\n+                          labels=None, help_texts=None, error_messages=None,\r\n+                          min_num=None, validate_min=False, field_classes=None,\r\n+                          absolute_max=None, can_delete_extra=True, renderer=None):\r\n+    \"\"\"\r\n+    Return an ``InlineFormSet`` for the given kwargs.\r\n+\r\n+    ``fk_name`` must be provided if ``model`` has more than one ``ForeignKey``\r\n+    to ``parent_model``.\r\n+    \"\"\"\r\n+    fk = _get_foreign_key(parent_model, model, fk_name=fk_name)\r\n+    # enforce a max_num=1 when the foreign key to the parent model is unique.\r\n+    if fk.unique:\r\n+        max_num = 1\r\n+    kwargs = {\r\n+        'form': form,\r\n+        'formfield_callback': formfield_callback,\r\n+        'formset': formset,\r\n+        'extra': extra,\r\n+        'can_delete': can_delete,\r\n+        'can_order': can_order,\r\n+        'fields': fields,\r\n+        'exclude': exclude,\r\n+        'min_num': min_num,\r\n+        'max_num': max_num,\r\n+        'widgets': widgets,\r\n+        'validate_min': validate_min,\r\n+        'validate_max': validate_max,\r\n+        'localized_fields': localized_fields,\r\n+        'labels': labels,\r\n+        'help_texts': help_texts,\r\n+        'error_messages': error_messages,\r\n+        'field_classes': field_classes,\r\n+        'absolute_max': absolute_max,\r\n+        'can_delete_extra': can_delete_extra,\r\n+        'renderer': renderer,\r\n+    }\r\n+    FormSet = modelformset_factory(model, **kwargs)\r\n+    FormSet.fk = fk\r\n+    return FormSet\r\n+\r\n+\r\n+# Fields #####################################################################\r\n+\r\n+class InlineForeignKeyField(Field):\r\n+    \"\"\"\r\n+    A basic integer field that deals with validating the given value to a\r\n+    given parent instance in an inline.\r\n+    \"\"\"\r\n+    widget = HiddenInput\r\n+    default_error_messages = {\r\n+        'invalid_choice': _('The inline value did not match the parent instance.'),\r\n+    }\r\n+\r\n+    def __init__(self, parent_instance, *args, pk_field=False, to_field=None, **kwargs):\r\n+        self.parent_instance = parent_instance\r\n+        self.pk_field = pk_field\r\n+        self.to_field = to_field\r\n+        if self.parent_instance is not None:\r\n+            if self.to_field:\r\n+                kwargs[\"initial\"] = getattr(self.parent_instance, self.to_field)\r\n+            else:\r\n+                kwargs[\"initial\"] = self.parent_instance.pk\r\n+        kwargs[\"required\"] = False\r\n+        super().__init__(*args, **kwargs)\r\n+\r\n+    def clean(self, value):\r\n+        if value in self.empty_values:\r\n+            if self.pk_field:\r\n+                return None\r\n+            # if there is no value act as we did before.\r\n+            return self.parent_instance\r\n+        # ensure the we compare the values as equal types.\r\n+        if self.to_field:\r\n+            orig = getattr(self.parent_instance, self.to_field)\r\n+        else:\r\n+            orig = self.parent_instance.pk\r\n+        if str(value) != str(orig):\r\n+            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\r\n+        return self.parent_instance\r\n+\r\n+    def has_changed(self, initial, data):\r\n+        return False\r\n+\r\n+\r\n+class ModelChoiceIteratorValue:\r\n+    def __init__(self, value, instance):\r\n+        self.value = value\r\n+        self.instance = instance\r\n+\r\n+    def __str__(self):\r\n+        return str(self.value)\r\n+\r\n+    def __eq__(self, other):\r\n+        if isinstance(other, ModelChoiceIteratorValue):\r\n+            other = other.value\r\n+        return self.value == other\r\n+\r\n+\r\n+class ModelChoiceIterator:\r\n+    def __init__(self, field):\r\n+        self.field = field\r\n+        self.queryset = field.queryset\r\n+\r\n+    def __iter__(self):\r\n+        if self.field.empty_label is not None:\r\n+            yield (\"\", self.field.empty_label)\r\n+        queryset = self.queryset\r\n+        # Can't use iterator() when queryset uses prefetch_related()\r\n+        if not queryset._prefetch_related_lookups:\r\n+            queryset = queryset.iterator()\r\n+        for obj in queryset:\r\n+            yield self.choice(obj)\r\n+\r\n+    def __len__(self):\r\n+        # count() adds a query but uses less memory since the QuerySet results\r\n+        # won't be cached. In most cases, the choices will only be iterated on,\r\n+        # and __len__() won't be called.\r\n+        return self.queryset.count() + (1 if self.field.empty_label is not None else 0)\r\n+\r\n+    def __bool__(self):\r\n+        return self.field.empty_label is not None or self.queryset.exists()\r\n+\r\n+    def choice(self, obj):\r\n+        return (\r\n+            ModelChoiceIteratorValue(self.field.prepare_value(obj), obj),\r\n+            self.field.label_from_instance(obj),\r\n+        )\r\n+\r\n+\r\n+class ModelChoiceField(ChoiceField):\r\n+    \"\"\"A ChoiceField whose choices are a model QuerySet.\"\"\"\r\n+    # This class is a subclass of ChoiceField for purity, but it doesn't\r\n+    # actually use any of ChoiceField's implementation.\r\n+    default_error_messages = {\r\n+        'invalid_choice': _('Select a valid choice. That choice is not one of'\r\n+                            ' the available choices.'),\r\n+    }\r\n+    iterator = ModelChoiceIterator\r\n+\r\n+    def __init__(self, queryset, *, empty_label=\"---------\",\r\n+                 required=True, widget=None, label=None, initial=None,\r\n+                 help_text='', to_field_name=None, limit_choices_to=None,\r\n+                 blank=False, **kwargs):\r\n+        # Call Field instead of ChoiceField __init__() because we don't need\r\n+        # ChoiceField.__init__().\r\n+        Field.__init__(\r\n+            self, required=required, widget=widget, label=label,\r\n+            initial=initial, help_text=help_text, **kwargs\r\n+        )\r\n+        if (\r\n+            (required and initial is not None) or\r\n+            (isinstance(self.widget, RadioSelect) and not blank)\r\n+        ):\r\n+            self.empty_label = None\r\n+        else:\r\n+            self.empty_label = empty_label\r\n+        self.queryset = queryset\r\n+        self.limit_choices_to = limit_choices_to   # limit the queryset later.\r\n+        self.to_field_name = to_field_name\r\n+\r\n+    def get_limit_choices_to(self):\r\n+        \"\"\"\r\n+        Return ``limit_choices_to`` for this form field.\r\n+\r\n+        If it is a callable, invoke it and return the result.\r\n+        \"\"\"\r\n+        if callable(self.limit_choices_to):\r\n+            return self.limit_choices_to()\r\n+        return self.limit_choices_to\r\n+\r\n+    def __deepcopy__(self, memo):\r\n+        result = super(ChoiceField, self).__deepcopy__(memo)\r\n+        # Need to force a new ModelChoiceIterator to be created, bug #11183\r\n+        if self.queryset is not None:\r\n+            result.queryset = self.queryset.all()\r\n+        return result\r\n+\r\n+    def _get_queryset(self):\r\n+        return self._queryset\r\n+\r\n+    def _set_queryset(self, queryset):\r\n+        self._queryset = None if queryset is None else queryset.all()\r\n+        self.widget.choices = self.choices\r\n+\r\n+    queryset = property(_get_queryset, _set_queryset)\r\n+\r\n+    # this method will be used to create object labels by the QuerySetIterator.\r\n+    # Override it to customize the label.\r\n+    def label_from_instance(self, obj):\r\n+        \"\"\"\r\n+        Convert objects into strings and generate the labels for the choices\r\n+        presented by this object. Subclasses can override this method to\r\n+        customize the display of the choices.\r\n+        \"\"\"\r\n+        return str(obj)\r\n+\r\n+    def _get_choices(self):\r\n+        # If self._choices is set, then somebody must have manually set\r\n+        # the property self.choices. In this case, just return self._choices.\r\n+        if hasattr(self, '_choices'):\r\n+            return self._choices\r\n+\r\n+        # Otherwise, execute the QuerySet in self.queryset to determine the\r\n+        # choices dynamically. Return a fresh ModelChoiceIterator that has not been\r\n+        # consumed. Note that we're instantiating a new ModelChoiceIterator *each*\r\n+        # time _get_choices() is called (and, thus, each time self.choices is\r\n+        # accessed) so that we can ensure the QuerySet has not been consumed. This\r\n+        # construct might look complicated but it allows for lazy evaluation of\r\n+        # the queryset.\r\n+        return self.iterator(self)\r\n+\r\n+    choices = property(_get_choices, ChoiceField._set_choices)\r\n+\r\n+    def prepare_value(self, value):\r\n+        if hasattr(value, '_meta'):\r\n+            if self.to_field_name:\r\n+                return value.serializable_value(self.to_field_name)\r\n+            else:\r\n+                return value.pk\r\n+        return super().prepare_value(value)\r\n+\r\n+    def to_python(self, value):\r\n+        if value in self.empty_values:\r\n+            return None\r\n+        try:\r\n+            key = self.to_field_name or 'pk'\r\n+            if isinstance(value, self.queryset.model):\r\n+                value = getattr(value, key)\r\n+            value = self.queryset.get(**{key: value})\r\n+        except (ValueError, TypeError, self.queryset.model.DoesNotExist):\r\n+            raise ValidationError(\r\n+                self.error_messages['invalid_choice'],\r\n+                code='invalid_choice',\r\n+                params={'value': value},\r\n+            )\r\n+        return value\r\n+\r\n+    def validate(self, value):\r\n+        return Field.validate(self, value)\r\n+\r\n+    def has_changed(self, initial, data):\r\n+        if self.disabled:\r\n+            return False\r\n+        initial_value = initial if initial is not None else ''\r\n+        data_value = data if data is not None else ''\r\n+        return str(self.prepare_value(initial_value)) != str(data_value)\r\n+\r\n+\r\n+class ModelMultipleChoiceField(ModelChoiceField):\r\n+    \"\"\"A MultipleChoiceField whose choices are a model QuerySet.\"\"\"\r\n+    widget = SelectMultiple\r\n+    hidden_widget = MultipleHiddenInput\r\n+    default_error_messages = {\r\n+        'invalid_list': _('Enter a list of values.'),\r\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of the'\r\n+                            ' available choices.'),\r\n+        'invalid_pk_value': _('\u201c%(pk)s\u201d is not a valid value.')\r\n+    }\r\n+\r\n+    def __init__(self, queryset, **kwargs):\r\n+        super().__init__(queryset, empty_label=None, **kwargs)\r\n+\r\n+    def to_python(self, value):\r\n+        if not value:\r\n+            return []\r\n+        return list(self._check_values(value))\r\n+\r\n+    def clean(self, value):\r\n+        value = self.prepare_value(value)\r\n+        if self.required and not value:\r\n+            raise ValidationError(self.error_messages['required'], code='required')\r\n+        elif not self.required and not value:\r\n+            return self.queryset.none()\r\n+        if not isinstance(value, (list, tuple)):\r\n+            raise ValidationError(\r\n+                self.error_messages['invalid_list'],\r\n+                code='invalid_list',\r\n+            )\r\n+        qs = self._check_values(value)\r\n+        # Since this overrides the inherited ModelChoiceField.clean\r\n+        # we run custom validators here\r\n+        self.run_validators(value)\r\n+        return qs\r\n+\r\n+    def _check_values(self, value):\r\n+        \"\"\"\r\n+        Given a list of possible PK values, return a QuerySet of the\r\n+        corresponding objects. Raise a ValidationError if a given value is\r\n+        invalid (not a valid PK, not in the queryset, etc.)\r\n+        \"\"\"\r\n+        key = self.to_field_name or 'pk'\r\n+        # deduplicate given values to avoid creating many querysets or\r\n+        # requiring the database backend deduplicate efficiently.\r\n+        try:\r\n+            value = frozenset(value)\r\n+        except TypeError:\r\n+            # list of lists isn't hashable, for example\r\n+            raise ValidationError(\r\n+                self.error_messages['invalid_list'],\r\n+                code='invalid_list',\r\n+            )\r\n+        for pk in value:\r\n+            try:\r\n+                self.queryset.filter(**{key: pk})\r\n+            except (ValueError, TypeError):\r\n+                raise ValidationError(\r\n+                    self.error_messages['invalid_pk_value'],\r\n+                    code='invalid_pk_value',\r\n+                    params={'pk': pk},\r\n+                )\r\n+        qs = self.queryset.filter(**{'%s__in' % key: value})\r\n+        pks = {str(getattr(o, key)) for o in qs}\r\n+        for val in value:\r\n+            if str(val) not in pks:\r\n+                raise ValidationError(\r\n+                    self.error_messages['invalid_choice'],\r\n+                    code='invalid_choice',\r\n+                    params={'value': val},\r\n+                )\r\n+        return qs\r\n+\r\n+    def prepare_value(self, value):\r\n+        if (hasattr(value, '__iter__') and\r\n+                not isinstance(value, str) and\r\n+                not hasattr(value, '_meta')):\r\n+            prepare_value = super().prepare_value\r\n+            return [prepare_value(v) for v in value]\r\n+        return super().prepare_value(value)\r\n+\r\n+    def has_changed(self, initial, data):\r\n+        if self.disabled:\r\n+            return False\r\n+        if initial is None:\r\n+            initial = []\r\n+        if data is None:\r\n+            data = []\r\n+        if len(initial) != len(data):\r\n+            return True\r\n+        initial_set = {str(value) for value in self.prepare_value(initial)}\r\n+        data_set = {str(value) for value in data}\r\n+        return data_set != initial_set\r\n+\r\n+\r\n+def modelform_defines_fields(form_class):\r\n+    return hasattr(form_class, '_meta') and (\r\n+        form_class._meta.fields is not None or\r\n+        form_class._meta.exclude is not None\r\n+    )\r\ndiff --git a/django/forms/models.py b/django/forms/models.py\r\nindex 5dcf923c12..bc7e6959e7 100644\r\n--- a/django/forms/models.py\r\n+++ b/django/forms/models.py\r\n@@ -1171,6 +1171,9 @@ class ModelChoiceIteratorValue:\r\n             other = other.value\r\n         return self.value == other\r\n \r\n+    def __hash__(self):\r\n+        return hash(self.value)\r\n+\r\n \r\n class ModelChoiceIterator:\r\n     def __init__(self, field):",
        "model_stats": {
            "accumulated_cost": 0.43771499999999997,
            "costs": [
                0.015705,
                0.017823,
                0.021723,
                0.022149,
                0.028398,
                0.030036,
                0.030531,
                0.030687,
                0.030888,
                0.031965,
                0.040541999999999995,
                0.040091999999999996,
                0.042276,
                0.054900000000000004
            ]
        }
    }
}