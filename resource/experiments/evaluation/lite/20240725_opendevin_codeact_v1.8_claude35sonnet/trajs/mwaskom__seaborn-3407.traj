{
    "instance_id": "mwaskom__seaborn-3407",
    "traj": [
        [
            {
                "id": 0,
                "timestamp": "2024-07-18T21:06:47.739569",
                "source": "user",
                "message": "Please fix the following issue for the repository in /workspace/mwaskom__seaborn__0.13.\nEnvironment has been set up for you to start working. You may assume all necessary tools are installed.\n\n# Problem Statement\npairplot raises KeyError with MultiIndex DataFrame\nWhen trying to pairplot a MultiIndex DataFrame, `pairplot` raises a `KeyError`:\r\n\r\nMRE:\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nimport seaborn as sns\r\n\r\n\r\ndata = {\r\n    (\"A\", \"1\"): np.random.rand(100),\r\n    (\"A\", \"2\"): np.random.rand(100),\r\n    (\"B\", \"1\"): np.random.rand(100),\r\n    (\"B\", \"2\"): np.random.rand(100),\r\n}\r\ndf = pd.DataFrame(data)\r\nsns.pairplot(df)\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in pairplot(data, hue, hue_order, palette, vars, x_vars, y_vars, kind, diag_kind, markers, height, aspect, corner, dropna, plot_kws, diag_kws, grid_kws, size)\r\n   2142     diag_kws.setdefault(\"legend\", False)\r\n   2143     if diag_kind == \"hist\":\r\n-> 2144         grid.map_diag(histplot, **diag_kws)\r\n   2145     elif diag_kind == \"kde\":\r\n   2146         diag_kws.setdefault(\"fill\", True)\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in map_diag(self, func, **kwargs)\r\n   1488                 plt.sca(ax)\r\n   1489 \r\n-> 1490             vector = self.data[var]\r\n   1491             if self._hue_var is not None:\r\n   1492                 hue = self.data[self._hue_var]\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/frame.py) in __getitem__(self, key)\r\n   3765             if is_iterator(key):\r\n   3766                 key = list(key)\r\n-> 3767             indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\r\n   3768 \r\n   3769         # take() does not accept boolean indexers\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _get_indexer_strict(self, key, axis_name)\r\n   2534             indexer = self._get_indexer_level_0(keyarr)\r\n   2535 \r\n-> 2536             self._raise_if_missing(key, indexer, axis_name)\r\n   2537             return self[indexer], indexer\r\n   2538 \r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _raise_if_missing(self, key, indexer, axis_name)\r\n   2552                 cmask = check == -1\r\n   2553                 if cmask.any():\r\n-> 2554                     raise KeyError(f\"{keyarr[cmask]} not in index\")\r\n   2555                 # We get here when levels still contain values which are not\r\n   2556                 # actually in Index anymore\r\n\r\nKeyError: \"['1'] not in index\"\r\n```\r\n\r\nA workaround is to \"flatten\" the columns:\r\n\r\n```python\r\ndf.columns = [\"\".join(column) for column in df.columns]\r\n```\n\n\nIMPORTANT: You should ONLY interact with the environment provided to you AND NEVER ASK FOR HUMAN HELP.\nYou should NOT modify any existing test case files. If needed, you can add new test cases in a NEW file to reproduce the issue.\nYou SHOULD INCLUDE PROPER INDENTATION in your edit commands.\nWhen you think you have fixed the issue through code changes, please run the following command: <execute_bash> exit </execute_bash>.\n",
                "action": "message",
                "args": {
                    "content": "Please fix the following issue for the repository in /workspace/mwaskom__seaborn__0.13.\nEnvironment has been set up for you to start working. You may assume all necessary tools are installed.\n\n# Problem Statement\npairplot raises KeyError with MultiIndex DataFrame\nWhen trying to pairplot a MultiIndex DataFrame, `pairplot` raises a `KeyError`:\r\n\r\nMRE:\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nimport seaborn as sns\r\n\r\n\r\ndata = {\r\n    (\"A\", \"1\"): np.random.rand(100),\r\n    (\"A\", \"2\"): np.random.rand(100),\r\n    (\"B\", \"1\"): np.random.rand(100),\r\n    (\"B\", \"2\"): np.random.rand(100),\r\n}\r\ndf = pd.DataFrame(data)\r\nsns.pairplot(df)\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in pairplot(data, hue, hue_order, palette, vars, x_vars, y_vars, kind, diag_kind, markers, height, aspect, corner, dropna, plot_kws, diag_kws, grid_kws, size)\r\n   2142     diag_kws.setdefault(\"legend\", False)\r\n   2143     if diag_kind == \"hist\":\r\n-> 2144         grid.map_diag(histplot, **diag_kws)\r\n   2145     elif diag_kind == \"kde\":\r\n   2146         diag_kws.setdefault(\"fill\", True)\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in map_diag(self, func, **kwargs)\r\n   1488                 plt.sca(ax)\r\n   1489 \r\n-> 1490             vector = self.data[var]\r\n   1491             if self._hue_var is not None:\r\n   1492                 hue = self.data[self._hue_var]\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/frame.py) in __getitem__(self, key)\r\n   3765             if is_iterator(key):\r\n   3766                 key = list(key)\r\n-> 3767             indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\r\n   3768 \r\n   3769         # take() does not accept boolean indexers\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _get_indexer_strict(self, key, axis_name)\r\n   2534             indexer = self._get_indexer_level_0(keyarr)\r\n   2535 \r\n-> 2536             self._raise_if_missing(key, indexer, axis_name)\r\n   2537             return self[indexer], indexer\r\n   2538 \r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _raise_if_missing(self, key, indexer, axis_name)\r\n   2552                 cmask = check == -1\r\n   2553                 if cmask.any():\r\n-> 2554                     raise KeyError(f\"{keyarr[cmask]} not in index\")\r\n   2555                 # We get here when levels still contain values which are not\r\n   2556                 # actually in Index anymore\r\n\r\nKeyError: \"['1'] not in index\"\r\n```\r\n\r\nA workaround is to \"flatten\" the columns:\r\n\r\n```python\r\ndf.columns = [\"\".join(column) for column in df.columns]\r\n```\n\n\nIMPORTANT: You should ONLY interact with the environment provided to you AND NEVER ASK FOR HUMAN HELP.\nYou should NOT modify any existing test case files. If needed, you can add new test cases in a NEW file to reproduce the issue.\nYou SHOULD INCLUDE PROPER INDENTATION in your edit commands.\nWhen you think you have fixed the issue through code changes, please run the following command: <execute_bash> exit </execute_bash>.\n",
                    "wait_for_response": false
                }
            },
            {
                "message": "No observation",
                "observation": "null",
                "content": "",
                "extras": {}
            }
        ],
        [
            {
                "id": 3,
                "timestamp": "2024-07-18T21:06:51.771388",
                "source": "agent",
                "message": "Running Python code interactively: open_file('/workspace/mwaskom__seaborn__0.13/src/seaborn/axisgrid.py')",
                "action": "run_ipython",
                "args": {
                    "code": "open_file('/workspace/mwaskom__seaborn__0.13/src/seaborn/axisgrid.py')",
                    "thought": "Certainly! I'll investigate the issue and propose a fix for the `pairplot` function to handle MultiIndex DataFrames correctly. Let's start by examining the relevant code.\n\nFirst, let's open the file containing the `pairplot` function:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 4,
                "timestamp": "2024-07-18T21:06:52.423783",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 3,
                "observation": "run_ipython",
                "content": "---------------------------------------------------------------------------\r\nFileNotFoundError                         Traceback (most recent call last)\r\nCell In[1], line 1\r\n----> 1 open_file('/workspace/mwaskom__seaborn__0.13/src/seaborn/axisgrid.py')\r\n\r\nFile /opendevin/plugins/agent_skills/agentskills.py:71, in update_pwd_decorator.<locals>.wrapper(*args, **kwargs)\r\n     69     os.chdir(jupyter_pwd)\r\n     70 try:\r\n---> 71     return func(*args, **kwargs)\r\n     72 finally:\r\n     73     os.chdir(old_pwd)\r\n\r\nFile /opendevin/plugins/agent_skills/agentskills.py:213, in open_file(path, line_number, context_lines)\r\n    210 global CURRENT_FILE, CURRENT_LINE, WINDOW\r\n    212 if not os.path.isfile(path):\r\n--> 213     raise FileNotFoundError(f'File {path} not found')\r\n    215 CURRENT_FILE = os.path.abspath(path)\r\n    216 with open(CURRENT_FILE) as file:\r\n\r\nFileNotFoundError: File /workspace/mwaskom__seaborn__0.13/src/seaborn/axisgrid.py not found",
                "extras": {
                    "code": "open_file('/workspace/mwaskom__seaborn__0.13/src/seaborn/axisgrid.py')"
                }
            }
        ],
        [
            {
                "id": 5,
                "timestamp": "2024-07-18T21:06:54.742432",
                "source": "agent",
                "message": "Running command: find /workspace/mwaskom__seaborn__0.13 -name axisgrid.py",
                "action": "run",
                "args": {
                    "command": "find /workspace/mwaskom__seaborn__0.13 -name axisgrid.py",
                    "thought": "I apologize for the confusion. It seems the file structure is different from what I initially assumed. Let's try to locate the correct file by searching for it:",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 6,
                "timestamp": "2024-07-18T21:06:54.897180",
                "source": "agent",
                "message": "Command `find /workspace/mwaskom__seaborn__0.13 -name axisgrid.py` executed with exit code 0.",
                "cause": 5,
                "observation": "run",
                "content": "/workspace/mwaskom__seaborn__0.13/seaborn/axisgrid.py",
                "extras": {
                    "command_id": -1,
                    "command": "find /workspace/mwaskom__seaborn__0.13 -name axisgrid.py",
                    "exit_code": 0
                }
            }
        ],
        [
            {
                "id": 7,
                "timestamp": "2024-07-18T21:06:56.921780",
                "source": "agent",
                "message": "Running Python code interactively: open_file('/workspace/mwaskom__seaborn__0.13/seaborn/axisgrid.py')",
                "action": "run_ipython",
                "args": {
                    "code": "open_file('/workspace/mwaskom__seaborn__0.13/seaborn/axisgrid.py')",
                    "thought": "Thank you for the information. Now that we've found the correct path, let's open the file:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 8,
                "timestamp": "2024-07-18T21:06:57.376637",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 7,
                "observation": "run_ipython",
                "content": "[File: /workspace/mwaskom__seaborn__0.13/seaborn/axisgrid.py (2399 lines total)]\r\n(this is the beginning of the file)\r\n1|from __future__ import annotations\r\n2|from itertools import product\r\n3|from inspect import signature\r\n4|import warnings\r\n5|from textwrap import dedent\r\n6|\r\n7|import numpy as np\r\n8|import pandas as pd\r\n9|import matplotlib as mpl\r\n10|import matplotlib.pyplot as plt\r\n11|\r\n12|from ._oldcore import VectorPlotter, variable_type, categorical_order\r\n13|from ._compat import share_axis, get_legend_handles\r\n14|from . import utils\r\n15|from .utils import (\r\n16|    adjust_legend_subtitles, _check_argument, _draw_figure, _disable_autolayout\r\n17|)\r\n18|from .palettes import color_palette, blend_palette\r\n19|from ._docstrings import (\r\n20|    DocstringComponents,\r\n21|    _core_docs,\r\n22|)\r\n23|\r\n24|__all__ = [\"FacetGrid\", \"PairGrid\", \"JointGrid\", \"pairplot\", \"jointplot\"]\r\n25|\r\n26|\r\n27|_param_docs = DocstringComponents.from_nested_components(\r\n28|    core=_core_docs[\"params\"],\r\n29|)\r\n30|\r\n31|\r\n32|class _BaseGrid:\r\n33|    \"\"\"Base class for grids of subplots.\"\"\"\r\n34|\r\n35|    def set(self, **kwargs):\r\n36|        \"\"\"Set attributes on each subplot Axes.\"\"\"\r\n37|        for ax in self.axes.flat:\r\n38|            if ax is not None:  # Handle removed axes\r\n39|                ax.set(**kwargs)\r\n40|        return self\r\n41|\r\n42|    @property\r\n43|    def fig(self):\r\n44|        \"\"\"DEPRECATED: prefer the `figure` property.\"\"\"\r\n45|        # Grid.figure is preferred because it matches the Axes attribute name.\r\n46|        # But as the maintanace burden on having this property is minimal,\r\n47|        # let's be slow about formally deprecating it. For now just note its deprecation\r\n48|        # in the docstring; add a warning in version 0.13, and eventually remove it.\r\n49|        return self._figure\r\n50|\r\n51|    @property\r\n52|    def figure(self):\r\n53|        \"\"\"Access the :class:`matplotlib.figure.Figure` object underlying the grid.\"\"\"\r\n54|        return self._figure\r\n55|\r\n56|    def apply(self, func, *args, **kwargs):\r\n57|        \"\"\"\r\n58|        Pass the grid to a user-supplied function and return self.\r\n59|\r\n60|        The `func` must accept an object of this type for its first\r\n61|        positional argument. Additional arguments are passed through.\r\n62|        The return value of `func` is ignored; this method returns self.\r\n63|        See the `pipe` method if you want the return value.\r\n64|\r\n65|        Added in v0.12.0.\r\n66|\r\n67|        \"\"\"\r\n68|        func(self, *args, **kwargs)\r\n69|        return self\r\n70|\r\n71|    def pipe(self, func, *args, **kwargs):\r\n72|        \"\"\"\r\n73|        Pass the grid to a user-supplied function and return its value.\r\n74|\r\n75|        The `func` must accept an object of this type for its first\r\n76|        positional argument. Additional arguments are passed through.\r\n77|        The return value of `func` becomes the return value of this method.\r\n78|        See the `apply` method if you want to return self instead.\r\n79|\r\n80|        Added in v0.12.0.\r\n81|\r\n82|        \"\"\"\r\n83|        return func(self, *args, **kwargs)\r\n84|\r\n85|    def savefig(self, *args, **kwargs):\r\n86|        \"\"\"\r\n87|        Save an image of the plot.\r\n88|\r\n89|        This wraps :meth:`matplotlib.figure.Figure.savefig`, using bbox_inches=\"tight\"\r\n90|        by default. Parameters are passed through to the matplotlib function.\r\n91|\r\n92|        \"\"\"\r\n93|        kwargs = kwargs.copy()\r\n94|        kwargs.setdefault(\"bbox_inches\", \"tight\")\r\n95|        self.figure.savefig(*args, **kwargs)\r\n96|\r\n97|\r\n98|class Grid(_BaseGrid):\r\n99|    \"\"\"A grid that can have multiple subplots and an external legend.\"\"\"\r\n100|    _margin_titles = False\r\n(2299 more lines below)\r\n",
                "extras": {
                    "code": "open_file('/workspace/mwaskom__seaborn__0.13/seaborn/axisgrid.py')"
                }
            }
        ],
        [
            {
                "id": 9,
                "timestamp": "2024-07-18T21:06:59.885260",
                "source": "agent",
                "message": "Running Python code interactively: search_file('def pairplot', '/workspace/mwaskom__seaborn__0.13/seaborn/axisgrid.py')",
                "action": "run_ipython",
                "args": {
                    "code": "search_file('def pairplot', '/workspace/mwaskom__seaborn__0.13/seaborn/axisgrid.py')",
                    "thought": "Thank you for opening the file. Now, let's locate the `pairplot` function and examine it:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 10,
                "timestamp": "2024-07-18T21:07:00.336398",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 9,
                "observation": "run_ipython",
                "content": "[Found 1 matches for \"def pairplot\" in /workspace/mwaskom__seaborn__0.13/seaborn/axisgrid.py]\r\nLine 2005: def pairplot(\r\n[End of matches for \"def pairplot\" in /workspace/mwaskom__seaborn__0.13/seaborn/axisgrid.py]\r\n",
                "extras": {
                    "code": "search_file('def pairplot', '/workspace/mwaskom__seaborn__0.13/seaborn/axisgrid.py')"
                }
            }
        ],
        [
            {
                "id": 11,
                "timestamp": "2024-07-18T21:07:02.467919",
                "source": "agent",
                "message": "Running Python code interactively: open_file('/workspace/mwaskom__seaborn__0.13/seaborn/axisgrid.py', 2005, 200)",
                "action": "run_ipython",
                "args": {
                    "code": "open_file('/workspace/mwaskom__seaborn__0.13/seaborn/axisgrid.py', 2005, 200)",
                    "thought": "Thank you for the information. Let's examine the `pairplot` function and the surrounding code:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 12,
                "timestamp": "2024-07-18T21:07:02.920952",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 11,
                "observation": "run_ipython",
                "content": "[File: /workspace/mwaskom__seaborn__0.13/seaborn/axisgrid.py (2399 lines total)]\r\n(1904 more lines above)\r\n1905|        color : :mod:`matplotlib color <matplotlib.colors>`\r\n1906|            Specifies the color of the reference line(s).\r\n1907|        linestyle : str\r\n1908|            Specifies the style of the reference line(s).\r\n1909|        line_kws : key, value mappings\r\n1910|            Other keyword arguments are passed to :meth:`matplotlib.axes.Axes.axvline`\r\n1911|            when ``x`` is not None and :meth:`matplotlib.axes.Axes.axhline` when ``y``\r\n1912|            is not None.\r\n1913|\r\n1914|        Returns\r\n1915|        -------\r\n1916|        :class:`JointGrid` instance\r\n1917|            Returns ``self`` for easy method chaining.\r\n1918|\r\n1919|        \"\"\"\r\n1920|        line_kws['color'] = color\r\n1921|        line_kws['linestyle'] = linestyle\r\n1922|\r\n1923|        if x is not None:\r\n1924|            if joint:\r\n1925|                self.ax_joint.axvline(x, **line_kws)\r\n1926|            if marginal:\r\n1927|                self.ax_marg_x.axvline(x, **line_kws)\r\n1928|\r\n1929|        if y is not None:\r\n1930|            if joint:\r\n1931|                self.ax_joint.axhline(y, **line_kws)\r\n1932|            if marginal:\r\n1933|                self.ax_marg_y.axhline(y, **line_kws)\r\n1934|\r\n1935|        return self\r\n1936|\r\n1937|    def set_axis_labels(self, xlabel=\"\", ylabel=\"\", **kwargs):\r\n1938|        \"\"\"Set axis labels on the bivariate axes.\r\n1939|\r\n1940|        Parameters\r\n1941|        ----------\r\n1942|        xlabel, ylabel : strings\r\n1943|            Label names for the x and y variables.\r\n1944|        kwargs : key, value mappings\r\n1945|            Other keyword arguments are passed to the following functions:\r\n1946|\r\n1947|            - :meth:`matplotlib.axes.Axes.set_xlabel`\r\n1948|            - :meth:`matplotlib.axes.Axes.set_ylabel`\r\n1949|\r\n1950|        Returns\r\n1951|        -------\r\n1952|        :class:`JointGrid` instance\r\n1953|            Returns ``self`` for easy method chaining.\r\n1954|\r\n1955|        \"\"\"\r\n1956|        self.ax_joint.set_xlabel(xlabel, **kwargs)\r\n1957|        self.ax_joint.set_ylabel(ylabel, **kwargs)\r\n1958|        return self\r\n1959|\r\n1960|\r\n1961|JointGrid.__init__.__doc__ = \"\"\"\\\r\n1962|Set up the grid of subplots and store data internally for easy plotting.\r\n1963|\r\n1964|Parameters\r\n1965|----------\r\n1966|{params.core.data}\r\n1967|{params.core.xy}\r\n1968|height : number\r\n1969|    Size of each side of the figure in inches (it will be square).\r\n1970|ratio : number\r\n1971|    Ratio of joint axes height to marginal axes height.\r\n1972|space : number\r\n1973|    Space between the joint and marginal axes\r\n1974|dropna : bool\r\n1975|    If True, remove missing observations before plotting.\r\n1976|{{x, y}}lim : pairs of numbers\r\n1977|    Set axis limits to these values before plotting.\r\n1978|marginal_ticks : bool\r\n1979|    If False, suppress ticks on the count/density axis of the marginal plots.\r\n1980|{params.core.hue}\r\n1981|    Note: unlike in :class:`FacetGrid` or :class:`PairGrid`, the axes-level\r\n1982|    functions must support ``hue`` to use it in :class:`JointGrid`.\r\n1983|{params.core.palette}\r\n1984|{params.core.hue_order}\r\n1985|{params.core.hue_norm}\r\n1986|\r\n1987|See Also\r\n1988|--------\r\n1989|{seealso.jointplot}\r\n1990|{seealso.pairgrid}\r\n1991|{seealso.pairplot}\r\n1992|\r\n1993|Examples\r\n1994|--------\r\n1995|\r\n1996|.. include:: ../docstrings/JointGrid.rst\r\n1997|\r\n1998|\"\"\".format(\r\n1999|    params=_param_docs,\r\n2000|    returns=_core_docs[\"returns\"],\r\n2001|    seealso=_core_docs[\"seealso\"],\r\n2002|)\r\n2003|\r\n2004|\r\n2005|def pairplot(\r\n2006|    data, *,\r\n2007|    hue=None, hue_order=None, palette=None,\r\n2008|    vars=None, x_vars=None, y_vars=None,\r\n2009|    kind=\"scatter\", diag_kind=\"auto\", markers=None,\r\n2010|    height=2.5, aspect=1, corner=False, dropna=False,\r\n2011|    plot_kws=None, diag_kws=None, grid_kws=None, size=None,\r\n2012|):\r\n2013|    \"\"\"Plot pairwise relationships in a dataset.\r\n2014|\r\n2015|    By default, this function will create a grid of Axes such that each numeric\r\n2016|    variable in ``data`` will by shared across the y-axes across a single row and\r\n2017|    the x-axes across a single column. The diagonal plots are treated\r\n2018|    differently: a univariate distribution plot is drawn to show the marginal\r\n2019|    distribution of the data in each column.\r\n2020|\r\n2021|    It is also possible to show a subset of variables or plot different\r\n2022|    variables on the rows and columns.\r\n2023|\r\n2024|    This is a high-level interface for :class:`PairGrid` that is intended to\r\n2025|    make it easy to draw a few common styles. You should use :class:`PairGrid`\r\n2026|    directly if you need more flexibility.\r\n2027|\r\n2028|    Parameters\r\n2029|    ----------\r\n2030|    data : `pandas.DataFrame`\r\n2031|        Tidy (long-form) dataframe where each column is a variable and\r\n2032|        each row is an observation.\r\n2033|    hue : name of variable in ``data``\r\n2034|        Variable in ``data`` to map plot aspects to different colors.\r\n2035|    hue_order : list of strings\r\n2036|        Order for the levels of the hue variable in the palette\r\n2037|    palette : dict or seaborn color palette\r\n2038|        Set of colors for mapping the ``hue`` variable. If a dict, keys\r\n2039|        should be values  in the ``hue`` variable.\r\n2040|    vars : list of variable names\r\n2041|        Variables within ``data`` to use, otherwise use every column with\r\n2042|        a numeric datatype.\r\n2043|    {x, y}_vars : lists of variable names\r\n2044|        Variables within ``data`` to use separately for the rows and\r\n2045|        columns of the figure; i.e. to make a non-square plot.\r\n2046|    kind : {'scatter', 'kde', 'hist', 'reg'}\r\n2047|        Kind of plot to make.\r\n2048|    diag_kind : {'auto', 'hist', 'kde', None}\r\n2049|        Kind of plot for the diagonal subplots. If 'auto', choose based on\r\n2050|        whether or not ``hue`` is used.\r\n2051|    markers : single matplotlib marker code or list\r\n2052|        Either the marker to use for all scatterplot points or a list of markers\r\n2053|        with a length the same as the number of levels in the hue variable so that\r\n2054|        differently colored points will also have different scatterplot\r\n2055|        markers.\r\n2056|    height : scalar\r\n2057|        Height (in inches) of each facet.\r\n2058|    aspect : scalar\r\n2059|        Aspect * height gives the width (in inches) of each facet.\r\n2060|    corner : bool\r\n2061|        If True, don't add axes to the upper (off-diagonal) triangle of the\r\n2062|        grid, making this a \"corner\" plot.\r\n2063|    dropna : boolean\r\n2064|        Drop missing values from the data before plotting.\r\n2065|    {plot, diag, grid}_kws : dicts\r\n2066|        Dictionaries of keyword arguments. ``plot_kws`` are passed to the\r\n2067|        bivariate plotting function, ``diag_kws`` are passed to the univariate\r\n2068|        plotting function, and ``grid_kws`` are passed to the :class:`PairGrid`\r\n2069|        constructor.\r\n2070|\r\n2071|    Returns\r\n2072|    -------\r\n2073|    grid : :class:`PairGrid`\r\n2074|        Returns the underlying :class:`PairGrid` instance for further tweaking.\r\n2075|\r\n2076|    See Also\r\n2077|    --------\r\n2078|    PairGrid : Subplot grid for more flexible plotting of pairwise relationships.\r\n2079|    JointGrid : Grid for plotting joint and marginal distributions of two variables.\r\n2080|\r\n2081|    Examples\r\n2082|    --------\r\n2083|\r\n2084|    .. include:: ../docstrings/pairplot.rst\r\n2085|\r\n2086|    \"\"\"\r\n2087|    # Avoid circular import\r\n2088|    from .distributions import histplot, kdeplot\r\n2089|\r\n2090|    # Handle deprecations\r\n2091|    if size is not None:\r\n2092|        height = size\r\n2093|        msg = (\"The `size` parameter has been renamed to `height`; \"\r\n2094|               \"please update your code.\")\r\n2095|        warnings.warn(msg, UserWarning)\r\n2096|\r\n2097|    if not isinstance(data, pd.DataFrame):\r\n2098|        raise TypeError(\r\n2099|            f\"'data' must be pandas DataFrame object, not: {type(data)}\")\r\n2100|\r\n2101|    plot_kws = {} if plot_kws is None else plot_kws.copy()\r\n2102|    diag_kws = {} if diag_kws is None else diag_kws.copy()\r\n2103|    grid_kws = {} if grid_kws is None else grid_kws.copy()\r\n2104|\r\n2105|    # Resolve \"auto\" diag kind\r\n(294 more lines below)\r\n",
                "extras": {
                    "code": "open_file('/workspace/mwaskom__seaborn__0.13/seaborn/axisgrid.py', 2005, 200)"
                }
            }
        ]
    ],
    "info": {
        "submission": "",
        "model_stats": {
            "accumulated_cost": 0.104241,
            "costs": [
                0.018470999999999998,
                0.019287,
                0.01956,
                0.023214,
                0.023708999999999997
            ]
        }
    }
}