{
    "instance_id": "sympy__sympy-12454",
    "traj": [
        [
            {
                "id": 0,
                "timestamp": "2024-07-19T00:25:22.892885",
                "source": "user",
                "message": "Please fix the following issue for the repository in /workspace/sympy__sympy__1.0.\nEnvironment has been set up for you to start working. You may assume all necessary tools are installed.\n\n# Problem Statement\nis_upper() raises IndexError for tall matrices\nThe function Matrix.is_upper raises an IndexError for a 4x2 matrix of zeros.\r\n```\r\n>>> sympy.zeros(4,2).is_upper\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"sympy/matrices/matrices.py\", line 1112, in is_upper\r\n    for i in range(1, self.rows)\r\n  File \"sympy/matrices/matrices.py\", line 1113, in <genexpr>\r\n    for j in range(i))\r\n  File \"sympy/matrices/dense.py\", line 119, in __getitem__\r\n    return self.extract(i, j)\r\n  File \"sympy/matrices/matrices.py\", line 352, in extract\r\n    colsList = [a2idx(k, self.cols) for k in colsList]\r\n  File \"sympy/matrices/matrices.py\", line 5261, in a2idx\r\n    raise IndexError(\"Index out of range: a[%s]\" % (j,))\r\nIndexError: Index out of range: a[2]\r\n```\r\nThe code for is_upper() is\r\n```\r\n        return all(self[i, j].is_zero\r\n                   for i in range(1, self.rows)\r\n                   for j in range(i))\r\n```\r\nFor a 4x2 matrix, is_upper iterates over the indices:\r\n```\r\n>>> A = sympy.zeros(4, 2)\r\n>>> print tuple([i, j] for i in range(1, A.rows) for j in range(i))\r\n([1, 0], [2, 0], [2, 1], [3, 0], [3, 1], [3, 2])\r\n```\r\nThe attempt to index the (3,2) entry appears to be the source of the error. \n\n\nIMPORTANT: You should ONLY interact with the environment provided to you AND NEVER ASK FOR HUMAN HELP.\nYou should NOT modify any existing test case files. If needed, you can add new test cases in a NEW file to reproduce the issue.\nYou SHOULD INCLUDE PROPER INDENTATION in your edit commands.\nWhen you think you have fixed the issue through code changes, please run the following command: <execute_bash> exit </execute_bash>.\n",
                "action": "message",
                "args": {
                    "content": "Please fix the following issue for the repository in /workspace/sympy__sympy__1.0.\nEnvironment has been set up for you to start working. You may assume all necessary tools are installed.\n\n# Problem Statement\nis_upper() raises IndexError for tall matrices\nThe function Matrix.is_upper raises an IndexError for a 4x2 matrix of zeros.\r\n```\r\n>>> sympy.zeros(4,2).is_upper\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"sympy/matrices/matrices.py\", line 1112, in is_upper\r\n    for i in range(1, self.rows)\r\n  File \"sympy/matrices/matrices.py\", line 1113, in <genexpr>\r\n    for j in range(i))\r\n  File \"sympy/matrices/dense.py\", line 119, in __getitem__\r\n    return self.extract(i, j)\r\n  File \"sympy/matrices/matrices.py\", line 352, in extract\r\n    colsList = [a2idx(k, self.cols) for k in colsList]\r\n  File \"sympy/matrices/matrices.py\", line 5261, in a2idx\r\n    raise IndexError(\"Index out of range: a[%s]\" % (j,))\r\nIndexError: Index out of range: a[2]\r\n```\r\nThe code for is_upper() is\r\n```\r\n        return all(self[i, j].is_zero\r\n                   for i in range(1, self.rows)\r\n                   for j in range(i))\r\n```\r\nFor a 4x2 matrix, is_upper iterates over the indices:\r\n```\r\n>>> A = sympy.zeros(4, 2)\r\n>>> print tuple([i, j] for i in range(1, A.rows) for j in range(i))\r\n([1, 0], [2, 0], [2, 1], [3, 0], [3, 1], [3, 2])\r\n```\r\nThe attempt to index the (3,2) entry appears to be the source of the error. \n\n\nIMPORTANT: You should ONLY interact with the environment provided to you AND NEVER ASK FOR HUMAN HELP.\nYou should NOT modify any existing test case files. If needed, you can add new test cases in a NEW file to reproduce the issue.\nYou SHOULD INCLUDE PROPER INDENTATION in your edit commands.\nWhen you think you have fixed the issue through code changes, please run the following command: <execute_bash> exit </execute_bash>.\n",
                    "wait_for_response": false
                }
            },
            {
                "message": "No observation",
                "observation": "null",
                "content": "",
                "extras": {}
            }
        ],
        [
            {
                "id": 3,
                "timestamp": "2024-07-19T00:25:26.235238",
                "source": "agent",
                "message": "Running Python code interactively: open_file('/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py')",
                "action": "run_ipython",
                "args": {
                    "code": "open_file('/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py')",
                    "thought": "Certainly! Let's start by examining the code and reproducing the issue. First, I'll open the file containing the `is_upper()` method.",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 4,
                "timestamp": "2024-07-19T00:25:26.777908",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 3,
                "observation": "run_ipython",
                "content": "[File: /workspace/sympy__sympy__1.0/sympy/matrices/matrices.py (5586 lines total)]\r\n(this is the beginning of the file)\r\n1|from __future__ import print_function, division\r\n2|\r\n3|import collections\r\n4|from sympy.core.add import Add\r\n5|from sympy.core.basic import Basic, Atom\r\n6|from sympy.core.expr import Expr\r\n7|from sympy.core.function import count_ops\r\n8|from sympy.core.logic import fuzzy_and\r\n9|from sympy.core.power import Pow\r\n10|from sympy.core.symbol import Symbol, Dummy, symbols\r\n11|from sympy.core.numbers import Integer, ilcm, Float\r\n12|from sympy.core.singleton import S\r\n13|from sympy.core.sympify import sympify\r\n14|from sympy.core.compatibility import is_sequence, default_sort_key, range, \\\r\n15|    NotIterable\r\n16|\r\n17|from sympy.polys import PurePoly, roots, cancel, gcd\r\n18|from sympy.simplify import simplify as _simplify, signsimp, nsimplify\r\n19|from sympy.utilities.iterables import flatten, numbered_symbols\r\n20|from sympy.functions.elementary.miscellaneous import sqrt, Max, Min\r\n21|from sympy.functions import exp, factorial\r\n22|from sympy.printing import sstr\r\n23|from sympy.core.compatibility import reduce, as_int, string_types\r\n24|from sympy.assumptions.refine import refine\r\n25|from sympy.core.decorators import call_highest_priority\r\n26|from sympy.core.decorators import deprecated\r\n27|from sympy.utilities.exceptions import SymPyDeprecationWarning\r\n28|\r\n29|from types import FunctionType\r\n30|\r\n31|\r\n32|def _iszero(x):\r\n33|    \"\"\"Returns True if x is zero.\"\"\"\r\n34|    return x.is_zero\r\n35|\r\n36|\r\n37|class MatrixError(Exception):\r\n38|    pass\r\n39|\r\n40|\r\n41|class ShapeError(ValueError, MatrixError):\r\n42|    \"\"\"Wrong matrix shape\"\"\"\r\n43|    pass\r\n44|\r\n45|\r\n46|class NonSquareMatrixError(ShapeError):\r\n47|    pass\r\n48|\r\n49|\r\n50|class DeferredVector(Symbol, NotIterable):\r\n51|    \"\"\"A vector whose components are deferred (e.g. for use with lambdify)\r\n52|\r\n53|    Examples\r\n54|    ========\r\n55|\r\n56|    >>> from sympy import DeferredVector, lambdify\r\n57|    >>> X = DeferredVector( 'X' )\r\n58|    >>> X\r\n59|    X\r\n60|    >>> expr = (X[0] + 2, X[2] + 3)\r\n61|    >>> func = lambdify( X, expr)\r\n62|    >>> func( [1, 2, 3] )\r\n63|    (3, 6)\r\n64|    \"\"\"\r\n65|\r\n66|    def __getitem__(self, i):\r\n67|        if i == -0:\r\n68|            i = 0\r\n69|        if i < 0:\r\n70|            raise IndexError('DeferredVector index out of range')\r\n71|        component_name = '%s[%d]' % (self.name, i)\r\n72|        return Symbol(component_name)\r\n73|\r\n74|    def __str__(self):\r\n75|        return sstr(self)\r\n76|\r\n77|    def __repr__(self):\r\n78|        return \"DeferredVector('%s')\" % (self.name)\r\n79|\r\n80|\r\n81|class MatrixRequired(object):\r\n82|    \"\"\"All subclasses of matrix objects must implement the\r\n83|    required matrix properties listed here.\"\"\"\r\n84|    rows = None\r\n85|    cols = None\r\n86|    shape = None\r\n87|    _simplify = None\r\n88|\r\n89|    @classmethod\r\n90|    def _new(cls, *args, **kwargs):\r\n91|        \"\"\"`_new` must, at minimum, be callable as\r\n92|        `_new(rows, cols, mat) where mat is a flat list of the\r\n93|        elements of the matrix.\"\"\"\r\n94|        raise NotImplementedError(\"Subclasses must implement this.\")\r\n95|\r\n96|    def __eq__(self, other):\r\n97|        raise NotImplementedError(\"Subclasses must impliment this.\")\r\n98|\r\n99|    def __getitem__(self, key):\r\n100|        \"\"\"Implementations of __getitem__ should accept ints, in which\r\n(5486 more lines below)\r\n",
                "extras": {
                    "code": "open_file('/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py')"
                }
            }
        ],
        [
            {
                "id": 5,
                "timestamp": "2024-07-19T00:25:29.221965",
                "source": "agent",
                "message": "Running Python code interactively: search_file('def is_upper', '/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py')",
                "action": "run_ipython",
                "args": {
                    "code": "search_file('def is_upper', '/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py')",
                    "thought": "Thank you for providing the file content. Let's locate the `is_upper()` method and examine it.",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 6,
                "timestamp": "2024-07-19T00:25:29.676471",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 5,
                "observation": "run_ipython",
                "content": "[Found 2 matches for \"def is_upper\" in /workspace/sympy__sympy__1.0/sympy/matrices/matrices.py]\r\nLine 1043: def is_upper_hessenberg(self):\r\nLine 1072: def is_upper(self):\r\n[End of matches for \"def is_upper\" in /workspace/sympy__sympy__1.0/sympy/matrices/matrices.py]\r\n",
                "extras": {
                    "code": "search_file('def is_upper', '/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py')"
                }
            }
        ],
        [
            {
                "id": 7,
                "timestamp": "2024-07-19T00:25:31.664534",
                "source": "agent",
                "message": "Running Python code interactively: open_file('/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py', 1072, 20)",
                "action": "run_ipython",
                "args": {
                    "code": "open_file('/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py', 1072, 20)",
                    "thought": "Thank you for the information. Let's examine the `is_upper()` method more closely.",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 8,
                "timestamp": "2024-07-19T00:25:32.120882",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 7,
                "observation": "run_ipython",
                "content": "[File: /workspace/sympy__sympy__1.0/sympy/matrices/matrices.py (5586 lines total)]\r\n(1061 more lines above)\r\n1062|\r\n1063|        See Also\r\n1064|        ========\r\n1065|\r\n1066|        is_lower_hessenberg\r\n1067|        is_upper\r\n1068|        \"\"\"\r\n1069|        return self._eval_is_upper_hessenberg()\r\n1070|\r\n1071|    @property\r\n1072|    def is_upper(self):\r\n1073|        \"\"\"Check if matrix is an upper triangular matrix. True can be returned\r\n1074|        even if the matrix is not square.\r\n1075|\r\n1076|        Examples\r\n1077|        ========\r\n1078|\r\n1079|        >>> from sympy import Matrix\r\n1080|        >>> m = Matrix(2, 2, [1, 0, 0, 1])\r\n1081|        >>> m\r\n1082|        Matrix([\r\n(4504 more lines below)\r\n",
                "extras": {
                    "code": "open_file('/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py', 1072, 20)"
                }
            }
        ],
        [
            {
                "id": 9,
                "timestamp": "2024-07-19T00:25:34.337650",
                "source": "agent",
                "message": "Running Python code interactively: open_file('/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py', 1072, 50)",
                "action": "run_ipython",
                "args": {
                    "code": "open_file('/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py', 1072, 50)",
                    "thought": "Thank you for showing the `is_upper()` method. Now, let's examine the implementation of this method to fix the issue.",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 10,
                "timestamp": "2024-07-19T00:25:34.788472",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 9,
                "observation": "run_ipython",
                "content": "[File: /workspace/sympy__sympy__1.0/sympy/matrices/matrices.py (5586 lines total)]\r\n(1046 more lines above)\r\n1047|        below the first subdiagonal.\r\n1048|\r\n1049|        Examples\r\n1050|        ========\r\n1051|\r\n1052|        >>> from sympy.matrices import Matrix\r\n1053|        >>> a = Matrix([[1, 4, 2, 3], [3, 4, 1, 7], [0, 2, 3, 4], [0, 0, 1, 3]])\r\n1054|        >>> a\r\n1055|        Matrix([\r\n1056|        [1, 4, 2, 3],\r\n1057|        [3, 4, 1, 7],\r\n1058|        [0, 2, 3, 4],\r\n1059|        [0, 0, 1, 3]])\r\n1060|        >>> a.is_upper_hessenberg\r\n1061|        True\r\n1062|\r\n1063|        See Also\r\n1064|        ========\r\n1065|\r\n1066|        is_lower_hessenberg\r\n1067|        is_upper\r\n1068|        \"\"\"\r\n1069|        return self._eval_is_upper_hessenberg()\r\n1070|\r\n1071|    @property\r\n1072|    def is_upper(self):\r\n1073|        \"\"\"Check if matrix is an upper triangular matrix. True can be returned\r\n1074|        even if the matrix is not square.\r\n1075|\r\n1076|        Examples\r\n1077|        ========\r\n1078|\r\n1079|        >>> from sympy import Matrix\r\n1080|        >>> m = Matrix(2, 2, [1, 0, 0, 1])\r\n1081|        >>> m\r\n1082|        Matrix([\r\n1083|        [1, 0],\r\n1084|        [0, 1]])\r\n1085|        >>> m.is_upper\r\n1086|        True\r\n1087|\r\n1088|        >>> m = Matrix(4, 3, [5, 1, 9, 0, 4 , 6, 0, 0, 5, 0, 0, 0])\r\n1089|        >>> m\r\n1090|        Matrix([\r\n1091|        [5, 1, 9],\r\n1092|        [0, 4, 6],\r\n1093|        [0, 0, 5],\r\n1094|        [0, 0, 0]])\r\n1095|        >>> m.is_upper\r\n1096|        True\r\n1097|\r\n(4489 more lines below)\r\n",
                "extras": {
                    "code": "open_file('/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py', 1072, 50)"
                }
            }
        ],
        [
            {
                "id": 11,
                "timestamp": "2024-07-19T00:25:36.834512",
                "source": "agent",
                "message": "Running Python code interactively: open_file('/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py', 1072, 100)",
                "action": "run_ipython",
                "args": {
                    "code": "open_file('/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py', 1072, 100)",
                    "thought": "Thank you for providing the context. Now, let's examine the implementation of the `is_upper` method.",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 12,
                "timestamp": "2024-07-19T00:25:37.289279",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 11,
                "observation": "run_ipython",
                "content": "[File: /workspace/sympy__sympy__1.0/sympy/matrices/matrices.py (5586 lines total)]\r\n(1021 more lines above)\r\n1022|        True\r\n1023|\r\n1024|        If the matrix is already simplified, you may speed-up is_symmetric()\r\n1025|        test by using 'simplify=False'.\r\n1026|\r\n1027|        >>> bool(m.is_symmetric(simplify=False))\r\n1028|        False\r\n1029|        >>> m1 = m.expand()\r\n1030|        >>> m1.is_symmetric(simplify=False)\r\n1031|        True\r\n1032|        \"\"\"\r\n1033|        simpfunc = simplify\r\n1034|        if not isinstance(simplify, FunctionType):\r\n1035|            simpfunc = _simplify if simplify else lambda x: x\r\n1036|\r\n1037|        if not self.is_square:\r\n1038|            return False\r\n1039|\r\n1040|        return self._eval_is_symmetric(simpfunc)\r\n1041|\r\n1042|    @property\r\n1043|    def is_upper_hessenberg(self):\r\n1044|        \"\"\"Checks if the matrix is the upper-Hessenberg form.\r\n1045|\r\n1046|        The upper hessenberg matrix has zero entries\r\n1047|        below the first subdiagonal.\r\n1048|\r\n1049|        Examples\r\n1050|        ========\r\n1051|\r\n1052|        >>> from sympy.matrices import Matrix\r\n1053|        >>> a = Matrix([[1, 4, 2, 3], [3, 4, 1, 7], [0, 2, 3, 4], [0, 0, 1, 3]])\r\n1054|        >>> a\r\n1055|        Matrix([\r\n1056|        [1, 4, 2, 3],\r\n1057|        [3, 4, 1, 7],\r\n1058|        [0, 2, 3, 4],\r\n1059|        [0, 0, 1, 3]])\r\n1060|        >>> a.is_upper_hessenberg\r\n1061|        True\r\n1062|\r\n1063|        See Also\r\n1064|        ========\r\n1065|\r\n1066|        is_lower_hessenberg\r\n1067|        is_upper\r\n1068|        \"\"\"\r\n1069|        return self._eval_is_upper_hessenberg()\r\n1070|\r\n1071|    @property\r\n1072|    def is_upper(self):\r\n1073|        \"\"\"Check if matrix is an upper triangular matrix. True can be returned\r\n1074|        even if the matrix is not square.\r\n1075|\r\n1076|        Examples\r\n1077|        ========\r\n1078|\r\n1079|        >>> from sympy import Matrix\r\n1080|        >>> m = Matrix(2, 2, [1, 0, 0, 1])\r\n1081|        >>> m\r\n1082|        Matrix([\r\n1083|        [1, 0],\r\n1084|        [0, 1]])\r\n1085|        >>> m.is_upper\r\n1086|        True\r\n1087|\r\n1088|        >>> m = Matrix(4, 3, [5, 1, 9, 0, 4 , 6, 0, 0, 5, 0, 0, 0])\r\n1089|        >>> m\r\n1090|        Matrix([\r\n1091|        [5, 1, 9],\r\n1092|        [0, 4, 6],\r\n1093|        [0, 0, 5],\r\n1094|        [0, 0, 0]])\r\n1095|        >>> m.is_upper\r\n1096|        True\r\n1097|\r\n1098|        >>> m = Matrix(2, 3, [4, 2, 5, 6, 1, 1])\r\n1099|        >>> m\r\n1100|        Matrix([\r\n1101|        [4, 2, 5],\r\n1102|        [6, 1, 1]])\r\n1103|        >>> m.is_upper\r\n1104|        False\r\n1105|\r\n1106|        See Also\r\n1107|        ========\r\n1108|\r\n1109|        is_lower\r\n1110|        is_diagonal\r\n1111|        is_upper_hessenberg\r\n1112|        \"\"\"\r\n1113|        return all(self[i, j].is_zero\r\n1114|                   for i in range(1, self.rows)\r\n1115|                   for j in range(i))\r\n1116|\r\n1117|    @property\r\n1118|    def is_zero(self):\r\n1119|        \"\"\"Checks if a matrix is a zero matrix.\r\n1120|\r\n1121|        A matrix is zero if every element is zero.  A matrix need not be square\r\n1122|        to be considered zero.  The empty matrix is zero by the principle of\r\n(4464 more lines below)\r\n",
                "extras": {
                    "code": "open_file('/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py', 1072, 100)"
                }
            }
        ],
        [
            {
                "id": 13,
                "timestamp": "2024-07-19T00:25:47.068075",
                "source": "agent",
                "message": "Running Python code interactively: edit_file_by_replace(\n    '/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py',\n    to_replace=\"\"\"    @property\n    def is_upper(self):\n        \\\"\\\"\\\"Check if matrix is an upper triangular matrix. True can be returned\n        even if the matrix is not square.\n\n        Examples\n        ========\n\n        >>> from sympy import Matrix\n        >>> m = Matrix(2, 2, [1, 0, 0, 1])\n        >>> m\n        Matrix([\n        [1, 0],\n        [0, 1]])\n        >>> m.is_upper\n        True\n\n        >>> m = Matrix(4, 3, [5, 1, 9, 0, 4 , 6, 0, 0, 5, 0, 0, 0])\n        >>> m\n        Matrix([\n        [5, 1, 9],\n        [0, 4, 6],\n        [0, 0, 5],\n        [0, 0, 0]])\n        >>> m.is_upper\n        True\n\n        >>> m = Matrix(2, 3, [4, 2, 5, 6, 1, 1])\n        >>> m\n        Matrix([\n        [4, 2, 5],\n        [6, 1, 1]])\n        >>> m.is_upper\n        False\n\n        See Also\n        ========\n\n        is_lower\n        is_diagonal\n        is_upper_hessenberg\n        \\\"\\\"\\\"\n        return all(self[i, j].is_zero\n                   for i in range(1, self.rows)\n                   for j in range(i))\"\"\",\n    new_content=\"\"\"    @property\n    def is_upper(self):\n        \\\"\\\"\\\"Check if matrix is an upper triangular matrix. True can be returned\n        even if the matrix is not square.\n\n        Examples\n        ========\n\n        >>> from sympy import Matrix\n        >>> m = Matrix(2, 2, [1, 0, 0, 1])\n        >>> m\n        Matrix([\n        [1, 0],\n        [0, 1]])\n        >>> m.is_upper\n        True\n\n        >>> m = Matrix(4, 3, [5, 1, 9, 0, 4 , 6, 0, 0, 5, 0, 0, 0])\n        >>> m\n        Matrix([\n        [5, 1, 9],\n        [0, 4, 6],\n        [0, 0, 5],\n        [0, 0, 0]])\n        >>> m.is_upper\n        True\n\n        >>> m = Matrix(2, 3, [4, 2, 5, 6, 1, 1])\n        >>> m\n        Matrix([\n        [4, 2, 5],\n        [6, 1, 1]])\n        >>> m.is_upper\n        False\n\n        See Also\n        ========\n\n        is_lower\n        is_diagonal\n        is_upper_hessenberg\n        \\\"\\\"\\\"\n        return all(self[i, j].is_zero\n                   for i in range(1, self.rows)\n                   for j in range(min(i, self.cols)))\"\"\"\n)",
                "action": "run_ipython",
                "args": {
                    "code": "edit_file_by_replace(\n    '/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py',\n    to_replace=\"\"\"    @property\n    def is_upper(self):\n        \\\"\\\"\\\"Check if matrix is an upper triangular matrix. True can be returned\n        even if the matrix is not square.\n\n        Examples\n        ========\n\n        >>> from sympy import Matrix\n        >>> m = Matrix(2, 2, [1, 0, 0, 1])\n        >>> m\n        Matrix([\n        [1, 0],\n        [0, 1]])\n        >>> m.is_upper\n        True\n\n        >>> m = Matrix(4, 3, [5, 1, 9, 0, 4 , 6, 0, 0, 5, 0, 0, 0])\n        >>> m\n        Matrix([\n        [5, 1, 9],\n        [0, 4, 6],\n        [0, 0, 5],\n        [0, 0, 0]])\n        >>> m.is_upper\n        True\n\n        >>> m = Matrix(2, 3, [4, 2, 5, 6, 1, 1])\n        >>> m\n        Matrix([\n        [4, 2, 5],\n        [6, 1, 1]])\n        >>> m.is_upper\n        False\n\n        See Also\n        ========\n\n        is_lower\n        is_diagonal\n        is_upper_hessenberg\n        \\\"\\\"\\\"\n        return all(self[i, j].is_zero\n                   for i in range(1, self.rows)\n                   for j in range(i))\"\"\",\n    new_content=\"\"\"    @property\n    def is_upper(self):\n        \\\"\\\"\\\"Check if matrix is an upper triangular matrix. True can be returned\n        even if the matrix is not square.\n\n        Examples\n        ========\n\n        >>> from sympy import Matrix\n        >>> m = Matrix(2, 2, [1, 0, 0, 1])\n        >>> m\n        Matrix([\n        [1, 0],\n        [0, 1]])\n        >>> m.is_upper\n        True\n\n        >>> m = Matrix(4, 3, [5, 1, 9, 0, 4 , 6, 0, 0, 5, 0, 0, 0])\n        >>> m\n        Matrix([\n        [5, 1, 9],\n        [0, 4, 6],\n        [0, 0, 5],\n        [0, 0, 0]])\n        >>> m.is_upper\n        True\n\n        >>> m = Matrix(2, 3, [4, 2, 5, 6, 1, 1])\n        >>> m\n        Matrix([\n        [4, 2, 5],\n        [6, 1, 1]])\n        >>> m.is_upper\n        False\n\n        See Also\n        ========\n\n        is_lower\n        is_diagonal\n        is_upper_hessenberg\n        \\\"\\\"\\\"\n        return all(self[i, j].is_zero\n                   for i in range(1, self.rows)\n                   for j in range(min(i, self.cols)))\"\"\"\n)",
                    "thought": "Thank you for providing the implementation of the `is_upper` method. I can see the issue now. The problem occurs because the method is trying to access elements that don't exist in a non-square matrix. Let's fix this by adjusting the range of `j` to ensure we don't go out of bounds.\n\nHere's the corrected implementation:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 14,
                "timestamp": "2024-07-19T00:25:48.128263",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 13,
                "observation": "run_ipython",
                "content": "[File: /workspace/sympy__sympy__1.0/sympy/matrices/matrices.py (5586 lines total after edit)]\r\n(1020 more lines above)\r\n1021|        >>> m.is_symmetric()\r\n1022|        True\r\n1023|\r\n1024|        If the matrix is already simplified, you may speed-up is_symmetric()\r\n1025|        test by using 'simplify=False'.\r\n1026|\r\n1027|        >>> bool(m.is_symmetric(simplify=False))\r\n1028|        False\r\n1029|        >>> m1 = m.expand()\r\n1030|        >>> m1.is_symmetric(simplify=False)\r\n1031|        True\r\n1032|        \"\"\"\r\n1033|        simpfunc = simplify\r\n1034|        if not isinstance(simplify, FunctionType):\r\n1035|            simpfunc = _simplify if simplify else lambda x: x\r\n1036|\r\n1037|        if not self.is_square:\r\n1038|            return False\r\n1039|\r\n1040|        return self._eval_is_symmetric(simpfunc)\r\n1041|\r\n1042|    @property\r\n1043|    def is_upper_hessenberg(self):\r\n1044|        \"\"\"Checks if the matrix is the upper-Hessenberg form.\r\n1045|\r\n1046|        The upper hessenberg matrix has zero entries\r\n1047|        below the first subdiagonal.\r\n1048|\r\n1049|        Examples\r\n1050|        ========\r\n1051|\r\n1052|        >>> from sympy.matrices import Matrix\r\n1053|        >>> a = Matrix([[1, 4, 2, 3], [3, 4, 1, 7], [0, 2, 3, 4], [0, 0, 1, 3]])\r\n1054|        >>> a\r\n1055|        Matrix([\r\n1056|        [1, 4, 2, 3],\r\n1057|        [3, 4, 1, 7],\r\n1058|        [0, 2, 3, 4],\r\n1059|        [0, 0, 1, 3]])\r\n1060|        >>> a.is_upper_hessenberg\r\n1061|        True\r\n1062|\r\n1063|        See Also\r\n1064|        ========\r\n1065|\r\n1066|        is_lower_hessenberg\r\n1067|        is_upper\r\n1068|        \"\"\"\r\n1069|        return self._eval_is_upper_hessenberg()\r\n1070|\r\n1071|    @property\r\n1072|    def is_upper(self):\r\n1073|        \"\"\"Check if matrix is an upper triangular matrix. True can be returned\r\n1074|        even if the matrix is not square.\r\n1075|\r\n1076|        Examples\r\n1077|        ========\r\n1078|\r\n1079|        >>> from sympy import Matrix\r\n1080|        >>> m = Matrix(2, 2, [1, 0, 0, 1])\r\n1081|        >>> m\r\n1082|        Matrix([\r\n1083|        [1, 0],\r\n1084|        [0, 1]])\r\n1085|        >>> m.is_upper\r\n1086|        True\r\n1087|\r\n1088|        >>> m = Matrix(4, 3, [5, 1, 9, 0, 4 , 6, 0, 0, 5, 0, 0, 0])\r\n1089|        >>> m\r\n1090|        Matrix([\r\n1091|        [5, 1, 9],\r\n1092|        [0, 4, 6],\r\n1093|        [0, 0, 5],\r\n1094|        [0, 0, 0]])\r\n1095|        >>> m.is_upper\r\n1096|        True\r\n1097|\r\n1098|        >>> m = Matrix(2, 3, [4, 2, 5, 6, 1, 1])\r\n1099|        >>> m\r\n1100|        Matrix([\r\n1101|        [4, 2, 5],\r\n1102|        [6, 1, 1]])\r\n1103|        >>> m.is_upper\r\n1104|        False\r\n1105|\r\n1106|        See Also\r\n1107|        ========\r\n1108|\r\n1109|        is_lower\r\n1110|        is_diagonal\r\n1111|        is_upper_hessenberg\r\n1112|        \"\"\"\r\n1113|        return all(self[i, j].is_zero\r\n1114|                   for i in range(1, self.rows)\r\n1115|                   for j in range(min(i, self.cols)))\r\n1116|\r\n1117|    @property\r\n1118|    def is_zero(self):\r\n1119|        \"\"\"Checks if a matrix is a zero matrix.\r\n1120|\r\n1121|        A matrix is zero if every element is zero.  A matrix need not be square\r\n(4465 more lines below)\r\n[File updated (edited at line 1071). Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.]\r\n",
                "extras": {
                    "code": "edit_file_by_replace(\n    '/workspace/sympy__sympy__1.0/sympy/matrices/matrices.py',\n    to_replace=\"\"\"    @property\n    def is_upper(self):\n        \\\"\\\"\\\"Check if matrix is an upper triangular matrix. True can be returned\n        even if the matrix is not square.\n\n        Examples\n        ========\n\n        >>> from sympy import Matrix\n        >>> m = Matrix(2, 2, [1, 0, 0, 1])\n        >>> m\n        Matrix([\n        [1, 0],\n        [0, 1]])\n        >>> m.is_upper\n        True\n\n        >>> m = Matrix(4, 3, [5, 1, 9, 0, 4 , 6, 0, 0, 5, 0, 0, 0])\n        >>> m\n        Matrix([\n        [5, 1, 9],\n        [0, 4, 6],\n        [0, 0, 5],\n        [0, 0, 0]])\n        >>> m.is_upper\n        True\n\n        >>> m = Matrix(2, 3, [4, 2, 5, 6, 1, 1])\n        >>> m\n        Matrix([\n        [4, 2, 5],\n        [6, 1, 1]])\n        >>> m.is_upper\n        False\n\n        See Also\n        ========\n\n        is_lower\n        is_diagonal\n        is_upper_hessenberg\n        \\\"\\\"\\\"\n        return all(self[i, j].is_zero\n                   for i in range(1, self.rows)\n                   for j in range(i))\"\"\",\n    new_content=\"\"\"    @property\n    def is_upper(self):\n        \\\"\\\"\\\"Check if matrix is an upper triangular matrix. True can be returned\n        even if the matrix is not square.\n\n        Examples\n        ========\n\n        >>> from sympy import Matrix\n        >>> m = Matrix(2, 2, [1, 0, 0, 1])\n        >>> m\n        Matrix([\n        [1, 0],\n        [0, 1]])\n        >>> m.is_upper\n        True\n\n        >>> m = Matrix(4, 3, [5, 1, 9, 0, 4 , 6, 0, 0, 5, 0, 0, 0])\n        >>> m\n        Matrix([\n        [5, 1, 9],\n        [0, 4, 6],\n        [0, 0, 5],\n        [0, 0, 0]])\n        >>> m.is_upper\n        True\n\n        >>> m = Matrix(2, 3, [4, 2, 5, 6, 1, 1])\n        >>> m\n        Matrix([\n        [4, 2, 5],\n        [6, 1, 1]])\n        >>> m.is_upper\n        False\n\n        See Also\n        ========\n\n        is_lower\n        is_diagonal\n        is_upper_hessenberg\n        \\\"\\\"\\\"\n        return all(self[i, j].is_zero\n                   for i in range(1, self.rows)\n                   for j in range(min(i, self.cols)))\"\"\"\n)"
                }
            }
        ],
        [
            {
                "id": 15,
                "timestamp": "2024-07-19T00:25:51.032024",
                "source": "agent",
                "message": "Running Python code interactively: import sympy\n\n# Create a 4x2 matrix of zeros\nmatrix = sympy.zeros(4, 2)\n\n# Test the is_upper property\nprint(matrix.is_upper)",
                "action": "run_ipython",
                "args": {
                    "code": "import sympy\n\n# Create a 4x2 matrix of zeros\nmatrix = sympy.zeros(4, 2)\n\n# Test the is_upper property\nprint(matrix.is_upper)",
                    "thought": "Thank you for confirming the changes. The modification looks correct. Now let's test if this change resolves the issue.",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 16,
                "timestamp": "2024-07-19T00:25:51.559538",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 15,
                "observation": "run_ipython",
                "content": "---------------------------------------------------------------------------\r\nModuleNotFoundError                       Traceback (most recent call last)\r\nCell In[1], line 1\r\n----> 1 import sympy\r\n      3 # Create a 4x2 matrix of zeros\r\n      4 matrix = sympy.zeros(4, 2)\r\n\r\nModuleNotFoundError: No module named 'sympy'",
                "extras": {
                    "code": "import sympy\n\n# Create a 4x2 matrix of zeros\nmatrix = sympy.zeros(4, 2)\n\n# Test the is_upper property\nprint(matrix.is_upper)"
                }
            }
        ],
        [
            {
                "id": 17,
                "timestamp": "2024-07-19T00:25:53.730485",
                "source": "agent",
                "message": "Running command: pip install sympy",
                "action": "run",
                "args": {
                    "command": "pip install sympy",
                    "thought": "I apologize for the oversight. It seems that SymPy is not installed in the current environment. Let's install it first.",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 18,
                "timestamp": "2024-07-19T00:25:54.340174",
                "source": "agent",
                "message": "Command `pip install sympy` executed with exit code 0.",
                "cause": 17,
                "observation": "run",
                "content": "[Package already installed]",
                "extras": {
                    "command_id": -1,
                    "command": "pip install sympy",
                    "exit_code": 0
                }
            }
        ],
        [
            {
                "id": 19,
                "timestamp": "2024-07-19T00:25:56.963174",
                "source": "agent",
                "message": "Running Python code interactively: import sympy\n\n# Create a 4x2 matrix of zeros\nmatrix = sympy.zeros(4, 2)\n\n# Test the is_upper property\nprint(matrix.is_upper)",
                "action": "run_ipython",
                "args": {
                    "code": "import sympy\n\n# Create a 4x2 matrix of zeros\nmatrix = sympy.zeros(4, 2)\n\n# Test the is_upper property\nprint(matrix.is_upper)",
                    "thought": "I apologize for the confusion. It seems SymPy is already installed. Let's try importing it again and testing our changes.",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 20,
                "timestamp": "2024-07-19T00:25:57.416777",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 19,
                "observation": "run_ipython",
                "content": "---------------------------------------------------------------------------\r\nModuleNotFoundError                       Traceback (most recent call last)\r\nCell In[1], line 1\r\n----> 1 import sympy\r\n      3 # Create a 4x2 matrix of zeros\r\n      4 matrix = sympy.zeros(4, 2)\r\n\r\nModuleNotFoundError: No module named 'sympy'",
                "extras": {
                    "code": "import sympy\n\n# Create a 4x2 matrix of zeros\nmatrix = sympy.zeros(4, 2)\n\n# Test the is_upper property\nprint(matrix.is_upper)"
                }
            }
        ],
        [
            {
                "id": 21,
                "timestamp": "2024-07-19T00:25:59.813019",
                "source": "agent",
                "message": "Running command: python -c \"import sys; print(sys.path)\"",
                "action": "run",
                "args": {
                    "command": "python -c \"import sys; print(sys.path)\"",
                    "thought": "I apologize for the persistent issue. It seems that there might be a problem with the Python environment or the SymPy installation. Let's try to diagnose the issue.\n\nFirst, let's check the Python path:",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 22,
                "timestamp": "2024-07-19T00:25:59.975818",
                "source": "agent",
                "message": "Command `python -c \"import sys; print(sys.path)\"` executed with exit code 0.",
                "cause": 21,
                "observation": "run",
                "content": "['', '/opendevin/plugins/agent_skills', '/workspace/sympy__sympy__1.0', '/opt/miniconda3/envs/testbed/lib/python39.zip', '/opt/miniconda3/envs/testbed/lib/python3.9', '/opt/miniconda3/envs/testbed/lib/python3.9/lib-dynload', '/opt/miniconda3/envs/testbed/lib/python3.9/site-packages', '/testbed']",
                "extras": {
                    "command_id": -1,
                    "command": "python -c \"import sys; print(sys.path)\"",
                    "exit_code": 0
                }
            }
        ],
        [
            {
                "id": 23,
                "timestamp": "2024-07-19T00:26:02.541699",
                "source": "agent",
                "message": "Running command: find / -name \"sympy\" 2>/dev/null",
                "action": "run",
                "args": {
                    "command": "find / -name \"sympy\" 2>/dev/null",
                    "thought": "Thank you for providing the Python path. It seems that the SymPy package might not be in the Python path. Let's try to locate the SymPy installation:",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 24,
                "timestamp": "2024-07-19T00:26:06.708888",
                "source": "agent",
                "message": "Command `find / -name \"sympy\" 2>/dev/null` executed with exit code 0.",
                "cause": 23,
                "observation": "run",
                "content": "/workspace/sympy__sympy__1.0/sympy\r\n/testbed/sympy",
                "extras": {
                    "command_id": -1,
                    "command": "find / -name \"sympy\" 2>/dev/null",
                    "exit_code": 0
                }
            }
        ],
        [
            {
                "id": 25,
                "timestamp": "2024-07-19T00:26:09.834265",
                "source": "agent",
                "message": "Running Python code interactively: import sys\nsys.path.append('/workspace/sympy__sympy__1.0')\nimport sympy\n\n# Create a 4x2 matrix of zeros\nmatrix = sympy.zeros(4, 2)\n\n# Test the is_upper property\nprint(matrix.is_upper)",
                "action": "run_ipython",
                "args": {
                    "code": "import sys\nsys.path.append('/workspace/sympy__sympy__1.0')\nimport sympy\n\n# Create a 4x2 matrix of zeros\nmatrix = sympy.zeros(4, 2)\n\n# Test the is_upper property\nprint(matrix.is_upper)",
                    "thought": "Thank you for the information. It appears that SymPy is located in the `/workspace/sympy__sympy__1.0/sympy` directory. Let's try to add this directory to the Python path and then import SymPy.",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 26,
                "timestamp": "2024-07-19T00:26:10.293477",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 25,
                "observation": "run_ipython",
                "content": "---------------------------------------------------------------------------\r\nModuleNotFoundError                       Traceback (most recent call last)\r\nFile /workspace/sympy__sympy__1.0/sympy/__init__.py:18\r\n     17 try:\r\n---> 18     import mpmath\r\n     19 except ImportError:\r\n\r\nModuleNotFoundError: No module named 'mpmath'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nImportError                               Traceback (most recent call last)\r\nCell In[1], line 3\r\n      1 import sys\r\n      2 sys.path.append('/workspace/sympy__sympy__1.0')\r\n----> 3 import sympy\r\n      5 # Create a 4x2 matrix of zeros\r\n      6 matrix = sympy.zeros(4, 2)\r\n\r\nFile /workspace/sympy__sympy__1.0/sympy/__init__.py:20\r\n     18     import mpmath\r\n     19 except ImportError:\r\n---> 20     raise ImportError(\"SymPy now depends on mpmath as an external library. \"\r\n     21     \"See http://docs.sympy.org/latest/install.html#mpmath for more information.\")\r\n     23 del mpmath\r\n     25 from sympy.release import __version__\r\n\r\nImportError: SymPy now depends on mpmath as an external library. See http://docs.sympy.org/latest/install.html#mpmath for more information.",
                "extras": {
                    "code": "import sys\nsys.path.append('/workspace/sympy__sympy__1.0')\nimport sympy\n\n# Create a 4x2 matrix of zeros\nmatrix = sympy.zeros(4, 2)\n\n# Test the is_upper property\nprint(matrix.is_upper)"
                }
            }
        ],
        [
            {
                "id": 27,
                "timestamp": "2024-07-19T00:26:12.572481",
                "source": "agent",
                "message": "Running command: pip install mpmath",
                "action": "run",
                "args": {
                    "command": "pip install mpmath",
                    "thought": "I apologize for the oversight. It seems that SymPy depends on the mpmath library, which is not installed. Let's install mpmath and then try again.",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 28,
                "timestamp": "2024-07-19T00:26:13.163888",
                "source": "agent",
                "message": "Command `pip install mpmath` executed with exit code 0.",
                "cause": 27,
                "observation": "run",
                "content": "[Package already installed]",
                "extras": {
                    "command_id": -1,
                    "command": "pip install mpmath",
                    "exit_code": 0
                }
            }
        ],
        [
            {
                "id": 29,
                "timestamp": "2024-07-19T00:26:15.773474",
                "source": "agent",
                "message": "Running command: python3 -c \"import sympy; matrix = sympy.zeros(4, 2); print(matrix.is_upper)\"",
                "action": "run",
                "args": {
                    "command": "python3 -c \"import sympy; matrix = sympy.zeros(4, 2); print(matrix.is_upper)\"",
                    "thought": "I apologize for the confusion. It seems that both SymPy and mpmath are installed, but there might be an issue with the Python environment. Let's try to use the system-wide Python installation instead of the one in the current environment.",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 30,
                "timestamp": "2024-07-19T00:26:16.782024",
                "source": "agent",
                "message": "Command `python3 -c \"import sympy; matrix = sympy.zeros(4, 2); print(matrix.is_upper)\"` executed with exit code 0.",
                "cause": 29,
                "observation": "run",
                "content": "/workspace/sympy__sympy__1.0/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\r\n  from collections import Mapping\r\n/workspace/sympy__sympy__1.0/sympy/solvers/diophantine.py:3188: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\r\n  if feasible is 1:  # it's prime and k == 2\r\n/workspace/sympy__sympy__1.0/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\r\n  from collections import Callable\r\nTrue",
                "extras": {
                    "command_id": -1,
                    "command": "python3 -c \"import sympy; matrix = sympy.zeros(4, 2); print(matrix.is_upper)\"",
                    "exit_code": 0
                }
            }
        ],
        [
            {
                "id": 31,
                "timestamp": "2024-07-19T00:26:22.363530",
                "source": "agent",
                "message": "Running command: python3 -c \"\nimport sympy\n\n# Test case 1: 4x2 zero matrix (should be True)\nmatrix1 = sympy.zeros(4, 2)\nprint('4x2 zero matrix is upper:', matrix1.is_upper)\n\n# Test case 2: 4x2 non-zero matrix (should be False)\nmatrix2 = sympy.Matrix([[1, 2], [3, 4], [5, 6], [7, 8]])\nprint('4x2 non-zero matrix is upper:', matrix2.is_upper)\n\n# Test case 3: 2x4 upper triangular matrix (should be True)\nmatrix3 = sympy.Matrix([[1, 2, 3, 4], [0, 5, 6, 7]])\nprint('2x4 upper triangular matrix is upper:', matrix3.is_upper)\n\n# Test case 4: 3x3 upper triangular matrix (should be True)\nmatrix4 = sympy.Matrix([[1, 2, 3], [0, 4, 5], [0, 0, 6]])\nprint('3x3 upper triangular matrix is upper:', matrix4.is_upper)\n\"",
                "action": "run",
                "args": {
                    "command": "python3 -c \"\nimport sympy\n\n# Test case 1: 4x2 zero matrix (should be True)\nmatrix1 = sympy.zeros(4, 2)\nprint('4x2 zero matrix is upper:', matrix1.is_upper)\n\n# Test case 2: 4x2 non-zero matrix (should be False)\nmatrix2 = sympy.Matrix([[1, 2], [3, 4], [5, 6], [7, 8]])\nprint('4x2 non-zero matrix is upper:', matrix2.is_upper)\n\n# Test case 3: 2x4 upper triangular matrix (should be True)\nmatrix3 = sympy.Matrix([[1, 2, 3, 4], [0, 5, 6, 7]])\nprint('2x4 upper triangular matrix is upper:', matrix3.is_upper)\n\n# Test case 4: 3x3 upper triangular matrix (should be True)\nmatrix4 = sympy.Matrix([[1, 2, 3], [0, 4, 5], [0, 0, 6]])\nprint('3x3 upper triangular matrix is upper:', matrix4.is_upper)\n\"",
                    "thought": "Thank you for running that command. It appears that the issue has been resolved, and the `is_upper` property is working correctly for the 4x2 zero matrix. The output `True` indicates that our fix was successful.\n\nLet's verify the fix by testing a few more cases:",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 32,
                "timestamp": "2024-07-19T00:26:22.765122",
                "source": "agent",
                "message": "Command `python3 -c \"\nimport sympy\n\n# Test case 1: 4x2 zero matrix (should be True)\nmatrix1 = sympy.zeros(4, 2)\nprint('4x2 zero matrix is upper:', matrix1.is_upper)\n\n# Test case 2: 4x2 non-zero matrix (should be False)\nmatrix2 = sympy.Matrix([[1, 2], [3, 4], [5, 6], [7, 8]])\nprint('4x2 non-zero matrix is upper:', matrix2.is_upper)\n\n# Test case 3: 2x4 upper triangular matrix (should be True)\nmatrix3 = sympy.Matrix([[1, 2, 3, 4], [0, 5, 6, 7]])\nprint('2x4 upper triangular matrix is upper:', matrix3.is_upper)\n\n# Test case 4: 3x3 upper triangular matrix (should be True)\nmatrix4 = sympy.Matrix([[1, 2, 3], [0, 4, 5], [0, 0, 6]])\nprint('3x3 upper triangular matrix is upper:', matrix4.is_upper)\n\"` executed with exit code 0.",
                "cause": 31,
                "observation": "run",
                "content": "> > > > > > > > > > > > > > > > > > /workspace/sympy__sympy__1.0/sympy/core/basic.py:3: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\r\n  from collections import Mapping\r\n/workspace/sympy__sympy__1.0/sympy/plotting/plot.py:28: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working\r\n  from collections import Callable\r\n4x2 zero matrix is upper: True\r\n4x2 non-zero matrix is upper: False\r\n2x4 upper triangular matrix is upper: True\r\n3x3 upper triangular matrix is upper: True",
                "extras": {
                    "command_id": -1,
                    "command": "python3 -c \"\nimport sympy\n\n# Test case 1: 4x2 zero matrix (should be True)\nmatrix1 = sympy.zeros(4, 2)\nprint('4x2 zero matrix is upper:', matrix1.is_upper)\n\n# Test case 2: 4x2 non-zero matrix (should be False)\nmatrix2 = sympy.Matrix([[1, 2], [3, 4], [5, 6], [7, 8]])\nprint('4x2 non-zero matrix is upper:', matrix2.is_upper)\n\n# Test case 3: 2x4 upper triangular matrix (should be True)\nmatrix3 = sympy.Matrix([[1, 2, 3, 4], [0, 5, 6, 7]])\nprint('2x4 upper triangular matrix is upper:', matrix3.is_upper)\n\n# Test case 4: 3x3 upper triangular matrix (should be True)\nmatrix4 = sympy.Matrix([[1, 2, 3], [0, 4, 5], [0, 0, 6]])\nprint('3x3 upper triangular matrix is upper:', matrix4.is_upper)\n\"",
                    "exit_code": 0
                }
            }
        ],
        [
            {
                "id": 33,
                "timestamp": "2024-07-19T00:26:28.554580",
                "source": "agent",
                "message": "Thank you for running those test cases. The results show that our fix for the `is_upper` method is working correctly for various matrix sizes and types:\n\n1. The 4x2 zero matrix is correctly identified as upper triangular.\n2. The 4x2 non-zero matrix with non-zero elements below the main diagonal is correctly identified as not upper triangular.\n3. The 2x4 upper triangular matrix is correctly identified as upper triangular.\n4. The 3x3 upper triangular matrix is correctly identified as upper triangular.\n\nThese results confirm that our modification to the `is_upper` method has successfully resolved the issue with non-square matrices, including the original 4x2 zero matrix case.\n\nTo summarize the fix:\n1. We identified the problem in the `is_upper` method where it was trying to access elements outside the matrix bounds for non-square matrices.\n2. We modified the method to use `min(i, self.cols)` as the upper bound for the inner loop, ensuring that we don't attempt to access non-existent elements.\n3. We tested the fix with various matrix sizes and types, confirming that it works correctly for both square and non-square matrices.\n\nThe issue has been successfully resolved, and the `is_upper` method now works correctly for matrices of all sizes.",
                "action": "finish",
                "args": {
                    "outputs": {},
                    "thought": "Thank you for running those test cases. The results show that our fix for the `is_upper` method is working correctly for various matrix sizes and types:\n\n1. The 4x2 zero matrix is correctly identified as upper triangular.\n2. The 4x2 non-zero matrix with non-zero elements below the main diagonal is correctly identified as not upper triangular.\n3. The 2x4 upper triangular matrix is correctly identified as upper triangular.\n4. The 3x3 upper triangular matrix is correctly identified as upper triangular.\n\nThese results confirm that our modification to the `is_upper` method has successfully resolved the issue with non-square matrices, including the original 4x2 zero matrix case.\n\nTo summarize the fix:\n1. We identified the problem in the `is_upper` method where it was trying to access elements outside the matrix bounds for non-square matrices.\n2. We modified the method to use `min(i, self.cols)` as the upper bound for the inner loop, ensuring that we don't attempt to access non-existent elements.\n3. We tested the fix with various matrix sizes and types, confirming that it works correctly for both square and non-square matrices.\n\nThe issue has been successfully resolved, and the `is_upper` method now works correctly for matrices of all sizes."
                }
            },
            {
                "message": "No observation",
                "observation": "null",
                "content": "",
                "extras": {}
            }
        ]
    ],
    "info": {
        "submission": "diff --git a/sympy/matrices/.backup.matrices.py b/sympy/matrices/.backup.matrices.py\r\nnew file mode 100644\r\nindex 0000000000..90ea232faf\r\n--- /dev/null\r\n+++ b/sympy/matrices/.backup.matrices.py\r\n@@ -0,0 +1,5586 @@\r\n+from __future__ import print_function, division\r\n+\r\n+import collections\r\n+from sympy.core.add import Add\r\n+from sympy.core.basic import Basic, Atom\r\n+from sympy.core.expr import Expr\r\n+from sympy.core.function import count_ops\r\n+from sympy.core.logic import fuzzy_and\r\n+from sympy.core.power import Pow\r\n+from sympy.core.symbol import Symbol, Dummy, symbols\r\n+from sympy.core.numbers import Integer, ilcm, Float\r\n+from sympy.core.singleton import S\r\n+from sympy.core.sympify import sympify\r\n+from sympy.core.compatibility import is_sequence, default_sort_key, range, \\\r\n+    NotIterable\r\n+\r\n+from sympy.polys import PurePoly, roots, cancel, gcd\r\n+from sympy.simplify import simplify as _simplify, signsimp, nsimplify\r\n+from sympy.utilities.iterables import flatten, numbered_symbols\r\n+from sympy.functions.elementary.miscellaneous import sqrt, Max, Min\r\n+from sympy.functions import exp, factorial\r\n+from sympy.printing import sstr\r\n+from sympy.core.compatibility import reduce, as_int, string_types\r\n+from sympy.assumptions.refine import refine\r\n+from sympy.core.decorators import call_highest_priority\r\n+from sympy.core.decorators import deprecated\r\n+from sympy.utilities.exceptions import SymPyDeprecationWarning\r\n+\r\n+from types import FunctionType\r\n+\r\n+\r\n+def _iszero(x):\r\n+    \"\"\"Returns True if x is zero.\"\"\"\r\n+    return x.is_zero\r\n+\r\n+\r\n+class MatrixError(Exception):\r\n+    pass\r\n+\r\n+\r\n+class ShapeError(ValueError, MatrixError):\r\n+    \"\"\"Wrong matrix shape\"\"\"\r\n+    pass\r\n+\r\n+\r\n+class NonSquareMatrixError(ShapeError):\r\n+    pass\r\n+\r\n+\r\n+class DeferredVector(Symbol, NotIterable):\r\n+    \"\"\"A vector whose components are deferred (e.g. for use with lambdify)\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy import DeferredVector, lambdify\r\n+    >>> X = DeferredVector( 'X' )\r\n+    >>> X\r\n+    X\r\n+    >>> expr = (X[0] + 2, X[2] + 3)\r\n+    >>> func = lambdify( X, expr)\r\n+    >>> func( [1, 2, 3] )\r\n+    (3, 6)\r\n+    \"\"\"\r\n+\r\n+    def __getitem__(self, i):\r\n+        if i == -0:\r\n+            i = 0\r\n+        if i < 0:\r\n+            raise IndexError('DeferredVector index out of range')\r\n+        component_name = '%s[%d]' % (self.name, i)\r\n+        return Symbol(component_name)\r\n+\r\n+    def __str__(self):\r\n+        return sstr(self)\r\n+\r\n+    def __repr__(self):\r\n+        return \"DeferredVector('%s')\" % (self.name)\r\n+\r\n+\r\n+class MatrixRequired(object):\r\n+    \"\"\"All subclasses of matrix objects must implement the\r\n+    required matrix properties listed here.\"\"\"\r\n+    rows = None\r\n+    cols = None\r\n+    shape = None\r\n+    _simplify = None\r\n+\r\n+    @classmethod\r\n+    def _new(cls, *args, **kwargs):\r\n+        \"\"\"`_new` must, at minimum, be callable as\r\n+        `_new(rows, cols, mat) where mat is a flat list of the\r\n+        elements of the matrix.\"\"\"\r\n+        raise NotImplementedError(\"Subclasses must implement this.\")\r\n+\r\n+    def __eq__(self, other):\r\n+        raise NotImplementedError(\"Subclasses must impliment this.\")\r\n+\r\n+    def __getitem__(self, key):\r\n+        \"\"\"Implementations of __getitem__ should accept ints, in which\r\n+        case the matrix is indexed as a flat list, tuples (i,j) in which\r\n+        case the (i,j) entry is returned, slices, or mixed tuples (a,b)\r\n+        where a and b are any combintion of slices and integers.\"\"\"\r\n+        raise NotImplementedError(\"Subclasses must implement this.\")\r\n+\r\n+    def __len__(self):\r\n+        \"\"\"The total number of entries in the matrix.\"\"\"\r\n+        raise NotImplementedError(\"Subclasses must implement this.\")\r\n+\r\n+\r\n+class MatrixShaping(MatrixRequired):\r\n+    \"\"\"Provides basic matrix shaping and extracting of submatrices\"\"\"\r\n+\r\n+    def _eval_col_insert(self, pos, other):\r\n+        cols = self.cols\r\n+\r\n+        def entry(i, j):\r\n+            if j < pos:\r\n+                return self[i, j]\r\n+            elif pos <= j < pos + other.cols:\r\n+                return other[i, j - pos]\r\n+            return self[i, j - pos - other.cols]\r\n+\r\n+        return self._new(self.rows, self.cols + other.cols,\r\n+                         lambda i, j: entry(i, j))\r\n+\r\n+    def _eval_col_join(self, other):\r\n+        rows = self.rows\r\n+\r\n+        def entry(i, j):\r\n+            if i < rows:\r\n+                return self[i, j]\r\n+            return other[i - rows, j]\r\n+\r\n+        return classof(self, other)._new(self.rows + other.rows, self.cols,\r\n+                                         lambda i, j: entry(i, j))\r\n+\r\n+    def _eval_extract(self, rowsList, colsList):\r\n+        mat = list(self)\r\n+        cols = self.cols\r\n+        indices = (i * cols + j for i in rowsList for j in colsList)\r\n+        return self._new(len(rowsList), len(colsList),\r\n+                         list(mat[i] for i in indices))\r\n+\r\n+    def _eval_get_diag_blocks(self):\r\n+        sub_blocks = []\r\n+\r\n+        def recurse_sub_blocks(M):\r\n+            i = 1\r\n+            while i <= M.shape[0]:\r\n+                if i == 1:\r\n+                    to_the_right = M[0, i:]\r\n+                    to_the_bottom = M[i:, 0]\r\n+                else:\r\n+                    to_the_right = M[:i, i:]\r\n+                    to_the_bottom = M[i:, :i]\r\n+                if any(to_the_right) or any(to_the_bottom):\r\n+                    i += 1\r\n+                    continue\r\n+                else:\r\n+                    sub_blocks.append(M[:i, :i])\r\n+                    if M.shape == M[:i, :i].shape:\r\n+                        return\r\n+                    else:\r\n+                        recurse_sub_blocks(M[i:, i:])\r\n+                        return\r\n+\r\n+        recurse_sub_blocks(self)\r\n+        return sub_blocks\r\n+\r\n+    def _eval_row_insert(self, pos, other):\r\n+        entries = list(self)\r\n+        insert_pos = pos * self.cols\r\n+        entries[insert_pos:insert_pos] = list(other)\r\n+        return self._new(self.rows + other.rows, self.cols, entries)\r\n+\r\n+    def _eval_row_join(self, other):\r\n+        cols = self.cols\r\n+\r\n+        def entry(i, j):\r\n+            if j < cols:\r\n+                return self[i, j]\r\n+            return other[i, j - cols]\r\n+\r\n+        return classof(self, other)._new(self.rows, self.cols + other.cols,\r\n+                                         lambda i, j: entry(i, j))\r\n+\r\n+    def _eval_tolist(self):\r\n+        return [list(self[i,:]) for i in range(self.rows)]\r\n+\r\n+    def _eval_vec(self):\r\n+        rows = self.rows\r\n+\r\n+        def entry(n, _):\r\n+            # we want to read off the columns first\r\n+            j = n // rows\r\n+            i = n - j * rows\r\n+            return self[i, j]\r\n+\r\n+        return self._new(len(self), 1, entry)\r\n+\r\n+    def col_insert(self, pos, other):\r\n+        \"\"\"Insert one or more columns at the given column position.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import zeros, ones\r\n+        >>> M = zeros(3)\r\n+        >>> V = ones(3, 1)\r\n+        >>> M.col_insert(1, V)\r\n+        Matrix([\r\n+        [0, 1, 0, 0],\r\n+        [0, 1, 0, 0],\r\n+        [0, 1, 0, 0]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        col\r\n+        row_insert\r\n+        \"\"\"\r\n+        # Allows you to build a matrix even if it is null matrix\r\n+        if not self:\r\n+            return type(self)(other)\r\n+\r\n+        if pos < 0:\r\n+            pos = self.cols + pos\r\n+        if pos < 0:\r\n+            pos = 0\r\n+        elif pos > self.cols:\r\n+            pos = self.cols\r\n+\r\n+        if self.rows != other.rows:\r\n+            raise ShapeError(\r\n+                \"self and other must have the same number of rows.\")\r\n+\r\n+        return self._eval_col_insert(pos, other)\r\n+\r\n+    def col_join(self, other):\r\n+        \"\"\"Concatenates two matrices along self's last and other's first row.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import zeros, ones\r\n+        >>> M = zeros(3)\r\n+        >>> V = ones(1, 3)\r\n+        >>> M.col_join(V)\r\n+        Matrix([\r\n+        [0, 0, 0],\r\n+        [0, 0, 0],\r\n+        [0, 0, 0],\r\n+        [1, 1, 1]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        col\r\n+        row_join\r\n+        \"\"\"\r\n+        from sympy.matrices import MutableMatrix\r\n+        # Allows you to build a matrix even if it is null matrix\r\n+        if not self:\r\n+            return type(self)(other)\r\n+\r\n+        if self.cols != other.cols:\r\n+            raise ShapeError(\r\n+                \"`self` and `other` must have the same number of columns.\")\r\n+        return self._eval_col_join(other)\r\n+\r\n+    def col(self, j):\r\n+        \"\"\"Elementary column selector.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import eye\r\n+        >>> eye(2).col(0)\r\n+        Matrix([\r\n+        [1],\r\n+        [0]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        row\r\n+        col_op\r\n+        col_swap\r\n+        col_del\r\n+        col_join\r\n+        col_insert\r\n+        \"\"\"\r\n+        return self[:, j]\r\n+\r\n+    def extract(self, rowsList, colsList):\r\n+        \"\"\"Return a submatrix by specifying a list of rows and columns.\r\n+        Negative indices can be given. All indices must be in the range\r\n+        -n <= i < n where n is the number of rows or columns.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> m = Matrix(4, 3, range(12))\r\n+        >>> m\r\n+        Matrix([\r\n+        [0,  1,  2],\r\n+        [3,  4,  5],\r\n+        [6,  7,  8],\r\n+        [9, 10, 11]])\r\n+        >>> m.extract([0, 1, 3], [0, 1])\r\n+        Matrix([\r\n+        [0,  1],\r\n+        [3,  4],\r\n+        [9, 10]])\r\n+\r\n+        Rows or columns can be repeated:\r\n+\r\n+        >>> m.extract([0, 0, 1], [-1])\r\n+        Matrix([\r\n+        [2],\r\n+        [2],\r\n+        [5]])\r\n+\r\n+        Every other row can be taken by using range to provide the indices:\r\n+\r\n+        >>> m.extract(range(0, m.rows, 2), [-1])\r\n+        Matrix([\r\n+        [2],\r\n+        [8]])\r\n+\r\n+        RowsList or colsList can also be a list of booleans, in which case\r\n+        the rows or columns corresponding to the True values will be selected:\r\n+\r\n+        >>> m.extract([0, 1, 2, 3], [True, False, True])\r\n+        Matrix([\r\n+        [0,  2],\r\n+        [3,  5],\r\n+        [6,  8],\r\n+        [9, 11]])\r\n+        \"\"\"\r\n+\r\n+        if not is_sequence(rowsList) or not is_sequence(colsList):\r\n+            raise TypeError(\"rowsList and colsList must be iterable\")\r\n+        # ensure rowsList and colsList are lists of integers\r\n+        if rowsList and all(isinstance(i, bool) for i in rowsList):\r\n+            rowsList = [index for index, item in enumerate(rowsList) if item]\r\n+        if colsList and all(isinstance(i, bool) for i in colsList):\r\n+            colsList = [index for index, item in enumerate(colsList) if item]\r\n+\r\n+        # ensure everything is in range\r\n+        rowsList = [a2idx(k, self.rows) for k in rowsList]\r\n+        colsList = [a2idx(k, self.cols) for k in colsList]\r\n+\r\n+        return self._eval_extract(rowsList, colsList)\r\n+\r\n+    def get_diag_blocks(self):\r\n+        \"\"\"Obtains the square sub-matrices on the main diagonal of a square matrix.\r\n+\r\n+        Useful for inverting symbolic matrices or solving systems of\r\n+        linear equations which may be decoupled by having a block diagonal\r\n+        structure.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> from sympy.abc import x, y, z\r\n+        >>> A = Matrix([[1, 3, 0, 0], [y, z*z, 0, 0], [0, 0, x, 0], [0, 0, 0, 0]])\r\n+        >>> a1, a2, a3 = A.get_diag_blocks()\r\n+        >>> a1\r\n+        Matrix([\r\n+        [1,    3],\r\n+        [y, z**2]])\r\n+        >>> a2\r\n+        Matrix([[x]])\r\n+        >>> a3\r\n+        Matrix([[0]])\r\n+\r\n+        \"\"\"\r\n+        return self._eval_get_diag_blocks()\r\n+\r\n+    def reshape(self, rows, cols):\r\n+        \"\"\"Reshape the matrix. Total number of elements must remain the same.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> m = Matrix(2, 3, lambda i, j: 1)\r\n+        >>> m\r\n+        Matrix([\r\n+        [1, 1, 1],\r\n+        [1, 1, 1]])\r\n+        >>> m.reshape(1, 6)\r\n+        Matrix([[1, 1, 1, 1, 1, 1]])\r\n+        >>> m.reshape(3, 2)\r\n+        Matrix([\r\n+        [1, 1],\r\n+        [1, 1],\r\n+        [1, 1]])\r\n+\r\n+        \"\"\"\r\n+        if self.rows * self.cols != rows * cols:\r\n+            raise ValueError(\"Invalid reshape parameters %d %d\" % (rows, cols))\r\n+        return self._new(rows, cols, lambda i, j: self[i * cols + j])\r\n+\r\n+    def row_insert(self, pos, other):\r\n+        \"\"\"Insert one or more rows at the given row position.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import zeros, ones\r\n+        >>> M = zeros(3)\r\n+        >>> V = ones(1, 3)\r\n+        >>> M.row_insert(1, V)\r\n+        Matrix([\r\n+        [0, 0, 0],\r\n+        [1, 1, 1],\r\n+        [0, 0, 0],\r\n+        [0, 0, 0]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        row\r\n+        col_insert\r\n+        \"\"\"\r\n+        from sympy.matrices import MutableMatrix\r\n+        # Allows you to build a matrix even if it is null matrix\r\n+        if not self:\r\n+            return self._new(other)\r\n+\r\n+        if pos < 0:\r\n+            pos = self.rows + pos\r\n+        if pos < 0:\r\n+            pos = 0\r\n+        elif pos > self.rows:\r\n+            pos = self.rows\r\n+\r\n+        if self.cols != other.cols:\r\n+            raise ShapeError(\r\n+                \"`self` and `other` must have the same number of columns.\")\r\n+\r\n+        return self._eval_row_insert(pos, other)\r\n+\r\n+    def row_join(self, other):\r\n+        \"\"\"Concatenates two matrices along self's last and rhs's first column\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import zeros, ones\r\n+        >>> M = zeros(3)\r\n+        >>> V = ones(3, 1)\r\n+        >>> M.row_join(V)\r\n+        Matrix([\r\n+        [0, 0, 0, 1],\r\n+        [0, 0, 0, 1],\r\n+        [0, 0, 0, 1]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        row\r\n+        col_join\r\n+        \"\"\"\r\n+        # Allows you to build a matrix even if it is null matrix\r\n+        if not self:\r\n+            return self._new(other)\r\n+\r\n+        if self.rows != other.rows:\r\n+            raise ShapeError(\r\n+                \"`self` and `rhs` must have the same number of rows.\")\r\n+        return self._eval_row_join(other)\r\n+\r\n+    def row(self, i):\r\n+        \"\"\"Elementary row selector.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import eye\r\n+        >>> eye(2).row(0)\r\n+        Matrix([[1, 0]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        col\r\n+        row_op\r\n+        row_swap\r\n+        row_del\r\n+        row_join\r\n+        row_insert\r\n+        \"\"\"\r\n+        return self[i, :]\r\n+\r\n+    @property\r\n+    def shape(self):\r\n+        \"\"\"The shape (dimensions) of the matrix as the 2-tuple (rows, cols).\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import zeros\r\n+        >>> M = zeros(2, 3)\r\n+        >>> M.shape\r\n+        (2, 3)\r\n+        >>> M.rows\r\n+        2\r\n+        >>> M.cols\r\n+        3\r\n+        \"\"\"\r\n+        return (self.rows, self.cols)\r\n+\r\n+    def tolist(self):\r\n+        \"\"\"Return the Matrix as a nested Python list.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix, ones\r\n+        >>> m = Matrix(3, 3, range(9))\r\n+        >>> m\r\n+        Matrix([\r\n+        [0, 1, 2],\r\n+        [3, 4, 5],\r\n+        [6, 7, 8]])\r\n+        >>> m.tolist()\r\n+        [[0, 1, 2], [3, 4, 5], [6, 7, 8]]\r\n+        >>> ones(3, 0).tolist()\r\n+        [[], [], []]\r\n+\r\n+        When there are no rows then it will not be possible to tell how\r\n+        many columns were in the original matrix:\r\n+\r\n+        >>> ones(0, 3).tolist()\r\n+        []\r\n+\r\n+        \"\"\"\r\n+        if not self.rows:\r\n+            return []\r\n+        if not self.cols:\r\n+            return [[] for i in range(self.rows)]\r\n+        return self._eval_tolist()\r\n+\r\n+    def vec(self):\r\n+        \"\"\"Return the Matrix converted into a one column matrix by stacking columns\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> m=Matrix([[1, 3], [2, 4]])\r\n+        >>> m\r\n+        Matrix([\r\n+        [1, 3],\r\n+        [2, 4]])\r\n+        >>> m.vec()\r\n+        Matrix([\r\n+        [1],\r\n+        [2],\r\n+        [3],\r\n+        [4]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        vech\r\n+        \"\"\"\r\n+        return self._eval_vec()\r\n+\r\n+\r\n+class MatrixProperties(MatrixRequired):\r\n+    \"\"\"Provides basic properties of a matrix.\"\"\"\r\n+\r\n+    def _eval_atoms(self, *types):\r\n+        result = set()\r\n+        for i in self:\r\n+            result.update(i.atoms(*types))\r\n+        return result\r\n+\r\n+    def _eval_free_symbols(self):\r\n+        return set().union(*(i.free_symbols for i in self))\r\n+\r\n+    def _eval_has(self, *patterns):\r\n+        return any(a.has(*patterns) for a in self)\r\n+\r\n+    def _eval_is_anti_symmetric(self, simpfunc):\r\n+        if not all(simpfunc(self[i, j] + self[j, i]).is_zero for i in range(self.rows) for j in range(self.cols)):\r\n+            return False\r\n+        return True\r\n+\r\n+    def _eval_is_diagonal(self):\r\n+        for i in range(self.rows):\r\n+            for j in range(self.cols):\r\n+                if i != j and self[i, j]:\r\n+                    return False\r\n+        return True\r\n+\r\n+    def _eval_is_hermetian(self, simpfunc):\r\n+        mat = self._new(self.rows, self.cols, lambda i, j: simpfunc(self[i, j] - self[j, i].conjugate()))\r\n+        return mat.is_zero\r\n+\r\n+    def _eval_is_Identity(self):\r\n+        def dirac(i, j):\r\n+            if i == j:\r\n+                return 1\r\n+            return 0\r\n+\r\n+        return all(self[i, j] == dirac(i, j) for i in range(self.rows) for j in\r\n+                   range(self.cols))\r\n+\r\n+    def _eval_is_lower_hessenberg(self):\r\n+        return all(self[i, j].is_zero\r\n+                   for i in range(self.rows)\r\n+                   for j in range(i + 2, self.cols))\r\n+\r\n+    def _eval_is_lower(self):\r\n+        return all(self[i, j].is_zero\r\n+                   for i in range(self.rows)\r\n+                   for j in range(i + 1, self.cols))\r\n+\r\n+    def _eval_is_symbolic(self):\r\n+        return self.has(Symbol)\r\n+\r\n+    def _eval_is_symmetric(self, simpfunc):\r\n+        mat = self._new(self.rows, self.cols, lambda i, j: simpfunc(self[i, j] - self[j, i]))\r\n+        return mat.is_zero\r\n+\r\n+    def _eval_is_zero(self):\r\n+        if any(i.is_zero == False for i in self):\r\n+            return False\r\n+        if any(i.is_zero == None for i in self):\r\n+            return None\r\n+        return True\r\n+\r\n+    def _eval_is_upper_hessenberg(self):\r\n+        return all(self[i, j].is_zero\r\n+                   for i in range(2, self.rows)\r\n+                   for j in range(i - 1))\r\n+\r\n+    def _eval_values(self):\r\n+        return [i for i in self if not i.is_zero]\r\n+\r\n+    def atoms(self, *types):\r\n+        \"\"\"Returns the atoms that form the current object.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.abc import x, y\r\n+        >>> from sympy.matrices import Matrix\r\n+        >>> Matrix([[x]])\r\n+        Matrix([[x]])\r\n+        >>> _.atoms()\r\n+        {x}\r\n+        \"\"\"\r\n+\r\n+        types = tuple(t if isinstance(t, type) else type(t) for t in types)\r\n+        if not types:\r\n+            types = (Atom,)\r\n+        return self._eval_atoms(*types)\r\n+\r\n+    @property\r\n+    def free_symbols(self):\r\n+        \"\"\"Returns the free symbols within the matrix.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.abc import x\r\n+        >>> from sympy.matrices import Matrix\r\n+        >>> Matrix([[x], [1]]).free_symbols\r\n+        {x}\r\n+        \"\"\"\r\n+        return self._eval_free_symbols()\r\n+\r\n+    def has(self, *patterns):\r\n+        \"\"\"Test whether any subexpression matches any of the patterns.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix, SparseMatrix, Float\r\n+        >>> from sympy.abc import x, y\r\n+        >>> A = Matrix(((1, x), (0.2, 3)))\r\n+        >>> B = SparseMatrix(((1, x), (0.2, 3)))\r\n+        >>> A.has(x)\r\n+        True\r\n+        >>> A.has(y)\r\n+        False\r\n+        >>> A.has(Float)\r\n+        True\r\n+        >>> B.has(x)\r\n+        True\r\n+        >>> B.has(y)\r\n+        False\r\n+        >>> B.has(Float)\r\n+        True\r\n+        \"\"\"\r\n+        return self._eval_has(*patterns)\r\n+\r\n+    def is_anti_symmetric(self, simplify=True):\r\n+        \"\"\"Check if matrix M is an antisymmetric matrix,\r\n+        that is, M is a square matrix with all M[i, j] == -M[j, i].\r\n+\r\n+        When ``simplify=True`` (default), the sum M[i, j] + M[j, i] is\r\n+        simplified before testing to see if it is zero. By default,\r\n+        the SymPy simplify function is used. To use a custom function\r\n+        set simplify to a function that accepts a single argument which\r\n+        returns a simplified expression. To skip simplification, set\r\n+        simplify to False but note that although this will be faster,\r\n+        it may induce false negatives.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix, symbols\r\n+        >>> m = Matrix(2, 2, [0, 1, -1, 0])\r\n+        >>> m\r\n+        Matrix([\r\n+        [ 0, 1],\r\n+        [-1, 0]])\r\n+        >>> m.is_anti_symmetric()\r\n+        True\r\n+        >>> x, y = symbols('x y')\r\n+        >>> m = Matrix(2, 3, [0, 0, x, -y, 0, 0])\r\n+        >>> m\r\n+        Matrix([\r\n+        [ 0, 0, x],\r\n+        [-y, 0, 0]])\r\n+        >>> m.is_anti_symmetric()\r\n+        False\r\n+\r\n+        >>> from sympy.abc import x, y\r\n+        >>> m = Matrix(3, 3, [0, x**2 + 2*x + 1, y,\r\n+        ...                   -(x + 1)**2 , 0, x*y,\r\n+        ...                   -y, -x*y, 0])\r\n+\r\n+        Simplification of matrix elements is done by default so even\r\n+        though two elements which should be equal and opposite wouldn't\r\n+        pass an equality test, the matrix is still reported as\r\n+        anti-symmetric:\r\n+\r\n+        >>> m[0, 1] == -m[1, 0]\r\n+        False\r\n+        >>> m.is_anti_symmetric()\r\n+        True\r\n+\r\n+        If 'simplify=False' is used for the case when a Matrix is already\r\n+        simplified, this will speed things up. Here, we see that without\r\n+        simplification the matrix does not appear anti-symmetric:\r\n+\r\n+        >>> m.is_anti_symmetric(simplify=False)\r\n+        False\r\n+\r\n+        But if the matrix were already expanded, then it would appear\r\n+        anti-symmetric and simplification in the is_anti_symmetric routine\r\n+        is not needed:\r\n+\r\n+        >>> m = m.expand()\r\n+        >>> m.is_anti_symmetric(simplify=False)\r\n+        True\r\n+        \"\"\"\r\n+        # accept custom simplification\r\n+        simpfunc = simplify\r\n+        if not isinstance(simplify, FunctionType):\r\n+            simpfunc = _simplify if simplify else lambda x: x\r\n+\r\n+        if not self.is_square:\r\n+            return False\r\n+        return self._eval_is_anti_symmetric(simpfunc)\r\n+\r\n+    def is_diagonal(self):\r\n+        \"\"\"Check if matrix is diagonal,\r\n+        that is matrix in which the entries outside the main diagonal are all zero.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix, diag\r\n+        >>> m = Matrix(2, 2, [1, 0, 0, 2])\r\n+        >>> m\r\n+        Matrix([\r\n+        [1, 0],\r\n+        [0, 2]])\r\n+        >>> m.is_diagonal()\r\n+        True\r\n+\r\n+        >>> m = Matrix(2, 2, [1, 1, 0, 2])\r\n+        >>> m\r\n+        Matrix([\r\n+        [1, 1],\r\n+        [0, 2]])\r\n+        >>> m.is_diagonal()\r\n+        False\r\n+\r\n+        >>> m = diag(1, 2, 3)\r\n+        >>> m\r\n+        Matrix([\r\n+        [1, 0, 0],\r\n+        [0, 2, 0],\r\n+        [0, 0, 3]])\r\n+        >>> m.is_diagonal()\r\n+        True\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        is_lower\r\n+        is_upper\r\n+        is_diagonalizable\r\n+        diagonalize\r\n+        \"\"\"\r\n+        return self._eval_is_diagonal()\r\n+\r\n+    @property\r\n+    def is_hermitian(self, simplify=True):\r\n+        \"\"\"Checks if the matrix is Hermitian.\r\n+\r\n+        In a Hermitian matrix element i,j is the complex conjugate of\r\n+        element j,i.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix\r\n+        >>> from sympy import I\r\n+        >>> from sympy.abc import x\r\n+        >>> a = Matrix([[1, I], [-I, 1]])\r\n+        >>> a\r\n+        Matrix([\r\n+        [ 1, I],\r\n+        [-I, 1]])\r\n+        >>> a.is_hermitian\r\n+        True\r\n+        >>> a[0, 0] = 2*I\r\n+        >>> a.is_hermitian\r\n+        False\r\n+        >>> a[0, 0] = x\r\n+        >>> a.is_hermitian\r\n+        >>> a[0, 1] = a[1, 0]*I\r\n+        >>> a.is_hermitian\r\n+        False\r\n+        \"\"\"\r\n+        if not self.is_square:\r\n+            return False\r\n+\r\n+        simpfunc = simplify\r\n+        if not isinstance(simplify, FunctionType):\r\n+            simpfunc = _simplify if simplify else lambda x: x\r\n+\r\n+        return self._eval_is_hermetian(simpfunc)\r\n+\r\n+    @property\r\n+    def is_Identity(self):\r\n+        if not self.is_square:\r\n+            return False\r\n+        return self._eval_is_Identity()\r\n+\r\n+    @property\r\n+    def is_lower_hessenberg(self):\r\n+        r\"\"\"Checks if the matrix is in the lower-Hessenberg form.\r\n+\r\n+        The lower hessenberg matrix has zero entries\r\n+        above the first superdiagonal.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix\r\n+        >>> a = Matrix([[1, 2, 0, 0], [5, 2, 3, 0], [3, 4, 3, 7], [5, 6, 1, 1]])\r\n+        >>> a\r\n+        Matrix([\r\n+        [1, 2, 0, 0],\r\n+        [5, 2, 3, 0],\r\n+        [3, 4, 3, 7],\r\n+        [5, 6, 1, 1]])\r\n+        >>> a.is_lower_hessenberg\r\n+        True\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        is_upper_hessenberg\r\n+        is_lower\r\n+        \"\"\"\r\n+        return self._eval_is_lower_hessenberg()\r\n+\r\n+    @property\r\n+    def is_lower(self):\r\n+        \"\"\"Check if matrix is a lower triangular matrix. True can be returned\r\n+        even if the matrix is not square.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> m = Matrix(2, 2, [1, 0, 0, 1])\r\n+        >>> m\r\n+        Matrix([\r\n+        [1, 0],\r\n+        [0, 1]])\r\n+        >>> m.is_lower\r\n+        True\r\n+\r\n+        >>> m = Matrix(4, 3, [0, 0, 0, 2, 0, 0, 1, 4 , 0, 6, 6, 5])\r\n+        >>> m\r\n+        Matrix([\r\n+        [0, 0, 0],\r\n+        [2, 0, 0],\r\n+        [1, 4, 0],\r\n+        [6, 6, 5]])\r\n+        >>> m.is_lower\r\n+        True\r\n+\r\n+        >>> from sympy.abc import x, y\r\n+        >>> m = Matrix(2, 2, [x**2 + y, y**2 + x, 0, x + y])\r\n+        >>> m\r\n+        Matrix([\r\n+        [x**2 + y, x + y**2],\r\n+        [       0,    x + y]])\r\n+        >>> m.is_lower\r\n+        False\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        is_upper\r\n+        is_diagonal\r\n+        is_lower_hessenberg\r\n+        \"\"\"\r\n+        return self._eval_is_lower()\r\n+\r\n+    @property\r\n+    def is_square(self):\r\n+        \"\"\"Checks if a matrix is square.\r\n+\r\n+        A matrix is square if the number of rows equals the number of columns.\r\n+        The empty matrix is square by definition, since the number of rows and\r\n+        the number of columns are both zero.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> a = Matrix([[1, 2, 3], [4, 5, 6]])\r\n+        >>> b = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\r\n+        >>> c = Matrix([])\r\n+        >>> a.is_square\r\n+        False\r\n+        >>> b.is_square\r\n+        True\r\n+        >>> c.is_square\r\n+        True\r\n+        \"\"\"\r\n+        return self.rows == self.cols\r\n+\r\n+    def is_symbolic(self):\r\n+        \"\"\"Checks if any elements contain Symbols.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix\r\n+        >>> from sympy.abc import x, y\r\n+        >>> M = Matrix([[x, y], [1, 0]])\r\n+        >>> M.is_symbolic()\r\n+        True\r\n+\r\n+        \"\"\"\r\n+        return self._eval_is_symbolic()\r\n+\r\n+    def is_symmetric(self, simplify=True):\r\n+        \"\"\"Check if matrix is symmetric matrix,\r\n+        that is square matrix and is equal to its transpose.\r\n+\r\n+        By default, simplifications occur before testing symmetry.\r\n+        They can be skipped using 'simplify=False'; while speeding things a bit,\r\n+        this may however induce false negatives.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> m = Matrix(2, 2, [0, 1, 1, 2])\r\n+        >>> m\r\n+        Matrix([\r\n+        [0, 1],\r\n+        [1, 2]])\r\n+        >>> m.is_symmetric()\r\n+        True\r\n+\r\n+        >>> m = Matrix(2, 2, [0, 1, 2, 0])\r\n+        >>> m\r\n+        Matrix([\r\n+        [0, 1],\r\n+        [2, 0]])\r\n+        >>> m.is_symmetric()\r\n+        False\r\n+\r\n+        >>> m = Matrix(2, 3, [0, 0, 0, 0, 0, 0])\r\n+        >>> m\r\n+        Matrix([\r\n+        [0, 0, 0],\r\n+        [0, 0, 0]])\r\n+        >>> m.is_symmetric()\r\n+        False\r\n+\r\n+        >>> from sympy.abc import x, y\r\n+        >>> m = Matrix(3, 3, [1, x**2 + 2*x + 1, y, (x + 1)**2 , 2, 0, y, 0, 3])\r\n+        >>> m\r\n+        Matrix([\r\n+        [         1, x**2 + 2*x + 1, y],\r\n+        [(x + 1)**2,              2, 0],\r\n+        [         y,              0, 3]])\r\n+        >>> m.is_symmetric()\r\n+        True\r\n+\r\n+        If the matrix is already simplified, you may speed-up is_symmetric()\r\n+        test by using 'simplify=False'.\r\n+\r\n+        >>> bool(m.is_symmetric(simplify=False))\r\n+        False\r\n+        >>> m1 = m.expand()\r\n+        >>> m1.is_symmetric(simplify=False)\r\n+        True\r\n+        \"\"\"\r\n+        simpfunc = simplify\r\n+        if not isinstance(simplify, FunctionType):\r\n+            simpfunc = _simplify if simplify else lambda x: x\r\n+\r\n+        if not self.is_square:\r\n+            return False\r\n+\r\n+        return self._eval_is_symmetric(simpfunc)\r\n+\r\n+    @property\r\n+    def is_upper_hessenberg(self):\r\n+        \"\"\"Checks if the matrix is the upper-Hessenberg form.\r\n+\r\n+        The upper hessenberg matrix has zero entries\r\n+        below the first subdiagonal.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix\r\n+        >>> a = Matrix([[1, 4, 2, 3], [3, 4, 1, 7], [0, 2, 3, 4], [0, 0, 1, 3]])\r\n+        >>> a\r\n+        Matrix([\r\n+        [1, 4, 2, 3],\r\n+        [3, 4, 1, 7],\r\n+        [0, 2, 3, 4],\r\n+        [0, 0, 1, 3]])\r\n+        >>> a.is_upper_hessenberg\r\n+        True\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        is_lower_hessenberg\r\n+        is_upper\r\n+        \"\"\"\r\n+        return self._eval_is_upper_hessenberg()\r\n+\r\n+    @property\r\n+    def is_upper(self):\r\n+        \"\"\"Check if matrix is an upper triangular matrix. True can be returned\r\n+        even if the matrix is not square.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> m = Matrix(2, 2, [1, 0, 0, 1])\r\n+        >>> m\r\n+        Matrix([\r\n+        [1, 0],\r\n+        [0, 1]])\r\n+        >>> m.is_upper\r\n+        True\r\n+\r\n+        >>> m = Matrix(4, 3, [5, 1, 9, 0, 4 , 6, 0, 0, 5, 0, 0, 0])\r\n+        >>> m\r\n+        Matrix([\r\n+        [5, 1, 9],\r\n+        [0, 4, 6],\r\n+        [0, 0, 5],\r\n+        [0, 0, 0]])\r\n+        >>> m.is_upper\r\n+        True\r\n+\r\n+        >>> m = Matrix(2, 3, [4, 2, 5, 6, 1, 1])\r\n+        >>> m\r\n+        Matrix([\r\n+        [4, 2, 5],\r\n+        [6, 1, 1]])\r\n+        >>> m.is_upper\r\n+        False\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        is_lower\r\n+        is_diagonal\r\n+        is_upper_hessenberg\r\n+        \"\"\"\r\n+        return all(self[i, j].is_zero\r\n+                   for i in range(1, self.rows)\r\n+                   for j in range(i))\r\n+\r\n+    @property\r\n+    def is_zero(self):\r\n+        \"\"\"Checks if a matrix is a zero matrix.\r\n+\r\n+        A matrix is zero if every element is zero.  A matrix need not be square\r\n+        to be considered zero.  The empty matrix is zero by the principle of\r\n+        vacuous truth.  For a matrix that may or may not be zero (e.g.\r\n+        contains a symbol), this will be None\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix, zeros\r\n+        >>> from sympy.abc import x\r\n+        >>> a = Matrix([[0, 0], [0, 0]])\r\n+        >>> b = zeros(3, 4)\r\n+        >>> c = Matrix([[0, 1], [0, 0]])\r\n+        >>> d = Matrix([])\r\n+        >>> e = Matrix([[x, 0], [0, 0]])\r\n+        >>> a.is_zero\r\n+        True\r\n+        >>> b.is_zero\r\n+        True\r\n+        >>> c.is_zero\r\n+        False\r\n+        >>> d.is_zero\r\n+        True\r\n+        >>> e.is_zero\r\n+        \"\"\"\r\n+        return self._eval_is_zero()\r\n+\r\n+    def values(self):\r\n+        \"\"\"Return non-zero values of self.\"\"\"\r\n+        return self._eval_values()\r\n+\r\n+\r\n+class MatrixOperations(MatrixRequired):\r\n+    \"\"\"Provides basic matrix shape and elementwise\r\n+    operations.  Should not be instantiated directly.\"\"\"\r\n+\r\n+    def _eval_adjoint(self):\r\n+        return self.transpose().conjugate()\r\n+\r\n+    def _eval_applyfunc(self, f):\r\n+        out = self._new(self.rows, self.cols, [f(x) for x in self])\r\n+        return out\r\n+\r\n+    def _eval_as_real_imag(self):\r\n+        from sympy.functions.elementary.complexes import re, im\r\n+\r\n+        return (self.applyfunc(re), self.applyfunc(im))\r\n+\r\n+    def _eval_conjugate(self):\r\n+        return self.applyfunc(lambda x: x.conjugate())\r\n+\r\n+    def _eval_trace(self):\r\n+        return sum(self[i, i] for i in range(self.rows))\r\n+\r\n+    def _eval_transpose(self):\r\n+        return self._new(self.cols, self.rows, lambda i, j: self[j, i])\r\n+\r\n+    def adjoint(self):\r\n+        \"\"\"Conjugate transpose or Hermitian conjugation.\"\"\"\r\n+        return self._eval_adjoint()\r\n+\r\n+    def applyfunc(self, f):\r\n+        \"\"\"Apply a function to each element of the matrix.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> m = Matrix(2, 2, lambda i, j: i*2+j)\r\n+        >>> m\r\n+        Matrix([\r\n+        [0, 1],\r\n+        [2, 3]])\r\n+        >>> m.applyfunc(lambda i: 2*i)\r\n+        Matrix([\r\n+        [0, 2],\r\n+        [4, 6]])\r\n+\r\n+        \"\"\"\r\n+        if not callable(f):\r\n+            raise TypeError(\"`f` must be callable.\")\r\n+\r\n+        return self._eval_applyfunc(f)\r\n+\r\n+    def as_real_imag(self):\r\n+        \"\"\"Returns a tuple containing the (real, imaginary) part of matrix.\"\"\"\r\n+        return self._eval_as_real_imag()\r\n+\r\n+    def conjugate(self):\r\n+        \"\"\"Return the by-element conjugation.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import SparseMatrix\r\n+        >>> from sympy import I\r\n+        >>> a = SparseMatrix(((1, 2 + I), (3, 4), (I, -I)))\r\n+        >>> a\r\n+        Matrix([\r\n+        [1, 2 + I],\r\n+        [3,     4],\r\n+        [I,    -I]])\r\n+        >>> a.C\r\n+        Matrix([\r\n+        [ 1, 2 - I],\r\n+        [ 3,     4],\r\n+        [-I,     I]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        transpose: Matrix transposition\r\n+        H: Hermite conjugation\r\n+        D: Dirac conjugation\r\n+        \"\"\"\r\n+        return self._eval_conjugate()\r\n+\r\n+    def doit(self, **kwargs):\r\n+        return self.applyfunc(lambda x: x.doit())\r\n+\r\n+    def evalf(self, prec=None, **options):\r\n+        \"\"\"Apply evalf() to each element of self.\"\"\"\r\n+        return self.applyfunc(lambda i: i.evalf(prec, **options))\r\n+\r\n+    def expand(self, deep=True, modulus=None, power_base=True, power_exp=True,\r\n+               mul=True, log=True, multinomial=True, basic=True, **hints):\r\n+        \"\"\"Apply core.function.expand to each entry of the matrix.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.abc import x\r\n+        >>> from sympy.matrices import Matrix\r\n+        >>> Matrix(1, 1, [x*(x+1)])\r\n+        Matrix([[x*(x + 1)]])\r\n+        >>> _.expand()\r\n+        Matrix([[x**2 + x]])\r\n+\r\n+        \"\"\"\r\n+        return self.applyfunc(lambda x: x.expand(\r\n+            deep, modulus, power_base, power_exp, mul, log, multinomial, basic,\r\n+            **hints))\r\n+\r\n+    @property\r\n+    def H(self):\r\n+        \"\"\"Return Hermite conjugate.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix, I\r\n+        >>> m = Matrix((0, 1 + I, 2, 3))\r\n+        >>> m\r\n+        Matrix([\r\n+        [    0],\r\n+        [1 + I],\r\n+        [    2],\r\n+        [    3]])\r\n+        >>> m.H\r\n+        Matrix([[0, 1 - I, 2, 3]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        conjugate: By-element conjugation\r\n+        D: Dirac conjugation\r\n+        \"\"\"\r\n+        return self.T.C\r\n+\r\n+    def refine(self, assumptions=True):\r\n+        \"\"\"Apply refine to each element of the matrix.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Symbol, Matrix, Abs, sqrt, Q\r\n+        >>> x = Symbol('x')\r\n+        >>> Matrix([[Abs(x)**2, sqrt(x**2)],[sqrt(x**2), Abs(x)**2]])\r\n+        Matrix([\r\n+        [ Abs(x)**2, sqrt(x**2)],\r\n+        [sqrt(x**2),  Abs(x)**2]])\r\n+        >>> _.refine(Q.real(x))\r\n+        Matrix([\r\n+        [  x**2, Abs(x)],\r\n+        [Abs(x),   x**2]])\r\n+\r\n+        \"\"\"\r\n+        return self.applyfunc(lambda x: refine(x, assumptions))\r\n+\r\n+    def replace(self, F, G, map=False):\r\n+        \"\"\"Replaces Function F in Matrix entries with Function G.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import symbols, Function, Matrix\r\n+        >>> F, G = symbols('F, G', cls=Function)\r\n+        >>> M = Matrix(2, 2, lambda i, j: F(i+j)) ; M\r\n+        Matrix([\r\n+        [F(0), F(1)],\r\n+        [F(1), F(2)]])\r\n+        >>> N = M.replace(F,G)\r\n+        >>> N\r\n+        Matrix([\r\n+        [G(0), G(1)],\r\n+        [G(1), G(2)]])\r\n+        \"\"\"\r\n+        return self.applyfunc(lambda x: x.replace(F, G, map))\r\n+\r\n+    def simplify(self, ratio=1.7, measure=count_ops):\r\n+        \"\"\"Apply simplify to each element of the matrix.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.abc import x, y\r\n+        >>> from sympy import sin, cos\r\n+        >>> from sympy.matrices import SparseMatrix\r\n+        >>> SparseMatrix(1, 1, [x*sin(y)**2 + x*cos(y)**2])\r\n+        Matrix([[x*sin(y)**2 + x*cos(y)**2]])\r\n+        >>> _.simplify()\r\n+        Matrix([[x]])\r\n+        \"\"\"\r\n+        return self.applyfunc(lambda x: x.simplify(ratio, measure))\r\n+\r\n+    def subs(self, *args, **kwargs):  # should mirror core.basic.subs\r\n+        \"\"\"Return a new matrix with subs applied to each entry.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.abc import x, y\r\n+        >>> from sympy.matrices import SparseMatrix, Matrix\r\n+        >>> SparseMatrix(1, 1, [x])\r\n+        Matrix([[x]])\r\n+        >>> _.subs(x, y)\r\n+        Matrix([[y]])\r\n+        >>> Matrix(_).subs(y, x)\r\n+        Matrix([[x]])\r\n+        \"\"\"\r\n+        return self.applyfunc(lambda x: x.subs(*args, **kwargs))\r\n+\r\n+    def trace(self):\r\n+        \"\"\"\r\n+        Returns the trace of a square matrix i.e. the sum of the\r\n+        diagonal elements.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> A = Matrix(2, 2, [1, 2, 3, 4])\r\n+        >>> A.trace()\r\n+        5\r\n+\r\n+        \"\"\"\r\n+        if not self.rows == self.cols:\r\n+            raise NonSquareMatrixError()\r\n+        return self._eval_trace()\r\n+\r\n+    def transpose(self):\r\n+        \"\"\"\r\n+        Returns the transpose of the matrix.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> A = Matrix(2, 2, [1, 2, 3, 4])\r\n+        >>> A.transpose()\r\n+        Matrix([\r\n+        [1, 3],\r\n+        [2, 4]])\r\n+\r\n+        >>> from sympy import Matrix, I\r\n+        >>> m=Matrix(((1, 2+I), (3, 4)))\r\n+        >>> m\r\n+        Matrix([\r\n+        [1, 2 + I],\r\n+        [3,     4]])\r\n+        >>> m.transpose()\r\n+        Matrix([\r\n+        [    1, 3],\r\n+        [2 + I, 4]])\r\n+        >>> m.T == m.transpose()\r\n+        True\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        conjugate: By-element conjugation\r\n+\r\n+        \"\"\"\r\n+        return self._eval_transpose()\r\n+\r\n+    T = property(transpose, None, None, \"Matrix transposition.\")\r\n+\r\n+    C = property(conjugate, None, None, \"By-element conjugation.\")\r\n+\r\n+    n = evalf\r\n+\r\n+    def xreplace(self, rule):  # should mirror core.basic.xreplace\r\n+        \"\"\"Return a new matrix with xreplace applied to each entry.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.abc import x, y\r\n+        >>> from sympy.matrices import SparseMatrix, Matrix\r\n+        >>> SparseMatrix(1, 1, [x])\r\n+        Matrix([[x]])\r\n+        >>> _.xreplace({x: y})\r\n+        Matrix([[y]])\r\n+        >>> Matrix(_).xreplace({y: x})\r\n+        Matrix([[x]])\r\n+        \"\"\"\r\n+        return self.applyfunc(lambda x: x.xreplace(rule))\r\n+\r\n+    _eval_simplify = simplify\r\n+\r\n+\r\n+class MatrixArithmetic(MatrixRequired):\r\n+    \"\"\"Provides basic matrix arithmetic operations.\r\n+    Should not be instantiated directly.\"\"\"\r\n+\r\n+    _op_priority = 10.01\r\n+\r\n+    def _eval_add(self, other):\r\n+        return self._new(self.rows, self.cols,\r\n+                         lambda i, j: self[i, j] + other[i, j])\r\n+\r\n+    def _eval_matrix_mul(self, other):\r\n+        def entry(i, j):\r\n+            try:\r\n+                return sum(self[i,k]*other[k,j] for k in range(self.cols))\r\n+            except TypeError:\r\n+                # Block matrices don't work with `sum` or `Add` (ISSUE #11599)\r\n+                # They don't work with `sum` because `sum` tries to add `0`\r\n+                # initially, and for a matrix, that is a mix of a scalar and\r\n+                # a matrix, which raises a TypeError. Fall back to a\r\n+                # block-matrix-safe way to multiply if the `sum` fails.\r\n+                ret = self[i, 0]*other[0, j]\r\n+                for k in range(1, self.cols):\r\n+                    ret += self[i, k]*other[k, j]\r\n+                return ret\r\n+\r\n+        return self._new(self.rows, other.cols, entry)\r\n+\r\n+    def _eval_matrix_mul_elementwise(self, other):\r\n+        return self._new(self.rows, self.cols, lambda i, j: self[i,j]*other[i,j])\r\n+\r\n+    def _eval_matrix_rmul(self, other):\r\n+        def entry(i, j):\r\n+            return sum(other[i,k]*self[k,j] for k in range(other.cols))\r\n+        return self._new(other.rows, self.cols, entry)\r\n+\r\n+    def _eval_pow_by_recursion(self, num):\r\n+        if num == 1:\r\n+            return self\r\n+        if num % 2 == 1:\r\n+            return self * self._eval_pow_by_recursion(num - 1)\r\n+        ret = self._eval_pow_by_recursion(num // 2)\r\n+        return ret * ret\r\n+\r\n+    def _eval_scalar_mul(self, other):\r\n+        return self._new(self.rows, self.cols, lambda i, j: self[i,j]*other)\r\n+\r\n+    def _eval_scalar_rmul(self, other):\r\n+        return self._new(self.rows, self.cols, lambda i, j: other*self[i,j])\r\n+\r\n+    # python arithmetic functions\r\n+    @call_highest_priority('__radd__')\r\n+    def __add__(self, other):\r\n+        \"\"\"Return self + other, raising ShapeError if shapes don't match.\"\"\"\r\n+        other = _matrixify(other)\r\n+        # matrix-like objects can have shapes.  This is\r\n+        # our first sanity check.\r\n+        if hasattr(other, 'shape'):\r\n+            if self.shape != other.shape:\r\n+                raise ShapeError(\"Matrix size mismatch: %s + %s\" % (\r\n+                    self.shape, other.shape))\r\n+\r\n+        # honest sympy matrices defer to their class's routine\r\n+        if getattr(other, 'is_Matrix', False):\r\n+            # call the highest-priority class's _eval_add\r\n+            a, b = self, other\r\n+            if a.__class__ != classof(a, b):\r\n+                b, a = a, b\r\n+            return a._eval_add(b)\r\n+        # Matrix-like objects can be passed to CommonMatrix routines directly.\r\n+        if getattr(other, 'is_MatrixLike', False):\r\n+            return MatrixArithmetic._eval_add(self, other)\r\n+\r\n+        raise TypeError('cannot add %s and %s' % type(self), type(other))\r\n+\r\n+    @call_highest_priority('__rdiv__')\r\n+    def __div__(self, other):\r\n+        return self * (S.One / other)\r\n+\r\n+    @call_highest_priority('__rmatmul__')\r\n+    def __matmul__(self, other):\r\n+        return self.__mul__(other)\r\n+\r\n+    @call_highest_priority('__rmul__')\r\n+    def __mul__(self, other):\r\n+        \"\"\"Return self*other where other is either a scalar or a matrix\r\n+        of compatible dimensions.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix\r\n+        >>> A = Matrix([[1, 2, 3], [4, 5, 6]])\r\n+        >>> 2*A == A*2 == Matrix([[2, 4, 6], [8, 10, 12]])\r\n+        True\r\n+        >>> B = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\r\n+        >>> A*B\r\n+        Matrix([\r\n+        [30, 36, 42],\r\n+        [66, 81, 96]])\r\n+        >>> B*A\r\n+        Traceback (most recent call last):\r\n+        ...\r\n+        ShapeError: Matrices size mismatch.\r\n+        >>>\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        matrix_multiply_elementwise\r\n+        \"\"\"\r\n+        other = _matrixify(other)\r\n+        # matrix-like objects can have shapes.  This is\r\n+        # our first sanity check.\r\n+        if hasattr(other, 'shape') and len(other.shape) == 2:\r\n+            if self.shape[1] != other.shape[0]:\r\n+                raise ShapeError(\"Matrix size mismatch: %s * %s.\" % (\r\n+                    self.shape, other.shape))\r\n+\r\n+        # honest sympy matrices defer to their class's routine\r\n+        if getattr(other, 'is_Matrix', False):\r\n+            return self._eval_matrix_mul(other)\r\n+        # Matrix-like objects can be passed to CommonMatrix routines directly.\r\n+        if getattr(other, 'is_MatrixLike', False):\r\n+            return MatrixArithmetic._eval_matrix_mul(self, other)\r\n+\r\n+        try:\r\n+            return self._eval_scalar_mul(other)\r\n+        except TypeError:\r\n+            pass\r\n+\r\n+        raise TypeError('Cannot multiply %s and %s' % type(self), type(other))\r\n+\r\n+    def __neg__(self):\r\n+        return self._eval_scalar_mul(-1)\r\n+\r\n+    @call_highest_priority('__rpow__')\r\n+    def __pow__(self, num):\r\n+        if not self.rows == self.cols:\r\n+            raise NonSquareMatrixError()\r\n+        try:\r\n+            a = self\r\n+            num = sympify(num)\r\n+            if num.is_Number and num % 1 == 0:\r\n+                if a.rows == 1:\r\n+                    return a._new([[a[0]**num]])\r\n+                if num == 0:\r\n+                    return self._new(self.rows, self.cols, lambda i, j: int(i == j))\r\n+                if num < 0:\r\n+                    num = -num\r\n+                    a = a.inv()\r\n+                # When certain conditions are met,\r\n+                # Jordan block algorithm is faster than\r\n+                # computation by recursion.\r\n+                elif a.rows == 2 and num > 100000:\r\n+                    try:\r\n+                        return a._matrix_pow_by_jordan_blocks(num)\r\n+                    except AttributeError:\r\n+                        pass\r\n+                return a._eval_pow_by_recursion(num)\r\n+            elif isinstance(num, (Expr, float)):\r\n+                return a._matrix_pow_by_jordan_blocks(num)\r\n+            else:\r\n+                raise TypeError(\r\n+                    \"Only SymPy expressions or integers are supported as exponent for matrices\")\r\n+        except AttributeError:\r\n+            raise TypeError(\"Don't know how to raise {} to {}\".format(self.__class__, num))\r\n+\r\n+    @call_highest_priority('__add__')\r\n+    def __radd__(self, other):\r\n+        return self + other\r\n+\r\n+    @call_highest_priority('__matmul__')\r\n+    def __rmatmul__(self, other):\r\n+        return self.__rmul__(other)\r\n+\r\n+    @call_highest_priority('__mul__')\r\n+    def __rmul__(self, other):\r\n+        other = _matrixify(other)\r\n+        # matrix-like objects can have shapes.  This is\r\n+        # our first sanity check.\r\n+        if hasattr(other, 'shape') and len(other.shape) == 2:\r\n+            if self.shape[0] != other.shape[1]:\r\n+                raise ShapeError(\"Matrix size mismatch.\")\r\n+\r\n+        # honest sympy matrices defer to their class's routine\r\n+        if getattr(other, 'is_Matrix', False):\r\n+            return other._new(other.as_mutable() * self)\r\n+        # Matrix-like objects can be passed to CommonMatrix routines directly.\r\n+        if getattr(other, 'is_MatrixLike', False):\r\n+            return MatrixArithmetic._eval_matrix_rmul(self, other)\r\n+\r\n+        try:\r\n+            return self._eval_scalar_rmul(other)\r\n+        except TypeError:\r\n+            pass\r\n+\r\n+        raise TypeError('Cannot multiply %s and %s' % type(self), type(other))\r\n+\r\n+    @call_highest_priority('__sub__')\r\n+    def __rsub__(self, a):\r\n+        return (-self) + a\r\n+\r\n+    @call_highest_priority('__rsub__')\r\n+    def __sub__(self, a):\r\n+        return self + (-a)\r\n+\r\n+    @call_highest_priority('__rtruediv__')\r\n+    def __truediv__(self, other):\r\n+        return self.__div__(other)\r\n+\r\n+    def multiply_elementwise(self, other):\r\n+        \"\"\"Return the Hadamard product (elementwise product) of A and B\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix\r\n+        >>> A = Matrix([[0, 1, 2], [3, 4, 5]])\r\n+        >>> B = Matrix([[1, 10, 100], [100, 10, 1]])\r\n+        >>> A.multiply_elementwise(B)\r\n+        Matrix([\r\n+        [  0, 10, 200],\r\n+        [300, 40,   5]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        cross\r\n+        dot\r\n+        multiply\r\n+        \"\"\"\r\n+        if self.shape != other.shape:\r\n+            raise ShapeError(\"Matrix shapes must agree {} != {}\".format(self.shape, other.shape))\r\n+\r\n+        return self._eval_matrix_mul_elementwise(other)\r\n+\r\n+\r\n+class MatrixDeterminant(MatrixArithmetic, MatrixOperations, MatrixShaping):\r\n+    \"\"\"Provides basic matrix determinant operations.\r\n+    Should not be instantiated directly.\"\"\"\r\n+\r\n+    def _eval_berkowitz_toeplitz_matrix(self):\r\n+        \"\"\"Return (A,T) where T the Toeplitz matrix used in the Berkowitz algorithm\r\n+        corresponding to `self` and A is the first principal submatrix.\"\"\"\r\n+\r\n+        # the 0 x 0 case is trivial\r\n+        if self.rows == 0 and self.cols == 0:\r\n+            return self._new(1,1, [S.One])\r\n+\r\n+        #\r\n+        # Partition self = [ a_11  R ]\r\n+        #                  [ C     A ]\r\n+        #\r\n+\r\n+        a, R = self[0,0],   self[0, 1:]\r\n+        C, A = self[1:, 0], self[1:,1:]\r\n+\r\n+        #\r\n+        # The Toeplitz matrix looks like\r\n+        #\r\n+        #  [ 1                                     ]\r\n+        #  [ -a         1                          ]\r\n+        #  [ -RC       -a        1                 ]\r\n+        #  [ -RAC     -RC       -a       1         ]\r\n+        #  [ -RA**2C -RAC      -RC      -a       1 ]\r\n+        #  etc.\r\n+\r\n+        # Compute the diagonal entries.\r\n+        # Because multiplying matrix times vector is so much\r\n+        # more efficient than matrix times matrix, recursively\r\n+        # compute -R * A**n * C.\r\n+        diags = [C]\r\n+        for i in range(self.rows - 2):\r\n+            diags.append(A * diags[i])\r\n+        diags = [(-R*d)[0, 0] for d in diags]\r\n+        diags = [S.One, -a] + diags\r\n+\r\n+        def entry(i,j):\r\n+            if j > i:\r\n+                return S.Zero\r\n+            return diags[i - j]\r\n+\r\n+        toeplitz = self._new(self.cols + 1, self.rows, entry)\r\n+        return (A, toeplitz)\r\n+\r\n+    def _eval_berkowitz_vector(self):\r\n+        \"\"\" Run the Berkowitz algorithm and return a vector whose entries\r\n+            are the coefficients of the characteristic polynomial of `self`.\r\n+\r\n+            Given N x N matrix, efficiently compute\r\n+            coefficients of characteristic polynomials of 'self'\r\n+            without division in the ground domain.\r\n+\r\n+            This method is particularly useful for computing determinant,\r\n+            principal minors and characteristic polynomial when 'self'\r\n+            has complicated coefficients e.g. polynomials. Semi-direct\r\n+            usage of this algorithm is also important in computing\r\n+            efficiently sub-resultant PRS.\r\n+\r\n+            Assuming that M is a square matrix of dimension N x N and\r\n+            I is N x N identity matrix, then the Berkowitz vector is\r\n+            an N x 1 vector whose entries are coefficients of the\r\n+            polynomial\r\n+\r\n+                           charpoly(M) = det(t*I - M)\r\n+\r\n+            As a consequence, all polynomials generated by Berkowitz\r\n+            algorithm are monic.\r\n+\r\n+           For more information on the implemented algorithm refer to:\r\n+\r\n+           [1] S.J. Berkowitz, On computing the determinant in small\r\n+               parallel time using a small number of processors, ACM,\r\n+               Information Processing Letters 18, 1984, pp. 147-150\r\n+\r\n+           [2] M. Keber, Division-Free computation of sub-resultants\r\n+               using Bezout matrices, Tech. Report MPI-I-2006-1-006,\r\n+               Saarbrucken, 2006\r\n+        \"\"\"\r\n+\r\n+        # handle the trivial cases\r\n+        if self.rows == 0 and self.cols == 0:\r\n+            return self._new(1, 1, [S.One])\r\n+        elif self.rows == 1 and self.cols == 1:\r\n+            return self._new(2, 1, [S.One, -self[0,0]])\r\n+\r\n+        submat, toeplitz = self._eval_berkowitz_toeplitz_matrix()\r\n+        return toeplitz * submat._eval_berkowitz_vector()\r\n+\r\n+    def _eval_det_bareiss(self):\r\n+        \"\"\"Compute matrix determinant using Bareiss' fraction-free\r\n+        algorithm which is an extension of the well known Gaussian\r\n+        elimination method. This approach is best suited for dense\r\n+        symbolic matrices and will result in a determinant with\r\n+        minimal number of fractions. It means that less term\r\n+        rewriting is needed on resulting formulae.\r\n+\r\n+        TODO: Implement algorithm for sparse matrices (SFF),\r\n+        http://www.eecis.udel.edu/~saunders/papers/sffge/it5.ps.\r\n+        \"\"\"\r\n+\r\n+        # XXX included as a workaround for issue #12362.  Should use `_find_reasonable_pivot` instead\r\n+        def _find_pivot(l):\r\n+            for pos,val in enumerate(l):\r\n+                if val:\r\n+                    return (pos, val, None, None)\r\n+            return (None, None, None, None)\r\n+\r\n+\r\n+        # Recursively implimented Bareiss' algorithm as per Deanna Richelle Leggett's\r\n+        # thesis http://www.math.usm.edu/perry/Research/Thesis_DRL.pdf\r\n+        def bareiss(mat, cumm=1):\r\n+            if mat.rows == 0:\r\n+                return S.One\r\n+            elif mat.rows == 1:\r\n+                return mat[0, 0]\r\n+\r\n+            # find a pivot and extract the remaining matrix\r\n+            # XXX should use `_find_reasonable_pivot`.  Blocked by issue #12362\r\n+            pivot_pos, pivot_val, _, _ = _find_pivot(mat[:, 0])\r\n+            if pivot_pos == None:\r\n+                return S.Zero\r\n+\r\n+            # if we have a valid pivot, we'll do a \"row swap\", so keep the\r\n+            # sign of the det\r\n+            sign = (-1) ** (pivot_pos % 2)\r\n+\r\n+            # we want every row but the pivot row and every column\r\n+            rows = list(i for i in range(mat.rows) if i != pivot_pos)\r\n+            cols = list(range(mat.cols))\r\n+            tmp_mat = mat.extract(rows, cols)\r\n+\r\n+            def entry(i, j):\r\n+                ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm\r\n+                if not ret.is_Atom:\r\n+                    cancel(ret)\r\n+                return ret\r\n+\r\n+            return sign*bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)\r\n+\r\n+        return cancel(bareiss(self))\r\n+\r\n+    def _eval_det_berkowitz(self):\r\n+        \"\"\" Use the Berkowitz algorithm to compute the determinant.\"\"\"\r\n+        berk_vector = self._eval_berkowitz_vector()\r\n+        return (-1)**(len(berk_vector) - 1) * berk_vector[-1]\r\n+\r\n+    def _eval_det_lu(self):\r\n+        \"\"\" Use LU the decomposition to compute the determinant.\"\"\"\r\n+        try:\r\n+            l, u, p = self.LUdecomposition()\r\n+        except ValueError:\r\n+            # if there is a value error in the LU decomposition, it means the matrix\r\n+            # wasn't invertible\r\n+            return S.Zero\r\n+\r\n+        # get the sign of the determinant\r\n+        det = (-1) ** (len(p) % 2)\r\n+        # multiply by the diagonal entries\r\n+        for k in range(self.rows):\r\n+            det *= l[k, k] * u[k, k]\r\n+\r\n+        return det\r\n+\r\n+    def adjugate(self, method=\"berkowitz\"):\r\n+        \"\"\"Returns the adjugate, or classical adjoint, of\r\n+        a matrix.  That is, the transpose of the matrix of cofactors.\r\n+\r\n+\r\n+        http://en.wikipedia.org/wiki/Adjugate\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        cofactor_matrix\r\n+        transpose\r\n+        \"\"\"\r\n+        return self.cofactor_matrix(method).transpose()\r\n+\r\n+    def charpoly(self, x=Dummy('lambda'), simplify=_simplify):\r\n+        \"\"\"Computes characteristic polynomial det(x*I - self) where I is\r\n+        the identity matrix.\r\n+\r\n+        A PurePoly is returned, so using different variables for ``x`` does\r\n+        not affect the comparison or the polynomials:\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> from sympy.abc import x, y\r\n+        >>> A = Matrix([[1, 3], [2, 0]])\r\n+        >>> A.charpoly(x) == A.charpoly(y)\r\n+        True\r\n+\r\n+        Specifying ``x`` is optional; a Dummy with name ``lambda`` is used by\r\n+        default (which looks good when pretty-printed in unicode):\r\n+\r\n+        >>> A.charpoly().as_expr()\r\n+        _lambda**2 - _lambda - 6\r\n+\r\n+        No test is done to see that ``x`` doesn't clash with an existing\r\n+        symbol, so using the default (``lambda``) or your own Dummy symbol is\r\n+        the safest option:\r\n+\r\n+        >>> A = Matrix([[1, 2], [x, 0]])\r\n+        >>> A.charpoly().as_expr()\r\n+        _lambda**2 - _lambda - 2*x\r\n+        >>> A.charpoly(x).as_expr()\r\n+        x**2 - 3*x\r\n+\r\n+        Notes\r\n+        =====\r\n+\r\n+        The Samuelson-Berkowitz algorithm is used to compute\r\n+        the characteristic polynomial efficiently and without any\r\n+        division operations.  Thus the characteristic polynomial over any\r\n+        commutative ring without zero divisors can be computed.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        det\r\n+        \"\"\"\r\n+        berk_vector = self._eval_berkowitz_vector()\r\n+        return PurePoly([simplify(a) for a in berk_vector], x)\r\n+\r\n+    def cofactor(self, i, j, method=\"berkowitz\"):\r\n+        \"\"\"Calculate the cofactor of an element.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        cofactor_matrix\r\n+        minor\r\n+        minor_submatrix\r\n+        \"\"\"\r\n+\r\n+        if self.rows != self.cols or self.rows < 1:\r\n+            raise NonSquareMatrixError()\r\n+\r\n+        return (-1)**((i + j) % 2) * self.minor(i, j, method)\r\n+\r\n+    def cofactor_matrix(self, method=\"berkowitz\"):\r\n+        \"\"\"Return a matrix containing the cofactor of each element.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        cofactor\r\n+        minor\r\n+        minor_submatrix\r\n+        adjugate\r\n+        \"\"\"\r\n+\r\n+        if self.rows != self.cols or self.rows < 1:\r\n+            raise NonSquareMatrixError()\r\n+\r\n+        return self._new(self.rows, self.cols,\r\n+                         lambda i, j: self.cofactor(i, j, method))\r\n+\r\n+    def det(self, method=\"bareiss\"):\r\n+        \"\"\"Computes the determinant of a matrix.  If the matrix\r\n+        is at most 3x3, a hard-coded formula is used.\r\n+        Otherwise, the determinant using the method `method`.\r\n+\r\n+\r\n+        Possible values for \"method\":\r\n+          bareis\r\n+          berkowitz\r\n+          lu\r\n+        \"\"\"\r\n+\r\n+        # sanitize `method`\r\n+        method = method.lower()\r\n+        if method == \"bareis\":\r\n+            SymPyDeprecationWarning(\r\n+                feature=\"Using 'bareis' to compute matrix determinant\",\r\n+                useinstead=\"'bareiss'\",\r\n+                issue=12363, deprecated_since_version=\"1.1\").warn()\r\n+            method = \"bareiss\"\r\n+        if method == \"det_lu\":\r\n+            SymPyDeprecationWarning(\r\n+                feature=\"Using 'det_lu' to compute matrix determinant\",\r\n+                useinstead=\"'lu'\",\r\n+                deprecated_since_version=\"1.1\").warn()\r\n+            method = \"lu\"\r\n+        if method not in (\"bareiss\", \"berkowitz\", \"lu\"):\r\n+            raise ValueError(\"Determinant method '%s' unrecognized\" % method)\r\n+\r\n+        # if methods were made internal and all determinant calculations\r\n+        # passed through here, then these lines could be factored out of\r\n+        # the method routines\r\n+        if self.rows != self.cols:\r\n+            raise NonSquareMatrixError()\r\n+\r\n+        n = self.rows\r\n+        if n == 0:\r\n+            return S.One\r\n+        elif n == 1:\r\n+            return self[0,0]\r\n+        elif n == 2:\r\n+            return self[0, 0] * self[1, 1] - self[0, 1] * self[1, 0]\r\n+        elif n == 3:\r\n+            return  (self[0, 0] * self[1, 1] * self[2, 2]\r\n+                   + self[0, 1] * self[1, 2] * self[2, 0]\r\n+                   + self[0, 2] * self[1, 0] * self[2, 1]\r\n+                   - self[0, 2] * self[1, 1] * self[2, 0]\r\n+                   - self[0, 0] * self[1, 2] * self[2, 1]\r\n+                   - self[0, 1] * self[1, 0] * self[2, 2])\r\n+\r\n+        if method == \"bareiss\":\r\n+            return self._eval_det_bareiss()\r\n+        elif method == \"berkowitz\":\r\n+            return self._eval_det_berkowitz()\r\n+        elif method == \"lu\":\r\n+            return self._eval_det_lu()\r\n+\r\n+    def minor(self, i, j, method=\"berkowitz\"):\r\n+        \"\"\"Return the (i,j) minor of `self`.  That is,\r\n+        return the determinant of the matrix obtained by deleting\r\n+        the `i`th row and `j`th column from `self`.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        minor_submatrix\r\n+        cofactor\r\n+        det\r\n+        \"\"\"\r\n+\r\n+        if self.rows != self.cols or self.rows < 1:\r\n+            raise NonSquareMatrixError()\r\n+\r\n+        return self.minor_submatrix(i, j).det(method=method)\r\n+\r\n+    def minor_submatrix(self, i, j):\r\n+        \"\"\"Return the submatrix obtained by removing the `i`th row\r\n+        and `j`th column from `self`.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        minor\r\n+        cofactor\r\n+        \"\"\"\r\n+\r\n+        if i < 0:\r\n+            i += self.rows\r\n+        if j < 0:\r\n+            j += self.cols\r\n+\r\n+        if not 0 <= i < self.rows or not 0 <= j < self.cols:\r\n+            raise ValueError(\"`i` and `j` must satisfy 0 <= i < `self.rows` \"\r\n+                             \"(%d)\" % self.rows + \"and 0 <= j < `self.cols` (%d).\" % self.cols)\r\n+\r\n+        rows = [a for a in range(self.rows) if a != i]\r\n+        cols = [a for a in range(self.cols) if a != j]\r\n+        return self.extract(rows, cols)\r\n+\r\n+\r\n+class MatrixBase(MatrixDeterminant, MatrixArithmetic, MatrixOperations, MatrixProperties, MatrixShaping):\r\n+    # Added just for numpy compatibility\r\n+    __array_priority__ = 11\r\n+\r\n+    is_Matrix = True\r\n+    _class_priority = 3\r\n+    _sympify = staticmethod(sympify)\r\n+\r\n+    __hash__ = None  # Mutable\r\n+\r\n+    def __array__(self):\r\n+        from .dense import matrix2numpy\r\n+        return matrix2numpy(self)\r\n+\r\n+    def __getattr__(self, attr):\r\n+        if attr in ('diff', 'integrate', 'limit'):\r\n+            def doit(*args):\r\n+                item_doit = lambda item: getattr(item, attr)(*args)\r\n+                return self.applyfunc(item_doit)\r\n+\r\n+            return doit\r\n+        else:\r\n+            raise AttributeError(\r\n+                \"%s has no attribute %s.\" % (self.__class__.__name__, attr))\r\n+\r\n+    def __len__(self):\r\n+        \"\"\"Return the number of elements of self.\r\n+\r\n+        Implemented mainly so bool(Matrix()) == False.\r\n+        \"\"\"\r\n+        return self.rows * self.cols\r\n+\r\n+    def __mathml__(self):\r\n+        mml = \"\"\r\n+        for i in range(self.rows):\r\n+            mml += \"<matrixrow>\"\r\n+            for j in range(self.cols):\r\n+                mml += self[i, j].__mathml__()\r\n+            mml += \"</matrixrow>\"\r\n+        return \"<matrix>\" + mml + \"</matrix>\"\r\n+\r\n+    # needed for python 2 compatibility\r\n+    def __ne__(self, other):\r\n+        return not self == other\r\n+\r\n+    def _matrix_pow_by_jordan_blocks(self, num):\r\n+        from sympy.matrices import diag, MutableMatrix\r\n+        from sympy import binomial\r\n+\r\n+        def jordan_cell_power(jc, n):\r\n+            N = jc.shape[0]\r\n+            l = jc[0, 0]\r\n+            if l == 0 and (n < N - 1) != False:\r\n+                raise ValueError(\"Matrix det == 0; not invertible\")\r\n+            elif l == 0 and N > 1 and n % 1 != 0:\r\n+                raise ValueError(\"Non-integer power cannot be evaluated\")\r\n+            for i in range(N):\r\n+                for j in range(N-i):\r\n+                    bn = binomial(n, i)\r\n+                    if isinstance(bn, binomial):\r\n+                        bn = bn._eval_expand_func()\r\n+                    jc[j, i+j] = l**(n-i)*bn\r\n+\r\n+        P, jordan_cells = self.jordan_cells()\r\n+        # Make sure jordan_cells matrices are mutable:\r\n+        jordan_cells = [MutableMatrix(j) for j in jordan_cells]\r\n+        for j in jordan_cells:\r\n+            jordan_cell_power(j, num)\r\n+        return self._new(P*diag(*jordan_cells)*P.inv())\r\n+\r\n+    def _matrix_pow_by_recursion(self, num):\r\n+        from sympy.matrices import eye\r\n+        n = int(num)\r\n+        if n < 0:\r\n+            return self.inv()**-n   # A**-2 = (A**-1)**2\r\n+        a = eye(self.cols)\r\n+        s = self\r\n+        while n:\r\n+            if n % 2:\r\n+                a *= s\r\n+                n -= 1\r\n+            if not n:\r\n+                break\r\n+            s *= s\r\n+            n //= 2\r\n+        return self._new(a)\r\n+\r\n+    def __repr__(self):\r\n+        return sstr(self)\r\n+\r\n+    def __str__(self):\r\n+        if self.rows == 0 or self.cols == 0:\r\n+            return 'Matrix(%s, %s, [])' % (self.rows, self.cols)\r\n+        return \"Matrix(%s)\" % str(self.tolist())\r\n+\r\n+    def _diagonalize_clear_subproducts(self):\r\n+        del self._is_symbolic\r\n+        del self._is_symmetric\r\n+        del self._eigenvects\r\n+\r\n+    def _format_str(self, printer=None):\r\n+        if not printer:\r\n+            from sympy.printing.str import StrPrinter\r\n+            printer = StrPrinter()\r\n+        # Handle zero dimensions:\r\n+        if self.rows == 0 or self.cols == 0:\r\n+            return 'Matrix(%s, %s, [])' % (self.rows, self.cols)\r\n+        if self.rows == 1:\r\n+            return \"Matrix([%s])\" % self.table(printer, rowsep=',\\n')\r\n+        return \"Matrix([\\n%s])\" % self.table(printer, rowsep=',\\n')\r\n+\r\n+    @classmethod\r\n+    def _handle_creation_inputs(cls, *args, **kwargs):\r\n+        \"\"\"Return the number of rows, cols and flat matrix elements.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix, I\r\n+\r\n+        Matrix can be constructed as follows:\r\n+\r\n+        * from a nested list of iterables\r\n+\r\n+        >>> Matrix( ((1, 2+I), (3, 4)) )\r\n+        Matrix([\r\n+        [1, 2 + I],\r\n+        [3,     4]])\r\n+\r\n+        * from un-nested iterable (interpreted as a column)\r\n+\r\n+        >>> Matrix( [1, 2] )\r\n+        Matrix([\r\n+        [1],\r\n+        [2]])\r\n+\r\n+        * from un-nested iterable with dimensions\r\n+\r\n+        >>> Matrix(1, 2, [1, 2] )\r\n+        Matrix([[1, 2]])\r\n+\r\n+        * from no arguments (a 0 x 0 matrix)\r\n+\r\n+        >>> Matrix()\r\n+        Matrix(0, 0, [])\r\n+\r\n+        * from a rule\r\n+\r\n+        >>> Matrix(2, 2, lambda i, j: i/(j + 1) )\r\n+        Matrix([\r\n+        [0,   0],\r\n+        [1, 1/2]])\r\n+\r\n+        \"\"\"\r\n+        from sympy.matrices.sparse import SparseMatrix\r\n+\r\n+        flat_list = None\r\n+\r\n+        if len(args) == 1:\r\n+            # Matrix(SparseMatrix(...))\r\n+            if isinstance(args[0], SparseMatrix):\r\n+                return args[0].rows, args[0].cols, flatten(args[0].tolist())\r\n+\r\n+            # Matrix(Matrix(...))\r\n+            elif isinstance(args[0], MatrixBase):\r\n+                return args[0].rows, args[0].cols, args[0]._mat\r\n+\r\n+            # Matrix(MatrixSymbol('X', 2, 2))\r\n+            elif isinstance(args[0], Basic) and args[0].is_Matrix:\r\n+                return args[0].rows, args[0].cols, args[0].as_explicit()._mat\r\n+\r\n+            # Matrix(numpy.ones((2, 2)))\r\n+            elif hasattr(args[0], \"__array__\"):\r\n+                # NumPy array or matrix or some other object that implements\r\n+                # __array__. So let's first use this method to get a\r\n+                # numpy.array() and then make a python list out of it.\r\n+                arr = args[0].__array__()\r\n+                if len(arr.shape) == 2:\r\n+                    rows, cols = arr.shape[0], arr.shape[1]\r\n+                    flat_list = [cls._sympify(i) for i in arr.ravel()]\r\n+                    return rows, cols, flat_list\r\n+                elif len(arr.shape) == 1:\r\n+                    rows, cols = arr.shape[0], 1\r\n+                    flat_list = [S.Zero] * rows\r\n+                    for i in range(len(arr)):\r\n+                        flat_list[i] = cls._sympify(arr[i])\r\n+                    return rows, cols, flat_list\r\n+                else:\r\n+                    raise NotImplementedError(\r\n+                        \"SymPy supports just 1D and 2D matrices\")\r\n+\r\n+            # Matrix([1, 2, 3]) or Matrix([[1, 2], [3, 4]])\r\n+            elif is_sequence(args[0]) \\\r\n+                    and not isinstance(args[0], DeferredVector):\r\n+                in_mat = []\r\n+                ncol = set()\r\n+                for row in args[0]:\r\n+                    if isinstance(row, MatrixBase):\r\n+                        in_mat.extend(row.tolist())\r\n+                        if row.cols or row.rows:  # only pay attention if it's not 0x0\r\n+                            ncol.add(row.cols)\r\n+                    else:\r\n+                        in_mat.append(row)\r\n+                        try:\r\n+                            ncol.add(len(row))\r\n+                        except TypeError:\r\n+                            ncol.add(1)\r\n+                if len(ncol) > 1:\r\n+                    raise ValueError(\"Got rows of variable lengths: %s\" %\r\n+                                     sorted(list(ncol)))\r\n+                cols = ncol.pop() if ncol else 0\r\n+                rows = len(in_mat) if cols else 0\r\n+                if rows:\r\n+                    if not is_sequence(in_mat[0]):\r\n+                        cols = 1\r\n+                        flat_list = [cls._sympify(i) for i in in_mat]\r\n+                        return rows, cols, flat_list\r\n+                flat_list = []\r\n+                for j in range(rows):\r\n+                    for i in range(cols):\r\n+                        flat_list.append(cls._sympify(in_mat[j][i]))\r\n+\r\n+        elif len(args) == 3:\r\n+            rows = as_int(args[0])\r\n+            cols = as_int(args[1])\r\n+\r\n+            # Matrix(2, 2, lambda i, j: i+j)\r\n+            if len(args) == 3 and isinstance(args[2], collections.Callable):\r\n+                op = args[2]\r\n+                flat_list = []\r\n+                for i in range(rows):\r\n+                    flat_list.extend(\r\n+                        [cls._sympify(op(cls._sympify(i), cls._sympify(j)))\r\n+                         for j in range(cols)])\r\n+\r\n+            # Matrix(2, 2, [1, 2, 3, 4])\r\n+            elif len(args) == 3 and is_sequence(args[2]):\r\n+                flat_list = args[2]\r\n+                if len(flat_list) != rows * cols:\r\n+                    raise ValueError(\r\n+                        'List length should be equal to rows*columns')\r\n+                flat_list = [cls._sympify(i) for i in flat_list]\r\n+\r\n+\r\n+        # Matrix()\r\n+        elif len(args) == 0:\r\n+            # Empty Matrix\r\n+            rows = cols = 0\r\n+            flat_list = []\r\n+\r\n+        if flat_list is None:\r\n+            raise TypeError(\"Data type not understood\")\r\n+\r\n+        return rows, cols, flat_list\r\n+\r\n+    def _jordan_block_structure(self):\r\n+        # To every eigenvalue may belong `i` blocks with size s(i)\r\n+        # and a chain of generalized eigenvectors\r\n+        # which will be determined by the following computations:\r\n+        # for every eigenvalue we will add a dictionary\r\n+        # containing, for all blocks, the blocksizes and the attached chain vectors\r\n+        # that will eventually be used to form the transformation P\r\n+        jordan_block_structures = {}\r\n+        _eigenvects = self.eigenvects()\r\n+        ev = self.eigenvals()\r\n+        if len(ev) == 0:\r\n+            raise AttributeError(\"could not compute the eigenvalues\")\r\n+        for eigenval, multiplicity, vects in _eigenvects:\r\n+            l_jordan_chains = {}\r\n+            geometrical = len(vects)\r\n+            if geometrical == multiplicity:\r\n+                # The Jordan chains have all length 1 and consist of only one vector\r\n+                # which is the eigenvector of course\r\n+                chains = []\r\n+                for v in vects:\r\n+                    chain = [v]\r\n+                    chains.append(chain)\r\n+                l_jordan_chains[1] = chains\r\n+                jordan_block_structures[eigenval] = l_jordan_chains\r\n+            elif geometrical == 0:\r\n+                raise MatrixError(\r\n+                    \"Matrix has the eigen vector with geometrical multiplicity equal zero.\")\r\n+            else:\r\n+                # Up to now we know nothing about the sizes of the blocks of our Jordan matrix.\r\n+                # Note that knowledge of algebraic and geometrical multiplicity\r\n+                # will *NOT* be sufficient to determine this structure.\r\n+                # The blocksize `s` could be defined as the minimal `k` where\r\n+                # `kernel(self-lI)^k = kernel(self-lI)^(k+1)`\r\n+                # The extreme case would be that k = (multiplicity-geometrical+1)\r\n+                # but the blocks could be smaller.\r\n+\r\n+                # Consider for instance the following matrix\r\n+\r\n+                # [2 1 0 0]\r\n+                # [0 2 1 0]\r\n+                # [0 0 2 0]\r\n+                # [0 0 0 2]\r\n+\r\n+                # which coincides with it own Jordan canonical form.\r\n+                # It has only one eigenvalue l=2 of (algebraic) multiplicity=4.\r\n+                # It has two eigenvectors, one belonging to the last row (blocksize 1)\r\n+                # and one being the last part of a jordan chain of length 3 (blocksize of the first block).\r\n+\r\n+                # Note again that it is not not possible to obtain this from the algebraic and geometrical\r\n+                # multiplicity alone. This only gives us an upper limit for the dimension of one of\r\n+                # the subspaces (blocksize of according jordan block) given by\r\n+                # max=(multiplicity-geometrical+1) which is reached for our matrix\r\n+                # but not for\r\n+\r\n+                # [2 1 0 0]\r\n+                # [0 2 0 0]\r\n+                # [0 0 2 1]\r\n+                # [0 0 0 2]\r\n+\r\n+                # although multiplicity=4 and geometrical=2 are the same for this matrix.\r\n+\r\n+                from sympy.matrices import MutableMatrix\r\n+                I = MutableMatrix.eye(self.rows)\r\n+                l = eigenval\r\n+                M = (self - l * I)\r\n+\r\n+                # We will store the matrices `(self-l*I)^k` for further computations\r\n+                # for convenience only we store `Ms[0]=(sefl-lI)^0=I`\r\n+                # so the index is the same as the power for all further Ms entries\r\n+                # We also store the vectors that span these kernels (Ns[0] = [])\r\n+                # and also their dimensions `a_s`\r\n+                # this is mainly done for debugging since the number of blocks of a given size\r\n+                # can be computed from the a_s, in order to check our result which is obtained simpler\r\n+                # by counting the number of Jordan chains for `a` given `s`\r\n+                # `a_0` is `dim(Kernel(Ms[0]) = dim (Kernel(I)) = 0` since `I` is regular\r\n+\r\n+                l_jordan_chains = {}\r\n+                Ms = [I]\r\n+                Ns = [[]]\r\n+                a = [0]\r\n+                smax = 0\r\n+                M_new = Ms[-1] * M\r\n+                Ns_new = M_new.nullspace()\r\n+                a_new = len(Ns_new)\r\n+                Ms.append(M_new)\r\n+                Ns.append(Ns_new)\r\n+                while a_new > a[\r\n+                    -1]:  # as long as the nullspaces increase compute further powers\r\n+                    a.append(a_new)\r\n+                    M_new = Ms[-1] * M\r\n+                    Ns_new = M_new.nullspace()\r\n+                    a_new = len(Ns_new)\r\n+                    Ms.append(M_new)\r\n+                    Ns.append(Ns_new)\r\n+                    smax += 1\r\n+\r\n+                # We now have `Ms[-1]=((self-l*I)**s)=Z=0`.\r\n+                # We also know the size of the biggest Jordan block\r\n+                # associated with `l` to be `s`.\r\n+                # Now let us proceed with the computation of the associate part of the transformation matrix `P`.\r\n+                # We already know the kernel (=nullspace)  `K_l` of (self-lI) which consists of the\r\n+                # eigenvectors belonging to eigenvalue `l`.\r\n+                # The dimension of this space is the geometric multiplicity of eigenvalue `l`.\r\n+                # For every eigenvector ev out of `K_l`, there exists a subspace that is\r\n+                # spanned by the Jordan chain of ev. The dimension of this subspace is\r\n+                # represented by the length `s` of the Jordan block.\r\n+                # The chain itself is given by `{e_0,..,e_s-1}` where:\r\n+                # `e_k+1 =(self-lI)e_k (*)`\r\n+                # and\r\n+                # `e_s-1=ev`\r\n+                # So it would be possible to start with the already known `ev` and work backwards until one\r\n+                # reaches `e_0`. Unfortunately this can not be done by simply solving system (*) since its matrix\r\n+                # is singular (by definition of the eigenspaces).\r\n+                # This approach would force us a choose in every step the degree of freedom undetermined\r\n+                # by (*). This is difficult to implement with computer algebra systems and also quite inefficient.\r\n+                # We therefore reformulate the problem in terms of nullspaces.\r\n+                # To do so we start from the other end and choose `e0`'s out of\r\n+                # `E=Kernel(self-lI)^s / Kernel(self-lI)^(s-1)`\r\n+                # Note that `Kernel(self-lI)^s = Kernel(Z) = V` (the whole vector space).\r\n+                # So in the first step `s=smax` this restriction turns out to actually restrict nothing at all\r\n+                # and the only remaining condition is to choose vectors in `Kernel(self-lI)^(s-1)`.\r\n+                # Subsequently we compute `e_1=(self-lI)e_0`, `e_2=(self-lI)*e_1` and so on.\r\n+                # The subspace `E` can have a dimension larger than one.\r\n+                # That means that we have more than one Jordan block of size `s` for the eigenvalue `l`\r\n+                # and as many Jordan chains (this is the case in the second example).\r\n+                # In this case we start as many Jordan chains and have as many blocks of size `s` in the jcf.\r\n+                # We now have all the Jordan blocks of size `s` but there might be others attached to the same\r\n+                # eigenvalue that are smaller.\r\n+                # So we will do the same procedure also for `s-1` and so on until 1 (the lowest possible order\r\n+                # where the Jordan chain is of length 1 and just represented by the eigenvector).\r\n+\r\n+                for s in reversed(range(1, smax + 1)):\r\n+                    S = Ms[s]\r\n+                    # We want the vectors in `Kernel((self-lI)^s)`,\r\n+                    # but without those in `Kernel(self-lI)^s-1`\r\n+                    # so we will add their adjoints as additional equations\r\n+                    # to the system formed by `S` to get the orthogonal\r\n+                    # complement.\r\n+                    # (`S` will no longer be quadratic.)\r\n+\r\n+                    exclude_vectors = Ns[s - 1]\r\n+                    for k in range(0, a[s - 1]):\r\n+                        S = S.col_join((exclude_vectors[k]).adjoint())\r\n+\r\n+                    # We also want to exclude the vectors\r\n+                    # in the chains for the bigger blocks\r\n+                    # that we have already computed (if there are any).\r\n+                    # (That is why we start with the biggest s).\r\n+\r\n+                    # Since Jordan blocks are not orthogonal in general\r\n+                    # (in the original space), only those chain vectors\r\n+                    # that are on level s (index `s-1` in a chain)\r\n+                    # are added.\r\n+\r\n+                    for chain_list in l_jordan_chains.values():\r\n+                        for chain in chain_list:\r\n+                            S = S.col_join(chain[s - 1].adjoint())\r\n+\r\n+                    e0s = S.nullspace()\r\n+                    # Determine the number of chain leaders\r\n+                    # for blocks of size `s`.\r\n+                    n_e0 = len(e0s)\r\n+                    s_chains = []\r\n+                    # s_cells=[]\r\n+                    for i in range(0, n_e0):\r\n+                        chain = [e0s[i]]\r\n+                        for k in range(1, s):\r\n+                            v = M * chain[k - 1]\r\n+                            chain.append(v)\r\n+\r\n+                        # We want the chain leader appear as the last of the block.\r\n+                        chain.reverse()\r\n+                        s_chains.append(chain)\r\n+                    l_jordan_chains[s] = s_chains\r\n+            jordan_block_structures[eigenval] = l_jordan_chains\r\n+        return jordan_block_structures\r\n+\r\n+    def _jordan_split(self, algebraical, geometrical):\r\n+        \"\"\"Return a list of integers with sum equal to 'algebraical'\r\n+        and length equal to 'geometrical'\"\"\"\r\n+        n1 = algebraical // geometrical\r\n+        res = [n1] * geometrical\r\n+        res[len(res) - 1] += algebraical % geometrical\r\n+        assert sum(res) == algebraical\r\n+        return res\r\n+\r\n+    def _setitem(self, key, value):\r\n+        \"\"\"Helper to set value at location given by key.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix, I, zeros, ones\r\n+        >>> m = Matrix(((1, 2+I), (3, 4)))\r\n+        >>> m\r\n+        Matrix([\r\n+        [1, 2 + I],\r\n+        [3,     4]])\r\n+        >>> m[1, 0] = 9\r\n+        >>> m\r\n+        Matrix([\r\n+        [1, 2 + I],\r\n+        [9,     4]])\r\n+        >>> m[1, 0] = [[0, 1]]\r\n+\r\n+        To replace row r you assign to position r*m where m\r\n+        is the number of columns:\r\n+\r\n+        >>> M = zeros(4)\r\n+        >>> m = M.cols\r\n+        >>> M[3*m] = ones(1, m)*2; M\r\n+        Matrix([\r\n+        [0, 0, 0, 0],\r\n+        [0, 0, 0, 0],\r\n+        [0, 0, 0, 0],\r\n+        [2, 2, 2, 2]])\r\n+\r\n+        And to replace column c you can assign to position c:\r\n+\r\n+        >>> M[2] = ones(m, 1)*4; M\r\n+        Matrix([\r\n+        [0, 0, 4, 0],\r\n+        [0, 0, 4, 0],\r\n+        [0, 0, 4, 0],\r\n+        [2, 2, 4, 2]])\r\n+        \"\"\"\r\n+        from .dense import Matrix\r\n+\r\n+        is_slice = isinstance(key, slice)\r\n+        i, j = key = self.key2ij(key)\r\n+        is_mat = isinstance(value, MatrixBase)\r\n+        if type(i) is slice or type(j) is slice:\r\n+            if is_mat:\r\n+                self.copyin_matrix(key, value)\r\n+                return\r\n+            if not isinstance(value, Expr) and is_sequence(value):\r\n+                self.copyin_list(key, value)\r\n+                return\r\n+            raise ValueError('unexpected value: %s' % value)\r\n+        else:\r\n+            if (not is_mat and\r\n+                    not isinstance(value, Basic) and is_sequence(value)):\r\n+                value = Matrix(value)\r\n+                is_mat = True\r\n+            if is_mat:\r\n+                if is_slice:\r\n+                    key = (slice(*divmod(i, self.cols)),\r\n+                           slice(*divmod(j, self.cols)))\r\n+                else:\r\n+                    key = (slice(i, i + value.rows),\r\n+                           slice(j, j + value.cols))\r\n+                self.copyin_matrix(key, value)\r\n+            else:\r\n+                return i, j, self._sympify(value)\r\n+            return\r\n+\r\n+    def add(self, b):\r\n+        \"\"\"Return self + b \"\"\"\r\n+        return self + b\r\n+\r\n+    def berkowitz_charpoly(self, x=Dummy('lambda'), simplify=_simplify):\r\n+        \"\"\"Computes characteristic polynomial minors using Berkowitz method.\r\n+\r\n+        A PurePoly is returned so using different variables for ``x`` does\r\n+        not affect the comparison or the polynomials:\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> from sympy.abc import x, y\r\n+        >>> A = Matrix([[1, 3], [2, 0]])\r\n+        >>> A.berkowitz_charpoly(x) == A.berkowitz_charpoly(y)\r\n+        True\r\n+\r\n+        Specifying ``x`` is optional; a Dummy with name ``lambda`` is used by\r\n+        default (which looks good when pretty-printed in unicode):\r\n+\r\n+        >>> A.berkowitz_charpoly().as_expr()\r\n+        _lambda**2 - _lambda - 6\r\n+\r\n+        No test is done to see that ``x`` doesn't clash with an existing\r\n+        symbol, so using the default (``lambda``) or your own Dummy symbol is\r\n+        the safest option:\r\n+\r\n+        >>> A = Matrix([[1, 2], [x, 0]])\r\n+        >>> A.charpoly().as_expr()\r\n+        _lambda**2 - _lambda - 2*x\r\n+        >>> A.charpoly(x).as_expr()\r\n+        x**2 - 3*x\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        berkowitz\r\n+        \"\"\"\r\n+        return PurePoly(list(map(simplify, self.berkowitz()[-1])), x)\r\n+\r\n+    def berkowitz_det(self):\r\n+        \"\"\"Computes determinant using Berkowitz method.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        det\r\n+        berkowitz\r\n+        \"\"\"\r\n+        if not self.is_square:\r\n+            raise NonSquareMatrixError()\r\n+        if not self:\r\n+            return S.One\r\n+        poly = self.berkowitz()[-1]\r\n+        sign = (-1) ** (len(poly) - 1)\r\n+        return sign * poly[-1]\r\n+\r\n+    def berkowitz_eigenvals(self, **flags):\r\n+        \"\"\"Computes eigenvalues of a Matrix using Berkowitz method.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        berkowitz\r\n+        \"\"\"\r\n+        return roots(self.berkowitz_charpoly(Dummy('x')), **flags)\r\n+\r\n+    def berkowitz_minors(self):\r\n+        \"\"\"Computes principal minors using Berkowitz method.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        berkowitz\r\n+        \"\"\"\r\n+        sign, minors = S.One, []\r\n+\r\n+        for poly in self.berkowitz():\r\n+            minors.append(sign * poly[-1])\r\n+            sign = -sign\r\n+\r\n+        return tuple(minors)\r\n+\r\n+    def berkowitz(self):\r\n+        \"\"\"The Berkowitz algorithm.\r\n+\r\n+           Given N x N matrix with symbolic content, compute efficiently\r\n+           coefficients of characteristic polynomials of 'self' and all\r\n+           its square sub-matrices composed by removing both i-th row\r\n+           and column, without division in the ground domain.\r\n+\r\n+           This method is particularly useful for computing determinant,\r\n+           principal minors and characteristic polynomial, when 'self'\r\n+           has complicated coefficients e.g. polynomials. Semi-direct\r\n+           usage of this algorithm is also important in computing\r\n+           efficiently sub-resultant PRS.\r\n+\r\n+           Assuming that M is a square matrix of dimension N x N and\r\n+           I is N x N identity matrix,  then the following following\r\n+           definition of characteristic polynomial is begin used:\r\n+\r\n+                          charpoly(M) = det(t*I - M)\r\n+\r\n+           As a consequence, all polynomials generated by Berkowitz\r\n+           algorithm are monic.\r\n+\r\n+           >>> from sympy import Matrix\r\n+           >>> from sympy.abc import x, y, z\r\n+\r\n+           >>> M = Matrix([[x, y, z], [1, 0, 0], [y, z, x]])\r\n+\r\n+           >>> p, q, r, s = M.berkowitz()\r\n+\r\n+           >>> p # 0 x 0 M's sub-matrix\r\n+           (1,)\r\n+\r\n+           >>> q # 1 x 1 M's sub-matrix\r\n+           (1, -x)\r\n+\r\n+           >>> r # 2 x 2 M's sub-matrix\r\n+           (1, -x, -y)\r\n+\r\n+           >>> s # 3 x 3 M's sub-matrix\r\n+           (1, -2*x, x**2 - y*z - y, x*y - z**2)\r\n+\r\n+           For more information on the implemented algorithm refer to:\r\n+\r\n+           [1] S.J. Berkowitz, On computing the determinant in small\r\n+               parallel time using a small number of processors, ACM,\r\n+               Information Processing Letters 18, 1984, pp. 147-150\r\n+\r\n+           [2] M. Keber, Division-Free computation of sub-resultants\r\n+               using Bezout matrices, Tech. Report MPI-I-2006-1-006,\r\n+               Saarbrucken, 2006\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        berkowitz_det\r\n+        berkowitz_minors\r\n+        berkowitz_charpoly\r\n+        berkowitz_eigenvals\r\n+        \"\"\"\r\n+        from sympy.matrices import zeros\r\n+        berk = ((1,),)\r\n+        if not self:\r\n+            return berk\r\n+\r\n+        if not self.is_square:\r\n+            raise NonSquareMatrixError()\r\n+\r\n+        A, N = self, self.rows\r\n+        transforms = [0] * (N - 1)\r\n+\r\n+        for n in range(N, 1, -1):\r\n+            T, k = zeros(n + 1, n), n - 1\r\n+\r\n+            R, C = -A[k, :k], A[:k, k]\r\n+            A, a = A[:k, :k], -A[k, k]\r\n+\r\n+            items = [C]\r\n+\r\n+            for i in range(0, n - 2):\r\n+                items.append(A * items[i])\r\n+\r\n+            for i, B in enumerate(items):\r\n+                items[i] = (R * B)[0, 0]\r\n+\r\n+            items = [S.One, a] + items\r\n+\r\n+            for i in range(n):\r\n+                T[i:, i] = items[:n - i + 1]\r\n+\r\n+            transforms[k - 1] = T\r\n+\r\n+        polys = [self._new([S.One, -A[0, 0]])]\r\n+\r\n+        for i, T in enumerate(transforms):\r\n+            polys.append(T * polys[i])\r\n+\r\n+        return berk + tuple(map(tuple, polys))\r\n+\r\n+    def cholesky_solve(self, rhs):\r\n+        \"\"\"Solves Ax = B using Cholesky decomposition,\r\n+        for a general square non-singular matrix.\r\n+        For a non-square matrix with rows > cols,\r\n+        the least squares solution is returned.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        lower_triangular_solve\r\n+        upper_triangular_solve\r\n+        gauss_jordan_solve\r\n+        diagonal_solve\r\n+        LDLsolve\r\n+        LUsolve\r\n+        QRsolve\r\n+        pinv_solve\r\n+        \"\"\"\r\n+        if self.is_symmetric():\r\n+            L = self._cholesky()\r\n+        elif self.rows >= self.cols:\r\n+            L = (self.T * self)._cholesky()\r\n+            rhs = self.T * rhs\r\n+        else:\r\n+            raise NotImplementedError('Under-determined System. '\r\n+                                      'Try M.gauss_jordan_solve(rhs)')\r\n+        Y = L._lower_triangular_solve(rhs)\r\n+        return (L.T)._upper_triangular_solve(Y)\r\n+\r\n+    def cholesky(self):\r\n+        \"\"\"Returns the Cholesky decomposition L of a matrix A\r\n+        such that L * L.T = A\r\n+\r\n+        A must be a square, symmetric, positive-definite\r\n+        and non-singular matrix.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix\r\n+        >>> A = Matrix(((25, 15, -5), (15, 18, 0), (-5, 0, 11)))\r\n+        >>> A.cholesky()\r\n+        Matrix([\r\n+        [ 5, 0, 0],\r\n+        [ 3, 3, 0],\r\n+        [-1, 1, 3]])\r\n+        >>> A.cholesky() * A.cholesky().T\r\n+        Matrix([\r\n+        [25, 15, -5],\r\n+        [15, 18,  0],\r\n+        [-5,  0, 11]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        LDLdecomposition\r\n+        LUdecomposition\r\n+        QRdecomposition\r\n+        \"\"\"\r\n+\r\n+        if not self.is_square:\r\n+            raise NonSquareMatrixError(\"Matrix must be square.\")\r\n+        if not self.is_symmetric():\r\n+            raise ValueError(\"Matrix must be symmetric.\")\r\n+        return self._cholesky()\r\n+\r\n+    def cofactorMatrix(self, method=\"berkowitz\"):\r\n+        return self.cofactor_matrix(method=method)\r\n+\r\n+    def columnspace(self, simplify=False):\r\n+        \"\"\"Returns list of vectors (Matrix objects) that span columnspace of self\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix\r\n+        >>> m = Matrix(3, 3, [1, 3, 0, -2, -6, 0, 3, 9, 6])\r\n+        >>> m\r\n+        Matrix([\r\n+        [ 1,  3, 0],\r\n+        [-2, -6, 0],\r\n+        [ 3,  9, 6]])\r\n+        >>> m.columnspace()\r\n+        [Matrix([\r\n+        [ 1],\r\n+        [-2],\r\n+        [ 3]]), Matrix([\r\n+        [0],\r\n+        [0],\r\n+        [6]])]\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        nullspace\r\n+        \"\"\"\r\n+        simpfunc = simplify if isinstance(\r\n+            simplify, FunctionType) else _simplify\r\n+        reduced, pivots = self.rref(simplify=simpfunc)\r\n+\r\n+        basis = []\r\n+        # create a set of vectors for the basis\r\n+        for i in range(self.cols):\r\n+            if i in pivots:\r\n+                basis.append(self.col(i))\r\n+        return [self._new(b) for b in basis]\r\n+\r\n+    def condition_number(self):\r\n+        \"\"\"Returns the condition number of a matrix.\r\n+\r\n+        This is the maximum singular value divided by the minimum singular value\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix, S\r\n+        >>> A = Matrix([[1, 0, 0], [0, 10, 0], [0, 0, S.One/10]])\r\n+        >>> A.condition_number()\r\n+        100\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        singular_values\r\n+        \"\"\"\r\n+        if not self:\r\n+            return S.Zero\r\n+        singularvalues = self.singular_values()\r\n+        return Max(*singularvalues) / Min(*singularvalues)\r\n+\r\n+    def copy(self):\r\n+        \"\"\"\r\n+        Returns the copy of a matrix.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> A = Matrix(2, 2, [1, 2, 3, 4])\r\n+        >>> A.copy()\r\n+        Matrix([\r\n+        [1, 2],\r\n+        [3, 4]])\r\n+\r\n+        \"\"\"\r\n+        return self._new(self.rows, self.cols, self._mat)\r\n+\r\n+    def cross(self, b):\r\n+        \"\"\"Return the cross product of `self` and `b` relaxing the condition\r\n+        of compatible dimensions: if each has 3 elements, a matrix of the\r\n+        same type and shape as `self` will be returned. If `b` has the same\r\n+        shape as `self` then common identities for the cross product (like\r\n+        `a x b = - b x a`) will hold.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        dot\r\n+        multiply\r\n+        multiply_elementwise\r\n+        \"\"\"\r\n+        if not is_sequence(b):\r\n+            raise TypeError(\r\n+                \"`b` must be an ordered iterable or Matrix, not %s.\" %\r\n+                type(b))\r\n+        if not (self.rows * self.cols == b.rows * b.cols == 3):\r\n+            raise ShapeError(\"Dimensions incorrect for cross product: %s x %s\" %\r\n+                             ((self.rows, self.cols), (b.rows, b.cols)))\r\n+        else:\r\n+            return self._new(self.rows, self.cols, (\r\n+                (self[1] * b[2] - self[2] * b[1]),\r\n+                (self[2] * b[0] - self[0] * b[2]),\r\n+                (self[0] * b[1] - self[1] * b[0])))\r\n+\r\n+    @property\r\n+    def D(self):\r\n+        \"\"\"Return Dirac conjugate (if self.rows == 4).\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix, I, eye\r\n+        >>> m = Matrix((0, 1 + I, 2, 3))\r\n+        >>> m.D\r\n+        Matrix([[0, 1 - I, -2, -3]])\r\n+        >>> m = (eye(4) + I*eye(4))\r\n+        >>> m[0, 3] = 2\r\n+        >>> m.D\r\n+        Matrix([\r\n+        [1 - I,     0,      0,      0],\r\n+        [    0, 1 - I,      0,      0],\r\n+        [    0,     0, -1 + I,      0],\r\n+        [    2,     0,      0, -1 + I]])\r\n+\r\n+        If the matrix does not have 4 rows an AttributeError will be raised\r\n+        because this property is only defined for matrices with 4 rows.\r\n+\r\n+        >>> Matrix(eye(2)).D\r\n+        Traceback (most recent call last):\r\n+        ...\r\n+        AttributeError: Matrix has no attribute D.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        conjugate: By-element conjugation\r\n+        H: Hermite conjugation\r\n+        \"\"\"\r\n+        from sympy.physics.matrices import mgamma\r\n+        if self.rows != 4:\r\n+            # In Python 3.2, properties can only return an AttributeError\r\n+            # so we can't raise a ShapeError -- see commit which added the\r\n+            # first line of this inline comment. Also, there is no need\r\n+            # for a message since MatrixBase will raise the AttributeError\r\n+            raise AttributeError\r\n+        return self.H * mgamma(0)\r\n+\r\n+    @deprecated(useinstead=\"det_bareiss\", issue=12363, deprecated_since_version=\"1.1\")\r\n+    def det_bareis(self):\r\n+        return self.det_bareiss()\r\n+\r\n+    def det_bareiss(self):\r\n+        \"\"\"Compute matrix determinant using Bareiss' fraction-free\r\n+        algorithm which is an extension of the well known Gaussian\r\n+        elimination method. This approach is best suited for dense\r\n+        symbolic matrices and will result in a determinant with\r\n+        minimal number of fractions. It means that less term\r\n+        rewriting is needed on resulting formulae.\r\n+\r\n+        TODO: Implement algorithm for sparse matrices (SFF),\r\n+        http://www.eecis.udel.edu/~saunders/papers/sffge/it5.ps.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        det\r\n+        berkowitz_det\r\n+        \"\"\"\r\n+        if not self.is_square:\r\n+            raise NonSquareMatrixError()\r\n+        if not self:\r\n+            return S.One\r\n+\r\n+        M, n = self.copy().as_mutable(), self.rows\r\n+\r\n+        if n == 1:\r\n+            det = M[0, 0]\r\n+        elif n == 2:\r\n+            det = M[0, 0] * M[1, 1] - M[0, 1] * M[1, 0]\r\n+        elif n == 3:\r\n+            det = (\r\n+                  M[0, 0] * M[1, 1] * M[2, 2] + M[0, 1] * M[1, 2] * M[2, 0] + M[\r\n+                      0, 2] * M[1, 0] * M[2, 1]) - \\\r\n+                  (\r\n+                  M[0, 2] * M[1, 1] * M[2, 0] + M[0, 0] * M[1, 2] * M[2, 1] + M[\r\n+                      0, 1] * M[1, 0] * M[2, 2])\r\n+        else:\r\n+            sign = 1  # track current sign in case of column swap\r\n+\r\n+            for k in range(n - 1):\r\n+                # look for a pivot in the current column\r\n+                # and assume det == 0 if none is found\r\n+                if M[k, k] == 0:\r\n+                    for i in range(k + 1, n):\r\n+                        if M[i, k]:\r\n+                            M.row_swap(i, k)\r\n+                            sign *= -1\r\n+                            break\r\n+                    else:\r\n+                        return S.Zero\r\n+\r\n+                # proceed with Bareiss' fraction-free (FF)\r\n+                # form of Gaussian elimination algorithm\r\n+                for i in range(k + 1, n):\r\n+                    for j in range(k + 1, n):\r\n+                        D = M[k, k] * M[i, j] - M[i, k] * M[k, j]\r\n+\r\n+                        if k > 0:\r\n+                            D /= M[k - 1, k - 1]\r\n+\r\n+                        if D.is_Atom:\r\n+                            M[i, j] = D\r\n+                        else:\r\n+                            M[i, j] = cancel(D)\r\n+\r\n+            det = sign * M[n - 1, n - 1]\r\n+\r\n+        return det.expand()\r\n+\r\n+    def det_LU_decomposition(self):\r\n+        \"\"\"Compute matrix determinant using LU decomposition\r\n+\r\n+\r\n+        Note that this method fails if the LU decomposition itself\r\n+        fails. In particular, if the matrix has no inverse this method\r\n+        will fail.\r\n+\r\n+        TODO: Implement algorithm for sparse matrices (SFF),\r\n+        http://www.eecis.udel.edu/~saunders/papers/sffge/it5.ps.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+\r\n+        det\r\n+        det_bareiss\r\n+        berkowitz_det\r\n+        \"\"\"\r\n+        if not self.is_square:\r\n+            raise NonSquareMatrixError()\r\n+        if not self:\r\n+            return S.One\r\n+\r\n+        M, n = self.copy(), self.rows\r\n+        p, prod = [], 1\r\n+        l, u, p = M.LUdecomposition()\r\n+        if len(p) % 2:\r\n+            prod = -1\r\n+\r\n+        for k in range(n):\r\n+            prod = prod * u[k, k] * l[k, k]\r\n+\r\n+        return prod.expand()\r\n+\r\n+    def diagonal_solve(self, rhs):\r\n+        \"\"\"Solves Ax = B efficiently, where A is a diagonal Matrix,\r\n+        with non-zero diagonal entries.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix, eye\r\n+        >>> A = eye(2)*2\r\n+        >>> B = Matrix([[1, 2], [3, 4]])\r\n+        >>> A.diagonal_solve(B) == B/2\r\n+        True\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        lower_triangular_solve\r\n+        upper_triangular_solve\r\n+        gauss_jordan_solve\r\n+        cholesky_solve\r\n+        LDLsolve\r\n+        LUsolve\r\n+        QRsolve\r\n+        pinv_solve\r\n+        \"\"\"\r\n+        if not self.is_diagonal:\r\n+            raise TypeError(\"Matrix should be diagonal\")\r\n+        if rhs.rows != self.rows:\r\n+            raise TypeError(\"Size mis-match\")\r\n+        return self._diagonal_solve(rhs)\r\n+\r\n+    def diagonalize(self, reals_only=False, sort=False, normalize=False):\r\n+        \"\"\"\r\n+        Return (P, D), where D is diagonal and\r\n+\r\n+            D = P^-1 * M * P\r\n+\r\n+        where M is current matrix.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> m = Matrix(3, 3, [1, 2, 0, 0, 3, 0, 2, -4, 2])\r\n+        >>> m\r\n+        Matrix([\r\n+        [1,  2, 0],\r\n+        [0,  3, 0],\r\n+        [2, -4, 2]])\r\n+        >>> (P, D) = m.diagonalize()\r\n+        >>> D\r\n+        Matrix([\r\n+        [1, 0, 0],\r\n+        [0, 2, 0],\r\n+        [0, 0, 3]])\r\n+        >>> P\r\n+        Matrix([\r\n+        [-1, 0, -1],\r\n+        [ 0, 0, -1],\r\n+        [ 2, 1,  2]])\r\n+        >>> P.inv() * m * P\r\n+        Matrix([\r\n+        [1, 0, 0],\r\n+        [0, 2, 0],\r\n+        [0, 0, 3]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        is_diagonal\r\n+        is_diagonalizable\r\n+\r\n+        \"\"\"\r\n+        from sympy.matrices import diag\r\n+\r\n+        if not self.is_square:\r\n+            raise NonSquareMatrixError()\r\n+        if not self.is_diagonalizable(reals_only, False):\r\n+            self._diagonalize_clear_subproducts()\r\n+            raise MatrixError(\"Matrix is not diagonalizable\")\r\n+        else:\r\n+            if self._eigenvects is None:\r\n+                self._eigenvects = self.eigenvects(simplify=True)\r\n+            if sort:\r\n+                self._eigenvects.sort(key=default_sort_key)\r\n+                self._eigenvects.reverse()\r\n+            diagvals = []\r\n+            P = self._new(self.rows, 0, [])\r\n+            for eigenval, multiplicity, vects in self._eigenvects:\r\n+                for k in range(multiplicity):\r\n+                    diagvals.append(eigenval)\r\n+                    vec = vects[k]\r\n+                    if normalize:\r\n+                        vec = vec / vec.norm()\r\n+                    P = P.col_insert(P.cols, vec)\r\n+            D = diag(*diagvals)\r\n+            self._diagonalize_clear_subproducts()\r\n+            return (P, D)\r\n+\r\n+    def diff(self, *args):\r\n+        \"\"\"Calculate the derivative of each element in the matrix.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix\r\n+        >>> from sympy.abc import x, y\r\n+        >>> M = Matrix([[x, y], [1, 0]])\r\n+        >>> M.diff(x)\r\n+        Matrix([\r\n+        [1, 0],\r\n+        [0, 0]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        integrate\r\n+        limit\r\n+        \"\"\"\r\n+        return self._new(self.rows, self.cols,\r\n+                         lambda i, j: self[i, j].diff(*args))\r\n+\r\n+    def dot(self, b):\r\n+        \"\"\"Return the dot product of Matrix self and b relaxing the condition\r\n+        of compatible dimensions: if either the number of rows or columns are\r\n+        the same as the length of b then the dot product is returned. If self\r\n+        is a row or column vector, a scalar is returned. Otherwise, a list\r\n+        of results is returned (and in that case the number of columns in self\r\n+        must match the length of b).\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> M = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\r\n+        >>> v = [1, 1, 1]\r\n+        >>> M.row(0).dot(v)\r\n+        6\r\n+        >>> M.col(0).dot(v)\r\n+        12\r\n+        >>> M.dot(v)\r\n+        [6, 15, 24]\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        cross\r\n+        multiply\r\n+        multiply_elementwise\r\n+        \"\"\"\r\n+        from .dense import Matrix\r\n+\r\n+        if not isinstance(b, MatrixBase):\r\n+            if is_sequence(b):\r\n+                if len(b) != self.cols and len(b) != self.rows:\r\n+                    raise ShapeError(\r\n+                        \"Dimensions incorrect for dot product: %s, %s\" % (\r\n+                            self.shape, len(b)))\r\n+                return self.dot(Matrix(b))\r\n+            else:\r\n+                raise TypeError(\r\n+                    \"`b` must be an ordered iterable or Matrix, not %s.\" %\r\n+                    type(b))\r\n+\r\n+        mat = self\r\n+        if mat.cols == b.rows:\r\n+            if b.cols != 1:\r\n+                mat = mat.T\r\n+                b = b.T\r\n+            prod = flatten((mat * b).tolist())\r\n+            if len(prod) == 1:\r\n+                return prod[0]\r\n+            return prod\r\n+        if mat.cols == b.cols:\r\n+            return mat.dot(b.T)\r\n+        elif mat.rows == b.rows:\r\n+            return mat.T.dot(b)\r\n+        else:\r\n+            raise ShapeError(\"Dimensions incorrect for dot product: %s, %s\" % (\r\n+                self.shape, b.shape))\r\n+\r\n+    def dual(self):\r\n+        \"\"\"Returns the dual of a matrix, which is:\r\n+\r\n+        `(1/2)*levicivita(i, j, k, l)*M(k, l)` summed over indices `k` and `l`\r\n+\r\n+        Since the levicivita method is anti_symmetric for any pairwise\r\n+        exchange of indices, the dual of a symmetric matrix is the zero\r\n+        matrix. Strictly speaking the dual defined here assumes that the\r\n+        'matrix' `M` is a contravariant anti_symmetric second rank tensor,\r\n+        so that the dual is a covariant second rank tensor.\r\n+\r\n+        \"\"\"\r\n+        from sympy import LeviCivita\r\n+        from sympy.matrices import zeros\r\n+\r\n+        M, n = self[:, :], self.rows\r\n+        work = zeros(n)\r\n+        if self.is_symmetric():\r\n+            return work\r\n+\r\n+        for i in range(1, n):\r\n+            for j in range(1, n):\r\n+                acum = 0\r\n+                for k in range(1, n):\r\n+                    acum += LeviCivita(i, j, 0, k) * M[0, k]\r\n+                work[i, j] = acum\r\n+                work[j, i] = -acum\r\n+\r\n+        for l in range(1, n):\r\n+            acum = 0\r\n+            for a in range(1, n):\r\n+                for b in range(1, n):\r\n+                    acum += LeviCivita(0, l, a, b) * M[a, b]\r\n+            acum /= 2\r\n+            work[0, l] = -acum\r\n+            work[l, 0] = acum\r\n+\r\n+        return work\r\n+\r\n+    def eigenvals(self, **flags):\r\n+        \"\"\"Return eigen values using the berkowitz_eigenvals routine.\r\n+\r\n+        Since the roots routine doesn't always work well with Floats,\r\n+        they will be replaced with Rationals before calling that\r\n+        routine. If this is not desired, set flag ``rational`` to False.\r\n+        \"\"\"\r\n+        # roots doesn't like Floats, so replace them with Rationals\r\n+        # unless the nsimplify flag indicates that this has already\r\n+        # been done, e.g. in eigenvects\r\n+        mat = self\r\n+\r\n+        if not mat:\r\n+            return {}\r\n+        if flags.pop('rational', True):\r\n+            if any(v.has(Float) for v in mat):\r\n+                mat = mat._new(mat.rows, mat.cols,\r\n+                               [nsimplify(v, rational=True) for v in mat])\r\n+\r\n+        flags.pop('simplify', None)  # pop unsupported flag\r\n+        return mat.berkowitz_eigenvals(**flags)\r\n+\r\n+    def eigenvects(self, **flags):\r\n+        \"\"\"Return list of triples (eigenval, multiplicity, basis).\r\n+\r\n+        The flag ``simplify`` has two effects:\r\n+            1) if bool(simplify) is True, as_content_primitive()\r\n+            will be used to tidy up normalization artifacts;\r\n+            2) if nullspace needs simplification to compute the\r\n+            basis, the simplify flag will be passed on to the\r\n+            nullspace routine which will interpret it there.\r\n+\r\n+        If the matrix contains any Floats, they will be changed to Rationals\r\n+        for computation purposes, but the answers will be returned after being\r\n+        evaluated with evalf. If it is desired to removed small imaginary\r\n+        portions during the evalf step, pass a value for the ``chop`` flag.\r\n+        \"\"\"\r\n+        from sympy.matrices import eye\r\n+\r\n+        simplify = flags.get('simplify', True)\r\n+        primitive = bool(flags.get('simplify', False))\r\n+        chop = flags.pop('chop', False)\r\n+\r\n+        flags.pop('multiple', None)  # remove this if it's there\r\n+\r\n+        # roots doesn't like Floats, so replace them with Rationals\r\n+        float = False\r\n+        mat = self\r\n+        if any(v.has(Float) for v in self):\r\n+            float = True\r\n+            mat = mat._new(mat.rows, mat.cols, [nsimplify(\r\n+                v, rational=True) for v in mat])\r\n+            flags['rational'] = False  # to tell eigenvals not to do this\r\n+\r\n+        out, vlist = [], mat.eigenvals(**flags)\r\n+        vlist = list(vlist.items())\r\n+        vlist.sort(key=default_sort_key)\r\n+        flags.pop('rational', None)\r\n+\r\n+        for r, k in vlist:\r\n+            tmp = mat.as_mutable() - eye(mat.rows) * r\r\n+            basis = tmp.nullspace()\r\n+            # whether tmp.is_symbolic() is True or False, it is possible that\r\n+            # the basis will come back as [] in which case simplification is\r\n+            # necessary.\r\n+            if not basis:\r\n+                # The nullspace routine failed, try it again with simplification\r\n+                basis = tmp.nullspace(simplify=simplify)\r\n+                if not basis:\r\n+                    raise NotImplementedError(\r\n+                        \"Can't evaluate eigenvector for eigenvalue %s\" % r)\r\n+            if primitive:\r\n+                # the relationship A*e = lambda*e will still hold if we change the\r\n+                # eigenvector; so if simplify is True we tidy up any normalization\r\n+                # artifacts with as_content_primtive (default) and remove any pure Integer\r\n+                # denominators.\r\n+                l = 1\r\n+                for i, b in enumerate(basis[0]):\r\n+                    c, p = signsimp(b).as_content_primitive()\r\n+                    if c is not S.One:\r\n+                        b = c * p\r\n+                        l = ilcm(l, c.q)\r\n+                    basis[0][i] = b\r\n+                if l != 1:\r\n+                    basis[0] *= l\r\n+            if float:\r\n+                out.append((r.evalf(chop=chop), k, [\r\n+                    mat._new(b).evalf(chop=chop) for b in basis]))\r\n+            else:\r\n+                out.append((r, k, [mat._new(b) for b in basis]))\r\n+        return out\r\n+\r\n+    def exp(self):\r\n+        \"\"\"Return the exponentiation of a square matrix.\"\"\"\r\n+        if not self.is_square:\r\n+            raise NonSquareMatrixError(\r\n+                \"Exponentiation is valid only for square matrices\")\r\n+        try:\r\n+            P, cells = self.jordan_cells()\r\n+        except MatrixError:\r\n+            raise NotImplementedError(\r\n+                \"Exponentiation is implemented only for matrices for which the Jordan normal form can be computed\")\r\n+\r\n+        def _jblock_exponential(b):\r\n+            # This function computes the matrix exponential for one single Jordan block\r\n+            nr = b.rows\r\n+            l = b[0, 0]\r\n+            if nr == 1:\r\n+                res = exp(l)\r\n+            else:\r\n+                from sympy import eye\r\n+                # extract the diagonal part\r\n+                d = b[0, 0] * eye(nr)\r\n+                # and the nilpotent part\r\n+                n = b - d\r\n+                # compute its exponential\r\n+                nex = eye(nr)\r\n+                for i in range(1, nr):\r\n+                    nex = nex + n ** i / factorial(i)\r\n+                # combine the two parts\r\n+                res = exp(b[0, 0]) * nex\r\n+            return (res)\r\n+\r\n+        blocks = list(map(_jblock_exponential, cells))\r\n+        from sympy.matrices import diag\r\n+        eJ = diag(*blocks)\r\n+        # n = self.rows\r\n+        ret = P * eJ * P.inv()\r\n+        return type(self)(ret)\r\n+\r\n+    def gauss_jordan_solve(self, b, freevar=False):\r\n+        \"\"\"\r\n+        Solves Ax = b using Gauss Jordan elimination.\r\n+\r\n+        There may be zero, one, or infinite solutions.  If one solution\r\n+        exists, it will be returned. If infinite solutions exist, it will\r\n+        be returned parametrically. If no solutions exist, It will throw\r\n+        ValueError.\r\n+\r\n+        Parameters\r\n+        ==========\r\n+\r\n+        b : Matrix\r\n+            The right hand side of the equation to be solved for.  Must have\r\n+            the same number of rows as matrix A.\r\n+\r\n+        freevar : List\r\n+            If the system is underdetermined (e.g. A has more columns than\r\n+            rows), infinite solutions are possible, in terms of an arbitrary\r\n+            values of free variables. Then the index of the free variables\r\n+            in the solutions (column Matrix) will be returned by freevar, if\r\n+            the flag `freevar` is set to `True`.\r\n+\r\n+        Returns\r\n+        =======\r\n+\r\n+        x : Matrix\r\n+            The matrix that will satisfy Ax = B.  Will have as many rows as\r\n+            matrix A has columns, and as many columns as matrix B.\r\n+\r\n+        params : Matrix\r\n+            If the system is underdetermined (e.g. A has more columns than\r\n+            rows), infinite solutions are possible, in terms of an arbitrary\r\n+            parameters. These arbitrary parameters are returned as params\r\n+            Matrix.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> A = Matrix([[1, 2, 1, 1], [1, 2, 2, -1], [2, 4, 0, 6]])\r\n+        >>> b = Matrix([7, 12, 4])\r\n+        >>> sol, params = A.gauss_jordan_solve(b)\r\n+        >>> sol\r\n+        Matrix([\r\n+        [-2*_tau0 - 3*_tau1 + 2],\r\n+        [                 _tau0],\r\n+        [           2*_tau1 + 5],\r\n+        [                 _tau1]])\r\n+        >>> params\r\n+        Matrix([\r\n+        [_tau0],\r\n+        [_tau1]])\r\n+\r\n+        >>> A = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 10]])\r\n+        >>> b = Matrix([3, 6, 9])\r\n+        >>> sol, params = A.gauss_jordan_solve(b)\r\n+        >>> sol\r\n+        Matrix([\r\n+        [-1],\r\n+        [ 2],\r\n+        [ 0]])\r\n+        >>> params\r\n+        Matrix(0, 1, [])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        lower_triangular_solve\r\n+        upper_triangular_solve\r\n+        cholesky_solve\r\n+        diagonal_solve\r\n+        LDLsolve\r\n+        LUsolve\r\n+        QRsolve\r\n+        pinv\r\n+\r\n+        References\r\n+        ==========\r\n+\r\n+        .. [1] http://en.wikipedia.org/wiki/Gaussian_elimination\r\n+\r\n+        \"\"\"\r\n+        from sympy.matrices import Matrix, zeros\r\n+\r\n+        aug = self.hstack(self.copy(), b.copy())\r\n+        row, col = aug[:, :-1].shape\r\n+\r\n+        # solve by reduced row echelon form\r\n+        A, pivots = aug.rref(simplify=True)\r\n+        A, v = A[:, :-1], A[:, -1]\r\n+        pivots = list(filter(lambda p: p < col, pivots))\r\n+        rank = len(pivots)\r\n+\r\n+        # Bring to block form\r\n+        permutation = Matrix(range(col)).T\r\n+        A = A.vstack(A, permutation)\r\n+\r\n+        for i, c in enumerate(pivots):\r\n+            A.col_swap(i, c)\r\n+\r\n+        A, permutation = A[:-1, :], A[-1, :]\r\n+\r\n+        # check for existence of solutions\r\n+        # rank of aug Matrix should be equal to rank of coefficient matrix\r\n+        if not v[rank:, 0].is_zero:\r\n+            raise ValueError(\"Linear system has no solution\")\r\n+\r\n+        # Get index of free symbols (free parameters)\r\n+        free_var_index = permutation[\r\n+                         len(pivots):]  # non-pivots columns are free variables\r\n+\r\n+        # Free parameters\r\n+        dummygen = numbered_symbols(\"tau\", Dummy)\r\n+        tau = Matrix([next(dummygen) for k in range(col - rank)]).reshape(\r\n+            col - rank, 1)\r\n+\r\n+        # Full parametric solution\r\n+        V = A[:rank, rank:]\r\n+        vt = v[:rank, 0]\r\n+        free_sol = tau.vstack(vt - V * tau, tau)\r\n+\r\n+        # Undo permutation\r\n+        sol = zeros(col, 1)\r\n+        for k, v in enumerate(free_sol):\r\n+            sol[permutation[k], 0] = v\r\n+\r\n+        if freevar:\r\n+            return sol, tau, free_var_index\r\n+        else:\r\n+            return sol, tau\r\n+\r\n+    @classmethod\r\n+    def hstack(cls, *args):\r\n+        \"\"\"Return a matrix formed by joining args horizontally (i.e.\r\n+        by repeated application of row_join).\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix, eye\r\n+        >>> Matrix.hstack(eye(2), 2*eye(2))\r\n+        Matrix([\r\n+        [1, 0, 2, 0],\r\n+        [0, 1, 0, 2]])\r\n+        \"\"\"\r\n+        kls = type(args[0])\r\n+        return reduce(kls.row_join, args)\r\n+\r\n+    def integrate(self, *args):\r\n+        \"\"\"Integrate each element of the matrix.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix\r\n+        >>> from sympy.abc import x, y\r\n+        >>> M = Matrix([[x, y], [1, 0]])\r\n+        >>> M.integrate((x, ))\r\n+        Matrix([\r\n+        [x**2/2, x*y],\r\n+        [     x,   0]])\r\n+        >>> M.integrate((x, 0, 2))\r\n+        Matrix([\r\n+        [2, 2*y],\r\n+        [2,   0]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        limit\r\n+        diff\r\n+        \"\"\"\r\n+        return self._new(self.rows, self.cols,\r\n+                         lambda i, j: self[i, j].integrate(*args))\r\n+\r\n+    def inv_mod(self, m):\r\n+        \"\"\"\r\n+        Returns the inverse of the matrix `K` (mod `m`), if it exists.\r\n+\r\n+        Method to find the matrix inverse of `K` (mod `m`) implemented in this function:\r\n+\r\n+        * Compute `\\mathrm{adj}(K) = \\mathrm{cof}(K)^t`, the adjoint matrix of `K`.\r\n+\r\n+        * Compute `r = 1/\\mathrm{det}(K) \\pmod m`.\r\n+\r\n+        * `K^{-1} = r\\cdot \\mathrm{adj}(K) \\pmod m`.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> A = Matrix(2, 2, [1, 2, 3, 4])\r\n+        >>> A.inv_mod(5)\r\n+        Matrix([\r\n+        [3, 1],\r\n+        [4, 2]])\r\n+        >>> A.inv_mod(3)\r\n+        Matrix([\r\n+        [1, 1],\r\n+        [0, 1]])\r\n+\r\n+        \"\"\"\r\n+        from sympy.ntheory import totient\r\n+        if not self.is_square:\r\n+            raise NonSquareMatrixError()\r\n+        N = self.cols\r\n+        phi = totient(m)\r\n+        det_K = self.det()\r\n+        if gcd(det_K, m) != 1:\r\n+            raise ValueError('Matrix is not invertible (mod %d)' % m)\r\n+        det_inv = pow(int(det_K), int(phi - 1), int(m))\r\n+        K_adj = self.cofactorMatrix().transpose()\r\n+        K_inv = self.__class__(N, N,\r\n+                               [det_inv * K_adj[i, j] % m for i in range(N) for\r\n+                                j in range(N)])\r\n+        return K_inv\r\n+\r\n+    def inverse_ADJ(self, iszerofunc=_iszero):\r\n+        \"\"\"Calculates the inverse using the adjugate matrix and a determinant.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        inv\r\n+        inverse_LU\r\n+        inverse_GE\r\n+        \"\"\"\r\n+        if not self.is_square:\r\n+            raise NonSquareMatrixError(\"A Matrix must be square to invert.\")\r\n+\r\n+        d = self.berkowitz_det()\r\n+        zero = d.equals(0)\r\n+        if zero is None:\r\n+            # if equals() can't decide, will rref be able to?\r\n+            ok = self.rref(simplify=True)[0]\r\n+            zero = any(iszerofunc(ok[j, j]) for j in range(ok.rows))\r\n+        if zero:\r\n+            raise ValueError(\"Matrix det == 0; not invertible.\")\r\n+\r\n+        return self.adjugate() / d\r\n+\r\n+    def inverse_GE(self, iszerofunc=_iszero):\r\n+        \"\"\"Calculates the inverse using Gaussian elimination.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        inv\r\n+        inverse_LU\r\n+        inverse_ADJ\r\n+        \"\"\"\r\n+        from .dense import Matrix\r\n+        if not self.is_square:\r\n+            raise NonSquareMatrixError(\"A Matrix must be square to invert.\")\r\n+\r\n+        big = Matrix.hstack(self.as_mutable(), Matrix.eye(self.rows))\r\n+        red = big.rref(iszerofunc=iszerofunc, simplify=True)[0]\r\n+        if any(iszerofunc(red[j, j]) for j in range(red.rows)):\r\n+            raise ValueError(\"Matrix det == 0; not invertible.\")\r\n+\r\n+        return self._new(red[:, big.rows:])\r\n+\r\n+    def inverse_LU(self, iszerofunc=_iszero):\r\n+        \"\"\"Calculates the inverse using LU decomposition.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        inv\r\n+        inverse_GE\r\n+        inverse_ADJ\r\n+        \"\"\"\r\n+        if not self.is_square:\r\n+            raise NonSquareMatrixError()\r\n+\r\n+        ok = self.rref(simplify=True)[0]\r\n+        if any(iszerofunc(ok[j, j]) for j in range(ok.rows)):\r\n+            raise ValueError(\"Matrix det == 0; not invertible.\")\r\n+\r\n+        return self.LUsolve(self.eye(self.rows), iszerofunc=_iszero)\r\n+\r\n+    def inv(self, method=None, **kwargs):\r\n+        \"\"\"\r\n+        Return the inverse of a matrix.\r\n+\r\n+        CASE 1: If the matrix is a dense matrix.\r\n+\r\n+        Return the matrix inverse using the method indicated (default\r\n+        is Gauss elimination).\r\n+\r\n+        kwargs\r\n+        ======\r\n+\r\n+        method : ('GE', 'LU', or 'ADJ')\r\n+\r\n+        Notes\r\n+        =====\r\n+\r\n+        According to the ``method`` keyword, it calls the appropriate method:\r\n+\r\n+          GE .... inverse_GE(); default\r\n+          LU .... inverse_LU()\r\n+          ADJ ... inverse_ADJ()\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        inverse_LU\r\n+        inverse_GE\r\n+        inverse_ADJ\r\n+\r\n+        Raises\r\n+        ------\r\n+        ValueError\r\n+            If the determinant of the matrix is zero.\r\n+\r\n+        CASE 2: If the matrix is a sparse matrix.\r\n+\r\n+        Return the matrix inverse using Cholesky or LDL (default).\r\n+\r\n+        kwargs\r\n+        ======\r\n+\r\n+        method : ('CH', 'LDL')\r\n+\r\n+        Notes\r\n+        =====\r\n+\r\n+        According to the ``method`` keyword, it calls the appropriate method:\r\n+\r\n+          LDL ... inverse_LDL(); default\r\n+          CH .... inverse_CH()\r\n+\r\n+        Raises\r\n+        ------\r\n+        ValueError\r\n+            If the determinant of the matrix is zero.\r\n+\r\n+        \"\"\"\r\n+        if not self.is_square:\r\n+            raise NonSquareMatrixError()\r\n+        if method is not None:\r\n+            kwargs['method'] = method\r\n+        return self._eval_inverse(**kwargs)\r\n+\r\n+    def is_diagonalizable(self, reals_only=False, clear_subproducts=True):\r\n+        \"\"\"Check if matrix is diagonalizable.\r\n+\r\n+        If reals_only==True then check that diagonalized matrix consists of the only not complex values.\r\n+\r\n+        Some subproducts could be used further in other methods to avoid double calculations,\r\n+        By default (if clear_subproducts==True) they will be deleted.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> m = Matrix(3, 3, [1, 2, 0, 0, 3, 0, 2, -4, 2])\r\n+        >>> m\r\n+        Matrix([\r\n+        [1,  2, 0],\r\n+        [0,  3, 0],\r\n+        [2, -4, 2]])\r\n+        >>> m.is_diagonalizable()\r\n+        True\r\n+        >>> m = Matrix(2, 2, [0, 1, 0, 0])\r\n+        >>> m\r\n+        Matrix([\r\n+        [0, 1],\r\n+        [0, 0]])\r\n+        >>> m.is_diagonalizable()\r\n+        False\r\n+        >>> m = Matrix(2, 2, [0, 1, -1, 0])\r\n+        >>> m\r\n+        Matrix([\r\n+        [ 0, 1],\r\n+        [-1, 0]])\r\n+        >>> m.is_diagonalizable()\r\n+        True\r\n+        >>> m.is_diagonalizable(True)\r\n+        False\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        is_diagonal\r\n+        diagonalize\r\n+        \"\"\"\r\n+        if not self.is_square:\r\n+            return False\r\n+        res = False\r\n+        self._is_symbolic = self.is_symbolic()\r\n+        self._is_symmetric = self.is_symmetric()\r\n+        self._eigenvects = None\r\n+        self._eigenvects = self.eigenvects(simplify=True)\r\n+        all_iscorrect = True\r\n+        for eigenval, multiplicity, vects in self._eigenvects:\r\n+            if len(vects) != multiplicity:\r\n+                all_iscorrect = False\r\n+                break\r\n+            elif reals_only and not eigenval.is_real:\r\n+                all_iscorrect = False\r\n+                break\r\n+        res = all_iscorrect\r\n+        if clear_subproducts:\r\n+            self._diagonalize_clear_subproducts()\r\n+        return res\r\n+\r\n+    def is_nilpotent(self):\r\n+        \"\"\"Checks if a matrix is nilpotent.\r\n+\r\n+        A matrix B is nilpotent if for some integer k, B**k is\r\n+        a zero matrix.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> a = Matrix([[0, 0, 0], [1, 0, 0], [1, 1, 0]])\r\n+        >>> a.is_nilpotent()\r\n+        True\r\n+\r\n+        >>> a = Matrix([[1, 0, 1], [1, 0, 0], [1, 1, 0]])\r\n+        >>> a.is_nilpotent()\r\n+        False\r\n+        \"\"\"\r\n+        if not self:\r\n+            return True\r\n+        if not self.is_square:\r\n+            raise NonSquareMatrixError(\r\n+                \"Nilpotency is valid only for square matrices\")\r\n+        x = Dummy('x')\r\n+        if self.charpoly(x).args[0] == x ** self.rows:\r\n+            return True\r\n+        return False\r\n+\r\n+    def jacobian(self, X):\r\n+        \"\"\"Calculates the Jacobian matrix (derivative of a vectorial function).\r\n+\r\n+        Parameters\r\n+        ==========\r\n+\r\n+        self : vector of expressions representing functions f_i(x_1, ..., x_n).\r\n+        X : set of x_i's in order, it can be a list or a Matrix\r\n+\r\n+        Both self and X can be a row or a column matrix in any order\r\n+        (i.e., jacobian() should always work).\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import sin, cos, Matrix\r\n+        >>> from sympy.abc import rho, phi\r\n+        >>> X = Matrix([rho*cos(phi), rho*sin(phi), rho**2])\r\n+        >>> Y = Matrix([rho, phi])\r\n+        >>> X.jacobian(Y)\r\n+        Matrix([\r\n+        [cos(phi), -rho*sin(phi)],\r\n+        [sin(phi),  rho*cos(phi)],\r\n+        [   2*rho,             0]])\r\n+        >>> X = Matrix([rho*cos(phi), rho*sin(phi)])\r\n+        >>> X.jacobian(Y)\r\n+        Matrix([\r\n+        [cos(phi), -rho*sin(phi)],\r\n+        [sin(phi),  rho*cos(phi)]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        hessian\r\n+        wronskian\r\n+        \"\"\"\r\n+        if not isinstance(X, MatrixBase):\r\n+            X = self._new(X)\r\n+        # Both X and self can be a row or a column matrix, so we need to make\r\n+        # sure all valid combinations work, but everything else fails:\r\n+        if self.shape[0] == 1:\r\n+            m = self.shape[1]\r\n+        elif self.shape[1] == 1:\r\n+            m = self.shape[0]\r\n+        else:\r\n+            raise TypeError(\"self must be a row or a column matrix\")\r\n+        if X.shape[0] == 1:\r\n+            n = X.shape[1]\r\n+        elif X.shape[1] == 1:\r\n+            n = X.shape[0]\r\n+        else:\r\n+            raise TypeError(\"X must be a row or a column matrix\")\r\n+\r\n+        # m is the number of functions and n is the number of variables\r\n+        # computing the Jacobian is now easy:\r\n+        return self._new(m, n, lambda j, i: self[j].diff(X[i]))\r\n+\r\n+    def jordan_cell(self, eigenval, n):\r\n+        n = int(n)\r\n+        from sympy.matrices import MutableMatrix\r\n+        out = MutableMatrix.zeros(n)\r\n+        for i in range(n - 1):\r\n+            out[i, i] = eigenval\r\n+            out[i, i + 1] = 1\r\n+        out[n - 1, n - 1] = eigenval\r\n+        return type(self)(out)\r\n+\r\n+    def jordan_cells(self, calc_transformation=True):\r\n+        r\"\"\"Return a list of Jordan cells of current matrix.\r\n+        This list shape Jordan matrix J.\r\n+\r\n+        If calc_transformation is specified as False, then transformation P such that\r\n+\r\n+              `J = P^{-1} \\cdot M \\cdot P`\r\n+\r\n+        will not be calculated.\r\n+\r\n+        Notes\r\n+        =====\r\n+\r\n+        Calculation of transformation P is not implemented yet.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> m = Matrix(4, 4, [\r\n+        ...  6,  5, -2, -3,\r\n+        ... -3, -1,  3,  3,\r\n+        ...  2,  1, -2, -3,\r\n+        ... -1,  1,  5,  5])\r\n+\r\n+        >>> P, Jcells = m.jordan_cells()\r\n+        >>> Jcells[0]\r\n+        Matrix([\r\n+        [2, 1],\r\n+        [0, 2]])\r\n+        >>> Jcells[1]\r\n+        Matrix([\r\n+        [2, 1],\r\n+        [0, 2]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        jordan_form\r\n+        \"\"\"\r\n+        n = self.rows\r\n+        Jcells = []\r\n+        Pcols_new = []\r\n+        jordan_block_structures = self._jordan_block_structure()\r\n+        from sympy.matrices import MutableMatrix\r\n+\r\n+        # Order according to default_sort_key, this makes sure the order is the same as in .diagonalize():\r\n+        for eigenval in (\r\n+        sorted(list(jordan_block_structures.keys()), key=default_sort_key)):\r\n+            l_jordan_chains = jordan_block_structures[eigenval]\r\n+            for s in reversed(sorted(\r\n+                    (l_jordan_chains).keys())):  # Start with the biggest block\r\n+                s_chains = l_jordan_chains[s]\r\n+                block = self.jordan_cell(eigenval, s)\r\n+                number_of_s_chains = len(s_chains)\r\n+                for i in range(0, number_of_s_chains):\r\n+                    Jcells.append(type(self)(block))\r\n+                    chain_vectors = s_chains[i]\r\n+                    lc = len(chain_vectors)\r\n+                    assert lc == s\r\n+                    for j in range(0, lc):\r\n+                        generalized_eigen_vector = chain_vectors[j]\r\n+                        Pcols_new.append(generalized_eigen_vector)\r\n+        P = MutableMatrix.zeros(n)\r\n+        for j in range(0, n):\r\n+            P[:, j] = Pcols_new[j]\r\n+\r\n+        return type(self)(P), Jcells\r\n+\r\n+    def jordan_form(self, calc_transformation=True):\r\n+        r\"\"\"Return Jordan form J of current matrix.\r\n+\r\n+        Also the transformation P such that\r\n+\r\n+            `J = P^{-1} \\cdot M \\cdot P`\r\n+\r\n+        and the jordan blocks forming J\r\n+        will be calculated.\r\n+\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> m = Matrix([\r\n+        ...        [ 6,  5, -2, -3],\r\n+        ...        [-3, -1,  3,  3],\r\n+        ...        [ 2,  1, -2, -3],\r\n+        ...        [-1,  1,  5,  5]])\r\n+        >>> P, J = m.jordan_form()\r\n+        >>> J\r\n+        Matrix([\r\n+        [2, 1, 0, 0],\r\n+        [0, 2, 0, 0],\r\n+        [0, 0, 2, 1],\r\n+        [0, 0, 0, 2]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        jordan_cells\r\n+        \"\"\"\r\n+        P, Jcells = self.jordan_cells()\r\n+        from sympy.matrices import diag\r\n+        J = diag(*Jcells)\r\n+        return P, type(self)(J)\r\n+\r\n+    def key2bounds(self, keys):\r\n+        \"\"\"Converts a key with potentially mixed types of keys (integer and slice)\r\n+        into a tuple of ranges and raises an error if any index is out of self's\r\n+        range.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        key2ij\r\n+        \"\"\"\r\n+\r\n+        islice, jslice = [isinstance(k, slice) for k in keys]\r\n+        if islice:\r\n+            if not self.rows:\r\n+                rlo = rhi = 0\r\n+            else:\r\n+                rlo, rhi = keys[0].indices(self.rows)[:2]\r\n+        else:\r\n+            rlo = a2idx(keys[0], self.rows)\r\n+            rhi = rlo + 1\r\n+        if jslice:\r\n+            if not self.cols:\r\n+                clo = chi = 0\r\n+            else:\r\n+                clo, chi = keys[1].indices(self.cols)[:2]\r\n+        else:\r\n+            clo = a2idx(keys[1], self.cols)\r\n+            chi = clo + 1\r\n+        return rlo, rhi, clo, chi\r\n+\r\n+    def key2ij(self, key):\r\n+        \"\"\"Converts key into canonical form, converting integers or indexable\r\n+        items into valid integers for self's range or returning slices\r\n+        unchanged.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        key2bounds\r\n+        \"\"\"\r\n+        if is_sequence(key):\r\n+            if not len(key) == 2:\r\n+                raise TypeError('key must be a sequence of length 2')\r\n+            return [a2idx(i, n) if not isinstance(i, slice) else i\r\n+                    for i, n in zip(key, self.shape)]\r\n+        elif isinstance(key, slice):\r\n+            return key.indices(len(self))[:2]\r\n+        else:\r\n+            return divmod(a2idx(key, len(self)), self.cols)\r\n+\r\n+    def LDLdecomposition(self):\r\n+        \"\"\"Returns the LDL Decomposition (L, D) of matrix A,\r\n+        such that L * D * L.T == A\r\n+        This method eliminates the use of square root.\r\n+        Further this ensures that all the diagonal entries of L are 1.\r\n+        A must be a square, symmetric, positive-definite\r\n+        and non-singular matrix.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix, eye\r\n+        >>> A = Matrix(((25, 15, -5), (15, 18, 0), (-5, 0, 11)))\r\n+        >>> L, D = A.LDLdecomposition()\r\n+        >>> L\r\n+        Matrix([\r\n+        [   1,   0, 0],\r\n+        [ 3/5,   1, 0],\r\n+        [-1/5, 1/3, 1]])\r\n+        >>> D\r\n+        Matrix([\r\n+        [25, 0, 0],\r\n+        [ 0, 9, 0],\r\n+        [ 0, 0, 9]])\r\n+        >>> L * D * L.T * A.inv() == eye(A.rows)\r\n+        True\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        cholesky\r\n+        LUdecomposition\r\n+        QRdecomposition\r\n+        \"\"\"\r\n+        if not self.is_square:\r\n+            raise NonSquareMatrixError(\"Matrix must be square.\")\r\n+        if not self.is_symmetric():\r\n+            raise ValueError(\"Matrix must be symmetric.\")\r\n+        return self._LDLdecomposition()\r\n+\r\n+    def LDLsolve(self, rhs):\r\n+        \"\"\"Solves Ax = B using LDL decomposition,\r\n+        for a general square and non-singular matrix.\r\n+\r\n+        For a non-square matrix with rows > cols,\r\n+        the least squares solution is returned.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix, eye\r\n+        >>> A = eye(2)*2\r\n+        >>> B = Matrix([[1, 2], [3, 4]])\r\n+        >>> A.LDLsolve(B) == B/2\r\n+        True\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        LDLdecomposition\r\n+        lower_triangular_solve\r\n+        upper_triangular_solve\r\n+        gauss_jordan_solve\r\n+        cholesky_solve\r\n+        diagonal_solve\r\n+        LUsolve\r\n+        QRsolve\r\n+        pinv_solve\r\n+        \"\"\"\r\n+        if self.is_symmetric():\r\n+            L, D = self.LDLdecomposition()\r\n+        elif self.rows >= self.cols:\r\n+            L, D = (self.T * self).LDLdecomposition()\r\n+            rhs = self.T * rhs\r\n+        else:\r\n+            raise NotImplementedError('Under-determined System. '\r\n+                                      'Try M.gauss_jordan_solve(rhs)')\r\n+        Y = L._lower_triangular_solve(rhs)\r\n+        Z = D._diagonal_solve(Y)\r\n+        return (L.T)._upper_triangular_solve(Z)\r\n+\r\n+    def left_eigenvects(self, **flags):\r\n+        \"\"\"Returns left eigenvectors and eigenvalues.\r\n+\r\n+        This function returns the list of triples (eigenval, multiplicity,\r\n+        basis) for the left eigenvectors. Options are the same as for\r\n+        eigenvects(), i.e. the ``**flags`` arguments gets passed directly to\r\n+        eigenvects().\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> M = Matrix([[0, 1, 1], [1, 0, 0], [1, 1, 1]])\r\n+        >>> M.eigenvects()\r\n+        [(-1, 1, [Matrix([\r\n+        [-1],\r\n+        [ 1],\r\n+        [ 0]])]), (0, 1, [Matrix([\r\n+        [ 0],\r\n+        [-1],\r\n+        [ 1]])]), (2, 1, [Matrix([\r\n+        [2/3],\r\n+        [1/3],\r\n+        [  1]])])]\r\n+        >>> M.left_eigenvects()\r\n+        [(-1, 1, [Matrix([[-2, 1, 1]])]), (0, 1, [Matrix([[-1, -1, 1]])]), (2,\r\n+        1, [Matrix([[1, 1, 1]])])]\r\n+\r\n+        \"\"\"\r\n+        mat = self\r\n+        left_transpose = mat.transpose().eigenvects(**flags)\r\n+\r\n+        left = []\r\n+        for (ev, mult, ltmp) in left_transpose:\r\n+            left.append((ev, mult, [l.transpose() for l in ltmp]))\r\n+\r\n+        return left\r\n+\r\n+    def limit(self, *args):\r\n+        \"\"\"Calculate the limit of each element in the matrix.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix\r\n+        >>> from sympy.abc import x, y\r\n+        >>> M = Matrix([[x, y], [1, 0]])\r\n+        >>> M.limit(x, 2)\r\n+        Matrix([\r\n+        [2, y],\r\n+        [1, 0]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        integrate\r\n+        diff\r\n+        \"\"\"\r\n+        return self._new(self.rows, self.cols,\r\n+                         lambda i, j: self[i, j].limit(*args))\r\n+\r\n+    def lower_triangular_solve(self, rhs):\r\n+        \"\"\"Solves Ax = B, where A is a lower triangular matrix.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        upper_triangular_solve\r\n+        gauss_jordan_solve\r\n+        cholesky_solve\r\n+        diagonal_solve\r\n+        LDLsolve\r\n+        LUsolve\r\n+        QRsolve\r\n+        pinv_solve\r\n+        \"\"\"\r\n+\r\n+        if not self.is_square:\r\n+            raise NonSquareMatrixError(\"Matrix must be square.\")\r\n+        if rhs.rows != self.rows:\r\n+            raise ShapeError(\"Matrices size mismatch.\")\r\n+        if not self.is_lower:\r\n+            raise ValueError(\"Matrix must be lower triangular.\")\r\n+        return self._lower_triangular_solve(rhs)\r\n+\r\n+    def LUdecomposition(self, iszerofunc=_iszero):\r\n+        \"\"\"Returns the decomposition LU and the row swaps p.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> a = Matrix([[4, 3], [6, 3]])\r\n+        >>> L, U, _ = a.LUdecomposition()\r\n+        >>> L\r\n+        Matrix([\r\n+        [  1, 0],\r\n+        [3/2, 1]])\r\n+        >>> U\r\n+        Matrix([\r\n+        [4,    3],\r\n+        [0, -3/2]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        cholesky\r\n+        LDLdecomposition\r\n+        QRdecomposition\r\n+        LUdecomposition_Simple\r\n+        LUdecompositionFF\r\n+        LUsolve\r\n+        \"\"\"\r\n+        combined, p = self.LUdecomposition_Simple(iszerofunc=_iszero)\r\n+        L = self.zeros(self.rows)\r\n+        U = self.zeros(self.rows)\r\n+        for i in range(self.rows):\r\n+            for j in range(self.rows):\r\n+                if i > j:\r\n+                    L[i, j] = combined[i, j]\r\n+                else:\r\n+                    if i == j:\r\n+                        L[i, i] = 1\r\n+                    U[i, j] = combined[i, j]\r\n+        return L, U, p\r\n+\r\n+    def LUdecomposition_Simple(self, iszerofunc=_iszero):\r\n+        \"\"\"Returns A comprised of L, U (L's diag entries are 1) and\r\n+        p which is the list of the row swaps (in order).\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        LUdecomposition\r\n+        LUdecompositionFF\r\n+        LUsolve\r\n+        \"\"\"\r\n+        if not self.is_square:\r\n+            raise NonSquareMatrixError(\r\n+                \"A Matrix must be square to apply LUdecomposition_Simple().\")\r\n+        n = self.rows\r\n+        A = self.as_mutable()\r\n+        p = []\r\n+        # factorization\r\n+        for j in range(n):\r\n+            for i in range(j):\r\n+                for k in range(i):\r\n+                    A[i, j] = A[i, j] - A[i, k] * A[k, j]\r\n+            pivot = -1\r\n+            for i in range(j, n):\r\n+                for k in range(j):\r\n+                    A[i, j] = A[i, j] - A[i, k] * A[k, j]\r\n+                # find the first non-zero pivot, includes any expression\r\n+                if pivot == -1 and not iszerofunc(A[i, j]):\r\n+                    pivot = i\r\n+            if pivot < 0:\r\n+                # this result is based on iszerofunc's analysis of the possible pivots, so even though\r\n+                # the element may not be strictly zero, the supplied iszerofunc's evaluation gave True\r\n+                raise ValueError(\"No nonzero pivot found; inversion failed.\")\r\n+            if pivot != j:  # row must be swapped\r\n+                A.row_swap(pivot, j)\r\n+                p.append([pivot, j])\r\n+            scale = 1 / A[j, j]\r\n+            for i in range(j + 1, n):\r\n+                A[i, j] = A[i, j] * scale\r\n+        return A, p\r\n+\r\n+    def LUdecompositionFF(self):\r\n+        \"\"\"Compute a fraction-free LU decomposition.\r\n+\r\n+        Returns 4 matrices P, L, D, U such that PA = L D**-1 U.\r\n+        If the elements of the matrix belong to some integral domain I, then all\r\n+        elements of L, D and U are guaranteed to belong to I.\r\n+\r\n+        **Reference**\r\n+            - W. Zhou & D.J. Jeffrey, \"Fraction-free matrix factors: new forms\r\n+              for LU and QR factors\". Frontiers in Computer Science in China,\r\n+              Vol 2, no. 1, pp. 67-80, 2008.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        LUdecomposition\r\n+        LUdecomposition_Simple\r\n+        LUsolve\r\n+        \"\"\"\r\n+        from sympy.matrices import SparseMatrix\r\n+        zeros = SparseMatrix.zeros\r\n+        eye = SparseMatrix.eye\r\n+\r\n+        n, m = self.rows, self.cols\r\n+        U, L, P = self.as_mutable(), eye(n), eye(n)\r\n+        DD = zeros(n, n)\r\n+        oldpivot = 1\r\n+\r\n+        for k in range(n - 1):\r\n+            if U[k, k] == 0:\r\n+                for kpivot in range(k + 1, n):\r\n+                    if U[kpivot, k]:\r\n+                        break\r\n+                else:\r\n+                    raise ValueError(\"Matrix is not full rank\")\r\n+                U[k, k:], U[kpivot, k:] = U[kpivot, k:], U[k, k:]\r\n+                L[k, :k], L[kpivot, :k] = L[kpivot, :k], L[k, :k]\r\n+                P[k, :], P[kpivot, :] = P[kpivot, :], P[k, :]\r\n+            L[k, k] = Ukk = U[k, k]\r\n+            DD[k, k] = oldpivot * Ukk\r\n+            for i in range(k + 1, n):\r\n+                L[i, k] = Uik = U[i, k]\r\n+                for j in range(k + 1, m):\r\n+                    U[i, j] = (Ukk * U[i, j] - U[k, j] * Uik) / oldpivot\r\n+                U[i, k] = 0\r\n+            oldpivot = Ukk\r\n+        DD[n - 1, n - 1] = oldpivot\r\n+        return P, L, DD, U\r\n+\r\n+    def LUsolve(self, rhs, iszerofunc=_iszero):\r\n+        \"\"\"Solve the linear system Ax = rhs for x where A = self.\r\n+\r\n+        This is for symbolic matrices, for real or complex ones use\r\n+        mpmath.lu_solve or mpmath.qr_solve.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        lower_triangular_solve\r\n+        upper_triangular_solve\r\n+        gauss_jordan_solve\r\n+        cholesky_solve\r\n+        diagonal_solve\r\n+        LDLsolve\r\n+        QRsolve\r\n+        pinv_solve\r\n+        LUdecomposition\r\n+        \"\"\"\r\n+        if rhs.rows != self.rows:\r\n+            raise ShapeError(\r\n+                \"`self` and `rhs` must have the same number of rows.\")\r\n+\r\n+        A, perm = self.LUdecomposition_Simple(iszerofunc=_iszero)\r\n+        n = self.rows\r\n+        b = rhs.permuteFwd(perm).as_mutable()\r\n+        # forward substitution, all diag entries are scaled to 1\r\n+        for i in range(n):\r\n+            for j in range(i):\r\n+                scale = A[i, j]\r\n+                b.zip_row_op(i, j, lambda x, y: x - y * scale)\r\n+        # backward substitution\r\n+        for i in range(n - 1, -1, -1):\r\n+            for j in range(i + 1, n):\r\n+                scale = A[i, j]\r\n+                b.zip_row_op(i, j, lambda x, y: x - y * scale)\r\n+            scale = A[i, i]\r\n+            b.row_op(i, lambda x, _: x / scale)\r\n+        return rhs.__class__(b)\r\n+\r\n+    def minorEntry(self, i, j, method=\"berkowitz\"):\r\n+        return self.minor(i, j, method=method)\r\n+\r\n+    def minorMatrix(self, i, j):\r\n+        return self.minor_submatrix(i, j)\r\n+\r\n+    def multiply(self, b):\r\n+        \"\"\"Returns self*b\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        dot\r\n+        cross\r\n+        multiply_elementwise\r\n+        \"\"\"\r\n+        return self * b\r\n+\r\n+    def normalized(self):\r\n+        \"\"\"Return the normalized version of ``self``.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        norm\r\n+        \"\"\"\r\n+        if self.rows != 1 and self.cols != 1:\r\n+            raise ShapeError(\"A Matrix must be a vector to normalize.\")\r\n+        norm = self.norm()\r\n+        out = self.applyfunc(lambda i: i / norm)\r\n+        return out\r\n+\r\n+    def norm(self, ord=None):\r\n+        \"\"\"Return the Norm of a Matrix or Vector.\r\n+        In the simplest case this is the geometric size of the vector\r\n+        Other norms can be specified by the ord parameter\r\n+\r\n+\r\n+        =====  ============================  ==========================\r\n+        ord    norm for matrices             norm for vectors\r\n+        =====  ============================  ==========================\r\n+        None   Frobenius norm                2-norm\r\n+        'fro'  Frobenius norm                - does not exist\r\n+        inf    --                            max(abs(x))\r\n+        -inf   --                            min(abs(x))\r\n+        1      --                            as below\r\n+        -1     --                            as below\r\n+        2      2-norm (largest sing. value)  as below\r\n+        -2     smallest singular value       as below\r\n+        other  - does not exist              sum(abs(x)**ord)**(1./ord)\r\n+        =====  ============================  ==========================\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix, Symbol, trigsimp, cos, sin, oo\r\n+        >>> x = Symbol('x', real=True)\r\n+        >>> v = Matrix([cos(x), sin(x)])\r\n+        >>> trigsimp( v.norm() )\r\n+        1\r\n+        >>> v.norm(10)\r\n+        (sin(x)**10 + cos(x)**10)**(1/10)\r\n+        >>> A = Matrix([[1, 1], [1, 1]])\r\n+        >>> A.norm(2)# Spectral norm (max of |Ax|/|x| under 2-vector-norm)\r\n+        2\r\n+        >>> A.norm(-2) # Inverse spectral norm (smallest singular value)\r\n+        0\r\n+        >>> A.norm() # Frobenius Norm\r\n+        2\r\n+        >>> Matrix([1, -2]).norm(oo)\r\n+        2\r\n+        >>> Matrix([-1, 2]).norm(-oo)\r\n+        1\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        normalized\r\n+        \"\"\"\r\n+        # Row or Column Vector Norms\r\n+        vals = list(self.values()) or [0]\r\n+        if self.rows == 1 or self.cols == 1:\r\n+            if ord == 2 or ord is None:  # Common case sqrt(<x, x>)\r\n+                return sqrt(Add(*(abs(i) ** 2 for i in vals)))\r\n+\r\n+            elif ord == 1:  # sum(abs(x))\r\n+                return Add(*(abs(i) for i in vals))\r\n+\r\n+            elif ord == S.Infinity:  # max(abs(x))\r\n+                return Max(*[abs(i) for i in vals])\r\n+\r\n+            elif ord == S.NegativeInfinity:  # min(abs(x))\r\n+                return Min(*[abs(i) for i in vals])\r\n+\r\n+            # Otherwise generalize the 2-norm, Sum(x_i**ord)**(1/ord)\r\n+            # Note that while useful this is not mathematically a norm\r\n+            try:\r\n+                return Pow(Add(*(abs(i) ** ord for i in vals)), S(1) / ord)\r\n+            except (NotImplementedError, TypeError):\r\n+                raise ValueError(\"Expected order to be Number, Symbol, oo\")\r\n+\r\n+        # Matrix Norms\r\n+        else:\r\n+            if ord == 2:  # Spectral Norm\r\n+                # Maximum singular value\r\n+                return Max(*self.singular_values())\r\n+\r\n+            elif ord == -2:\r\n+                # Minimum singular value\r\n+                return Min(*self.singular_values())\r\n+\r\n+            elif (ord is None or isinstance(ord,\r\n+                                            string_types) and ord.lower() in\r\n+                ['f', 'fro', 'frobenius', 'vector']):\r\n+                # Reshape as vector and send back to norm function\r\n+                return self.vec().norm(ord=2)\r\n+\r\n+            else:\r\n+                raise NotImplementedError(\"Matrix Norms under development\")\r\n+\r\n+    def nullspace(self, simplify=False):\r\n+        \"\"\"Returns list of vectors (Matrix objects) that span nullspace of self\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix\r\n+        >>> m = Matrix(3, 3, [1, 3, 0, -2, -6, 0, 3, 9, 6])\r\n+        >>> m\r\n+        Matrix([\r\n+        [ 1,  3, 0],\r\n+        [-2, -6, 0],\r\n+        [ 3,  9, 6]])\r\n+        >>> m.nullspace()\r\n+        [Matrix([\r\n+        [-3],\r\n+        [ 1],\r\n+        [ 0]])]\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        columnspace\r\n+        \"\"\"\r\n+        from sympy.matrices import zeros\r\n+\r\n+        simpfunc = simplify if isinstance(\r\n+            simplify, FunctionType) else _simplify\r\n+        reduced, pivots = self.rref(simplify=simpfunc)\r\n+\r\n+        basis = []\r\n+        # create a set of vectors for the basis\r\n+        for i in range(self.cols - len(pivots)):\r\n+            basis.append(zeros(self.cols, 1))\r\n+        # contains the variable index to which the vector corresponds\r\n+        basiskey, cur = [-1] * len(basis), 0\r\n+        for i in range(self.cols):\r\n+            if i not in pivots:\r\n+                basiskey[cur] = i\r\n+                cur += 1\r\n+        for i in range(self.cols):\r\n+            if i not in pivots:  # free var, just set vector's ith place to 1\r\n+                basis[basiskey.index(i)][i, 0] = 1\r\n+            else:  # add negative of nonpivot entry to corr vector\r\n+                for j in range(i + 1, self.cols):\r\n+                    line = pivots.index(i)\r\n+                    v = reduced[line, j]\r\n+                    if simplify:\r\n+                        v = simpfunc(v)\r\n+                    if v:\r\n+                        if j in pivots:\r\n+                            # XXX: Is this the correct error?\r\n+                            raise NotImplementedError(\r\n+                                \"Could not compute the nullspace of `self`.\")\r\n+                        basis[basiskey.index(j)][i, 0] = -v\r\n+        return [self._new(b) for b in basis]\r\n+\r\n+    def permuteBkwd(self, perm):\r\n+        \"\"\"Permute the rows of the matrix with the given permutation in reverse.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import eye\r\n+        >>> M = eye(3)\r\n+        >>> M.permuteBkwd([[0, 1], [0, 2]])\r\n+        Matrix([\r\n+        [0, 1, 0],\r\n+        [0, 0, 1],\r\n+        [1, 0, 0]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        permuteFwd\r\n+        \"\"\"\r\n+        copy = self.copy()\r\n+        for i in range(len(perm) - 1, -1, -1):\r\n+            copy.row_swap(perm[i][0], perm[i][1])\r\n+        return copy\r\n+\r\n+    def permuteFwd(self, perm):\r\n+        \"\"\"Permute the rows of the matrix with the given permutation.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import eye\r\n+        >>> M = eye(3)\r\n+        >>> M.permuteFwd([[0, 1], [0, 2]])\r\n+        Matrix([\r\n+        [0, 0, 1],\r\n+        [1, 0, 0],\r\n+        [0, 1, 0]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        permuteBkwd\r\n+        \"\"\"\r\n+        copy = self.copy()\r\n+        for i in range(len(perm)):\r\n+            copy.row_swap(perm[i][0], perm[i][1])\r\n+        return copy\r\n+\r\n+    def pinv_solve(self, B, arbitrary_matrix=None):\r\n+        \"\"\"Solve Ax = B using the Moore-Penrose pseudoinverse.\r\n+\r\n+        There may be zero, one, or infinite solutions.  If one solution\r\n+        exists, it will be returned.  If infinite solutions exist, one will\r\n+        be returned based on the value of arbitrary_matrix.  If no solutions\r\n+        exist, the least-squares solution is returned.\r\n+\r\n+        Parameters\r\n+        ==========\r\n+\r\n+        B : Matrix\r\n+            The right hand side of the equation to be solved for.  Must have\r\n+            the same number of rows as matrix A.\r\n+        arbitrary_matrix : Matrix\r\n+            If the system is underdetermined (e.g. A has more columns than\r\n+            rows), infinite solutions are possible, in terms of an arbitrary\r\n+            matrix.  This parameter may be set to a specific matrix to use\r\n+            for that purpose; if so, it must be the same shape as x, with as\r\n+            many rows as matrix A has columns, and as many columns as matrix\r\n+            B.  If left as None, an appropriate matrix containing dummy\r\n+            symbols in the form of ``wn_m`` will be used, with n and m being\r\n+            row and column position of each symbol.\r\n+\r\n+        Returns\r\n+        =======\r\n+\r\n+        x : Matrix\r\n+            The matrix that will satisfy Ax = B.  Will have as many rows as\r\n+            matrix A has columns, and as many columns as matrix B.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> A = Matrix([[1, 2, 3], [4, 5, 6]])\r\n+        >>> B = Matrix([7, 8])\r\n+        >>> A.pinv_solve(B)\r\n+        Matrix([\r\n+        [ _w0_0/6 - _w1_0/3 + _w2_0/6 - 55/18],\r\n+        [-_w0_0/3 + 2*_w1_0/3 - _w2_0/3 + 1/9],\r\n+        [ _w0_0/6 - _w1_0/3 + _w2_0/6 + 59/18]])\r\n+        >>> A.pinv_solve(B, arbitrary_matrix=Matrix([0, 0, 0]))\r\n+        Matrix([\r\n+        [-55/18],\r\n+        [   1/9],\r\n+        [ 59/18]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        lower_triangular_solve\r\n+        upper_triangular_solve\r\n+        gauss_jordan_solve\r\n+        cholesky_solve\r\n+        diagonal_solve\r\n+        LDLsolve\r\n+        LUsolve\r\n+        QRsolve\r\n+        pinv\r\n+\r\n+        Notes\r\n+        =====\r\n+\r\n+        This may return either exact solutions or least squares solutions.\r\n+        To determine which, check ``A * A.pinv() * B == B``.  It will be\r\n+        True if exact solutions exist, and False if only a least-squares\r\n+        solution exists.  Be aware that the left hand side of that equation\r\n+        may need to be simplified to correctly compare to the right hand\r\n+        side.\r\n+\r\n+        References\r\n+        ==========\r\n+\r\n+        .. [1] https://en.wikipedia.org/wiki/Moore-Penrose_pseudoinverse#Obtaining_all_solutions_of_a_linear_system\r\n+\r\n+        \"\"\"\r\n+        from sympy.matrices import eye\r\n+        A = self\r\n+        A_pinv = self.pinv()\r\n+        if arbitrary_matrix is None:\r\n+            rows, cols = A.cols, B.cols\r\n+            w = symbols('w:{0}_:{1}'.format(rows, cols), cls=Dummy)\r\n+            arbitrary_matrix = self.__class__(cols, rows, w).T\r\n+        return A_pinv * B + (eye(A.cols) - A_pinv * A) * arbitrary_matrix\r\n+\r\n+    def pinv(self):\r\n+        \"\"\"Calculate the Moore-Penrose pseudoinverse of the matrix.\r\n+\r\n+        The Moore-Penrose pseudoinverse exists and is unique for any matrix.\r\n+        If the matrix is invertible, the pseudoinverse is the same as the\r\n+        inverse.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> Matrix([[1, 2, 3], [4, 5, 6]]).pinv()\r\n+        Matrix([\r\n+        [-17/18,  4/9],\r\n+        [  -1/9,  1/9],\r\n+        [ 13/18, -2/9]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        inv\r\n+        pinv_solve\r\n+\r\n+        References\r\n+        ==========\r\n+\r\n+        .. [1] https://en.wikipedia.org/wiki/Moore-Penrose_pseudoinverse\r\n+\r\n+        \"\"\"\r\n+        A = self\r\n+        AH = self.H\r\n+        # Trivial case: pseudoinverse of all-zero matrix is its transpose.\r\n+        if A.is_zero:\r\n+            return AH\r\n+        try:\r\n+            if self.rows >= self.cols:\r\n+                return (AH * A).inv() * AH\r\n+            else:\r\n+                return AH * (A * AH).inv()\r\n+        except ValueError:\r\n+            # Matrix is not full rank, so A*AH cannot be inverted.\r\n+            raise NotImplementedError('Rank-deficient matrices are not yet '\r\n+                                      'supported.')\r\n+\r\n+    def print_nonzero(self, symb=\"X\"):\r\n+        \"\"\"Shows location of non-zero entries for fast shape lookup.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix, eye\r\n+        >>> m = Matrix(2, 3, lambda i, j: i*3+j)\r\n+        >>> m\r\n+        Matrix([\r\n+        [0, 1, 2],\r\n+        [3, 4, 5]])\r\n+        >>> m.print_nonzero()\r\n+        [ XX]\r\n+        [XXX]\r\n+        >>> m = eye(4)\r\n+        >>> m.print_nonzero(\"x\")\r\n+        [x   ]\r\n+        [ x  ]\r\n+        [  x ]\r\n+        [   x]\r\n+\r\n+        \"\"\"\r\n+        s = []\r\n+        for i in range(self.rows):\r\n+            line = []\r\n+            for j in range(self.cols):\r\n+                if self[i, j] == 0:\r\n+                    line.append(\" \")\r\n+                else:\r\n+                    line.append(str(symb))\r\n+            s.append(\"[%s]\" % ''.join(line))\r\n+        print('\\n'.join(s))\r\n+\r\n+    def project(self, v):\r\n+        \"\"\"Return the projection of ``self`` onto the line containing ``v``.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix, S, sqrt\r\n+        >>> V = Matrix([sqrt(3)/2, S.Half])\r\n+        >>> x = Matrix([[1, 0]])\r\n+        >>> V.project(x)\r\n+        Matrix([[sqrt(3)/2, 0]])\r\n+        >>> V.project(-x)\r\n+        Matrix([[sqrt(3)/2, 0]])\r\n+        \"\"\"\r\n+        return v * (self.dot(v) / v.dot(v))\r\n+\r\n+    def QRdecomposition(self):\r\n+        \"\"\"Return Q, R where A = Q*R, Q is orthogonal and R is upper triangular.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        This is the example from wikipedia:\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> A = Matrix([[12, -51, 4], [6, 167, -68], [-4, 24, -41]])\r\n+        >>> Q, R = A.QRdecomposition()\r\n+        >>> Q\r\n+        Matrix([\r\n+        [ 6/7, -69/175, -58/175],\r\n+        [ 3/7, 158/175,   6/175],\r\n+        [-2/7,    6/35,  -33/35]])\r\n+        >>> R\r\n+        Matrix([\r\n+        [14,  21, -14],\r\n+        [ 0, 175, -70],\r\n+        [ 0,   0,  35]])\r\n+        >>> A == Q*R\r\n+        True\r\n+\r\n+        QR factorization of an identity matrix:\r\n+\r\n+        >>> A = Matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]])\r\n+        >>> Q, R = A.QRdecomposition()\r\n+        >>> Q\r\n+        Matrix([\r\n+        [1, 0, 0],\r\n+        [0, 1, 0],\r\n+        [0, 0, 1]])\r\n+        >>> R\r\n+        Matrix([\r\n+        [1, 0, 0],\r\n+        [0, 1, 0],\r\n+        [0, 0, 1]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        cholesky\r\n+        LDLdecomposition\r\n+        LUdecomposition\r\n+        QRsolve\r\n+        \"\"\"\r\n+        cls = self.__class__\r\n+        mat = self.as_mutable()\r\n+\r\n+        if not mat.rows >= mat.cols:\r\n+            raise MatrixError(\r\n+                \"The number of rows must be greater than columns\")\r\n+        n = mat.rows\r\n+        m = mat.cols\r\n+        rank = n\r\n+        row_reduced = mat.rref()[0]\r\n+        for i in range(row_reduced.rows):\r\n+            if row_reduced.row(i).norm() == 0:\r\n+                rank -= 1\r\n+        if not rank == mat.cols:\r\n+            raise MatrixError(\"The rank of the matrix must match the columns\")\r\n+        Q, R = mat.zeros(n, m), mat.zeros(m)\r\n+        for j in range(m):  # for each column vector\r\n+            tmp = mat[:, j]  # take original v\r\n+            for i in range(j):\r\n+                # subtract the project of mat on new vector\r\n+                tmp -= Q[:, i] * mat[:, j].dot(Q[:, i])\r\n+                tmp.expand()\r\n+            # normalize it\r\n+            R[j, j] = tmp.norm()\r\n+            Q[:, j] = tmp / R[j, j]\r\n+            if Q[:, j].norm() != 1:\r\n+                raise NotImplementedError(\r\n+                    \"Could not normalize the vector %d.\" % j)\r\n+            for i in range(j):\r\n+                R[i, j] = Q[:, i].dot(mat[:, j])\r\n+        return cls(Q), cls(R)\r\n+\r\n+    def QRsolve(self, b):\r\n+        \"\"\"Solve the linear system 'Ax = b'.\r\n+\r\n+        'self' is the matrix 'A', the method argument is the vector\r\n+        'b'.  The method returns the solution vector 'x'.  If 'b' is a\r\n+        matrix, the system is solved for each column of 'b' and the\r\n+        return value is a matrix of the same shape as 'b'.\r\n+\r\n+        This method is slower (approximately by a factor of 2) but\r\n+        more stable for floating-point arithmetic than the LUsolve method.\r\n+        However, LUsolve usually uses an exact arithmetic, so you don't need\r\n+        to use QRsolve.\r\n+\r\n+        This is mainly for educational purposes and symbolic matrices, for real\r\n+        (or complex) matrices use mpmath.qr_solve.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        lower_triangular_solve\r\n+        upper_triangular_solve\r\n+        gauss_jordan_solve\r\n+        cholesky_solve\r\n+        diagonal_solve\r\n+        LDLsolve\r\n+        LUsolve\r\n+        pinv_solve\r\n+        QRdecomposition\r\n+        \"\"\"\r\n+\r\n+        Q, R = self.as_mutable().QRdecomposition()\r\n+        y = Q.T * b\r\n+\r\n+        # back substitution to solve R*x = y:\r\n+        # We build up the result \"backwards\" in the vector 'x' and reverse it\r\n+        # only in the end.\r\n+        x = []\r\n+        n = R.rows\r\n+        for j in range(n - 1, -1, -1):\r\n+            tmp = y[j, :]\r\n+            for k in range(j + 1, n):\r\n+                tmp -= R[j, k] * x[n - 1 - k]\r\n+            x.append(tmp / R[j, j])\r\n+        return self._new([row._mat for row in reversed(x)])\r\n+\r\n+    def rank(self, iszerofunc=_iszero, simplify=False):\r\n+        \"\"\"\r\n+        Returns the rank of a matrix\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> from sympy.abc import x\r\n+        >>> m = Matrix([[1, 2], [x, 1 - 1/x]])\r\n+        >>> m.rank()\r\n+        2\r\n+        >>> n = Matrix(3, 3, range(1, 10))\r\n+        >>> n.rank()\r\n+        2\r\n+        \"\"\"\r\n+        row_reduced = self.rref(iszerofunc=iszerofunc, simplify=simplify)\r\n+        rank = len(row_reduced[-1])\r\n+        return rank\r\n+\r\n+    def rref(self, iszerofunc=_iszero, simplify=False):\r\n+        \"\"\"Return reduced row-echelon form of matrix and indices of pivot vars.\r\n+\r\n+        To simplify elements before finding nonzero pivots set simplify=True\r\n+        (to use the default SymPy simplify function) or pass a custom\r\n+        simplify function.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> from sympy.abc import x\r\n+        >>> m = Matrix([[1, 2], [x, 1 - 1/x]])\r\n+        >>> m.rref()\r\n+        (Matrix([\r\n+        [1, 0],\r\n+        [0, 1]]), [0, 1])\r\n+        >>> rref_matrix, rref_pivots = m.rref()\r\n+        >>> rref_matrix\r\n+        Matrix([\r\n+        [1, 0],\r\n+        [0, 1]])\r\n+        >>> rref_pivots\r\n+        [0, 1]\r\n+        \"\"\"\r\n+        simpfunc = simplify if isinstance(\r\n+            simplify, FunctionType) else _simplify\r\n+        # pivot: index of next row to contain a pivot\r\n+        pivot, r = 0, self.as_mutable()\r\n+        # pivotlist: indices of pivot variables (non-free)\r\n+        pivotlist = []\r\n+        for i in range(r.cols):\r\n+            if pivot == r.rows:\r\n+                break\r\n+            if simplify:\r\n+                r[pivot, i] = simpfunc(r[pivot, i])\r\n+\r\n+            pivot_offset, pivot_val, assumed_nonzero, newly_determined = _find_reasonable_pivot(\r\n+                r[pivot:, i], iszerofunc, simpfunc)\r\n+            # `_find_reasonable_pivot` may have simplified\r\n+            # some elements along the way.  If they were simplified\r\n+            # and then determined to be either zero or non-zero for\r\n+            # sure, they are stored in the `newly_determined` list\r\n+            for (offset, val) in newly_determined:\r\n+                r[pivot + offset, i] = val\r\n+\r\n+            # if `pivot_offset` is None, this column has no\r\n+            # pivot\r\n+            if pivot_offset is None:\r\n+                continue\r\n+\r\n+            # swap the pivot column into place\r\n+            pivot_pos = pivot + pivot_offset\r\n+            r.row_swap(pivot, pivot_pos)\r\n+\r\n+            r.row_op(pivot, lambda x, _: x / pivot_val)\r\n+            for j in range(r.rows):\r\n+                if j == pivot:\r\n+                    continue\r\n+                pivot_val = r[j, i]\r\n+                r.zip_row_op(j, pivot, lambda x, y: x - pivot_val * y)\r\n+            pivotlist.append(i)\r\n+            pivot += 1\r\n+        return self._new(r), pivotlist\r\n+\r\n+    def singular_values(self):\r\n+        \"\"\"Compute the singular values of a Matrix\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix, Symbol\r\n+        >>> x = Symbol('x', real=True)\r\n+        >>> A = Matrix([[0, 1, 0], [0, x, 0], [-1, 0, 0]])\r\n+        >>> A.singular_values()\r\n+        [sqrt(x**2 + 1), 1, 0]\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        condition_number\r\n+        \"\"\"\r\n+        mat = self.as_mutable()\r\n+        # Compute eigenvalues of A.H A\r\n+        valmultpairs = (mat.H * mat).eigenvals()\r\n+\r\n+        # Expands result from eigenvals into a simple list\r\n+        vals = []\r\n+        for k, v in valmultpairs.items():\r\n+            vals += [sqrt(k)] * v  # dangerous! same k in several spots!\r\n+        # sort them in descending order\r\n+        vals.sort(reverse=True, key=default_sort_key)\r\n+\r\n+        return vals\r\n+\r\n+    def solve_least_squares(self, rhs, method='CH'):\r\n+        \"\"\"Return the least-square fit to the data.\r\n+\r\n+        By default the cholesky_solve routine is used (method='CH'); other\r\n+        methods of matrix inversion can be used. To find out which are\r\n+        available, see the docstring of the .inv() method.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix, ones\r\n+        >>> A = Matrix([1, 2, 3])\r\n+        >>> B = Matrix([2, 3, 4])\r\n+        >>> S = Matrix(A.row_join(B))\r\n+        >>> S\r\n+        Matrix([\r\n+        [1, 2],\r\n+        [2, 3],\r\n+        [3, 4]])\r\n+\r\n+        If each line of S represent coefficients of Ax + By\r\n+        and x and y are [2, 3] then S*xy is:\r\n+\r\n+        >>> r = S*Matrix([2, 3]); r\r\n+        Matrix([\r\n+        [ 8],\r\n+        [13],\r\n+        [18]])\r\n+\r\n+        But let's add 1 to the middle value and then solve for the\r\n+        least-squares value of xy:\r\n+\r\n+        >>> xy = S.solve_least_squares(Matrix([8, 14, 18])); xy\r\n+        Matrix([\r\n+        [ 5/3],\r\n+        [10/3]])\r\n+\r\n+        The error is given by S*xy - r:\r\n+\r\n+        >>> S*xy - r\r\n+        Matrix([\r\n+        [1/3],\r\n+        [1/3],\r\n+        [1/3]])\r\n+        >>> _.norm().n(2)\r\n+        0.58\r\n+\r\n+        If a different xy is used, the norm will be higher:\r\n+\r\n+        >>> xy += ones(2, 1)/10\r\n+        >>> (S*xy - r).norm().n(2)\r\n+        1.5\r\n+\r\n+        \"\"\"\r\n+        if method == 'CH':\r\n+            return self.cholesky_solve(rhs)\r\n+        t = self.T\r\n+        return (t * self).inv(method=method) * t * rhs\r\n+\r\n+    def solve(self, rhs, method='GE'):\r\n+        \"\"\"Return solution to self*soln = rhs using given inversion method.\r\n+\r\n+        For a list of possible inversion methods, see the .inv() docstring.\r\n+        \"\"\"\r\n+\r\n+        if not self.is_square:\r\n+            if self.rows < self.cols:\r\n+                raise ValueError('Under-determined system. '\r\n+                                 'Try M.gauss_jordan_solve(rhs)')\r\n+            elif self.rows > self.cols:\r\n+                raise ValueError('For over-determined system, M, having '\r\n+                                 'more rows than columns, try M.solve_least_squares(rhs).')\r\n+        else:\r\n+            return self.inv(method=method) * rhs\r\n+\r\n+    def table(self, printer, rowstart='[', rowend=']', rowsep='\\n',\r\n+              colsep=', ', align='right'):\r\n+        r\"\"\"\r\n+        String form of Matrix as a table.\r\n+\r\n+        ``printer`` is the printer to use for on the elements (generally\r\n+        something like StrPrinter())\r\n+\r\n+        ``rowstart`` is the string used to start each row (by default '[').\r\n+\r\n+        ``rowend`` is the string used to end each row (by default ']').\r\n+\r\n+        ``rowsep`` is the string used to separate rows (by default a newline).\r\n+\r\n+        ``colsep`` is the string used to separate columns (by default ', ').\r\n+\r\n+        ``align`` defines how the elements are aligned. Must be one of 'left',\r\n+        'right', or 'center'.  You can also use '<', '>', and '^' to mean the\r\n+        same thing, respectively.\r\n+\r\n+        This is used by the string printer for Matrix.\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> from sympy.printing.str import StrPrinter\r\n+        >>> M = Matrix([[1, 2], [-33, 4]])\r\n+        >>> printer = StrPrinter()\r\n+        >>> M.table(printer)\r\n+        '[  1, 2]\\n[-33, 4]'\r\n+        >>> print(M.table(printer))\r\n+        [  1, 2]\r\n+        [-33, 4]\r\n+        >>> print(M.table(printer, rowsep=',\\n'))\r\n+        [  1, 2],\r\n+        [-33, 4]\r\n+        >>> print('[%s]' % M.table(printer, rowsep=',\\n'))\r\n+        [[  1, 2],\r\n+        [-33, 4]]\r\n+        >>> print(M.table(printer, colsep=' '))\r\n+        [  1 2]\r\n+        [-33 4]\r\n+        >>> print(M.table(printer, align='center'))\r\n+        [ 1 , 2]\r\n+        [-33, 4]\r\n+        >>> print(M.table(printer, rowstart='{', rowend='}'))\r\n+        {  1, 2}\r\n+        {-33, 4}\r\n+        \"\"\"\r\n+        # Handle zero dimensions:\r\n+        if self.rows == 0 or self.cols == 0:\r\n+            return '[]'\r\n+        # Build table of string representations of the elements\r\n+        res = []\r\n+        # Track per-column max lengths for pretty alignment\r\n+        maxlen = [0] * self.cols\r\n+        for i in range(self.rows):\r\n+            res.append([])\r\n+            for j in range(self.cols):\r\n+                s = printer._print(self[i, j])\r\n+                res[-1].append(s)\r\n+                maxlen[j] = max(len(s), maxlen[j])\r\n+        # Patch strings together\r\n+        align = {\r\n+            'left': 'ljust',\r\n+            'right': 'rjust',\r\n+            'center': 'center',\r\n+            '<': 'ljust',\r\n+            '>': 'rjust',\r\n+            '^': 'center',\r\n+        }[align]\r\n+        for i, row in enumerate(res):\r\n+            for j, elem in enumerate(row):\r\n+                row[j] = getattr(elem, align)(maxlen[j])\r\n+            res[i] = rowstart + colsep.join(row) + rowend\r\n+        return rowsep.join(res)\r\n+\r\n+    def upper_triangular_solve(self, rhs):\r\n+        \"\"\"Solves Ax = B, where A is an upper triangular matrix.\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        lower_triangular_solve\r\n+        gauss_jordan_solve\r\n+        cholesky_solve\r\n+        diagonal_solve\r\n+        LDLsolve\r\n+        LUsolve\r\n+        QRsolve\r\n+        pinv_solve\r\n+        \"\"\"\r\n+        if not self.is_square:\r\n+            raise NonSquareMatrixError(\"Matrix must be square.\")\r\n+        if rhs.rows != self.rows:\r\n+            raise TypeError(\"Matrix size mismatch.\")\r\n+        if not self.is_upper:\r\n+            raise TypeError(\"Matrix is not upper triangular.\")\r\n+        return self._upper_triangular_solve(rhs)\r\n+\r\n+    def vech(self, diagonal=True, check_symmetry=True):\r\n+        \"\"\"Return the unique elements of a symmetric Matrix as a one column matrix\r\n+        by stacking the elements in the lower triangle.\r\n+\r\n+        Arguments:\r\n+        diagonal -- include the diagonal cells of self or not\r\n+        check_symmetry -- checks symmetry of self but not completely reliably\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy import Matrix\r\n+        >>> m=Matrix([[1, 2], [2, 3]])\r\n+        >>> m\r\n+        Matrix([\r\n+        [1, 2],\r\n+        [2, 3]])\r\n+        >>> m.vech()\r\n+        Matrix([\r\n+        [1],\r\n+        [2],\r\n+        [3]])\r\n+        >>> m.vech(diagonal=False)\r\n+        Matrix([[2]])\r\n+\r\n+        See Also\r\n+        ========\r\n+\r\n+        vec\r\n+        \"\"\"\r\n+        from sympy.matrices import zeros\r\n+\r\n+        c = self.cols\r\n+        if c != self.rows:\r\n+            raise ShapeError(\"Matrix must be square\")\r\n+        if check_symmetry:\r\n+            self.simplify()\r\n+            if self != self.transpose():\r\n+                raise ValueError(\r\n+                    \"Matrix appears to be asymmetric; consider check_symmetry=False\")\r\n+        count = 0\r\n+        if diagonal:\r\n+            v = zeros(c * (c + 1) // 2, 1)\r\n+            for j in range(c):\r\n+                for i in range(j, c):\r\n+                    v[count] = self[i, j]\r\n+                    count += 1\r\n+        else:\r\n+            v = zeros(c * (c - 1) // 2, 1)\r\n+            for j in range(c):\r\n+                for i in range(j + 1, c):\r\n+                    v[count] = self[i, j]\r\n+                    count += 1\r\n+        return v\r\n+\r\n+\r\n+    @classmethod\r\n+    def vstack(cls, *args):\r\n+        \"\"\"Return a matrix formed by joining args vertically (i.e.\r\n+        by repeated application of col_join).\r\n+\r\n+        Examples\r\n+        ========\r\n+\r\n+        >>> from sympy.matrices import Matrix, eye\r\n+        >>> Matrix.vstack(eye(2), 2*eye(2))\r\n+        Matrix([\r\n+        [1, 0],\r\n+        [0, 1],\r\n+        [2, 0],\r\n+        [0, 2]])\r\n+        \"\"\"\r\n+        kls = type(args[0])\r\n+        return reduce(kls.col_join, args)\r\n+\r\n+\r\n+def classof(A, B):\r\n+    \"\"\"\r\n+    Get the type of the result when combining matrices of different types.\r\n+\r\n+    Currently the strategy is that immutability is contagious.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy import Matrix, ImmutableMatrix\r\n+    >>> from sympy.matrices.matrices import classof\r\n+    >>> M = Matrix([[1, 2], [3, 4]]) # a Mutable Matrix\r\n+    >>> IM = ImmutableMatrix([[1, 2], [3, 4]])\r\n+    >>> classof(M, IM)\r\n+    <class 'sympy.matrices.immutable.ImmutableDenseMatrix'>\r\n+    \"\"\"\r\n+    try:\r\n+        if A._class_priority > B._class_priority:\r\n+            return A.__class__\r\n+        else:\r\n+            return B.__class__\r\n+    except Exception:\r\n+        pass\r\n+    try:\r\n+        import numpy\r\n+        if isinstance(A, numpy.ndarray):\r\n+            return B.__class__\r\n+        if isinstance(B, numpy.ndarray):\r\n+            return A.__class__\r\n+    except Exception:\r\n+        pass\r\n+    raise TypeError(\"Incompatible classes %s, %s\" % (A.__class__, B.__class__))\r\n+\r\n+\r\n+def a2idx(j, n=None):\r\n+    \"\"\"Return integer after making positive and validating against n.\"\"\"\r\n+    if type(j) is not int:\r\n+        try:\r\n+            j = j.__index__()\r\n+        except AttributeError:\r\n+            raise IndexError(\"Invalid index a[%r]\" % (j,))\r\n+    if n is not None:\r\n+        if j < 0:\r\n+            j += n\r\n+        if not (j >= 0 and j < n):\r\n+            raise IndexError(\"Index out of range: a[%s]\" % (j,))\r\n+    return int(j)\r\n+\r\n+\r\n+def _find_reasonable_pivot(col, iszerofunc=_iszero, simpfunc=_simplify):\r\n+    \"\"\" Find the lowest index of an item in `col` that is\r\n+    suitable for a pivot.  If `col` consists only of\r\n+    Floats, the pivot with the largest norm is returned.\r\n+    Otherwise, the first element where `iszerofunc` returns\r\n+    False is used.  If `iszerofunc` doesn't return false,\r\n+    items are simplified and retested until a suitable\r\n+    pivot is found.\r\n+\r\n+    Returns a 4-tuple\r\n+        (pivot_offset, pivot_val, assumed_nonzero, newly_determined)\r\n+    where pivot_offset is the index of the pivot, pivot_val is\r\n+    the (possibly simplified) value of the pivot, assumed_nonzero\r\n+    is True if an assumption that the pivot was non-zero\r\n+    was made without being proved, and newly_determined are\r\n+    elements that were simplified during the process of pivot\r\n+    finding.\"\"\"\r\n+\r\n+    newly_determined = []\r\n+    col = list(col)\r\n+    # a column that contains a mix of floats and integers\r\n+    # but at least one float is considered a numerical\r\n+    # column, and so we do partial pivoting\r\n+    if all(isinstance(x, (Float, Integer)) for x in col) and any(\r\n+            isinstance(x, Float) for x in col):\r\n+        col_abs = [abs(x) for x in col]\r\n+        max_value = max(col_abs)\r\n+        if iszerofunc(max_value):\r\n+            # just because iszerofunc returned True, doesn't\r\n+            # mean the value is numerically zero.  Make sure\r\n+            # to replace all entries with numerical zeros\r\n+            if max_value != 0:\r\n+                newly_determined = [(i, 0) for i, x in enumerate(col) if x != 0]\r\n+            return (None, None, False, newly_determined)\r\n+        index = col_abs.index(max_value)\r\n+        return (index, col[index], False, newly_determined)\r\n+\r\n+    # PASS 1 (iszerofunc directly)\r\n+    possible_zeros = []\r\n+    for i, x in enumerate(col):\r\n+        is_zero = iszerofunc(x)\r\n+        # is someone wrote a custom iszerofunc, it may return\r\n+        # BooleanFalse or BooleanTrue instead of True or False,\r\n+        # so use == for comparison instead of `is`\r\n+        if is_zero == False:\r\n+            # we found something that is definitely not zero\r\n+            return (i, x, False, newly_determined)\r\n+        possible_zeros.append(is_zero)\r\n+\r\n+    # by this point, we've found no certain non-zeros\r\n+    if all(possible_zeros):\r\n+        # if everything is definitely zero, we have\r\n+        # no pivot\r\n+        return (None, None, False, newly_determined)\r\n+\r\n+    # PASS 2 (iszerofunc after simplify)\r\n+    # we haven't found any for-sure non-zeros, so\r\n+    # go through the elements iszerofunc couldn't\r\n+    # make a determination about and opportunistically\r\n+    # simplify to see if we find something\r\n+    for i, x in enumerate(col):\r\n+        if possible_zeros[i] is not None:\r\n+            continue\r\n+        simped = simpfunc(x)\r\n+        is_zero = iszerofunc(simped)\r\n+        if is_zero == True or is_zero == False:\r\n+            newly_determined.append((i, simped))\r\n+        if is_zero == False:\r\n+            return (i, simped, False, newly_determined)\r\n+        possible_zeros[i] = is_zero\r\n+\r\n+    # after simplifying, some things that were recognized\r\n+    # as zeros might be zeros\r\n+    if all(possible_zeros):\r\n+        # if everything is definitely zero, we have\r\n+        # no pivot\r\n+        return (None, None, False, newly_determined)\r\n+\r\n+    # PASS 3 (.equals(0))\r\n+    # some expressions fail to simplify to zero, but\r\n+    # `.equals(0)` evaluates to True.  As a last-ditch\r\n+    # attempt, apply `.equals` to these expressions\r\n+    for i, x in enumerate(col):\r\n+        if possible_zeros[i] is not None:\r\n+            continue\r\n+        if x.equals(S.Zero):\r\n+            # `.iszero` may return False with\r\n+            # an implicit assumption (e.g., `x.equals(0)`\r\n+            # when `x` is a symbol), so only treat it\r\n+            # as proved when `.equals(0)` returns True\r\n+            possible_zeros[i] = True\r\n+            newly_determined.append((i, S.Zero))\r\n+\r\n+    if all(possible_zeros):\r\n+        return (None, None, False, newly_determined)\r\n+\r\n+    # at this point there is nothing that could definitely\r\n+    # be a pivot.  To maintain compatibility with existing\r\n+    # behavior, we'll assume that an illdetermined thing is\r\n+    # non-zero.  We should probably raise a warning in this case\r\n+    i = possible_zeros.index(None)\r\n+    return (i, col[i], True, newly_determined)\r\n+\r\n+\r\n+class _MinimalMatrix(object):\r\n+    \"\"\"Class providing the minimum functionality\r\n+    for a matrix-like object and implementing every method\r\n+    required for a `MatrixRequired`.  This class does not have everything\r\n+    needed to become a full-fledged sympy object, but it will satisfy the\r\n+    requirements of anything inheriting from `MatrixRequired`.  If you wish\r\n+    to make a specialized matrix type, make sure to implement these\r\n+    methods and properties with the exception of `__init__` and `__repr__`\r\n+    which are included for convenience.\"\"\"\r\n+\r\n+    is_MatrixLike = True\r\n+    _sympify = staticmethod(sympify)\r\n+    _class_priority = 3\r\n+\r\n+    is_Matrix = True\r\n+    is_MatrixExpr = False\r\n+\r\n+    @classmethod\r\n+    def _new(cls, *args, **kwargs):\r\n+        return cls(*args, **kwargs)\r\n+\r\n+    def __init__(self, rows, cols=None, mat=None):\r\n+        if isinstance(mat, FunctionType):\r\n+            # if we passed in a function, use that to populate the indices\r\n+            mat = list(mat(i, j) for i in range(rows) for j in range(cols))\r\n+        try:\r\n+            if cols is None and mat is None:\r\n+                mat = rows\r\n+            rows, cols = mat.shape\r\n+        except AttributeError:\r\n+            pass\r\n+        try:\r\n+            # if we passed in a list of lists, flatten it and set the size\r\n+            if cols is None and mat is None:\r\n+                mat = rows\r\n+            cols = len(mat[0])\r\n+            rows = len(mat)\r\n+            mat = [x for l in mat for x in l]\r\n+        except (IndexError, TypeError):\r\n+            pass\r\n+        self.mat = tuple(self._sympify(x) for x in mat)\r\n+        self.rows, self.cols = rows, cols\r\n+        if self.rows is None or self.cols is None:\r\n+            raise NotImplementedError(\"Cannot initialize matrix with given parameters\")\r\n+\r\n+    def __getitem__(self, key):\r\n+        def _normalize_slices(row_slice, col_slice):\r\n+            \"\"\"Ensure that row_slice and col_slice don't have\r\n+            `None` in their arguments.  Any integers are converted\r\n+            to slices of length 1\"\"\"\r\n+            if not isinstance(row_slice, slice):\r\n+                row_slice = slice(row_slice, row_slice + 1, None)\r\n+            row_slice = slice(*row_slice.indices(self.rows))\r\n+\r\n+            if not isinstance(col_slice, slice):\r\n+                col_slice = slice(col_slice, col_slice + 1, None)\r\n+            col_slice = slice(*col_slice.indices(self.cols))\r\n+\r\n+            return (row_slice, col_slice)\r\n+\r\n+        def _coord_to_index(i, j):\r\n+            \"\"\"Return the index in _mat corresponding\r\n+            to the (i,j) position in the matrix. \"\"\"\r\n+            return i * self.cols + j\r\n+\r\n+        if isinstance(key, tuple):\r\n+            i, j = key\r\n+            if isinstance(i, slice) or isinstance(j, slice):\r\n+                # if the coordinates are not slices, make them so\r\n+                # and expand the slices so they don't contain `None`\r\n+                i, j = _normalize_slices(i, j)\r\n+\r\n+                rowsList, colsList = list(range(self.rows))[i], \\\r\n+                                     list(range(self.cols))[j]\r\n+                indices = (i * self.cols + j for i in rowsList for j in\r\n+                           colsList)\r\n+                return self._new(len(rowsList), len(colsList),\r\n+                                 list(self.mat[i] for i in indices))\r\n+\r\n+            # if the key is a tuple of ints, change\r\n+            # it to an array index\r\n+            key = _coord_to_index(i, j)\r\n+        return self.mat[key]\r\n+\r\n+    def __eq__(self, other):\r\n+        return self.shape == other.shape and list(self) == list(other)\r\n+\r\n+    def __len__(self):\r\n+        return self.rows*self.cols\r\n+\r\n+    def __repr__(self):\r\n+        return \"_MinimalMatrix({}, {}, {})\".format(self.rows, self.cols,\r\n+                                                   self.mat)\r\n+\r\n+    @property\r\n+    def shape(self):\r\n+        return (self.rows, self.cols)\r\n+\r\n+\r\n+class _MatrixWrapper(object):\r\n+    \"\"\"Wrapper class providing the minimum functionality\r\n+    for a matrix-like object: .rows, .cols, .shape, indexability,\r\n+    and iterability.  CommonMatrix math operations should work\r\n+    on matrix-like objects.  For example, wrapping a numpy\r\n+    matrix in a MatrixWrapper allows it to be passed to CommonMatrix.\r\n+    \"\"\"\r\n+    is_MatrixLike = True\r\n+\r\n+    def __init__(self, mat, shape=None):\r\n+        self.mat = mat\r\n+        self.rows, self.cols = mat.shape if shape is None else shape\r\n+\r\n+    def __getattr__(self, attr):\r\n+        \"\"\"Most attribute access is passed straight through\r\n+        to the stored matrix\"\"\"\r\n+        return getattr(self.mat, attr)\r\n+\r\n+    def __getitem__(self, key):\r\n+        return self.mat.__getitem__(key)\r\n+\r\n+\r\n+def _matrixify(mat):\r\n+    \"\"\"If `mat` is a Matrix or is matrix-like,\r\n+    return a Matrix or MatrixWrapper object.  Otherwise\r\n+    `mat` is passed through without modification.\"\"\"\r\n+    if getattr(mat, 'is_Matrix', False):\r\n+        return mat\r\n+    if hasattr(mat, 'shape'):\r\n+        if len(mat.shape) == 2:\r\n+            return _MatrixWrapper(mat)\r\n+    return mat\r\ndiff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\r\nindex 90ea232faf..c600fe88e2 100644\r\n--- a/sympy/matrices/matrices.py\r\n+++ b/sympy/matrices/matrices.py\r\n@@ -1112,7 +1112,7 @@ def is_upper(self):\r\n         \"\"\"\r\n         return all(self[i, j].is_zero\r\n                    for i in range(1, self.rows)\r\n-                   for j in range(i))\r\n+                   for j in range(min(i, self.cols)))\r\n \r\n     @property\r\n     def is_zero(self):",
        "model_stats": {
            "accumulated_cost": 0.5162249999999999,
            "costs": [
                0.016398,
                0.019995,
                0.020505,
                0.021588,
                0.023676,
                0.039693,
                0.034103999999999995,
                0.034041,
                0.034905,
                0.035226,
                0.035747999999999995,
                0.037155,
                0.03735,
                0.038223,
                0.04335000000000001,
                0.044267999999999995
            ]
        }
    }
}