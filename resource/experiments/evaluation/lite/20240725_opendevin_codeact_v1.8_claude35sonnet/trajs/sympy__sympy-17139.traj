{
    "instance_id": "sympy__sympy-17139",
    "traj": [
        [
            {
                "id": 0,
                "timestamp": "2024-07-17T18:55:23.534209",
                "source": "user",
                "message": "Please fix the following issue for the repository in /workspace/sympy__sympy__1.5.\nEnvironment has been set up for you to start working. You may assume all necessary tools are installed.\n\n# Problem Statement\nsimplify(cos(x)**I): Invalid comparison of complex I (fu.py)\n```\r\n>>> from sympy import *\r\n>>> x = Symbol('x')\r\n>>> print(simplify(cos(x)**I))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/e/se/sympy/simplify/simplify.py\", line 587, in simplify\r\n    expr = trigsimp(expr, deep=True)\r\n  File \"/home/e/se/sympy/simplify/trigsimp.py\", line 508, in trigsimp\r\n    return trigsimpfunc(expr)\r\n  File \"/home/e/se/sympy/simplify/trigsimp.py\", line 501, in <lambda>\r\n    'matching': (lambda x: futrig(x)),\r\n  File \"/home/e/se/sympy/simplify/trigsimp.py\", line 1101, in futrig\r\n    e = bottom_up(e, lambda x: _futrig(x, **kwargs))\r\n  File \"/home/e/se/sympy/simplify/simplify.py\", line 1081, in bottom_up\r\n    rv = F(rv)\r\n  File \"/home/e/se/sympy/simplify/trigsimp.py\", line 1101, in <lambda>\r\n    e = bottom_up(e, lambda x: _futrig(x, **kwargs))\r\n  File \"/home/e/se/sympy/simplify/trigsimp.py\", line 1169, in _futrig\r\n    e = greedy(tree, objective=Lops)(e)\r\n  File \"/home/e/se/sympy/strategies/core.py\", line 115, in minrule\r\n    return min([rule(expr) for rule in rules], key=objective)\r\n  File \"/home/e/se/sympy/strategies/core.py\", line 115, in <listcomp>\r\n    return min([rule(expr) for rule in rules], key=objective)\r\n  File \"/home/e/se/sympy/strategies/core.py\", line 44, in chain_rl\r\n    expr = rule(expr)\r\n  File \"/home/e/se/sympy/simplify/fu.py\", line 566, in TR6\r\n    return _TR56(rv, cos, sin, lambda x: 1 - x, max=max, pow=pow)\r\n  File \"/home/e/se/sympy/simplify/fu.py\", line 524, in _TR56\r\n    return bottom_up(rv, _f)\r\n  File \"/home/e/se/sympy/simplify/simplify.py\", line 1081, in bottom_up\r\n    rv = F(rv)\r\n  File \"/home/e/se/sympy/simplify/fu.py\", line 504, in _f\r\n    if (rv.exp < 0) == True:\r\n  File \"/home/e/se/sympy/core/expr.py\", line 406, in __lt__\r\n    raise TypeError(\"Invalid comparison of complex %s\" % me)\r\nTypeError: Invalid comparison of complex I\r\n```\n\n\nIMPORTANT: You should ONLY interact with the environment provided to you AND NEVER ASK FOR HUMAN HELP.\nYou should NOT modify any existing test case files. If needed, you can add new test cases in a NEW file to reproduce the issue.\nYou SHOULD INCLUDE PROPER INDENTATION in your edit commands.\nWhen you think you have fixed the issue through code changes, please run the following command: <execute_bash> exit </execute_bash>.\n",
                "action": "message",
                "args": {
                    "content": "Please fix the following issue for the repository in /workspace/sympy__sympy__1.5.\nEnvironment has been set up for you to start working. You may assume all necessary tools are installed.\n\n# Problem Statement\nsimplify(cos(x)**I): Invalid comparison of complex I (fu.py)\n```\r\n>>> from sympy import *\r\n>>> x = Symbol('x')\r\n>>> print(simplify(cos(x)**I))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/e/se/sympy/simplify/simplify.py\", line 587, in simplify\r\n    expr = trigsimp(expr, deep=True)\r\n  File \"/home/e/se/sympy/simplify/trigsimp.py\", line 508, in trigsimp\r\n    return trigsimpfunc(expr)\r\n  File \"/home/e/se/sympy/simplify/trigsimp.py\", line 501, in <lambda>\r\n    'matching': (lambda x: futrig(x)),\r\n  File \"/home/e/se/sympy/simplify/trigsimp.py\", line 1101, in futrig\r\n    e = bottom_up(e, lambda x: _futrig(x, **kwargs))\r\n  File \"/home/e/se/sympy/simplify/simplify.py\", line 1081, in bottom_up\r\n    rv = F(rv)\r\n  File \"/home/e/se/sympy/simplify/trigsimp.py\", line 1101, in <lambda>\r\n    e = bottom_up(e, lambda x: _futrig(x, **kwargs))\r\n  File \"/home/e/se/sympy/simplify/trigsimp.py\", line 1169, in _futrig\r\n    e = greedy(tree, objective=Lops)(e)\r\n  File \"/home/e/se/sympy/strategies/core.py\", line 115, in minrule\r\n    return min([rule(expr) for rule in rules], key=objective)\r\n  File \"/home/e/se/sympy/strategies/core.py\", line 115, in <listcomp>\r\n    return min([rule(expr) for rule in rules], key=objective)\r\n  File \"/home/e/se/sympy/strategies/core.py\", line 44, in chain_rl\r\n    expr = rule(expr)\r\n  File \"/home/e/se/sympy/simplify/fu.py\", line 566, in TR6\r\n    return _TR56(rv, cos, sin, lambda x: 1 - x, max=max, pow=pow)\r\n  File \"/home/e/se/sympy/simplify/fu.py\", line 524, in _TR56\r\n    return bottom_up(rv, _f)\r\n  File \"/home/e/se/sympy/simplify/simplify.py\", line 1081, in bottom_up\r\n    rv = F(rv)\r\n  File \"/home/e/se/sympy/simplify/fu.py\", line 504, in _f\r\n    if (rv.exp < 0) == True:\r\n  File \"/home/e/se/sympy/core/expr.py\", line 406, in __lt__\r\n    raise TypeError(\"Invalid comparison of complex %s\" % me)\r\nTypeError: Invalid comparison of complex I\r\n```\n\n\nIMPORTANT: You should ONLY interact with the environment provided to you AND NEVER ASK FOR HUMAN HELP.\nYou should NOT modify any existing test case files. If needed, you can add new test cases in a NEW file to reproduce the issue.\nYou SHOULD INCLUDE PROPER INDENTATION in your edit commands.\nWhen you think you have fixed the issue through code changes, please run the following command: <execute_bash> exit </execute_bash>.\n",
                    "wait_for_response": false
                }
            },
            {
                "message": "No observation",
                "observation": "null",
                "content": "",
                "extras": {}
            }
        ],
        [
            {
                "id": 3,
                "timestamp": "2024-07-17T18:55:27.115755",
                "source": "agent",
                "message": "Running Python code interactively: open_file('/workspace/sympy__sympy__1.5/sympy/simplify/fu.py')",
                "action": "run_ipython",
                "args": {
                    "code": "open_file('/workspace/sympy__sympy__1.5/sympy/simplify/fu.py')",
                    "thought": "Certainly! Let's start by examining the relevant code and then make the necessary changes to fix the issue. First, I'll open the file where the error is occurring.",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 4,
                "timestamp": "2024-07-17T18:55:27.717350",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 3,
                "observation": "run_ipython",
                "content": "[File: /workspace/sympy__sympy__1.5/sympy/simplify/fu.py (2215 lines total)]\r\n(this is the beginning of the file)\r\n1|\"\"\"\r\n2|Implementation of the trigsimp algorithm by Fu et al.\r\n3|\r\n4|The idea behind the ``fu`` algorithm is to use a sequence of rules, applied\r\n5|in what is heuristically known to be a smart order, to select a simpler\r\n6|expression that is equivalent to the input.\r\n7|\r\n8|There are transform rules in which a single rule is applied to the\r\n9|expression tree. The following are just mnemonic in nature; see the\r\n10|docstrings for examples.\r\n11|\r\n12|    TR0 - simplify expression\r\n13|    TR1 - sec-csc to cos-sin\r\n14|    TR2 - tan-cot to sin-cos ratio\r\n15|    TR2i - sin-cos ratio to tan\r\n16|    TR3 - angle canonicalization\r\n17|    TR4 - functions at special angles\r\n18|    TR5 - powers of sin to powers of cos\r\n19|    TR6 - powers of cos to powers of sin\r\n20|    TR7 - reduce cos power (increase angle)\r\n21|    TR8 - expand products of sin-cos to sums\r\n22|    TR9 - contract sums of sin-cos to products\r\n23|    TR10 - separate sin-cos arguments\r\n24|    TR10i - collect sin-cos arguments\r\n25|    TR11 - reduce double angles\r\n26|    TR12 - separate tan arguments\r\n27|    TR12i - collect tan arguments\r\n28|    TR13 - expand product of tan-cot\r\n29|    TRmorrie - prod(cos(x*2**i), (i, 0, k - 1)) -> sin(2**k*x)/(2**k*sin(x))\r\n30|    TR14 - factored powers of sin or cos to cos or sin power\r\n31|    TR15 - negative powers of sin to cot power\r\n32|    TR16 - negative powers of cos to tan power\r\n33|    TR22 - tan-cot powers to negative powers of sec-csc functions\r\n34|    TR111 - negative sin-cos-tan powers to csc-sec-cot\r\n35|\r\n36|There are 4 combination transforms (CTR1 - CTR4) in which a sequence of\r\n37|transformations are applied and the simplest expression is selected from\r\n38|a few options.\r\n39|\r\n40|Finally, there are the 2 rule lists (RL1 and RL2), which apply a\r\n41|sequence of transformations and combined transformations, and the ``fu``\r\n42|algorithm itself, which applies rules and rule lists and selects the\r\n43|best expressions. There is also a function ``L`` which counts the number\r\n44|of trigonometric functions that appear in the expression.\r\n45|\r\n46|Other than TR0, re-writing of expressions is not done by the transformations.\r\n47|e.g. TR10i finds pairs of terms in a sum that are in the form like\r\n48|``cos(x)*cos(y) + sin(x)*sin(y)``. Such expression are targeted in a bottom-up\r\n49|traversal of the expression, but no manipulation to make them appear is\r\n50|attempted. For example,\r\n51|\r\n52|    Set-up for examples below:\r\n53|\r\n54|    >>> from sympy.simplify.fu import fu, L, TR9, TR10i, TR11\r\n55|    >>> from sympy import factor, sin, cos, powsimp\r\n56|    >>> from sympy.abc import x, y, z, a\r\n57|    >>> from time import time\r\n58|\r\n59|>>> eq = cos(x + y)/cos(x)\r\n60|>>> TR10i(eq.expand(trig=True))\r\n61|-sin(x)*sin(y)/cos(x) + cos(y)\r\n62|\r\n63|If the expression is put in \"normal\" form (with a common denominator) then\r\n64|the transformation is successful:\r\n65|\r\n66|>>> TR10i(_.normal())\r\n67|cos(x + y)/cos(x)\r\n68|\r\n69|TR11's behavior is similar. It rewrites double angles as smaller angles but\r\n70|doesn't do any simplification of the result.\r\n71|\r\n72|>>> TR11(sin(2)**a*cos(1)**(-a), 1)\r\n73|(2*sin(1)*cos(1))**a*cos(1)**(-a)\r\n74|>>> powsimp(_)\r\n75|(2*sin(1))**a\r\n76|\r\n77|The temptation is to try make these TR rules \"smarter\" but that should really\r\n78|be done at a higher level; the TR rules should try maintain the \"do one thing\r\n79|well\" principle.  There is one exception, however. In TR10i and TR9 terms are\r\n80|recognized even when they are each multiplied by a common factor:\r\n81|\r\n82|>>> fu(a*cos(x)*cos(y) + a*sin(x)*sin(y))\r\n83|a*cos(x - y)\r\n84|\r\n85|Factoring with ``factor_terms`` is used but it it \"JIT\"-like, being delayed\r\n86|until it is deemed necessary. Furthermore, if the factoring does not\r\n87|help with the simplification, it is not retained, so\r\n88|``a*cos(x)*cos(y) + a*sin(x)*sin(z)`` does not become the factored\r\n89|(but unsimplified in the trigonometric sense) expression:\r\n90|\r\n91|>>> fu(a*cos(x)*cos(y) + a*sin(x)*sin(z))\r\n92|a*sin(x)*sin(z) + a*cos(x)*cos(y)\r\n93|\r\n94|In some cases factoring might be a good idea, but the user is left\r\n95|to make that decision. For example:\r\n96|\r\n97|>>> expr=((15*sin(2*x) + 19*sin(x + y) + 17*sin(x + z) + 19*cos(x - z) +\r\n98|... 25)*(20*sin(2*x) + 15*sin(x + y) + sin(y + z) + 14*cos(x - z) +\r\n99|... 14*cos(y - z))*(9*sin(2*y) + 12*sin(y + z) + 10*cos(x - y) + 2*cos(y -\r\n100|... z) + 18)).expand(trig=True).expand()\r\n(2115 more lines below)\r\n",
                "extras": {
                    "code": "open_file('/workspace/sympy__sympy__1.5/sympy/simplify/fu.py')"
                }
            }
        ],
        [
            {
                "id": 5,
                "timestamp": "2024-07-17T18:55:30.868834",
                "source": "agent",
                "message": "Running Python code interactively: search_file('def _TR56', '/workspace/sympy__sympy__1.5/sympy/simplify/fu.py')",
                "action": "run_ipython",
                "args": {
                    "code": "search_file('def _TR56', '/workspace/sympy__sympy__1.5/sympy/simplify/fu.py')",
                    "thought": "Thank you for providing the file content. The error occurs in the `_f` function within the `_TR56` function. Let's locate and modify the problematic part. I'll search for the `_TR56` function:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 6,
                "timestamp": "2024-07-17T18:55:31.358904",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 5,
                "observation": "run_ipython",
                "content": "[Found 1 matches for \"def _TR56\" in /workspace/sympy__sympy__1.5/sympy/simplify/fu.py]\r\nLine 470: def _TR56(rv, f, g, h, max, pow):\r\n[End of matches for \"def _TR56\" in /workspace/sympy__sympy__1.5/sympy/simplify/fu.py]\r\n",
                "extras": {
                    "code": "search_file('def _TR56', '/workspace/sympy__sympy__1.5/sympy/simplify/fu.py')"
                }
            }
        ],
        [
            {
                "id": 7,
                "timestamp": "2024-07-17T18:55:33.819565",
                "source": "agent",
                "message": "Running Python code interactively: open_file('/workspace/sympy__sympy__1.5/sympy/simplify/fu.py', 470, 100)",
                "action": "run_ipython",
                "args": {
                    "code": "open_file('/workspace/sympy__sympy__1.5/sympy/simplify/fu.py', 470, 100)",
                    "thought": "Thank you for the information. Now, let's examine the `_TR56` function and the `_f` function within it:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 8,
                "timestamp": "2024-07-17T18:55:34.311234",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 7,
                "observation": "run_ipython",
                "content": "[File: /workspace/sympy__sympy__1.5/sympy/simplify/fu.py (2215 lines total)]\r\n(419 more lines above)\r\n420|    # Negative argument (already automatic for funcs like sin(-x) -> -sin(x)\r\n421|    # but more complicated expressions can use it, too). Also, trig angles\r\n422|    # between pi/4 and pi/2 are not reduced to an angle between 0 and pi/4.\r\n423|    # The following are automatically handled:\r\n424|    #   Argument of type: pi/2 +/- angle\r\n425|    #   Argument of type: pi +/- angle\r\n426|    #   Argument of type : 2k*pi +/- angle\r\n427|\r\n428|    def f(rv):\r\n429|        if not isinstance(rv, TrigonometricFunction):\r\n430|            return rv\r\n431|        rv = rv.func(signsimp(rv.args[0]))\r\n432|        if not isinstance(rv, TrigonometricFunction):\r\n433|            return rv\r\n434|        if (rv.args[0] - S.Pi/4).is_positive is (S.Pi/2 - rv.args[0]).is_positive is True:\r\n435|            fmap = {cos: sin, sin: cos, tan: cot, cot: tan, sec: csc, csc: sec}\r\n436|            rv = fmap[rv.func](S.Pi/2 - rv.args[0])\r\n437|        return rv\r\n438|\r\n439|    return bottom_up(rv, f)\r\n440|\r\n441|\r\n442|def TR4(rv):\r\n443|    \"\"\"Identify values of special angles.\r\n444|\r\n445|        a=  0   pi/6        pi/4        pi/3        pi/2\r\n446|    ----------------------------------------------------\r\n447|    cos(a)  0   1/2         sqrt(2)/2   sqrt(3)/2   1\r\n448|    sin(a)  1   sqrt(3)/2   sqrt(2)/2   1/2         0\r\n449|    tan(a)  0   sqt(3)/3    1           sqrt(3)     --\r\n450|\r\n451|    Examples\r\n452|    ========\r\n453|\r\n454|    >>> from sympy.simplify.fu import TR4\r\n455|    >>> from sympy import pi\r\n456|    >>> from sympy import cos, sin, tan, cot\r\n457|    >>> for s in (0, pi/6, pi/4, pi/3, pi/2):\r\n458|    ...    print('%s %s %s %s' % (cos(s), sin(s), tan(s), cot(s)))\r\n459|    ...\r\n460|    1 0 0 zoo\r\n461|    sqrt(3)/2 1/2 sqrt(3)/3 sqrt(3)\r\n462|    sqrt(2)/2 sqrt(2)/2 1 1\r\n463|    1/2 sqrt(3)/2 sqrt(3) sqrt(3)/3\r\n464|    0 1 zoo 0\r\n465|    \"\"\"\r\n466|    # special values at 0, pi/6, pi/4, pi/3, pi/2 already handled\r\n467|    return rv\r\n468|\r\n469|\r\n470|def _TR56(rv, f, g, h, max, pow):\r\n471|    \"\"\"Helper for TR5 and TR6 to replace f**2 with h(g**2)\r\n472|\r\n473|    Options\r\n474|    =======\r\n475|\r\n476|    max :   controls size of exponent that can appear on f\r\n477|            e.g. if max=4 then f**4 will be changed to h(g**2)**2.\r\n478|    pow :   controls whether the exponent must be a perfect power of 2\r\n479|            e.g. if pow=True (and max >= 6) then f**6 will not be changed\r\n480|            but f**8 will be changed to h(g**2)**4\r\n481|\r\n482|    >>> from sympy.simplify.fu import _TR56 as T\r\n483|    >>> from sympy.abc import x\r\n484|    >>> from sympy import sin, cos\r\n485|    >>> h = lambda x: 1 - x\r\n486|    >>> T(sin(x)**3, sin, cos, h, 4, False)\r\n487|    sin(x)**3\r\n488|    >>> T(sin(x)**6, sin, cos, h, 6, False)\r\n489|    (1 - cos(x)**2)**3\r\n490|    >>> T(sin(x)**6, sin, cos, h, 6, True)\r\n491|    sin(x)**6\r\n492|    >>> T(sin(x)**8, sin, cos, h, 10, True)\r\n493|    (1 - cos(x)**2)**4\r\n494|    \"\"\"\r\n495|\r\n496|    def _f(rv):\r\n497|        # I'm not sure if this transformation should target all even powers\r\n498|        # or only those expressible as powers of 2. Also, should it only\r\n499|        # make the changes in powers that appear in sums -- making an isolated\r\n500|        # change is not going to allow a simplification as far as I can tell.\r\n501|        if not (rv.is_Pow and rv.base.func == f):\r\n502|            return rv\r\n503|\r\n504|        if (rv.exp < 0) == True:\r\n505|            return rv\r\n506|        if (rv.exp > max) == True:\r\n507|            return rv\r\n508|        if rv.exp == 2:\r\n509|            return h(g(rv.base.args[0])**2)\r\n510|        else:\r\n511|            if rv.exp == 4:\r\n512|                e = 2\r\n513|            elif not pow:\r\n514|                if rv.exp % 2:\r\n515|                    return rv\r\n516|                e = rv.exp//2\r\n517|            else:\r\n518|                p = perfect_power(rv.exp)\r\n519|                if not p:\r\n520|                    return rv\r\n(1695 more lines below)\r\n",
                "extras": {
                    "code": "open_file('/workspace/sympy__sympy__1.5/sympy/simplify/fu.py', 470, 100)"
                }
            }
        ],
        [
            {
                "id": 9,
                "timestamp": "2024-07-17T18:55:42.259714",
                "source": "agent",
                "message": "Running Python code interactively: edit_file_by_replace(\n  '/workspace/sympy__sympy__1.5/sympy/simplify/fu.py',\n  to_replace=\"\"\"    def _f(rv):\n        # I'm not sure if this transformation should target all even powers\n        # or only those expressible as powers of 2. Also, should it only\n        # make the changes in powers that appear in sums -- making an isolated\n        # change is not going to allow a simplification as far as I can tell.\n        if not (rv.is_Pow and rv.base.func == f):\n            return rv\n\n        if (rv.exp < 0) == True:\n            return rv\n        if (rv.exp > max) == True:\n            return rv\n        if rv.exp == 2:\n            return h(g(rv.base.args[0])**2)\n        else:\n            if rv.exp == 4:\n                e = 2\n            elif not pow:\n                if rv.exp % 2:\n                    return rv\n                e = rv.exp//2\n            else:\n                p = perfect_power(rv.exp)\n                if not p:\n                    return rv\"\"\",\n  new_content=\"\"\"    def _f(rv):\n        # I'm not sure if this transformation should target all even powers\n        # or only those expressible as powers of 2. Also, should it only\n        # make the changes in powers that appear in sums -- making an isolated\n        # change is not going to allow a simplification as far as I can tell.\n        if not (rv.is_Pow and rv.base.func == f):\n            return rv\n\n        if rv.exp.is_real:\n            if rv.exp.is_negative:\n                return rv\n            if rv.exp > max:\n                return rv\n        else:\n            return rv  # Return early for complex exponents\n\n        if rv.exp == 2:\n            return h(g(rv.base.args[0])**2)\n        else:\n            if rv.exp == 4:\n                e = 2\n            elif not pow:\n                if rv.exp % 2:\n                    return rv\n                e = rv.exp//2\n            else:\n                p = perfect_power(rv.exp)\n                if not p:\n                    return rv\"\"\"\n)",
                "action": "run_ipython",
                "args": {
                    "code": "edit_file_by_replace(\n  '/workspace/sympy__sympy__1.5/sympy/simplify/fu.py',\n  to_replace=\"\"\"    def _f(rv):\n        # I'm not sure if this transformation should target all even powers\n        # or only those expressible as powers of 2. Also, should it only\n        # make the changes in powers that appear in sums -- making an isolated\n        # change is not going to allow a simplification as far as I can tell.\n        if not (rv.is_Pow and rv.base.func == f):\n            return rv\n\n        if (rv.exp < 0) == True:\n            return rv\n        if (rv.exp > max) == True:\n            return rv\n        if rv.exp == 2:\n            return h(g(rv.base.args[0])**2)\n        else:\n            if rv.exp == 4:\n                e = 2\n            elif not pow:\n                if rv.exp % 2:\n                    return rv\n                e = rv.exp//2\n            else:\n                p = perfect_power(rv.exp)\n                if not p:\n                    return rv\"\"\",\n  new_content=\"\"\"    def _f(rv):\n        # I'm not sure if this transformation should target all even powers\n        # or only those expressible as powers of 2. Also, should it only\n        # make the changes in powers that appear in sums -- making an isolated\n        # change is not going to allow a simplification as far as I can tell.\n        if not (rv.is_Pow and rv.base.func == f):\n            return rv\n\n        if rv.exp.is_real:\n            if rv.exp.is_negative:\n                return rv\n            if rv.exp > max:\n                return rv\n        else:\n            return rv  # Return early for complex exponents\n\n        if rv.exp == 2:\n            return h(g(rv.base.args[0])**2)\n        else:\n            if rv.exp == 4:\n                e = 2\n            elif not pow:\n                if rv.exp % 2:\n                    return rv\n                e = rv.exp//2\n            else:\n                p = perfect_power(rv.exp)\n                if not p:\n                    return rv\"\"\"\n)",
                    "thought": "Thank you for providing the code. The issue is in the `_f` function within `_TR56`. The problem occurs when comparing complex numbers, specifically when `rv.exp` is a complex number like `I`. Let's modify the function to handle this case:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 10,
                "timestamp": "2024-07-17T18:55:43.268466",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 9,
                "observation": "run_ipython",
                "content": "[File: /workspace/sympy__sympy__1.5/sympy/simplify/fu.py (2219 lines total after edit)]\r\n(445 more lines above)\r\n446|    ----------------------------------------------------\r\n447|    cos(a)  0   1/2         sqrt(2)/2   sqrt(3)/2   1\r\n448|    sin(a)  1   sqrt(3)/2   sqrt(2)/2   1/2         0\r\n449|    tan(a)  0   sqt(3)/3    1           sqrt(3)     --\r\n450|\r\n451|    Examples\r\n452|    ========\r\n453|\r\n454|    >>> from sympy.simplify.fu import TR4\r\n455|    >>> from sympy import pi\r\n456|    >>> from sympy import cos, sin, tan, cot\r\n457|    >>> for s in (0, pi/6, pi/4, pi/3, pi/2):\r\n458|    ...    print('%s %s %s %s' % (cos(s), sin(s), tan(s), cot(s)))\r\n459|    ...\r\n460|    1 0 0 zoo\r\n461|    sqrt(3)/2 1/2 sqrt(3)/3 sqrt(3)\r\n462|    sqrt(2)/2 sqrt(2)/2 1 1\r\n463|    1/2 sqrt(3)/2 sqrt(3) sqrt(3)/3\r\n464|    0 1 zoo 0\r\n465|    \"\"\"\r\n466|    # special values at 0, pi/6, pi/4, pi/3, pi/2 already handled\r\n467|    return rv\r\n468|\r\n469|\r\n470|def _TR56(rv, f, g, h, max, pow):\r\n471|    \"\"\"Helper for TR5 and TR6 to replace f**2 with h(g**2)\r\n472|\r\n473|    Options\r\n474|    =======\r\n475|\r\n476|    max :   controls size of exponent that can appear on f\r\n477|            e.g. if max=4 then f**4 will be changed to h(g**2)**2.\r\n478|    pow :   controls whether the exponent must be a perfect power of 2\r\n479|            e.g. if pow=True (and max >= 6) then f**6 will not be changed\r\n480|            but f**8 will be changed to h(g**2)**4\r\n481|\r\n482|    >>> from sympy.simplify.fu import _TR56 as T\r\n483|    >>> from sympy.abc import x\r\n484|    >>> from sympy import sin, cos\r\n485|    >>> h = lambda x: 1 - x\r\n486|    >>> T(sin(x)**3, sin, cos, h, 4, False)\r\n487|    sin(x)**3\r\n488|    >>> T(sin(x)**6, sin, cos, h, 6, False)\r\n489|    (1 - cos(x)**2)**3\r\n490|    >>> T(sin(x)**6, sin, cos, h, 6, True)\r\n491|    sin(x)**6\r\n492|    >>> T(sin(x)**8, sin, cos, h, 10, True)\r\n493|    (1 - cos(x)**2)**4\r\n494|    \"\"\"\r\n495|\r\n496|    def _f(rv):\r\n497|        # I'm not sure if this transformation should target all even powers\r\n498|        # or only those expressible as powers of 2. Also, should it only\r\n499|        # make the changes in powers that appear in sums -- making an isolated\r\n500|        # change is not going to allow a simplification as far as I can tell.\r\n501|        if not (rv.is_Pow and rv.base.func == f):\r\n502|            return rv\r\n503|\r\n504|        if rv.exp.is_real:\r\n505|            if rv.exp.is_negative:\r\n506|                return rv\r\n507|            if rv.exp > max:\r\n508|                return rv\r\n509|        else:\r\n510|            return rv  # Return early for complex exponents\r\n511|\r\n512|        if rv.exp == 2:\r\n513|            return h(g(rv.base.args[0])**2)\r\n514|        else:\r\n515|            if rv.exp == 4:\r\n516|                e = 2\r\n517|            elif not pow:\r\n518|                if rv.exp % 2:\r\n519|                    return rv\r\n520|                e = rv.exp//2\r\n521|            else:\r\n522|                p = perfect_power(rv.exp)\r\n523|                if not p:\r\n524|                    return rv\r\n525|                e = rv.exp//2\r\n526|            return h(g(rv.base.args[0])**2)**e\r\n527|\r\n528|    return bottom_up(rv, _f)\r\n529|\r\n530|\r\n531|def TR5(rv, max=4, pow=False):\r\n532|    \"\"\"Replacement of sin**2 with 1 - cos(x)**2.\r\n533|\r\n534|    See _TR56 docstring for advanced use of ``max`` and ``pow``.\r\n535|\r\n536|    Examples\r\n537|    ========\r\n538|\r\n539|    >>> from sympy.simplify.fu import TR5\r\n540|    >>> from sympy.abc import x\r\n541|    >>> from sympy import sin\r\n542|    >>> TR5(sin(x)**2)\r\n543|    1 - cos(x)**2\r\n544|    >>> TR5(sin(x)**-2)  # unchanged\r\n545|    sin(x)**(-2)\r\n546|    >>> TR5(sin(x)**4)\r\n(1673 more lines below)\r\n[File updated (edited at line 496). Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.]\r\n",
                "extras": {
                    "code": "edit_file_by_replace(\n  '/workspace/sympy__sympy__1.5/sympy/simplify/fu.py',\n  to_replace=\"\"\"    def _f(rv):\n        # I'm not sure if this transformation should target all even powers\n        # or only those expressible as powers of 2. Also, should it only\n        # make the changes in powers that appear in sums -- making an isolated\n        # change is not going to allow a simplification as far as I can tell.\n        if not (rv.is_Pow and rv.base.func == f):\n            return rv\n\n        if (rv.exp < 0) == True:\n            return rv\n        if (rv.exp > max) == True:\n            return rv\n        if rv.exp == 2:\n            return h(g(rv.base.args[0])**2)\n        else:\n            if rv.exp == 4:\n                e = 2\n            elif not pow:\n                if rv.exp % 2:\n                    return rv\n                e = rv.exp//2\n            else:\n                p = perfect_power(rv.exp)\n                if not p:\n                    return rv\"\"\",\n  new_content=\"\"\"    def _f(rv):\n        # I'm not sure if this transformation should target all even powers\n        # or only those expressible as powers of 2. Also, should it only\n        # make the changes in powers that appear in sums -- making an isolated\n        # change is not going to allow a simplification as far as I can tell.\n        if not (rv.is_Pow and rv.base.func == f):\n            return rv\n\n        if rv.exp.is_real:\n            if rv.exp.is_negative:\n                return rv\n            if rv.exp > max:\n                return rv\n        else:\n            return rv  # Return early for complex exponents\n\n        if rv.exp == 2:\n            return h(g(rv.base.args[0])**2)\n        else:\n            if rv.exp == 4:\n                e = 2\n            elif not pow:\n                if rv.exp % 2:\n                    return rv\n                e = rv.exp//2\n            else:\n                p = perfect_power(rv.exp)\n                if not p:\n                    return rv\"\"\"\n)"
                }
            }
        ],
        [
            {
                "id": 11,
                "timestamp": "2024-07-17T18:55:46.251671",
                "source": "agent",
                "message": "Running Python code interactively: create_file('test_simplify.py')",
                "action": "run_ipython",
                "args": {
                    "code": "create_file('test_simplify.py')",
                    "thought": "The changes look good. Now let's test if this modification has resolved the issue. We'll create a test file to reproduce the problem and see if it's fixed.",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 12,
                "timestamp": "2024-07-17T18:55:46.744568",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 11,
                "observation": "run_ipython",
                "content": "[File: /workspace/sympy__sympy__1.5/test_simplify.py (1 lines total)]\r\n(this is the beginning of the file)\r\n1|\r\n(this is the end of the file)\r\n[File test_simplify.py created.]\r\n",
                "extras": {
                    "code": "create_file('test_simplify.py')"
                }
            }
        ],
        [
            {
                "id": 13,
                "timestamp": "2024-07-17T18:55:51.224183",
                "source": "agent",
                "message": "Running Python code interactively: edit_file_by_replace(\n  'test_simplify.py',\n  to_replace=\"\",\n  new_content=\"\"\"from sympy import Symbol, cos, I, simplify\n\ndef test_simplify_complex_exponent():\n    x = Symbol('x')\n    expr = cos(x)**I\n    result = simplify(expr)\n    print(f\"Original expression: {expr}\")\n    print(f\"Simplified expression: {result}\")\n    assert result == expr, \"Simplification should not change the expression for complex exponents\"\n\nif __name__ == \"__main__\":\n    test_simplify_complex_exponent()\n\"\"\"\n)",
                "action": "run_ipython",
                "args": {
                    "code": "edit_file_by_replace(\n  'test_simplify.py',\n  to_replace=\"\",\n  new_content=\"\"\"from sympy import Symbol, cos, I, simplify\n\ndef test_simplify_complex_exponent():\n    x = Symbol('x')\n    expr = cos(x)**I\n    result = simplify(expr)\n    print(f\"Original expression: {expr}\")\n    print(f\"Simplified expression: {result}\")\n    assert result == expr, \"Simplification should not change the expression for complex exponents\"\n\nif __name__ == \"__main__\":\n    test_simplify_complex_exponent()\n\"\"\"\n)",
                    "thought": "Thank you for creating the test file. Now, let's add the test case to reproduce the issue and check if our fix works.",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 14,
                "timestamp": "2024-07-17T18:55:51.872031",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 13,
                "observation": "run_ipython",
                "content": "---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\nCell In[1], line 1\r\n----> 1 edit_file_by_replace(\r\n      2   'test_simplify.py',\r\n      3   to_replace=\"\",\r\n      4   new_content=\"\"\"from sympy import Symbol, cos, I, simplify\r\n      5 \r\n      6 def test_simplify_complex_exponent():\r\n      7     x = Symbol('x')\r\n      8     expr = cos(x)**I\r\n      9     result = simplify(expr)\r\n     10     print(f\"Original expression: {expr}\")\r\n     11     print(f\"Simplified expression: {result}\")\r\n     12     assert result == expr, \"Simplification should not change the expression for complex exponents\"\r\n     13 \r\n     14 if __name__ == \"__main__\":\r\n     15     test_simplify_complex_exponent()\r\n     16 \"\"\"\r\n     17 )\r\n\r\nFile /opendevin/plugins/agent_skills/agentskills.py:71, in update_pwd_decorator.<locals>.wrapper(*args, **kwargs)\r\n     69     os.chdir(jupyter_pwd)\r\n     70 try:\r\n---> 71     return func(*args, **kwargs)\r\n     72 finally:\r\n     73     os.chdir(old_pwd)\r\n\r\nFile /opendevin/plugins/agent_skills/agentskills.py:651, in edit_file_by_replace(file_name, to_replace, new_content)\r\n    649 # FIXME: support replacing *all* occurrences\r\n    650 if to_replace.strip() == '':\r\n--> 651     raise ValueError('`to_replace` must not be empty.')\r\n    653 # search for `to_replace` in the file\r\n    654 # if found, replace it with `new_content`\r\n    655 # if not found, perform a fuzzy search to find the closest match and replace it with `new_content`\r\n    656 with open(file_name, 'r') as file:\r\n\r\nValueError: `to_replace` must not be empty.",
                "extras": {
                    "code": "edit_file_by_replace(\n  'test_simplify.py',\n  to_replace=\"\",\n  new_content=\"\"\"from sympy import Symbol, cos, I, simplify\n\ndef test_simplify_complex_exponent():\n    x = Symbol('x')\n    expr = cos(x)**I\n    result = simplify(expr)\n    print(f\"Original expression: {expr}\")\n    print(f\"Simplified expression: {result}\")\n    assert result == expr, \"Simplification should not change the expression for complex exponents\"\n\nif __name__ == \"__main__\":\n    test_simplify_complex_exponent()\n\"\"\"\n)"
                }
            }
        ],
        [
            {
                "id": 15,
                "timestamp": "2024-07-17T18:55:55.932953",
                "source": "agent",
                "message": "Running Python code interactively: append_file(\n  'test_simplify.py',\n  \"\"\"from sympy import Symbol, cos, I, simplify\n\ndef test_simplify_complex_exponent():\n    x = Symbol('x')\n    expr = cos(x)**I\n    result = simplify(expr)\n    print(f\"Original expression: {expr}\")\n    print(f\"Simplified expression: {result}\")\n    assert result == expr, \"Simplification should not change the expression for complex exponents\"\n\nif __name__ == \"__main__\":\n    test_simplify_complex_exponent()\n\"\"\"\n)",
                "action": "run_ipython",
                "args": {
                    "code": "append_file(\n  'test_simplify.py',\n  \"\"\"from sympy import Symbol, cos, I, simplify\n\ndef test_simplify_complex_exponent():\n    x = Symbol('x')\n    expr = cos(x)**I\n    result = simplify(expr)\n    print(f\"Original expression: {expr}\")\n    print(f\"Simplified expression: {result}\")\n    assert result == expr, \"Simplification should not change the expression for complex exponents\"\n\nif __name__ == \"__main__\":\n    test_simplify_complex_exponent()\n\"\"\"\n)",
                    "thought": "I apologize for the mistake. Since the file is empty, we don't need to use `edit_file_by_replace`. Instead, we can use `append_file` to add the content to the test file. Let's try again:",
                    "is_confirmed": "confirmed",
                    "kernel_init_code": "from agentskills import *"
                }
            },
            {
                "id": 16,
                "timestamp": "2024-07-17T18:55:56.509088",
                "source": "agent",
                "message": "Code executed in IPython cell.",
                "cause": 15,
                "observation": "run_ipython",
                "content": "[File: /workspace/sympy__sympy__1.5/test_simplify.py (12 lines total after edit)]\r\n(this is the beginning of the file)\r\n1|from sympy import Symbol, cos, I, simplify\r\n2|\r\n3|def test_simplify_complex_exponent():\r\n4|    x = Symbol('x')\r\n5|    expr = cos(x)**I\r\n6|    result = simplify(expr)\r\n7|    print(f\"Original expression: {expr}\")\r\n8|    print(f\"Simplified expression: {result}\")\r\n9|    assert result == expr, \"Simplification should not change the expression for complex exponents\"\r\n10|\r\n11|if __name__ == \"__main__\":\r\n12|    test_simplify_complex_exponent()\r\n(this is the end of the file)\r\n[File updated (edited at line 1). Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.]\r\n",
                "extras": {
                    "code": "append_file(\n  'test_simplify.py',\n  \"\"\"from sympy import Symbol, cos, I, simplify\n\ndef test_simplify_complex_exponent():\n    x = Symbol('x')\n    expr = cos(x)**I\n    result = simplify(expr)\n    print(f\"Original expression: {expr}\")\n    print(f\"Simplified expression: {result}\")\n    assert result == expr, \"Simplification should not change the expression for complex exponents\"\n\nif __name__ == \"__main__\":\n    test_simplify_complex_exponent()\n\"\"\"\n)"
                }
            }
        ],
        [
            {
                "id": 17,
                "timestamp": "2024-07-17T18:55:59.141934",
                "source": "agent",
                "message": "Running command: python3 test_simplify.py",
                "action": "run",
                "args": {
                    "command": "python3 test_simplify.py",
                    "thought": "The test file looks good. Now let's run the test to see if our fix has resolved the issue.",
                    "is_confirmed": "confirmed"
                }
            },
            {
                "id": 18,
                "timestamp": "2024-07-17T18:56:00.826179",
                "source": "agent",
                "message": "Command `python3 test_simplify.py` executed with exit code 0.",
                "cause": 17,
                "observation": "run",
                "content": "Original expression: cos(x)**I\r\nSimplified expression: cos(x)**I",
                "extras": {
                    "command_id": -1,
                    "command": "python3 test_simplify.py",
                    "exit_code": 0
                }
            }
        ],
        [
            {
                "id": 19,
                "timestamp": "2024-07-17T18:56:07.012702",
                "source": "agent",
                "message": "Great news! The test has passed successfully. Let's break down what happened:\n\n1. The original expression `cos(x)**I` was created.\n2. The `simplify` function was called on this expression.\n3. The simplified expression is identical to the original expression.\n4. No error was raised during the simplification process.\n\nThis means that our modification to the `_TR56` function in `fu.py` has successfully resolved the issue. The function now correctly handles complex exponents by returning the expression unchanged when the exponent is not real.\n\nTo summarize the fix:\n1. We modified the `_f` function within `_TR56` in `/workspace/sympy__sympy__1.5/sympy/simplify/fu.py`.\n2. We added a check for complex exponents and return the expression unchanged in such cases.\n3. We created a test case to verify the fix, which passed successfully.\n\nThe original issue of \"Invalid comparison of complex I\" has been resolved, and the `simplify` function now correctly handles expressions with complex exponents like `cos(x)**I`.\n\nSince we have successfully fixed the issue and verified it with a test, we can conclude this task.",
                "action": "finish",
                "args": {
                    "outputs": {},
                    "thought": "Great news! The test has passed successfully. Let's break down what happened:\n\n1. The original expression `cos(x)**I` was created.\n2. The `simplify` function was called on this expression.\n3. The simplified expression is identical to the original expression.\n4. No error was raised during the simplification process.\n\nThis means that our modification to the `_TR56` function in `fu.py` has successfully resolved the issue. The function now correctly handles complex exponents by returning the expression unchanged when the exponent is not real.\n\nTo summarize the fix:\n1. We modified the `_f` function within `_TR56` in `/workspace/sympy__sympy__1.5/sympy/simplify/fu.py`.\n2. We added a check for complex exponents and return the expression unchanged in such cases.\n3. We created a test case to verify the fix, which passed successfully.\n\nThe original issue of \"Invalid comparison of complex I\" has been resolved, and the `simplify` function now correctly handles expressions with complex exponents like `cos(x)**I`.\n\nSince we have successfully fixed the issue and verified it with a test, we can conclude this task."
                }
            },
            {
                "message": "No observation",
                "observation": "null",
                "content": "",
                "extras": {}
            }
        ]
    ],
    "info": {
        "submission": "diff --git a/.backup.test_simplify.py b/.backup.test_simplify.py\r\nnew file mode 100644\r\nindex 0000000000..8b13789179\r\n--- /dev/null\r\n+++ b/.backup.test_simplify.py\r\n@@ -0,0 +1 @@\r\n+\r\ndiff --git a/sympy/simplify/.backup.fu.py b/sympy/simplify/.backup.fu.py\r\nnew file mode 100644\r\nindex 0000000000..ad1130ef96\r\n--- /dev/null\r\n+++ b/sympy/simplify/.backup.fu.py\r\n@@ -0,0 +1,2215 @@\r\n+\"\"\"\r\n+Implementation of the trigsimp algorithm by Fu et al.\r\n+\r\n+The idea behind the ``fu`` algorithm is to use a sequence of rules, applied\r\n+in what is heuristically known to be a smart order, to select a simpler\r\n+expression that is equivalent to the input.\r\n+\r\n+There are transform rules in which a single rule is applied to the\r\n+expression tree. The following are just mnemonic in nature; see the\r\n+docstrings for examples.\r\n+\r\n+    TR0 - simplify expression\r\n+    TR1 - sec-csc to cos-sin\r\n+    TR2 - tan-cot to sin-cos ratio\r\n+    TR2i - sin-cos ratio to tan\r\n+    TR3 - angle canonicalization\r\n+    TR4 - functions at special angles\r\n+    TR5 - powers of sin to powers of cos\r\n+    TR6 - powers of cos to powers of sin\r\n+    TR7 - reduce cos power (increase angle)\r\n+    TR8 - expand products of sin-cos to sums\r\n+    TR9 - contract sums of sin-cos to products\r\n+    TR10 - separate sin-cos arguments\r\n+    TR10i - collect sin-cos arguments\r\n+    TR11 - reduce double angles\r\n+    TR12 - separate tan arguments\r\n+    TR12i - collect tan arguments\r\n+    TR13 - expand product of tan-cot\r\n+    TRmorrie - prod(cos(x*2**i), (i, 0, k - 1)) -> sin(2**k*x)/(2**k*sin(x))\r\n+    TR14 - factored powers of sin or cos to cos or sin power\r\n+    TR15 - negative powers of sin to cot power\r\n+    TR16 - negative powers of cos to tan power\r\n+    TR22 - tan-cot powers to negative powers of sec-csc functions\r\n+    TR111 - negative sin-cos-tan powers to csc-sec-cot\r\n+\r\n+There are 4 combination transforms (CTR1 - CTR4) in which a sequence of\r\n+transformations are applied and the simplest expression is selected from\r\n+a few options.\r\n+\r\n+Finally, there are the 2 rule lists (RL1 and RL2), which apply a\r\n+sequence of transformations and combined transformations, and the ``fu``\r\n+algorithm itself, which applies rules and rule lists and selects the\r\n+best expressions. There is also a function ``L`` which counts the number\r\n+of trigonometric functions that appear in the expression.\r\n+\r\n+Other than TR0, re-writing of expressions is not done by the transformations.\r\n+e.g. TR10i finds pairs of terms in a sum that are in the form like\r\n+``cos(x)*cos(y) + sin(x)*sin(y)``. Such expression are targeted in a bottom-up\r\n+traversal of the expression, but no manipulation to make them appear is\r\n+attempted. For example,\r\n+\r\n+    Set-up for examples below:\r\n+\r\n+    >>> from sympy.simplify.fu import fu, L, TR9, TR10i, TR11\r\n+    >>> from sympy import factor, sin, cos, powsimp\r\n+    >>> from sympy.abc import x, y, z, a\r\n+    >>> from time import time\r\n+\r\n+>>> eq = cos(x + y)/cos(x)\r\n+>>> TR10i(eq.expand(trig=True))\r\n+-sin(x)*sin(y)/cos(x) + cos(y)\r\n+\r\n+If the expression is put in \"normal\" form (with a common denominator) then\r\n+the transformation is successful:\r\n+\r\n+>>> TR10i(_.normal())\r\n+cos(x + y)/cos(x)\r\n+\r\n+TR11's behavior is similar. It rewrites double angles as smaller angles but\r\n+doesn't do any simplification of the result.\r\n+\r\n+>>> TR11(sin(2)**a*cos(1)**(-a), 1)\r\n+(2*sin(1)*cos(1))**a*cos(1)**(-a)\r\n+>>> powsimp(_)\r\n+(2*sin(1))**a\r\n+\r\n+The temptation is to try make these TR rules \"smarter\" but that should really\r\n+be done at a higher level; the TR rules should try maintain the \"do one thing\r\n+well\" principle.  There is one exception, however. In TR10i and TR9 terms are\r\n+recognized even when they are each multiplied by a common factor:\r\n+\r\n+>>> fu(a*cos(x)*cos(y) + a*sin(x)*sin(y))\r\n+a*cos(x - y)\r\n+\r\n+Factoring with ``factor_terms`` is used but it it \"JIT\"-like, being delayed\r\n+until it is deemed necessary. Furthermore, if the factoring does not\r\n+help with the simplification, it is not retained, so\r\n+``a*cos(x)*cos(y) + a*sin(x)*sin(z)`` does not become the factored\r\n+(but unsimplified in the trigonometric sense) expression:\r\n+\r\n+>>> fu(a*cos(x)*cos(y) + a*sin(x)*sin(z))\r\n+a*sin(x)*sin(z) + a*cos(x)*cos(y)\r\n+\r\n+In some cases factoring might be a good idea, but the user is left\r\n+to make that decision. For example:\r\n+\r\n+>>> expr=((15*sin(2*x) + 19*sin(x + y) + 17*sin(x + z) + 19*cos(x - z) +\r\n+... 25)*(20*sin(2*x) + 15*sin(x + y) + sin(y + z) + 14*cos(x - z) +\r\n+... 14*cos(y - z))*(9*sin(2*y) + 12*sin(y + z) + 10*cos(x - y) + 2*cos(y -\r\n+... z) + 18)).expand(trig=True).expand()\r\n+\r\n+In the expanded state, there are nearly 1000 trig functions:\r\n+\r\n+>>> L(expr)\r\n+932\r\n+\r\n+If the expression where factored first, this would take time but the\r\n+resulting expression would be transformed very quickly:\r\n+\r\n+>>> def clock(f, n=2):\r\n+...    t=time(); f(); return round(time()-t, n)\r\n+...\r\n+>>> clock(lambda: factor(expr))  # doctest: +SKIP\r\n+0.86\r\n+>>> clock(lambda: TR10i(expr), 3)  # doctest: +SKIP\r\n+0.016\r\n+\r\n+If the unexpanded expression is used, the transformation takes longer but\r\n+not as long as it took to factor it and then transform it:\r\n+\r\n+>>> clock(lambda: TR10i(expr), 2)  # doctest: +SKIP\r\n+0.28\r\n+\r\n+So neither expansion nor factoring is used in ``TR10i``: if the\r\n+expression is already factored (or partially factored) then expansion\r\n+with ``trig=True`` would destroy what is already known and take\r\n+longer; if the expression is expanded, factoring may take longer than\r\n+simply applying the transformation itself.\r\n+\r\n+Although the algorithms should be canonical, always giving the same\r\n+result, they may not yield the best result. This, in general, is\r\n+the nature of simplification where searching all possible transformation\r\n+paths is very expensive. Here is a simple example. There are 6 terms\r\n+in the following sum:\r\n+\r\n+>>> expr = (sin(x)**2*cos(y)*cos(z) + sin(x)*sin(y)*cos(x)*cos(z) +\r\n+... sin(x)*sin(z)*cos(x)*cos(y) + sin(y)*sin(z)*cos(x)**2 + sin(y)*sin(z) +\r\n+... cos(y)*cos(z))\r\n+>>> args = expr.args\r\n+\r\n+Serendipitously, fu gives the best result:\r\n+\r\n+>>> fu(expr)\r\n+3*cos(y - z)/2 - cos(2*x + y + z)/2\r\n+\r\n+But if different terms were combined, a less-optimal result might be\r\n+obtained, requiring some additional work to get better simplification,\r\n+but still less than optimal. The following shows an alternative form\r\n+of ``expr`` that resists optimal simplification once a given step\r\n+is taken since it leads to a dead end:\r\n+\r\n+>>> TR9(-cos(x)**2*cos(y + z) + 3*cos(y - z)/2 +\r\n+...     cos(y + z)/2 + cos(-2*x + y + z)/4 - cos(2*x + y + z)/4)\r\n+sin(2*x)*sin(y + z)/2 - cos(x)**2*cos(y + z) + 3*cos(y - z)/2 + cos(y + z)/2\r\n+\r\n+Here is a smaller expression that exhibits the same behavior:\r\n+\r\n+>>> a = sin(x)*sin(z)*cos(x)*cos(y) + sin(x)*sin(y)*cos(x)*cos(z)\r\n+>>> TR10i(a)\r\n+sin(x)*sin(y + z)*cos(x)\r\n+>>> newa = _\r\n+>>> TR10i(expr - a)  # this combines two more of the remaining terms\r\n+sin(x)**2*cos(y)*cos(z) + sin(y)*sin(z)*cos(x)**2 + cos(y - z)\r\n+>>> TR10i(_ + newa) == _ + newa  # but now there is no more simplification\r\n+True\r\n+\r\n+Without getting lucky or trying all possible pairings of arguments, the\r\n+final result may be less than optimal and impossible to find without\r\n+better heuristics or brute force trial of all possibilities.\r\n+\r\n+Notes\r\n+=====\r\n+\r\n+This work was started by Dimitar Vlahovski at the Technological School\r\n+\"Electronic systems\" (30.11.2011).\r\n+\r\n+References\r\n+==========\r\n+\r\n+Fu, Hongguang, Xiuqin Zhong, and Zhenbing Zeng. \"Automated and readable\r\n+simplification of trigonometric expressions.\" Mathematical and computer\r\n+modelling 44.11 (2006): 1169-1177.\r\n+http://rfdz.ph-noe.ac.at/fileadmin/Mathematik_Uploads/ACDCA/DESTIME2006/DES_contribs/Fu/simplification.pdf\r\n+\r\n+http://www.sosmath.com/trig/Trig5/trig5/pdf/pdf.html gives a formula sheet.\r\n+\r\n+\"\"\"\r\n+\r\n+from __future__ import print_function, division\r\n+\r\n+from collections import defaultdict\r\n+\r\n+from sympy.core.add import Add\r\n+from sympy.core.basic import S\r\n+from sympy.core.compatibility import ordered, range\r\n+from sympy.core.expr import Expr\r\n+from sympy.core.exprtools import Factors, gcd_terms, factor_terms\r\n+from sympy.core.function import expand_mul\r\n+from sympy.core.mul import Mul\r\n+from sympy.core.numbers import pi, I\r\n+from sympy.core.power import Pow\r\n+from sympy.core.symbol import Dummy\r\n+from sympy.core.sympify import sympify\r\n+from sympy.functions.combinatorial.factorials import binomial\r\n+from sympy.functions.elementary.hyperbolic import (\r\n+    cosh, sinh, tanh, coth, sech, csch, HyperbolicFunction)\r\n+from sympy.functions.elementary.trigonometric import (\r\n+    cos, sin, tan, cot, sec, csc, sqrt, TrigonometricFunction)\r\n+from sympy.ntheory.factor_ import perfect_power\r\n+from sympy.polys.polytools import factor\r\n+from sympy.simplify.simplify import bottom_up\r\n+from sympy.strategies.tree import greedy\r\n+from sympy.strategies.core import identity, debug\r\n+\r\n+from sympy import SYMPY_DEBUG\r\n+\r\n+\r\n+# ================== Fu-like tools ===========================\r\n+\r\n+\r\n+def TR0(rv):\r\n+    \"\"\"Simplification of rational polynomials, trying to simplify\r\n+    the expression, e.g. combine things like 3*x + 2*x, etc....\r\n+    \"\"\"\r\n+    # although it would be nice to use cancel, it doesn't work\r\n+    # with noncommutatives\r\n+    return rv.normal().factor().expand()\r\n+\r\n+\r\n+def TR1(rv):\r\n+    \"\"\"Replace sec, csc with 1/cos, 1/sin\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR1, sec, csc\r\n+    >>> from sympy.abc import x\r\n+    >>> TR1(2*csc(x) + sec(x))\r\n+    1/cos(x) + 2/sin(x)\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if isinstance(rv, sec):\r\n+            a = rv.args[0]\r\n+            return S.One/cos(a)\r\n+        elif isinstance(rv, csc):\r\n+            a = rv.args[0]\r\n+            return S.One/sin(a)\r\n+        return rv\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TR2(rv):\r\n+    \"\"\"Replace tan and cot with sin/cos and cos/sin\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR2\r\n+    >>> from sympy.abc import x\r\n+    >>> from sympy import tan, cot, sin, cos\r\n+    >>> TR2(tan(x))\r\n+    sin(x)/cos(x)\r\n+    >>> TR2(cot(x))\r\n+    cos(x)/sin(x)\r\n+    >>> TR2(tan(tan(x) - sin(x)/cos(x)))\r\n+    0\r\n+\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if isinstance(rv, tan):\r\n+            a = rv.args[0]\r\n+            return sin(a)/cos(a)\r\n+        elif isinstance(rv, cot):\r\n+            a = rv.args[0]\r\n+            return cos(a)/sin(a)\r\n+        return rv\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TR2i(rv, half=False):\r\n+    \"\"\"Converts ratios involving sin and cos as follows::\r\n+        sin(x)/cos(x) -> tan(x)\r\n+        sin(x)/(cos(x) + 1) -> tan(x/2) if half=True\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR2i\r\n+    >>> from sympy.abc import x, a\r\n+    >>> from sympy import sin, cos\r\n+    >>> TR2i(sin(x)/cos(x))\r\n+    tan(x)\r\n+\r\n+    Powers of the numerator and denominator are also recognized\r\n+\r\n+    >>> TR2i(sin(x)**2/(cos(x) + 1)**2, half=True)\r\n+    tan(x/2)**2\r\n+\r\n+    The transformation does not take place unless assumptions allow\r\n+    (i.e. the base must be positive or the exponent must be an integer\r\n+    for both numerator and denominator)\r\n+\r\n+    >>> TR2i(sin(x)**a/(cos(x) + 1)**a)\r\n+    (cos(x) + 1)**(-a)*sin(x)**a\r\n+\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if not rv.is_Mul:\r\n+            return rv\r\n+\r\n+        n, d = rv.as_numer_denom()\r\n+        if n.is_Atom or d.is_Atom:\r\n+            return rv\r\n+\r\n+        def ok(k, e):\r\n+            # initial filtering of factors\r\n+            return (\r\n+                (e.is_integer or k.is_positive) and (\r\n+                k.func in (sin, cos) or (half and\r\n+                k.is_Add and\r\n+                len(k.args) >= 2 and\r\n+                any(any(isinstance(ai, cos) or ai.is_Pow and ai.base is cos\r\n+                for ai in Mul.make_args(a)) for a in k.args))))\r\n+\r\n+        n = n.as_powers_dict()\r\n+        ndone = [(k, n.pop(k)) for k in list(n.keys()) if not ok(k, n[k])]\r\n+        if not n:\r\n+            return rv\r\n+\r\n+        d = d.as_powers_dict()\r\n+        ddone = [(k, d.pop(k)) for k in list(d.keys()) if not ok(k, d[k])]\r\n+        if not d:\r\n+            return rv\r\n+\r\n+        # factoring if necessary\r\n+\r\n+        def factorize(d, ddone):\r\n+            newk = []\r\n+            for k in d:\r\n+                if k.is_Add and len(k.args) > 1:\r\n+                    knew = factor(k) if half else factor_terms(k)\r\n+                    if knew != k:\r\n+                        newk.append((k, knew))\r\n+            if newk:\r\n+                for i, (k, knew) in enumerate(newk):\r\n+                    del d[k]\r\n+                    newk[i] = knew\r\n+                newk = Mul(*newk).as_powers_dict()\r\n+                for k in newk:\r\n+                    v = d[k] + newk[k]\r\n+                    if ok(k, v):\r\n+                        d[k] = v\r\n+                    else:\r\n+                        ddone.append((k, v))\r\n+                del newk\r\n+        factorize(n, ndone)\r\n+        factorize(d, ddone)\r\n+\r\n+        # joining\r\n+        t = []\r\n+        for k in n:\r\n+            if isinstance(k, sin):\r\n+                a = cos(k.args[0], evaluate=False)\r\n+                if a in d and d[a] == n[k]:\r\n+                    t.append(tan(k.args[0])**n[k])\r\n+                    n[k] = d[a] = None\r\n+                elif half:\r\n+                    a1 = 1 + a\r\n+                    if a1 in d and d[a1] == n[k]:\r\n+                        t.append((tan(k.args[0]/2))**n[k])\r\n+                        n[k] = d[a1] = None\r\n+            elif isinstance(k, cos):\r\n+                a = sin(k.args[0], evaluate=False)\r\n+                if a in d and d[a] == n[k]:\r\n+                    t.append(tan(k.args[0])**-n[k])\r\n+                    n[k] = d[a] = None\r\n+            elif half and k.is_Add and k.args[0] is S.One and \\\r\n+                    isinstance(k.args[1], cos):\r\n+                a = sin(k.args[1].args[0], evaluate=False)\r\n+                if a in d and d[a] == n[k] and (d[a].is_integer or \\\r\n+                        a.is_positive):\r\n+                    t.append(tan(a.args[0]/2)**-n[k])\r\n+                    n[k] = d[a] = None\r\n+\r\n+        if t:\r\n+            rv = Mul(*(t + [b**e for b, e in n.items() if e]))/\\\r\n+                Mul(*[b**e for b, e in d.items() if e])\r\n+            rv *= Mul(*[b**e for b, e in ndone])/Mul(*[b**e for b, e in ddone])\r\n+\r\n+        return rv\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TR3(rv):\r\n+    \"\"\"Induced formula: example sin(-a) = -sin(a)\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR3\r\n+    >>> from sympy.abc import x, y\r\n+    >>> from sympy import pi\r\n+    >>> from sympy import cos\r\n+    >>> TR3(cos(y - x*(y - x)))\r\n+    cos(x*(x - y) + y)\r\n+    >>> cos(pi/2 + x)\r\n+    -sin(x)\r\n+    >>> cos(30*pi/2 + x)\r\n+    -cos(x)\r\n+\r\n+    \"\"\"\r\n+    from sympy.simplify.simplify import signsimp\r\n+\r\n+    # Negative argument (already automatic for funcs like sin(-x) -> -sin(x)\r\n+    # but more complicated expressions can use it, too). Also, trig angles\r\n+    # between pi/4 and pi/2 are not reduced to an angle between 0 and pi/4.\r\n+    # The following are automatically handled:\r\n+    #   Argument of type: pi/2 +/- angle\r\n+    #   Argument of type: pi +/- angle\r\n+    #   Argument of type : 2k*pi +/- angle\r\n+\r\n+    def f(rv):\r\n+        if not isinstance(rv, TrigonometricFunction):\r\n+            return rv\r\n+        rv = rv.func(signsimp(rv.args[0]))\r\n+        if not isinstance(rv, TrigonometricFunction):\r\n+            return rv\r\n+        if (rv.args[0] - S.Pi/4).is_positive is (S.Pi/2 - rv.args[0]).is_positive is True:\r\n+            fmap = {cos: sin, sin: cos, tan: cot, cot: tan, sec: csc, csc: sec}\r\n+            rv = fmap[rv.func](S.Pi/2 - rv.args[0])\r\n+        return rv\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TR4(rv):\r\n+    \"\"\"Identify values of special angles.\r\n+\r\n+        a=  0   pi/6        pi/4        pi/3        pi/2\r\n+    ----------------------------------------------------\r\n+    cos(a)  0   1/2         sqrt(2)/2   sqrt(3)/2   1\r\n+    sin(a)  1   sqrt(3)/2   sqrt(2)/2   1/2         0\r\n+    tan(a)  0   sqt(3)/3    1           sqrt(3)     --\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR4\r\n+    >>> from sympy import pi\r\n+    >>> from sympy import cos, sin, tan, cot\r\n+    >>> for s in (0, pi/6, pi/4, pi/3, pi/2):\r\n+    ...    print('%s %s %s %s' % (cos(s), sin(s), tan(s), cot(s)))\r\n+    ...\r\n+    1 0 0 zoo\r\n+    sqrt(3)/2 1/2 sqrt(3)/3 sqrt(3)\r\n+    sqrt(2)/2 sqrt(2)/2 1 1\r\n+    1/2 sqrt(3)/2 sqrt(3) sqrt(3)/3\r\n+    0 1 zoo 0\r\n+    \"\"\"\r\n+    # special values at 0, pi/6, pi/4, pi/3, pi/2 already handled\r\n+    return rv\r\n+\r\n+\r\n+def _TR56(rv, f, g, h, max, pow):\r\n+    \"\"\"Helper for TR5 and TR6 to replace f**2 with h(g**2)\r\n+\r\n+    Options\r\n+    =======\r\n+\r\n+    max :   controls size of exponent that can appear on f\r\n+            e.g. if max=4 then f**4 will be changed to h(g**2)**2.\r\n+    pow :   controls whether the exponent must be a perfect power of 2\r\n+            e.g. if pow=True (and max >= 6) then f**6 will not be changed\r\n+            but f**8 will be changed to h(g**2)**4\r\n+\r\n+    >>> from sympy.simplify.fu import _TR56 as T\r\n+    >>> from sympy.abc import x\r\n+    >>> from sympy import sin, cos\r\n+    >>> h = lambda x: 1 - x\r\n+    >>> T(sin(x)**3, sin, cos, h, 4, False)\r\n+    sin(x)**3\r\n+    >>> T(sin(x)**6, sin, cos, h, 6, False)\r\n+    (1 - cos(x)**2)**3\r\n+    >>> T(sin(x)**6, sin, cos, h, 6, True)\r\n+    sin(x)**6\r\n+    >>> T(sin(x)**8, sin, cos, h, 10, True)\r\n+    (1 - cos(x)**2)**4\r\n+    \"\"\"\r\n+\r\n+    def _f(rv):\r\n+        # I'm not sure if this transformation should target all even powers\r\n+        # or only those expressible as powers of 2. Also, should it only\r\n+        # make the changes in powers that appear in sums -- making an isolated\r\n+        # change is not going to allow a simplification as far as I can tell.\r\n+        if not (rv.is_Pow and rv.base.func == f):\r\n+            return rv\r\n+\r\n+        if (rv.exp < 0) == True:\r\n+            return rv\r\n+        if (rv.exp > max) == True:\r\n+            return rv\r\n+        if rv.exp == 2:\r\n+            return h(g(rv.base.args[0])**2)\r\n+        else:\r\n+            if rv.exp == 4:\r\n+                e = 2\r\n+            elif not pow:\r\n+                if rv.exp % 2:\r\n+                    return rv\r\n+                e = rv.exp//2\r\n+            else:\r\n+                p = perfect_power(rv.exp)\r\n+                if not p:\r\n+                    return rv\r\n+                e = rv.exp//2\r\n+            return h(g(rv.base.args[0])**2)**e\r\n+\r\n+    return bottom_up(rv, _f)\r\n+\r\n+\r\n+def TR5(rv, max=4, pow=False):\r\n+    \"\"\"Replacement of sin**2 with 1 - cos(x)**2.\r\n+\r\n+    See _TR56 docstring for advanced use of ``max`` and ``pow``.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR5\r\n+    >>> from sympy.abc import x\r\n+    >>> from sympy import sin\r\n+    >>> TR5(sin(x)**2)\r\n+    1 - cos(x)**2\r\n+    >>> TR5(sin(x)**-2)  # unchanged\r\n+    sin(x)**(-2)\r\n+    >>> TR5(sin(x)**4)\r\n+    (1 - cos(x)**2)**2\r\n+    \"\"\"\r\n+    return _TR56(rv, sin, cos, lambda x: 1 - x, max=max, pow=pow)\r\n+\r\n+\r\n+def TR6(rv, max=4, pow=False):\r\n+    \"\"\"Replacement of cos**2 with 1 - sin(x)**2.\r\n+\r\n+    See _TR56 docstring for advanced use of ``max`` and ``pow``.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR6\r\n+    >>> from sympy.abc import x\r\n+    >>> from sympy import cos\r\n+    >>> TR6(cos(x)**2)\r\n+    1 - sin(x)**2\r\n+    >>> TR6(cos(x)**-2)  #unchanged\r\n+    cos(x)**(-2)\r\n+    >>> TR6(cos(x)**4)\r\n+    (1 - sin(x)**2)**2\r\n+    \"\"\"\r\n+    return _TR56(rv, cos, sin, lambda x: 1 - x, max=max, pow=pow)\r\n+\r\n+\r\n+def TR7(rv):\r\n+    \"\"\"Lowering the degree of cos(x)**2\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR7\r\n+    >>> from sympy.abc import x\r\n+    >>> from sympy import cos\r\n+    >>> TR7(cos(x)**2)\r\n+    cos(2*x)/2 + 1/2\r\n+    >>> TR7(cos(x)**2 + 1)\r\n+    cos(2*x)/2 + 3/2\r\n+\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if not (rv.is_Pow and rv.base.func == cos and rv.exp == 2):\r\n+            return rv\r\n+        return (1 + cos(2*rv.base.args[0]))/2\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TR8(rv, first=True):\r\n+    \"\"\"Converting products of ``cos`` and/or ``sin`` to a sum or\r\n+    difference of ``cos`` and or ``sin`` terms.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR8, TR7\r\n+    >>> from sympy import cos, sin\r\n+    >>> TR8(cos(2)*cos(3))\r\n+    cos(5)/2 + cos(1)/2\r\n+    >>> TR8(cos(2)*sin(3))\r\n+    sin(5)/2 + sin(1)/2\r\n+    >>> TR8(sin(2)*sin(3))\r\n+    -cos(5)/2 + cos(1)/2\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if not (\r\n+            rv.is_Mul or\r\n+            rv.is_Pow and\r\n+            rv.base.func in (cos, sin) and\r\n+            (rv.exp.is_integer or rv.base.is_positive)):\r\n+            return rv\r\n+\r\n+        if first:\r\n+            n, d = [expand_mul(i) for i in rv.as_numer_denom()]\r\n+            newn = TR8(n, first=False)\r\n+            newd = TR8(d, first=False)\r\n+            if newn != n or newd != d:\r\n+                rv = gcd_terms(newn/newd)\r\n+                if rv.is_Mul and rv.args[0].is_Rational and \\\r\n+                        len(rv.args) == 2 and rv.args[1].is_Add:\r\n+                    rv = Mul(*rv.as_coeff_Mul())\r\n+            return rv\r\n+\r\n+        args = {cos: [], sin: [], None: []}\r\n+        for a in ordered(Mul.make_args(rv)):\r\n+            if a.func in (cos, sin):\r\n+                args[a.func].append(a.args[0])\r\n+            elif (a.is_Pow and a.exp.is_Integer and a.exp > 0 and \\\r\n+                    a.base.func in (cos, sin)):\r\n+                # XXX this is ok but pathological expression could be handled\r\n+                # more efficiently as in TRmorrie\r\n+                args[a.base.func].extend([a.base.args[0]]*a.exp)\r\n+            else:\r\n+                args[None].append(a)\r\n+        c = args[cos]\r\n+        s = args[sin]\r\n+        if not (c and s or len(c) > 1 or len(s) > 1):\r\n+            return rv\r\n+\r\n+        args = args[None]\r\n+        n = min(len(c), len(s))\r\n+        for i in range(n):\r\n+            a1 = s.pop()\r\n+            a2 = c.pop()\r\n+            args.append((sin(a1 + a2) + sin(a1 - a2))/2)\r\n+        while len(c) > 1:\r\n+            a1 = c.pop()\r\n+            a2 = c.pop()\r\n+            args.append((cos(a1 + a2) + cos(a1 - a2))/2)\r\n+        if c:\r\n+            args.append(cos(c.pop()))\r\n+        while len(s) > 1:\r\n+            a1 = s.pop()\r\n+            a2 = s.pop()\r\n+            args.append((-cos(a1 + a2) + cos(a1 - a2))/2)\r\n+        if s:\r\n+            args.append(sin(s.pop()))\r\n+        return TR8(expand_mul(Mul(*args)))\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TR9(rv):\r\n+    \"\"\"Sum of ``cos`` or ``sin`` terms as a product of ``cos`` or ``sin``.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR9\r\n+    >>> from sympy import cos, sin\r\n+    >>> TR9(cos(1) + cos(2))\r\n+    2*cos(1/2)*cos(3/2)\r\n+    >>> TR9(cos(1) + 2*sin(1) + 2*sin(2))\r\n+    cos(1) + 4*sin(3/2)*cos(1/2)\r\n+\r\n+    If no change is made by TR9, no re-arrangement of the\r\n+    expression will be made. For example, though factoring\r\n+    of common term is attempted, if the factored expression\r\n+    wasn't changed, the original expression will be returned:\r\n+\r\n+    >>> TR9(cos(3) + cos(3)*cos(2))\r\n+    cos(3) + cos(2)*cos(3)\r\n+\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if not rv.is_Add:\r\n+            return rv\r\n+\r\n+        def do(rv, first=True):\r\n+            # cos(a)+/-cos(b) can be combined into a product of cosines and\r\n+            # sin(a)+/-sin(b) can be combined into a product of cosine and\r\n+            # sine.\r\n+            #\r\n+            # If there are more than two args, the pairs which \"work\" will\r\n+            # have a gcd extractable and the remaining two terms will have\r\n+            # the above structure -- all pairs must be checked to find the\r\n+            # ones that work. args that don't have a common set of symbols\r\n+            # are skipped since this doesn't lead to a simpler formula and\r\n+            # also has the arbitrariness of combining, for example, the x\r\n+            # and y term instead of the y and z term in something like\r\n+            # cos(x) + cos(y) + cos(z).\r\n+\r\n+            if not rv.is_Add:\r\n+                return rv\r\n+\r\n+            args = list(ordered(rv.args))\r\n+            if len(args) != 2:\r\n+                hit = False\r\n+                for i in range(len(args)):\r\n+                    ai = args[i]\r\n+                    if ai is None:\r\n+                        continue\r\n+                    for j in range(i + 1, len(args)):\r\n+                        aj = args[j]\r\n+                        if aj is None:\r\n+                            continue\r\n+                        was = ai + aj\r\n+                        new = do(was)\r\n+                        if new != was:\r\n+                            args[i] = new  # update in place\r\n+                            args[j] = None\r\n+                            hit = True\r\n+                            break  # go to next i\r\n+                if hit:\r\n+                    rv = Add(*[_f for _f in args if _f])\r\n+                    if rv.is_Add:\r\n+                        rv = do(rv)\r\n+\r\n+                return rv\r\n+\r\n+            # two-arg Add\r\n+            split = trig_split(*args)\r\n+            if not split:\r\n+                return rv\r\n+            gcd, n1, n2, a, b, iscos = split\r\n+\r\n+            # application of rule if possible\r\n+            if iscos:\r\n+                if n1 == n2:\r\n+                    return gcd*n1*2*cos((a + b)/2)*cos((a - b)/2)\r\n+                if n1 < 0:\r\n+                    a, b = b, a\r\n+                return -2*gcd*sin((a + b)/2)*sin((a - b)/2)\r\n+            else:\r\n+                if n1 == n2:\r\n+                    return gcd*n1*2*sin((a + b)/2)*cos((a - b)/2)\r\n+                if n1 < 0:\r\n+                    a, b = b, a\r\n+                return 2*gcd*cos((a + b)/2)*sin((a - b)/2)\r\n+\r\n+        return process_common_addends(rv, do)  # DON'T sift by free symbols\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TR10(rv, first=True):\r\n+    \"\"\"Separate sums in ``cos`` and ``sin``.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR10\r\n+    >>> from sympy.abc import a, b, c\r\n+    >>> from sympy import cos, sin\r\n+    >>> TR10(cos(a + b))\r\n+    -sin(a)*sin(b) + cos(a)*cos(b)\r\n+    >>> TR10(sin(a + b))\r\n+    sin(a)*cos(b) + sin(b)*cos(a)\r\n+    >>> TR10(sin(a + b + c))\r\n+    (-sin(a)*sin(b) + cos(a)*cos(b))*sin(c) + \\\r\n+    (sin(a)*cos(b) + sin(b)*cos(a))*cos(c)\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if not rv.func in (cos, sin):\r\n+            return rv\r\n+\r\n+        f = rv.func\r\n+        arg = rv.args[0]\r\n+        if arg.is_Add:\r\n+            if first:\r\n+                args = list(ordered(arg.args))\r\n+            else:\r\n+                args = list(arg.args)\r\n+            a = args.pop()\r\n+            b = Add._from_args(args)\r\n+            if b.is_Add:\r\n+                if f == sin:\r\n+                    return sin(a)*TR10(cos(b), first=False) + \\\r\n+                        cos(a)*TR10(sin(b), first=False)\r\n+                else:\r\n+                    return cos(a)*TR10(cos(b), first=False) - \\\r\n+                        sin(a)*TR10(sin(b), first=False)\r\n+            else:\r\n+                if f == sin:\r\n+                    return sin(a)*cos(b) + cos(a)*sin(b)\r\n+                else:\r\n+                    return cos(a)*cos(b) - sin(a)*sin(b)\r\n+        return rv\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TR10i(rv):\r\n+    \"\"\"Sum of products to function of sum.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR10i\r\n+    >>> from sympy import cos, sin, pi, Add, Mul, sqrt, Symbol\r\n+    >>> from sympy.abc import x, y\r\n+\r\n+    >>> TR10i(cos(1)*cos(3) + sin(1)*sin(3))\r\n+    cos(2)\r\n+    >>> TR10i(cos(1)*sin(3) + sin(1)*cos(3) + cos(3))\r\n+    cos(3) + sin(4)\r\n+    >>> TR10i(sqrt(2)*cos(x)*x + sqrt(6)*sin(x)*x)\r\n+    2*sqrt(2)*x*sin(x + pi/6)\r\n+\r\n+    \"\"\"\r\n+    global _ROOT2, _ROOT3, _invROOT3\r\n+    if _ROOT2 is None:\r\n+        _roots()\r\n+\r\n+    def f(rv):\r\n+        if not rv.is_Add:\r\n+            return rv\r\n+\r\n+        def do(rv, first=True):\r\n+            # args which can be expressed as A*(cos(a)*cos(b)+/-sin(a)*sin(b))\r\n+            # or B*(cos(a)*sin(b)+/-cos(b)*sin(a)) can be combined into\r\n+            # A*f(a+/-b) where f is either sin or cos.\r\n+            #\r\n+            # If there are more than two args, the pairs which \"work\" will have\r\n+            # a gcd extractable and the remaining two terms will have the above\r\n+            # structure -- all pairs must be checked to find the ones that\r\n+            # work.\r\n+\r\n+            if not rv.is_Add:\r\n+                return rv\r\n+\r\n+            args = list(ordered(rv.args))\r\n+            if len(args) != 2:\r\n+                hit = False\r\n+                for i in range(len(args)):\r\n+                    ai = args[i]\r\n+                    if ai is None:\r\n+                        continue\r\n+                    for j in range(i + 1, len(args)):\r\n+                        aj = args[j]\r\n+                        if aj is None:\r\n+                            continue\r\n+                        was = ai + aj\r\n+                        new = do(was)\r\n+                        if new != was:\r\n+                            args[i] = new  # update in place\r\n+                            args[j] = None\r\n+                            hit = True\r\n+                            break  # go to next i\r\n+                if hit:\r\n+                    rv = Add(*[_f for _f in args if _f])\r\n+                    if rv.is_Add:\r\n+                        rv = do(rv)\r\n+\r\n+                return rv\r\n+\r\n+            # two-arg Add\r\n+            split = trig_split(*args, two=True)\r\n+            if not split:\r\n+                return rv\r\n+            gcd, n1, n2, a, b, same = split\r\n+\r\n+            # identify and get c1 to be cos then apply rule if possible\r\n+            if same:  # coscos, sinsin\r\n+                gcd = n1*gcd\r\n+                if n1 == n2:\r\n+                    return gcd*cos(a - b)\r\n+                return gcd*cos(a + b)\r\n+            else:  #cossin, cossin\r\n+                gcd = n1*gcd\r\n+                if n1 == n2:\r\n+                    return gcd*sin(a + b)\r\n+                return gcd*sin(b - a)\r\n+\r\n+        rv = process_common_addends(\r\n+            rv, do, lambda x: tuple(ordered(x.free_symbols)))\r\n+\r\n+        # need to check for inducible pairs in ratio of sqrt(3):1 that\r\n+        # appeared in different lists when sorting by coefficient\r\n+        while rv.is_Add:\r\n+            byrad = defaultdict(list)\r\n+            for a in rv.args:\r\n+                hit = 0\r\n+                if a.is_Mul:\r\n+                    for ai in a.args:\r\n+                        if ai.is_Pow and ai.exp is S.Half and \\\r\n+                                ai.base.is_Integer:\r\n+                            byrad[ai].append(a)\r\n+                            hit = 1\r\n+                            break\r\n+                if not hit:\r\n+                    byrad[S.One].append(a)\r\n+\r\n+            # no need to check all pairs -- just check for the onees\r\n+            # that have the right ratio\r\n+            args = []\r\n+            for a in byrad:\r\n+                for b in [_ROOT3*a, _invROOT3]:\r\n+                    if b in byrad:\r\n+                        for i in range(len(byrad[a])):\r\n+                            if byrad[a][i] is None:\r\n+                                continue\r\n+                            for j in range(len(byrad[b])):\r\n+                                if byrad[b][j] is None:\r\n+                                    continue\r\n+                                was = Add(byrad[a][i] + byrad[b][j])\r\n+                                new = do(was)\r\n+                                if new != was:\r\n+                                    args.append(new)\r\n+                                    byrad[a][i] = None\r\n+                                    byrad[b][j] = None\r\n+                                    break\r\n+            if args:\r\n+                rv = Add(*(args + [Add(*[_f for _f in v if _f])\r\n+                    for v in byrad.values()]))\r\n+            else:\r\n+                rv = do(rv)  # final pass to resolve any new inducible pairs\r\n+                break\r\n+\r\n+        return rv\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TR11(rv, base=None):\r\n+    \"\"\"Function of double angle to product. The ``base`` argument can be used\r\n+    to indicate what is the un-doubled argument, e.g. if 3*pi/7 is the base\r\n+    then cosine and sine functions with argument 6*pi/7 will be replaced.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR11\r\n+    >>> from sympy import cos, sin, pi\r\n+    >>> from sympy.abc import x\r\n+    >>> TR11(sin(2*x))\r\n+    2*sin(x)*cos(x)\r\n+    >>> TR11(cos(2*x))\r\n+    -sin(x)**2 + cos(x)**2\r\n+    >>> TR11(sin(4*x))\r\n+    4*(-sin(x)**2 + cos(x)**2)*sin(x)*cos(x)\r\n+    >>> TR11(sin(4*x/3))\r\n+    4*(-sin(x/3)**2 + cos(x/3)**2)*sin(x/3)*cos(x/3)\r\n+\r\n+    If the arguments are simply integers, no change is made\r\n+    unless a base is provided:\r\n+\r\n+    >>> TR11(cos(2))\r\n+    cos(2)\r\n+    >>> TR11(cos(4), 2)\r\n+    -sin(2)**2 + cos(2)**2\r\n+\r\n+    There is a subtle issue here in that autosimplification will convert\r\n+    some higher angles to lower angles\r\n+\r\n+    >>> cos(6*pi/7) + cos(3*pi/7)\r\n+    -cos(pi/7) + cos(3*pi/7)\r\n+\r\n+    The 6*pi/7 angle is now pi/7 but can be targeted with TR11 by supplying\r\n+    the 3*pi/7 base:\r\n+\r\n+    >>> TR11(_, 3*pi/7)\r\n+    -sin(3*pi/7)**2 + cos(3*pi/7)**2 + cos(3*pi/7)\r\n+\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if not rv.func in (cos, sin):\r\n+            return rv\r\n+\r\n+        if base:\r\n+            f = rv.func\r\n+            t = f(base*2)\r\n+            co = S.One\r\n+            if t.is_Mul:\r\n+                co, t = t.as_coeff_Mul()\r\n+            if not t.func in (cos, sin):\r\n+                return rv\r\n+            if rv.args[0] == t.args[0]:\r\n+                c = cos(base)\r\n+                s = sin(base)\r\n+                if f is cos:\r\n+                    return (c**2 - s**2)/co\r\n+                else:\r\n+                    return 2*c*s/co\r\n+            return rv\r\n+\r\n+        elif not rv.args[0].is_Number:\r\n+            # make a change if the leading coefficient's numerator is\r\n+            # divisible by 2\r\n+            c, m = rv.args[0].as_coeff_Mul(rational=True)\r\n+            if c.p % 2 == 0:\r\n+                arg = c.p//2*m/c.q\r\n+                c = TR11(cos(arg))\r\n+                s = TR11(sin(arg))\r\n+                if rv.func == sin:\r\n+                    rv = 2*s*c\r\n+                else:\r\n+                    rv = c**2 - s**2\r\n+        return rv\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TR12(rv, first=True):\r\n+    \"\"\"Separate sums in ``tan``.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR12\r\n+    >>> from sympy.abc import x, y\r\n+    >>> from sympy import tan\r\n+    >>> from sympy.simplify.fu import TR12\r\n+    >>> TR12(tan(x + y))\r\n+    (tan(x) + tan(y))/(-tan(x)*tan(y) + 1)\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if not rv.func == tan:\r\n+            return rv\r\n+\r\n+        arg = rv.args[0]\r\n+        if arg.is_Add:\r\n+            if first:\r\n+                args = list(ordered(arg.args))\r\n+            else:\r\n+                args = list(arg.args)\r\n+            a = args.pop()\r\n+            b = Add._from_args(args)\r\n+            if b.is_Add:\r\n+                tb = TR12(tan(b), first=False)\r\n+            else:\r\n+                tb = tan(b)\r\n+            return (tan(a) + tb)/(1 - tan(a)*tb)\r\n+        return rv\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TR12i(rv):\r\n+    \"\"\"Combine tan arguments as\r\n+    (tan(y) + tan(x))/(tan(x)*tan(y) - 1) -> -tan(x + y)\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR12i\r\n+    >>> from sympy import tan\r\n+    >>> from sympy.abc import a, b, c\r\n+    >>> ta, tb, tc = [tan(i) for i in (a, b, c)]\r\n+    >>> TR12i((ta + tb)/(-ta*tb + 1))\r\n+    tan(a + b)\r\n+    >>> TR12i((ta + tb)/(ta*tb - 1))\r\n+    -tan(a + b)\r\n+    >>> TR12i((-ta - tb)/(ta*tb - 1))\r\n+    tan(a + b)\r\n+    >>> eq = (ta + tb)/(-ta*tb + 1)**2*(-3*ta - 3*tc)/(2*(ta*tc - 1))\r\n+    >>> TR12i(eq.expand())\r\n+    -3*tan(a + b)*tan(a + c)/(2*(tan(a) + tan(b) - 1))\r\n+    \"\"\"\r\n+    from sympy import factor\r\n+\r\n+    def f(rv):\r\n+        if not (rv.is_Add or rv.is_Mul or rv.is_Pow):\r\n+            return rv\r\n+\r\n+        n, d = rv.as_numer_denom()\r\n+        if not d.args or not n.args:\r\n+            return rv\r\n+\r\n+        dok = {}\r\n+\r\n+        def ok(di):\r\n+            m = as_f_sign_1(di)\r\n+            if m:\r\n+                g, f, s = m\r\n+                if s is S.NegativeOne and f.is_Mul and len(f.args) == 2 and \\\r\n+                        all(isinstance(fi, tan) for fi in f.args):\r\n+                    return g, f\r\n+\r\n+        d_args = list(Mul.make_args(d))\r\n+        for i, di in enumerate(d_args):\r\n+            m = ok(di)\r\n+            if m:\r\n+                g, t = m\r\n+                s = Add(*[_.args[0] for _ in t.args])\r\n+                dok[s] = S.One\r\n+                d_args[i] = g\r\n+                continue\r\n+            if di.is_Add:\r\n+                di = factor(di)\r\n+                if di.is_Mul:\r\n+                    d_args.extend(di.args)\r\n+                    d_args[i] = S.One\r\n+            elif di.is_Pow and (di.exp.is_integer or di.base.is_positive):\r\n+                m = ok(di.base)\r\n+                if m:\r\n+                    g, t = m\r\n+                    s = Add(*[_.args[0] for _ in t.args])\r\n+                    dok[s] = di.exp\r\n+                    d_args[i] = g**di.exp\r\n+                else:\r\n+                    di = factor(di)\r\n+                    if di.is_Mul:\r\n+                        d_args.extend(di.args)\r\n+                        d_args[i] = S.One\r\n+        if not dok:\r\n+            return rv\r\n+\r\n+        def ok(ni):\r\n+            if ni.is_Add and len(ni.args) == 2:\r\n+                a, b = ni.args\r\n+                if isinstance(a, tan) and isinstance(b, tan):\r\n+                    return a, b\r\n+        n_args = list(Mul.make_args(factor_terms(n)))\r\n+        hit = False\r\n+        for i, ni in enumerate(n_args):\r\n+            m = ok(ni)\r\n+            if not m:\r\n+                m = ok(-ni)\r\n+                if m:\r\n+                    n_args[i] = S.NegativeOne\r\n+                else:\r\n+                    if ni.is_Add:\r\n+                        ni = factor(ni)\r\n+                        if ni.is_Mul:\r\n+                            n_args.extend(ni.args)\r\n+                            n_args[i] = S.One\r\n+                        continue\r\n+                    elif ni.is_Pow and (\r\n+                            ni.exp.is_integer or ni.base.is_positive):\r\n+                        m = ok(ni.base)\r\n+                        if m:\r\n+                            n_args[i] = S.One\r\n+                        else:\r\n+                            ni = factor(ni)\r\n+                            if ni.is_Mul:\r\n+                                n_args.extend(ni.args)\r\n+                                n_args[i] = S.One\r\n+                            continue\r\n+                    else:\r\n+                        continue\r\n+            else:\r\n+                n_args[i] = S.One\r\n+            hit = True\r\n+            s = Add(*[_.args[0] for _ in m])\r\n+            ed = dok[s]\r\n+            newed = ed.extract_additively(S.One)\r\n+            if newed is not None:\r\n+                if newed:\r\n+                    dok[s] = newed\r\n+                else:\r\n+                    dok.pop(s)\r\n+            n_args[i] *= -tan(s)\r\n+\r\n+        if hit:\r\n+            rv = Mul(*n_args)/Mul(*d_args)/Mul(*[(Add(*[\r\n+                tan(a) for a in i.args]) - 1)**e for i, e in dok.items()])\r\n+\r\n+        return rv\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TR13(rv):\r\n+    \"\"\"Change products of ``tan`` or ``cot``.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR13\r\n+    >>> from sympy import tan, cot, cos\r\n+    >>> TR13(tan(3)*tan(2))\r\n+    -tan(2)/tan(5) - tan(3)/tan(5) + 1\r\n+    >>> TR13(cot(3)*cot(2))\r\n+    cot(2)*cot(5) + 1 + cot(3)*cot(5)\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if not rv.is_Mul:\r\n+            return rv\r\n+\r\n+        # XXX handle products of powers? or let power-reducing handle it?\r\n+        args = {tan: [], cot: [], None: []}\r\n+        for a in ordered(Mul.make_args(rv)):\r\n+            if a.func in (tan, cot):\r\n+                args[a.func].append(a.args[0])\r\n+            else:\r\n+                args[None].append(a)\r\n+        t = args[tan]\r\n+        c = args[cot]\r\n+        if len(t) < 2 and len(c) < 2:\r\n+            return rv\r\n+        args = args[None]\r\n+        while len(t) > 1:\r\n+            t1 = t.pop()\r\n+            t2 = t.pop()\r\n+            args.append(1 - (tan(t1)/tan(t1 + t2) + tan(t2)/tan(t1 + t2)))\r\n+        if t:\r\n+            args.append(tan(t.pop()))\r\n+        while len(c) > 1:\r\n+            t1 = c.pop()\r\n+            t2 = c.pop()\r\n+            args.append(1 + cot(t1)*cot(t1 + t2) + cot(t2)*cot(t1 + t2))\r\n+        if c:\r\n+            args.append(cot(c.pop()))\r\n+        return Mul(*args)\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TRmorrie(rv):\r\n+    \"\"\"Returns cos(x)*cos(2*x)*...*cos(2**(k-1)*x) -> sin(2**k*x)/(2**k*sin(x))\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TRmorrie, TR8, TR3\r\n+    >>> from sympy.abc import x\r\n+    >>> from sympy import Mul, cos, pi\r\n+    >>> TRmorrie(cos(x)*cos(2*x))\r\n+    sin(4*x)/(4*sin(x))\r\n+    >>> TRmorrie(7*Mul(*[cos(x) for x in range(10)]))\r\n+    7*sin(12)*sin(16)*cos(5)*cos(7)*cos(9)/(64*sin(1)*sin(3))\r\n+\r\n+    Sometimes autosimplification will cause a power to be\r\n+    not recognized. e.g. in the following, cos(4*pi/7) automatically\r\n+    simplifies to -cos(3*pi/7) so only 2 of the 3 terms are\r\n+    recognized:\r\n+\r\n+    >>> TRmorrie(cos(pi/7)*cos(2*pi/7)*cos(4*pi/7))\r\n+    -sin(3*pi/7)*cos(3*pi/7)/(4*sin(pi/7))\r\n+\r\n+    A touch by TR8 resolves the expression to a Rational\r\n+\r\n+    >>> TR8(_)\r\n+    -1/8\r\n+\r\n+    In this case, if eq is unsimplified, the answer is obtained\r\n+    directly:\r\n+\r\n+    >>> eq = cos(pi/9)*cos(2*pi/9)*cos(3*pi/9)*cos(4*pi/9)\r\n+    >>> TRmorrie(eq)\r\n+    1/16\r\n+\r\n+    But if angles are made canonical with TR3 then the answer\r\n+    is not simplified without further work:\r\n+\r\n+    >>> TR3(eq)\r\n+    sin(pi/18)*cos(pi/9)*cos(2*pi/9)/2\r\n+    >>> TRmorrie(_)\r\n+    sin(pi/18)*sin(4*pi/9)/(8*sin(pi/9))\r\n+    >>> TR8(_)\r\n+    cos(7*pi/18)/(16*sin(pi/9))\r\n+    >>> TR3(_)\r\n+    1/16\r\n+\r\n+    The original expression would have resolve to 1/16 directly with TR8,\r\n+    however:\r\n+\r\n+    >>> TR8(eq)\r\n+    1/16\r\n+\r\n+    References\r\n+    ==========\r\n+\r\n+    https://en.wikipedia.org/wiki/Morrie%27s_law\r\n+\r\n+    \"\"\"\r\n+\r\n+    def f(rv, first=True):\r\n+        if not rv.is_Mul:\r\n+            return rv\r\n+        if first:\r\n+            n, d = rv.as_numer_denom()\r\n+            return f(n, 0)/f(d, 0)\r\n+\r\n+        args = defaultdict(list)\r\n+        coss = {}\r\n+        other = []\r\n+        for c in rv.args:\r\n+            b, e = c.as_base_exp()\r\n+            if e.is_Integer and isinstance(b, cos):\r\n+                co, a = b.args[0].as_coeff_Mul()\r\n+                args[a].append(co)\r\n+                coss[b] = e\r\n+            else:\r\n+                other.append(c)\r\n+\r\n+        new = []\r\n+        for a in args:\r\n+            c = args[a]\r\n+            c.sort()\r\n+            no = []\r\n+            while c:\r\n+                k = 0\r\n+                cc = ci = c[0]\r\n+                while cc in c:\r\n+                    k += 1\r\n+                    cc *= 2\r\n+                if k > 1:\r\n+                    newarg = sin(2**k*ci*a)/2**k/sin(ci*a)\r\n+                    # see how many times this can be taken\r\n+                    take = None\r\n+                    ccs = []\r\n+                    for i in range(k):\r\n+                        cc /= 2\r\n+                        key = cos(a*cc, evaluate=False)\r\n+                        ccs.append(cc)\r\n+                        take = min(coss[key], take or coss[key])\r\n+                    # update exponent counts\r\n+                    for i in range(k):\r\n+                        cc = ccs.pop()\r\n+                        key = cos(a*cc, evaluate=False)\r\n+                        coss[key] -= take\r\n+                        if not coss[key]:\r\n+                            c.remove(cc)\r\n+                    new.append(newarg**take)\r\n+                else:\r\n+                    no.append(c.pop(0))\r\n+            c[:] = no\r\n+\r\n+        if new:\r\n+            rv = Mul(*(new + other + [\r\n+                cos(k*a, evaluate=False) for a in args for k in args[a]]))\r\n+\r\n+        return rv\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TR14(rv, first=True):\r\n+    \"\"\"Convert factored powers of sin and cos identities into simpler\r\n+    expressions.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR14\r\n+    >>> from sympy.abc import x, y\r\n+    >>> from sympy import cos, sin\r\n+    >>> TR14((cos(x) - 1)*(cos(x) + 1))\r\n+    -sin(x)**2\r\n+    >>> TR14((sin(x) - 1)*(sin(x) + 1))\r\n+    -cos(x)**2\r\n+    >>> p1 = (cos(x) + 1)*(cos(x) - 1)\r\n+    >>> p2 = (cos(y) - 1)*2*(cos(y) + 1)\r\n+    >>> p3 = (3*(cos(y) - 1))*(3*(cos(y) + 1))\r\n+    >>> TR14(p1*p2*p3*(x - 1))\r\n+    -18*(x - 1)*sin(x)**2*sin(y)**4\r\n+\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if not rv.is_Mul:\r\n+            return rv\r\n+\r\n+        if first:\r\n+            # sort them by location in numerator and denominator\r\n+            # so the code below can just deal with positive exponents\r\n+            n, d = rv.as_numer_denom()\r\n+            if d is not S.One:\r\n+                newn = TR14(n, first=False)\r\n+                newd = TR14(d, first=False)\r\n+                if newn != n or newd != d:\r\n+                    rv = newn/newd\r\n+                return rv\r\n+\r\n+        other = []\r\n+        process = []\r\n+        for a in rv.args:\r\n+            if a.is_Pow:\r\n+                b, e = a.as_base_exp()\r\n+                if not (e.is_integer or b.is_positive):\r\n+                    other.append(a)\r\n+                    continue\r\n+                a = b\r\n+            else:\r\n+                e = S.One\r\n+            m = as_f_sign_1(a)\r\n+            if not m or m[1].func not in (cos, sin):\r\n+                if e is S.One:\r\n+                    other.append(a)\r\n+                else:\r\n+                    other.append(a**e)\r\n+                continue\r\n+            g, f, si = m\r\n+            process.append((g, e.is_Number, e, f, si, a))\r\n+\r\n+        # sort them to get like terms next to each other\r\n+        process = list(ordered(process))\r\n+\r\n+        # keep track of whether there was any change\r\n+        nother = len(other)\r\n+\r\n+        # access keys\r\n+        keys = (g, t, e, f, si, a) = list(range(6))\r\n+\r\n+        while process:\r\n+            A = process.pop(0)\r\n+            if process:\r\n+                B = process[0]\r\n+\r\n+                if A[e].is_Number and B[e].is_Number:\r\n+                    # both exponents are numbers\r\n+                    if A[f] == B[f]:\r\n+                        if A[si] != B[si]:\r\n+                            B = process.pop(0)\r\n+                            take = min(A[e], B[e])\r\n+\r\n+                            # reinsert any remainder\r\n+                            # the B will likely sort after A so check it first\r\n+                            if B[e] != take:\r\n+                                rem = [B[i] for i in keys]\r\n+                                rem[e] -= take\r\n+                                process.insert(0, rem)\r\n+                            elif A[e] != take:\r\n+                                rem = [A[i] for i in keys]\r\n+                                rem[e] -= take\r\n+                                process.insert(0, rem)\r\n+\r\n+                            if isinstance(A[f], cos):\r\n+                                t = sin\r\n+                            else:\r\n+                                t = cos\r\n+                            other.append((-A[g]*B[g]*t(A[f].args[0])**2)**take)\r\n+                            continue\r\n+\r\n+                elif A[e] == B[e]:\r\n+                    # both exponents are equal symbols\r\n+                    if A[f] == B[f]:\r\n+                        if A[si] != B[si]:\r\n+                            B = process.pop(0)\r\n+                            take = A[e]\r\n+                            if isinstance(A[f], cos):\r\n+                                t = sin\r\n+                            else:\r\n+                                t = cos\r\n+                            other.append((-A[g]*B[g]*t(A[f].args[0])**2)**take)\r\n+                            continue\r\n+\r\n+            # either we are done or neither condition above applied\r\n+            other.append(A[a]**A[e])\r\n+\r\n+        if len(other) != nother:\r\n+            rv = Mul(*other)\r\n+\r\n+        return rv\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TR15(rv, max=4, pow=False):\r\n+    \"\"\"Convert sin(x)*-2 to 1 + cot(x)**2.\r\n+\r\n+    See _TR56 docstring for advanced use of ``max`` and ``pow``.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR15\r\n+    >>> from sympy.abc import x\r\n+    >>> from sympy import cos, sin\r\n+    >>> TR15(1 - 1/sin(x)**2)\r\n+    -cot(x)**2\r\n+\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if not (isinstance(rv, Pow) and isinstance(rv.base, sin)):\r\n+            return rv\r\n+\r\n+        ia = 1/rv\r\n+        a = _TR56(ia, sin, cot, lambda x: 1 + x, max=max, pow=pow)\r\n+        if a != ia:\r\n+            rv = a\r\n+        return rv\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TR16(rv, max=4, pow=False):\r\n+    \"\"\"Convert cos(x)*-2 to 1 + tan(x)**2.\r\n+\r\n+    See _TR56 docstring for advanced use of ``max`` and ``pow``.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR16\r\n+    >>> from sympy.abc import x\r\n+    >>> from sympy import cos, sin\r\n+    >>> TR16(1 - 1/cos(x)**2)\r\n+    -tan(x)**2\r\n+\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if not (isinstance(rv, Pow) and isinstance(rv.base, cos)):\r\n+            return rv\r\n+\r\n+        ia = 1/rv\r\n+        a = _TR56(ia, cos, tan, lambda x: 1 + x, max=max, pow=pow)\r\n+        if a != ia:\r\n+            rv = a\r\n+        return rv\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TR111(rv):\r\n+    \"\"\"Convert f(x)**-i to g(x)**i where either ``i`` is an integer\r\n+    or the base is positive and f, g are: tan, cot; sin, csc; or cos, sec.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR111\r\n+    >>> from sympy.abc import x\r\n+    >>> from sympy import tan\r\n+    >>> TR111(1 - 1/tan(x)**2)\r\n+    1 - cot(x)**2\r\n+\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if not (\r\n+            isinstance(rv, Pow) and\r\n+            (rv.base.is_positive or rv.exp.is_integer and rv.exp.is_negative)):\r\n+            return rv\r\n+\r\n+        if isinstance(rv.base, tan):\r\n+            return cot(rv.base.args[0])**-rv.exp\r\n+        elif isinstance(rv.base, sin):\r\n+            return csc(rv.base.args[0])**-rv.exp\r\n+        elif isinstance(rv.base, cos):\r\n+            return sec(rv.base.args[0])**-rv.exp\r\n+        return rv\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TR22(rv, max=4, pow=False):\r\n+    \"\"\"Convert tan(x)**2 to sec(x)**2 - 1 and cot(x)**2 to csc(x)**2 - 1.\r\n+\r\n+    See _TR56 docstring for advanced use of ``max`` and ``pow``.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TR22\r\n+    >>> from sympy.abc import x\r\n+    >>> from sympy import tan, cot\r\n+    >>> TR22(1 + tan(x)**2)\r\n+    sec(x)**2\r\n+    >>> TR22(1 + cot(x)**2)\r\n+    csc(x)**2\r\n+\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if not (isinstance(rv, Pow) and rv.base.func in (cot, tan)):\r\n+            return rv\r\n+\r\n+        rv = _TR56(rv, tan, sec, lambda x: x - 1, max=max, pow=pow)\r\n+        rv = _TR56(rv, cot, csc, lambda x: x - 1, max=max, pow=pow)\r\n+        return rv\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def TRpower(rv):\r\n+    \"\"\"Convert sin(x)**n and cos(x)**n with positive n to sums.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import TRpower\r\n+    >>> from sympy.abc import x\r\n+    >>> from sympy import cos, sin\r\n+    >>> TRpower(sin(x)**6)\r\n+    -15*cos(2*x)/32 + 3*cos(4*x)/16 - cos(6*x)/32 + 5/16\r\n+    >>> TRpower(sin(x)**3*cos(2*x)**4)\r\n+    (3*sin(x)/4 - sin(3*x)/4)*(cos(4*x)/2 + cos(8*x)/8 + 3/8)\r\n+\r\n+    References\r\n+    ==========\r\n+\r\n+    https://en.wikipedia.org/wiki/List_of_trigonometric_identities#Power-reduction_formulae\r\n+\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if not (isinstance(rv, Pow) and isinstance(rv.base, (sin, cos))):\r\n+            return rv\r\n+        b, n = rv.as_base_exp()\r\n+        x = b.args[0]\r\n+        if n.is_Integer and n.is_positive:\r\n+            if n.is_odd and isinstance(b, cos):\r\n+                rv = 2**(1-n)*Add(*[binomial(n, k)*cos((n - 2*k)*x)\r\n+                    for k in range((n + 1)/2)])\r\n+            elif n.is_odd and isinstance(b, sin):\r\n+                rv = 2**(1-n)*(-1)**((n-1)/2)*Add(*[binomial(n, k)*\r\n+                    (-1)**k*sin((n - 2*k)*x) for k in range((n + 1)/2)])\r\n+            elif n.is_even and isinstance(b, cos):\r\n+                rv = 2**(1-n)*Add(*[binomial(n, k)*cos((n - 2*k)*x)\r\n+                    for k in range(n/2)])\r\n+            elif n.is_even and isinstance(b, sin):\r\n+                rv = 2**(1-n)*(-1)**(n/2)*Add(*[binomial(n, k)*\r\n+                    (-1)**k*cos((n - 2*k)*x) for k in range(n/2)])\r\n+            if n.is_even:\r\n+                rv += 2**(-n)*binomial(n, n/2)\r\n+        return rv\r\n+\r\n+    return bottom_up(rv, f)\r\n+\r\n+\r\n+def L(rv):\r\n+    \"\"\"Return count of trigonometric functions in expression.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import L\r\n+    >>> from sympy.abc import x\r\n+    >>> from sympy import cos, sin\r\n+    >>> L(cos(x)+sin(x))\r\n+    2\r\n+    \"\"\"\r\n+    return S(rv.count(TrigonometricFunction))\r\n+\r\n+\r\n+# ============== end of basic Fu-like tools =====================\r\n+\r\n+if SYMPY_DEBUG:\r\n+    (TR0, TR1, TR2, TR3, TR4, TR5, TR6, TR7, TR8, TR9, TR10, TR11, TR12, TR13,\r\n+    TR2i, TRmorrie, TR14, TR15, TR16, TR12i, TR111, TR22\r\n+    )= list(map(debug,\r\n+    (TR0, TR1, TR2, TR3, TR4, TR5, TR6, TR7, TR8, TR9, TR10, TR11, TR12, TR13,\r\n+    TR2i, TRmorrie, TR14, TR15, TR16, TR12i, TR111, TR22)))\r\n+\r\n+\r\n+# tuples are chains  --  (f, g) -> lambda x: g(f(x))\r\n+# lists are choices  --  [f, g] -> lambda x: min(f(x), g(x), key=objective)\r\n+\r\n+CTR1 = [(TR5, TR0), (TR6, TR0), identity]\r\n+\r\n+CTR2 = (TR11, [(TR5, TR0), (TR6, TR0), TR0])\r\n+\r\n+CTR3 = [(TRmorrie, TR8, TR0), (TRmorrie, TR8, TR10i, TR0), identity]\r\n+\r\n+CTR4 = [(TR4, TR10i), identity]\r\n+\r\n+RL1 = (TR4, TR3, TR4, TR12, TR4, TR13, TR4, TR0)\r\n+\r\n+\r\n+# XXX it's a little unclear how this one is to be implemented\r\n+# see Fu paper of reference, page 7. What is the Union symbol referring to?\r\n+# The diagram shows all these as one chain of transformations, but the\r\n+# text refers to them being applied independently. Also, a break\r\n+# if L starts to increase has not been implemented.\r\n+RL2 = [\r\n+    (TR4, TR3, TR10, TR4, TR3, TR11),\r\n+    (TR5, TR7, TR11, TR4),\r\n+    (CTR3, CTR1, TR9, CTR2, TR4, TR9, TR9, CTR4),\r\n+    identity,\r\n+    ]\r\n+\r\n+\r\n+def fu(rv, measure=lambda x: (L(x), x.count_ops())):\r\n+    \"\"\"Attempt to simplify expression by using transformation rules given\r\n+    in the algorithm by Fu et al.\r\n+\r\n+    :func:`fu` will try to minimize the objective function ``measure``.\r\n+    By default this first minimizes the number of trig terms and then minimizes\r\n+    the number of total operations.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import fu\r\n+    >>> from sympy import cos, sin, tan, pi, S, sqrt\r\n+    >>> from sympy.abc import x, y, a, b\r\n+\r\n+    >>> fu(sin(50)**2 + cos(50)**2 + sin(pi/6))\r\n+    3/2\r\n+    >>> fu(sqrt(6)*cos(x) + sqrt(2)*sin(x))\r\n+    2*sqrt(2)*sin(x + pi/3)\r\n+\r\n+    CTR1 example\r\n+\r\n+    >>> eq = sin(x)**4 - cos(y)**2 + sin(y)**2 + 2*cos(x)**2\r\n+    >>> fu(eq)\r\n+    cos(x)**4 - 2*cos(y)**2 + 2\r\n+\r\n+    CTR2 example\r\n+\r\n+    >>> fu(S.Half - cos(2*x)/2)\r\n+    sin(x)**2\r\n+\r\n+    CTR3 example\r\n+\r\n+    >>> fu(sin(a)*(cos(b) - sin(b)) + cos(a)*(sin(b) + cos(b)))\r\n+    sqrt(2)*sin(a + b + pi/4)\r\n+\r\n+    CTR4 example\r\n+\r\n+    >>> fu(sqrt(3)*cos(x)/2 + sin(x)/2)\r\n+    sin(x + pi/3)\r\n+\r\n+    Example 1\r\n+\r\n+    >>> fu(1-sin(2*x)**2/4-sin(y)**2-cos(x)**4)\r\n+    -cos(x)**2 + cos(y)**2\r\n+\r\n+    Example 2\r\n+\r\n+    >>> fu(cos(4*pi/9))\r\n+    sin(pi/18)\r\n+    >>> fu(cos(pi/9)*cos(2*pi/9)*cos(3*pi/9)*cos(4*pi/9))\r\n+    1/16\r\n+\r\n+    Example 3\r\n+\r\n+    >>> fu(tan(7*pi/18)+tan(5*pi/18)-sqrt(3)*tan(5*pi/18)*tan(7*pi/18))\r\n+    -sqrt(3)\r\n+\r\n+    Objective function example\r\n+\r\n+    >>> fu(sin(x)/cos(x))  # default objective function\r\n+    tan(x)\r\n+    >>> fu(sin(x)/cos(x), measure=lambda x: -x.count_ops()) # maximize op count\r\n+    sin(x)/cos(x)\r\n+\r\n+    References\r\n+    ==========\r\n+    http://rfdz.ph-noe.ac.at/fileadmin/Mathematik_Uploads/ACDCA/\r\n+    DESTIME2006/DES_contribs/Fu/simplification.pdf\r\n+    \"\"\"\r\n+    fRL1 = greedy(RL1, measure)\r\n+    fRL2 = greedy(RL2, measure)\r\n+\r\n+    was = rv\r\n+    rv = sympify(rv)\r\n+    if not isinstance(rv, Expr):\r\n+        return rv.func(*[fu(a, measure=measure) for a in rv.args])\r\n+    rv = TR1(rv)\r\n+    if rv.has(tan, cot):\r\n+        rv1 = fRL1(rv)\r\n+        if (measure(rv1) < measure(rv)):\r\n+            rv = rv1\r\n+        if rv.has(tan, cot):\r\n+            rv = TR2(rv)\r\n+    if rv.has(sin, cos):\r\n+        rv1 = fRL2(rv)\r\n+        rv2 = TR8(TRmorrie(rv1))\r\n+        rv = min([was, rv, rv1, rv2], key=measure)\r\n+    return min(TR2i(rv), rv, key=measure)\r\n+\r\n+\r\n+def process_common_addends(rv, do, key2=None, key1=True):\r\n+    \"\"\"Apply ``do`` to addends of ``rv`` that (if key1=True) share at least\r\n+    a common absolute value of their coefficient and the value of ``key2`` when\r\n+    applied to the argument. If ``key1`` is False ``key2`` must be supplied and\r\n+    will be the only key applied.\r\n+    \"\"\"\r\n+\r\n+    # collect by absolute value of coefficient and key2\r\n+    absc = defaultdict(list)\r\n+    if key1:\r\n+        for a in rv.args:\r\n+            c, a = a.as_coeff_Mul()\r\n+            if c < 0:\r\n+                c = -c\r\n+                a = -a  # put the sign on `a`\r\n+            absc[(c, key2(a) if key2 else 1)].append(a)\r\n+    elif key2:\r\n+        for a in rv.args:\r\n+            absc[(S.One, key2(a))].append(a)\r\n+    else:\r\n+        raise ValueError('must have at least one key')\r\n+\r\n+    args = []\r\n+    hit = False\r\n+    for k in absc:\r\n+        v = absc[k]\r\n+        c, _ = k\r\n+        if len(v) > 1:\r\n+            e = Add(*v, evaluate=False)\r\n+            new = do(e)\r\n+            if new != e:\r\n+                e = new\r\n+                hit = True\r\n+            args.append(c*e)\r\n+        else:\r\n+            args.append(c*v[0])\r\n+    if hit:\r\n+        rv = Add(*args)\r\n+\r\n+    return rv\r\n+\r\n+\r\n+fufuncs = '''\r\n+    TR0 TR1 TR2 TR3 TR4 TR5 TR6 TR7 TR8 TR9 TR10 TR10i TR11\r\n+    TR12 TR13 L TR2i TRmorrie TR12i\r\n+    TR14 TR15 TR16 TR111 TR22'''.split()\r\n+FU = dict(list(zip(fufuncs, list(map(locals().get, fufuncs)))))\r\n+\r\n+\r\n+def _roots():\r\n+    global _ROOT2, _ROOT3, _invROOT3\r\n+    _ROOT2, _ROOT3 = sqrt(2), sqrt(3)\r\n+    _invROOT3 = 1/_ROOT3\r\n+_ROOT2 = None\r\n+\r\n+\r\n+def trig_split(a, b, two=False):\r\n+    \"\"\"Return the gcd, s1, s2, a1, a2, bool where\r\n+\r\n+    If two is False (default) then::\r\n+        a + b = gcd*(s1*f(a1) + s2*f(a2)) where f = cos if bool else sin\r\n+    else:\r\n+        if bool, a + b was +/- cos(a1)*cos(a2) +/- sin(a1)*sin(a2) and equals\r\n+            n1*gcd*cos(a - b) if n1 == n2 else\r\n+            n1*gcd*cos(a + b)\r\n+        else a + b was +/- cos(a1)*sin(a2) +/- sin(a1)*cos(a2) and equals\r\n+            n1*gcd*sin(a + b) if n1 = n2 else\r\n+            n1*gcd*sin(b - a)\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import trig_split\r\n+    >>> from sympy.abc import x, y, z\r\n+    >>> from sympy import cos, sin, sqrt\r\n+\r\n+    >>> trig_split(cos(x), cos(y))\r\n+    (1, 1, 1, x, y, True)\r\n+    >>> trig_split(2*cos(x), -2*cos(y))\r\n+    (2, 1, -1, x, y, True)\r\n+    >>> trig_split(cos(x)*sin(y), cos(y)*sin(y))\r\n+    (sin(y), 1, 1, x, y, True)\r\n+\r\n+    >>> trig_split(cos(x), -sqrt(3)*sin(x), two=True)\r\n+    (2, 1, -1, x, pi/6, False)\r\n+    >>> trig_split(cos(x), sin(x), two=True)\r\n+    (sqrt(2), 1, 1, x, pi/4, False)\r\n+    >>> trig_split(cos(x), -sin(x), two=True)\r\n+    (sqrt(2), 1, -1, x, pi/4, False)\r\n+    >>> trig_split(sqrt(2)*cos(x), -sqrt(6)*sin(x), two=True)\r\n+    (2*sqrt(2), 1, -1, x, pi/6, False)\r\n+    >>> trig_split(-sqrt(6)*cos(x), -sqrt(2)*sin(x), two=True)\r\n+    (-2*sqrt(2), 1, 1, x, pi/3, False)\r\n+    >>> trig_split(cos(x)/sqrt(6), sin(x)/sqrt(2), two=True)\r\n+    (sqrt(6)/3, 1, 1, x, pi/6, False)\r\n+    >>> trig_split(-sqrt(6)*cos(x)*sin(y), -sqrt(2)*sin(x)*sin(y), two=True)\r\n+    (-2*sqrt(2)*sin(y), 1, 1, x, pi/3, False)\r\n+\r\n+    >>> trig_split(cos(x), sin(x))\r\n+    >>> trig_split(cos(x), sin(z))\r\n+    >>> trig_split(2*cos(x), -sin(x))\r\n+    >>> trig_split(cos(x), -sqrt(3)*sin(x))\r\n+    >>> trig_split(cos(x)*cos(y), sin(x)*sin(z))\r\n+    >>> trig_split(cos(x)*cos(y), sin(x)*sin(y))\r\n+    >>> trig_split(-sqrt(6)*cos(x), sqrt(2)*sin(x)*sin(y), two=True)\r\n+    \"\"\"\r\n+    global _ROOT2, _ROOT3, _invROOT3\r\n+    if _ROOT2 is None:\r\n+        _roots()\r\n+\r\n+    a, b = [Factors(i) for i in (a, b)]\r\n+    ua, ub = a.normal(b)\r\n+    gcd = a.gcd(b).as_expr()\r\n+    n1 = n2 = 1\r\n+    if S.NegativeOne in ua.factors:\r\n+        ua = ua.quo(S.NegativeOne)\r\n+        n1 = -n1\r\n+    elif S.NegativeOne in ub.factors:\r\n+        ub = ub.quo(S.NegativeOne)\r\n+        n2 = -n2\r\n+    a, b = [i.as_expr() for i in (ua, ub)]\r\n+\r\n+    def pow_cos_sin(a, two):\r\n+        \"\"\"Return ``a`` as a tuple (r, c, s) such that\r\n+        ``a = (r or 1)*(c or 1)*(s or 1)``.\r\n+\r\n+        Three arguments are returned (radical, c-factor, s-factor) as\r\n+        long as the conditions set by ``two`` are met; otherwise None is\r\n+        returned. If ``two`` is True there will be one or two non-None\r\n+        values in the tuple: c and s or c and r or s and r or s or c with c\r\n+        being a cosine function (if possible) else a sine, and s being a sine\r\n+        function (if possible) else oosine. If ``two`` is False then there\r\n+        will only be a c or s term in the tuple.\r\n+\r\n+        ``two`` also require that either two cos and/or sin be present (with\r\n+        the condition that if the functions are the same the arguments are\r\n+        different or vice versa) or that a single cosine or a single sine\r\n+        be present with an optional radical.\r\n+\r\n+        If the above conditions dictated by ``two`` are not met then None\r\n+        is returned.\r\n+        \"\"\"\r\n+        c = s = None\r\n+        co = S.One\r\n+        if a.is_Mul:\r\n+            co, a = a.as_coeff_Mul()\r\n+            if len(a.args) > 2 or not two:\r\n+                return None\r\n+            if a.is_Mul:\r\n+                args = list(a.args)\r\n+            else:\r\n+                args = [a]\r\n+            a = args.pop(0)\r\n+            if isinstance(a, cos):\r\n+                c = a\r\n+            elif isinstance(a, sin):\r\n+                s = a\r\n+            elif a.is_Pow and a.exp is S.Half:  # autoeval doesn't allow -1/2\r\n+                co *= a\r\n+            else:\r\n+                return None\r\n+            if args:\r\n+                b = args[0]\r\n+                if isinstance(b, cos):\r\n+                    if c:\r\n+                        s = b\r\n+                    else:\r\n+                        c = b\r\n+                elif isinstance(b, sin):\r\n+                    if s:\r\n+                        c = b\r\n+                    else:\r\n+                        s = b\r\n+                elif b.is_Pow and b.exp is S.Half:\r\n+                    co *= b\r\n+                else:\r\n+                    return None\r\n+            return co if co is not S.One else None, c, s\r\n+        elif isinstance(a, cos):\r\n+            c = a\r\n+        elif isinstance(a, sin):\r\n+            s = a\r\n+        if c is None and s is None:\r\n+            return\r\n+        co = co if co is not S.One else None\r\n+        return co, c, s\r\n+\r\n+    # get the parts\r\n+    m = pow_cos_sin(a, two)\r\n+    if m is None:\r\n+        return\r\n+    coa, ca, sa = m\r\n+    m = pow_cos_sin(b, two)\r\n+    if m is None:\r\n+        return\r\n+    cob, cb, sb = m\r\n+\r\n+    # check them\r\n+    if (not ca) and cb or ca and isinstance(ca, sin):\r\n+        coa, ca, sa, cob, cb, sb = cob, cb, sb, coa, ca, sa\r\n+        n1, n2 = n2, n1\r\n+    if not two:  # need cos(x) and cos(y) or sin(x) and sin(y)\r\n+        c = ca or sa\r\n+        s = cb or sb\r\n+        if not isinstance(c, s.func):\r\n+            return None\r\n+        return gcd, n1, n2, c.args[0], s.args[0], isinstance(c, cos)\r\n+    else:\r\n+        if not coa and not cob:\r\n+            if (ca and cb and sa and sb):\r\n+                if isinstance(ca, sa.func) is not isinstance(cb, sb.func):\r\n+                    return\r\n+                args = {j.args for j in (ca, sa)}\r\n+                if not all(i.args in args for i in (cb, sb)):\r\n+                    return\r\n+                return gcd, n1, n2, ca.args[0], sa.args[0], isinstance(ca, sa.func)\r\n+        if ca and sa or cb and sb or \\\r\n+            two and (ca is None and sa is None or cb is None and sb is None):\r\n+            return\r\n+        c = ca or sa\r\n+        s = cb or sb\r\n+        if c.args != s.args:\r\n+            return\r\n+        if not coa:\r\n+            coa = S.One\r\n+        if not cob:\r\n+            cob = S.One\r\n+        if coa is cob:\r\n+            gcd *= _ROOT2\r\n+            return gcd, n1, n2, c.args[0], pi/4, False\r\n+        elif coa/cob == _ROOT3:\r\n+            gcd *= 2*cob\r\n+            return gcd, n1, n2, c.args[0], pi/3, False\r\n+        elif coa/cob == _invROOT3:\r\n+            gcd *= 2*coa\r\n+            return gcd, n1, n2, c.args[0], pi/6, False\r\n+\r\n+\r\n+def as_f_sign_1(e):\r\n+    \"\"\"If ``e`` is a sum that can be written as ``g*(a + s)`` where\r\n+    ``s`` is ``+/-1``, return ``g``, ``a``, and ``s`` where ``a`` does\r\n+    not have a leading negative coefficient.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import as_f_sign_1\r\n+    >>> from sympy.abc import x\r\n+    >>> as_f_sign_1(x + 1)\r\n+    (1, x, 1)\r\n+    >>> as_f_sign_1(x - 1)\r\n+    (1, x, -1)\r\n+    >>> as_f_sign_1(-x + 1)\r\n+    (-1, x, -1)\r\n+    >>> as_f_sign_1(-x - 1)\r\n+    (-1, x, 1)\r\n+    >>> as_f_sign_1(2*x + 2)\r\n+    (2, x, 1)\r\n+    \"\"\"\r\n+    if not e.is_Add or len(e.args) != 2:\r\n+        return\r\n+    # exact match\r\n+    a, b = e.args\r\n+    if a in (S.NegativeOne, S.One):\r\n+        g = S.One\r\n+        if b.is_Mul and b.args[0].is_Number and b.args[0] < 0:\r\n+            a, b = -a, -b\r\n+            g = -g\r\n+        return g, b, a\r\n+    # gcd match\r\n+    a, b = [Factors(i) for i in e.args]\r\n+    ua, ub = a.normal(b)\r\n+    gcd = a.gcd(b).as_expr()\r\n+    if S.NegativeOne in ua.factors:\r\n+        ua = ua.quo(S.NegativeOne)\r\n+        n1 = -1\r\n+        n2 = 1\r\n+    elif S.NegativeOne in ub.factors:\r\n+        ub = ub.quo(S.NegativeOne)\r\n+        n1 = 1\r\n+        n2 = -1\r\n+    else:\r\n+        n1 = n2 = 1\r\n+    a, b = [i.as_expr() for i in (ua, ub)]\r\n+    if a is S.One:\r\n+        a, b = b, a\r\n+        n1, n2 = n2, n1\r\n+    if n1 == -1:\r\n+        gcd = -gcd\r\n+        n2 = -n2\r\n+\r\n+    if b is S.One:\r\n+        return gcd, a, n2\r\n+\r\n+\r\n+def _osborne(e, d):\r\n+    \"\"\"Replace all hyperbolic functions with trig functions using\r\n+    the Osborne rule.\r\n+\r\n+    Notes\r\n+    =====\r\n+\r\n+    ``d`` is a dummy variable to prevent automatic evaluation\r\n+    of trigonometric/hyperbolic functions.\r\n+\r\n+\r\n+    References\r\n+    ==========\r\n+\r\n+    https://en.wikipedia.org/wiki/Hyperbolic_function\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if not isinstance(rv, HyperbolicFunction):\r\n+            return rv\r\n+        a = rv.args[0]\r\n+        a = a*d if not a.is_Add else Add._from_args([i*d for i in a.args])\r\n+        if isinstance(rv, sinh):\r\n+            return I*sin(a)\r\n+        elif isinstance(rv, cosh):\r\n+            return cos(a)\r\n+        elif isinstance(rv, tanh):\r\n+            return I*tan(a)\r\n+        elif isinstance(rv, coth):\r\n+            return cot(a)/I\r\n+        elif isinstance(rv, sech):\r\n+            return sec(a)\r\n+        elif isinstance(rv, csch):\r\n+            return csc(a)/I\r\n+        else:\r\n+            raise NotImplementedError('unhandled %s' % rv.func)\r\n+\r\n+    return bottom_up(e, f)\r\n+\r\n+\r\n+def _osbornei(e, d):\r\n+    \"\"\"Replace all trig functions with hyperbolic functions using\r\n+    the Osborne rule.\r\n+\r\n+    Notes\r\n+    =====\r\n+\r\n+    ``d`` is a dummy variable to prevent automatic evaluation\r\n+    of trigonometric/hyperbolic functions.\r\n+\r\n+    References\r\n+    ==========\r\n+\r\n+    https://en.wikipedia.org/wiki/Hyperbolic_function\r\n+    \"\"\"\r\n+\r\n+    def f(rv):\r\n+        if not isinstance(rv, TrigonometricFunction):\r\n+            return rv\r\n+        const, x = rv.args[0].as_independent(d, as_Add=True)\r\n+        a = x.xreplace({d: S.One}) + const*I\r\n+        if isinstance(rv, sin):\r\n+            return sinh(a)/I\r\n+        elif isinstance(rv, cos):\r\n+            return cosh(a)\r\n+        elif isinstance(rv, tan):\r\n+            return tanh(a)/I\r\n+        elif isinstance(rv, cot):\r\n+            return coth(a)*I\r\n+        elif isinstance(rv, sec):\r\n+            return sech(a)\r\n+        elif isinstance(rv, csc):\r\n+            return csch(a)*I\r\n+        else:\r\n+            raise NotImplementedError('unhandled %s' % rv.func)\r\n+\r\n+    return bottom_up(e, f)\r\n+\r\n+\r\n+def hyper_as_trig(rv):\r\n+    \"\"\"Return an expression containing hyperbolic functions in terms\r\n+    of trigonometric functions. Any trigonometric functions initially\r\n+    present are replaced with Dummy symbols and the function to undo\r\n+    the masking and the conversion back to hyperbolics is also returned. It\r\n+    should always be true that::\r\n+\r\n+        t, f = hyper_as_trig(expr)\r\n+        expr == f(t)\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import hyper_as_trig, fu\r\n+    >>> from sympy.abc import x\r\n+    >>> from sympy import cosh, sinh\r\n+    >>> eq = sinh(x)**2 + cosh(x)**2\r\n+    >>> t, f = hyper_as_trig(eq)\r\n+    >>> f(fu(t))\r\n+    cosh(2*x)\r\n+\r\n+    References\r\n+    ==========\r\n+\r\n+    https://en.wikipedia.org/wiki/Hyperbolic_function\r\n+    \"\"\"\r\n+    from sympy.simplify.simplify import signsimp\r\n+    from sympy.simplify.radsimp import collect\r\n+\r\n+    # mask off trig functions\r\n+    trigs = rv.atoms(TrigonometricFunction)\r\n+    reps = [(t, Dummy()) for t in trigs]\r\n+    masked = rv.xreplace(dict(reps))\r\n+\r\n+    # get inversion substitutions in place\r\n+    reps = [(v, k) for k, v in reps]\r\n+\r\n+    d = Dummy()\r\n+\r\n+    return _osborne(masked, d), lambda x: collect(signsimp(\r\n+        _osbornei(x, d).xreplace(dict(reps))), S.ImaginaryUnit)\r\n+\r\n+\r\n+def sincos_to_sum(expr):\r\n+    \"\"\"Convert products and powers of sin and cos to sums.\r\n+\r\n+    Applied power reduction TRpower first, then expands products, and\r\n+    converts products to sums with TR8.\r\n+\r\n+    Examples\r\n+    ========\r\n+\r\n+    >>> from sympy.simplify.fu import sincos_to_sum\r\n+    >>> from sympy.abc import x\r\n+    >>> from sympy import cos, sin\r\n+    >>> sincos_to_sum(16*sin(x)**3*cos(2*x)**2)\r\n+    7*sin(x) - 5*sin(3*x) + 3*sin(5*x) - sin(7*x)\r\n+    \"\"\"\r\n+\r\n+    if not expr.has(cos, sin):\r\n+        return expr\r\n+    else:\r\n+        return TR8(expand_mul(TRpower(expr)))\r\ndiff --git a/sympy/simplify/fu.py b/sympy/simplify/fu.py\r\nindex ad1130ef96..91377c3a9c 100644\r\n--- a/sympy/simplify/fu.py\r\n+++ b/sympy/simplify/fu.py\r\n@@ -501,10 +501,14 @@ def _f(rv):\r\n         if not (rv.is_Pow and rv.base.func == f):\r\n             return rv\r\n \r\n-        if (rv.exp < 0) == True:\r\n-            return rv\r\n-        if (rv.exp > max) == True:\r\n-            return rv\r\n+        if rv.exp.is_real:\r\n+            if rv.exp.is_negative:\r\n+                return rv\r\n+            if rv.exp > max:\r\n+                return rv\r\n+        else:\r\n+            return rv  # Return early for complex exponents\r\n+\r\n         if rv.exp == 2:\r\n             return h(g(rv.base.args[0])**2)\r\n         else:\r\ndiff --git a/test_simplify.py b/test_simplify.py\r\nnew file mode 100644\r\nindex 0000000000..a787d2f2ec\r\n--- /dev/null\r\n+++ b/test_simplify.py\r\n@@ -0,0 +1,12 @@\r\n+from sympy import Symbol, cos, I, simplify\r\n+\r\n+def test_simplify_complex_exponent():\r\n+    x = Symbol('x')\r\n+    expr = cos(x)**I\r\n+    result = simplify(expr)\r\n+    print(f\"Original expression: {expr}\")\r\n+    print(f\"Simplified expression: {result}\")\r\n+    assert result == expr, \"Simplification should not change the expression for complex exponents\"\r\n+\r\n+if __name__ == \"__main__\":\r\n+    test_simplify_complex_exponent()",
        "model_stats": {
            "accumulated_cost": 0.284868,
            "costs": [
                0.01734,
                0.022695,
                0.022983,
                0.03594,
                0.033567,
                0.036003,
                0.038265,
                0.037184999999999996,
                0.04089
            ]
        }
    }
}