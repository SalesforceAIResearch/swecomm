{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "psf__requests-863", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..aa98e367 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -149,7 +149,11 @@ class Request(object):\n         hooks = hooks or {}\n \n         for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+            if isinstance(v, list):\n+                for hook in v:\n+                    self.register_hook(event=k, hook=hook)\n+            else:\n+                self.register_hook(event=k, hook=v)\n \n         #: Session.\n         self.session = session\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "psf__requests-1963", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 425db22c..db0fcad2 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -86,9 +86,10 @@ class SessionRedirectMixin(object):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n+        last_request = req\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = last_request.copy()\n \n             resp.content  # Consume socket so it can be released\n \n@@ -99,7 +100,7 @@ class SessionRedirectMixin(object):\n             resp.close()\n \n             url = resp.headers['location']\n-            method = req.method\n+            method = last_request.method\n \n             # Handle redirection without scheme (see: RFC 1808 Section 4)\n             if url.startswith('//'):\n@@ -180,6 +181,7 @@ class SessionRedirectMixin(object):\n \n             extract_cookies_to_jar(self.cookies, prepared_request, resp.raw)\n \n+            last_request = prepared_request\n             i += 1\n             yield resp\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "psf__requests-2148", "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 1ce54470..b7bb4cba 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -386,7 +386,7 @@ class HTTPAdapter(BaseAdapter):\n                     # All is well, return the connection to the pool.\n                     conn._put_conn(low_conn)\n \n-        except socket.error as sockerr:\n+        except (socket.error, ConnectionError) as sockerr:\n             raise ConnectionError(sockerr, request=request)\n \n         except MaxRetryError as e:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "psf__requests-2317", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex d701ff2e..7015eba6 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -425,6 +425,8 @@ class Session(SessionRedirectMixin):\n             If Tuple, ('cert', 'key') pair.\n         \"\"\"\n \n+        if isinstance(method, bytes):\n+            method = method.decode('utf-8')\n         method = builtin_str(method)\n \n         # Create the Request.\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "psf__requests-2674", "model_patch": "diff --git a/requests/exceptions.py b/requests/exceptions.py\nindex 89135a80..108c5072 100644\n--- a/requests/exceptions.py\n+++ b/requests/exceptions.py\n@@ -10,6 +10,8 @@ This module contains the set of Requests' exceptions.\n from .packages.urllib3.exceptions import HTTPError as BaseHTTPError\n \n \n+import requests\n+\n class RequestException(IOError):\n     \"\"\"There was an ambiguous exception that occurred while handling your\n     request.\"\"\"\n@@ -47,9 +49,18 @@ class Timeout(RequestException):\n     \"\"\"The request timed out.\n \n     Catching this error will catch both\n-    :exc:`~requests.exceptions.ConnectTimeout` and\n-    :exc:`~requests.exceptions.ReadTimeout` errors.\n+    :exc:`~requests.exceptions.ConnectTimeout`, \n+    :exc:`~requests.exceptions.ReadTimeout`, and\n+    :exc:`~requests.packages.urllib3.exceptions.TimeoutError` errors.\n     \"\"\"\n+    def __init__(self, *args, **kwargs):\n+        if 'urllib3_timeout_error' in kwargs:\n+            self.urllib3_timeout_error = kwargs.pop('urllib3_timeout_error')\n+        else:\n+            self.urllib3_timeout_error = None\n+        super().__init__(*args, **kwargs)\n+        if isinstance(self.urllib3_timeout_error, requests.packages.urllib3.exceptions.TimeoutError):\n+            raise self\n \n \n class ConnectTimeout(ConnectionError, Timeout):\n@@ -89,6 +100,10 @@ class ChunkedEncodingError(RequestException):\n \n class ContentDecodingError(RequestException, BaseHTTPError):\n     \"\"\"Failed to decode response content\"\"\"\n+    def __init__(self, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        if any(isinstance(arg, requests.packages.urllib3.exceptions.DecodeError) for arg in args):\n+            self.__cause__ = requests.packages.urllib3.exceptions.DecodeError(*args)\n \n \n class StreamConsumedError(RequestException, TypeError):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "psf__requests-3362", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex fbb3c7e6..3e843c18 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -666,6 +666,8 @@ class Response(object):\n             if hasattr(self.raw, 'stream'):\n                 try:\n                     for chunk in self.raw.stream(chunk_size, decode_content=True):\n+                        if decode_unicode:\n+                            chunk = stream_decode_response_unicode(chunk, self)\n                         yield chunk\n                 except ProtocolError as e:\n                     raise ChunkedEncodingError(e)\n@@ -679,6 +681,8 @@ class Response(object):\n                     chunk = self.raw.read(chunk_size)\n                     if not chunk:\n                         break\n+                    if decode_unicode:\n+                        chunk = stream_decode_response_unicode(chunk, self)\n                     yield chunk\n \n             self._content_consumed = True\n@@ -694,9 +698,6 @@ class Response(object):\n \n         chunks = reused_chunks if self._content_consumed else stream_chunks\n \n-        if decode_unicode:\n-            chunks = stream_decode_response_unicode(chunks, self)\n-\n         return chunks\n \n     def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None, delimiter=None):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-11400", "model_patch": "diff --git a/sympy/printing/codeprinter.py b/sympy/printing/codeprinter.py\nindex b46da624bc..4e03fa8836 100644\n--- a/sympy/printing/codeprinter.py\n+++ b/sympy/printing/codeprinter.py\n@@ -318,8 +318,12 @@ def _print_Function(self, expr):\n                         break\n             if func is not None:\n                 return \"%s(%s)\" % (func, self.stringify(expr.args, \", \"))\n+        elif expr.func.__name__ == 'sinc':\n+            from sympy import Piecewise, sin, Ne\n+            theta = expr.args[0]\n+            piecewise_expr = Piecewise((sin(theta)/theta, Ne(theta, 0)), (1, True))\n+            return self._print(piecewise_expr)\n         elif hasattr(expr, '_imp_') and isinstance(expr._imp_, Lambda):\n-            # inlined function\n             return self._print(expr._imp_(*expr.args))\n         else:\n             return self._print_not_supported(expr)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 34a3bab3fc..6d5f3b9016 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -10,7 +10,7 @@\n from sympy.core.function import count_ops, _mexpand\n from sympy.functions.elementary.trigonometric import TrigonometricFunction\n from sympy.functions.elementary.hyperbolic import HyperbolicFunction\n-from sympy.functions import sin, cos, exp, cosh, tanh, sinh, tan, cot, coth\n+from sympy.functions import sin, cos, exp, cosh, tanh, sinh, tan, cot, coth, sinc\n \n from sympy.strategies.core import identity\n from sympy.strategies.tree import greedy\n@@ -22,6 +22,7 @@\n from sympy.polys import factor, cancel, parallel_poly_from_expr\n \n from sympy.utilities.misc import debug\n+from sympy.simplify.simplify import separatevars, cse\n \n \n \n@@ -427,51 +428,37 @@ def analyse_gens(gens, hints):\n \n def trigsimp(expr, **opts):\n     \"\"\"\n-    reduces expression by using known trig identities\n-\n-    Notes\n-    =====\n-\n-    method:\n-    - Determine the method to use. Valid choices are 'matching' (default),\n-    'groebner', 'combined', and 'fu'. If 'matching', simplify the\n-    expression recursively by targeting common patterns. If 'groebner', apply\n-    an experimental groebner basis algorithm. In this case further options\n-    are forwarded to ``trigsimp_groebner``, please refer to its docstring.\n-    If 'combined', first run the groebner basis algorithm with small\n-    default parameters, then run the 'matching' algorithm. 'fu' runs the\n-    collection of trigonometric transformations described by Fu, et al.\n-    (see the `fu` docstring).\n-\n-\n-    Examples\n-    ========\n-\n-    >>> from sympy import trigsimp, sin, cos, log\n-    >>> from sympy.abc import x, y\n-    >>> e = 2*sin(x)**2 + 2*cos(x)**2\n-    >>> trigsimp(e)\n-    2\n-\n-    Simplification occurs wherever trigonometric functions are located.\n-\n-    >>> trigsimp(log(e))\n-    log(2)\n-\n-    Using `method=\"groebner\"` (or `\"combined\"`) might lead to greater\n-    simplification.\n-\n-    The old trigsimp routine can be accessed as with method 'old'.\n-\n-    >>> from sympy import coth, tanh\n-    >>> t = 3*tanh(x)**7 - 2/coth(x)**7\n-    >>> trigsimp(t, method='old') == t\n-    True\n-    >>> trigsimp(t)\n-    tanh(x)**7\n-\n+    Simplify trigonometric expressions.\n+\n+    Parameters\n+    ==========\n+    expr : Expr\n+        The expression to be simplified.\n+    opts : dict\n+        Optional arguments that control the simplification process.\n+\n+    Options\n+    =======\n+    old : bool, optional\n+        If True, use the old trigsimp algorithm. Default is False.\n+    recursive : bool, optional\n+        If True, apply trigsimp recursively. Default is None.\n+    method : str, optional\n+        The method to use for simplification. Valid choices are 'matching' (default),\n+        'groebner', 'combined', 'fu', and 'old'. If 'matching', simplify the\n+        expression recursively by pattern matching. If 'groebner', apply an\n+        experimental groebner basis algorithm. If 'combined', first run the\n+        groebner basis algorithm with small default parameters, then run the\n+        'matching' algorithm. 'fu' runs the collection of trigonometric transformations\n+        described by Fu, et al. 'old' uses the old trigsimp algorithm.\n+\n+    Returns\n+    =======\n+    Expr\n+        The simplified expression.\n     \"\"\"\n     from sympy.simplify.fu import fu\n+    from sympy import sin, sinc\n \n     expr = sympify(expr)\n \n@@ -501,13 +488,21 @@ def traverse(e):\n             return new\n         return trigsimp_groebner(new, **opts)\n \n+    def custom_simplify(expr):\n+        I = S.ImaginaryUnit\n+        k = Wild('k')\n+        pattern1 = 1 / 2 * (-I * exp(I * k) + I * exp(-I * k))\n+        pattern2 = 1 / 2 / k * (-I * exp(I * k) + I * exp(-I * k))\n+        simplified_expr = expr.replace(pattern1, sin(k)).replace(pattern2, sinc(k))\n+        return simplified_expr\n+\n     trigsimpfunc = {\n         'fu': (lambda x: fu(x, **opts)),\n-        'matching': (lambda x: futrig(x)),\n-        'groebner': (lambda x: groebnersimp(x, **opts)),\n-        'combined': (lambda x: futrig(groebnersimp(x,\n-                               polynomial=True, hints=[2, tan]))),\n-        'old': lambda x: trigsimp_old(x, **opts),\n+        'matching': (lambda x: custom_simplify(futrig(x))),\n+        'groebner': (lambda x: custom_simplify(groebnersimp(x, **opts))),\n+        'combined': (lambda x: custom_simplify(futrig(groebnersimp(x,\n+                               polynomial=True, hints=[2, tan])))),\n+        'old': lambda x: custom_simplify(trigsimp_old(x, **opts)),\n                    }[method]\n \n     return trigsimpfunc(expr)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-11897", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 1edc712358..14031a2464 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -13,6 +13,7 @@\n from sympy.core.operations import AssocOp\n from sympy.core.containers import Tuple\n from sympy.logic.boolalg import true\n+from sympy import Integral, Piecewise, Product, Sum\n \n ## sympy.printing imports\n from sympy.printing.precedence import precedence_traditional\n@@ -381,7 +382,6 @@ def convert(expr):\n \n                     if _between_two_numbers_p[0].search(last_term_tex) and \\\n                             _between_two_numbers_p[1].match(term_tex):\n-                        # between two numbers\n                         _tex += numbersep\n                     elif _tex:\n                         _tex += separator\n@@ -391,45 +391,21 @@ def convert(expr):\n                 return _tex\n \n         if denom is S.One:\n-            # use the original expression here, since fraction() may have\n-            # altered it when producing numer and denom\n             tex += convert(expr)\n         else:\n             snumer = convert(numer)\n             sdenom = convert(denom)\n-            ldenom = len(sdenom.split())\n-            ratio = self._settings['long_frac_ratio']\n-            if self._settings['fold_short_frac'] \\\n-                    and ldenom <= 2 and not \"^\" in sdenom:\n-                # handle short fractions\n+            snum_terms = snumer.split()\n+            sdenom_terms = sdenom.split()\n+\n+            if len(sdenom_terms) == 1 and \"*\" in sdenom and denom.is_Rational:\n+                sdenom = r\"\\left(%s\\right)\" % sdenom\n+\n+            if self._settings['fold_short_frac'] and len(sdenom_terms) <= 2 and \"^\" not in sdenom:\n                 if self._needs_mul_brackets(numer, last=False):\n                     tex += r\"\\left(%s\\right) / %s\" % (snumer, sdenom)\n                 else:\n                     tex += r\"%s / %s\" % (snumer, sdenom)\n-            elif len(snumer.split()) > ratio*ldenom:\n-                # handle long fractions\n-                if self._needs_mul_brackets(numer, last=True):\n-                    tex += r\"\\frac{1}{%s}%s\\left(%s\\right)\" \\\n-                        % (sdenom, separator, snumer)\n-                elif numer.is_Mul:\n-                    # split a long numerator\n-                    a = S.One\n-                    b = S.One\n-                    for x in numer.args:\n-                        if self._needs_mul_brackets(x, last=False) or \\\n-                                len(convert(a*x).split()) > ratio*ldenom or \\\n-                                (b.is_commutative is x.is_commutative is False):\n-                            b *= x\n-                        else:\n-                            a *= x\n-                    if self._needs_mul_brackets(b, last=True):\n-                        tex += r\"\\frac{%s}{%s}%s\\left(%s\\right)\" \\\n-                            % (convert(a), sdenom, separator, convert(b))\n-                    else:\n-                        tex += r\"\\frac{%s}{%s}%s%s\" \\\n-                            % (convert(a), sdenom, separator, convert(b))\n-                else:\n-                    tex += r\"\\frac{1}{%s}%s%s\" % (sdenom, separator, snumer)\n             else:\n                 tex += r\"\\frac{%s}{%s}\" % (snumer, sdenom)\n \n@@ -461,21 +437,15 @@ def _print_Pow(self, expr):\n             if expr.base.is_Function:\n                 return self._print(expr.base, \"%s/%s\" % (p, q))\n             return r\"%s^{%s/%s}\" % (base, p, q)\n-        elif expr.exp.is_Rational and expr.exp.is_negative and expr.base.is_commutative:\n-            # Things like 1/x\n-            return self._print_Mul(expr)\n+        elif expr.exp.is_Rational and expr.exp.is_negative:\n+            base = self.parenthesize(expr.base, PRECEDENCE['Mul'] if expr.base.is_Add else PRECEDENCE['Pow'])\n+            return r\"\\frac{1}{%s^{%s}}\" % (base, self._print(-expr.exp))\n         else:\n             if expr.base.is_Function:\n                 return self._print(expr.base, self._print(expr.exp))\n             else:\n                 if expr.is_commutative and expr.exp == -1:\n-                    #solves issue 4129\n-                    #As Mul always simplify 1/x to x**-1\n-                    #The objective is achieved with this hack\n-                    #first we get the latex for -1 * expr,\n-                    #which is a Mul expression\n                     tex = self._print(S.NegativeOne * expr).strip()\n-                    #the result comes with a minus and a space, so we remove\n                     if tex[:1] == \"-\":\n                         return tex[1:].strip()\n                 tex = r\"%s^{%s}\"\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-12171", "model_patch": "diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\nindex 4c2ffd81e1..3730b3a346 100644\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -109,6 +109,13 @@ def _print_Integral(self, expr):\n     def _print_Sum(self, expr):\n         return \"Hold[Sum[\" + ', '.join(self.doprint(a) for a in expr.args) + \"]]\"\n \n+    def _print_Derivative(self, expr):\n+        return \"D[%s]\" % (self.stringify(expr.args, \", \"))\n+\n+    def _print_Float(self, expr):\n+        res = str(expr)\n+        return res.replace('e', '*^')\n+\n \n def mathematica_code(expr, **settings):\n     r\"\"\"Converts an expr to a string of the Wolfram Mathematica code\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-12236", "model_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 612b8f4607..8feada2e15 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -18,55 +18,36 @@ def apart(f, x=None, full=False, **options):\n     \"\"\"\n     Compute partial fraction decomposition of a rational function.\n \n-    Given a rational function ``f``, computes the partial fraction\n-    decomposition of ``f``. Two algorithms are available: One is based on the\n-    undertermined coefficients method, the other is Bronstein's full partial\n-    fraction decomposition algorithm.\n-\n-    The undetermined coefficients method (selected by ``full=False``) uses\n-    polynomial factorization (and therefore accepts the same options as\n-    factor) for the denominator. Per default it works over the rational\n-    numbers, therefore decomposition of denominators with non-rational roots\n-    (e.g. irrational, complex roots) is not supported by default (see options\n-    of factor).\n-\n-    Bronstein's algorithm can be selected by using ``full=True`` and allows a\n-    decomposition of denominators with non-rational roots. A human-readable\n-    result can be obtained via ``doit()`` (see examples below).\n+    Given a univariate rational function ``f``, returns the partial\n+    fraction decomposition of ``f``. The decomposition is computed\n+    over the rational numbers.\n \n-    Examples\n-    ========\n-\n-    >>> from sympy.polys.partfrac import apart\n-    >>> from sympy.abc import x, y\n-\n-    By default, using the undetermined coefficients method:\n-\n-    >>> apart(y/(x + 2)/(x + 1), x)\n-    -y/(x + 2) + y/(x + 1)\n-\n-    The undetermined coefficients method does not provide a result when the\n-    denominators roots are not rational:\n-\n-    >>> apart(y/(x**2 + x + 1), x)\n-    y/(x**2 + x + 1)\n-\n-    You can choose Bronstein's algorithm by setting ``full=True``:\n-\n-    >>> apart(y/(x**2 + x + 1), x, full=True)\n-    RootSum(_w**2 + _w + 1, Lambda(_a, (-2*_a*y/3 - y/3)/(-_a + x)))\n+    Parameters\n+    ==========\n \n-    Calling ``doit()`` yields a human-readable result:\n+    f : Expr\n+        A univariate rational function to be decomposed.\n+    x : Symbol, optional\n+        The variable with respect to which the decomposition is performed.\n+    full : bool, optional\n+        If True, perform full partial fraction decomposition.\n+    options : dict, optional\n+        Additional options to be passed to the decomposition algorithms.\n \n-    >>> apart(y/(x**2 + x + 1), x, full=True).doit()\n-    (-y/3 - 2*y*(-1/2 - sqrt(3)*I/2)/3)/(x + 1/2 + sqrt(3)*I/2) + (-y/3 -\n-        2*y*(-1/2 + sqrt(3)*I/2)/3)/(x + 1/2 - sqrt(3)*I/2)\n+    Returns\n+    =======\n \n+    Expr\n+        The partial fraction decomposition of ``f``.\n \n-    See Also\n+    Examples\n     ========\n \n-    apart_list, assemble_partfrac_list\n+    >>> from sympy import apart, symbols\n+    >>> x = symbols('x')\n+    >>> apart(1/(x**2 + 3*x + 2))\n+    1/(x + 1) - 1/(x + 2)\n+\n     \"\"\"\n     allowed_flags(options, [])\n \n@@ -84,7 +65,6 @@ def apart(f, x=None, full=False, **options):\n     except PolynomialError as msg:\n         if f.is_commutative:\n             raise PolynomialError(msg)\n-        # non-commutative\n         if f.is_Mul:\n             c, nc = f.args_cnc(split_1=False)\n             nc = f.func(*nc)\n@@ -112,7 +92,7 @@ def apart(f, x=None, full=False, **options):\n             for e in pot:\n                 try:\n                     reps.append((e, apart(e, x=x, full=full, **_options)))\n-                    pot.skip()  # this was handled successfully\n+                    pot.skip()\n                 except NotImplementedError:\n                     pass\n             return f.xreplace(dict(reps))\n@@ -130,7 +110,7 @@ def apart(f, x=None, full=False, **options):\n     poly, P = P.div(Q, auto=True)\n     P, Q = P.rat_clear_denoms(Q)\n \n-    if Q.degree() <= 1:\n+    if Q.degree() == 1:\n         partial = P/Q\n     else:\n         if not full:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 79f3035f92..3ab19704ec 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -59,10 +59,12 @@ def _entry(self, i, j, expand=True):\n \n         from sympy.core.symbol import Dummy\n         from sympy.concrete.summations import Sum\n-        from sympy.matrices import ImmutableMatrix\n+        from sympy.matrices import ImmutableMatrix, Identity\n         k = Dummy('k', integer=True)\n         if X.has(ImmutableMatrix) or Y.has(ImmutableMatrix):\n             return coeff*Add(*[X[i, k]*Y[k, j] for k in range(X.cols)])\n+        if isinstance(X, Identity) and isinstance(Y, Identity):\n+            return coeff if i == j else 0\n         result = Sum(coeff*X[i, k]*Y[k, j], (k, 0, X.cols - 1))\n         if not X.cols.is_number:\n             # Don't waste time in result.doit() if the sum bounds are symbolic\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-12454", "model_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 90ea232faf..c600fe88e2 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -1112,7 +1112,7 @@ def is_upper(self):\n         \"\"\"\n         return all(self[i, j].is_zero\n                    for i in range(1, self.rows)\n-                   for j in range(i))\n+                   for j in range(min(i, self.cols)))\n \n     @property\n     def is_zero(self):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..ee3ad3ca36 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -895,12 +895,6 @@ def __new__(cls, *args, **kwargs):\n         # counting starts from 1.\n \n         temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n-                raise ValueError('there were repeated elements.')\n         temp = set(temp)\n \n         if not is_cycle and \\\n@@ -909,18 +903,13 @@ def __new__(cls, *args, **kwargs):\n                              max(temp))\n \n         if is_cycle:\n-            # it's not necessarily canonical so we won't store\n-            # it -- use the array form instead\n-            c = Cycle()\n+            aform = list(range(max(temp) + 1))\n             for ci in args:\n-                c = c(*ci)\n-            aform = c.list()\n+                for i in range(len(ci)):\n+                    aform[ci[i-1]], aform[ci[i]] = aform[ci[i]], aform[ci[i-1]]\n         else:\n             aform = list(args)\n         if size and size > len(aform):\n-            # don't allow for truncation of permutation which\n-            # might split a cycle and lead to an invalid aform\n-            # but do allow the permutation size to be increased\n             aform.extend(list(range(len(aform), size)))\n         size = len(aform)\n         obj = Basic.__new__(cls, aform)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-13031", "model_patch": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 7ef51bc847..aac9045b53 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -378,6 +378,11 @@ def hstack(cls, *args):\n             return cls._new()\n \n         kls = type(args[0])\n+\n+        if all(arg.rows == 0 for arg in args):\n+            total_cols = sum(arg.cols for arg in args)\n+            return kls.zeros(0, total_cols)\n+\n         return reduce(kls.row_join, args)\n \n     def reshape(self, rows, cols):\n@@ -601,6 +606,10 @@ def vstack(cls, *args):\n             return cls._new()\n \n         kls = type(args[0])\n+        args = [arg for arg in args if arg.rows != 0]\n+        if len(args) == 0:\n+            return cls._new()\n+\n         return reduce(kls.col_join, args)\n \n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-13043", "model_patch": "diff --git a/sympy/integrals/intpoly.py b/sympy/integrals/intpoly.py\nindex fc72bd206f..9ccc53cc55 100644\n--- a/sympy/integrals/intpoly.py\n+++ b/sympy/integrals/intpoly.py\n@@ -569,7 +569,7 @@ def decompose(expr, separate=False):\n             degrees = [(sum(degree_list(monom, *symbols)), monom)\n                        for monom in expr.args]\n             if separate:\n-                return [monom[1] for monom in degrees]\n+                return [monom[1] for monom in sorted(degrees)]\n             else:\n                 for monom in degrees:\n                     degree, term = monom\n@@ -593,7 +593,7 @@ def decompose(expr, separate=False):\n         poly_dict[0] = expr\n \n     if separate:\n-        return list(poly_dict.values())\n+        return [poly_dict[deg] for deg in sorted(poly_dict)]\n     return poly_dict\n \n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-13146", "model_patch": "diff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex f1609aa908..c976884983 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -585,12 +585,13 @@ def shorter(*choices):\n     if short.has(TrigonometricFunction, HyperbolicFunction, ExpBase):\n         short = exptrigsimp(short, simplify=False)\n \n+    short = short.collect(Pow)  # Combine like terms with the same base and exponent\n+\n     # get rid of hollow 2-arg Mul factorization\n     hollow_mul = Transform(\n         lambda x: Mul(*x.args),\n         lambda x:\n         x.is_Mul and\n-        len(x.args) == 2 and\n         x.args[0].is_Number and\n         x.args[1].is_Add and\n         x.is_commutative)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-13177", "model_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 11c800704b..f7f48a5297 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -39,7 +39,7 @@ def doit(p, q):\n             if p.is_infinite or q.is_infinite or p is nan or q is nan:\n                 return nan\n             if (p == q or p == -q or\n-                    p.is_Pow and p.exp.is_Integer and p.base == q or\n+                    p.is_Pow and p.exp.is_Integer and p.base == q and p.base.is_integer or\n                     p.is_integer and q == 1):\n                 return S.Zero\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-13437", "model_patch": "diff --git a/sympy/functions/combinatorial/numbers.py b/sympy/functions/combinatorial/numbers.py\nindex 896729ac87..80e83ba150 100644\n--- a/sympy/functions/combinatorial/numbers.py\n+++ b/sympy/functions/combinatorial/numbers.py\n@@ -442,6 +442,8 @@ def eval(cls, n, k_sym=None, symbols=None):\n             else:\n                 r = cls._bell_incomplete_poly(int(n), int(k_sym), symbols)\n                 return r\n+        elif n is S.Infinity:\n+            return S.Infinity\n \n     def _eval_rewrite_as_Sum(self, n, k_sym=None, symbols=None):\n         from sympy import Sum\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-13471", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 7bc96e68eb..b4e17d151b 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1042,7 +1042,7 @@ def __new__(cls, num, dps=None, prec=None, precision=None):\n                 # it's a hexadecimal (coming from a pickled object)\n                 # assume that it is in standard form\n                 num = list(num)\n-                num[1] = long(num[1], 16)\n+                num[1] = int(num[1], 16)\n                 _mpf_ = tuple(num)\n             else:\n                 if len(num) == 4:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-13480", "model_patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex 2a4555d919..5fbb73c786 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -587,7 +587,7 @@ def eval(cls, arg):\n                 x, m = _peeloff_ipi(arg)\n                 if m:\n                     cothm = coth(m)\n-                    if cotm is S.ComplexInfinity:\n+                    if cothm is S.ComplexInfinity:\n                         return coth(x)\n                     else: # cothm == 0\n                         return tanh(x)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-13647", "model_patch": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 056d9bc497..6f52e412d1 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -79,14 +79,12 @@ def entry(i, j):\n         return self._new(self.rows, self.cols - 1, entry)\n \n     def _eval_col_insert(self, pos, other):\n-        cols = self.cols\n-\n         def entry(i, j):\n             if j < pos:\n                 return self[i, j]\n             elif pos <= j < pos + other.cols:\n                 return other[i, j - pos]\n-            return self[i, j - pos - other.cols]\n+            return self[i, j - other.cols]\n \n         return self._new(self.rows, self.cols + other.cols,\n                          lambda i, j: entry(i, j))\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "astropy__astropy-6938", "model_patch": "diff --git a/astropy/io/fits/fitsrec.py b/astropy/io/fits/fitsrec.py\nindex 574b4073b..cb79142dc 100644\n--- a/astropy/io/fits/fitsrec.py\n+++ b/astropy/io/fits/fitsrec.py\n@@ -1261,7 +1261,7 @@ class FITS_rec(np.recarray):\n \n         # Replace exponent separator in floating point numbers\n         if 'D' in format:\n-            output_field.replace(encode_ascii('E'), encode_ascii('D'))\n+            output_field = output_field.replace(encode_ascii('E'), encode_ascii('D'))\n \n \n def _get_recarray_field(array, key):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-10297", "model_patch": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..5741ab620 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1296,10 +1296,14 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     class_weight : dict or 'balanced', optional\n         Weights associated with classes in the form ``{class_label: weight}``.\n         If not given, all classes are supposed to have weight one.\n-\n         The \"balanced\" mode uses the values of y to automatically adjust\n         weights inversely proportional to class frequencies in the input data\n-        as ``n_samples / (n_classes * np.bincount(y))``\n+        as ``n_samples / (n_classes * np.bincount(y))``.\n+\n+    store_cv_values : boolean, optional, default=False\n+        Flag indicating if the cross-validation values corresponding to each\n+        alpha should be stored in the `cv_values_` attribute. This is only\n+        applicable when `cv=None`.\n \n     Attributes\n     ----------\n@@ -1333,10 +1337,10 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None, store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n@@ -1369,11 +1373,11 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n         if self.class_weight:\n             if sample_weight is None:\n                 sample_weight = 1.\n-            # modify the sample weights with the corresponding class weight\n             sample_weight = (sample_weight *\n                              compute_sample_weight(self.class_weight, y))\n \n         _BaseRidgeCV.fit(self, X, Y, sample_weight=sample_weight)\n+\n         return self\n \n     @property\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-13773", "model_patch": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 379a2917aa..03c86aa363 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -1,3 +1,5 @@\n+from sympy.matrices.matrices import MatrixBase\n+\n \"\"\"\n Basic methods common to all matrices to be used\n when creating more advanced matrices (e.g., matrices over rings,\n@@ -1973,6 +1975,8 @@ def __div__(self, other):\n \n     @call_highest_priority('__rmatmul__')\n     def __matmul__(self, other):\n+        if not isinstance(other, MatrixBase):\n+            raise ValueError(\"Scalar operands are not allowed, use '*' instead\")\n         return self.__mul__(other)\n \n     @call_highest_priority('__rmul__')\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-13895", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex b2832dd264..e3edba6e2a 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -256,87 +256,32 @@ def _eval_refine(self, assumptions):\n                 return -Pow(-b, e)\n \n     def _eval_power(self, other):\n-        from sympy import Abs, arg, exp, floor, im, log, re, sign\n+        from sympy import Abs, exp, log\n         b, e = self.as_base_exp()\n         if b is S.NaN:\n             return (b**e)**other  # let __new__ handle it\n \n-        s = None\n-        if other.is_integer:\n-            s = 1\n-        elif b.is_polar:  # e.g. exp_polar, besselj, var('p', polar=True)...\n-            s = 1\n-        elif e.is_real is not None:\n-            # helper functions ===========================\n-            def _half(e):\n-                \"\"\"Return True if the exponent has a literal 2 as the\n-                denominator, else None.\"\"\"\n-                if getattr(e, 'q', None) == 2:\n-                    return True\n-                n, d = e.as_numer_denom()\n-                if n.is_integer and d == 2:\n-                    return True\n-            def _n2(e):\n-                \"\"\"Return ``e`` evaluated to a Number with 2 significant\n-                digits, else None.\"\"\"\n-                try:\n-                    rv = e.evalf(2, strict=True)\n-                    if rv.is_Number:\n-                        return rv\n-                except PrecisionExhausted:\n-                    pass\n-            # ===================================================\n-            if e.is_real:\n-                # we need _half(other) with constant floor or\n-                # floor(S.Half - e*arg(b)/2/pi) == 0\n-\n-                # handle -1 as special case\n-                if e == -1:\n-                    # floor arg. is 1/2 + arg(b)/2/pi\n-                    if _half(other):\n-                        if b.is_negative is True:\n-                            return S.NegativeOne**other*Pow(-b, e*other)\n-                        if b.is_real is False:\n-                            return Pow(b.conjugate()/Abs(b)**2, other)\n-                elif e.is_even:\n-                    if b.is_real:\n-                        b = abs(b)\n-                    if b.is_imaginary:\n-                        b = abs(im(b))*S.ImaginaryUnit\n-\n-                if (abs(e) < 1) == True or e == 1:\n-                    s = 1  # floor = 0\n-                elif b.is_nonnegative:\n-                    s = 1  # floor = 0\n-                elif re(b).is_nonnegative and (abs(e) < 2) == True:\n-                    s = 1  # floor = 0\n-                elif fuzzy_not(im(b).is_zero) and abs(e) == 2:\n-                    s = 1  # floor = 0\n-                elif _half(other):\n-                    s = exp(2*S.Pi*S.ImaginaryUnit*other*floor(\n-                        S.Half - e*arg(b)/(2*S.Pi)))\n-                    if s.is_real and _n2(sign(s) - s) == 0:\n-                        s = sign(s)\n-                    else:\n-                        s = None\n-            else:\n-                # e.is_real is False requires:\n-                #     _half(other) with constant floor or\n-                #     floor(S.Half - im(e*log(b))/2/pi) == 0\n-                try:\n-                    s = exp(2*S.ImaginaryUnit*S.Pi*other*\n-                        floor(S.Half - im(e*log(b))/2/S.Pi))\n-                    # be careful to test that s is -1 or 1 b/c sign(I) == I:\n-                    # so check that s is real\n-                    if s.is_real and _n2(sign(s) - s) == 0:\n-                        s = sign(s)\n-                    else:\n-                        s = None\n-                except PrecisionExhausted:\n-                    s = None\n+        if e.is_real and b.is_negative and other.is_real:\n+            return Abs(b)**(e*other) * exp(S.ImaginaryUnit * e * other * log(b, evaluate=False))\n+\n+        if e.is_integer:\n+            return self.func(b, e*other)\n+\n+        if b.is_number and b < 0:\n+            if other.is_integer:\n+                return self.func(b, e*other)\n+\n+        if b.is_polar:\n+            return self.func(b, e*other)\n+\n+        if b.is_number and e.is_number and other.is_number:\n+            if b > 0:\n+                return self.func(b**e, other)\n+\n+        if b.is_number and b.is_real and b > 0:\n+            return self.func(b**e, other)\n \n-        if s is not None:\n-            return s*Pow(b, e*other)\n+        return None\n \n     def _eval_Mod(self, q):\n         if self.exp.is_integer and self.exp.is_positive:\ndiff --git a/sympy/simplify/powsimp.py b/sympy/simplify/powsimp.py\nindex a7fd30e118..a49c277aa7 100644\n--- a/sympy/simplify/powsimp.py\n+++ b/sympy/simplify/powsimp.py\n@@ -186,7 +186,7 @@ def recurse(arg, **kwargs):\n         for b, e in be:\n             if b in skip:\n                 continue\n-            bpos = b.is_positive or b.is_polar\n+            bpos = b.is_positive or b.is_polar or (b.is_negative and e.is_integer)\n             if bpos:\n                 binv = 1/b\n                 if b != binv and binv in c_powers:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex d4ca323e0d..d2938d0950 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -839,7 +839,7 @@ def subs(self, *args, **kwargs):\n         \"\"\"\n         from sympy.core.containers import Dict\n         from sympy.utilities import default_sort_key\n-        from sympy import Dummy, Symbol\n+        from sympy import Dummy, Symbol, limit\n \n         unordered = False\n         if len(args) == 1:\n@@ -917,9 +917,12 @@ def subs(self, *args, **kwargs):\n         else:\n             rv = self\n             for old, new in sequence:\n-                rv = rv._subs(old, new, **kwargs)\n-                if not isinstance(rv, Basic):\n-                    break\n+                try:\n+                    rv = rv._subs(old, new, **kwargs)\n+                    if not isinstance(rv, Basic):\n+                        break\n+                except ZeroDivisionError:\n+                    rv = limit(rv, old, new)\n             return rv\n \n     @cacheit\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-10508", "model_patch": "diff --git a/sklearn/preprocessing/label.py b/sklearn/preprocessing/label.py\nindex 61b8d4a21..828d9bf18 100644\n--- a/sklearn/preprocessing/label.py\n+++ b/sklearn/preprocessing/label.py\n@@ -127,6 +127,9 @@ class LabelEncoder(BaseEstimator, TransformerMixin):\n         check_is_fitted(self, 'classes_')\n         y = column_or_1d(y, warn=True)\n \n+        if len(y) == 0:\n+            return np.array([], dtype=self.classes_.dtype)\n+\n         classes = np.unique(y)\n         if len(np.intersect1d(classes, self.classes_)) < len(classes):\n             diff = np.setdiff1d(classes, self.classes_)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-13971", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 364b24a1e5..040976eef3 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1655,9 +1655,9 @@ def _print_SeqFormula(self, s):\n         else:\n             printset = tuple(s)\n \n-        return (r\"\\left\\[\"\n+        return (r\"[\"\n               + r\", \".join(self._print(el) for el in printset)\n-              + r\"\\right\\]\")\n+              + r\"]\")\n \n     _print_SeqPer = _print_SeqFormula\n     _print_SeqAdd = _print_SeqFormula\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex addcf27c50..2130f1a73c 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1791,7 +1791,7 @@ def _print_SeqFormula(self, s):\n             printset = tuple(printset)\n         else:\n             printset = tuple(s)\n-        return self._print_list(printset)\n+        return prettyForm('[{}]'.format(', '.join(map(str, printset))))\n \n     _print_SeqPer = _print_SeqFormula\n     _print_SeqAdd = _print_SeqFormula\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-14024", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 02ec6480cb..e64a814f52 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -397,6 +397,9 @@ def _n2(e):\n         if s is not None:\n             return s*Pow(b, e*other)\n \n+        if b.is_integer and b.is_negative and other.is_integer:\n+            return S.NegativeOne**(e*other) * Pow(-b, e*other)\n+\n     def _eval_Mod(self, q):\n         if self.exp.is_integer and self.exp.is_positive:\n             if q.is_integer and self.base % q == 0:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-14308", "model_patch": "diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex a048ee57f1..8f4f00bff7 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -251,6 +251,7 @@ def _pretty(self, printer=None):\n         \"\"\"Pretty Printing method. \"\"\"\n         from sympy.physics.vector.printing import VectorPrettyPrinter\n         from sympy.printing.pretty.stringpict import prettyForm\n+        from sympy.printing.pretty.pretty_symbology import vcenter\n         e = self\n \n         class Fake(object):\n@@ -289,6 +290,7 @@ def render(self, *args, **kwargs):\n                         pforms.append(pform)\n \n                 pform = prettyForm.__add__(*pforms)\n+                pform = vcenter(pforms)\n                 kwargs[\"wrap_line\"] = kwargs.get(\"wrap_line\")\n                 kwargs[\"num_columns\"] = kwargs.get(\"num_columns\")\n                 out_str = pform.render(*args, **kwargs)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-14317", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 737e16cc74..abd10fe57b 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1854,7 +1854,8 @@ def _print_PolynomialRingBase(self, expr):\n \n     def _print_Poly(self, poly):\n         cls = poly.__class__.__name__\n-        expr = self._print(poly.as_expr())\n+        monomials = sorted(poly.terms(), key=lambda term: -term[0][0])\n+        expr = self._print(poly.func.from_dict(dict(monomials), *poly.gens))\n         gens = list(map(self._print, poly.gens))\n         domain = \"domain=%s\" % self._print(poly.get_domain())\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-14396", "model_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 6e504a3057..5a09b9325f 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -459,8 +459,10 @@ def preprocess(cls, domain):\n \n                 if ground in ['Z', 'ZZ']:\n                     return sympy.polys.domains.ZZ.poly_ring(*gens)\n-                else:\n+                elif ground in ['Q', 'QQ']:\n                     return sympy.polys.domains.QQ.poly_ring(*gens)\n+                elif ground in ['R', 'RR']:\n+                    return sympy.polys.domains.RR.poly_ring(*gens)\n \n             r = cls._re_fraction.match(domain)\n \n@@ -480,7 +482,7 @@ def preprocess(cls, domain):\n                 gens = list(map(sympify, r.groups()[1].split(',')))\n                 return sympy.polys.domains.QQ.algebraic_field(*gens)\n \n-        raise OptionError('expected a valid domain specification, got %s' % domain)\n+        raise OptionError('Expected a valid domain specification, got %s' % domain)\n \n     @classmethod\n     def postprocess(cls, options):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex fe1f7236e..c68a01ace 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -461,20 +461,22 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n     # store whether originally we wanted numeric dtype\n     dtype_numeric = isinstance(dtype, six.string_types) and dtype == \"numeric\"\n \n-    dtype_orig = getattr(array, \"dtype\", None)\n-    if not hasattr(dtype_orig, 'kind'):\n-        # not a data type (e.g. a column named dtype in a pandas DataFrame)\n+    if hasattr(array, \"dtype\"):\n+        dtype_orig = array.dtype\n+    elif hasattr(array, \"dtypes\"):  # Check for pandas DataFrame\n+        dtype_orig = array.dtypes\n+    else:\n         dtype_orig = None\n \n     if dtype_numeric:\n-        if dtype_orig is not None and dtype_orig.kind == \"O\":\n+        if dtype_orig is not None and (dtype_orig.kind == \"O\" or hasattr(dtype_orig, 'kind') and any(d.kind == \"O\" for d in dtype_orig)):\n             # if input is object, convert to float.\n             dtype = np.float64\n         else:\n             dtype = None\n \n     if isinstance(dtype, (list, tuple)):\n-        if dtype_orig is not None and dtype_orig in dtype:\n+        if dtype_orig is not None and (dtype_orig in dtype or hasattr(dtype_orig, 'kind') and all(d in dtype for d in dtype_orig)):\n             # no dtype conversion required\n             dtype = None\n         else:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-11040", "model_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 3e5e729c2..0e7fe81ac 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -328,6 +328,9 @@ class KNeighborsMixin(object):\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n \n+        if not isinstance(n_neighbors, int):\n+            raise ValueError(f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}\")\n+\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\ndiff --git a/sklearn/neighbors/unsupervised.py b/sklearn/neighbors/unsupervised.py\nindex db19e8df6..aded33294 100644\n--- a/sklearn/neighbors/unsupervised.py\n+++ b/sklearn/neighbors/unsupervised.py\n@@ -115,6 +115,8 @@ class NearestNeighbors(NeighborsBase, KNeighborsMixin,\n     def __init__(self, n_neighbors=5, radius=1.0,\n                  algorithm='auto', leaf_size=30, metric='minkowski',\n                  p=2, metric_params=None, n_jobs=1, **kwargs):\n+        if not isinstance(n_neighbors, int):\n+            raise ValueError(f\"n_neighbors must be an integer, got {type(n_neighbors).__name__} instead.\")\n         super(NearestNeighbors, self).__init__(\n               n_neighbors=n_neighbors,\n               radius=radius,\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-14774", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex a3ead157c1..f3b7669e96 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -740,7 +740,7 @@ def _print_Function(self, expr, exp=None):\n                 len(args) == 1 and \\\n                 not self._needs_function_brackets(expr.args[0])\n \n-            inv_trig_table = [\"asin\", \"acos\", \"atan\", \"acot\"]\n+            inv_trig_table = [\"asin\", \"acos\", \"atan\", \"acsc\", \"asec\", \"acot\"]\n \n             # If the function is an inverse trig function, handle the style\n             if func in inv_trig_table:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-11281", "model_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..36bcd0516 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -240,6 +240,8 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n \n+        self.labels_ = self.predict(X)\n+\n         return self\n \n     def _e_step(self, X):\ndiff --git a/sklearn/mixture/bayesian_mixture.py b/sklearn/mixture/bayesian_mixture.py\nindex aef6828fa..5c670e099 100644\n--- a/sklearn/mixture/bayesian_mixture.py\n+++ b/sklearn/mixture/bayesian_mixture.py\n@@ -354,6 +354,24 @@ class BayesianGaussianMixture(BaseMixture):\n         self._check_precision_parameters(X)\n         self._checkcovariance_prior_parameter(X)\n \n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit the model to the data X and then predict the cluster labels.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+            The input data.\n+\n+        y : Ignored\n+\n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Component labels.\n+        \"\"\"\n+        self.fit(X)\n+        return self.predict(X)\n+\n     def _check_weights_parameters(self):\n         \"\"\"Check the parameter of the Dirichlet distribution.\"\"\"\n         if self.weight_concentration_prior is None:\ndiff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex d58a9e326..62febe88e 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -748,3 +748,22 @@ class GaussianMixture(BaseMixture):\n             The lower the better.\n         \"\"\"\n         return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n+\n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit the model to X and return the cluster labels.\n+\n+        Parameters\n+        ----------\n+        X : array-like of shape (n_samples, n_features)\n+            Training instances to cluster.\n+\n+        y : Ignored\n+            Not used, present for API consistency by convention.\n+\n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Component labels.\n+        \"\"\"\n+        self.fit(X)\n+        return self.predict(X)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-14817", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 0545797d5f..68c44d0ebc 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -825,7 +825,7 @@ def _print_MatAdd(self, expr):\n             if s is None:\n                 s = pform     # First element\n             else:\n-                if S(item.args[0]).is_negative:\n+                if item.is_negative:\n                     s = prettyForm(*stringPict.next(s, ' '))\n                     pform = self._print(item)\n                 else:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex f71bea25f5..ac02d51751 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -707,7 +707,7 @@ def _preprocess(self, args, expr):\n \n         Returns string form of args, and updated expr.\n         \"\"\"\n-        from sympy import Dummy, Symbol, Function, flatten\n+        from sympy import Dummy, Symbol, Function, MatrixSymbol, flatten\n         from sympy.matrices import DeferredVector\n \n         dummify = self._dummify\n@@ -725,7 +725,7 @@ def _preprocess(self, args, expr):\n                 argstrs.append(nested_argstrs)\n             elif isinstance(arg, DeferredVector):\n                 argstrs.append(str(arg))\n-            elif isinstance(arg, Symbol):\n+            elif isinstance(arg, (Symbol, MatrixSymbol)):\n                 argrep = self._argrepr(arg)\n \n                 if dummify or not self._is_safe_ident(argrep):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "astropy__astropy-7746", "model_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex d3a06f2b3..c58c98cff 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1251,6 +1251,8 @@ reduce these to 2 dimensions using the naxis kwarg.\n                 raise TypeError(\n                     \"When providing two arguments, they must be \"\n                     \"(coords[N][{0}], origin)\".format(self.naxis))\n+            if xy.size == 0:\n+                return np.array([]).reshape(0, self.naxis)\n             if self.naxis == 1 and len(xy.shape) == 1:\n                 return _return_list_of_arrays([xy], origin)\n             return _return_single_array(xy, origin)\n@@ -1265,6 +1267,8 @@ reduce these to 2 dimensions using the naxis kwarg.\n                 raise TypeError(\n                     \"When providing more than two arguments, they must be \" +\n                     \"a 1-D array for each axis, followed by an origin.\")\n+            if all(x.size == 0 for x in axes):\n+                return [np.array([]).reshape(0) for _ in axes]\n \n             return _return_list_of_arrays(axes, origin)\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-15308", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 6c58307e0c..15acf82d68 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -740,10 +740,11 @@ def _print_WedgeProduct(self, expr):\n             parenthesize=lambda x: precedence_traditional(x) <= PRECEDENCE[\"Mul\"])\n \n     def _print_Trace(self, e):\n-        D = self._print(e.arg)\n-        D = prettyForm(*D.parens('(',')'))\n-        D.baseline = D.height()//2\n-        D = prettyForm(*D.left('\\n'*(0) + 'tr'))\n+        from sympy.printing.latex import latex\n+        D = prettyForm(latex(e.arg))\n+        D = prettyForm(*D.parens('(', ')'))\n+        D.baseline = D.height() // 2\n+        D = prettyForm(*D.left('Trace'))\n         return D\n \n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-15345", "model_patch": "diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\nindex ea7e3a2d94..76d21f2ee8 100644\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -31,7 +31,7 @@\n     \"asech\": [(lambda x: True, \"ArcSech\")],\n     \"acsch\": [(lambda x: True, \"ArcCsch\")],\n     \"conjugate\": [(lambda x: True, \"Conjugate\")],\n-\n+    \"Max\": [(lambda x: True, \"Max\")],\n }\n \n \n@@ -94,6 +94,8 @@ def _print_list(self, expr):\n     _print_Tuple = _print_list\n \n     def _print_Function(self, expr):\n+        if expr.func.__name__ == 'Max':\n+            return \"Max[%s]\" % self.stringify(expr.args, \", \")\n         if expr.func.__name__ in self.known_functions:\n             cond_mfunc = self.known_functions[expr.func.__name__]\n             for cond, mfunc in cond_mfunc:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-15346", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex da2e919375..28acb0de63 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -316,14 +316,16 @@ def eval(cls, arg):\n                     return cls(narg)\n                 return None\n \n-            # https://github.com/sympy/sympy/issues/6048\n-            # transform a sine to a cosine, to avoid redundant code\n             if pi_coeff.is_Rational:\n                 x = pi_coeff % 2\n                 if x > 1:\n                     return -cls((x % 1)*S.Pi)\n                 if 2*x > 1:\n                     return cls((1 - x)*S.Pi)\n+                if x == Rational(1, 2):\n+                    return S.One\n+                if x == Rational(3, 2):\n+                    return S.NegativeOne\n                 narg = ((pi_coeff + Rational(3, 2)) % 2)*S.Pi\n                 result = cos(narg)\n                 if not isinstance(result, cos):\n@@ -570,23 +572,6 @@ def eval(cls, arg):\n                 elif pi_coeff.is_even is False:\n                     return S.Zero\n \n-            if not pi_coeff.is_Rational:\n-                narg = pi_coeff*S.Pi\n-                if narg != arg:\n-                    return cls(narg)\n-                return None\n-\n-            # cosine formula #####################\n-            # https://github.com/sympy/sympy/issues/6048\n-            # explicit calculations are preformed for\n-            # cos(k pi/n) for n = 8,10,12,15,20,24,30,40,60,120\n-            # Some other exact values like cos(k pi/240) can be\n-            # calculated using a partial-fraction decomposition\n-            # by calling cos( X ).rewrite(sqrt)\n-            cst_table_some = {\n-                3: S.Half,\n-                5: (sqrt(5) + 1)/4,\n-            }\n             if pi_coeff.is_Rational:\n                 q = pi_coeff.q\n                 p = pi_coeff.p % (2*q)\n@@ -597,10 +582,6 @@ def eval(cls, arg):\n                     narg = (1 - pi_coeff)*S.Pi\n                     return -cls(narg)\n \n-                # If nested sqrt's are worse than un-evaluation\n-                # you can require q to be in (1, 2, 3, 4, 6, 12)\n-                # q <= 12, q=15, q=20, q=24, q=30, q=40, q=60, q=120 return\n-                # expressions with 2 or fewer sqrt nestings.\n                 table2 = {\n                     12: (3, 4),\n                     20: (4, 5),\n@@ -621,9 +602,13 @@ def eval(cls, arg):\n                 if q > 12:\n                     return None\n \n+                cst_table_some = {\n+                    3: S.Half,\n+                    5: (sqrt(5) + 1)/4,\n+                }\n                 if q in cst_table_some:\n-                    cts = cst_table_some[pi_coeff.q]\n-                    return chebyshevt(pi_coeff.p, cts).expand()\n+                    cts = cst_table_some[q]\n+                    return chebyshevt(p, cts).expand()\n \n                 if 0 == q % 2:\n                     narg = (pi_coeff*2)*S.Pi\n@@ -633,7 +618,11 @@ def eval(cls, arg):\n                     x = (2*pi_coeff + 1)/2\n                     sign_cos = (-1)**((-1 if x < 0 else 1)*int(abs(x)))\n                     return sign_cos*sqrt( (1 + nval)/2 )\n-            return None\n+            else:\n+                narg = pi_coeff*S.Pi\n+                if narg != arg:\n+                    return cls(narg)\n+                return None\n \n         if arg.is_Add:\n             x, m = _peeloff_pi(arg)\ndiff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex 421bfba0a7..69d9bed829 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -584,7 +584,7 @@ def shorter(*choices):\n         expr = besselsimp(expr)\n \n     if expr.has(TrigonometricFunction, HyperbolicFunction):\n-        expr = trigsimp(expr, deep=True)\n+        expr = trigsimp(expr, deep=True, simplify=True)\n \n     if expr.has(log):\n         expr = shorter(expand_log(expr, deep=True), logcombine(expr))\ndiff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 8ba346adbe..c6056304ca 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -596,6 +596,10 @@ def signlog(expr, sign=1):\n     if newexpr.has(TrigonometricFunction):\n         newexpr = TR2i(newexpr)\n \n+    # Simplify trigonometric expressions involving rational arguments\n+    if newexpr.has(sin, cos):\n+        newexpr = newexpr.rewrite(sin, cos).rewrite(cos, sin)\n+\n     # can we ever generate an I where there was none previously?\n     if not (newexpr.has(I) and not expr.has(I)):\n         expr = newexpr\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-12471", "model_patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\nindex 1e05aba59..4dd10a9b2 100644\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -560,6 +560,11 @@ class OneHotEncoder(_BaseEncoder):\n         else:\n             X = X_temp\n \n+        if np.issubdtype(X.dtype, np.str_):\n+            max_len = max(len(cat) for cats in self.categories_ for cat in cats)\n+            if max_len > X.dtype.itemsize:\n+                X = X.astype(np.object)\n+\n         n_samples, n_features = X.shape\n \n         X_int, X_mask = self._transform(X, handle_unknown=self.handle_unknown)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-15609", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 901918674a..8923ff6791 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1438,7 +1438,7 @@ def _print_MatrixBase(self, expr):\n \n     def _print_MatrixElement(self, expr):\n         return self.parenthesize(expr.parent, PRECEDENCE[\"Atom\"], strict=True) \\\n-            + '_{%s, %s}' % (expr.i, expr.j)\n+            + '_{%s, %s}' % (self._print(expr.i), self._print(expr.j))\n \n     def _print_MatrixSlice(self, expr):\n         def latexslice(x):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-15678", "model_patch": "diff --git a/sympy/geometry/util.py b/sympy/geometry/util.py\nindex d32adc3066..442a1d2657 100644\n--- a/sympy/geometry/util.py\n+++ b/sympy/geometry/util.py\n@@ -12,7 +12,7 @@\n \"\"\"\n from __future__ import division, print_function\n \n-from sympy import Function, Symbol, solve\n+from sympy import Function, Symbol, Eq, solve\n from sympy.core.compatibility import (\n     is_sequence, range, string_types, ordered)\n from sympy.core.containers import OrderedSet\n@@ -565,17 +565,24 @@ def idiff(eq, y, x, n=1):\n     sympy.core.function.diff: explicitly differentiates wrt symbols\n \n     \"\"\"\n+    if isinstance(eq, Eq):\n+        eq = eq.lhs - eq.rhs\n+\n     if is_sequence(y):\n         dep = set(y)\n         y = y[0]\n-    elif isinstance(y, Symbol):\n+    elif isinstance(y, (Symbol, Function)):\n         dep = {y}\n     else:\n         raise ValueError(\"expecting x-dependent symbol(s) but got: %s\" % y)\n \n     f = dict([(s, Function(\n         s.name)(x)) for s in eq.free_symbols if s != x and s in dep])\n-    dydx = Function(y.name)(x).diff(x)\n+    if isinstance(y, Function):\n+        dydx = y.diff(x)\n+    else:\n+        dydx = Function(y.name)(x).diff(x)\n+\n     eq = eq.subs(f)\n     derivs = {}\n     for i in range(n):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-10914", "model_patch": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..bdeec80610 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..4a084bce03 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -214,7 +214,7 @@ class FileSystemStorage(Storage):\n \n     @cached_property\n     def file_permissions_mode(self):\n-        return self._value_or_setting(self._file_permissions_mode, settings.FILE_UPLOAD_PERMISSIONS)\n+        return self._value_or_setting(self._file_permissions_mode, settings.FILE_UPLOAD_PERMISSIONS or 0o644)\n \n     @cached_property\n     def directory_permissions_mode(self):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-10924", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0c64748ccd..6d721a85fb 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1663,6 +1663,8 @@ class FilePathField(Field):\n \n     def __init__(self, verbose_name=None, name=None, path='', match=None,\n                  recursive=False, allow_files=True, allow_folders=False, **kwargs):\n+        if callable(path):\n+            path = path()\n         self.path, self.match, self.recursive = path, match, recursive\n         self.allow_files, self.allow_folders = allow_files, allow_folders\n         kwargs.setdefault('max_length', 100)\n@@ -1688,7 +1690,10 @@ class FilePathField(Field):\n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n         if self.path != '':\n-            kwargs['path'] = self.path\n+            if callable(self.path):\n+                kwargs['path'] = self.path.__code__\n+            else:\n+                kwargs['path'] = self.path\n         if self.match is not None:\n             kwargs['match'] = self.match\n         if self.recursive is not False:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-13142", "model_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex bd34333c0..2187524c9 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -257,6 +257,10 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):\n                 best_params = self._get_parameters()\n                 best_n_iter = n_iter\n \n+        self._set_parameters(best_params)\n+        self.n_iter_ = best_n_iter\n+        self.lower_bound_ = max_lower_bound\n+\n         # Always do a final e-step to guarantee that the labels returned by\n         # fit_predict(X) are always consistent with fit(X).predict(X)\n         # for any value of max_iter and tol (and any random_state).\n@@ -269,10 +273,6 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):\n                           'or check for degenerate data.'\n                           % (init + 1), ConvergenceWarning)\n \n-        self._set_parameters(best_params)\n-        self.n_iter_ = best_n_iter\n-        self.lower_bound_ = max_lower_bound\n-\n         return log_resp.argmax(axis=1)\n \n     def _e_step(self, X):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11001", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 7649c39262..687b773587 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -353,7 +353,8 @@ class SQLCompiler:\n             # not taken into account so we strip it. When this entire method\n             # is refactored into expressions, then we can check each part as we\n             # generate it.\n-            without_ordering = self.ordering_parts.search(sql).group(1)\n+            sql_oneline = ' '.join(sql.split('\\n'))\n+            without_ordering = self.ordering_parts.search(sql_oneline).group(1)\n             params_hash = make_hashable(params)\n             if (without_ordering, params_hash) in seen:\n                 continue\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11019", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 02aa32b207..a3f419ac39 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -125,28 +125,12 @@ class Media:\n         in a certain order. In JavaScript you may not be able to reference a\n         global or in CSS you might want to override a style.\n         \"\"\"\n-        # Start with a copy of list_1.\n         combined_list = list(list_1)\n-        last_insert_index = len(list_1)\n-        # Walk list_2 in reverse, inserting each element into combined_list if\n-        # it doesn't already exist.\n-        for path in reversed(list_2):\n-            try:\n-                # Does path already exist in the list?\n-                index = combined_list.index(path)\n-            except ValueError:\n-                # Add path to combined_list since it doesn't exist.\n-                combined_list.insert(last_insert_index, path)\n-            else:\n-                if index > last_insert_index:\n-                    warnings.warn(\n-                        'Detected duplicate Media files in an opposite order:\\n'\n-                        '%s\\n%s' % (combined_list[last_insert_index], combined_list[index]),\n-                        MediaOrderConflictWarning,\n-                    )\n-                # path already exists in the list. Update last_insert_index so\n-                # that the following elements are inserted in front of this one.\n-                last_insert_index = index\n+        seen = set(list_1)\n+        for path in list_2:\n+            if path not in seen:\n+                combined_list.append(path)\n+                seen.add(path)\n         return combined_list\n \n     def __add__(self, other):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-13241", "model_patch": "diff --git a/sklearn/decomposition/kernel_pca.py b/sklearn/decomposition/kernel_pca.py\nindex bb91d0cbb..b6ef7ca3a 100644\n--- a/sklearn/decomposition/kernel_pca.py\n+++ b/sklearn/decomposition/kernel_pca.py\n@@ -13,6 +13,7 @@ from ..exceptions import NotFittedError\n from ..base import BaseEstimator, TransformerMixin, _UnstableOn32BitMixin\n from ..preprocessing import KernelCenterer\n from ..metrics.pairwise import pairwise_kernels\n+from ..utils.extmath import svd_flip\n \n \n class KernelPCA(BaseEstimator, TransformerMixin, _UnstableOn32BitMixin):\n@@ -215,6 +216,10 @@ class KernelPCA(BaseEstimator, TransformerMixin, _UnstableOn32BitMixin):\n         self.lambdas_ = self.lambdas_[indices]\n         self.alphas_ = self.alphas_[:, indices]\n \n+        # Apply svd_flip to ensure consistent sign\n+        self.alphas_, _ = svd_flip(self.alphas_, np.zeros_like(self.alphas_))\n+        self.lambdas_, _ = svd_flip(self.lambdas_.reshape(1, -1), np.zeros_like(self.lambdas_.reshape(1, -1)))\n+\n         # remove eigenvectors with a zero eigenvalue\n         if self.remove_zero_eig or self.n_components is None:\n             self.alphas_ = self.alphas_[:, self.lambdas_ > 0]\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-16106", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 1aa0ee01a2..709c0ca9fe 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -477,6 +477,20 @@ def _print_int(self, p):\n         dom_element.appendChild(self.dom.createTextNode(str(p)))\n         return dom_element\n \n+    def _print_Indexed(self, expr):\n+        base_element = self._print(expr.base)\n+        index_elements = [self._print(i) for i in expr.indices]\n+\n+        apply_element = self.dom.createElement(\"apply\")\n+        ci_element = self.dom.createElement(\"ci\")\n+        ci_element.appendChild(base_element)\n+        apply_element.appendChild(ci_element)\n+\n+        for index in index_elements:\n+            apply_element.appendChild(index)\n+\n+        return apply_element\n+\n \n class MathMLPresentationPrinter(MathMLPrinterBase):\n     \"\"\"Prints an expression to the Presentation MathML markup language.\n@@ -1270,6 +1284,16 @@ def _print_Lambda(self, e):\n         x.appendChild(mrow)\n         return x\n \n+    def _print_Indexed(self, e):\n+        x = self.dom.createElement('msub')\n+        base = self._print(e.base)\n+        indices = self.dom.createElement('mrow')\n+        for index in e.indices:\n+            indices.appendChild(self._print(index))\n+        x.appendChild(base)\n+        x.appendChild(indices)\n+        return x\n+\n \n def mathml(expr, printer='content', **settings):\n     \"\"\"Returns the MathML representation of expr. If printer is presentation then\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11039", "model_patch": "diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\nindex f0b663222a..59c6d16faf 100644\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -55,8 +55,8 @@ class Command(BaseCommand):\n                 migration_name, app_label))\n         targets = [(app_label, migration.name)]\n \n-        # Show begin/end around output only for atomic migrations\n-        self.output_transaction = migration.atomic\n+        # Show begin/end around output only for atomic migrations and if the connection can rollback DDL\n+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11049", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..93c997bf79 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1587,9 +1587,10 @@ class DurationField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n     }\n     description = _(\"Duration\")\n+    default_help_text = _(\"[DD] [[HH:]MM:]ss[.uuuuuu]\")\n \n     def get_internal_type(self):\n         return \"DurationField\"\n@@ -1633,6 +1634,7 @@ class DurationField(Field):\n     def formfield(self, **kwargs):\n         return super().formfield(**{\n             'form_class': forms.DurationField,\n+            'help_text': self.default_help_text,\n             **kwargs,\n         })\n \ndiff --git a/django/forms/fields.py b/django/forms/fields.py\nindex a977256525..490e410229 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -468,9 +468,10 @@ class DateTimeField(BaseTemporalField):\n \n class DurationField(Field):\n     default_error_messages = {\n-        'invalid': _('Enter a valid duration.'),\n+        'invalid': _('Enter a valid duration in the format [DD] [[HH:]MM:]ss[.uuuuuu].'),\n         'overflow': _('The number of days must be between {min_days} and {max_days}.')\n     }\n+    help_text = _('Enter a duration in the format [DD] [[HH:]MM:]ss[.uuuuuu].')\n \n     def prepare_value(self, value):\n         if isinstance(value, datetime.timedelta):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-13439", "model_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 7eaf9a46f..12d31d871 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -561,6 +561,9 @@ class Pipeline(_BaseComposition):\n         # check if first estimator expects pairwise input\n         return getattr(self.steps[0][1], '_pairwise', False)\n \n+    def __len__(self):\n+        return len(self.steps)\n+\n \n def _name_estimators(estimators):\n     \"\"\"Generate names for estimators.\"\"\"\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-16281", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 6d3cc05bd3..cde04402f8 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -490,10 +490,11 @@ def _print_Product(self, expr):\n         sign_height = 0\n \n         for lim in expr.limits:\n-            width = (func_height + 2) * 5 // 3 - 2\n+            width = (func_height + 2) * 3 // 2 - 2\n             sign_lines = []\n+            sign_lines.append(horizontal_chr * (width + 2))\n             sign_lines.append(corner_chr + (horizontal_chr*width) + corner_chr)\n-            for i in range(func_height + 1):\n+            for i in range(func_height):\n                 sign_lines.append(vertical_chr + (' '*width) + vertical_chr)\n \n             pretty_sign = stringPict('')\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11099", "model_patch": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..1304f20a60 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-13496", "model_patch": "diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\nindex 8a1bd3625..1ec2d3572 100644\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -173,7 +173,106 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                  n_jobs=None,\n                  behaviour='old',\n                  random_state=None,\n-                 verbose=0):\n+                 verbose=0,\n+                 warm_start=False):\n+        \"\"\"\n+        Isolation Forest Algorithm\n+\n+        Return the anomaly score of each sample using the IsolationForest algorithm\n+\n+        The IsolationForest 'isolates' observations by randomly selecting a feature\n+        and then randomly selecting a split value between the maximum and minimum\n+        values of the selected feature.\n+\n+        Since recursive partitioning can be represented by a tree structure, the\n+        number of splittings required to isolate a sample is equivalent to the path\n+        length from the root node to the terminating node.\n+\n+        This path length, averaged over a forest of such random trees, is a\n+        measure of normality and our decision function.\n+\n+        Random partitioning produces noticeably shorter paths for anomalies.\n+        Hence, when a forest of random trees collectively produce shorter path\n+        lengths for particular samples, they are highly likely to be anomalies.\n+\n+        Read more in the :ref:`User Guide <isolation_forest>`.\n+\n+        Parameters\n+        ----------\n+        n_estimators : int, optional (default=100)\n+            The number of base estimators in the ensemble.\n+\n+        max_samples : int or float, optional (default=\"auto\")\n+            The number of samples to draw from X to train each base estimator.\n+                - If int, then draw `max_samples` samples.\n+                - If float, then draw `max_samples * X.shape[0]` samples.\n+                - If \"auto\", then `max_samples=min(256, n_samples)`.\n+\n+            If max_samples is larger than the number of samples provided,\n+            all samples will be used for all trees (no sampling).\n+\n+        contamination : float in (0., 0.5), optional (default=0.1)\n+            The amount of contamination of the data set, i.e. the proportion\n+            of outliers in the data set. Used when fitting to define the threshold\n+            on the decision function. If 'auto', the decision function threshold is\n+            determined as in the original paper.\n+\n+            .. versionchanged:: 0.20\n+               The default value of ``contamination`` will change from 0.1 in 0.20\n+               to ``'auto'`` in 0.22.\n+\n+        max_features : int or float, optional (default=1.0)\n+            The number of features to draw from X to train each base estimator.\n+\n+                - If int, then draw `max_features` features.\n+                - If float, then draw `max_features * X.shape[1]` features.\n+\n+        bootstrap : boolean, optional (default=False)\n+            If True, individual trees are fit on random subsets of the training\n+            data sampled with replacement. If False, sampling without replacement\n+            is performed.\n+\n+        n_jobs : int or None, optional (default=None)\n+            The number of jobs to run in parallel for both `fit` and `predict`.\n+            ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n+            ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n+            for more details.\n+\n+        behaviour : str, default='old'\n+            Behaviour of the ``decision_function`` which can be either 'old' or\n+            'new'. Passing ``behaviour='new'`` makes the ``decision_function``\n+            change to match other anomaly detection algorithm API which will be\n+            the default behaviour in the future. As explained in details in the\n+            ``offset_`` attribute documentation, the ``decision_function`` becomes\n+            dependent on the contamination parameter, in such a way that 0 becomes\n+            its natural threshold to detect outliers.\n+\n+            .. versionadded:: 0.20\n+               ``behaviour`` is added in 0.20 for back-compatibility purpose.\n+\n+            .. deprecated:: 0.20\n+               ``behaviour='old'`` is deprecated in 0.20 and will not be possible\n+               in 0.22.\n+\n+            .. deprecated:: 0.22\n+               ``behaviour`` parameter will be deprecated in 0.22 and removed in\n+               0.24.\n+\n+        random_state : int, RandomState instance or None, optional (default=None)\n+            If int, random_state is the seed used by the random number generator;\n+            If RandomState instance, random_state is the random number generator;\n+            If None, the random number generator is the RandomState instance used\n+            by `np.random`.\n+\n+        verbose : int, optional (default=0)\n+            Controls the verbosity of the tree building process.\n+\n+        warm_start : bool, optional (default=False)\n+            When set to ``True``, reuse the solution of the previous call to fit\n+            and add more estimators to the ensemble, otherwise, just fit a whole\n+            new forest. See :term:`the Glossary <warm_start>`.\n+            \n+        \"\"\"\n         super().__init__(\n             base_estimator=ExtraTreeRegressor(\n                 max_features=1,\n@@ -187,7 +286,8 @@ class IsolationForest(BaseBagging, OutlierMixin):\n             max_features=max_features,\n             n_jobs=n_jobs,\n             random_state=random_state,\n-            verbose=verbose)\n+            verbose=verbose,\n+            warm_start=warm_start)\n \n         self.behaviour = behaviour\n         self.contamination = contamination\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-13497", "model_patch": "diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py\nindex d5d1b7fb5..80795a260 100644\n--- a/sklearn/feature_selection/mutual_info_.py\n+++ b/sklearn/feature_selection/mutual_info_.py\n@@ -247,7 +247,7 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,\n     X, y = check_X_y(X, y, accept_sparse='csc', y_numeric=not discrete_target)\n     n_samples, n_features = X.shape\n \n-    if discrete_features == 'auto':\n+    if isinstance(discrete_features, str) and discrete_features == 'auto':\n         discrete_features = issparse(X)\n \n     if isinstance(discrete_features, bool):\n@@ -259,8 +259,7 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,\n             discrete_mask = np.zeros(n_features, dtype=bool)\n             discrete_mask[discrete_features] = True\n         else:\n-            discrete_mask = discrete_features\n-\n+            discrete_mask = discrete_features.astype(bool)\n     continuous_mask = ~discrete_mask\n     if np.any(continuous_mask) and issparse(X):\n         raise ValueError(\"Sparse matrix `X` can't have continuous features.\")\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11133", "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..ffbf12a00d 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -309,7 +309,7 @@ class HttpResponse(HttpResponseBase):\n     @content.setter\n     def content(self, value):\n         # Consume iterators upon assignment to allow repeated iteration.\n-        if hasattr(value, '__iter__') and not isinstance(value, (bytes, str)):\n+        if hasattr(value, '__iter__') and not isinstance(value, (bytes, str, memoryview)):\n             content = b''.join(self.make_bytes(chunk) for chunk in value)\n             if hasattr(value, 'close'):\n                 try:\n@@ -317,6 +317,8 @@ class HttpResponse(HttpResponseBase):\n                 except Exception:\n                     pass\n         else:\n+            if isinstance(value, memoryview):\n+                value = value.tobytes()\n             content = self.make_bytes(value)\n         # Create a list of properly encoded bytestrings to support write().\n         self._container = [content]\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-16503", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 7a3de33522..781ed78087 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -629,7 +629,7 @@ def adjust(s, wid=None, how='<^>'):\n             # put the present prettyF to the right\n             prettyF = prettyForm(*prettySign.right(prettyF))\n \n-        prettyF.baseline = max_upper + sign_height//2\n+        prettyF.baseline = prettyF.height()//2\n         prettyF.binding = prettyForm.MUL\n         return prettyF\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11179", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex f2560117d2..a5e2706962 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -916,7 +916,9 @@ class Model(metaclass=ModelBase):\n \n         collector = Collector(using=using)\n         collector.collect([self], keep_parents=keep_parents)\n-        return collector.delete()\n+        result = collector.delete()\n+        self.pk = None\n+        return result\n \n     delete.alters_data = True\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-13584", "model_patch": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..940a33b59 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -66,6 +66,7 @@ BaseEstimator.__repr__ for pretty-printing estimators\"\"\"\n from inspect import signature\n import pprint\n from collections import OrderedDict\n+import numpy as np\n \n from ..base import BaseEstimator\n from .._config import get_config\n@@ -95,7 +96,7 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        if (not np.array_equal(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2903b8995..d1f655314 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -841,6 +841,49 @@ class AssertionRewriter(ast.NodeVisitor):\n         self.push_format_context()\n         # Rewrite assert into a bunch of statements.\n         top_condition, explanation = self.visit(assert_.test)\n+\n+        # Handle all() and any() calls\n+        if isinstance(assert_.test, ast.Call) and isinstance(assert_.test.func, ast.Name):\n+            func_name = assert_.test.func.id\n+            if func_name in {\"all\", \"any\"}:\n+                iterable = assert_.test.args[0]\n+                if isinstance(iterable, (ast.GeneratorExp, ast.ListComp, ast.SetComp)):\n+                    elt = iterable.elt\n+                    if isinstance(iterable, ast.GeneratorExp):\n+                        iter_var = iterable.generators[0].target\n+                        iter_iter = iterable.generators[0].iter\n+                    else:\n+                        iter_var = iterable.generators[0].target\n+                        iter_iter = iterable.generators[0].iter\n+\n+                    new_body = []\n+                    if func_name == \"all\":\n+                        new_body.append(\n+                            ast.If(\n+                                test=ast.UnaryOp(op=ast.Not(), operand=elt),\n+                                body=self.on_failure,\n+                                orelse=[],\n+                            )\n+                        )\n+                    else:  # func_name == \"any\"\n+                        new_body.append(\n+                            ast.If(\n+                                test=elt,\n+                                body=self.on_failure,\n+                                orelse=[],\n+                            )\n+                        )\n+\n+                    for_stmt = ast.For(\n+                        target=iter_var,\n+                        iter=iter_iter,\n+                        body=new_body,\n+                        orelse=[],\n+                    )\n+                    self.statements.append(for_stmt)\n+                    self.statements.append(ast.If(ast.NameConstant(True), [], self.on_failure))\n+                    return self.statements\n+\n         # If in a test module, check if directly asserting None, in order to warn [Issue #3191]\n         if self.module_path is not None:\n             self.statements.append(\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11283", "model_patch": "diff --git a/django/contrib/auth/migrations/0011_update_proxy_permissions.py b/django/contrib/auth/migrations/0011_update_proxy_permissions.py\nindex 0e66649695..2d4fe1650f 100644\n--- a/django/contrib/auth/migrations/0011_update_proxy_permissions.py\n+++ b/django/contrib/auth/migrations/0011_update_proxy_permissions.py\n@@ -24,10 +24,15 @@ def update_proxy_model_permissions(apps, schema_editor, reverse=False):\n         proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)\n         old_content_type = proxy_content_type if reverse else concrete_content_type\n         new_content_type = concrete_content_type if reverse else proxy_content_type\n-        Permission.objects.filter(\n+        existing_permissions = Permission.objects.filter(\n+            permissions_query,\n+            content_type=new_content_type,\n+        ).values_list('codename', flat=True)\n+        permissions_to_update = Permission.objects.filter(\n             permissions_query,\n             content_type=old_content_type,\n-        ).update(content_type=new_content_type)\n+        ).exclude(codename__in=existing_permissions)\n+        permissions_to_update.update(content_type=new_content_type)\n \n \n def revert_proxy_model_permissions(apps, schema_editor):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-13779", "model_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..13accdcec 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -78,7 +78,7 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n \n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pytest-dev__pytest-5221", "model_patch": "diff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 377357846..60c85684a 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -1347,6 +1347,7 @@ def _showfixtures_main(config, session):\n         else:\n             funcargspec = argname\n         tw.line(funcargspec, green=True)\n+        tw.line(\"    Scope: %s\" % fixturedef.scope)\n         loc = getlocation(fixturedef.func, curdir)\n         doc = fixturedef.func.__doc__ or \"\"\n         if doc:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pytest-dev__pytest-5227", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 757cb2797..08670d2b2 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,7 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex bd6afb12d1..68cdd6494b 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -633,17 +633,14 @@ def autowrap(expr, language=None, backend='f2py', tempdir=None, args=None,\n             name_h = binary_function(name_h, expr_h, backend='dummy')\n             expr = expr.subs(expr_h, name_h(*args_h))\n     try:\n-        routine = code_gen.routine('autofunc', expr, args)\n+        routine = code_gen.routine('autofunc', expr, args, include_unused_args=True)\n     except CodeGenArgumentListError as e:\n-        # if all missing arguments are for pure output, we simply attach them\n-        # at the end and try again, because the wrappers will silently convert\n-        # them to return values anyway.\n         new_args = []\n         for missing in e.missing_args:\n             if not isinstance(missing, OutputArgument):\n                 raise\n             new_args.append(missing.name)\n-        routine = code_gen.routine('autofunc', expr, args + new_args)\n+        routine = code_gen.routine('autofunc', expr, args + new_args, include_unused_args=True)\n \n     return code_wrapper.wrap_code(routine, helpers=helps)\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11422", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 7ca0d68fae..8937300764 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -97,13 +97,13 @@ def ensure_echo_on():\n \n \n def iter_all_python_module_files():\n-    # This is a hot path during reloading. Create a stable sorted list of\n-    # modules based on the module name and pass it to iter_modules_and_files().\n-    # This ensures cached results are returned in the usual case that modules\n-    # aren't loaded on the fly.\n     keys = sorted(sys.modules)\n     modules = tuple(m for m in map(sys.modules.__getitem__, keys) if not isinstance(m, weakref.ProxyTypes))\n-    return iter_modules_and_files(modules, frozenset(_error_files))\n+    extra_files = set(_error_files)\n+    manage_py_path = pathlib.Path(__file__).resolve().parent.parent / 'manage.py'\n+    if manage_py_path.exists():\n+        extra_files.add(str(manage_py_path))\n+    return iter_modules_and_files(modules, frozenset(extra_files))\n \n \n @functools.lru_cache(maxsize=1)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pytest-dev__pytest-5413", "model_patch": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..e19a55eb3 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -726,3 +726,6 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+\n+    def __str__(self):\n+        return str(self.excinfo.value)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-16988", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 03cf57a30b..b88493f6bb 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1262,6 +1262,9 @@ def __new__(cls, *args, **kwargs):\n         # flatten inputs to merge intersections and iterables\n         args = _sympify(args)\n \n+        # Remove duplicates\n+        args = list(set(args))\n+\n         # Reduce sets using known rules\n         if evaluate:\n             args = list(cls._new_args_filter(args))\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-17022", "model_patch": "diff --git a/sympy/printing/lambdarepr.py b/sympy/printing/lambdarepr.py\nindex 8f60434e89..949926bad9 100644\n--- a/sympy/printing/lambdarepr.py\n+++ b/sympy/printing/lambdarepr.py\n@@ -54,6 +54,9 @@ def _print_ITE(self, expr):\n     def _print_NumberSymbol(self, expr):\n         return str(expr)\n \n+    def _print_Identity(self, expr):\n+        return f\"np.eye({expr.shape[0]})\"\n+\n \n # numexpr works by altering the string passed to numexpr.evaluate\n # rather than by populating a namespace.  Thus a special printer...\ndiff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 6ec7bd891c..f470d3c5d0 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -670,6 +670,9 @@ def _print_CodegenArrayPermuteDims(self, expr):\n     def _print_CodegenArrayElementwiseAdd(self, expr):\n         return self._expand_fold_binary_op('numpy.add', expr.args)\n \n+    def _print_Identity(self, expr):\n+        return f'numpy.eye({expr.shape[0]})'\n+\n \n for k in NumPyPrinter._kf:\n     setattr(NumPyPrinter, '_print_%s' % k, _print_known_func)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-14087", "model_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..5cc46546e 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2171,7 +2171,7 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                 # all coefficients corresponding to the best scores.\n                 best_indices = np.argmax(scores, axis=1)\n                 if self.multi_class == 'ovr':\n-                    w = np.mean([coefs_paths[i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[i, :, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n                     w = np.mean([coefs_paths[:, i, best_indices[i], :]\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-14092", "model_patch": "diff --git a/sklearn/neighbors/nca.py b/sklearn/neighbors/nca.py\nindex 1d278b6e1..7f221eab5 100644\n--- a/sklearn/neighbors/nca.py\n+++ b/sklearn/neighbors/nca.py\n@@ -299,7 +299,7 @@ class NeighborhoodComponentsAnalysis(BaseEstimator, TransformerMixin):\n \n         # Check the preferred dimensionality of the projected space\n         if self.n_components is not None:\n-            check_scalar(self.n_components, 'n_components', int, 1)\n+            check_scalar(self.n_components, 'n_components', (int, np.integer), 1)\n \n             if self.n_components > X.shape[1]:\n                 raise ValueError('The preferred dimensionality of the '\n@@ -319,7 +319,7 @@ class NeighborhoodComponentsAnalysis(BaseEstimator, TransformerMixin):\n                                          self.components_.shape[1]))\n \n         check_scalar(self.max_iter, 'max_iter', int, 1)\n-        check_scalar(self.tol, 'tol', float, 0.)\n+        check_scalar(self.tol, 'tol', (float, np.floating), 0.)\n         check_scalar(self.verbose, 'verbose', int, 0)\n \n         if self.callback is not None:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pytest-dev__pytest-5495", "model_patch": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..81d392692 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -259,9 +259,16 @@ def _compare_eq_sequence(left, right, verbose=0):\n     len_right = len(right)\n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n-            explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n-            ]\n+            if isinstance(left, bytes) and isinstance(right, bytes):\n+                explanation += [\n+                    \"At index {} diff: {!r} ({}) != {!r} ({})\".format(\n+                        i, left[i], chr(left[i]), right[i], chr(right[i])\n+                    )\n+                ]\n+            else:\n+                explanation += [\n+                    \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                ]\n             break\n     len_diff = len_left - len_right\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-17139", "model_patch": "diff --git a/sympy/simplify/fu.py b/sympy/simplify/fu.py\nindex ad1130ef96..af6960ee16 100644\n--- a/sympy/simplify/fu.py\n+++ b/sympy/simplify/fu.py\n@@ -501,6 +501,8 @@ def _f(rv):\n         if not (rv.is_Pow and rv.base.func == f):\n             return rv\n \n+        if rv.exp.has(I):\n+            return rv\n         if (rv.exp < 0) == True:\n             return rv\n         if (rv.exp > max) == True:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11564", "model_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex ba3b62620d..d4d6ebcecd 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -145,7 +145,12 @@ class HashedFilesMixin:\n         \"\"\"\n         Return the non-hashed URL in DEBUG mode.\n         \"\"\"\n-        return self._url(self.stored_name, name, force)\n+        url = self._url(self.stored_name, name, force)\n+        request = self.context.get('request', None)\n+        if request and 'SCRIPT_NAME' in request.META:\n+            script_name = request.META['SCRIPT_NAME']\n+            url = posixpath.join(script_name, url.lstrip('/'))\n+        return url\n \n     def url_converter(self, name, hashed_files, template=None):\n         \"\"\"\ndiff --git a/django/template/context_processors.py b/django/template/context_processors.py\nindex 0e9efb2f69..a0c97ff699 100644\n--- a/django/template/context_processors.py\n+++ b/django/template/context_processors.py\n@@ -67,14 +67,20 @@ def static(request):\n     \"\"\"\n     Add static-related context variables to the context.\n     \"\"\"\n-    return {'STATIC_URL': settings.STATIC_URL}\n+    script_name = request.META.get('SCRIPT_NAME', '')\n+    static_url = script_name + settings.STATIC_URL if script_name else settings.STATIC_URL\n+    return {'STATIC_URL': static_url}\n \n \n def media(request):\n     \"\"\"\n     Add media-related context variables to the context.\n     \"\"\"\n-    return {'MEDIA_URL': settings.MEDIA_URL}\n+    media_url = settings.MEDIA_URL\n+    script_name = request.META.get('SCRIPT_NAME', '')\n+    if script_name:\n+        media_url = script_name + media_url\n+    return {'MEDIA_URL': media_url}\n \n \n def request(request):\ndiff --git a/django/templatetags/static.py b/django/templatetags/static.py\nindex 39712aaba0..acd6f16e3b 100644\n--- a/django/templatetags/static.py\n+++ b/django/templatetags/static.py\n@@ -104,6 +104,9 @@ class StaticNode(template.Node):\n \n     def render(self, context):\n         url = self.url(context)\n+        request = context.get('request')\n+        if request and 'SCRIPT_NAME' in request.META:\n+            url = urljoin(request.META['SCRIPT_NAME'], url)\n         if context.autoescape:\n             url = conditional_escape(url)\n         if self.varname is None:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11583", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 25c3b44250..0b46e0a714 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -139,9 +139,9 @@ def iter_modules_and_files(modules, extra_files):\n         path = Path(filename)\n         try:\n             resolved_path = path.resolve(strict=True).absolute()\n-        except FileNotFoundError:\n-            # The module could have been removed, don't fail loudly if this\n-            # is the case.\n+        except (FileNotFoundError, ValueError):\n+            # The module could have been removed or there could be an embedded null byte,\n+            # don't fail loudly if this is the case.\n             continue\n         results.add(resolved_path)\n     return frozenset(results)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11620", "model_patch": "diff --git a/django/urls/converters.py b/django/urls/converters.py\nindex bb8478e32f..49b88fbee9 100644\n--- a/django/urls/converters.py\n+++ b/django/urls/converters.py\n@@ -6,7 +6,10 @@ class IntConverter:\n     regex = '[0-9]+'\n \n     def to_python(self, value):\n-        return int(value)\n+        try:\n+            return int(value)\n+        except ValueError:\n+            raise Http404(f\"Invalid integer value: {value}\")\n \n     def to_url(self, value):\n         return str(value)\n@@ -16,7 +19,10 @@ class StringConverter:\n     regex = '[^/]+'\n \n     def to_python(self, value):\n-        return value\n+        try:\n+            return value\n+        except ValueError:\n+            raise Http404(\"Value does not match the expected format.\")\n \n     def to_url(self, value):\n         return value\n@@ -26,7 +32,10 @@ class UUIDConverter:\n     regex = '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'\n \n     def to_python(self, value):\n-        return uuid.UUID(value)\n+        try:\n+            return uuid.UUID(value)\n+        except ValueError:\n+            raise Http404(f\"Invalid UUID value: {value}\")\n \n     def to_url(self, value):\n         return str(value)\ndiff --git a/django/views/debug.py b/django/views/debug.py\nindex cb3e8c7ec1..ac86c1b118 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -458,58 +458,61 @@ class ExceptionReporter:\n \n def technical_404_response(request, exception):\n     \"\"\"Create a technical 404 error response. `exception` is the Http404.\"\"\"\n-    try:\n-        error_url = exception.args[0]['path']\n-    except (IndexError, TypeError, KeyError):\n-        error_url = request.path_info[1:]  # Trim leading slash\n+    if settings.DEBUG:\n+        try:\n+            error_url = exception.args[0]['path']\n+        except (IndexError, TypeError, KeyError):\n+            error_url = request.path_info[1:]  # Trim leading slash\n \n-    try:\n-        tried = exception.args[0]['tried']\n-    except (IndexError, TypeError, KeyError):\n-        tried = []\n-    else:\n-        if (not tried or (                  # empty URLconf\n-            request.path == '/' and\n-            len(tried) == 1 and             # default URLconf\n-            len(tried[0]) == 1 and\n-            getattr(tried[0][0], 'app_name', '') == getattr(tried[0][0], 'namespace', '') == 'admin'\n-        )):\n-            return default_urlconf(request)\n-\n-    urlconf = getattr(request, 'urlconf', settings.ROOT_URLCONF)\n-    if isinstance(urlconf, types.ModuleType):\n-        urlconf = urlconf.__name__\n-\n-    caller = ''\n-    try:\n-        resolver_match = resolve(request.path)\n-    except Resolver404:\n-        pass\n-    else:\n-        obj = resolver_match.func\n+        try:\n+            tried = exception.args[0]['tried']\n+        except (IndexError, TypeError, KeyError):\n+            tried = []\n+        else:\n+            if (not tried or (                  # empty URLconf\n+                request.path == '/' and\n+                len(tried) == 1 and             # default URLconf\n+                len(tried[0]) == 1 and\n+                getattr(tried[0][0], 'app_name', '') == getattr(tried[0][0], 'namespace', '') == 'admin'\n+            )):\n+                return default_urlconf(request)\n+\n+        urlconf = getattr(request, 'urlconf', settings.ROOT_URLCONF)\n+        if isinstance(urlconf, types.ModuleType):\n+            urlconf = urlconf.__name__\n+\n+        caller = ''\n+        try:\n+            resolver_match = resolve(request.path)\n+        except Resolver404:\n+            pass\n+        else:\n+            obj = resolver_match.func\n \n-        if hasattr(obj, '__name__'):\n-            caller = obj.__name__\n-        elif hasattr(obj, '__class__') and hasattr(obj.__class__, '__name__'):\n-            caller = obj.__class__.__name__\n+            if hasattr(obj, '__name__'):\n+                caller = obj.__name__\n+            elif hasattr(obj.__class__, '__name__'):\n+                caller = obj.__class__.__name__\n \n-        if hasattr(obj, '__module__'):\n-            module = obj.__module__\n-            caller = '%s.%s' % (module, caller)\n+            if hasattr(obj, '__module__'):\n+                module = obj.__module__\n+                caller = '%s.%s' % (module, caller)\n \n-    with Path(CURRENT_DIR, 'templates', 'technical_404.html').open(encoding='utf-8') as fh:\n-        t = DEBUG_ENGINE.from_string(fh.read())\n-    c = Context({\n-        'urlconf': urlconf,\n-        'root_urlconf': settings.ROOT_URLCONF,\n-        'request_path': error_url,\n-        'urlpatterns': tried,\n-        'reason': str(exception),\n-        'request': request,\n-        'settings': get_safe_settings(),\n-        'raising_view_name': caller,\n-    })\n-    return HttpResponseNotFound(t.render(c), content_type='text/html')\n+        with Path(CURRENT_DIR, 'templates', 'technical_404.html').open(encoding='utf-8') as fh:\n+            t = DEBUG_ENGINE.from_string(fh.read())\n+        c = Context({\n+            'urlconf': urlconf,\n+            'root_urlconf': settings.ROOT_URLCONF,\n+            'request_path': error_url,\n+            'urlpatterns': tried,\n+            'reason': str(exception),\n+            'request': request,\n+            'settings': get_safe_settings(),\n+            'raising_view_name': caller,\n+        })\n+        return HttpResponseNotFound(t.render(c), content_type='text/html')\n+    else:\n+        return HttpResponseNotFound(\"A server error occurred. Please contact the administrator.\")\n \n \n def default_urlconf(request):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pytest-dev__pytest-5692", "model_patch": "diff --git a/src/_pytest/junitxml.py b/src/_pytest/junitxml.py\nindex 15c630b1d..c147f4c4c 100644\n--- a/src/_pytest/junitxml.py\n+++ b/src/_pytest/junitxml.py\n@@ -657,6 +657,9 @@ class LogXML:\n         )\n         logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n \n+        hostname = os.uname()[1]\n+        timestamp = time.strftime(\"%Y-%m-%dT%H:%M:%S\", time.localtime(suite_stop_time))\n+\n         suite_node = Junit.testsuite(\n             self._get_global_properties_node(),\n             [x.to_xml() for x in self.node_reporters_ordered],\n@@ -666,6 +669,8 @@ class LogXML:\n             skipped=self.stats[\"skipped\"],\n             tests=numtests,\n             time=\"%.3f\" % suite_time_delta,\n+            hostname=hostname,\n+            timestamp=timestamp,\n         )\n         logfile.write(Junit.testsuites([suite_node]).unicode(indent=0))\n         logfile.close()\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11630", "model_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..3d45b16459 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -19,7 +19,7 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            db_table_models[(model._meta.db_table, model._state.db)].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,12 +35,12 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n+    for (db_table, db_name), model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n             errors.append(\n                 Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    \"db_table '%s' in database '%s' is used by multiple models: %s.\"\n+                    % (db_table, db_name, ', '.join(db_table_models[(db_table, db_name)])),\n                     obj=db_table,\n                     id='models.E028',\n                 )\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 9ce46e3f73..1d594e04fe 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -156,6 +156,12 @@ class Field(RegisterLookupMixin):\n         if isinstance(choices, collections.abc.Iterator):\n             choices = list(choices)\n         self.choices = choices\n+        if choices and max_length is not None:\n+            longest_choice = max(str(choice[0]) for choice in choices)\n+            if len(longest_choice) > max_length:\n+                raise ValueError(\n+                    f\"The longest choice ({longest_choice}) is longer than max_length ({max_length}).\"\n+                )\n         self.help_text = help_text\n         self.db_index = db_index\n         self.db_column = db_column\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-14894", "model_patch": "diff --git a/sklearn/svm/base.py b/sklearn/svm/base.py\nindex 64cebe837..e59affefb 100644\n--- a/sklearn/svm/base.py\n+++ b/sklearn/svm/base.py\n@@ -286,12 +286,15 @@ class BaseLibSVM(BaseEstimator, metaclass=ABCMeta):\n             n_class = 1\n         n_SV = self.support_vectors_.shape[0]\n \n-        dual_coef_indices = np.tile(np.arange(n_SV), n_class)\n-        dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,\n-                                     dual_coef_indices.size / n_class)\n-        self.dual_coef_ = sp.csr_matrix(\n-            (dual_coef_data, dual_coef_indices, dual_coef_indptr),\n-            (n_class, n_SV))\n+        if n_SV == 0:\n+            self.dual_coef_ = sp.csr_matrix((n_class, 0))\n+        else:\n+            dual_coef_indices = np.tile(np.arange(n_SV), n_class)\n+            dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,\n+                                         dual_coef_indices.size / n_class)\n+            self.dual_coef_ = sp.csr_matrix(\n+                (dual_coef_data, dual_coef_indices, dual_coef_indptr),\n+                (n_class, n_SV))\n \n     def predict(self, X):\n         \"\"\"Perform regression on samples in X.\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-14983", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..47a975a4e 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1216,6 +1216,9 @@ class RepeatedKFold(_RepeatedSplits):\n         super().__init__(\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return f\"RepeatedKFold(n_splits={self.cvargs['n_splits']}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n+\n \n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n@@ -1269,6 +1272,9 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n         super().__init__(\n             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return f\"RepeatedStratifiedKFold(n_splits={self.cvargs['n_splits']}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n+\n \n class BaseShuffleSplit(metaclass=ABCMeta):\n     \"\"\"Base class for ShuffleSplit and StratifiedShuffleSplit\"\"\"\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-17630", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 95302a05ca..8d426b67f7 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -164,7 +164,12 @@ def structurally_equal(self, other):\n     def _blockmul(self, other):\n         if (isinstance(other, BlockMatrix) and\n                 self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n+            result_blocks = self.blocks * other.blocks\n+            for i in range(result_blocks.shape[0]):\n+                for j in range(result_blocks.shape[1]):\n+                    if result_blocks[i, j] == 0:\n+                        result_blocks[i, j] = ZeroMatrix(self.blocks[i, 0].rows, other.blocks[0, j].cols)\n+            return BlockMatrix(result_blocks)\n \n         return self * other\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8e55bd092d..d2411e08e6 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1739,6 +1739,9 @@ class Query(BaseExpression):\n             query.where.add(lookup, AND)\n             query.external_aliases.add(alias)\n \n+        # Ensure the group by clause is preserved correctly\n+        query.group_by = self.group_by\n+\n         condition, needed_inner = self.build_filter(\n             ('%s__in' % trimmed_prefix, query),\n             current_negated=True, branch_negated=True, can_reuse=can_reuse)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11815", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 27b5cbd379..4622b0fcd8 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -120,9 +120,9 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        v_string, v_imports = serializer_factory(self.value.value).serialize()\n+        v_string, v_imports = serializer_factory(self.value.name).serialize()\n         imports = {'import %s' % module, *v_imports}\n-        return \"%s.%s(%s)\" % (module, enum_class.__name__, v_string), imports\n+        return \"%s.%s[%s]\" % (module, enum_class.__name__, v_string), imports\n \n \n class FloatSerializer(BaseSimpleSerializer):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c978c47be..7983013cd3 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -213,6 +213,19 @@ def __add__(self, other):\n         sympy.geometry.point.Point.translate\n \n         \"\"\"\n+        if isinstance(other, sympy.Mul):\n+            factors = other.args\n+            point_factor = None\n+            scalar_factors = []\n+            for factor in factors:\n+                if isinstance(factor, Point):\n+                    point_factor = factor\n+                else:\n+                    scalar_factors.append(factor)\n+            if point_factor:\n+                scalar = sympy.Mul(*scalar_factors)\n+                other = Point([scalar * coord for coord in point_factor.args], evaluate=False)\n+\n         try:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11848", "model_patch": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..272cd5c937 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -176,10 +176,11 @@ def parse_http_date(date):\n     try:\n         year = int(m.group('year'))\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n-            else:\n-                year += 1900\n+            current_year = datetime.datetime.utcnow().year\n+            current_century = current_year // 100 * 100\n+            year += current_century\n+            if year > current_year + 50:\n+                year -= 100\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pydata__xarray-3364", "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex ecae2566..ac427744 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -1,4 +1,5 @@\n import pandas as pd\n+import numpy as np\n \n from . import dtypes, utils\n from .alignment import align\n@@ -313,11 +314,10 @@ def _dataset_concat(\n \n         for ds in datasets:\n             absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError(\n-                    \"variables %r are present in some datasets but not others. \"\n-                    % absent_merge_vars\n-                )\n+            for var in absent_merge_vars:\n+                for ds in datasets:\n+                    if var not in ds.variables:\n+                        ds[var] = Variable((), np.nan)\n \n             for var in variables_to_merge:\n                 to_merge[var].append(ds.variables[var])\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11905", "model_patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..6f800d4823 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -462,6 +462,11 @@ class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+    def __init__(self, lhs, rhs):\n+        if not isinstance(rhs, bool):\n+            raise ValueError(\"The value for __isnull must be a boolean.\")\n+        super().__init__(lhs, rhs)\n+\n     def as_sql(self, compiler, connection):\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11910", "model_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex 402dae2829..b131642c7a 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -352,6 +352,9 @@ class RenameField(FieldOperation):\n                                 self.new_name if to_field_name == self.old_name else to_field_name\n                                 for to_field_name in to_fields\n                             ])\n+                        # Fix ForeignKey to_field to refer to the new field.\n+                        if hasattr(field, 'to_field') and field.to_field == self.old_name:\n+                            field.to_field = self.new_name\n         state.reload_model(app_label, self.model_name_lower, delay=delay)\n \n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11964", "model_patch": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex bbe362a6ab..7a3ae04c5a 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -65,7 +65,9 @@ class Choices(enum.Enum, metaclass=ChoicesMeta):\n \n class IntegerChoices(int, Choices):\n     \"\"\"Class for creating enumerated integer choices.\"\"\"\n-    pass\n+\n+    def __str__(self):\n+        return str(self.value)\n \n \n class TextChoices(str, Choices):\n@@ -73,3 +75,6 @@ class TextChoices(str, Choices):\n \n     def _generate_next_value_(name, start, count, last_values):\n         return name\n+\n+    def __str__(self):\n+        return str(self.value)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-11999", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0a5e5ff673..def23b2732 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -939,8 +939,10 @@ class Model(metaclass=ModelBase):\n     delete.alters_data = True\n \n     def _get_FIELD_display(self, field):\n+        custom_display_method = f'get_{field.name}_display'\n+        if hasattr(self, custom_display_method):\n+            return getattr(self, custom_display_method)()\n         value = getattr(self, field.attname)\n-        # force_str() to coerce lazy strings.\n         return force_str(dict(field.flatchoices).get(value, value), strings_only=True)\n \n     def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pytest-dev__pytest-6116", "model_patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 843c5b5f7..78c580395 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -107,6 +107,7 @@ def pytest_addoption(parser):\n \n     group = parser.getgroup(\"collect\", \"collection\")\n     group.addoption(\n+        \"-C\",\n         \"--collectonly\",\n         \"--collect-only\",\n         action=\"store_true\",\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-15512", "model_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 4806afee9..096501b65 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -200,6 +200,12 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n     else:\n         if verbose:\n             print(\"Did not converge\")\n+        labels = np.array([-1] * n_samples)\n+        cluster_centers_indices = []\n+        if return_n_iter:\n+            return cluster_centers_indices, labels, it + 1\n+        else:\n+            return cluster_centers_indices, labels\n \n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n@@ -388,7 +394,11 @@ class AffinityPropagation(ClusterMixin, BaseEstimator):\n                 convergence_iter=self.convergence_iter, damping=self.damping,\n                 copy=self.copy, verbose=self.verbose, return_n_iter=True)\n \n-        if self.affinity != \"precomputed\":\n+        if self.n_iter_ == self.max_iter:\n+            self.cluster_centers_indices_ = []\n+            self.labels_ = [-1] * X.shape[0]\n+\n+        if self.affinity != \"precomputed\" and self.cluster_centers_indices_:\n             self.cluster_centers_ = X[self.cluster_centers_indices_].copy()\n \n         return self\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-15535", "model_patch": "diff --git a/sklearn/metrics/cluster/_supervised.py b/sklearn/metrics/cluster/_supervised.py\nindex 4bddae35c..b21f509a1 100644\n--- a/sklearn/metrics/cluster/_supervised.py\n+++ b/sklearn/metrics/cluster/_supervised.py\n@@ -19,6 +19,7 @@ from math import log\n \n import numpy as np\n from scipy import sparse as sp\n+from sklearn.preprocessing import LabelEncoder\n \n from ._expected_mutual_info_fast import expected_mutual_information\n from ...utils.validation import check_array, check_consistent_length\n@@ -43,10 +44,10 @@ def check_clusterings(labels_true, labels_pred):\n         The predicted labels.\n     \"\"\"\n     labels_true = check_array(\n-        labels_true, ensure_2d=False, ensure_min_samples=0\n+        labels_true, ensure_2d=False, ensure_min_samples=0, dtype=None\n     )\n     labels_pred = check_array(\n-        labels_pred, ensure_2d=False, ensure_min_samples=0\n+        labels_pred, ensure_2d=False, ensure_min_samples=0, dtype=None\n     )\n \n     # input checks\n@@ -617,6 +618,9 @@ def mutual_info_score(labels_true, labels_pred, contingency=None):\n     \"\"\"\n     if contingency is None:\n         labels_true, labels_pred = check_clusterings(labels_true, labels_pred)\n+        le = LabelEncoder()\n+        labels_true = le.fit_transform(labels_true)\n+        labels_pred = le.fit_transform(labels_pred)\n         contingency = contingency_matrix(labels_true, labels_pred, sparse=True)\n     else:\n         contingency = check_array(contingency,\n@@ -624,11 +628,9 @@ def mutual_info_score(labels_true, labels_pred, contingency=None):\n                                   dtype=[int, np.int32, np.int64])\n \n     if isinstance(contingency, np.ndarray):\n-        # For an array\n         nzx, nzy = np.nonzero(contingency)\n         nz_val = contingency[nzx, nzy]\n     elif sp.issparse(contingency):\n-        # For a sparse matrix\n         nzx, nzy, nz_val = sp.find(contingency)\n     else:\n         raise ValueError(\"Unsupported type for 'contingency': %s\" %\n@@ -639,7 +641,6 @@ def mutual_info_score(labels_true, labels_pred, contingency=None):\n     pj = np.ravel(contingency.sum(axis=0))\n     log_contingency_nm = np.log(nz_val)\n     contingency_nm = nz_val / contingency_sum\n-    # Don't need to calculate the full outer product, just for non-zeroes\n     outer = (pi.take(nzx).astype(np.int64, copy=False)\n              * pj.take(nzy).astype(np.int64, copy=False))\n     log_outer = -np.log(outer) + log(pi.sum()) + log(pj.sum())\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-12113", "model_patch": "diff --git a/django/db/backends/sqlite3/creation.py b/django/db/backends/sqlite3/creation.py\nindex d97052f52d..aedda0d39a 100644\n--- a/django/db/backends/sqlite3/creation.py\n+++ b/django/db/backends/sqlite3/creation.py\n@@ -46,6 +46,8 @@ class DatabaseCreation(BaseDatabaseCreation):\n                 else:\n                     self.log('Tests cancelled.')\n                     sys.exit(1)\n+        # Set timeout to prevent database locking issues\n+        self.connection.settings_dict[\"OPTIONS\"] = {\"timeout\": 20}\n         return test_database_name\n \n     def get_test_db_clone_settings(self, suffix):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-12125", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..98d127c8f9 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -196,6 +196,11 @@ class IterableSerializer(BaseSerializer):\n class ModelFieldSerializer(DeconstructableSerializer):\n     def serialize(self):\n         attr_name, path, args, kwargs = self.value.deconstruct()\n+        if hasattr(self.value, 'model') and hasattr(self.value.model, '__module__'):\n+            model_module = self.value.model.__module__\n+            model_name = self.value.model.__name__\n+            if path.startswith(model_module) and not path.startswith(f\"{model_module}.{model_name}\"):\n+                path = f\"{model_module}.{model_name}.{path.split('.')[-1]}\"\n         return self.serialize_deconstructed(path, args, kwargs)\n \n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-12184", "model_patch": "diff --git a/django/conf/urls/__init__.py b/django/conf/urls/__init__.py\nindex 7bda34516b..095faf8421 100644\n--- a/django/conf/urls/__init__.py\n+++ b/django/conf/urls/__init__.py\n@@ -11,3 +11,8 @@ handler500 = defaults.server_error\n \n def url(regex, view, kwargs=None, name=None):\n     return re_path(regex, view, kwargs, name)\n+\n+urlpatterns += [\n+    ...\n+    re_path(r'^module/(?:(?P<format>html|json|xml))?/?$', views.modules, name='modules'),\n+]\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-18057", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex 24d89897f7..d1cd5d30eb 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -120,20 +120,13 @@ def _hashable_content(self):\n         return self._args\n \n     def __eq__(self, other):\n-        try:\n-            other = sympify(other)\n-            if not isinstance(other, Expr):\n-                return False\n-        except (SympifyError, SyntaxError):\n+        if not isinstance(other, Expr):\n             return False\n-        # check for pure number expr\n-        if  not (self.is_Number and other.is_Number) and (\n-                type(self) != type(other)):\n+        if not (self.is_Number and other.is_Number) and (type(self) != type(other)):\n             return False\n         a, b = self._hashable_content(), other._hashable_content()\n         if a != b:\n             return False\n-        # check number *in* an expression\n         for a, b in zip(a, b):\n             if not isinstance(a, Expr):\n                 continue\ndiff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex ed4ea6ce5e..2d1d15d69f 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -385,6 +385,8 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n         expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n     except (TokenError, SyntaxError) as exc:\n         raise SympifyError('could not parse %r' % a, exc)\n+    except AttributeError as exc:\n+        raise SympifyError('Attribute error during parsing %r' % a, exc)\n \n     return expr\n \ndiff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 2ab43d9b31..b2269d55cc 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -899,8 +899,8 @@ def eval_expr(code, local_dict, global_dict):\n \n     Generally, ``parse_expr`` should be used.\n     \"\"\"\n-    expr = eval(\n-        code, global_dict, local_dict)  # take local objects in preference\n+    expr = compile(code, '<string>', 'eval')\n+    expr = eval(expr, global_dict, local_dict)  # take local objects in preference\n \n     return expr\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-18087", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 7ca05f0304..11aa5d1a09 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -468,6 +468,7 @@ def trigsimp(expr, **opts):\n \n     \"\"\"\n     from sympy.simplify.fu import fu\n+    from sympy import Abs\n \n     expr = sympify(expr)\n \n@@ -475,6 +476,9 @@ def trigsimp(expr, **opts):\n     if _eval_trigsimp is not None:\n         return _eval_trigsimp(**opts)\n \n+    expr = expr.replace(lambda expr: expr.is_Pow and expr.base.is_Function and isinstance(expr.base, sin) and expr.exp == 2,\n+                        lambda expr: Abs(sin(expr.base.args[0])))\n+\n     old = opts.pop('old', False)\n     if not old:\n         opts.pop('deep', None)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6092e35dab..cdc786c1a2 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -178,7 +178,7 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n             if not is_sequence(syms):\n                 raise TypeError(\n                     'syms should be given as a sequence, e.g. a list')\n-            syms = [i for i in syms if i in var]\n+            syms = sorted([i for i in syms if i in var], key=default_sort_key)\n             if syms != var:\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n                 return {tuple([t[dict_sym_index[i]] for i in var])\n@@ -331,6 +331,7 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n     if not sols and eq.subs(zip(var, null)).is_zero:\n         sols.add(null)\n     final_soln = set([])\n+    sorted_syms = sorted(syms, key=default_sort_key) if syms else var\n     for sol in sols:\n         if all(_is_int(s) for s in sol):\n             if do_permute_signs:\n@@ -347,7 +348,8 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n             else:\n                 final_soln.add(sol)\n         else:\n-                final_soln.add(sol)\n+            final_soln.add(sol)\n+    final_soln = {tuple(sol[sorted_syms.index(s)] for s in syms) for sol in final_soln} if syms else final_soln\n     return final_soln\n \n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-18199", "model_patch": "diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py\nindex 9a3052d4c3..2c2c1905b4 100644\n--- a/sympy/ntheory/residue_ntheory.py\n+++ b/sympy/ntheory/residue_ntheory.py\n@@ -768,6 +768,10 @@ def nthroot_mod(a, n, p, all_roots=False):\n     \"\"\"\n     from sympy.core.numbers import igcdex\n     a, n, p = as_int(a), as_int(n), as_int(p)\n+    if a % p == 0:\n+        if all_roots:\n+            return [0]\n+        return 0\n     if n == 2:\n         return sqrt_mod(a, p, all_roots)\n     # see Hackman \"Elementary Number Theory\" (2009), page 76\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-12284", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 8ea6c05ef9..b1b5baa127 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -945,8 +945,12 @@ class Model(metaclass=ModelBase):\n \n     def _get_FIELD_display(self, field):\n         value = getattr(self, field.attname)\n-        choices_dict = dict(make_hashable(field.flatchoices))\n-        # force_str() to coerce lazy strings.\n+        choices_dict = {}\n+        for cls in self.__class__.mro():\n+            if hasattr(cls, '_meta'):\n+                for f in cls._meta.fields:\n+                    if f.name == field.name:\n+                        choices_dict.update(dict(make_hashable(f.flatchoices)))\n         return force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n \n     def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-12286", "model_patch": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..89ceb6d59a 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -55,7 +55,10 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n @register(Tags.translation)\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n+    from django.utils.translation import get_supported_language_variant\n     available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n+    try:\n+        get_supported_language_variant(settings.LANGUAGE_CODE)\n+    except LookupError:\n         return [E004]\n     return []\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-12308", "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex e4ddc8f017..14d5fde7a1 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -398,6 +398,8 @@ def display_for_field(value, field, empty_value_display):\n         return formats.number_format(value)\n     elif isinstance(field, models.FileField) and value:\n         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n+    elif isinstance(field, models.JSONField):\n+        return field.prepare_value(value)\n     else:\n         return display_for_value(value, empty_value_display)\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-18532", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 6866648d4e..c4c110322a 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -504,7 +504,11 @@ def atoms(self, *types):\n             types = tuple(\n                 [t if isinstance(t, type) else type(t) for t in types])\n         else:\n-            types = (Atom,)\n+            result = set()\n+            for expr in preorder_traversal(self):\n+                if not expr.args:\n+                    result.add(expr)\n+            return result\n         result = set()\n         for expr in preorder_traversal(self):\n             if isinstance(expr, types):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-18621", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 11aebbc59f..5fe308e991 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -298,6 +298,8 @@ def diag(self):\n     def blocks(self):\n         from sympy.matrices.immutable import ImmutableDenseMatrix\n         mats = self.args\n+        if len(mats) == 1:\n+            return mats[0]\n         data = [[mats[i] if i == j else ZeroMatrix(mats[i].rows, mats[j].cols)\n                         for j in range(len(mats))]\n                         for i in range(len(mats))]\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-12453", "model_patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex c50fc90171..5cf1f5b3c2 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -5,7 +5,7 @@ from io import StringIO\n from django.apps import apps\n from django.conf import settings\n from django.core import serializers\n-from django.db import router\n+from django.db import router, transaction\n \n # The prefix to put on the default database name when creating\n # the test database.\n@@ -126,8 +126,9 @@ class BaseDatabaseCreation:\n         the serialize_db_to_string() method.\n         \"\"\"\n         data = StringIO(data)\n-        for obj in serializers.deserialize(\"json\", data, using=self.connection.alias):\n-            obj.save()\n+        with transaction.atomic(using=self.connection.alias):\n+            for obj in serializers.deserialize(\"json\", data, using=self.connection.alias):\n+                obj.save()\n \n     def _get_database_display_str(self, verbosity, database_name):\n         \"\"\"\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-12470", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 92213a4e67..7d962f7aa2 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -277,11 +277,15 @@ class SQLCompiler:\n             ordering = self.query.order_by\n         elif self.query.order_by:\n             ordering = self.query.order_by\n-        elif self.query.get_meta().ordering:\n-            ordering = self.query.get_meta().ordering\n-            self._meta_ordering = ordering\n         else:\n-            ordering = []\n+            ordering = self.query.get_meta().ordering or []\n+            if not ordering and self.query.model._meta.parents:\n+                for parent in self.query.model._meta.get_parent_list():\n+                    if parent._meta.ordering:\n+                        ordering = parent._meta.ordering\n+                        break\n+            self._meta_ordering = ordering\n+\n         if self.query.standard_ordering:\n             asc, desc = ORDER_DIR['ASC']\n         else:\n@@ -291,7 +295,6 @@ class SQLCompiler:\n         for field in ordering:\n             if hasattr(field, 'resolve_expression'):\n                 if isinstance(field, Value):\n-                    # output_field must be resolved for constants.\n                     field = Cast(field, field.output_field)\n                 if not isinstance(field, OrderBy):\n                     field = field.asc()\n@@ -300,7 +303,7 @@ class SQLCompiler:\n                     field.reverse_ordering()\n                 order_by.append((field, False))\n                 continue\n-            if field == '?':  # random\n+            if field == '?':\n                 order_by.append((OrderBy(Random()), False))\n                 continue\n \n@@ -308,24 +311,18 @@ class SQLCompiler:\n             descending = order == 'DESC'\n \n             if col in self.query.annotation_select:\n-                # Reference to expression in SELECT clause\n                 order_by.append((\n                     OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending),\n                     True))\n                 continue\n             if col in self.query.annotations:\n-                # References to an expression which is masked out of the SELECT\n-                # clause.\n                 expr = self.query.annotations[col]\n                 if isinstance(expr, Value):\n-                    # output_field must be resolved for constants.\n                     expr = Cast(expr, expr.output_field)\n                 order_by.append((OrderBy(expr, descending=descending), False))\n                 continue\n \n             if '.' in field:\n-                # This came in through an extra(order_by=...) addition. Pass it\n-                # on verbatim.\n                 table, col = col.split('.', 1)\n                 order_by.append((\n                     OrderBy(\n@@ -335,8 +332,6 @@ class SQLCompiler:\n                 continue\n \n             if not self.query.extra or col not in self.query.extra:\n-                # 'col' is of the form 'field' or 'field1__field2' or\n-                # '-field1__field2__field', etc.\n                 order_by.extend(self.find_ordering_name(\n                     field, self.query.get_meta(), default_order=asc))\n             else:\n@@ -355,9 +350,6 @@ class SQLCompiler:\n             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)\n             if self.query.combinator:\n                 src = resolved.get_source_expressions()[0]\n-                # Relabel order by columns to raw numbers if this is a combined\n-                # query; necessary since the columns can't be referenced by the\n-                # fully qualified name and the simple column names may collide.\n                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n                     if is_ref and col_alias == src.refs:\n                         src = src.source\n@@ -369,15 +361,9 @@ class SQLCompiler:\n                 else:\n                     if col_alias:\n                         raise DatabaseError('ORDER BY term does not match any column in the result set.')\n-                    # Add column used in ORDER BY clause without an alias to\n-                    # the selected columns.\n                     self.query.add_select_col(src)\n                     resolved.set_source_expressions([RawSQL('%d' % len(self.query.select), ())])\n             sql, params = self.compile(resolved)\n-            # Don't add the same column twice, but the order direction is\n-            # not taken into account so we strip it. When this entire method\n-            # is refactored into expressions, then we can check each part as we\n-            # generate it.\n             without_ordering = self.ordering_parts.search(sql).group(1)\n             params_hash = make_hashable(params)\n             if (without_ordering, params_hash) in seen:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-18698", "model_patch": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex c9e77a901f..a707488a28 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -3234,7 +3234,8 @@ def sqf_list(f, all=False):\n         else:  # pragma: no cover\n             raise OperationNotSupported(f, 'sqf_list')\n \n-        return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors]\n+        sorted_factors = sorted(factors, key=lambda x: x[1])\n+        return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in sorted_factors]\n \n     def sqf_list_include(f, all=False):\n         \"\"\"\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-12497", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 8ddbb5ba68..65bcec3dd2 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1167,7 +1167,6 @@ class ManyToManyField(RelatedField):\n             related_name=related_name,\n             related_query_name=related_query_name,\n             limit_choices_to=limit_choices_to,\n-            symmetrical=symmetrical,\n             through=through,\n             through_fields=through_fields,\n             db_constraint=db_constraint,\n@@ -1179,6 +1178,12 @@ class ManyToManyField(RelatedField):\n         self.db_table = db_table\n         self.swappable = swappable\n \n+        if through_fields and len(through_fields) > 2:\n+            raise ValueError((\n+                'If you want to create a recursive relationship, '\n+                'use ManyToManyField(\"%s\", through=\"%s\").'\n+            ) % (to, through))\n+\n     def check(self, **kwargs):\n         return [\n             *super().check(**kwargs),\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-18835", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex d96e76263b..52989e3805 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -2106,10 +2106,13 @@ def uniq(seq, result=None):\n     >>> list(uniq([[1], [2, 1], [1]]))\n     [[1], [2, 1]]\n     \"\"\"\n+    initial_size = len(seq)\n     try:\n         seen = set()\n         result = result or []\n         for i, s in enumerate(seq):\n+            if len(seq) != initial_size:\n+                raise RuntimeError(\"dictionary changed size during iteration\")\n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-12589", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 63ca817355..3984572e1e 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -96,38 +96,27 @@ class SQLCompiler:\n             return []\n         expressions = []\n         if self.query.group_by is not True:\n-            # If the group by is set to a list (by .values() call most likely),\n-            # then we need to add everything in it to the GROUP BY clause.\n-            # Backwards compatibility hack for setting query.group_by. Remove\n-            # when  we have public API way of forcing the GROUP BY clause.\n-            # Converts string references to expressions.\n             for expr in self.query.group_by:\n                 if not hasattr(expr, 'as_sql'):\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n                     expressions.append(expr)\n-        # Note that even if the group_by is set, it is only the minimal\n-        # set to group by. So, we need to add cols in select, order_by, and\n-        # having into the select in any case.\n         ref_sources = {\n             expr.source for expr in expressions if isinstance(expr, Ref)\n         }\n         for expr, _, _ in select:\n-            # Skip members of the select clause that are already included\n-            # by reference.\n             if expr in ref_sources:\n                 continue\n             cols = expr.get_group_by_cols()\n             for col in cols:\n                 expressions.append(col)\n         for expr, (sql, params, is_ref) in order_by:\n-            # Skip References to the select clause, as all expressions in the\n-            # select clause are already part of the group by.\n             if not is_ref:\n                 expressions.extend(expr.get_group_by_cols())\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n             expressions.append(expr)\n+        expressions.extend(self.query.annotations.values())\n         result = []\n         seen = set()\n         expressions = self.collapse_group_by(expressions, having_group_by)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex b821c42845..e49d8f56ab 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -244,7 +244,7 @@ def _entry(self, i, j, **kwargs):\n                 break\n             else:\n                 j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+        return self.blocks[row_block, col_block]._entry(i, j, **kwargs)\n \n     @property\n     def is_Identity(self):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-12700", "model_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..599faab339 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -90,6 +90,8 @@ class SafeExceptionReporterFilter:\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, v) for v in value)\n             else:\n                 cleansed = value\n         except TypeError:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 61f88401ab..57ff1b2f24 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -5,7 +5,7 @@ from django.db.backends.ddl_references import (\n     Columns, ForeignKeyName, IndexName, Statement, Table,\n )\n from django.db.backends.utils import names_digest, split_identifier\n-from django.db.models import Index\n+from django.db.models.indexes import Index\n from django.db.transaction import TransactionManagementError, atomic\n from django.utils import timezone\n \n@@ -401,19 +401,23 @@ class BaseDatabaseSchemaEditor:\n \n     def _delete_composed_index(self, model, fields, constraint_kwargs, sql):\n         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n-        meta_index_names = {constraint.name for constraint in model._meta.indexes}\n+        meta_index_names = {index.name for index in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n         constraint_names = self._constraint_names(\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n             **constraint_kwargs\n         )\n-        if len(constraint_names) != 1:\n+\n+        if len(constraint_names) > 2:\n             raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n                 len(constraint_names),\n                 model._meta.db_table,\n                 \", \".join(columns),\n             ))\n-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n+\n+        for constraint_name in constraint_names:\n+            if constraint_name in meta_constraint_names or constraint_name in meta_index_names:\n+                self.execute(self._delete_constraint_sql(sql, model, constraint_name))\n \n     def alter_db_table(self, model, old_db_table, new_db_table):\n         \"\"\"Rename the table a model points to.\"\"\"\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-12747", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex d9c9b0db04..0152aed88c 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -735,6 +735,9 @@ class QuerySet:\n         collector.collect(del_query)\n         deleted, _rows_count = collector.delete()\n \n+        if deleted == 0:\n+            _rows_count = {self.model._meta.label: 0}\n+\n         # Clear the result cache, in case this QuerySet gets reused.\n         self._result_cache = None\n         return deleted, _rows_count\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-19254", "model_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex 93298f47e6..60b1171715 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -74,6 +74,8 @@\n from sympy.ntheory import nextprime, isprime, factorint\n from sympy.utilities import subsets\n \n+from sympy.polys.knuthcohen import knuth_cohen_bound\n+\n from math import ceil as _ceil, log as _log\n \n \n@@ -124,21 +126,13 @@ def dmp_trial_division(f, factors, u, K):\n \n \n def dup_zz_mignotte_bound(f, K):\n-    \"\"\"Mignotte bound for univariate polynomials in `K[x]`. \"\"\"\n-    a = dup_max_norm(f, K)\n-    b = abs(dup_LC(f, K))\n-    n = dup_degree(f)\n-\n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    \"\"\"Knuth-Cohen bound for univariate polynomials in `K[x]`. \"\"\"\n+    return knuth_cohen_bound(f, K)\n \n \n def dmp_zz_mignotte_bound(f, u, K):\n-    \"\"\"Mignotte bound for multivariate polynomials in `K[X]`. \"\"\"\n-    a = dmp_max_norm(f, u, K)\n-    b = abs(dmp_ground_LC(f, u, K))\n-    n = sum(dmp_degree_list(f, u))\n-\n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    \"\"\"Knuth-Cohen bound for multivariate polynomials in `K[X]`. \"\"\"\n+    return knuth_cohen_bound(f, u, K)\n \n \n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-12856", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 7bb3fa4706..a2d0734bdf 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1926,6 +1926,19 @@ class Model(metaclass=ModelBase):\n                         id='models.W038',\n                     )\n                 )\n+            for constraint in cls._meta.constraints:\n+                if isinstance(constraint, UniqueConstraint):\n+                    for field_name in constraint.fields:\n+                        try:\n+                            cls._meta.get_field(field_name)\n+                        except FieldDoesNotExist:\n+                            errors.append(\n+                                checks.Error(\n+                                    \"'%s' refers to the nonexistent field '%s'.\" % (constraint.name, field_name),\n+                                    obj=cls,\n+                                    id='models.E012',\n+                                )\n+                            )\n         return errors\n \n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pytest-dev__pytest-7168", "model_patch": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 23af4d0bb..23472b830 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -79,7 +79,10 @@ def saferepr(obj: Any, maxsize: int = 240) -> str:\n     care to never raise exceptions itself.  This function is a wrapper\n     around the Repr/reprlib functionality of the standard 2.6 lib.\n     \"\"\"\n-    return SafeRepr(maxsize).repr(obj)\n+    try:\n+        return SafeRepr(maxsize).repr(obj)\n+    except Exception as exc:\n+        return f\"<repr-error: {exc.__class__.__name__}>\"\n \n \n class AlwaysDispatchingPrettyPrinter(pprint.PrettyPrinter):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e0eeccefa6..b052208843 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1140,6 +1140,8 @@ class QuerySet:\n         \"\"\"\n         assert not self.query.is_sliced, \\\n             \"Cannot create distinct fields once a slice has been taken.\"\n+        if self.query.combinator:\n+            raise NotImplementedError('Calling distinct() on a unioned queryset is not supported.')\n         obj = self._chain()\n         obj.query.add_distinct_fields(*field_names)\n         return obj\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-12915", "model_patch": "diff --git a/django/contrib/staticfiles/handlers.py b/django/contrib/staticfiles/handlers.py\nindex 711d8864ad..56e1630c17 100644\n--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n@@ -52,6 +52,12 @@ class StaticFilesHandlerMixin:\n         except Http404 as e:\n             return response_for_exception(request, e)\n \n+    async def get_response_async(self, request):\n+        try:\n+            return self.serve(request)\n+        except Http404 as e:\n+            return response_for_exception(request, e)\n+\n \n class StaticFilesHandler(StaticFilesHandlerMixin, WSGIHandler):\n     \"\"\"\n@@ -82,7 +88,9 @@ class ASGIStaticFilesHandler(StaticFilesHandlerMixin, ASGIHandler):\n         # Only even look at HTTP requests\n         if scope['type'] == 'http' and self._should_handle(scope['path']):\n             # Serve static content\n-            # (the one thing super() doesn't do is __call__, apparently)\n-            return await super().__call__(scope, receive, send)\n-        # Hand off to the main app\n-        return await self.application(scope, receive, send)\n+            request = self.request_class(scope, receive)\n+            response = await self.get_response_async(request)\n+            await response(scope, receive, send)\n+        else:\n+            # Hand off to the main app\n+            await self.application(scope, receive, send)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pytest-dev__pytest-7220", "model_patch": "diff --git a/src/_pytest/pytester.py b/src/_pytest/pytester.py\nindex 9df86a22f..6f1ca5175 100644\n--- a/src/_pytest/pytester.py\n+++ b/src/_pytest/pytester.py\n@@ -503,6 +503,9 @@ class CwdSnapshot:\n     def __init__(self) -> None:\n         self.__saved = os.getcwd()\n \n+    def get_saved_cwd(self) -> str:\n+        return self.__saved\n+\n     def restore(self) -> None:\n         os.chdir(self.__saved)\n \n@@ -896,44 +899,15 @@ class Testdir:\n         return items, rec\n \n     def inline_run(self, *args, plugins=(), no_reraise_ctrlc: bool = False):\n-        \"\"\"Run ``pytest.main()`` in-process, returning a HookRecorder.\n-\n-        Runs the :py:func:`pytest.main` function to run all of pytest inside\n-        the test process itself.  This means it can return a\n-        :py:class:`HookRecorder` instance which gives more detailed results\n-        from that run than can be done by matching stdout/stderr from\n-        :py:meth:`runpytest`.\n-\n-        :param args: command line arguments to pass to :py:func:`pytest.main`\n-\n-        :kwarg plugins: extra plugin instances the ``pytest.main()`` instance should use.\n-\n-        :kwarg no_reraise_ctrlc: typically we reraise keyboard interrupts from the child run. If\n-            True, the KeyboardInterrupt exception is captured.\n-\n-        :return: a :py:class:`HookRecorder` instance\n-        \"\"\"\n-        # (maybe a cpython bug?) the importlib cache sometimes isn't updated\n-        # properly between file creation and inline_run (especially if imports\n-        # are interspersed with file creation)\n         importlib.invalidate_caches()\n \n         plugins = list(plugins)\n         finalizers = []\n+        old_dir = os.getcwd()\n         try:\n-            # Any sys.module or sys.path changes done while running pytest\n-            # inline should be reverted after the test run completes to avoid\n-            # clashing with later inline tests run within the same pytest test,\n-            # e.g. just because they use matching test module names.\n             finalizers.append(self.__take_sys_modules_snapshot().restore)\n             finalizers.append(SysPathsSnapshot().restore)\n \n-            # Important note:\n-            # - our tests should not leave any other references/registrations\n-            #   laying around other than possibly loaded test modules\n-            #   referenced from sys.modules, as nothing will clean those up\n-            #   automatically\n-\n             rec = []\n \n             class Collect:\n@@ -951,14 +925,14 @@ class Testdir:\n \n             reprec.ret = ret\n \n-            # typically we reraise keyboard interrupts from the child run\n-            # because it's our user requesting interruption of the testing\n             if ret == ExitCode.INTERRUPTED and not no_reraise_ctrlc:\n                 calls = reprec.getcalls(\"pytest_keyboard_interrupt\")\n                 if calls and calls[-1].excinfo.type == KeyboardInterrupt:\n                     raise KeyboardInterrupt()\n             return reprec\n         finally:\n+            os.chdir(old_dir)\n+            self._cwd_snapshot.restore()\n             for finalizer in finalizers:\n                 finalizer()\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sphinx-doc__sphinx-7686", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 08f83ebdf..f6f39e7eb 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -885,7 +885,10 @@ class ModuleDocumenter(Documenter):\n         ret = []\n         for mname in memberlist:\n             try:\n-                ret.append((mname, safe_getattr(self.object, mname)))\n+                member = safe_getattr(self.object, mname)\n+                if not self.options.imported_members and getattr(member, '__module__', None) != self.object.__name__:\n+                    continue\n+                ret.append((mname, member))\n             except AttributeError:\n                 logger.warning(\n                     __('missing attribute mentioned in :members: or __all__: '\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df8749..8195263b 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1961,7 +1961,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=False)\n \n         # unstacked dataset\n         return Dataset(data_dict)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-12983", "model_patch": "diff --git a/django/utils/text.py b/django/utils/text.py\nindex fb5f6298c4..5aefb80f9d 100644\n--- a/django/utils/text.py\n+++ b/django/utils/text.py\n@@ -403,7 +403,8 @@ def slugify(value, allow_unicode=False):\n     else:\n         value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore').decode('ascii')\n     value = re.sub(r'[^\\w\\s-]', '', value.lower()).strip()\n-    return re.sub(r'[-\\s]+', '-', value)\n+    value = re.sub(r'[-\\s]+', '-', value)\n+    return value.strip('-_')\n \n \n def camel_case_to_spaces(value):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sphinx-doc__sphinx-7738", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..fd0957e7f 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -318,9 +318,6 @@ class GoogleDocstring:\n             return [line[min_indent:] for line in lines]\n \n     def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n-            name = name[:-1] + r'\\_'\n-\n         if name[:2] == '**':\n             return r'\\*\\*' + name[2:]\n         elif name[:1] == '*':\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-19487", "model_patch": "diff --git a/sympy/functions/elementary/complexes.py b/sympy/functions/elementary/complexes.py\nindex 7fda45982b..00d5118c0a 100644\n--- a/sympy/functions/elementary/complexes.py\n+++ b/sympy/functions/elementary/complexes.py\n@@ -1,4 +1,4 @@\n-from sympy.core import S, Add, Mul, sympify, Symbol, Dummy, Basic\n+from sympy.core import S, Add, Mul, sympify, Symbol, Dummy, Basic, nan\n from sympy.core.expr import Expr\n from sympy.core.exprtools import factor_terms\n from sympy.core.function import (Function, Derivative, ArgumentIndexError,\n@@ -631,6 +631,12 @@ def _eval_rewrite_as_Piecewise(self, arg, **kwargs):\n     def _eval_rewrite_as_sign(self, arg, **kwargs):\n         return arg/sign(arg)\n \n+    def _eval_rewrite_as_Abs(self, **kwargs):\n+        arg = self.args[0]\n+        if arg.is_zero:\n+            return nan\n+        return arg / Abs(arg)\n+\n     def _eval_rewrite_as_conjugate(self, arg, **kwargs):\n         return (arg*conjugate(arg))**S.Half\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13028", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..17a8f79d32 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,7 +1124,7 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n+        if hasattr(expression, 'filterable') and not expression.filterable:\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13033", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..e996b5f781 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -279,10 +279,10 @@ class SQLCompiler:\n         \"\"\"\n         if self.query.extra_order_by:\n             ordering = self.query.extra_order_by\n-        elif not self.query.default_ordering:\n-            ordering = self.query.order_by\n         elif self.query.order_by:\n             ordering = self.query.order_by\n+        elif not self.query.default_ordering:\n+            ordering = self.query.order_by\n         elif self.query.get_meta().ordering:\n             ordering = self.query.get_meta().ordering\n             self._meta_ordering = ordering\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pytest-dev__pytest-7373", "model_patch": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 759191668..cb1c181be 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -18,17 +18,6 @@ from _pytest.store import StoreKey\n evalcache_key = StoreKey[Dict[str, Any]]()\n \n \n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n-\n-        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n \n \n class MarkEvaluator:\n@@ -98,10 +87,12 @@ class MarkEvaluator:\n                     self.expr = expr\n                     if isinstance(expr, str):\n                         d = self._getglobals()\n-                        result = cached_eval(self.item.config, expr, d)\n+                        try:\n+                            result = eval(expr, d)\n+                        except Exception as e:\n+                            raise e\n                     else:\n                         if \"reason\" not in mark.kwargs:\n-                            # XXX better be checked at collection time\n                             msg = (\n                                 \"you need to specify reason=STRING \"\n                                 \"when using booleans as conditions.\"\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pytest-dev__pytest-7432", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..47b419813 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -270,8 +270,6 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         else:\n             rep.longrepr = \"Unexpected success\"\n         rep.outcome = \"failed\"\n-    elif item.config.option.runxfail:\n-        pass  # don't interfere\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n@@ -303,6 +301,8 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         filename, line = item.reportinfo()[:2]\n         assert line is not None\n         rep.longrepr = str(filename), line + 1, reason\n+    elif item.config.option.runxfail:\n+        pass  # don't interfere\n \n \n def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str]]:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13158", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..dcad2ee7db 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -920,6 +920,7 @@ class QuerySet:\n         \"\"\"Return an empty QuerySet.\"\"\"\n         clone = self._chain()\n         clone.query.set_empty()\n+        clone._combined_queries = ()\n         return clone\n \n     ##################################################################\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 335e10996..a52c18d13 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -240,15 +240,16 @@ def pytest_runtest_setup(item: Item) -> None:\n \n     if not item.config.option.runxfail:\n         item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n-        if xfailed and not xfailed.run:\n-            xfail(\"[NOTRUN] \" + xfailed.reason)\n+        if xfailed:\n+            item.add_marker(pytest.mark.xfail(reason=xfailed.reason))\n+            if not xfailed.run:\n+                xfail(\"[NOTRUN] \" + xfailed.reason)\n \n \n @hookimpl(hookwrapper=True)\n def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n-    xfailed = item._store.get(xfailed_key, None)\n-    if xfailed is None:\n-        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n+    xfailed = evaluate_xfail_marks(item)\n+    item._store[xfailed_key] = xfailed\n \n     if not item.config.option.runxfail:\n         if xfailed and not xfailed.run:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sphinx-doc__sphinx-7975", "model_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..e884388a5 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -164,12 +164,7 @@ class IndexEntries:\n                 # now calculate the key\n                 if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                     k = k[1:]\n-                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n-                if letter.isalpha() or letter == '_':\n-                    return letter\n-                else:\n-                    # get all other symbols under one heading\n-                    return _('Symbols')\n+                return _('Symbols')\n             else:\n                 return v[2]\n         return [(key_, list(group))\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13220", "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex dc084b8692..d1baf9dea3 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -182,6 +182,18 @@ class ValidationError(Exception):\n     def __repr__(self):\n         return 'ValidationError(%s)' % self\n \n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return False\n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            return all(\n+                sorted(self.error_dict.get(field, [])) == sorted(other.error_dict.get(field, []))\n+                for field in set(self.error_dict) | set(other.error_dict)\n+            )\n+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):\n+            return sorted(self.error_list) == sorted(other.error_list)\n+        return False\n+\n \n class EmptyResultSet(Exception):\n     \"\"\"A database query predicate is impossible.\"\"\"\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pydata__xarray-4248", "model_patch": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..43d04d90 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -283,7 +283,11 @@ def summarize_variable(\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n         dims_str = \"\"\n-    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+\n+    units = var.attrs.get('units')\n+    units_str = f\", in {units}\" if units else \"\"\n+\n+    front_str = f\"{first_col}{dims_str}{var.dtype}{units_str} \"\n \n     values_width = max_width - len(front_str)\n     values_str = inline_variable_array_repr(var, values_width)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13230", "model_patch": "diff --git a/django/contrib/syndication/views.py b/django/contrib/syndication/views.py\nindex 68ffb0bfe0..0be0db7cb2 100644\n--- a/django/contrib/syndication/views.py\n+++ b/django/contrib/syndication/views.py\n@@ -199,6 +199,8 @@ class Feed:\n             if updateddate and is_naive(updateddate):\n                 updateddate = make_aware(updateddate, tz)\n \n+            comments = self._get_dynamic_attr('item_comments', item)\n+\n             feed.add_item(\n                 title=title,\n                 link=link,\n@@ -214,6 +216,7 @@ class Feed:\n                 author_link=author_link,\n                 categories=self._get_dynamic_attr('item_categories', item),\n                 item_copyright=self._get_dynamic_attr('item_copyright', item),\n+                comments=comments,\n                 **self.item_extra_kwargs(item)\n             )\n         return feed\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13265", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 89e2dceeaf..cc653bb890 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1015,6 +1015,21 @@ class MigrationAutodetector:\n     def generate_added_indexes(self):\n         for (app_label, model_name), alt_indexes in self.altered_indexes.items():\n             for index in alt_indexes['added_indexes']:\n+                if '_order' in index.fields:\n+                    # Store for later to ensure `AlterOrderWithRespectTo` is applied first\n+                    self.pending_indexes = self.pending_indexes if hasattr(self, 'pending_indexes') else []\n+                    self.pending_indexes.append((app_label, model_name, index))\n+                else:\n+                    self.add_operation(\n+                        app_label,\n+                        operations.AddIndex(\n+                            model_name=model_name,\n+                            index=index,\n+                        )\n+                    )\n+        # Ensure pending indexes are added after `AlterOrderWithRespectTo`\n+        if hasattr(self, 'pending_indexes'):\n+            for app_label, model_name, index in self.pending_indexes:\n                 self.add_operation(\n                     app_label,\n                     operations.AddIndex(\n@@ -1196,17 +1211,8 @@ class MigrationAutodetector:\n             new_model_state = self.to_state.models[app_label, model_name]\n             if (old_model_state.options.get(\"order_with_respect_to\") !=\n                     new_model_state.options.get(\"order_with_respect_to\")):\n-                # Make sure it comes second if we're adding\n-                # (removal dependency is part of RemoveField)\n                 dependencies = []\n-                if new_model_state.options.get(\"order_with_respect_to\"):\n-                    dependencies.append((\n-                        app_label,\n-                        model_name,\n-                        new_model_state.options[\"order_with_respect_to\"],\n-                        True,\n-                    ))\n-                # Actually generate the operation\n+                # Add this operation first\n                 self.add_operation(\n                     app_label,\n                     operations.AlterOrderWithRespectTo(\n@@ -1215,6 +1221,17 @@ class MigrationAutodetector:\n                     ),\n                     dependencies=dependencies,\n                 )\n+                # Ensure index for '_order' is added after AlterOrderWithRespectTo\n+                for field_name, index in new_model_state.options.get('indexes', {}).items():\n+                    if '_order' in index.fields:\n+                        self.add_operation(\n+                            app_label,\n+                            operations.AddIndex(\n+                                model_name=model_name,\n+                                index=index,\n+                            ),\n+                            dependencies=dependencies,\n+                        )\n \n     def generate_altered_managers(self):\n         for app_label, model_name in sorted(self.kept_model_keys):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13315", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 397146a354..fa472982f9 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -986,9 +986,12 @@ class ForeignKey(ForeignObject):\n             raise ValueError(\"Cannot create form field for %r yet, because \"\n                              \"its related model %r has not been loaded yet\" %\n                              (self.name, self.remote_field.model))\n+        queryset = self.remote_field.model._default_manager.using(using)\n+        if self.remote_field.limit_choices_to:\n+            queryset = queryset.filter(self.remote_field.limit_choices_to).distinct()\n         return super().formfield(**{\n             'form_class': forms.ModelChoiceField,\n-            'queryset': self.remote_field.model._default_manager.using(using),\n+            'queryset': queryset,\n             'to_field_name': self.remote_field.field_name,\n             **kwargs,\n             'blank': self.blank,\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13321", "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 187e14b1b7..2c1575b2af 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -1,4 +1,5 @@\n import base64\n+import binascii\n import logging\n import string\n import warnings\n@@ -132,8 +133,8 @@ class SessionBase:\n \n     def _legacy_decode(self, session_data):\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n-        encoded_data = base64.b64decode(session_data.encode('ascii'))\n         try:\n+            encoded_data = base64.b64decode(session_data.encode('ascii'))\n             # could produce ValueError if there is no ':'\n             hash, serialized = encoded_data.split(b':', 1)\n             expected_hash = self._hash(serialized)\n@@ -141,9 +142,7 @@ class SessionBase:\n                 raise SuspiciousSession(\"Session data corrupted\")\n             else:\n                 return self.serializer().loads(serialized)\n-        except Exception as e:\n-            # ValueError, SuspiciousOperation, unpickling exceptions. If any of\n-            # these happen, just return an empty dictionary (an empty session).\n+        except (binascii.Error, ValueError, SuspiciousOperation, Exception) as e:\n             if isinstance(e, SuspiciousOperation):\n                 logger = logging.getLogger('django.security.%s' % e.__class__.__name__)\n                 logger.warning(str(e))\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-20049", "model_patch": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\nindex d4e3cfcc90..9d40504474 100644\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -519,6 +519,9 @@ def vel(self, frame):\n \n         _check_frame(frame)\n         if not (frame in self._vel_dict):\n+            pos = self.pos_from(self._vel_dict.get(frame, None))\n+            if pos != 0:\n+                return pos.dt(frame)\n             raise ValueError('Velocity of point ' + self.name + ' has not been'\n                              ' defined in ReferenceFrame ' + frame.name)\n         return self._vel_dict[frame]\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13401", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 28374272f4..ca23bfbe97 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -516,17 +516,20 @@ class Field(RegisterLookupMixin):\n     def __eq__(self, other):\n         # Needed for @total_ordering\n         if isinstance(other, Field):\n-            return self.creation_counter == other.creation_counter\n+            return (self.creation_counter == other.creation_counter and\n+                    self.model == other.model)\n         return NotImplemented\n \n     def __lt__(self, other):\n         # This is needed because bisect does not take a comparison function.\n         if isinstance(other, Field):\n+            if self.creation_counter == other.creation_counter:\n+                return self.model < other.model\n             return self.creation_counter < other.creation_counter\n         return NotImplemented\n \n     def __hash__(self):\n-        return hash(self.creation_counter)\n+        return hash((self.creation_counter, self.model))\n \n     def __deepcopy__(self, memodict):\n         # We don't have to deepcopy very much here, since most things are not\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13447", "model_patch": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 837dabfea8..05059758fb 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -430,7 +430,7 @@ class AdminSite:\n                     return HttpResponsePermanentRedirect(path)\n         raise Http404\n \n-    def _build_app_dict(self, request, label=None):\n+    def build_app_dict(self, request, label=None):\n         \"\"\"\n         Build the app dictionary. The optional `label` parameter filters models\n         of a specific app.\n@@ -466,6 +466,7 @@ class AdminSite:\n                 'perms': perms,\n                 'admin_url': None,\n                 'add_url': None,\n+                'model': model,\n             }\n             if perms.get('change') or perms.get('view'):\n                 model_dict['view_only'] = not perms.get('change')\n@@ -503,7 +504,7 @@ class AdminSite:\n         Return a sorted list of all the installed apps that have been\n         registered in this site.\n         \"\"\"\n-        app_dict = self._build_app_dict(request)\n+        app_dict = self.build_app_dict(request)\n \n         # Sort the apps alphabetically.\n         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())\n@@ -513,13 +514,12 @@ class AdminSite:\n             app['models'].sort(key=lambda x: x['name'])\n \n         return app_list\n-\n     def index(self, request, extra_context=None):\n         \"\"\"\n         Display the main admin index page, which lists all of the installed\n         apps that have been registered in this site.\n         \"\"\"\n-        app_list = self.get_app_list(request)\n+        app_list = self.build_app_dict(request)\n \n         context = {\n             **self.each_context(request),\n@@ -532,9 +532,8 @@ class AdminSite:\n         request.current_app = self.name\n \n         return TemplateResponse(request, self.index_template or 'admin/index.html', context)\n-\n     def app_index(self, request, app_label, extra_context=None):\n-        app_dict = self._build_app_dict(request, app_label)\n+        app_dict = self.build_app_dict(request, app_label)\n         if not app_dict:\n             raise Http404('The requested admin page does not exist.')\n         # Sort the models alphabetically within each app.\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13448", "model_patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex 503f7f56fd..2c90c0f466 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -112,10 +112,11 @@ class BaseDatabaseCreation:\n                             model._meta.can_migrate(self.connection) and\n                             router.allow_migrate_model(self.connection.alias, model)\n                         ):\n-                            queryset = model._default_manager.using(\n-                                self.connection.alias,\n-                            ).order_by(model._meta.pk.name)\n-                            yield from queryset.iterator()\n+                            if self.connection.settings_dict.get('TEST', {}).get('MIGRATE', True):\n+                                queryset = model._default_manager.using(\n+                                    self.connection.alias,\n+                                ).order_by(model._meta.pk.name)\n+                                yield from queryset.iterator()\n         # Serialize to a string\n         out = StringIO()\n         serializers.serialize(\"json\", get_objects(), indent=None, stream=out)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-20154", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex dd36dea304..3e46d5bf16 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -1802,9 +1802,9 @@ def partitions(n, m=None, k=None, size=False):\n         keys.append(r)\n     room = m - q - bool(r)\n     if size:\n-        yield sum(ms.values()), ms\n+        yield sum(ms.values()), ms.copy()\n     else:\n-        yield ms\n+        yield ms.copy()\n \n     while keys != [1]:\n         # Reuse any 1's.\n@@ -1842,9 +1842,9 @@ def partitions(n, m=None, k=None, size=False):\n             break\n         room -= need\n         if size:\n-            yield sum(ms.values()), ms\n+            yield sum(ms.values()), ms.copy()\n         else:\n-            yield ms\n+            yield ms.copy()\n \n \n def ordered_partitions(n, m=None, sort=True):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sphinx-doc__sphinx-8273", "model_patch": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..08ea3befe 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -80,10 +80,14 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n+            section_dir = path.join(self.outdir, f'man{section}')\n+            if not path.exists(section_dir):\n+                os.makedirs(section_dir)\n+\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sphinx-doc__sphinx-8282", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 978fd5df8..00f618562 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1241,7 +1241,6 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n     def format_signature(self, **kwargs: Any) -> str:\n         sigs = []\n         if self.analyzer and '.'.join(self.objpath) in self.analyzer.overloads:\n-            # Use signatures for overloaded functions instead of the implementation function.\n             overloaded = True\n         else:\n             overloaded = False\n@@ -1249,10 +1248,9 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n             sigs.append(sig)\n \n         if inspect.is_singledispatch_function(self.object):\n-            # append signature of singledispatch'ed functions\n             for typ, func in self.object.registry.items():\n                 if typ is object:\n-                    pass  # default implementation. skipped.\n+                    pass\n                 else:\n                     self.annotate_to_first_argument(func, typ)\n \n@@ -1260,13 +1258,18 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                     documenter.object = func\n                     documenter.objpath = [None]\n                     sigs.append(documenter.format_signature())\n+\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n-                sig = stringify_signature(overload, **kwargs)\n+                if self.env.config.autodoc_typehints == 'none':\n+                    sig = stringify_signature(overload, type_aliases=self.env.config.autodoc_type_aliases, typehints_formatter=None)\n+                else:\n+                    sig = stringify_signature(overload, **kwargs)\n+\n                 sigs.append(sig)\n \n         return \"\\n\".join(sigs)\n@@ -1883,7 +1886,6 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n     def format_signature(self, **kwargs: Any) -> str:\n         sigs = []\n         if self.analyzer and '.'.join(self.objpath) in self.analyzer.overloads:\n-            # Use signatures for overloaded methods instead of the implementation method.\n             overloaded = True\n         else:\n             overloaded = False\n@@ -1892,10 +1894,9 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n \n         meth = self.parent.__dict__.get(self.objpath[-1])\n         if inspect.is_singledispatch_method(meth):\n-            # append signature of singledispatch'ed functions\n             for typ, func in meth.dispatcher.registry.items():\n                 if typ is object:\n-                    pass  # default implementation. skipped.\n+                    pass\n                 else:\n                     self.annotate_to_first_argument(func, typ)\n \n@@ -1914,6 +1915,12 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                                               name=self.object_name):\n                     parameters = list(overload.parameters.values())\n                     overload = overload.replace(parameters=parameters[1:])\n+\n+                if self.env.config.autodoc_typehints == 'none':\n+                    overload = overload.replace(return_annotation=inspect.Signature.empty,\n+                                                parameters=[param.replace(annotation=inspect.Parameter.empty)\n+                                                            for param in overload.parameters.values()])\n+\n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-20212", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 984398c760..cd44ad80ea 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -299,6 +299,8 @@ def __new__(cls, b, e, evaluate=None):\n                 return b\n             elif e == -1 and not b:\n                 return S.ComplexInfinity\n+            elif b is S.Zero and e is S.NegativeInfinity:\n+                return S.ComplexInfinity\n             # Only perform autosimplification if exponent or base is a Symbol or number\n             elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and\\\n                 e.is_integer and _coeff_isneg(b):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pydata__xarray-4493", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 8376b487..affb80f6 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3907,7 +3907,13 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             dataset.\n         \"\"\"\n         merge_result = dataset_update_method(self, other)\n-        return self._replace(inplace=True, **merge_result._asdict())\n+        updated_dataset = self._replace(inplace=True, **merge_result._asdict())\n+\n+        for var_name, var in updated_dataset.variables.items():\n+            if is_duck_dask_array(var.data):\n+                updated_dataset.variables[var_name].data = var.data.chunk()\n+\n+        return updated_dataset\n \n     def merge(\n         self,\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13551", "model_patch": "diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py\nindex 93e2d71af2..66326f6adb 100644\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -94,7 +94,8 @@ class PasswordResetTokenGenerator:\n         # Truncate microseconds so that tokens are consistent even if the\n         # database doesn't support microseconds.\n         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)\n-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)\n+        email = user.email if user.email else ''\n+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + email\n \n     def _num_seconds(self, dt):\n         return int((dt - datetime(2001, 1, 1)).total_seconds())\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-20322", "model_patch": "diff --git a/sympy/functions/elementary/integers.py b/sympy/functions/elementary/integers.py\nindex fe1e71e3f2..9bfb87f231 100644\n--- a/sympy/functions/elementary/integers.py\n+++ b/sympy/functions/elementary/integers.py\n@@ -1,4 +1,3 @@\n-\n from __future__ import print_function, division\n \n from sympy import Basic, Expr\n@@ -353,6 +352,11 @@ def __le__(self, other):\n \n         return Le(self, other, evaluate=False)\n \n+    def _eval_simplify(self, **kwargs):\n+        from sympy import ceiling\n+        arg = self.args[0].simplify(**kwargs)\n+        return ceiling(arg, evaluate=False)\n+\n @dispatch(ceiling, Basic)  # type:ignore\n def _eval_is_eq(lhs, rhs): # noqa:F811\n     return is_eq(lhs.rewrite(floor), rhs) or is_eq(lhs.rewrite(frac),rhs)\ndiff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex 5f5eab3b9d..e9d83cfaac 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -579,7 +579,7 @@ def done(e):\n     if _eval_simplify is not None:\n         return _eval_simplify(**kwargs)\n \n-    original_expr = expr = collect_abs(signsimp(expr))\n+    original_expr = expr = signsimp(expr)\n \n     if not isinstance(expr, Basic) or not expr.args:  # XXX: temporary hack\n         return expr\n@@ -588,7 +588,6 @@ def done(e):\n         expr = inversecombine(expr)\n         if not expr.args:  # simplified to atomic\n             return expr\n-\n     # do deep simplification\n     handled = Add, Mul, Pow, ExpBase\n     expr = expr.replace(\n@@ -680,6 +679,9 @@ def done(e):\n     if expr.has(BesselBase):\n         expr = besselsimp(expr)\n \n+    if expr.has(ceiling):\n+        expr = expr.replace(ceiling, lambda x: ceiling(x, evaluate=False))\n+\n     if expr.has(TrigonometricFunction, HyperbolicFunction):\n         expr = trigsimp(expr, deep=True)\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13590", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..d7590c0639 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1075,12 +1075,11 @@ class Query(BaseExpression):\n                 self, reuse=can_reuse, allow_joins=allow_joins,\n             )\n         elif isinstance(value, (list, tuple)):\n-            # The items of the iterable may be expressions and therefore need\n-            # to be resolved independently.\n-            return type(value)(\n+            resolved_values = [\n                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                 for sub_value in value\n-            )\n+            ]\n+            return type(value)(*resolved_values) if hasattr(value, '_fields') else type(value)(resolved_values)\n         return value\n \n     def solve_lookup_type(self, lookup):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-18869", "model_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..d9d1962536 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -103,6 +103,7 @@ import warnings\n \n import numpy\n from packaging.version import parse as parse_version\n+from distutils.version import LooseVersion\n \n # cbook must import matplotlib only within function\n # definitions, so it is safe to import from it here.\n@@ -147,9 +148,15 @@ def __getattr__(name):\n             )\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n+        global version_info\n+        version_info = tuple(map(int, __version__.split('.')[:3]))\n+        global loose_version\n+        loose_version = LooseVersion(__version__)\n         return __version__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n+version_info = tuple(map(int, __version__.split('.')[:3]))\n+\n \n def _check_versions():\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13658", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 1ba093e51f..e411e86348 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -344,7 +344,7 @@ class ManagementUtility:\n         # Preprocess options to extract --settings and --pythonpath.\n         # These options could affect the commands that are available, so they\n         # must be processed early.\n-        parser = CommandParser(usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\n+        parser = CommandParser(prog=self.prog_name, usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\n         parser.add_argument('--settings')\n         parser.add_argument('--pythonpath')\n         parser.add_argument('args', nargs='*')  # catch-all\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13660", "model_patch": "diff --git a/django/core/management/commands/shell.py b/django/core/management/commands/shell.py\nindex 2b306a579e..571d120467 100644\n--- a/django/core/management/commands/shell.py\n+++ b/django/core/management/commands/shell.py\n@@ -84,13 +84,13 @@ class Command(BaseCommand):\n     def handle(self, **options):\n         # Execute the command and exit.\n         if options['command']:\n-            exec(options['command'])\n+            exec(options['command'], {})\n             return\n \n         # Execute stdin if it has anything to read and exit.\n         # Not supported on Windows due to select.select() limitations.\n         if sys.platform != 'win32' and not sys.stdin.isatty() and select.select([sys.stdin], [], [], 0)[0]:\n-            exec(sys.stdin.read())\n+            exec(sys.stdin.read(), {})\n             return\n \n         available_shells = [options['interface']] if options['interface'] else self.shells\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sphinx-doc__sphinx-8435", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 171a3e7b0..345d7e4eb 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2108,6 +2108,8 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n \n             if self.objpath[-1] in annotations:\n                 objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n+                if 'autodoc_type_aliases' in self.env.config:\n+                    objrepr = self.env.config.autodoc_type_aliases.get(objrepr, objrepr)\n                 self.add_line('   :type: ' + objrepr, sourcename)\n             else:\n                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])\n@@ -2129,7 +2131,6 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n             pass\n         else:\n             self.add_line('   :annotation: %s' % self.options.annotation, sourcename)\n-\n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n         try:\n             # Disable `autodoc_inherit_docstring` temporarily to avoid to obtain\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex b03ed4cd88..30c6182a6c 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -101,6 +101,11 @@ def get_total_scale_factor(expr):\n             return unit_system.get_quantity_scale_factor(expr)\n         return expr\n \n+    expr_dim = unit_system.get_dimensional_expr(expr)\n+    target_dim = unit_system.get_dimensional_expr(Mul(*target_units))\n+    if expr_dim != target_dim:\n+        return expr\n+\n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n     if depmat is None:\n         return expr\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sphinx-doc__sphinx-8474", "model_patch": "diff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 4bde57930..9d86a0e39 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -843,6 +843,8 @@ class StandardDomain(Domain):\n         if figtype is None:\n             return None\n \n+        env.domains['std'].objects['autonumbering'].apply(target_node)\n+\n         if figtype != 'section' and env.config.numfig is False:\n             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)\n             return contnode\n@@ -852,8 +854,7 @@ class StandardDomain(Domain):\n             if fignumber is None:\n                 return contnode\n         except ValueError:\n-            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid,\n-                           location=node)\n+            logger.warning(__(\"no number is assigned for %s: %s\"), figtype, labelid, location=node)\n             return contnode\n \n         try:\n@@ -868,13 +869,11 @@ class StandardDomain(Domain):\n             else:\n                 fignum = '.'.join(map(str, fignumber))\n                 if '{name}' in title or 'number' in title:\n-                    # new style format (cf. \"Fig.{number}\")\n                     if figname:\n                         newtitle = title.format(name=figname, number=fignum)\n                     else:\n                         newtitle = title.format(number=fignum)\n                 else:\n-                    # old style format (cf. \"Fig.%s\")\n                     newtitle = title % fignum\n         except KeyError as exc:\n             logger.warning(__('invalid numfig_format: %s (%r)'), title, exc, location=node)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13710", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex dadd4acfa1..bca83c5aa3 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2040,7 +2040,10 @@ class InlineModelAdmin(BaseModelAdmin):\n         if self.verbose_name is None:\n             self.verbose_name = self.model._meta.verbose_name\n         if self.verbose_name_plural is None:\n-            self.verbose_name_plural = self.model._meta.verbose_name_plural\n+            if self.verbose_name:\n+                self.verbose_name_plural = self.verbose_name + 's'\n+            else:\n+                self.verbose_name_plural = self.model._meta.verbose_name_plural\n \n     @property\n     def media(self):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sphinx-doc__sphinx-8506", "model_patch": "diff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex c87217c56..c1cd48eb4 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -43,7 +43,7 @@ logger = logging.getLogger(__name__)\n \n \n # RE for option descriptions\n-option_desc_re = re.compile(r'((?:/|--|-|\\+)?[^\\s=[]+)(=?\\s*.*)')\n+option_desc_re = re.compile(r'((?:/|--|-|\\+)?[^\\s=[]+?(?:\\[[^\\]]+\\])*)(=?\\s*.*)')\n # RE for grammar tokens\n token_re = re.compile(r'`(\\w+)`', re.U)\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13757", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 29c6ff0926..fd37dae73d 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -368,12 +368,14 @@ class KeyTransformIsNull(lookups.IsNull):\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        lhs_sql, lhs_params = compiler.compile(self.lhs)\n+        return f\"NOT EXISTS (SELECT 1 FROM JSON_TABLE({lhs_sql}, '$.{self.lhs.key_name}' COLUMNS(value PATH '$')) WHERE value IS NOT NULL)\", lhs_params\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        lhs_sql, lhs_params = compiler.compile(self.lhs)\n+        return f\"JSON_TYPE({lhs_sql}, '$.{self.lhs.key_name}') IS NULL\", lhs_params\n \n \n class KeyTransformIn(lookups.In):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13768", "model_patch": "diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\nindex b7d9d26389..770c649f4f 100644\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -1,6 +1,7 @@\n import threading\n import warnings\n import weakref\n+import logging\n \n from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.inspect import func_accepts_kwargs\n@@ -208,6 +209,7 @@ class Signal:\n             try:\n                 response = receiver(signal=self, sender=sender, **named)\n             except Exception as err:\n+                logging.exception(\"Error in receiver: %s\", receiver)\n                 responses.append((receiver, err))\n             else:\n                 responses.append((receiver, response))\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-20590", "model_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 70e6953559..8ecdc309d5 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -200,7 +200,7 @@ class Symbol(AtomicExpr, Boolean):\n \n     is_comparable = False\n \n-    __slots__ = ('name',)\n+    __slots__ = ('name', '_assumptions')\n \n     is_Symbol = True\n     is_symbol = True\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-20639", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex df7452ee87..fd7d3a1cdd 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1956,7 +1956,7 @@ def _print_Pow(self, power):\n             n, d = fraction(e)\n             if n is S.One and d.is_Atom and not e.is_Integer and self._settings['root_notation']:\n                 return self._print_nth_root(b, e)\n-            if e.is_Rational and e < 0:\n+            if (e.is_Rational and e < 0) or (e.is_Rational and e.q != 1):\n                 return prettyForm(\"1\")/self._print(Pow(b, -e, evaluate=False))\n \n         if b.is_Relational:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sphinx-doc__sphinx-8595", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d79617..9ae65a396 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,16 +1074,14 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n-                # for implicit module members, check __module__ to avoid\n-                # documenting imported objects\n-                return True, list(members.values())\n-            else:\n-                for member in members.values():\n-                    if member.__name__ not in self.__all__:\n-                        member.skipped = True\n-\n-                return False, list(members.values())\n+            if self.__all__ is not None:\n+                if len(self.__all__) == 0:\n+                    return False, []\n+                else:\n+                    for member in members.values():\n+                        if member.__name__ not in self.__all__:\n+                            member.skipped = True\n+            return True, [m for m in members.values() if not m.skipped]\n         else:\n             memberlist = self.options.members or []\n             ret = []\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\nindex 2d4f67bba..0c9ba9d7c 100644\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -98,6 +98,8 @@ def restify(cls: Optional[\"Type\"]) -> str:\n         return ':class:`%s`' % cls.__name__\n     elif cls.__module__ in ('__builtin__', 'builtins'):\n         return ':class:`%s`' % cls.__name__\n+    elif cls.__module__ == 'struct' and cls.__name__ == 'Struct':\n+        return ':class:`struct.Struct`'\n     else:\n         if sys.version_info >= (3, 7):  # py37+\n             return _restify_py37(cls)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sphinx-doc__sphinx-8713", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 755088ca5..cc7486d19 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -682,7 +682,11 @@ class GoogleDocstring:\n         return self._parse_generic_section(_('Notes'), use_admonition)\n \n     def _parse_other_parameters_section(self, section: str) -> List[str]:\n-        return self._format_fields(_('Other Parameters'), self._consume_fields())\n+        fields = self._consume_fields()\n+        if self._config.napoleon_use_param:\n+            return self._format_docutils_params(fields)\n+        else:\n+            return self._format_fields(_('Other Parameters'), fields)\n \n     def _parse_parameters_section(self, section: str) -> List[str]:\n         if self._config.napoleon_use_param:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13925", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..14ce49955a 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1297,10 +1297,17 @@ class Model(metaclass=ModelBase):\n \n     @classmethod\n     def _check_default_pk(cls):\n+        def has_parent_auto_created_pk(model):\n+            for parent in model._meta.get_parent_list():\n+                if parent._meta.pk and not parent._meta.pk.auto_created:\n+                    return True\n+            return False\n+\n         if (\n             cls._meta.pk.auto_created and\n             not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n-            not cls._meta.app_config._is_default_auto_field_overridden\n+            not cls._meta.app_config._is_default_auto_field_overridden and\n+            not has_parent_auto_created_pk(cls)\n         ):\n             return [\n                 checks.Warning(\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sphinx-doc__sphinx-8721", "model_patch": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..43b4acecf 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -182,6 +182,8 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    if app.builder.name == 'epub' and not env.config.viewcode_enable_epub:\n+        return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13933", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..a97e08bd0d 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1188,7 +1188,7 @@ class ModelChoiceField(ChoiceField):\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1284,7 +1284,7 @@ class ModelChoiceField(ChoiceField):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(self.error_messages['invalid_choice'] % {'value': value}, code='invalid_choice')\n         return value\n \n     def validate(self, value):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sphinx-doc__sphinx-8801", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex dc413b5c2..4698f65d1 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -724,6 +724,12 @@ class Documenter:\n                 if cls_doc == doc:\n                     doc = None\n \n+            # Ensure annotation-only members in superclass are not treated as undocumented\n+            if not doc:\n+                for base in self.object.__mro__[1:]:\n+                    if membername in base.__annotations__:\n+                        doc = \"Inherited from %s\" % base.__name__\n+                        break\n             if isinstance(obj, ObjectMember) and obj.docstring:\n                 # hack for ClassDocumenter to inject docstring via ObjectMember\n                 doc = obj.docstring\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 2428218696..f127c2986e 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -797,6 +797,9 @@ class Model(metaclass=ModelBase):\n             # Set the parent's PK value to self.\n             if field:\n                 setattr(self, field.attname, self._get_pk_val(parent._meta))\n+                # Ensure the primary key is correctly updated when saving parent.\n+                if parent._meta.pk.attname:\n+                    setattr(self, parent._meta.pk.attname, getattr(self, field.attname))\n                 # Since we didn't have an instance of the parent handy set\n                 # attname directly, bypassing the descriptor. Invalidate\n                 # the related object cache, in case it's been accidentally\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14016", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c2623f099f..3a8e7f9c67 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -26,6 +26,8 @@ def subclasses(cls):\n         yield from subclasses(subclass)\n \n \n+from collections.abc import dict_keys, dict_values\n+\n class Q(tree.Node):\n     \"\"\"\n     Encapsulate filters as objects that can then be combined logically (using\n@@ -38,7 +40,8 @@ class Q(tree.Node):\n     conditional = True\n \n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n-        super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n+        processed_kwargs = {k: list(v) if isinstance(v, (dict_keys, dict_values)) else v for k, v in kwargs.items()}\n+        super().__init__(children=[*args, *sorted(processed_kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n         if not isinstance(other, Q):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14017", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c957ffa564..e5d5292c08 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -64,6 +64,9 @@ class Q(tree.Node):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n \n+    def __rand__(self, other):\n+        return self._combine(other, self.AND)\n+\n     def __invert__(self):\n         obj = type(self)()\n         obj.add(self, self.AND)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pytest-dev__pytest-8365", "model_patch": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..7c3645bd8 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -152,9 +152,12 @@ def get_user() -> Optional[str]:\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n+    import re\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        sanitized_user = re.sub(r'[<>:\"/\\\\|?*]', '_', user)\n+        return sanitized_user\n     except (ImportError, KeyError):\n         return None\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-21055", "model_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex e1f97190c0..cc183bf636 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -65,6 +65,16 @@ def refine(expr, assumptions=True):\n         return new_expr\n     return refine(new_expr, assumptions)\n \n+def _refine_arg(expr, assumptions):\n+    if ask(Q.positive(expr.args[0]), assumptions):\n+        return S.Zero\n+    return expr\n+\n+handlers_dict = {\n+    'arg': _refine_arg,\n+    # ... other handlers\n+}\n+\n \n def refine_abs(expr, assumptions):\n     \"\"\"\n@@ -380,5 +390,6 @@ def refine_matrixelement(expr, assumptions):\n     're': refine_re,\n     'im': refine_im,\n     'sign': refine_sign,\n-    'MatrixElement': refine_matrixelement\n+    'MatrixElement': refine_matrixelement,\n+    'arg': _refine_arg\n }  # type: Dict[str, Callable[[Expr, Boolean], Expr]]\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..b570fb8e3a 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -31,9 +31,15 @@ from .utils import get_callable\n \n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n-        self.func = func\n-        self.args = args\n-        self.kwargs = kwargs\n+        if isinstance(func, functools.partial):\n+            self.func = func.func\n+            self.args = func.args + tuple(args)\n+            self.kwargs = {**func.keywords, **kwargs}\n+        else:\n+            self.func = func\n+            self.args = args\n+            self.kwargs = kwargs\n+\n         self.url_name = url_name\n         self.route = route\n         self.tried = tried\n@@ -45,12 +51,12 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+        if not hasattr(self.func, '__name__'):\n             # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            self._func_path = self.func.__class__.__module__ + '.' + self.func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = self.func.__module__ + '.' + self.func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n@@ -59,8 +65,15 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        func_repr = self._func_path\n+        if isinstance(self.func, functools.partial):\n+            func_repr = \"functools.partial(%s, *%s, **%s)\" % (\n+                self.func.func.__module__ + '.' + self.func.func.__name__,\n+                self.func.args,\n+                self.func.keywords\n+            )\n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+            func_repr, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-21171", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 43f9e6ad8d..fe2a514b93 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1968,7 +1968,7 @@ def _print_DiracDelta(self, expr, exp=None):\n             tex = r\"\\left(%s\\right)^{%s}\" % (tex, exp)\n         return tex\n \n-    def _print_SingularityFunction(self, expr):\n+    def _print_SingularityFunction(self, expr, **kwargs):\n         shift = self._print(expr.args[0] - expr.args[1])\n         power = self._print(expr.args[2])\n         tex = r\"{\\left\\langle %s \\right\\rangle}^{%s}\" % (shift, power)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pydata__xarray-5131", "model_patch": "diff --git a/xarray/core/groupby.py b/xarray/core/groupby.py\nindex 8a097251..af5abd9a 100644\n--- a/xarray/core/groupby.py\n+++ b/xarray/core/groupby.py\n@@ -436,7 +436,7 @@ class GroupBy(SupportsArithmetic):\n         return zip(self._unique_coord.values, self._iter_grouped())\n \n     def __repr__(self):\n-        return \"{}, grouped over {!r} \\n{!r} groups with labels {}.\".format(\n+        return \"{}, grouped over {!r}\\n{!r} groups with labels {}.\".format(\n             self.__class__.__name__,\n             self._unique_coord.name,\n             self._unique_coord.size,\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14238", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c30b..dc59e8d1bf 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2518,7 +2518,7 @@ class AutoFieldMeta(type):\n \n     @property\n     def _subclasses(self):\n-        return (BigAutoField, SmallAutoField)\n+        return tuple(cls for cls in self.__subclasses__() if issubclass(cls, (BigAutoField, SmallAutoField)))\n \n     def __instancecheck__(self, instance):\n         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 3894f4fd1c..fefb42e33e 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -9,6 +9,8 @@\n from .compatibility import iterable, ordered\n from .kind import UndefinedKind\n from ._print_helpers import Printable\n+from sympy.functions.elementary.piecewise import Piecewise\n+from sympy.polys.polyerrors import PolynomialError\n \n from inspect import getmro\n \n@@ -946,7 +948,13 @@ def subs(self, *args, **kwargs):\n         else:\n             rv = self\n             for old, new in sequence:\n-                rv = rv._subs(old, new, **kwargs)\n+                if self.has(Piecewise):\n+                    try:\n+                        rv = rv._subs(old, new, **kwargs)\n+                    except PolynomialError:\n+                        continue\n+                else:\n+                    rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n             return rv\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14382", "model_patch": "diff --git a/django/core/management/templates.py b/django/core/management/templates.py\nindex 8dc6068286..f248ab1b71 100644\n--- a/django/core/management/templates.py\n+++ b/django/core/management/templates.py\n@@ -74,7 +74,7 @@ class TemplateCommand(BaseCommand):\n                 raise CommandError(e)\n         else:\n             if app_or_project == 'app':\n-                self.validate_name(os.path.basename(target), 'directory')\n+                self.validate_name(os.path.basename(target.rstrip(os.sep)), 'directory')\n             top_dir = os.path.abspath(os.path.expanduser(target))\n             if not os.path.exists(top_dir):\n                 raise CommandError(\"Destination directory '%s' does not \"\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pallets__flask-4045", "model_patch": "diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py\nindex 5fb84d86..2f4d0dff 100644\n--- a/src/flask/blueprints.py\n+++ b/src/flask/blueprints.py\n@@ -181,6 +181,8 @@ class Blueprint(Scaffold):\n         root_path: t.Optional[str] = None,\n         cli_group: t.Optional[str] = _sentinel,  # type: ignore\n     ):\n+        if '.' in name:\n+            raise ValueError(\"Blueprint name should not contain a dot '.'\")\n         super().__init__(\n             import_name=import_name,\n             static_folder=static_folder,\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14411", "model_patch": "diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex 6f0be6b148..e6a6cba86c 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -5,6 +5,7 @@ from django.contrib.admin.utils import (\n     display_for_field, flatten_fieldsets, help_text_for_field, label_for_field,\n     lookup_field, quote,\n )\n+from django.contrib.auth.forms import ReadOnlyPasswordHashWidget\n from django.core.exceptions import ObjectDoesNotExist\n from django.db.models.fields.related import (\n     ForeignObjectRel, ManyToManyRel, OneToOneField,\n@@ -188,6 +189,8 @@ class AdminReadonlyField:\n         if not self.is_first:\n             attrs[\"class\"] = \"inline\"\n         label = self.field['label']\n+        if not isinstance(self.field['field'].widget, forms.ReadOnlyPasswordHashWidget):\n+            attrs['for'] = self.field['name']\n         return format_html('<label{}>{}{}</label>', flatatt(attrs), capfirst(label), self.form.label_suffix)\n \n     def get_admin_url(self, remote_field, remote_obj):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-21612", "model_patch": "diff --git a/sympy/parsing/latex/_parse_latex_antlr.py b/sympy/parsing/latex/_parse_latex_antlr.py\nindex 2e4a45ad20..9162b2f3f1 100644\n--- a/sympy/parsing/latex/_parse_latex_antlr.py\n+++ b/sympy/parsing/latex/_parse_latex_antlr.py\n@@ -384,9 +384,9 @@ def convert_frac(frac):\n     expr_bot = convert_expr(frac.lower)\n     inverse_denom = sympy.Pow(expr_bot, -1, evaluate=False)\n     if expr_top == 1:\n-        return inverse_denom\n+        return sympy.Mul(1, sympy.Pow(expr_bot, -1, evaluate=False), evaluate=False)\n     else:\n-        return sympy.Mul(expr_top, inverse_denom, evaluate=False)\n+        return sympy.Mul(expr_top, sympy.Pow(expr_bot, -1, evaluate=False), evaluate=False)\n \n def convert_binom(binom):\n     expr_n = convert_expr(binom.n)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-21614", "model_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 69df976b8b..869708e9bf 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -1692,6 +1692,12 @@ def variables(self):\n         return tuple(rv)\n \n     @property\n+    def kind(self):\n+        from sympy.core.kind import UndefinedKind, NumberKind\n+        if all(var.kind == NumberKind for var, _ in self.variable_count):\n+            return self.expr.kind\n+        return UndefinedKind\n+    @property\n     def variable_count(self):\n         return self._args[1:]\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-21627", "model_patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex 892e19cabb..f16347be00 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -298,7 +298,7 @@ def fdiff(self, argindex=1):\n \n     @classmethod\n     def eval(cls, arg):\n-        from sympy import cos\n+        from sympy import cos, I, acosh, acos\n         arg = sympify(arg)\n \n         if arg.is_Number:\n@@ -345,6 +345,9 @@ def eval(cls, arg):\n                 x = arg.args[0]\n                 return x/(sqrt(x - 1) * sqrt(x + 1))\n \n+            if arg == acos(-I + acosh(-arg.args[0] + I)):\n+                return S.Zero\n+\n     @staticmethod\n     @cacheit\n     def taylor_term(n, x, *previous_terms):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14534", "model_patch": "diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 2ff8b0ee26..c93959b1e3 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -277,7 +277,7 @@ class BoundWidget:\n \n     @property\n     def id_for_label(self):\n-        return 'id_%s_%s' % (self.data['name'], self.data['index'])\n+        return self.data['attrs']['id']\n \n     @property\n     def choice_label(self):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14580", "model_patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 4918261fb0..fa07e04a94 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -1,4 +1,3 @@\n-\n import os\n import re\n from importlib import import_module\n@@ -162,9 +161,12 @@ class MigrationWriter:\n                 imports.remove(line)\n                 self.needs_manual_porting = True\n \n+        # Check if models.Model is used in operations\n+        models_used = any(\"models.Model\" in op for op in items[\"operations\"])\n+\n         # django.db.migrations is always used, but models import may not be.\n         # If models import exists, merge it with migrations import.\n-        if \"from django.db import models\" in imports:\n+        if \"from django.db import models\" in imports or models_used:\n             imports.discard(\"from django.db import models\")\n             imports.add(\"from django.db import migrations, models\")\n         else:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14608", "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f..66d2c3c814 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -295,6 +295,7 @@ class BaseFormSet:\n         \"\"\"\n         if self._non_form_errors is None:\n             self.full_clean()\n+            self._non_form_errors = self.error_class(self._non_form_errors, error_class='nonform') if self._non_form_errors else self.error_class(error_class='nonform')\n         return self._non_form_errors\n \n     @property\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..206b8a56c 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -143,6 +143,10 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given message.\"\"\"\n+    skip(msg=msg, allow_module_level=True)\n+\n \n @_with_exception(Failed)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\ndiff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex f7a026ae7..275c43201 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -187,7 +187,7 @@ def evaluate_skip_marks(item: Item) -> Optional[Skip]:\n         try:\n             return Skip(*mark.args, **mark.kwargs)\n         except TypeError as e:\n-            raise TypeError(str(e) + \" - maybe you meant pytest.mark.skipif?\") from None\n+            raise TypeError(str(e) + \" - maybe you meant pytest.mark.skipif? Or use skip_module('reason') to skip a module.\") from None\n \n     return None\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14667", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 71a52fb754..eecf1aa275 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1221,6 +1221,8 @@ class QuerySet:\n         if fields == (None,):\n             clone.query.clear_deferred_loading()\n         else:\n+            if clone.query.deferred_loading[0]:\n+                clone.query.clear_deferred_loading()\n             clone.query.add_deferred_loading(fields)\n         return clone\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14672", "model_patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex ccc2223a5f..ebca8b07e9 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -301,7 +301,7 @@ class ManyToManyRel(ForeignObjectRel):\n \n         if through_fields and not through:\n             raise ValueError(\"Cannot specify through_fields without a through model\")\n-        self.through_fields = through_fields\n+        self.through_fields = make_hashable(through_fields)\n \n         self.symmetrical = symmetrical\n         self.db_constraint = db_constraint\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14730", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex febaadbb5b..e86f01668c 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1180,6 +1180,11 @@ class ManyToManyField(RelatedField):\n         if symmetrical is None:\n             symmetrical = (to == RECURSIVE_RELATIONSHIP_CONSTANT)\n \n+        if symmetrical and related_name is not None:\n+            raise ValueError(\n+                'Cannot set related_name if symmetrical is True.'\n+            )\n+\n         if through is not None and db_table is not None:\n             raise ValueError(\n                 'Cannot specify a db_table if an intermediary model is used.'\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14752", "model_patch": "diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py\nindex 3903e4c98c..593bb371dd 100644\n--- a/django/contrib/admin/views/autocomplete.py\n+++ b/django/contrib/admin/views/autocomplete.py\n@@ -26,12 +26,14 @@ class AutocompleteJsonView(BaseListView):\n         context = self.get_context_data()\n         return JsonResponse({\n             'results': [\n-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n-                for obj in context['object_list']\n+                self.serialize_result(obj, to_field_name) for obj in context['object_list']\n             ],\n             'pagination': {'more': context['page_obj'].has_next()},\n         })\n \n+    def serialize_result(self, obj, to_field_name):\n+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n+\n     def get_paginator(self, *args, **kwargs):\n         \"\"\"Use the ModelAdmin's paginator.\"\"\"\n         return self.model_admin.get_paginator(self.request, *args, **kwargs)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-21847", "model_patch": "diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 0e84403307..fc58747141 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -116,32 +116,15 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n         if not variables or max_degree == 0:\n             yield S.One\n             return\n-        # Force to list in case of passed tuple or other incompatible collection\n-        variables = list(variables) + [S.One]\n+        variables = list(variables)\n         if all(variable.is_commutative for variable in variables):\n-            monomials_list_comm = []\n-            for item in combinations_with_replacement(variables, max_degree):\n-                powers = dict()\n-                for variable in variables:\n-                    powers[variable] = 0\n-                for variable in item:\n-                    if variable != 1:\n-                        powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_comm.append(Mul(*item))\n-            yield from set(monomials_list_comm)\n+            for degree in range(min_degree, max_degree + 1):\n+                for item in combinations_with_replacement(variables, degree):\n+                    yield Mul(*item)\n         else:\n-            monomials_list_non_comm = []\n-            for item in product(variables, repeat=max_degree):\n-                powers = dict()\n-                for variable in variables:\n-                    powers[variable] = 0\n-                for variable in item:\n-                    if variable != 1:\n-                        powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_non_comm.append(Mul(*item))\n-            yield from set(monomials_list_non_comm)\n+            for degree in range(min_degree, max_degree + 1):\n+                for item in product(variables, repeat=degree):\n+                    yield Mul(*item)\n     else:\n         if any(min_degrees[i] > max_degrees[i] for i in range(n)):\n             raise ValueError('min_degrees[i] must be <= max_degrees[i] for all i')\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d01c7..4148bdcc9c 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -32,6 +32,7 @@ def _multi_decorate(decorators, method):\n     else:\n         decorators = [decorators]\n \n+    @wraps(method)\n     def _wrapper(self, *args, **kwargs):\n         # bound_method has the signature that 'decorator' expects i.e. no\n         # 'self' argument, but it's a closure over self so it can call\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-22005", "model_patch": "diff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py\nindex b9809fd4e9..674322d4eb 100644\n--- a/sympy/solvers/polysys.py\n+++ b/sympy/solvers/polysys.py\n@@ -240,7 +240,7 @@ def _solve_reduced_system(system, gens, entry=False):\n \n         univariate = list(filter(_is_univariate, basis))\n \n-        if len(univariate) == 1:\n+        if len(univariate) == 1 and len(gens) == 1:\n             f = univariate.pop()\n         else:\n             raise NotImplementedError(filldedent('''\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14855", "model_patch": "diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex dd154f72ee..ba8c3463a0 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -209,7 +209,11 @@ class AdminReadonlyField:\n             remote_field.model._meta.model_name,\n         )\n         try:\n-            url = reverse(url_name, args=[quote(remote_obj.pk)])\n+            url = reverse(\n+                url_name,\n+                args=[quote(remote_obj.pk)],\n+                current_app=self.model_admin.admin_site.name\n+            )\n             return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n         except NoReverseMatch:\n             return str(remote_obj)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14915", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5dcf923c12..bc7e6959e7 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1171,6 +1171,9 @@ class ModelChoiceIteratorValue:\n             other = other.value\n         return self.value == other\n \n+    def __hash__(self):\n+        return hash(self.value)\n+\n \n class ModelChoiceIterator:\n     def __init__(self, field):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14997", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex f0c81c123b..3b87bb08b7 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -419,13 +419,16 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         self.delete_model(old_field.remote_field.through)\n \n     def add_constraint(self, model, constraint):\n-        if isinstance(constraint, UniqueConstraint) and (\n-            constraint.condition or\n-            constraint.contains_expressions or\n-            constraint.include or\n-            constraint.deferrable\n-        ):\n-            super().add_constraint(model, constraint)\n+        if isinstance(constraint, UniqueConstraint):\n+            if constraint.condition or constraint.contains_expressions or constraint.include or constraint.deferrable:\n+                super().add_constraint(model, constraint)\n+            else:\n+                columns = ', '.join([field.column for field in constraint.fields])\n+                self.execute(self.sql_create_unique % {\n+                    \"name\": self.quote_name(constraint.name),\n+                    \"table\": self.quote_name(model._meta.db_table),\n+                    \"columns\": columns,\n+                })\n         else:\n             self._remake_table(model)\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-14999", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..c0086e3009 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -320,6 +320,8 @@ class RenameModel(ModelOperation):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n             # Move the main table\n             schema_editor.alter_db_table(\n                 new_model,\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15061", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 00c19e2c55..e2d871647c 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -848,10 +848,6 @@ class MultiWidget(Widget):\n         context['widget']['subwidgets'] = subwidgets\n         return context\n \n-    def id_for_label(self, id_):\n-        if id_:\n-            id_ += '_0'\n-        return id_\n \n     def value_from_datadict(self, data, files, name):\n         return [\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 456681ab2..de1e12db9 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -903,7 +903,7 @@ class AssertionRewriter(ast.NodeVisitor):\n \n             # Passed\n             fmt_pass = self.helper(\"_format_explanation\", msg)\n-            orig = _get_assertion_exprs(self.source)[assert_.lineno]\n+            orig = _get_assertion_exprs(self.source)[assert_.lineno - 1]\n             hook_call_pass = ast.Expr(\n                 self.helper(\n                     \"_call_assertion_pass\",\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15202", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 72fbe15551..50a7ce7cb5 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -125,6 +125,8 @@ class URLValidator(RegexValidator):\n                 super().__call__(url)\n             else:\n                 raise\n+        except ValueError:  # Catch ValueError from urlsplit\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         else:\n             # Now verify IPv6 in the netloc part\n             host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15213", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..bbff42adb1 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -979,7 +979,10 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         return super().get_group_by_cols()\n \n     def as_sql(self, compiler, connection):\n-        return compiler.compile(self.expression)\n+        sql, params = compiler.compile(self.expression)\n+        if not sql:\n+            sql = '1=1' if isinstance(self.expression, Q) else '0'\n+        return sql, params\n \n     def __repr__(self):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-22714", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 73c20334d0..c3151d54c0 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -912,6 +912,9 @@ class Point2D(Point):\n     def __new__(cls, *args, _nocheck=False, **kwargs):\n         if not _nocheck:\n             kwargs['dim'] = 2\n+            evaluate = kwargs.pop('evaluate', True)\n+            if not evaluate:\n+                return GeometryEntity.__new__(cls, *args, **kwargs)\n             args = Point(*args, **kwargs)\n         return GeometryEntity.__new__(cls, *args)\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15252", "model_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..53c1f6022c 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -1,5 +1,5 @@\n from django.apps.registry import Apps\n-from django.db import DatabaseError, models\n+from django.db import DatabaseError, models, router\n from django.utils.functional import classproperty\n from django.utils.timezone import now\n \n@@ -62,6 +62,9 @@ class MigrationRecorder:\n         # in the codebase.\n         if self.has_table():\n             return\n+        # Check if migration is allowed on this database\n+        if not router.allow_migrate(self.connection.alias, self.Migration):\n+            return\n         # Make the table\n         try:\n             with self.connection.schema_editor() as editor:\n@@ -74,6 +77,10 @@ class MigrationRecorder:\n         Return a dict mapping (app_name, migration_name) to Migration instances\n         for all applied migrations.\n         \"\"\"\n+        router = self.connection.settings_dict.get('router')\n+        if router and not router.allow_migrate(self.connection.alias, None):\n+            return {}\n+\n         if self.has_table():\n             return {(migration.app, migration.name): migration for migration in self.migration_qs}\n         else:\n@@ -88,6 +95,8 @@ class MigrationRecorder:\n \n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n+        if not router.allow_migrate(self.connection.alias, None):\n+            return\n         self.ensure_schema()\n         self.migration_qs.filter(app=app, name=name).delete()\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-22840", "model_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex d649dd02a9..ad107c45d2 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -8,6 +8,7 @@\n from sympy.core.symbol import symbols, Symbol\n from sympy.utilities.iterables import numbered_symbols, sift, \\\n         topological_sort, iterable\n+from sympy.matrices.expressions import MatrixSymbol\n \n from . import cse_opts\n \n@@ -794,6 +795,8 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n             temp.append(Tuple(*e.flat()))\n         elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix)):\n             temp.append(Tuple(*e.todok().items()))\n+        elif isinstance(e, MatrixSymbol):\n+            temp.append(Tuple(*[e[i, j] for i in range(e.shape[0]) for j in range(e.shape[1])]))\n         else:\n             temp.append(e)\n     exprs = temp\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15320", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 6f26dff0e0..201e4832f2 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1150,6 +1150,7 @@ class Subquery(BaseExpression, Combinable):\n     def __init__(self, queryset, output_field=None, **extra):\n         # Allow the usage of both QuerySet and sql.Query objects.\n         self.query = getattr(queryset, 'query', queryset)\n+        self.query.subquery = True\n         self.extra = extra\n         super().__init__(output_field)\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15347", "model_patch": "diff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py\nindex 1d390c71dd..e48d4edb08 100644\n--- a/django/contrib/messages/storage/cookie.py\n+++ b/django/contrib/messages/storage/cookie.py\n@@ -19,7 +19,7 @@ class MessageEncoder(json.JSONEncoder):\n             # Using 0/1 here instead of False/True to produce more compact json\n             is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n             message = [self.message_key, is_safedata, obj.level, obj.message]\n-            if obj.extra_tags:\n+            if obj.extra_tags is not None:\n                 message.append(obj.extra_tags)\n             return message\n         return super().default(obj)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15388", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 583c2be647..ace4b69a18 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -624,12 +624,15 @@ def start_django(reloader, main_func, *args, **kwargs):\n     django_main_thread.daemon = True\n     django_main_thread.start()\n \n+    from django.conf import settings\n+    template_dirs = settings.TEMPLATES[0]['DIRS']\n+    for directory in template_dirs:\n+        reloader.watch_dir(directory, '**/*')\n+\n     while not reloader.should_stop:\n         try:\n             reloader.run(django_main_thread)\n         except WatchmanUnavailable as ex:\n-            # It's possible that the watchman service shuts down or otherwise\n-            # becomes unavailable. In that case, use the StatReloader.\n             reloader = StatReloader()\n             logger.error('Error connecting to Watchman: %s', ex)\n             logger.info('Watching for file changes with %s', reloader.__class__.__name__)\n@@ -641,6 +644,10 @@ def run_with_reloader(main_func, *args, **kwargs):\n         if os.environ.get(DJANGO_AUTORELOAD_ENV) == 'true':\n             reloader = get_reloader()\n             logger.info('Watching for file changes with %s', reloader.__class__.__name__)\n+            from django.conf import settings\n+            template_dirs = settings.TEMPLATES[0]['DIRS']\n+            for directory in template_dirs:\n+                reloader.watch_dir(directory, '**/*')\n             start_django(reloader, main_func, *args, **kwargs)\n         else:\n             exit_code = restart_with_reloader()\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15400", "model_patch": "diff --git a/django/utils/functional.py b/django/utils/functional.py\nindex 9e1be0fe0f..1da894364d 100644\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -432,6 +432,11 @@ class SimpleLazyObject(LazyObject):\n             return result\n         return copy.deepcopy(self._wrapped, memo)\n \n+    def __radd__(self, other):\n+        if self._wrapped is empty:\n+            self._setup()\n+        return other + self._wrapped\n+\n \n def partition(predicate, values):\n     \"\"\"\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-23117", "model_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex 6490a655a4..4fa85d54dd 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -193,6 +193,8 @@ def _scan_iterable_shape(cls, iterable):\n         def f(pointer):\n             if not isinstance(pointer, Iterable):\n                 return [pointer], ()\n+            if not pointer:\n+                return [], (0,)\n \n             result = []\n             elems, shapes = zip(*[f(i) for i in pointer])\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-23191", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 66461181d0..2ed2cf8906 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1110,25 +1110,15 @@ def _print_BasisDependent(self, expr):\n             inneritems = list(vect.components.items())\n             inneritems.sort(key = lambda x: x[0].__str__())\n             for k, v in inneritems:\n-                #if the coef of the basis vector is 1\n-                #we skip the 1\n                 if v == 1:\n-                    o1.append(\"\" +\n-                              k._pretty_form)\n-                #Same for -1\n+                    o1.append(k._pretty_form)\n                 elif v == -1:\n-                    o1.append(\"(-1) \" +\n-                              k._pretty_form)\n-                #For a general expr\n+                    o1.append(\"(-1) \" + k._pretty_form)\n                 else:\n-                    #We always wrap the measure numbers in\n-                    #parentheses\n-                    arg_str = self._print(\n-                        v).parens()[0]\n-\n-                    o1.append(arg_str + ' ' + k._pretty_form)\n+                    arg_str = self._print(v).parens()[0]\n+                    o1.append(arg_str)\n+                    o1.append(k._pretty_form)\n                 vectstrs.append(k._pretty_form)\n-\n         #outstr = u(\"\").join(o1)\n         if o1[0].startswith(\" + \"):\n             o1[0] = o1[0][3:]\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e2729..5eb4eeb89 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -199,8 +199,13 @@ def _coord_matrix(model, pos, noutp):\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = m\n         return mat\n+\n+    if isinstance(model, CompoundModel):\n+        sepleft = _coord_matrix(model.left, 'left', noutp)\n+        sepright = _coord_matrix(model.right, 'right', noutp)\n+        return _operators[model.op](sepleft, sepright)\n+\n     if not model.separable:\n-        # this does not work for more than 2 coordinates\n         mat = np.zeros((noutp, model.n_inputs))\n         if pos == 'left':\n             mat[:model.n_outputs, : model.n_inputs] = 1\n@@ -208,7 +213,6 @@ def _coord_matrix(model, pos, noutp):\n             mat[-model.n_outputs:, -model.n_inputs:] = 1\n     else:\n         mat = np.zeros((noutp, model.n_inputs))\n-\n         for i in range(model.n_inputs):\n             mat[i, i] = 1\n         if pos == 'right':\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pylint-dev__pylint-5859", "model_patch": "diff --git a/pylint/checkers/misc.py b/pylint/checkers/misc.py\nindex 69149e61a..1a3b1e3da 100644\n--- a/pylint/checkers/misc.py\n+++ b/pylint/checkers/misc.py\n@@ -121,9 +121,9 @@ class EncodingChecker(BaseChecker):\n \n         notes = \"|\".join(re.escape(note) for note in self.config.notes)\n         if self.config.notes_rgx:\n-            regex_string = rf\"#\\s*({notes}|{self.config.notes_rgx})\\b\"\n+            regex_string = rf\"#\\s*({notes}|{self.config.notes_rgx})\\s*.*\"\n         else:\n-            regex_string = rf\"#\\s*({notes})\\b\"\n+            regex_string = rf\"#\\s*({notes})\\s*.*\"\n \n         self._fixme_pattern = re.compile(regex_string, re.I)\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15498", "model_patch": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..0d5ef9f028 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -126,7 +126,7 @@ def was_modified_since(header=None, mtime=0, size=0):\n       This is the size of the item we're talking about.\n     \"\"\"\n     try:\n-        if header is None:\n+        if header in (None, ''):\n             raise ValueError\n         matches = re.match(r\"^([^;]+)(; length=([0-9]+))?$\", header, re.IGNORECASE)\n         header_mtime = parse_http_date(matches[1])\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-23262", "model_patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex e4ac7cba8a..8b0f23abc4 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -869,7 +869,7 @@ def _print_tuple(self, expr):\n         if len(expr) == 1:\n             return \"(%s,)\" % self._print(expr[0])\n         else:\n-            return \"(%s)\" % self.stringify(expr, \", \")\n+            return \"(%s)\" % self._print(expr)\n \n     def _print_Tuple(self, expr):\n         return self._print_tuple(expr)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-22711", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex da5b40a5ef..54d70e39ae 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -903,13 +903,13 @@ class RangeSlider(SliderBase):\n             xy[1] = .25, val[1]\n             xy[2] = .75, val[1]\n             xy[3] = .75, val[0]\n-            xy[4] = .25, val[0]\n+            # xy[4] = .25, val[0]\n         else:\n             xy[0] = val[0], .25\n             xy[1] = val[0], .75\n             xy[2] = val[1], .75\n             xy[3] = val[1], .25\n-            xy[4] = val[0], .25\n+            # xy[4] = val[0], .25\n         self.poly.xy = xy\n         self.valtext.set_text(self._format(val))\n         if self.drawon:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sphinx-doc__sphinx-10325", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 62631f7ff..5a6cd0aa5 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -109,12 +109,16 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n-def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n+def inherited_members_option(arg: Any) -> Union[object, Set[str], List[str]]:\n     \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n     if arg in (None, True):\n         return 'object'\n-    else:\n+    elif isinstance(arg, str):\n+        return {arg}\n+    elif isinstance(arg, list):\n         return arg\n+    else:\n+        return {arg}\n \n \n def member_order_option(arg: Any) -> Optional[str]:\n@@ -682,10 +686,12 @@ class Documenter:\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n                 for cls in self.object.__mro__:\n-                    if cls.__name__ == self.options.inherited_members and cls != self.object:\n-                        # given member is a member of specified *super class*\n+                    if isinstance(self.options.inherited_members, list):\n+                        if cls.__name__ in self.options.inherited_members and cls != self.object:\n+                            return True\n+                    elif cls.__name__ == self.options.inherited_members and cls != self.object:\n                         return True\n-                    elif name in cls.__dict__:\n+                    if name in cls.__dict__:\n                         return False\n                     elif name in self.get_attr(cls, '__annotations__', {}):\n                         return False\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-22835", "model_patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex 1f33b9d3ec..76e95b3487 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -1303,11 +1303,14 @@ class Artist:\n                 return \"[]\"\n             normed = self.norm(data)\n             if np.isfinite(normed):\n-                # Midpoints of neighboring color intervals.\n-                neighbors = self.norm.inverse(\n-                    (int(self.norm(data) * n) + np.array([0, 1])) / n)\n-                delta = abs(neighbors - data).max()\n-                g_sig_digits = cbook._g_sig_digits(data, delta)\n+                try:\n+                    # Midpoints of neighboring color intervals.\n+                    neighbors = self.norm.inverse(\n+                        (int(self.norm(data) * n) + np.array([0, 1])) / n)\n+                    delta = abs(neighbors - data).max()\n+                    g_sig_digits = cbook._g_sig_digits(data, delta)\n+                except ValueError:\n+                    g_sig_digits = 3  # Fallback if norm.inverse fails.\n             else:\n                 g_sig_digits = 3  # Consistent with default below.\n             return \"[{:-#.{}g}]\".format(data, g_sig_digits)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pylint-dev__pylint-6506", "model_patch": "diff --git a/pylint/config/config_initialization.py b/pylint/config/config_initialization.py\nindex 24e453a73..c6dac4103 100644\n--- a/pylint/config/config_initialization.py\n+++ b/pylint/config/config_initialization.py\n@@ -82,7 +82,8 @@ def _config_initialization(\n     if unrecognized_options:\n         msg = \", \".join(unrecognized_options)\n         linter.add_message(\"unrecognized-option\", line=0, args=msg)\n-        raise _UnrecognizedOptionError(options=unrecognized_options)\n+        print(f\"error: unrecognized arguments: {msg}\", file=sys.stderr)\n+        sys.exit(2)\n \n     # Set the current module to configuration as we don't know where\n     # the --load-plugins key is coming from\ndiff --git a/pylint/config/exceptions.py b/pylint/config/exceptions.py\nindex 74a001c24..5764fb394 100644\n--- a/pylint/config/exceptions.py\n+++ b/pylint/config/exceptions.py\n@@ -11,12 +11,6 @@ class UnrecognizedArgumentAction(Exception):\n     \"\"\"\n \n \n-class _UnrecognizedOptionError(Exception):\n-    \"\"\"Raised if an ArgumentManager instance tries to parse an option that is unknown.\"\"\"\n-\n-    def __init__(self, options: list[str], *args: object) -> None:\n-        self.options = options\n-        super().__init__(*args)\n \n \n class ArgumentPreprocessingError(Exception):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e16ab8ce5..faba9ff5c 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1274,6 +1274,8 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n             sig = inspect.signature(self.object, type_aliases=self.config.autodoc_type_aliases)\n             args = stringify_signature(sig, **kwargs)\n+            # Remove duplicated *args and **kwargs\n+            args = args.replace('*args, **kwargs, *args, **kwargs', '*args, **kwargs')\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n                            self.fullname, exc)\n@@ -1544,7 +1546,6 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         try:\n             self._signature_class, self._signature_method_name, sig = self._get_signature()\n         except TypeError as exc:\n-            # __signature__ attribute contained junk\n             logger.warning(__(\"Failed to get a constructor signature for %s: %s\"),\n                            self.fullname, exc)\n             return None\n@@ -1552,7 +1553,11 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         if sig is None:\n             return None\n \n-        return stringify_signature(sig, show_return_annotation=False, **kwargs)\n+        formatted_signature = stringify_signature(sig, show_return_annotation=False, **kwargs)\n+        if self.config.autodoc_typehints == \"description\":\n+            formatted_signature = formatted_signature.replace('*args, ', '').replace('**kwargs, ', '')\n+\n+        return formatted_signature\n \n     def _find_signature(self) -> Tuple[str, str]:\n         result = super()._find_signature()\n@@ -2135,10 +2140,6 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n \n         try:\n             if self.object == object.__init__ and self.parent != object:\n-                # Classes not having own __init__() method are shown as no arguments.\n-                #\n-                # Note: The signature of object.__init__() is (self, /, *args, **kwargs).\n-                #       But it makes users confused.\n                 args = '()'\n             else:\n                 if inspect.isstaticmethod(self.object, cls=self.parent, name=self.object_name):\n@@ -2150,6 +2151,8 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                     sig = inspect.signature(self.object, bound_method=True,\n                                             type_aliases=self.config.autodoc_type_aliases)\n                 args = stringify_signature(sig, **kwargs)\n+                # Remove duplicated *args and **kwargs from stringify_signature\n+                args = args.replace(\"*, *,\", \"*\").replace(\"**, **,\", \"**\")\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n                            self.fullname, exc)\n@@ -2158,7 +2161,6 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n             args = ''\n \n         if self.config.strip_signature_backslash:\n-            # escape backslashes for reST\n             args = args.replace('\\\\', '\\\\\\\\')\n         return args\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15695", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..3dbfbb6d5e 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -967,20 +967,28 @@ class RenameIndex(IndexOperation):\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            index = next(\n+                (idx for idx in model._meta.indexes if idx.fields == self.old_fields),\n+                None,\n+            )\n+            if index:\n+                self.old_name = index.name\n+            else:\n+                # Backward operation with unnamed index is a no-op.\n+                return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n+        self._new_name_lower, self._old_name_lower = (\n+            self._old_name_lower,\n+            self._new_name_lower,\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n+        self._new_name_lower, self._old_name_lower = (\n+            self._old_name_lower,\n+            self._new_name_lower,\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15738", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 03f0f11507..3691cd60af 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -582,6 +582,8 @@ class BaseDatabaseSchemaEditor:\n             )\n             if default_name in constraint_names:\n                 constraint_names = [default_name]\n+        if not constraint_names:\n+            return\n         if len(constraint_names) != 1:\n             raise ValueError(\n                 \"Found wrong number (%s) of constraints for %s(%s)\"\ndiff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 5f41053283..9d7b611f2a 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1520,6 +1520,31 @@ class MigrationAutodetector:\n \n     def generate_altered_unique_together(self):\n         self._generate_altered_foo_together(operations.AlterUniqueTogether)\n+        self._generate_removed_unique_constraints()\n+\n+    def _generate_removed_unique_constraints(self):\n+        \"\"\"\n+        Generate operations to remove unique_together constraints before\n+        altering fields that would invalidate them.\n+        \"\"\"\n+        for app_label, model_name in sorted(self.from_state.models):\n+            from_model_state = self.from_state.models[app_label, model_name]\n+            to_model_state = self.to_state.models.get((app_label, model_name))\n+            if not to_model_state:\n+                continue\n+\n+            from_unique_together = set(from_model_state.options.get(\"unique_together\", []))\n+            to_unique_together = set(to_model_state.options.get(\"unique_together\", []))\n+\n+            removed_constraints = from_unique_together - to_unique_together\n+            if removed_constraints:\n+                self.add_operation(\n+                    app_label,\n+                    operations.AlterUniqueTogether(\n+                        name=model_name,\n+                        unique_together=to_unique_together,\n+                    ),\n+                )\n \n     def generate_altered_index_together(self):\n         self._generate_altered_foo_together(operations.AlterIndexTogether)\ndiff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 75a3b8b030..b2f8c7063c 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -562,6 +562,13 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.name)\n             alter_together = getattr(schema_editor, \"alter_%s\" % self.option_name)\n+            if self.option_name == \"unique_together\":\n+                # Remove old unique_together constraints first\n+                alter_together(\n+                    old_model,\n+                    getattr(old_model._meta, self.option_name, set()),\n+                    set()\n+                )\n             alter_together(\n                 new_model,\n                 getattr(old_model._meta, self.option_name, set()),\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 8526f44b..4133c52b 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1328,6 +1328,9 @@ class PairGrid(Grid):\n             called ``color`` and  ``label``.\n \n         \"\"\"\n+        if 'hue' in kwargs and isinstance(kwargs['hue'], pd.Series):\n+            kwargs['hue'] = kwargs['hue'].name\n+\n         row_indices, col_indices = np.indices(self.axes.shape)\n         indices = zip(row_indices.flat, col_indices.flat)\n         self._map_bivariate(func, indices, **kwargs)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-23299", "model_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex c268a56724..f4ab60b5f8 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -1175,7 +1175,12 @@ def get_backend():\n     --------\n     matplotlib.use\n     \"\"\"\n-    return rcParams['backend']\n+    from matplotlib import pyplot as plt\n+    Gcf = plt._pylab_helpers.Gcf\n+    saved_figs = Gcf.figs.copy()\n+    backend = rcParams['backend']\n+    Gcf.figs = saved_figs\n+    return backend\n \n \n def interactive(b):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15781", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex d37d43d5c5..3b0107f9e5 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -130,6 +130,10 @@ class DjangoHelpFormatter(HelpFormatter):\n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n \n+    def add_text(self, text):\n+        if text:\n+            self._add_item(lambda x: x, [text])\n+\n \n class OutputWrapper(TextIOBase):\n     \"\"\"\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-23314", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 9db44b7994..d7aee4812a 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -53,6 +53,13 @@ class Axes3D(Axes):\n \n     dist = _api.deprecate_privatize_attribute(\"3.6\")\n \n+    def set_visible(self, b):\n+        super().set_visible(b)\n+        for axis in self._axis_names:\n+            self.xaxis.set_visible(b)\n+            self.yaxis.set_visible(b)\n+            self.zaxis.set_visible(b)\n+\n     def __init__(\n             self, fig, rect=None, *args,\n             elev=30, azim=-60, roll=0, sharez=None, proj_type='persp',\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15789", "model_patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..ff454a786a 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -14,6 +14,8 @@ from django.utils.safestring import SafeData, SafeString, mark_safe\n from django.utils.text import normalize_newlines\n \n \n+from django.core.serializers.json import DjangoJSONEncoder\n+\n @keep_lazy(SafeString)\n def escape(text):\n     \"\"\"\n@@ -59,15 +61,13 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=DjangoJSONEncoder):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n-\n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15790", "model_patch": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..128658de32 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -50,15 +50,15 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n @register(Tags.templates)\n def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n-    libraries = defaultdict(list)\n+    libraries = defaultdict(set)\n \n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pylint-dev__pylint-7080", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..dcbe88f22 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -614,9 +614,21 @@ class PyLinter(\n                             os.path.join(root, file)\n                             for file in files\n                             if file.endswith(\".py\")\n+                            and not _is_ignored_file(\n+                                os.path.join(root, file),\n+                                self.config.ignore,\n+                                self.config.ignore_patterns,\n+                                self.config.ignore_paths,\n+                            )\n                         )\n             else:\n-                yield something\n+                if not _is_ignored_file(\n+                    something,\n+                    self.config.ignore,\n+                    self.config.ignore_patterns,\n+                    self.config.ignore_paths,\n+                ):\n+                    yield something\n \n     def check(self, files_or_modules: Sequence[str] | str) -> None:\n         \"\"\"Main checking entry: check a list of files or modules from their name.\n@@ -775,7 +787,7 @@ class PyLinter(\n             modules,\n             self.config.ignore,\n             self.config.ignore_patterns,\n-            self._ignore_paths,\n+            self.config.ignore_paths,\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pylint-dev__pylint-7114", "model_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..c5351e166 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -92,6 +92,8 @@ def expand_modules(\n                 modname = os.path.splitext(basename)[0]\n             if os.path.isdir(something):\n                 filepath = os.path.join(something, \"__init__.py\")\n+                if not os.path.exists(filepath):\n+                    filepath = os.path.join(something, basename + \".py\")\n             else:\n                 filepath = something\n         else:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15814", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 33cc636b22..5036335bec 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -748,7 +748,7 @@ class Query(BaseExpression):\n                     cur_model = source.related_model\n                 else:\n                     cur_model = source.remote_field.model\n-                opts = cur_model._meta\n+                opts = cur_model._meta.concrete_model._meta\n                 # Even if we're \"just passing through\" this model, we must add\n                 # both the current model's pk and the related reference field\n                 # (if it's not a reverse relation) to the things we select.\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15819", "model_patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..ac06707d71 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -186,6 +186,9 @@ class Command(BaseCommand):\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n                             field_type = \"%s('%s'\" % (rel_type, rel_to)\n+\n+                        related_name = f\"related_{column_name}\"\n+                        extra_params[\"related_name\"] = related_name\n                     else:\n                         # Calling `get_field_type` to get the field type string and any\n                         # additional parameters and notes.\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15851", "model_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 4c9bd63546..3b5ddafaca 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -32,9 +32,9 @@ class DatabaseClient(BaseDatabaseClient):\n             args += [\"-h\", host]\n         if port:\n             args += [\"-p\", str(port)]\n+        args.extend(parameters)\n         if dbname:\n             args += [dbname]\n-        args.extend(parameters)\n \n         env = {}\n         if passwd:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-23476", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex c55864243a..c9156e46e2 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3030,6 +3030,9 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+\n+        state['_dpi'] = self._dpi\n+\n         return state\n \n     def __setstate__(self, state):\n@@ -3042,6 +3045,7 @@ class Figure(FigureBase):\n                 f\"is unlikely to function correctly.\")\n \n         self.__dict__ = state\n+        self._set_dpi(state['_dpi'], forward=False)\n \n         # re-initialise some of the unstored state information\n         FigureCanvasBase(self)  # Set self.canvas.\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pylint-dev__pylint-7228", "model_patch": "diff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 5043fe765..b27fe17fd 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -23,6 +23,9 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n+    if r'\\p{' in value:\n+        import regex\n+        return regex.compile(value)\n     return re.compile(value)\n \n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15902", "model_patch": "diff --git a/django/forms/utils.py b/django/forms/utils.py\nindex 905babce4d..17cefb10e7 100644\n--- a/django/forms/utils.py\n+++ b/django/forms/utils.py\n@@ -5,6 +5,7 @@ from collections import UserList\n from django.conf import settings\n from django.core.exceptions import ValidationError\n from django.forms.renderers import get_default_renderer\n+from django.forms.formsets import ManagementForm\n from django.utils import timezone\n from django.utils.deprecation import RemovedInDjango50Warning\n from django.utils.html import escape, format_html_join\n@@ -65,7 +66,7 @@ class RenderableMixin:\n         renderer = renderer or self.renderer\n         template = template_name or self.template_name\n         context = context or self.get_context()\n-        if (\n+        if not isinstance(self, ManagementForm) and (\n             template == \"django/forms/default.html\"\n             or template == \"django/forms/formsets/default.html\"\n         ):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-23562", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..1c6f01bac5 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -708,6 +708,8 @@ class Poly3DCollection(PolyCollection):\n                 raise ValueError('verts must be a list of (N, 3) array-like')\n         self.set_zsort(zsort)\n         self._codes3d = None\n+        self._facecolors2d = None\n+        self._edgecolors2d = None\n \n     _zsort_functions = {\n         'average': np.average,\n@@ -765,6 +767,8 @@ class Poly3DCollection(PolyCollection):\n         self._facecolor3d = PolyCollection.get_facecolor(self)\n         self._edgecolor3d = PolyCollection.get_edgecolor(self)\n         self._alpha3d = PolyCollection.get_alpha(self)\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n         self.stale = True\n \n     def set_sort_zpos(self, val):\n@@ -811,8 +815,10 @@ class Poly3DCollection(PolyCollection):\n                  in enumerate(zip(xyzlist, cface, cedge))),\n                 key=lambda x: x[0], reverse=True)\n \n-            _, segments_2d, self._facecolors2d, self._edgecolors2d, idxs = \\\n+            _, segments_2d, facecolors2d, edgecolors2d, idxs = \\\n                 zip(*z_segments_2d)\n+            self._facecolors2d = np.array(facecolors2d)\n+            self._edgecolors2d = np.array(edgecolors2d)\n         else:\n             segments_2d = []\n             self._facecolors2d = np.empty((0, 4))\n@@ -866,8 +872,9 @@ class Poly3DCollection(PolyCollection):\n             pass\n         self.stale = True\n \n-    def get_facecolor(self):\n-        return self._facecolors2d\n+    def get_facecolors(self):\n+        return self._facecolors2d if self._facecolors2d is not None else self._facecolor3d\n+    get_facecolor = get_facecolors\n \n     def get_edgecolor(self):\n         return self._edgecolors2d\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-23563", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..e87e61b088 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -166,7 +166,7 @@ class Line3D(lines.Line2D):\n         Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n         \"\"\"\n         super().__init__([], [], *args, **kwargs)\n-        self._verts3d = xs, ys, zs\n+        self._verts3d = (xs, ys, zs) if (xs is not None and ys is not None and zs is not None) else ([], [], [])\n \n     def set_3d_properties(self, zs=0, zdir='z'):\n         xs = self.get_xdata()\n@@ -193,9 +193,9 @@ class Line3D(lines.Line2D):\n         Accepts x, y, z arguments or a single array-like (x, y, z)\n         \"\"\"\n         if len(args) == 1:\n-            self._verts3d = args[0]\n+            self._verts3d = tuple(map(np.asarray, args[0]))\n         else:\n-            self._verts3d = args\n+            self._verts3d = tuple(map(np.asarray, args))\n         self.stale = True\n \n     def get_data_3d(self):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-15996", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 38da1e6ecc..50c5300840 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -125,8 +125,13 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n+        try:\n+            name = self.value.name\n+        except AttributeError:\n+            _, members = enum._decompose(enum_class, self.value)\n+            name = \" | \".join(member.name for member in members)\n         return (\n-            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n+            \"%s.%s[%r]\" % (module, enum_class.__qualname__, name),\n             {\"import %s\" % module},\n         )\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-16041", "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 57676428ff..2378a27077 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -257,12 +257,14 @@ class BaseFormSet(RenderableFormMixin):\n \n     @property\n     def empty_form(self):\n+        form_kwargs = self.get_form_kwargs(None)\n+        form_kwargs.pop('empty_permitted', None)\n         form = self.form(\n             auto_id=self.auto_id,\n             prefix=self.add_prefix(\"__prefix__\"),\n             empty_permitted=True,\n             use_required_attribute=False,\n-            **self.get_form_kwargs(None),\n+            **form_kwargs,\n             renderer=self.renderer,\n         )\n         self.add_fields(form, None)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-16046", "model_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 488d6a77cd..e952af3fdc 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -68,7 +68,7 @@ def format(\n             str_number = \"{:f}\".format(number)\n     else:\n         str_number = str(number)\n-    if str_number[0] == \"-\":\n+    if str_number and str_number[0] == \"-\":\n         sign = \"-\"\n         str_number = str_number[1:]\n     # decimal part\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "mwaskom__seaborn-3010", "model_patch": "diff --git a/seaborn/_stats/regression.py b/seaborn/_stats/regression.py\nindex 7b7ddc8d..e99b3607 100644\n--- a/seaborn/_stats/regression.py\n+++ b/seaborn/_stats/regression.py\n@@ -23,8 +23,10 @@ class PolyFit(Stat):\n \n         x = data[\"x\"]\n         y = data[\"y\"]\n+        mask = ~x.isna() & ~y.isna()\n+        x = x[mask]\n+        y = y[mask]\n         if x.nunique() <= self.order:\n-            # TODO warn?\n             xx = yy = []\n         else:\n             p = np.polyfit(x, y, self.order)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-23913", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..5621f04527 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -341,6 +341,7 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,          # make legend draggable\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -539,6 +540,9 @@ class Legend(Artist):\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n \n+        if draggable:\n+            self.set_draggable(True)\n+\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-24066", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 3daf84c108..d313a020a7 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -169,7 +169,7 @@ def _collect_factor_and_dimension(self, expr):\n             exp_factor, exp_dim = self._collect_factor_and_dimension(expr.exp)\n             if self.get_dimension_system().is_dimensionless(exp_dim):\n                 exp_dim = 1\n-            return factor ** exp_factor, dim ** (exp_factor * exp_dim)\n+            return factor ** exp_factor, dim ** exp_factor\n         elif isinstance(expr, Add):\n             factor, dim = self._collect_factor_and_dimension(expr.args[0])\n             for addend in expr.args[1:]:\n@@ -193,7 +193,7 @@ def _collect_factor_and_dimension(self, expr):\n             fds = [self._collect_factor_and_dimension(\n                 arg) for arg in expr.args]\n             return (expr.func(*(f[0] for f in fds)),\n-                    *(d[1] for d in fds))\n+                    Dimension(1))\n         elif isinstance(expr, Dimension):\n             return S.One, expr\n         else:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-23964", "model_patch": "diff --git a/lib/matplotlib/backends/backend_ps.py b/lib/matplotlib/backends/backend_ps.py\nindex f209e811f1..bd996b7509 100644\n--- a/lib/matplotlib/backends/backend_ps.py\n+++ b/lib/matplotlib/backends/backend_ps.py\n@@ -666,7 +666,8 @@ grestore\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-23987", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..e431ec659d 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1310,7 +1310,8 @@ default: %(va)s\n             as a fraction of the average Axes height.\n         \"\"\"\n         if (self.get_layout_engine() is not None and\n-                not self.get_layout_engine().adjust_compatible):\n+                not self.get_layout_engine().adjust_compatible and\n+                not self.get_constrained_layout()):\n             _api.warn_external(\n                 \"This figure was using a layout engine that is \"\n                 \"incompatible with subplots_adjust and/or tight_layout; \"\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-16139", "model_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b3cfc6723c..f6c4b7fc2f 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -163,7 +163,7 @@ class UserChangeForm(forms.ModelForm):\n         super().__init__(*args, **kwargs)\n         password = self.fields.get(\"password\")\n         if password:\n-            password.help_text = password.help_text.format(\"../password/\")\n+            password.help_text = password.help_text.format(f\"../../{self.instance.pk}/password/\")\n         user_permissions = self.fields.get(\"user_permissions\")\n         if user_permissions:\n             user_permissions.queryset = user_permissions.queryset.select_related(\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-24102", "model_patch": "diff --git a/sympy/parsing/mathematica.py b/sympy/parsing/mathematica.py\nindex 7ea14ce33a..f06116d3e1 100644\n--- a/sympy/parsing/mathematica.py\n+++ b/sympy/parsing/mathematica.py\n@@ -168,6 +168,30 @@ class MathematicaParser:\n         '^': '**',\n         '{': '[',\n         '}': ']',\n+        '\u03b1': '\u03b1',\n+        '\u03b2': '\u03b2',\n+        '\u03b3': '\u03b3',\n+        '\u03b4': '\u03b4',\n+        '\u03b5': '\u03b5',\n+        '\u03b6': '\u03b6',\n+        '\u03b7': '\u03b7',\n+        '\u03b8': '\u03b8',\n+        '\u03b9': '\u03b9',\n+        '\u03ba': '\u03ba',\n+        '\u03bb': '\u03bb',\n+        '\u03bc': '\u03bc',\n+        '\u03bd': '\u03bd',\n+        '\u03be': '\u03be',\n+        '\u03bf': '\u03bf',\n+        '\u03c0': '\u03c0',\n+        '\u03c1': '\u03c1',\n+        '\u03c3': '\u03c3',\n+        '\u03c4': '\u03c4',\n+        '\u03c5': '\u03c5',\n+        '\u03c6': '\u03c6',\n+        '\u03c7': '\u03c7',\n+        '\u03c8': '\u03c8',\n+        '\u03c9': '\u03c9',\n     }\n \n     RULES = {\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-24149", "model_patch": "diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 34c6ddb861..c35a3eef8e 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1746,7 +1746,7 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n-        return next(val for val in obj if safe_isfinite(val))\n+        return next((val for val in obj if safe_isfinite(val)), np.nan)\n \n \n def sanitize_sequence(data):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-24152", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 78accaf295..c0f21a2449 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -246,9 +246,10 @@ def _eval_expand_tensorproduct(self, **hints):\n             if isinstance(args[i], Add):\n                 for aa in args[i].args:\n                     tp = TensorProduct(*args[:i] + (aa,) + args[i + 1:])\n-                    if isinstance(tp, TensorProduct):\n-                        tp = tp._eval_expand_tensorproduct()\n-                    add_args.append(tp)\n+                    c_part, nc_part = tp.args_cnc()\n+                    if len(nc_part) == 1 and isinstance(nc_part[0], TensorProduct):\n+                        nc_part = (nc_part[0]._eval_expand_tensorproduct(),)\n+                    add_args.append(Mul(*c_part) * Mul(*nc_part))\n                 break\n \n         if add_args:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-24265", "model_patch": "diff --git a/lib/matplotlib/style/core.py b/lib/matplotlib/style/core.py\nindex fb0a5426e6..a4479d827b 100644\n--- a/lib/matplotlib/style/core.py\n+++ b/lib/matplotlib/style/core.py\n@@ -137,7 +137,7 @@ def use(style):\n                     \"correspond to the styles shipped by seaborn. However, \"\n                     \"they will remain available as 'seaborn-v0_8-<style>'. \"\n                     \"Alternatively, directly use the seaborn API instead.\")\n-                s = s.replace(\"seaborn\", \"seaborn-v0_8\")\n+                s = s.replace(\"seaborn-colorblind\", \"seaborn-v0_8-colorblind\").replace(\"seaborn\", \"seaborn-v0_8\")\n         return s\n \n     for style in map(fix_style, styles):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 46de2f53a0..a4f4f4fb35 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -131,7 +131,7 @@ class Field:\n         # label_suffix -- Suffix to be added to the label. Overrides\n         #                 form's label_suffix.\n         self.required, self.label, self.initial = required, label, initial\n-        self.show_hidden_initial = show_hidden_initial\n+        self.show_hidden_initial = False\n         self.help_text = help_text\n         self.disabled = disabled\n         self.label_suffix = label_suffix\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-24334", "model_patch": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex af0815d41d..5193752eef 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -2021,6 +2021,12 @@ class Axis(martist.Artist):\n         other limits, you should set the limits explicitly after setting the\n         ticks.\n         \"\"\"\n+        from matplotlib.text import Text\n+        valid_text_kwargs = Text().properties()\n+        for key in kwargs:\n+            if key not in valid_text_kwargs:\n+                raise TypeError(f\"'{key}' is not a valid Text property\")\n+\n         result = self._set_tick_locations(ticks, minor=minor)\n         if labels is not None:\n             self.set_ticklabels(labels, minor=minor, **kwargs)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-24213", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex a436880c4b..5705c821c2 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,7 +175,7 @@ def _collect_factor_and_dimension(self, expr):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n                         'but it should be {}'.format(\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-16255", "model_patch": "diff --git a/django/contrib/sitemaps/__init__.py b/django/contrib/sitemaps/__init__.py\nindex 27756d9d96..b40ad806ed 100644\n--- a/django/contrib/sitemaps/__init__.py\n+++ b/django/contrib/sitemaps/__init__.py\n@@ -168,7 +168,7 @@ class Sitemap:\n         if callable(self.lastmod):\n             try:\n                 return max([self.lastmod(item) for item in self.items()])\n-            except TypeError:\n+            except (TypeError, ValueError):\n                 return None\n         else:\n             return self.lastmod\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-16379", "model_patch": "diff --git a/django/core/cache/backends/filebased.py b/django/core/cache/backends/filebased.py\nindex 631da49444..f980d8d6ac 100644\n--- a/django/core/cache/backends/filebased.py\n+++ b/django/core/cache/backends/filebased.py\n@@ -91,8 +91,11 @@ class FileBasedCache(BaseCache):\n     def has_key(self, key, version=None):\n         fname = self._key_to_file(key, version)\n         if os.path.exists(fname):\n-            with open(fname, \"rb\") as f:\n-                return not self._is_expired(f)\n+            try:\n+                with open(fname, \"rb\") as f:\n+                    return not self._is_expired(f)\n+            except FileNotFoundError:\n+                return False\n         return False\n \n     def _cull(self):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "astropy__astropy-14182", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8ef..020d341ab 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,14 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows\n \n     def write(self, lines):\n         lines = super().write(lines)\n+        if self.header_rows:\n+            header_lines = [' '.join(self.header_rows)]\n+            lines = header_lines + lines\n         lines = [lines[1]] + lines + [lines[1]]\n         return lines\ndiff --git a/astropy/io/ascii/ui.py b/astropy/io/ascii/ui.py\nindex 993dacf51..8cedd2084 100644\n--- a/astropy/io/ascii/ui.py\n+++ b/astropy/io/ascii/ui.py\n@@ -926,6 +926,7 @@ def write(\n     fast_writer=True,\n     *,\n     overwrite=False,\n+    header_rows=None,\n     **kwargs,\n ):\n     # Docstring inserted below\n@@ -972,7 +973,7 @@ def write(\n         fast_writer = False\n \n     Writer = _get_format_class(format, Writer, \"Writer\")\n-    writer = get_writer(Writer=Writer, fast_writer=fast_writer, **kwargs)\n+    writer = get_writer(Writer=Writer, fast_writer=fast_writer, header_rows=header_rows, **kwargs)\n     if writer._format_name in core.FAST_CLASSES:\n         writer.write(table, output)\n         return\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "mwaskom__seaborn-3190", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..be984622 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -162,56 +162,29 @@ class Nominal(Scale):\n         if new._label_params is None:\n             new = new.label()\n \n-        # TODO flexibility over format() which isn't great for numbers / dates\n         stringify = np.vectorize(format, otypes=[\"object\"])\n \n-        units_seed = categorical_order(data, new.order)\n+        if data.dtype == bool:\n+            data = data.astype(str)\n \n-        # TODO move to Nominal._get_scale?\n-        # TODO this needs some more complicated rethinking about how to pass\n-        # a unit dictionary down to these methods, along with how much we want\n-        # to invest in their API. What is it useful for tick() to do here?\n-        # (Ordinal may be different if we draw that contrast).\n-        # Any customization we do to allow, e.g., label wrapping will probably\n-        # require defining our own Formatter subclass.\n-        # We could also potentially implement auto-wrapping in an Axis subclass\n-        # (see Axis.draw ... it already is computing the bboxes).\n-        # major_locator, minor_locator = new._get_locators(**new._tick_params)\n-        # major_formatter = new._get_formatter(major_locator, **new._label_params)\n+        units_seed = categorical_order(data, new.order)\n \n         class CatScale(mpl.scale.LinearScale):\n-            name = None  # To work around mpl<3.4 compat issues\n+            name = None\n \n             def set_default_locators_and_formatters(self, axis):\n                 ...\n-                # axis.set_major_locator(major_locator)\n-                # if minor_locator is not None:\n-                #     axis.set_minor_locator(minor_locator)\n-                # axis.set_major_formatter(major_formatter)\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n-\n-            # TODO Currently just used in non-Coordinate contexts, but should\n-            # we use this to (A) set the padding we want for categorial plots\n-            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n             axis.set_view_interval(0, len(units_seed) - 1)\n \n         new._matplotlib_scale = mpl_scale\n \n-        # TODO array cast necessary to handle float/int mixture, which we need\n-        # to solve in a more systematic way probably\n-        # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n         axis.update_units(stringify(np.array(units_seed)))\n \n-        # TODO define this more centrally\n         def convert_units(x):\n-            # TODO only do this with explicit order?\n-            # (But also category dtype?)\n-            # TODO isin fails when units_seed mixes numbers and strings (numpy error?)\n-            # but np.isin also does not seem any faster? (Maybe not broadcasting in C)\n-            # keep = x.isin(units_seed)\n             keep = np.array([x_ in units_seed for x_ in x], bool)\n             out = np.full(len(x), np.nan)\n             out[keep] = axis.convert_units(stringify(x[keep]))\n@@ -220,7 +193,6 @@ class Nominal(Scale):\n         new._pipeline = [\n             convert_units,\n             prop.get_mapping(new, data),\n-            # TODO how to handle color representation consistency?\n         ]\n \n         def spacer(x):\n@@ -347,8 +319,12 @@ class ContinuousBase(Scale):\n             else:\n                 vmin, vmax = new.norm\n             vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            if np.issubdtype(data.dtype, np.bool_):\n+                a = forward(vmin)\n+                b = 1\n+            else:\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n \n             def normalize(x):\n                 return (x - a) / b\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-16400", "model_patch": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex 0b5a982617..8e0fbc814c 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -45,9 +45,6 @@ def create_permissions(\n     if not app_config.models_module:\n         return\n \n-    # Ensure that contenttypes are created for this app. Needed if\n-    # 'django.contrib.auth' is in INSTALLED_APPS before\n-    # 'django.contrib.contenttypes'.\n     create_contenttypes(\n         app_config,\n         verbosity=verbosity,\n@@ -68,14 +65,9 @@ def create_permissions(\n     if not router.allow_migrate_model(using, Permission):\n         return\n \n-    # This will hold the permissions we're looking for as\n-    # (content_type, (codename, name))\n     searched_perms = []\n-    # The codenames and ctypes that should exist.\n     ctypes = set()\n     for klass in app_config.get_models():\n-        # Force looking up the content types in the current database\n-        # before creating foreign keys to them.\n         ctype = ContentType.objects.db_manager(using).get_for_model(\n             klass, for_concrete_model=False\n         )\n@@ -84,9 +76,6 @@ def create_permissions(\n         for perm in _get_all_permissions(klass._meta):\n             searched_perms.append((ctype, perm))\n \n-    # Find all the Permissions that have a content_type for a model we're\n-    # looking for.  We don't need to check for codenames since we already have\n-    # a list of the ones we're going to create.\n     all_perms = set(\n         Permission.objects.using(using)\n         .filter(\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pylint-dev__pylint-7993", "model_patch": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 29bd46798..9b2b64771 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -175,14 +175,14 @@ class TextReporter(BaseReporter):\n         self._template = template\n \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        arguments = re.findall(r\"\\{([^{}]+?)(:.*)?\\}\", template)\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\n                     f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                     \"Are you sure it is supported on the current version of pylint?\"\n                 )\n-                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n+                template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:.*?)?\\}\", \"\", template)\n         self._fixed_template = template\n \n     def write_message(self, msg: Message) -> None:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-16408", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex f88662de12..35c928e52d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -2604,8 +2604,9 @@ class RelatedPopulator:\n             obj = self.model_cls.from_db(self.db, self.init_list, obj_data)\n             for rel_iter in self.related_populators:\n                 rel_iter.populate(row, obj)\n-        self.local_setter(from_obj, obj)\n-        if obj is not None:\n+        if not hasattr(from_obj, self.local_setter.field.get_cache_name()):\n+            self.local_setter(from_obj, obj)\n+        if obj is not None and not hasattr(obj, self.remote_setter.field.get_cache_name()):\n             self.remote_setter(obj, from_obj)\n \n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-24970", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 2d3072da04..4399247cf0 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -670,9 +670,9 @@ class Colormap:\n         self._rgba_bad = (0.0, 0.0, 0.0, 0.0)  # If bad, don't paint anything.\n         self._rgba_under = None\n         self._rgba_over = None\n-        self._i_under = self.N\n-        self._i_over = self.N + 1\n-        self._i_bad = self.N + 2\n+        self._i_under = np.array(self.N).astype(np.uint8)\n+        self._i_over = np.array(self.N + 1).astype(np.uint8)\n+        self._i_bad = np.array(self.N + 2).astype(np.uint8)\n         self._isinit = False\n         #: When this colormap exists on a scalar mappable and colorbar_extend\n         #: is not False, colorbar creation will pick up ``colorbar_extend`` as\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-25079", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 0f3b25d4e4..815a5ff9cb 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -635,6 +635,10 @@ class ScalarMappable:\n         \"\"\"\n         self.norm = norm\n \n+        if self.colorbar is not None:\n+            self.colorbar.set_norm(norm)\n+            self.colorbar.update_normal(self)\n+\n     def autoscale(self):\n         \"\"\"\n         Autoscale the scalar limits on the norm instance using the\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-25500", "model_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 2c4a33616..c3d3b3585 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,7 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+            proba[:, class_idx] = calibrator.predict(np.array(this_pred))\n \n         # Normalize the probabilities\n         if n_classes == 2:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-16527", "model_patch": "diff --git a/django/contrib/admin/templatetags/admin_modify.py b/django/contrib/admin/templatetags/admin_modify.py\nindex 9df4b7aadb..5b742af46a 100644\n--- a/django/contrib/admin/templatetags/admin_modify.py\n+++ b/django/contrib/admin/templatetags/admin_modify.py\n@@ -100,6 +100,7 @@ def submit_row(context):\n                 and context.get(\"show_delete\", True)\n             ),\n             \"show_save_as_new\": not is_popup\n+            and has_add_permission\n             and has_change_permission\n             and change\n             and save_as,\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "astropy__astropy-14365", "model_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004a..88093fb00 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,7 +60,7 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n     if delimiter is None:\n@@ -68,7 +68,7 @@ def _line_type(line, delimiter=None):\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n     _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..b0926c98c 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -405,7 +405,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     # selection is done with one dimension\n                     columns = columns[0]\n \n-            yield (name, trans, columns, get_weight(name))\n+            if not _is_empty_column_selection(columns):\n+                yield (name, trans, columns, get_weight(name))\n \n     def _validate_transformers(self):\n         if not self.transformers:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex 5eaef2fde..36fe38235 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -76,6 +76,8 @@ def unique_labels(*ys):\n     xp, is_array_api = get_namespace(*ys)\n     if not ys:\n         raise ValueError(\"No argument has been passed.\")\n+    # Convert nullable pandas dtypes to their corresponding numpy dtypes\n+    ys = [y.astype(y.dtype.name.lower()) if hasattr(y.dtype, 'name') and y.dtype.name in [\"Int64\", \"Float64\", \"boolean\"] else y for y in ys]\n     # Check that we don't mix label format\n \n     ys_types = set(type_of_target(x) for x in ys)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pallets__flask-4992", "model_patch": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex d4fc310f..df28b330 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -234,6 +234,7 @@ class Config(dict):\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = 'r',\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -245,7 +246,7 @@ class Config(dict):\n             app.config.from_file(\"config.json\", load=json.load)\n \n             import toml\n-            app.config.from_file(\"config.toml\", load=toml.load)\n+            app.config.from_file(\"config.toml\", load=toml.load, mode='rb')\n \n         :param filename: The path to the data file. This can be an\n             absolute path or relative to the config root path.\n@@ -254,6 +255,7 @@ class Config(dict):\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode in which to open the file.\n         :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 2.0\n@@ -261,7 +263,7 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex ff6abdb958..e8a66ef676 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -93,6 +93,15 @@ class DraggableLegend(DraggableOffsetBox):\n         loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n         self.legend.set_bbox_to_anchor(loc_in_bbox)\n \n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        state.pop('legend', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        self.legend = None\n+\n \n _legend_kw_doc_base = \"\"\"\n bbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats\ndiff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 1dee8a23d9..e0a7ffc7b2 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1619,3 +1619,12 @@ class DraggableAnnotation(DraggableBase):\n         ann = self.annotation\n         ann.xyann = ann.get_transform().inverted().transform(\n             (self.ox + dx, self.oy + dy))\n+\n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        if 'canvas' in state:\n+            del state['canvas']\n+        return state\n+\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-16595", "model_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex cd3aab43ad..e2682aeac0 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -264,6 +264,10 @@ class AlterField(FieldOperation):\n                     field=self.field,\n                 ),\n             ]\n+        elif isinstance(operation, AlterField) and self.is_same_field_operation(\n+            operation\n+        ):\n+            return [operation]\n         return super().reduce(operation, app_label)\n \n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex b4c38368bf..e23590b78a 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3170,6 +3170,10 @@ None}, default: None\n         # add version information to the state\n         state['__mpl_version__'] = mpl.__version__\n \n+        # Convert weak references in _align_label_groups to strong references\n+        if '_align_label_groups' in state:\n+            state['_align_label_groups'] = {k: list(v) for k, v in state['_align_label_groups'].items()}\n+\n         # check whether the figure manager (if any) is registered with pyplot\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n@@ -3187,6 +3191,13 @@ None}, default: None\n \n         self.__dict__ = state\n \n+        # Restore weak references in _align_label_groups\n+        if '_align_label_groups' in state:\n+            from weakref import WeakKeyDictionary\n+            align_label_groups = state['_align_label_groups']\n+            for key, val in align_label_groups.items():\n+                state['_align_label_groups'][key] = WeakKeyDictionary(val)\n+\n         # re-initialise some of the unstored state information\n         FigureCanvasBase(self)  # Set self.canvas.\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "scikit-learn__scikit-learn-25747", "model_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 94d9465d7..01476cbf0 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -1280,7 +1280,7 @@ class FeatureUnion(TransformerMixin, _BaseComposition):\n         config = _get_output_config(\"transform\", self)\n         if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n             pd = check_pandas_support(\"transform\")\n-            return pd.concat(Xs, axis=1)\n+            return pd.concat(Xs, axis=1, ignore_index=True)\n \n         if any(sparse.issparse(f) for f in Xs):\n             Xs = sparse.hstack(Xs).tocsr()\ndiff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 335773c6a..1d9168ae8 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -127,9 +127,15 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         return data_to_wrap\n \n     # dense_config == \"pandas\"\n+    original_index = getattr(original_input, \"index\", None)\n+    if original_index is not None and len(original_index) == len(data_to_wrap):\n+        index = original_index\n+    else:\n+        index = None\n+\n     return _wrap_in_pandas_container(\n         data_to_wrap=data_to_wrap,\n-        index=getattr(original_input, \"index\", None),\n+        index=index,\n         columns=estimator.get_feature_names_out,\n     )\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-25433", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex ebe5da43e2..a768614f18 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -983,7 +983,16 @@ class RangeSlider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        import matplotlib.pyplot as plt\n+        from matplotlib import _pylab_helpers\n+\n+        def wrapped_func(val):\n+            func(val)\n+            manager = _pylab_helpers.Gcf.get_active()\n+            if manager:\n+                manager.canvas.draw_idle()\n+\n+        return self._observers.connect('changed', lambda val: wrapped_func(val))\n \n \n def _expand_text_props(props):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-25442", "model_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..68a4d3d6b3 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1507,6 +1507,11 @@ class DraggableBase:\n                 'button_release_event', self.on_release),\n         ]\n \n+    def disconnect(self):\n+        if self.canvas is not None:\n+            for cid in self.cids:\n+                self.canvas.mpl_disconnect(cid)\n+\n     # A property, not an attribute, to maintain picklability.\n     canvas = property(lambda self: self.ref_artist.figure.canvas)\n \n@@ -1558,14 +1563,15 @@ class DraggableBase:\n \n     def disconnect(self):\n         \"\"\"Disconnect the callbacks.\"\"\"\n-        for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n-        try:\n-            c1 = self._c1\n-        except AttributeError:\n-            pass\n-        else:\n-            self.canvas.mpl_disconnect(c1)\n+        if self.canvas is not None:\n+            for cid in self.cids:\n+                self.canvas.mpl_disconnect(cid)\n+            try:\n+                c1 = self._c1\n+            except AttributeError:\n+                pass\n+            else:\n+                self.canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sympy__sympy-24909", "model_patch": "diff --git a/sympy/physics/units/prefixes.py b/sympy/physics/units/prefixes.py\nindex ca6a642156..a09a9f44eb 100644\n--- a/sympy/physics/units/prefixes.py\n+++ b/sympy/physics/units/prefixes.py\n@@ -85,7 +85,7 @@ def __mul__(self, other):\n \n         fact = self.scale_factor * other.scale_factor\n \n-        if fact == 1:\n+        if fact == 1 and isinstance(other, Prefix):\n             return 1\n         elif isinstance(other, Prefix):\n             # simplify prefix\n@@ -94,6 +94,9 @@ def __mul__(self, other):\n                     return PREFIXES[p]\n             return fact\n \n+        if isinstance(other, Quantity):\n+            return Quantity(other.name, other.base_units, fact)\n+\n         return self.scale_factor * other\n \n     def __truediv__(self, other):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-25498", "model_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex d3d53e3d98..62d9569051 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -511,6 +511,7 @@ class Colorbar:\n             self.norm = mappable.norm\n             self._reset_locator_formatter_scale()\n \n+        self._process_values()\n         self._draw_all()\n         if isinstance(self.mappable, contour.ContourSet):\n             CS = self.mappable\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pallets__flask-5063", "model_patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..9fcc3e32 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -989,7 +989,7 @@ def shell_command() -> None:\n @click.option(\n     \"--sort\",\n     \"-s\",\n-    type=click.Choice((\"endpoint\", \"methods\", \"rule\", \"match\")),\n+    type=click.Choice((\"domain\", \"endpoint\", \"methods\", \"rule\", \"match\")),\n     default=\"endpoint\",\n     help=(\n         'Method to sort routes by. \"match\" is the order that Flask will match '\n@@ -1008,7 +1008,7 @@ def routes_command(sort: str, all_methods: bool) -> None:\n \n     ignored_methods = set(() if all_methods else (\"HEAD\", \"OPTIONS\"))\n \n-    if sort in (\"endpoint\", \"rule\"):\n+    if sort in (\"domain\", \"endpoint\", \"rule\"):\n         rules = sorted(rules, key=attrgetter(sort))\n     elif sort == \"methods\":\n         rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n@@ -1018,20 +1018,22 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(rule.subdomain or current_app.config['SERVER_NAME']) for rule in rules),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n     for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+        domain = rule.subdomain or current_app.config['SERVER_NAME']\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-16816", "model_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 0fefe65e48..d72115a33b 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -905,12 +905,13 @@ class ModelAdminChecks(BaseModelAdminChecks):\n                     checks.Error(\n                         \"The value of '%s' refers to '%s', which is not a \"\n                         \"callable, an attribute of '%s', or an attribute or \"\n-                        \"method on '%s'.\"\n+                        \"method on '%s' or '%s'.\"\n                         % (\n                             label,\n                             item,\n                             obj.__class__.__name__,\n                             obj.model._meta.label,\n+                            obj.model.__name__,\n                         ),\n                         obj=obj.__class__,\n                         id=\"admin.E108\",\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-16820", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 23c97e5474..5f754ceb22 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -36,6 +36,7 @@ class MigrationAutodetector:\n         self.to_state = to_state\n         self.questioner = questioner or MigrationQuestioner()\n         self.existing_apps = {app for app, model in from_state.models}\n+        self.altered_indexes = []\n \n     def changes(self, graph, trim_to_apps=None, convert_apps=None, migration_name=None):\n         \"\"\"\n@@ -509,6 +510,29 @@ class MigrationAutodetector:\n             pass\n         return item\n \n+    def _generate_removed_altered_foo_together(self, option_name):\n+        for app_label, model_name in sorted(self.from_state.models):\n+            from_model_state = self.from_state.models[app_label, model_name]\n+            to_model_state = self.to_state.models.get((app_label, model_name))\n+            if not to_model_state:\n+                continue\n+            from_option = from_model_state.options.get(option_name)\n+            to_option = to_model_state.options.get(option_name)\n+            if from_option and not to_option:\n+                self.altered_indexes.append(\n+                    operations.AlterModelOptions(\n+                        name=model_name,\n+                        options={option_name: None},\n+                    )\n+                )\n+            elif from_option != to_option:\n+                self.altered_indexes.append(\n+                    operations.AlterModelOptions(\n+                        name=model_name,\n+                        options={option_name: to_option},\n+                    )\n+                )\n+\n     def generate_renamed_models(self):\n         \"\"\"\n         Find any renamed models, generate the operations for them, and remove\n@@ -1492,14 +1516,14 @@ class MigrationAutodetector:\n                     dependencies,\n                 )\n \n-    def _generate_removed_altered_foo_together(self, operation):\n+    def _generate_removed_altered_foo_together(self, operation, option_name):\n         for (\n             old_value,\n             new_value,\n             app_label,\n             model_name,\n             dependencies,\n-        ) in self._get_altered_foo_together_operations(operation.option_name):\n+        ) in self._get_altered_foo_together_operations(option_name):\n             if operation == operations.AlterIndexTogether:\n                 old_value = {\n                     value\n@@ -1512,7 +1536,7 @@ class MigrationAutodetector:\n                 self.add_operation(\n                     app_label,\n                     operation(\n-                        name=model_name, **{operation.option_name: removal_value}\n+                        name=model_name, **{option_name: removal_value}\n                     ),\n                     dependencies=dependencies,\n                 )\n@@ -1522,7 +1546,7 @@ class MigrationAutodetector:\n \n     # RemovedInDjango51Warning.\n     def generate_removed_altered_index_together(self):\n-        self._generate_removed_altered_foo_together(operations.AlterIndexTogether)\n+        self._generate_removed_altered_foo_together(operations.AlterIndexTogether, option_name='index_together')\n \n     def _generate_altered_foo_together(self, operation):\n         for (\n@@ -1545,7 +1569,7 @@ class MigrationAutodetector:\n \n     # RemovedInDjango51Warning.\n     def generate_altered_index_together(self):\n-        self._generate_altered_foo_together(operations.AlterIndexTogether)\n+        self._generate_altered_foo_together(operations.AlterIndexTogether, \"index_together\")\n \n     def generate_altered_db_table(self):\n         models_to_check = self.kept_model_keys.union(\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-16873", "model_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 03676533b7..671971a846 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -587,7 +587,8 @@ def join(value, arg, autoescape=True):\n     try:\n         if autoescape:\n             value = [conditional_escape(v) for v in value]\n-        data = conditional_escape(arg).join(value)\n+            arg = conditional_escape(arg)\n+        data = arg.join(value)\n     except TypeError:  # Fail silently if arg isn't iterable.\n         return value\n     return mark_safe(data)\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "sphinx-doc__sphinx-11445", "model_patch": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..0b66a7d32 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -90,7 +90,17 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n             content.insert(pos, '', '<generated>', 0)\n             pos += 1\n \n-        # insert prolog (after docinfo if exists)\n+        # Check if the first heading contains a domain directive\n+        if content and content[0].startswith(':'):\n+            # Find the position after the first heading\n+            heading_end = 0\n+            for i, line in enumerate(content):\n+                if line.strip() == '':\n+                    heading_end = i + 1\n+                    break\n+            pos = heading_end\n+\n+        # insert prolog (after docinfo or heading if exists)\n         for lineno, line in enumerate(prolog.splitlines()):\n             content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-26011", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 9c2ba63901..67363eafef 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1229,7 +1229,7 @@ class _AxesBase(martist.Artist):\n         self.xaxis.major = other.xaxis.major  # Ticker instances holding\n         self.xaxis.minor = other.xaxis.minor  # locator and formatter.\n         x0, x1 = other.get_xlim()\n-        self.set_xlim(x0, x1, emit=False, auto=other.get_autoscalex_on())\n+        self.set_xlim(x0, x1, emit=True, auto=other.get_autoscalex_on())\n         self.xaxis._scale = other.xaxis._scale\n \n     def sharey(self, other):\n@@ -2595,6 +2595,18 @@ class _AxesBase(martist.Artist):\n         for axis in self._axis_map.values():\n             axis._set_autoscale_on(b)\n \n+    def get_autoscalex_on(self):\n+        \"\"\"\n+        Get whether autoscaling for the x-axis is applied on the next draw or\n+        call to `.Axes.autoscale_view`.\n+\n+        Returns\n+        -------\n+        bool\n+        \"\"\"\n+        return self.xaxis.get_autoscalex_on()\n+\n+\n     @property\n     def use_sticky_edges(self):\n         \"\"\"\n@@ -3524,9 +3536,8 @@ class _AxesBase(martist.Artist):\n         if upper is None:\n             upper = old_upper\n \n-        self.set_xlim(sorted((lower, upper),\n-                             reverse=bool(self.xaxis_inverted())),\n-                      auto=None)\n+        left, right = sorted((lower, upper), reverse=bool(self.xaxis_inverted()))\n+        self.set_xlim(left, right, auto=None)\n \n     def get_xlim(self):\n         \"\"\"\n@@ -3549,7 +3560,6 @@ class _AxesBase(martist.Artist):\n         be greater than the *right* value.\n         \"\"\"\n         return tuple(self.viewLim.intervalx)\n-\n     def _validate_converted_limits(self, limit, convert):\n         \"\"\"\n         Raise ValueError if converted limits are non-finite.\n@@ -3567,72 +3577,6 @@ class _AxesBase(martist.Artist):\n                 raise ValueError(\"Axis limits cannot be NaN or Inf\")\n             return converted_limit\n \n-    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,\n-                 xmin=None, xmax=None):\n-        \"\"\"\n-        Set the x-axis view limits.\n-\n-        Parameters\n-        ----------\n-        left : float, optional\n-            The left xlim in data coordinates. Passing *None* leaves the\n-            limit unchanged.\n-\n-            The left and right xlims may also be passed as the tuple\n-            (*left*, *right*) as the first positional argument (or as\n-            the *left* keyword argument).\n-\n-            .. ACCEPTS: (bottom: float, top: float)\n-\n-        right : float, optional\n-            The right xlim in data coordinates. Passing *None* leaves the\n-            limit unchanged.\n-\n-        emit : bool, default: True\n-            Whether to notify observers of limit change.\n-\n-        auto : bool or None, default: False\n-            Whether to turn on autoscaling of the x-axis. True turns on,\n-            False turns off, None leaves unchanged.\n-\n-        xmin, xmax : float, optional\n-            They are equivalent to left and right respectively, and it is an\n-            error to pass both *xmin* and *left* or *xmax* and *right*.\n-\n-        Returns\n-        -------\n-        left, right : (float, float)\n-            The new x-axis limits in data coordinates.\n-\n-        See Also\n-        --------\n-        get_xlim\n-        set_xbound, get_xbound\n-        invert_xaxis, xaxis_inverted\n-\n-        Notes\n-        -----\n-        The *left* value may be greater than the *right* value, in which\n-        case the x-axis values will decrease from left to right.\n-\n-        Examples\n-        --------\n-        >>> set_xlim(left, right)\n-        >>> set_xlim((left, right))\n-        >>> left, right = set_xlim(left, right)\n-\n-        One limit may be left unchanged.\n-\n-        >>> set_xlim(right=right_lim)\n-\n-        Limits may be passed in reverse order to flip the direction of\n-        the x-axis. For example, suppose *x* represents the number of\n-        years before present. The x-axis limits might be set like the\n-        following so 5000 years ago is on the left of the plot and the\n-        present is on the right.\n-\n-        >>> set_xlim(5000, 0)\n-        \"\"\"\n         if right is None and np.iterable(left):\n             left, right = left\n         if xmin is not None:\n@@ -3643,7 +3587,9 @@ class _AxesBase(martist.Artist):\n             if right is not None:\n                 raise TypeError(\"Cannot pass both 'right' and 'xmax'\")\n             right = xmax\n-        return self.xaxis._set_lim(left, right, emit=emit, auto=auto)\n+        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)\n+        self.callbacks.process('xlim_changed', self)\n+        return result\n \n     get_xscale = _axis_method_wrapper(\"xaxis\", \"get_scale\")\n     set_xscale = _axis_method_wrapper(\"xaxis\", \"_set_axes_scale\")\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "matplotlib__matplotlib-26020", "model_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..f8b8c42fe1 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -13,8 +13,12 @@ from .mpl_axes import Axes\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    if callable(ax.axis):\n+        ax.xaxis.set_tick_params(labelbottom=bottom_on)\n+        ax.yaxis.set_tick_params(labelleft=left_on)\n+    else:\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-16910", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 781dfd5499..95d32bd5b1 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1,3 +1,5 @@\n+from django.db import models\n+\n \"\"\"\n Create SQL statements for QuerySets.\n \n@@ -2344,12 +2346,22 @@ class Query(BaseExpression):\n             field_names.add(self.get_meta().pk.name)\n \n         if defer:\n-            # Remove any existing deferred names from the current set before\n-            # setting the new names.\n-            self.deferred_loading = field_names.difference(existing), False\n-        else:\n-            # Replace any existing \"immediate load\" field names.\n-            self.deferred_loading = frozenset(field_names), False\n+            field_names.update(existing.difference(field_names))\n+        self.deferred_loading = frozenset(field_names), False\n+\n+        # Handle the reverse OneToOneField relation with select_related\n+        for field in list(field_names):\n+            if '__' in field:\n+                field_parts = field.split('__')\n+                if len(field_parts) > 1:\n+                    related_field = field_parts[-1]\n+                    related_model = self.model._meta.get_field(field_parts[-2]).related_model\n+                    select_related_populated = {related_field}\n+                    field_names.update({\n+                        f\"{field.split('__', 1)[0]}__{f.related_model._meta.get_field(f.name).name}\"\n+                        for f in related_model._meta.get_fields()\n+                        if isinstance(f, models.OneToOneField) and f.name not in select_related_populated\n+                    })\n \n     def set_annotation_mask(self, names):\n         \"\"\"Set the mask of annotations that will be returned by the SELECT.\"\"\"\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pytest-dev__pytest-11143", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..6de9269e5 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -743,7 +743,7 @@ class AssertionRewriter(ast.NodeVisitor):\n \n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n-        return \"PYTEST_DONT_REWRITE\" in docstring\n+        return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n         \"\"\"Get a new variable.\"\"\"\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "astropy__astropy-14995", "model_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb..e07bff080 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -512,18 +512,13 @@ class NDArithmeticMixin:\n             If neither had a mask ``None`` is returned. Otherwise\n             ``handle_mask`` must create (and copy) the returned mask.\n         \"\"\"\n-        # If only one mask is present we need not bother about any type checks\n-        if (\n-            self.mask is None and operand is not None and operand.mask is None\n-        ) or handle_mask is None:\n+        if self.mask is None and operand is not None and operand.mask is None:\n             return None\n         elif self.mask is None and operand is not None:\n-            # Make a copy so there is no reference in the result.\n             return deepcopy(operand.mask)\n-        elif operand is None:\n+        elif operand is None or operand.mask is None:\n             return deepcopy(self.mask)\n         else:\n-            # Now lets calculate the resulting mask (operation enforces copy)\n             return handle_mask(self.mask, operand.mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "mwaskom__seaborn-3407", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..23bdcab5 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -2098,6 +2098,9 @@ def pairplot(\n         raise TypeError(\n             f\"'data' must be pandas DataFrame object, not: {type(data)}\")\n \n+    if isinstance(data.columns, pd.MultiIndex):\n+        data.columns = [\"\".join(map(str, col)) for col in data.columns]\n+\n     plot_kws = {} if plot_kws is None else plot_kws.copy()\n     diag_kws = {} if diag_kws is None else diag_kws.copy()\n     grid_kws = {} if grid_kws is None else grid_kws.copy()\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "pytest-dev__pytest-11148", "model_patch": "diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex e43310ef0..fe81616fd 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -524,6 +524,9 @@ def import_path(\n     if mode is ImportMode.importlib:\n         module_name = module_name_from_path(path, root)\n \n+        if module_name in sys.modules:\n+            return sys.modules[module_name]\n+\n         for meta_importer in sys.meta_path:\n             spec = meta_importer.find_spec(module_name, [str(path.parent)])\n             if spec is not None:\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-17051", "model_patch": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex aa839f5634..139257c1fa 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -399,7 +399,7 @@ class DatabaseOperations(BaseDatabaseOperations):\n         if on_conflict == OnConflict.IGNORE:\n             return \"ON CONFLICT DO NOTHING\"\n         if on_conflict == OnConflict.UPDATE:\n-            return \"ON CONFLICT(%s) DO UPDATE SET %s\" % (\n+            return \"ON CONFLICT(%s) DO UPDATE SET %s RETURNING %s\" % (\n                 \", \".join(map(self.quote_name, unique_fields)),\n                 \", \".join(\n                     [\n@@ -407,6 +407,7 @@ class DatabaseOperations(BaseDatabaseOperations):\n                         for field in map(self.quote_name, update_fields)\n                     ]\n                 ),\n+                \", \".join(map(self.quote_name, [field.column for field in fields])),\n             )\n         return super().on_conflict_suffix_sql(\n             fields,\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..7c890063ce 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -791,6 +791,7 @@ class QuerySet(AltersData):\n                     on_conflict=on_conflict,\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n+                    returning_fields=opts.db_returning_fields if update_conflicts else None,\n                 )\n                 for obj_with_pk, results in zip(objs_with_pk, returned_columns):\n                     for result, field in zip(results, opts.db_returning_fields):\n@@ -808,6 +809,7 @@ class QuerySet(AltersData):\n                     on_conflict=on_conflict,\n                     update_fields=update_fields,\n                     unique_fields=unique_fields,\n+                    returning_fields=opts.db_returning_fields if update_conflicts else None,\n                 )\n                 connection = connections[self.db]\n                 if (\n"}
{"model_name_or_path": "20240705_sima_fulltest", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b18ef55369..ae0a43329b 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -44,13 +44,23 @@ class CreateModel(ModelOperation):\n     serialization_expand_args = [\"fields\", \"options\", \"managers\"]\n \n     def __init__(self, name, fields, options=None, bases=None, managers=None):\n-        self.fields = fields\n+        self.fields = [\n+            (\n+                fname,\n+                {\n+                    **field_deconstruct,\n+                    \"default\": (\n+                        f\"{field_deconstruct['default'].__module__}.\"\n+                        f\"{field_deconstruct['default'].__qualname__}\"\n+                    ) if callable(field_deconstruct.get('default')) else field_deconstruct.get('default')\n+                }\n+            )\n+            for fname, field_deconstruct in fields\n+        ]\n         self.options = options or {}\n         self.bases = bases or (models.Model,)\n         self.managers = managers or []\n         super().__init__(name)\n-        # Sanity-check that there are no duplicated field names, bases, or\n-        # manager names\n         _check_for_duplicates(\"fields\", (name for name, _ in self.fields))\n         _check_for_duplicates(\n             \"bases\",\n@@ -66,9 +76,27 @@ class CreateModel(ModelOperation):\n         _check_for_duplicates(\"managers\", (name for name, _ in self.managers))\n \n     def deconstruct(self):\n+        def get_default_value_repr(default_value):\n+            if callable(default_value):\n+                if hasattr(default_value, '__self__') and isinstance(default_value.__self__, type):\n+                    return f\"{default_value.__self__.__module__}.{default_value.__self__.__qualname__}.{default_value.__name__}\"\n+                return f\"{default_value.__module__}.{default_value.__qualname__}\"\n+            return default_value\n+\n+        fields = [\n+            (\n+                fname,\n+                {\n+                    **field_deconstruct,\n+                    \"default\": get_default_value_repr(field_deconstruct.get('default'))\n+                }\n+            )\n+            for fname, field_deconstruct in self.fields\n+        ]\n+\n         kwargs = {\n             \"name\": self.name,\n-            \"fields\": self.fields,\n+            \"fields\": fields,\n         }\n         if self.options:\n             kwargs[\"options\"] = self.options\n@@ -77,19 +105,6 @@ class CreateModel(ModelOperation):\n         if self.managers and self.managers != [(\"objects\", models.Manager())]:\n             kwargs[\"managers\"] = self.managers\n         return (self.__class__.__qualname__, [], kwargs)\n-\n-    def state_forwards(self, app_label, state):\n-        state.add_model(\n-            ModelState(\n-                app_label,\n-                self.name,\n-                list(self.fields),\n-                dict(self.options),\n-                tuple(self.bases),\n-                list(self.managers),\n-            )\n-        )\n-\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         model = to_state.apps.get_model(app_label, self.name)\n         if self.allow_migrate_model(schema_editor.connection.alias, model):\ndiff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex ae55967383..2d3f8f94a1 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -747,6 +747,8 @@ class ModelState:\n                     'ModelState.fields cannot refer to a model class - \"%s.through\" '\n                     \"does. Use a string reference instead.\" % name\n                 )\n+            if callable(field.default):\n+                field.default = field.default.__func__\n         # Sanity-check that indexes have their name set.\n         for index in self.options[\"indexes\"]:\n             if not index.name:\n@@ -772,6 +774,8 @@ class ModelState:\n         for field in model._meta.local_fields:\n             if getattr(field, \"remote_field\", None) and exclude_rels:\n                 continue\n+            if callable(field.default):\n+                field.default = f\"{model.__module__}.{model.__name__}.{field.default.__name__}\"\n             if isinstance(field, models.OrderWrt):\n                 continue\n             name = field.name\n"}
