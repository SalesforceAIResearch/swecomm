{
  "name": "AgenticLoop",
  "initial_message": "legend draggable as keyword\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Feature request\r\n\r\n**There is not keyword to make legend draggable at creation**\r\n\r\n<!--A short 1-2 sentences that succinctly describes the bug-->\r\n\r\nIs there a code reason why one can not add a \"draggable=True\" keyword to the __init__ function for Legend?  This would be more handy than having to call it after legend creation.  And, naively, it would seem simple to do.  But maybe there is a reason why it would not work?\n",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "include_message_history": true,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "max_search_results": 75,
        "max_retries_with_any_file_context": 3,
        "provide_initial_context": true,
        "initial_context_tokens": 6000,
        "initial_search_results": 100,
        "initial_context_spans_per_file": 5,
        "support_test_files": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "To address the feature request of making the legend draggable at creation by adding a \"draggable=True\" keyword to the __init__ function for the Legend class, we need to locate the relevant parts in the code.\n\nBased on the provided file context, the Legend class is defined in lib/matplotlib/legend.py. We should look into the __init__ method of the Legend class, as well as any methods related to setting the draggable state of the legend.\n\nAdditionally, we should check the Figure and Axes classes in lib/matplotlib/figure.py and lib/matplotlib/axes/_axes.py respectively, as they might interact with the Legend class when creating legends.\n\nHere are the specific searches we should conduct:\n1. Search for the \"__init__\" method in the Legend class in lib/matplotlib/legend.py to see where we can add the \"draggable\" keyword.\n2. Search for the \"set_draggable\" method in the Legend class in lib/matplotlib/legend.py to understand how the draggable state is set.\n3. Search for the \"legend\" method in the Figure class in lib/matplotlib/figure.py to see if it passes any keyword arguments to the Legend class.\n4. Search for the \"legend\" method in the Axes class in lib/matplotlib/axes/_axes.py to see if it passes any keyword arguments to the Legend class.\n\nLet's start with these searches.",
            "search_requests": [
              {
                "file_pattern": "lib/matplotlib/legend.py",
                "class_names": [],
                "function_names": [
                  "__init__"
                ]
              },
              {
                "file_pattern": "lib/matplotlib/legend.py",
                "class_names": [],
                "function_names": [
                  "set_draggable"
                ]
              },
              {
                "file_pattern": "lib/matplotlib/figure.py",
                "class_names": [],
                "function_names": [
                  "legend"
                ]
              },
              {
                "file_pattern": "lib/matplotlib/axes/_axes.py",
                "class_names": [],
                "function_names": [
                  "legend"
                ]
              }
            ],
            "complete": false
          },
          "output": {
            "ranked_spans": [
              {
                "file_path": "lib/matplotlib/legend.py",
                "span_id": "Legend.set_draggable",
                "rank": 0,
                "tokens": 233
              },
              {
                "file_path": "lib/matplotlib/figure.py",
                "span_id": "FigureBase.legend",
                "rank": 0,
                "tokens": 1002
              },
              {
                "file_path": "lib/matplotlib/axes/_axes.py",
                "span_id": "Axes.legend",
                "rank": 0,
                "tokens": 880
              }
            ],
            "search_requests": [
              {
                "file_pattern": "lib/matplotlib/legend.py",
                "query": null,
                "code_snippet": null,
                "class_names": [],
                "function_names": [
                  "__init__"
                ]
              },
              {
                "file_pattern": "lib/matplotlib/legend.py",
                "query": null,
                "code_snippet": null,
                "class_names": [],
                "function_names": [
                  "set_draggable"
                ]
              },
              {
                "file_pattern": "lib/matplotlib/figure.py",
                "query": null,
                "code_snippet": null,
                "class_names": [],
                "function_names": [
                  "legend"
                ]
              },
              {
                "file_pattern": "lib/matplotlib/axes/_axes.py",
                "query": null,
                "code_snippet": null,
                "class_names": [],
                "function_names": [
                  "legend"
                ]
              }
            ],
            "complete": false
          },
          "completion_cost": 0.033702,
          "input_tokens": 7479,
          "output_tokens": 751
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "include_message_history": false,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "ranked_spans": [
          {
            "file_path": "lib/matplotlib/legend.py",
            "span_id": "Legend.set_draggable",
            "rank": 0,
            "tokens": 233
          },
          {
            "file_path": "lib/matplotlib/figure.py",
            "span_id": "FigureBase.legend",
            "rank": 0,
            "tokens": 1002
          },
          {
            "file_path": "lib/matplotlib/axes/_axes.py",
            "span_id": "Axes.legend",
            "rank": 0,
            "tokens": 880
          }
        ],
        "expand_context": true,
        "max_prompt_file_tokens": 12000
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about adding a \"draggable=True\" keyword to the `__init__` function for the `Legend` class to make it more convenient to create draggable legends. The user suggests that this would be simpler than calling `set_draggable` after the legend is created.\n\n### Current Context\nThere is no relevant code identified yet.\n\n### Analysis of Search Results\n\n#### Legend Class\nThe `Legend` class is defined in `lib/matplotlib/legend.py`, and its `__init__` method is detailed in span `Legend.__init__`. This is the primary location where a new keyword argument like `draggable` would be added.\n\n#### set_draggable Method\nThe `set_draggable` method is defined in span `Legend.set_draggable`. This method is used to make the legend draggable post-creation. The functionality currently provided by this method would need to be invoked conditionally in the `__init__` method if the `draggable` keyword is set to `True`.\n\n#### DraggableLegend Class\nThe `DraggableLegend` class is defined in span `DraggableLegend`. This class is likely used to manage the dragging behavior of the legend. If the `draggable` keyword is added to the `__init__` method, instances of this class would be created conditionally during the initialization of the `Legend` object.\n\n### Identified Relevant Spans\n1. `lib/matplotlib/legend.py` - spans `Legend`, `Legend.__init__`, and `Legend.set_draggable` are relevant because they define the `Legend` class, its initialization, and the method to make it draggable.\n2. `lib/matplotlib/legend.py` - span `DraggableLegend` is relevant because it defines the behavior of the draggable legend.\n\n### Conclusion\nThe identified code spans are sufficient to implement the requested feature. The `draggable` keyword can be added to the `Legend` class's `__init__` method and used to conditionally invoke the `set_draggable` method.",
            "identified_spans": [
              {
                "file_path": "lib/matplotlib/legend.py",
                "span_ids": [
                  "DraggableLegend",
                  "Legend",
                  "Legend.__init__",
                  "Legend.set_draggable"
                ]
              }
            ]
          },
          "output": {},
          "completion_cost": 0.054645000000000006,
          "input_tokens": 11850,
          "output_tokens": 1273
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "include_message_history": false,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "expand_context": true,
        "finish_after_relevant_count": 2,
        "max_prompt_file_tokens": 12000
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "To address the feature request of making the legend draggable at creation by adding a \"draggable=True\" keyword to the __init__ function for the Legend class, we need to locate the relevant parts in the code.\n\nBased on the provided file context, the Legend class is defined in lib/matplotlib/legend.py. We should look into the __init__ method of the Legend class, as well as any methods related to setting the draggable state of the legend.\n\nAdditionally, we should check the Figure and Axes classes in lib/matplotlib/figure.py and lib/matplotlib/axes/_axes.py respectively, as they might interact with the Legend class when creating legends.\n\nHere are the specific searches we should conduct:\n1. Search for the \"__init__\" method in the Legend class in lib/matplotlib/legend.py to see where we can add the \"draggable\" keyword.\n2. Search for the \"set_draggable\" method in the Legend class in lib/matplotlib/legend.py to understand how the draggable state is set.\n3. Search for the \"legend\" method in the Figure class in lib/matplotlib/figure.py to see if it passes any keyword arguments to the Legend class.\n4. Search for the \"legend\" method in the Axes class in lib/matplotlib/axes/_axes.py to see if it passes any keyword arguments to the Legend class.\n\nLet's start with these searches.",
            "relevant": true,
            "complete": true
          },
          "output": {},
          "completion_cost": 0.044379,
          "input_tokens": 10068,
          "output_tokens": 945
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "include_message_history": true,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "max_iterations": 8,
        "max_prompt_file_tokens": 12000,
        "max_tokens_in_edit_prompt": 750,
        "expand_context_with_related_spans": false,
        "allow_hallucinated_spans": false,
        "finish_on_review": true
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "To address the issue of adding a 'draggable' keyword to the Legend's __init__ function, I'll first update the __init__ method of the Legend class to accept a new parameter 'draggable'. Then, I'll modify the method to call 'set_draggable' if 'draggable' is set to True.",
            "action": "modify",
            "instructions": "Add a 'draggable' keyword argument to the __init__ method of the Legend class and call 'set_draggable' if 'draggable' is True.",
            "file_path": "lib/matplotlib/legend.py",
            "span_id": "Legend.__init__"
          },
          "output": {
            "instructions": "Add a 'draggable' keyword argument to the __init__ method of the Legend class and call 'set_draggable' if 'draggable' is True.",
            "file_path": "lib/matplotlib/legend.py",
            "span_id": "Legend.__init__"
          },
          "completion_cost": 0.033774,
          "input_tokens": 9528,
          "output_tokens": 346
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "include_message_history": false,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "instructions": "Add a 'draggable' keyword argument to the __init__ method of the Legend class and call 'set_draggable' if 'draggable' is True.\n\nThe 'draggable' parameter needs to be added to the __init__ method signature, and the 'set_draggable' method should be called if 'draggable' is True. This can be achieved by modifying lines 306 to 346, which contain the __init__ method signature, and adding the conditional 'set_draggable' call at the appropriate place in the method body, which can be done right after line 541 where 'self._draggable' is set to None.",
        "file_path": "lib/matplotlib/legend.py",
        "span_id": "Legend.__init__",
        "max_tokens_in_edit_prompt": 1200
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "To add a 'draggable' keyword argument to the __init__ method of the Legend class and call 'set_draggable' if 'draggable' is True, we need to:\n1. Add the 'draggable' parameter to the __init__ method signature.\n2. Call 'set_draggable' within the __init__ method if 'draggable' is True.\n\nThe relevant lines to modify are:\n- The __init__ method signature to add the 'draggable' parameter.\n- The body of the __init__ method to include the conditional call to 'set_draggable'.\n\nThese changes should be done within lines 306 to 575.",
            "start_line": 306,
            "end_line": 575
          },
          "retry_message": "Lines 306 - 575 has 2485 tokens, which is higher than the maximum allowed 1200 tokens in completion. You need to specify the exact part of the code that needs to be updated to fulfill the change. If this is not possible you should reject the request.",
          "completion_cost": 0.034908,
          "input_tokens": 9726,
          "output_tokens": 382
        },
        {
          "action": {
            "scratch_pad": "The 'draggable' parameter needs to be added to the __init__ method signature, and the 'set_draggable' method should be called if 'draggable' is True. This can be achieved by modifying lines 306 to 346, which contain the __init__ method signature, and adding the conditional 'set_draggable' call at the appropriate place in the method body, which can be done right after line 541 where 'self._draggable' is set to None.",
            "start_line": 306,
            "end_line": 346
          },
          "output": {
            "instructions": "Add a 'draggable' keyword argument to the __init__ method of the Legend class and call 'set_draggable' if 'draggable' is True.\n\nThe 'draggable' parameter needs to be added to the __init__ method signature, and the 'set_draggable' method should be called if 'draggable' is True. This can be achieved by modifying lines 306 to 346, which contain the __init__ method signature, and adding the conditional 'set_draggable' call at the appropriate place in the method body, which can be done right after line 541 where 'self._draggable' is set to None.",
            "file_path": "lib/matplotlib/legend.py",
            "span_id": "Legend.__init__",
            "start_line": 306,
            "end_line": 346
          },
          "completion_cost": 0.03669,
          "input_tokens": 10440,
          "output_tokens": 358
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "include_message_history": true,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "max_iterations": 8,
        "instructions": "Add a 'draggable' keyword argument to the __init__ method of the Legend class and call 'set_draggable' if 'draggable' is True.\n\nThe 'draggable' parameter needs to be added to the __init__ method signature, and the 'set_draggable' method should be called if 'draggable' is True. This can be achieved by modifying lines 306 to 346, which contain the __init__ method signature, and adding the conditional 'set_draggable' call at the appropriate place in the method body, which can be done right after line 541 where 'self._draggable' is set to None.",
        "file_path": "lib/matplotlib/legend.py",
        "span_id": "Legend.__init__",
        "start_line": 306,
        "end_line": 346,
        "show_initial_message": true,
        "show_file_context": false,
        "verify": true,
        "chain_of_thought": false,
        "max_prompt_file_tokens": 8000
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def __init__(\n        self, parent, handles, labels,\n        loc=None,\n        numpoints=None,      # number of points in the legend line\n        markerscale=None,    # relative size of legend markers vs. original\n        markerfirst=True,    # left/right ordering of legend marker and label\n        scatterpoints=None,  # number of scatter points\n        scatteryoffsets=None,\n        prop=None,           # properties for the legend texts\n        fontsize=None,       # keyword to set font size directly\n        labelcolor=None,     # keyword to set the text color\n\n        # spacing & pad defined as a fraction of the font-size\n        borderpad=None,      # whitespace inside the legend border\n        labelspacing=None,   # vertical space between the legend entries\n        handlelength=None,   # length of the legend handles\n        handleheight=None,   # height of the legend handles\n        handletextpad=None,  # pad between the legend handle and text\n        borderaxespad=None,  # pad between the axes and legend border\n        columnspacing=None,  # spacing between columns\n\n        ncols=1,     # number of columns\n        mode=None,  # horizontal distribution of columns: None or \"expand\"\n\n        fancybox=None,  # True: fancy box, False: rounded box, None: rcParam\n        shadow=None,\n        title=None,           # legend title\n        title_fontsize=None,  # legend title font size\n        framealpha=None,      # set frame alpha\n        edgecolor=None,       # frame patch edgecolor\n        facecolor=None,       # frame patch facecolor\n\n        bbox_to_anchor=None,  # bbox to which the legend will be anchored\n        bbox_transform=None,  # transform for the bbox\n        frameon=None,         # draw frame\n        handler_map=None,\n        title_fontproperties=None,  # properties for the legend title\n        alignment=\"center\",       # control the alignment within the legend box\n        draggable=False,          # allow dragging of the legend\n        *,\n        ncol=1  # synonym for ncols (backward compatibility)\n    ):\n"
          },
          "output": {
            "message": "Applied the change to lib/matplotlib/legend.py.",
            "diff": "--- lib/matplotlib/legend.py\n+++ lib/matplotlib/legend.py\n@@ -341,6 +341,7 @@\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,          # allow dragging of the legend\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n",
            "verification_errors": [
              {
                "code": "F0002",
                "file_path": "lib/matplotlib/legend.py",
                "message": "/tmp/repos/swe-bench_matplotlib__matplotlib_copy_2/lib/matplotlib/legend.py: Fatal error while checking '/tmp/repos/swe-bench_matplotlib__matplotlib_copy_2/lib/matplotlib/legend.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/root/.cache/pylint/pylint-crash-2024-07-06-07-06-22.txt'.",
                "line": 1
              }
            ]
          },
          "completion_cost": 0.054978000000000006,
          "input_tokens": 11541,
          "output_tokens": 1357
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "include_message_history": true,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "max_iterations": 8,
        "message": "Applied the change to lib/matplotlib/legend.py.",
        "diff": "--- lib/matplotlib/legend.py\n+++ lib/matplotlib/legend.py\n@@ -341,6 +341,7 @@\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,          # allow dragging of the legend\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n",
        "verification_errors": [
          {
            "code": "F0002",
            "file_path": "lib/matplotlib/legend.py",
            "message": "/tmp/repos/swe-bench_matplotlib__matplotlib_copy_2/lib/matplotlib/legend.py: Fatal error while checking '/tmp/repos/swe-bench_matplotlib__matplotlib_copy_2/lib/matplotlib/legend.py'. Please open an issue in our bug tracker so we address this. There is a pre-filled template that you can use in '/root/.cache/pylint/pylint-crash-2024-07-06-07-06-22.txt'.",
            "line": 1
          }
        ],
        "max_prompt_file_tokens": 12000,
        "max_tokens_in_edit_prompt": 750,
        "expand_context_with_related_spans": false,
        "allow_hallucinated_spans": false,
        "finish_on_review": true
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "Next, I will modify the end of the __init__ method of the Legend class to call 'set_draggable(draggable)' to make the legend draggable if 'draggable' is set to True.",
            "action": "modify",
            "instructions": "At the end of the __init__ method of the Legend class, add a call to 'self.set_draggable(draggable)' to make the legend draggable if 'draggable' is set to True.",
            "file_path": "lib/matplotlib/legend.py",
            "span_id": "Legend.__init__"
          },
          "output": {
            "instructions": "At the end of the __init__ method of the Legend class, add a call to 'self.set_draggable(draggable)' to make the legend draggable if 'draggable' is set to True.",
            "file_path": "lib/matplotlib/legend.py",
            "span_id": "Legend.__init__"
          },
          "completion_cost": 0.036474,
          "input_tokens": 10728,
          "output_tokens": 286
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "include_message_history": false,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "instructions": "At the end of the __init__ method of the Legend class, add a call to 'self.set_draggable(draggable)' to make the legend draggable if 'draggable' is set to True.\n\nThe instruction is to add a call to 'self.set_draggable(draggable)' at the end of the __init__ method of the Legend class. The __init__ method ends at line 577, so the call should be added just before that.",
        "file_path": "lib/matplotlib/legend.py",
        "span_id": "Legend.__init__",
        "max_tokens_in_edit_prompt": 1200
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The instruction is to add a call to 'self.set_draggable(draggable)' at the end of the __init__ method of the Legend class. The __init__ method ends at line 577, so the call should be added just before that.",
            "start_line": 576,
            "end_line": 577
          },
          "output": {
            "instructions": "At the end of the __init__ method of the Legend class, add a call to 'self.set_draggable(draggable)' to make the legend draggable if 'draggable' is set to True.\n\nThe instruction is to add a call to 'self.set_draggable(draggable)' at the end of the __init__ method of the Legend class. The __init__ method ends at line 577, so the call should be added just before that.",
            "file_path": "lib/matplotlib/legend.py",
            "span_id": "Legend.__init__",
            "start_line": 572,
            "end_line": 576
          },
          "completion_cost": 0.032682,
          "input_tokens": 9789,
          "output_tokens": 221
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "include_message_history": true,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "max_iterations": 8,
        "instructions": "At the end of the __init__ method of the Legend class, add a call to 'self.set_draggable(draggable)' to make the legend draggable if 'draggable' is set to True.\n\nThe instruction is to add a call to 'self.set_draggable(draggable)' at the end of the __init__ method of the Legend class. The __init__ method ends at line 577, so the call should be added just before that.",
        "file_path": "lib/matplotlib/legend.py",
        "span_id": "Legend.__init__",
        "start_line": 572,
        "end_line": 576,
        "show_initial_message": true,
        "show_file_context": false,
        "verify": true,
        "chain_of_thought": false,
        "max_prompt_file_tokens": 8000
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n                                   itertools.cycle(\n                                       colors.to_rgba_array(labelcolor))):\n                text.set_color(color)\n        else:\n            raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n\n        self.set_draggable(draggable)\n"
          },
          "output": {
            "message": "Applied the change to lib/matplotlib/legend.py.",
            "diff": "--- lib/matplotlib/legend.py\n+++ lib/matplotlib/legend.py\n@@ -575,6 +575,8 @@\n         else:\n             raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n \n+        self.set_draggable(draggable)\n+\n     def _set_artist_props(self, a):\n         \"\"\"\n         Set the boilerplate props for artists added to axes.\n",
            "verification_errors": []
          },
          "completion_cost": 0.033093000000000004,
          "input_tokens": 10266,
          "output_tokens": 153
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "include_message_history": true,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "max_iterations": 8,
        "message": "Applied the change to lib/matplotlib/legend.py.",
        "diff": "--- lib/matplotlib/legend.py\n+++ lib/matplotlib/legend.py\n@@ -575,6 +575,8 @@\n         else:\n             raise ValueError(f\"Invalid labelcolor: {labelcolor!r}\")\n \n+        self.set_draggable(draggable)\n+\n     def _set_artist_props(self, a):\n         \"\"\"\n         Set the boilerplate props for artists added to axes.\n",
        "verification_errors": [],
        "max_prompt_file_tokens": 12000,
        "max_tokens_in_edit_prompt": 750,
        "expand_context_with_related_spans": false,
        "allow_hallucinated_spans": false,
        "finish_on_review": true
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "I have successfully added the 'draggable' keyword argument to the Legend's __init__ method and modified it to call 'set_draggable(draggable)'. This ensures that the legend is made draggable if 'draggable' is set to True at creation.",
            "action": "finish",
            "finish": "The issue of adding a 'draggable' keyword to the Legend's __init__ function has been resolved successfully."
          },
          "output": {
            "message": "The issue of adding a 'draggable' keyword to the Legend's __init__ function has been resolved successfully."
          },
          "completion_cost": 0.03845699999999999,
          "input_tokens": 11439,
          "output_tokens": 276
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "include_message_history": false,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 1000,
        "message": "The issue of adding a 'draggable' keyword to the Legend's __init__ function has been resolved successfully.",
        "output": {
          "max_tokens": 2000,
          "max_prompt_file_tokens": 12000
        }
      },
      "actions": []
    }
  ],
  "info": {
    "evaluation_name": "20240705_sima_fulltest",
    "instance_id": "matplotlib__matplotlib-23913",
    "status": "finished",
    "duration": 276.6112263202667,
    "total_cost": 1.1361029999999999,
    "submission": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..5621f04527 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -341,6 +341,7 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,          # make legend draggable\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -539,6 +540,9 @@ class Legend(Artist):\n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n \n+        if draggable:\n+            self.set_draggable(True)\n+\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n"
  }
}