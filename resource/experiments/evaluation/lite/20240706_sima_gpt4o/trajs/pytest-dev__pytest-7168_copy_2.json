{
  "name": "AgenticLoop",
  "initial_message": "INTERNALERROR when exception in __repr__\nMinimal code to reproduce the issue: \r\n```python\r\nclass SomeClass:\r\n    def __getattribute__(self, attr):\r\n        raise\r\n    def __repr__(self):\r\n        raise\r\ndef test():\r\n    SomeClass().attr\r\n```\r\nSession traceback:\r\n```\r\n============================= test session starts ==============================\r\nplatform darwin -- Python 3.8.1, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 -- /usr/local/opt/python@3.8/bin/python3.8\r\ncachedir: .pytest_cache\r\nrootdir: ******\r\nplugins: asyncio-0.10.0, mock-3.0.0, cov-2.8.1\r\ncollecting ... collected 1 item\r\n\r\ntest_pytest.py::test \r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 191, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 247, in _main\r\nINTERNALERROR>     config.hook.pytest_runtestloop(session=session)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 272, in pytest_runtestloop\r\nINTERNALERROR>     item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 85, in pytest_runtest_protocol\r\nINTERNALERROR>     runtestprotocol(item, nextitem=nextitem)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 100, in runtestprotocol\r\nINTERNALERROR>     reports.append(call_and_report(item, \"call\", log))\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 188, in call_and_report\r\nINTERNALERROR>     report = hook.pytest_runtest_makereport(item=item, call=call)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 203, in _multicall\r\nINTERNALERROR>     gen.send(outcome)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/skipping.py\", line 129, in pytest_runtest_makereport\r\nINTERNALERROR>     rep = outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in pytest_runtest_makereport\r\nINTERNALERROR>     return TestReport.from_item_and_call(item, call)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/reports.py\", line 294, in from_item_and_call\r\nINTERNALERROR>     longrepr = item.repr_failure(excinfo)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/python.py\", line 1513, in repr_failure\r\nINTERNALERROR>     return self._repr_failure_py(excinfo, style=style)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/nodes.py\", line 355, in _repr_failure_py\r\nINTERNALERROR>     return excinfo.getrepr(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 634, in getrepr\r\nINTERNALERROR>     return fmt.repr_excinfo(self)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 879, in repr_excinfo\r\nINTERNALERROR>     reprtraceback = self.repr_traceback(excinfo_)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 823, in repr_traceback\r\nINTERNALERROR>     reprentry = self.repr_traceback_entry(entry, einfo)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 784, in repr_traceback_entry\r\nINTERNALERROR>     reprargs = self.repr_args(entry) if not short else None\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 693, in repr_args\r\nINTERNALERROR>     args.append((argname, saferepr(argvalue)))\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 82, in saferepr\r\nINTERNALERROR>     return SafeRepr(maxsize).repr(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 51, in repr\r\nINTERNALERROR>     s = _format_repr_exception(exc, x)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 23, in _format_repr_exception\r\nINTERNALERROR>     exc_info, obj.__class__.__name__, id(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 47, in repr\r\nINTERNALERROR>     s = super().repr(x)\r\nINTERNALERROR>   File \"/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/reprlib.py\", line 52, in repr\r\nINTERNALERROR>     return self.repr1(x, self.maxlevel)\r\nINTERNALERROR>   File \"/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/reprlib.py\", line 62, in repr1\r\nINTERNALERROR>     return self.repr_instance(x, level)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 60, in repr_instance\r\nINTERNALERROR>     s = _format_repr_exception(exc, x)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 23, in _format_repr_exception\r\nINTERNALERROR>     exc_info, obj.__class__.__name__, id(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 56, in repr_instance\r\nINTERNALERROR>     s = repr(x)\r\nINTERNALERROR>   File \"/Users/stiflou/Documents/projets/apischema/tests/test_pytest.py\", line 6, in __repr__\r\nINTERNALERROR>     raise\r\nINTERNALERROR> RuntimeError: No active exception to reraise\r\n\r\n============================ no tests ran in 0.09s ============================\r\n```\n",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "include_message_history": true,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "max_search_results": 75,
        "max_retries_with_any_file_context": 3,
        "provide_initial_context": true,
        "initial_context_tokens": 6000,
        "initial_search_results": 100,
        "initial_context_spans_per_file": 5,
        "support_test_files": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue is an INTERNALERROR that occurs when an exception is raised in the __repr__ method. The traceback provided points to several files and functions that may be relevant.\n\nBased on the traceback and the provided file snippets, it seems that the problem might be related to how exceptions are handled and represented in pytest. The files that seem most relevant are:\n\n1. `src/_pytest/nodes.py` - This file contains the `Node` class with methods `_repr_failure_py` and `repr_failure` which handle failure representations.\n2. `src/_pytest/reports.py` - This file has functions related to reporting test outcomes.\n3. `src/_pytest/python.py` - Contains the `Function` class with a `repr_failure` method.\n4. `src/_pytest/unittest.py` - Contains the `TestCaseFunction` class with an `_addexcinfo` method and some hooks for test reporting.\n5. `src/_pytest/_code/code.py` - This file has classes and methods related to exception handling and representation.\n6. `src/_pytest/_io/saferepr.py` - Contains the `SafeRepr` class which seems to be directly involved in the error based on the traceback.\n\nI will start by searching for the functions `repr_failure`, `_repr_failure_py`, and `repr_instance` as they seem to be directly involved in the error.",
            "search_requests": [
              {
                "file_pattern": "src/_pytest/**/*.py",
                "class_names": [],
                "function_names": [
                  "repr_failure"
                ]
              },
              {
                "file_pattern": "src/_pytest/**/*.py",
                "class_names": [],
                "function_names": [
                  "_repr_failure_py"
                ]
              },
              {
                "file_pattern": "src/_pytest/**/*.py",
                "class_names": [],
                "function_names": [
                  "repr_instance"
                ]
              }
            ],
            "complete": false
          },
          "output": {
            "ranked_spans": [
              {
                "file_path": "src/_pytest/doctest.py",
                "span_id": "DoctestItem.repr_failure",
                "rank": 0,
                "tokens": 461
              },
              {
                "file_path": "src/_pytest/nodes.py",
                "span_id": "Node.repr_failure",
                "rank": 1,
                "tokens": 72
              },
              {
                "file_path": "src/_pytest/nodes.py",
                "span_id": "Collector.repr_failure",
                "rank": 1,
                "tokens": 142
              },
              {
                "file_path": "src/_pytest/python.py",
                "span_id": "Function.repr_failure",
                "rank": 2,
                "tokens": 63
              },
              {
                "file_path": "src/_pytest/nodes.py",
                "span_id": "Node._repr_failure_py",
                "rank": 0,
                "tokens": 314
              },
              {
                "file_path": "src/_pytest/_io/saferepr.py",
                "span_id": "SafeRepr.repr_instance",
                "rank": 0,
                "tokens": 58
              }
            ],
            "search_requests": [
              {
                "file_pattern": "src/_pytest/**/*.py",
                "query": null,
                "code_snippet": null,
                "class_names": [],
                "function_names": [
                  "repr_failure"
                ]
              },
              {
                "file_pattern": "src/_pytest/**/*.py",
                "query": null,
                "code_snippet": null,
                "class_names": [],
                "function_names": [
                  "_repr_failure_py"
                ]
              },
              {
                "file_pattern": "src/_pytest/**/*.py",
                "query": null,
                "code_snippet": null,
                "class_names": [],
                "function_names": [
                  "repr_instance"
                ]
              }
            ],
            "complete": false
          },
          "completion_cost": 0.049755,
          "input_tokens": 12810,
          "output_tokens": 755
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "include_message_history": false,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "ranked_spans": [
          {
            "file_path": "src/_pytest/doctest.py",
            "span_id": "DoctestItem.repr_failure",
            "rank": 0,
            "tokens": 461
          },
          {
            "file_path": "src/_pytest/nodes.py",
            "span_id": "Node.repr_failure",
            "rank": 1,
            "tokens": 72
          },
          {
            "file_path": "src/_pytest/nodes.py",
            "span_id": "Collector.repr_failure",
            "rank": 1,
            "tokens": 142
          },
          {
            "file_path": "src/_pytest/python.py",
            "span_id": "Function.repr_failure",
            "rank": 2,
            "tokens": 63
          },
          {
            "file_path": "src/_pytest/nodes.py",
            "span_id": "Node._repr_failure_py",
            "rank": 0,
            "tokens": 314
          },
          {
            "file_path": "src/_pytest/_io/saferepr.py",
            "span_id": "SafeRepr.repr_instance",
            "rank": 0,
            "tokens": 58
          }
        ],
        "expand_context": true,
        "max_prompt_file_tokens": 12000
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue reports an INTERNALERROR when an exception occurs in the `__repr__` method of a class. The traceback provided indicates that `repr_failure` methods are involved in handling these exceptions. The following classes and methods are relevant to this issue:\n\n1. **Node** and its `repr_failure` and `_repr_failure_py` methods in `src/_pytest/nodes.py`.\n2. **Collector** and its `repr_failure` method in `src/_pytest/nodes.py`.\n3. **Function** and its `repr_failure` method in `src/_pytest/python.py`.\n4. **DoctestItem** and its `repr_failure` method in `src/_pytest/doctest.py`.\n5. **SafeRepr** and its `repr_instance` method in `src/_pytest/_io/saferepr.py`.\n\nThese methods are likely involved in generating the representations of exceptions, which is where the error occurs according to the traceback.",
            "identified_spans": [
              {
                "file_path": "src/_pytest/nodes.py",
                "span_ids": [
                  "Node",
                  "Node.repr_failure",
                  "Node._repr_failure_py",
                  "Collector",
                  "Collector.repr_failure"
                ]
              },
              {
                "file_path": "src/_pytest/python.py",
                "span_ids": [
                  "Function",
                  "Function.repr_failure"
                ]
              },
              {
                "file_path": "src/_pytest/doctest.py",
                "span_ids": [
                  "DoctestItem",
                  "DoctestItem.repr_failure"
                ]
              },
              {
                "file_path": "src/_pytest/_io/saferepr.py",
                "span_ids": [
                  "SafeRepr",
                  "SafeRepr.repr_instance"
                ]
              }
            ]
          },
          "output": {},
          "completion_cost": 0.074076,
          "input_tokens": 18117,
          "output_tokens": 1315
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "include_message_history": false,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "expand_context": true,
        "finish_after_relevant_count": 2,
        "max_prompt_file_tokens": 12000
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue is an INTERNALERROR that occurs when an exception is raised in the __repr__ method. The traceback provided points to several files and functions that may be relevant.\n\nBased on the traceback and the provided file snippets, it seems that the problem might be related to how exceptions are handled and represented in pytest. The files that seem most relevant are:\n\n1. `src/_pytest/nodes.py` - This file contains the `Node` class with methods `_repr_failure_py` and `repr_failure` which handle failure representations.\n2. `src/_pytest/python.py` - This file has functions related to test function calls and the `Function` class which inherits from `nodes.Item` and re-implements `repr_failure`.\n3. `src/_pytest/_io/saferepr.py` - Contains the `SafeRepr` class which seems to be directly involved in the error based on the traceback.\n\nThese files should contain the relevant code for dealing with exceptions raised in the `__repr__` method and their representation in pytest.\n",
            "relevant": true,
            "complete": true
          },
          "output": {},
          "completion_cost": 0.073776,
          "input_tokens": 20942,
          "output_tokens": 730
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "include_message_history": true,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "max_iterations": 8,
        "max_prompt_file_tokens": 12000,
        "max_tokens_in_edit_prompt": 750,
        "expand_context_with_related_spans": false,
        "allow_hallucinated_spans": false,
        "finish_on_review": true
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue is caused by an exception raised in the __repr__ method of an object, which isn't properly handled, leading to an INTERNALERROR in pytest.\n\nTo fix this, we need to update the SafeRepr.repr_instance method to handle exceptions that may occur when calling repr on an instance. This will ensure that even if __repr__ raises an exception, pytest will not crash with an INTERNALERROR.",
            "action": "modify",
            "instructions": "Update the SafeRepr.repr_instance method to handle exceptions that may occur when calling repr on an instance. This will ensure that even if __repr__ raises an exception, pytest will not crash with an INTERNALERROR.",
            "file_path": "src/_pytest/_io/saferepr.py",
            "span_id": "SafeRepr.repr_instance"
          },
          "output": {
            "instructions": "Update the SafeRepr.repr_instance method to handle exceptions that may occur when calling repr on an instance. This will ensure that even if __repr__ raises an exception, pytest will not crash with an INTERNALERROR.",
            "file_path": "src/_pytest/_io/saferepr.py",
            "span_id": "SafeRepr.repr_instance",
            "start_line": 54,
            "end_line": 61
          },
          "completion_cost": 0.073101,
          "input_tokens": 21867,
          "output_tokens": 500
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "include_message_history": true,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "max_iterations": 8,
        "instructions": "Update the SafeRepr.repr_instance method to handle exceptions that may occur when calling repr on an instance. This will ensure that even if __repr__ raises an exception, pytest will not crash with an INTERNALERROR.",
        "file_path": "src/_pytest/_io/saferepr.py",
        "span_id": "SafeRepr.repr_instance",
        "start_line": 54,
        "end_line": 61,
        "show_initial_message": true,
        "show_file_context": false,
        "verify": true,
        "chain_of_thought": false,
        "max_prompt_file_tokens": 8000
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def repr_instance(self, x: Any, level: int) -> str:\n        try:\n            s = repr(x)\n        except (KeyboardInterrupt, SystemExit):\n            raise\n        except BaseException as exc:\n            s = _format_repr_exception(exc, x)\n        return _ellipsize(s, self.maxsize)\n"
          },
          "retry_message": "The code in the replace tag is the same as in the search. Use the reject function if you can't do any changes and want to reject the instructions.",
          "completion_cost": 0.034302,
          "input_tokens": 10284,
          "output_tokens": 230
        },
        {
          "action": {
            "content": "<reject>\nThe code provided already handles exceptions that may occur when calling repr on an instance.\n</reject>"
          },
          "output": {
            "message": "\nThe code provided already handles exceptions that may occur when calling repr on an instance.\n"
          },
          "completion_cost": 0.032973,
          "input_tokens": 10626,
          "output_tokens": 73
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "include_message_history": true,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "max_iterations": 8,
        "message": "\nThe code provided already handles exceptions that may occur when calling repr on an instance.\n",
        "max_prompt_file_tokens": 12000,
        "max_tokens_in_edit_prompt": 750,
        "expand_context_with_related_spans": false,
        "allow_hallucinated_spans": false,
        "finish_on_review": true
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue is caused by an exception raised in the __repr__ method of an object, which isn't properly handled, leading to an INTERNALERROR in pytest.\n\nTo fix this, we need to update the SafeRepr.repr_instance method to handle exceptions that may occur when calling repr on an instance. This will ensure that even if __repr__ raises an exception, pytest will not crash with an INTERNALERROR.",
            "action": "finish",
            "finish": "The code provided already handles exceptions that may occur when calling repr on an instance."
          },
          "output": {
            "message": "The code provided already handles exceptions that may occur when calling repr on an instance."
          },
          "completion_cost": 0.07338,
          "input_tokens": 22455,
          "output_tokens": 401
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "include_message_history": false,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 1000,
        "message": "The code provided already handles exceptions that may occur when calling repr on an instance.",
        "output": {
          "max_tokens": 2000,
          "max_prompt_file_tokens": 12000
        }
      },
      "actions": []
    }
  ],
  "info": {
    "evaluation_name": "20240705_sima_fulltest",
    "instance_id": "pytest-dev__pytest-7168",
    "status": "finished",
    "duration": 73.05874156951904,
    "total_cost": 0.988902,
    "submission": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 23af4d0bb..23472b830 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -79,7 +79,10 @@ def saferepr(obj: Any, maxsize: int = 240) -> str:\n     care to never raise exceptions itself.  This function is a wrapper\n     around the Repr/reprlib functionality of the standard 2.6 lib.\n     \"\"\"\n-    return SafeRepr(maxsize).repr(obj)\n+    try:\n+        return SafeRepr(maxsize).repr(obj)\n+    except Exception as exc:\n+        return f\"<repr-error: {exc.__class__.__name__}>\"\n \n \n class AlwaysDispatchingPrettyPrinter(pprint.PrettyPrinter):\n"
  }
}