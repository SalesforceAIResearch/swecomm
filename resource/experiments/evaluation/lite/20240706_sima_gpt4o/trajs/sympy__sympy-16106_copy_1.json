{
  "name": "AgenticLoop",
  "initial_message": "mathml printer for IndexedBase required\nWriting an `Indexed` object to MathML fails with a `TypeError` exception: `TypeError: 'Indexed' object is not iterable`:\r\n\r\n```\r\nIn [340]: sympy.__version__\r\nOut[340]: '1.0.1.dev'\r\n\r\nIn [341]: from sympy.abc import (a, b)\r\n\r\nIn [342]: sympy.printing.mathml(sympy.IndexedBase(a)[b])\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-342-b32e493b70d3> in <module>()\r\n----> 1 sympy.printing.mathml(sympy.IndexedBase(a)[b])\r\n\r\n/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/sympy/printing/mathml.py in mathml(expr, **settings)\r\n    442 def mathml(expr, **settings):\r\n    443     \"\"\"Returns the MathML representation of expr\"\"\"\r\n--> 444     return MathMLPrinter(settings).doprint(expr)\r\n    445 \r\n    446 \r\n\r\n/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/sympy/printing/mathml.py in doprint(self, expr)\r\n     36         Prints the expression as MathML.\r\n     37         \"\"\"\r\n---> 38         mathML = Printer._print(self, expr)\r\n     39         unistr = mathML.toxml()\r\n     40         xmlbstr = unistr.encode('ascii', 'xmlcharrefreplace')\r\n\r\n/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/sympy/printing/printer.py in _print(self, expr, *args, **kwargs)\r\n    255                 printmethod = '_print_' + cls.__name__\r\n    256                 if hasattr(self, printmethod):\r\n--> 257                     return getattr(self, printmethod)(expr, *args, **kwargs)\r\n    258             # Unknown object, fall back to the emptyPrinter.\r\n    259             return self.emptyPrinter(expr)\r\n\r\n/dev/shm/gerrit/venv/stable-3.5/lib/python3.5/site-packages/sympy/printing/mathml.py in _print_Basic(self, e)\r\n    356     def _print_Basic(self, e):\r\n    357         x = self.dom.createElement(self.mathml_tag(e))\r\n--> 358         for arg in e:\r\n    359             x.appendChild(self._print(arg))\r\n    360         return x\r\n\r\nTypeError: 'Indexed' object is not iterable\r\n```\r\n\r\nIt also fails for more complex expressions where at least one element is Indexed.\n",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "include_message_history": true,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "max_search_results": 75,
        "max_retries_with_any_file_context": 3,
        "provide_initial_context": true,
        "initial_context_tokens": 6000,
        "initial_search_results": 100,
        "initial_context_spans_per_file": 5,
        "support_test_files": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue is that writing an `Indexed` object to MathML fails with a `TypeError` exception: `TypeError: 'Indexed' object is not iterable`. The error occurs in the `sympy.printing.mathml` module when trying to print an `Indexed` object.\n\nThe relevant files provided include `sympy/printing/mathml.py`, `sympy/printing/latex.py`, `sympy/tensor/indexed.py`, `sympy/printing/julia.py`, `sympy/printing/ccode.py`, `sympy/printing/rcode.py`, `sympy/printing/octave.py`, and `sympy/printing/fcode.py`.\n\nThe `sympy/printing/mathml.py` file contains the `MathMLPrinterBase` class and its subclasses `MathMLContentPrinter` and `MathMLPresentationPrinter`, which are likely involved in the MathML printing process.\n\nThe `sympy/tensor/indexed.py` file contains the `Indexed` and `IndexedBase` classes, which are the types causing the issue.\n\nOther files contain various printer classes for different formats, each with methods for printing `Indexed` objects.\n\nTo locate the relevant code, I will search for the `_print_Indexed` function in the `sympy/printing/mathml.py` file, as this function is likely responsible for handling `Indexed` objects in MathML printing.",
            "search_requests": [
              {
                "file_pattern": "sympy/printing/mathml.py",
                "class_names": [],
                "function_names": [
                  "_print_Indexed"
                ]
              }
            ],
            "complete": false
          },
          "output": {
            "ranked_spans": [
              {
                "file_path": "sympy/printing/latex.py",
                "span_id": "LatexPrinter._print_Indexed",
                "rank": 0,
                "tokens": 46
              },
              {
                "file_path": "sympy/printing/glsl.py",
                "span_id": "GLSLPrinter._print_Indexed",
                "rank": 1,
                "tokens": 70
              },
              {
                "file_path": "sympy/printing/rust.py",
                "span_id": "RustCodePrinter._print_Indexed",
                "rank": 2,
                "tokens": 69
              },
              {
                "file_path": "sympy/printing/julia.py",
                "span_id": "JuliaCodePrinter._print_Indexed",
                "rank": 3,
                "tokens": 44
              },
              {
                "file_path": "sympy/printing/llvmjitcode.py",
                "span_id": "LLVMJitCallbackPrinter._print_Indexed",
                "rank": 4,
                "tokens": 81
              },
              {
                "file_path": "sympy/printing/ccode.py",
                "span_id": "C89CodePrinter._print_Indexed",
                "rank": 5,
                "tokens": 174
              },
              {
                "file_path": "sympy/printing/fcode.py",
                "span_id": "FCodePrinter._print_Indexed",
                "rank": 6,
                "tokens": 44
              },
              {
                "file_path": "sympy/printing/rcode.py",
                "span_id": "RCodePrinter._print_Indexed",
                "rank": 7,
                "tokens": 44
              },
              {
                "file_path": "sympy/printing/octave.py",
                "span_id": "OctaveCodePrinter._print_Indexed",
                "rank": 8,
                "tokens": 44
              },
              {
                "file_path": "sympy/printing/jscode.py",
                "span_id": "JavascriptCodePrinter._print_Indexed",
                "rank": 9,
                "tokens": 69
              }
            ],
            "search_requests": [
              {
                "file_pattern": "sympy/printing/mathml.py",
                "query": null,
                "code_snippet": null,
                "class_names": [],
                "function_names": [
                  "_print_Indexed"
                ]
              }
            ],
            "complete": false
          },
          "completion_cost": 0.011406,
          "input_tokens": 2192,
          "output_tokens": 322
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "include_message_history": false,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "ranked_spans": [
          {
            "file_path": "sympy/printing/latex.py",
            "span_id": "LatexPrinter._print_Indexed",
            "rank": 0,
            "tokens": 46
          },
          {
            "file_path": "sympy/printing/glsl.py",
            "span_id": "GLSLPrinter._print_Indexed",
            "rank": 1,
            "tokens": 70
          },
          {
            "file_path": "sympy/printing/rust.py",
            "span_id": "RustCodePrinter._print_Indexed",
            "rank": 2,
            "tokens": 69
          },
          {
            "file_path": "sympy/printing/julia.py",
            "span_id": "JuliaCodePrinter._print_Indexed",
            "rank": 3,
            "tokens": 44
          },
          {
            "file_path": "sympy/printing/llvmjitcode.py",
            "span_id": "LLVMJitCallbackPrinter._print_Indexed",
            "rank": 4,
            "tokens": 81
          },
          {
            "file_path": "sympy/printing/ccode.py",
            "span_id": "C89CodePrinter._print_Indexed",
            "rank": 5,
            "tokens": 174
          },
          {
            "file_path": "sympy/printing/fcode.py",
            "span_id": "FCodePrinter._print_Indexed",
            "rank": 6,
            "tokens": 44
          },
          {
            "file_path": "sympy/printing/rcode.py",
            "span_id": "RCodePrinter._print_Indexed",
            "rank": 7,
            "tokens": 44
          },
          {
            "file_path": "sympy/printing/octave.py",
            "span_id": "OctaveCodePrinter._print_Indexed",
            "rank": 8,
            "tokens": 44
          },
          {
            "file_path": "sympy/printing/jscode.py",
            "span_id": "JavascriptCodePrinter._print_Indexed",
            "rank": 9,
            "tokens": 69
          }
        ],
        "expand_context": true,
        "max_prompt_file_tokens": 12000
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue is about adding support for `Indexed` objects in the MathML printer. The error occurs because the MathML printer does not have a method to handle `Indexed` objects, leading to a `TypeError` when it tries to iterate over the `Indexed` object.\n\nFrom the search results, we can see that several other printers (like `LatexPrinter`, `GLSLPrinter`, `RustCodePrinter`, `JuliaCodePrinter`, `LLVMJitCallbackPrinter`, `C89CodePrinter`, `FCodePrinter`, `RCodePrinter`, `OctaveCodePrinter`, and `JavascriptCodePrinter`) have a `_print_Indexed` method to handle `Indexed` objects.\n\nTo resolve the issue, we need to add a similar `_print_Indexed` method to the MathML printer. The relevant code spans from the search results that show how other printers handle `Indexed` objects are:\n\n- `sympy/printing/latex.py` (span `LatexPrinter._print_Indexed`)\n- `sympy/printing/glsl.py` (span `GLSLPrinter._print_Indexed`)\n- `sympy/printing/rust.py` (span `RustCodePrinter._print_Indexed`)\n- `sympy/printing/julia.py` (span `JuliaCodePrinter._print_Indexed`)\n- `sympy/printing/llvmjitcode.py` (span `LLVMJitCallbackPrinter._print_Indexed`)\n- `sympy/printing/ccode.py` (span `C89CodePrinter._print_Indexed`)\n- `sympy/printing/fcode.py` (span `FCodePrinter._print_Indexed`)\n- `sympy/printing/rcode.py` (span `RCodePrinter._print_Indexed`)\n- `sympy/printing/octave.py` (span `OctaveCodePrinter._print_Indexed`)\n- `sympy/printing/jscode.py` (span `JavascriptCodePrinter._print_Indexed`)\n\nThese spans provide examples of how to implement the `_print_Indexed` method for the MathML printer.",
            "identified_spans": [
              {
                "file_path": "sympy/printing/latex.py",
                "span_ids": [
                  "LatexPrinter._print_Indexed"
                ]
              },
              {
                "file_path": "sympy/printing/glsl.py",
                "span_ids": [
                  "GLSLPrinter._print_Indexed"
                ]
              },
              {
                "file_path": "sympy/printing/rust.py",
                "span_ids": [
                  "RustCodePrinter._print_Indexed"
                ]
              },
              {
                "file_path": "sympy/printing/julia.py",
                "span_ids": [
                  "JuliaCodePrinter._print_Indexed"
                ]
              },
              {
                "file_path": "sympy/printing/llvmjitcode.py",
                "span_ids": [
                  "LLVMJitCallbackPrinter._print_Indexed"
                ]
              },
              {
                "file_path": "sympy/printing/ccode.py",
                "span_ids": [
                  "C89CodePrinter._print_Indexed"
                ]
              },
              {
                "file_path": "sympy/printing/fcode.py",
                "span_ids": [
                  "FCodePrinter._print_Indexed"
                ]
              },
              {
                "file_path": "sympy/printing/rcode.py",
                "span_ids": [
                  "RCodePrinter._print_Indexed"
                ]
              },
              {
                "file_path": "sympy/printing/octave.py",
                "span_ids": [
                  "OctaveCodePrinter._print_Indexed"
                ]
              },
              {
                "file_path": "sympy/printing/jscode.py",
                "span_ids": [
                  "JavascriptCodePrinter._print_Indexed"
                ]
              }
            ]
          },
          "output": {},
          "completion_cost": 0.024129,
          "input_tokens": 4568,
          "output_tokens": 695
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "include_message_history": false,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "expand_context": true,
        "finish_after_relevant_count": 2,
        "max_prompt_file_tokens": 12000
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue is that writing an `Indexed` object to MathML fails with a `TypeError` exception: `TypeError: 'Indexed' object is not iterable`. The error occurs in the `sympy.printing.mathml` module when trying to print an `Indexed` object.\n\nThe relevant files provided include `sympy/printing/mathml.py`, `sympy/printing/latex.py`, `sympy/tensor/indexed.py`, `sympy/printing/julia.py`, `sympy/printing/ccode.py`, `sympy/printing/rcode.py`, `sympy/printing/octave.py`, and `sympy/printing/fcode.py`.\n\nThe `sympy/printing/mathml.py` file contains the `MathMLPrinterBase` class and its subclasses `MathMLContentPrinter` and `MathMLPresentationPrinter`, which are likely involved in the MathML printing process.\n\nThe `sympy/tensor/indexed.py` file contains the `Indexed` and `IndexedBase` classes, which are the types causing the issue.\n\nOther files contain various printer classes for different formats, each with methods for printing `Indexed` objects.\n\nTo locate the relevant code, I will search for the `_print_Indexed` function in the `sympy/printing/mathml.py` file, as this function is likely responsible for handling `Indexed` objects in MathML printing.",
            "relevant": true,
            "complete": false,
            "search_suggestions": "Search for the `_print_Indexed` method in the `sympy/printing/mathml.py` file to identify how `Indexed` objects are handled in MathML printing. This method is likely responsible for the error and needs to be implemented or fixed."
          },
          "output": {
            "message": "Search for the `_print_Indexed` method in the `sympy/printing/mathml.py` file to identify how `Indexed` objects are handled in MathML printing. This method is likely responsible for the error and needs to be implemented or fixed."
          },
          "completion_cost": 0.022716,
          "input_tokens": 5762,
          "output_tokens": 362
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "include_message_history": true,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "message": "Search for the `_print_Indexed` method in the `sympy/printing/mathml.py` file to identify how `Indexed` objects are handled in MathML printing. This method is likely responsible for the error and needs to be implemented or fixed.",
        "max_search_results": 75,
        "max_retries_with_any_file_context": 3,
        "provide_initial_context": true,
        "initial_context_tokens": 6000,
        "initial_search_results": 100,
        "initial_context_spans_per_file": 5,
        "support_test_files": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue is that writing an `Indexed` object to MathML fails with a `TypeError` exception: `TypeError: 'Indexed' object is not iterable`. The error occurs in the `sympy.printing.mathml` module when trying to print an `Indexed` object.\n\nThe relevant files provided include `sympy/printing/mathml.py`, `sympy/printing/latex.py`, `sympy/tensor/indexed.py`, `sympy/printing/julia.py`, `sympy/printing/ccode.py`, `sympy/printing/rcode.py`, `sympy/printing/octave.py`, and `sympy/printing/fcode.py`.\n\nThe `sympy/printing/mathml.py` file contains the `MathMLPrinterBase` class and its subclasses `MathMLContentPrinter` and `MathMLPresentationPrinter`, which are likely involved in the MathML printing process.\n\nThe `sympy/tensor/indexed.py` file contains the `Indexed` and `IndexedBase` classes, which are the types causing the issue.\n\nOther files contain various printer classes for different formats, each with methods for printing `Indexed` objects.\n\nTo locate the relevant code, I will search for the `_print_Indexed` function in the `sympy/printing/mathml.py` file, as this function is likely responsible for handling `Indexed` objects in MathML printing.\n\nThe `_print_Indexed` function was not found in `sympy/printing/mathml.py`. I will now search for the `_print_IndexedBase` function in the same file, as it might be responsible for handling `IndexedBase` objects.",
            "search_requests": [
              {
                "file_pattern": "sympy/printing/mathml.py",
                "class_names": [],
                "function_names": [
                  "_print_IndexedBase"
                ]
              }
            ],
            "complete": false
          },
          "output": {
            "ranked_spans": [
              {
                "file_path": "sympy/printing/latex.py",
                "span_id": "LatexPrinter._print_IndexedBase",
                "rank": 0,
                "tokens": 17
              }
            ],
            "search_requests": [
              {
                "file_pattern": "sympy/printing/mathml.py",
                "query": null,
                "code_snippet": null,
                "class_names": [],
                "function_names": [
                  "_print_IndexedBase"
                ]
              }
            ],
            "complete": false
          },
          "completion_cost": 0.026694000000000002,
          "input_tokens": 6978,
          "output_tokens": 384
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "include_message_history": false,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "ranked_spans": [
          {
            "file_path": "sympy/printing/latex.py",
            "span_id": "LatexPrinter._print_IndexedBase",
            "rank": 0,
            "tokens": 17
          }
        ],
        "expand_context": true,
        "max_prompt_file_tokens": 12000
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue is about adding support for `Indexed` objects in the MathML printer. The traceback indicates that the error occurs because the `Indexed` object is not iterable. The solution likely involves adding a `_print_Indexed` method to the MathML printer class.\n\nIn the current file context, we have seen that other printers (like LatexPrinter, GLSLPrinter, RustCodePrinter, etc.) have a `_print_Indexed` method to handle `Indexed` objects. The search results show a new span in `sympy/printing/latex.py` that includes a `_print_IndexedBase` method, which is relevant to the issue as it deals with `IndexedBase` objects.\n\nThe `_print_IndexedBase` method in `sympy/printing/latex.py` is relevant because it shows how to handle `IndexedBase` objects, which are closely related to `Indexed` objects. This can provide a reference for implementing the `_print_Indexed` method in the MathML printer.\n\nIdentified relevant span:\n- `sympy/printing/latex.py`: Span with `_print_IndexedBase` method.",
            "identified_spans": [
              {
                "file_path": "sympy/printing/latex.py",
                "span_ids": [
                  "LatexPrinter._print_IndexedBase"
                ]
              }
            ]
          },
          "output": {},
          "completion_cost": 0.022740000000000003,
          "input_tokens": 6245,
          "output_tokens": 267
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "include_message_history": false,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "expand_context": true,
        "finish_after_relevant_count": 2,
        "max_prompt_file_tokens": 12000
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue is that writing an `Indexed` object to MathML fails with a `TypeError` exception: `TypeError: 'Indexed' object is not iterable`. The error occurs in the `sympy.printing.mathml` module when trying to print an `Indexed` object.\n\nThe relevant files provided include `sympy/printing/mathml.py`, `sympy/printing/latex.py`, `sympy/tensor/indexed.py`, `sympy/printing/julia.py`, `sympy/printing/ccode.py`, `sympy/printing/rcode.py`, `sympy/printing/octave.py`, and `sympy/printing/fcode.py`.\n\nThe `sympy/printing/mathml.py` file contains the `MathMLPrinterBase` class and its subclasses `MathMLContentPrinter` and `MathMLPresentationPrinter`, which are likely involved in the MathML printing process.\n\nThe `sympy/tensor/indexed.py` file contains the `Indexed` and `IndexedBase` classes, which are the types causing the issue.\n\nOther files contain various printer classes for different formats, each with methods for printing `Indexed` objects.\n\nTo locate the relevant code, I will search for the `_print_Indexed` function in the `sympy/printing/mathml.py` file, as this function is likely responsible for handling `Indexed` objects in MathML printing.\n\nThe `_print_Indexed` function was not found in `sympy/printing/mathml.py`. I will now search for the `_print_IndexedBase` function in the same file, as it might be responsible for handling `IndexedBase` objects.",
            "relevant": true,
            "complete": true
          },
          "output": {},
          "completion_cost": 0.029355000000000003,
          "input_tokens": 7990,
          "output_tokens": 359
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "include_message_history": true,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "max_iterations": 8,
        "max_prompt_file_tokens": 12000,
        "max_tokens_in_edit_prompt": 750,
        "expand_context_with_related_spans": false,
        "allow_hallucinated_spans": false,
        "finish_on_review": true
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "To address the issue of the MathML printer failing with a `TypeError` when encountering an `Indexed` object, we need to implement a `_print_Indexed` method in the MathMLPrinter class. This method should handle the conversion of `Indexed` objects to their MathML representation.",
            "action": "modify",
            "instructions": "Implement a `_print_Indexed` method in the MathMLPrinter class to handle the conversion of `Indexed` objects to their MathML representation.",
            "file_path": "sympy/printing/mathml.py",
            "span_id": "MathMLPrinter._print_Indexed"
          },
          "retry_message": "File sympy/printing/mathml.py is not found in the file context. You can only request changes to files that are in file context:\n * sympy/printing/latex.py\n * sympy/printing/glsl.py\n * sympy/printing/rust.py\n * sympy/printing/julia.py\n * sympy/printing/llvmjitcode.py\n * sympy/printing/ccode.py\n * sympy/printing/fcode.py\n * sympy/printing/rcode.py\n * sympy/printing/octave.py\n * sympy/printing/jscode.py\n",
          "completion_cost": 0.026556,
          "input_tokens": 8252,
          "output_tokens": 120
        },
        {
          "action": {
            "scratch_pad": "To address the issue of the MathML printer failing with a `TypeError` when encountering an `Indexed` object, we need to implement a `_print_Indexed` method in the MathMLPrinter class. This method should handle the conversion of `Indexed` objects to their MathML representation.",
            "action": "finish",
            "finish": "The file sympy/printing/mathml.py is not found in the file context. The issue cannot be addressed without the relevant file."
          },
          "output": {
            "message": "The file sympy/printing/mathml.py is not found in the file context. The issue cannot be addressed without the relevant file."
          },
          "completion_cost": 0.027000000000000003,
          "input_tokens": 8515,
          "output_tokens": 97
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "include_message_history": false,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 1000,
        "message": "The file sympy/printing/mathml.py is not found in the file context. The issue cannot be addressed without the relevant file.",
        "output": {
          "max_tokens": 2000,
          "max_prompt_file_tokens": 12000
        }
      },
      "actions": []
    }
  ],
  "info": {
    "evaluation_name": "20240705_sima_fulltest",
    "instance_id": "sympy__sympy-16106",
    "status": "finished",
    "duration": 179.61736845970154,
    "total_cost": 1.0379369999999999,
    "submission": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 1aa0ee01a2..709c0ca9fe 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -477,6 +477,20 @@ def _print_int(self, p):\n         dom_element.appendChild(self.dom.createTextNode(str(p)))\n         return dom_element\n \n+    def _print_Indexed(self, expr):\n+        base_element = self._print(expr.base)\n+        index_elements = [self._print(i) for i in expr.indices]\n+\n+        apply_element = self.dom.createElement(\"apply\")\n+        ci_element = self.dom.createElement(\"ci\")\n+        ci_element.appendChild(base_element)\n+        apply_element.appendChild(ci_element)\n+\n+        for index in index_elements:\n+            apply_element.appendChild(index)\n+\n+        return apply_element\n+\n \n class MathMLPresentationPrinter(MathMLPrinterBase):\n     \"\"\"Prints an expression to the Presentation MathML markup language.\n@@ -1270,6 +1284,16 @@ def _print_Lambda(self, e):\n         x.appendChild(mrow)\n         return x\n \n+    def _print_Indexed(self, e):\n+        x = self.dom.createElement('msub')\n+        base = self._print(e.base)\n+        indices = self.dom.createElement('mrow')\n+        for index in e.indices:\n+            indices.appendChild(self._print(index))\n+        x.appendChild(base)\n+        x.appendChild(indices)\n+        return x\n+\n \n def mathml(expr, printer='content', **settings):\n     \"\"\"Returns the MathML representation of expr. If printer is presentation then\n"
  }
}