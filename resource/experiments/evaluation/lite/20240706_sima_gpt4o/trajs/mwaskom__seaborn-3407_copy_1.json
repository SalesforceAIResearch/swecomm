{
  "name": "AgenticLoop",
  "initial_message": "pairplot raises KeyError with MultiIndex DataFrame\nWhen trying to pairplot a MultiIndex DataFrame, `pairplot` raises a `KeyError`:\r\n\r\nMRE:\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nimport seaborn as sns\r\n\r\n\r\ndata = {\r\n    (\"A\", \"1\"): np.random.rand(100),\r\n    (\"A\", \"2\"): np.random.rand(100),\r\n    (\"B\", \"1\"): np.random.rand(100),\r\n    (\"B\", \"2\"): np.random.rand(100),\r\n}\r\ndf = pd.DataFrame(data)\r\nsns.pairplot(df)\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in pairplot(data, hue, hue_order, palette, vars, x_vars, y_vars, kind, diag_kind, markers, height, aspect, corner, dropna, plot_kws, diag_kws, grid_kws, size)\r\n   2142     diag_kws.setdefault(\"legend\", False)\r\n   2143     if diag_kind == \"hist\":\r\n-> 2144         grid.map_diag(histplot, **diag_kws)\r\n   2145     elif diag_kind == \"kde\":\r\n   2146         diag_kws.setdefault(\"fill\", True)\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in map_diag(self, func, **kwargs)\r\n   1488                 plt.sca(ax)\r\n   1489 \r\n-> 1490             vector = self.data[var]\r\n   1491             if self._hue_var is not None:\r\n   1492                 hue = self.data[self._hue_var]\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/frame.py) in __getitem__(self, key)\r\n   3765             if is_iterator(key):\r\n   3766                 key = list(key)\r\n-> 3767             indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\r\n   3768 \r\n   3769         # take() does not accept boolean indexers\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _get_indexer_strict(self, key, axis_name)\r\n   2534             indexer = self._get_indexer_level_0(keyarr)\r\n   2535 \r\n-> 2536             self._raise_if_missing(key, indexer, axis_name)\r\n   2537             return self[indexer], indexer\r\n   2538 \r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _raise_if_missing(self, key, indexer, axis_name)\r\n   2552                 cmask = check == -1\r\n   2553                 if cmask.any():\r\n-> 2554                     raise KeyError(f\"{keyarr[cmask]} not in index\")\r\n   2555                 # We get here when levels still contain values which are not\r\n   2556                 # actually in Index anymore\r\n\r\nKeyError: \"['1'] not in index\"\r\n```\r\n\r\nA workaround is to \"flatten\" the columns:\r\n\r\n```python\r\ndf.columns = [\"\".join(column) for column in df.columns]\r\n```\n",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "include_message_history": true,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "max_search_results": 75,
        "max_retries_with_any_file_context": 3,
        "provide_initial_context": true,
        "initial_context_tokens": 6000,
        "initial_search_results": 100,
        "initial_context_spans_per_file": 5,
        "support_test_files": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue is that `pairplot` raises a `KeyError` when used with a MultiIndex DataFrame. The error occurs in the `pairplot` function in `seaborn/axisgrid.py`. The traceback indicates that the error happens when accessing `self.data[var]` in the `map_diag` method of the `PairGrid` class.\n\nRelevant files to search for the issue include:\n- `seaborn/axisgrid.py` (contains the `pairplot` function and `PairGrid` class)\n- `seaborn/_core/data.py` (contains the `PlotData` class which might be involved in data handling)\n- `seaborn/_core/groupby.py` (contains the `GroupBy` class which might be involved in handling grouped data)\n\nI will search for the `pairplot` function and `PairGrid` class in `seaborn/axisgrid.py` to locate the relevant code.",
            "search_requests": [
              {
                "file_pattern": "seaborn/axisgrid.py",
                "class_names": [],
                "function_names": [
                  "pairplot",
                  "PairGrid"
                ]
              }
            ],
            "complete": false
          },
          "output": {
            "ranked_spans": [
              {
                "file_path": "seaborn/axisgrid.py",
                "span_id": "pairplot",
                "rank": 0,
                "tokens": 1506
              }
            ],
            "search_requests": [
              {
                "file_pattern": "seaborn/axisgrid.py",
                "query": null,
                "code_snippet": null,
                "class_names": [],
                "function_names": [
                  "pairplot",
                  "PairGrid"
                ]
              }
            ],
            "complete": false
          },
          "completion_cost": 0.013803000000000001,
          "input_tokens": 3451,
          "output_tokens": 230
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "include_message_history": false,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "ranked_spans": [
          {
            "file_path": "seaborn/axisgrid.py",
            "span_id": "pairplot",
            "rank": 0,
            "tokens": 1506
          }
        ],
        "expand_context": true,
        "max_prompt_file_tokens": 12000
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue is that `pairplot` raises a `KeyError` when used with a MultiIndex DataFrame. The error occurs because the code tries to access columns using single-level keys, which do not exist in a MultiIndex DataFrame.\n\nThe relevant code spans in the search results are:\n1. The `pairplot` function in `seaborn/axisgrid.py` (span `pairplot`). This function is directly responsible for creating the pair plot and contains the logic that needs to be modified to handle MultiIndex DataFrames.\n2. The `map_diag` method in the `PairGrid` class in `seaborn/axisgrid.py` (span `PairGrid.map_diag`). This method is where the `KeyError` is raised when trying to access the data using single-level keys.\n\nThese spans are relevant because they contain the code that needs to be modified to handle MultiIndex DataFrames correctly.",
            "identified_spans": [
              {
                "file_path": "seaborn/axisgrid.py",
                "span_ids": [
                  "pairplot",
                  "PairGrid.map_diag"
                ]
              }
            ]
          },
          "output": {},
          "completion_cost": 0.016536000000000002,
          "input_tokens": 4387,
          "output_tokens": 225
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "include_message_history": false,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "expand_context": true,
        "finish_after_relevant_count": 2,
        "max_prompt_file_tokens": 12000
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue is that `pairplot` raises a `KeyError` when used with a MultiIndex DataFrame. The error occurs in the `pairplot` function in `seaborn/axisgrid.py`. The traceback indicates that the error happens when accessing `self.data[var]` in the `map_diag` method of the `PairGrid` class.\n\nRelevant files to search for the issue include:\n- `seaborn/axisgrid.py` (contains the `pairplot` function and `PairGrid` class)\n- `seaborn/_core/data.py` (contains the `PlotData` class which might be involved in data handling)\n- `seaborn/_core/groupby.py` (contains the `GroupBy` class which might be involved in handling grouped data)\n\nI will search for the `pairplot` function and `PairGrid` class in `seaborn/axisgrid.py` to locate the relevant code.\n\nThe file context provided includes the `pairplot` function and the `PairGrid` class, which are relevant to the reported issue. The error occurs when accessing `self.data[var]` in the `map_diag` method of the `PairGrid` class, which is present in the provided file context.",
            "relevant": true,
            "complete": true
          },
          "output": {},
          "completion_cost": 0.020412,
          "input_tokens": 5419,
          "output_tokens": 277
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "include_message_history": true,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "max_iterations": 8,
        "max_prompt_file_tokens": 12000,
        "max_tokens_in_edit_prompt": 750,
        "expand_context_with_related_spans": false,
        "allow_hallucinated_spans": false,
        "finish_on_review": true
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "To address the issue of `pairplot` raising a `KeyError` with a MultiIndex DataFrame, we need to flatten the columns of the DataFrame within the `pairplot` function. This will ensure that the columns are accessible without causing a `KeyError`. The change will be made in the `pairplot` function, specifically before the `PairGrid` is instantiated.",
            "action": "modify",
            "instructions": "Flatten the columns of the DataFrame if it has a MultiIndex before creating the PairGrid in the `pairplot` function.",
            "file_path": "seaborn/axisgrid.py",
            "span_id": "pairplot"
          },
          "output": {
            "instructions": "Flatten the columns of the DataFrame if it has a MultiIndex before creating the PairGrid in the `pairplot` function.",
            "file_path": "seaborn/axisgrid.py",
            "span_id": "pairplot"
          },
          "completion_cost": 0.018081000000000003,
          "input_tokens": 5372,
          "output_tokens": 131
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "include_message_history": false,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "instructions": "Flatten the columns of the DataFrame if it has a MultiIndex before creating the PairGrid in the `pairplot` function.\n\nTo flatten the columns of the DataFrame if it has a MultiIndex before creating the PairGrid, we need to add a check and flattening logic before the PairGrid is instantiated. The PairGrid is instantiated at line 2114, so we should add the necessary code just before this line.",
        "file_path": "seaborn/axisgrid.py",
        "span_id": "pairplot",
        "max_tokens_in_edit_prompt": 1200
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "To flatten the columns of the DataFrame if it has a MultiIndex before creating the PairGrid, we need to add a check and flattening logic before the PairGrid is instantiated. The PairGrid is instantiated at line 2114, so we should add the necessary code just before this line.",
            "start_line": 2100,
            "end_line": 2113
          },
          "output": {
            "instructions": "Flatten the columns of the DataFrame if it has a MultiIndex before creating the PairGrid in the `pairplot` function.\n\nTo flatten the columns of the DataFrame if it has a MultiIndex before creating the PairGrid, we need to add a check and flattening logic before the PairGrid is instantiated. The PairGrid is instantiated at line 2114, so we should add the necessary code just before this line.",
            "file_path": "seaborn/axisgrid.py",
            "span_id": "pairplot",
            "start_line": 2100,
            "end_line": 2113
          },
          "completion_cost": 0.008205,
          "input_tokens": 2355,
          "output_tokens": 76
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "include_message_history": true,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "max_iterations": 8,
        "instructions": "Flatten the columns of the DataFrame if it has a MultiIndex before creating the PairGrid in the `pairplot` function.\n\nTo flatten the columns of the DataFrame if it has a MultiIndex before creating the PairGrid, we need to add a check and flattening logic before the PairGrid is instantiated. The PairGrid is instantiated at line 2114, so we should add the necessary code just before this line.",
        "file_path": "seaborn/axisgrid.py",
        "span_id": "pairplot",
        "start_line": 2100,
        "end_line": 2113,
        "show_initial_message": true,
        "show_file_context": false,
        "verify": true,
        "chain_of_thought": false,
        "max_prompt_file_tokens": 8000
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n\n    plot_kws = {} if plot_kws is None else plot_kws.copy()\n    diag_kws = {} if diag_kws is None else diag_kws.copy()\n    grid_kws = {} if grid_kws is None else grid_kws.copy()\n\n    # Flatten columns if DataFrame has MultiIndex columns\n    if isinstance(data.columns, pd.MultiIndex):\n        data.columns = [\"\".join(map(str, col)) for col in data.columns]\n\n    # Resolve \"auto\" diag kind\n    if diag_kind == \"auto\":\n        if hue is None:\n            diag_kind = \"kde\" if kind == \"kde\" else \"hist\"\n        else:\n            diag_kind = \"hist\" if kind == \"hist\" else \"kde\"\n\n    # Set up the PairGrid\n    grid_kws.setdefault(\"diag_sharey\", diag_kind == \"hist\")\n"
          },
          "output": {
            "message": "Applied the change to seaborn/axisgrid.py.",
            "diff": "--- seaborn/axisgrid.py\n+++ seaborn/axisgrid.py\n@@ -2097,10 +2097,13 @@\n     if not isinstance(data, pd.DataFrame):\n         raise TypeError(\n             f\"'data' must be pandas DataFrame object, not: {type(data)}\")\n-\n     plot_kws = {} if plot_kws is None else plot_kws.copy()\n     diag_kws = {} if diag_kws is None else diag_kws.copy()\n     grid_kws = {} if grid_kws is None else grid_kws.copy()\n+\n+    # Flatten columns if DataFrame has MultiIndex columns\n+    if isinstance(data.columns, pd.MultiIndex):\n+        data.columns = [\"\".join(map(str, col)) for col in data.columns]\n \n     # Resolve \"auto\" diag kind\n     if diag_kind == \"auto\":\n",
            "verification_errors": [
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of '_BaseGrid' has no 'axes' member",
                "line": 37
              },
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of '_BaseGrid' has no '_figure' member; maybe 'figure'?",
                "line": 49
              },
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of '_BaseGrid' has no '_figure' member; maybe 'figure'?",
                "line": 54
              },
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
                "line": 118
              },
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of 'Grid' has no '_legend_data' member",
                "line": 151
              },
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of 'Grid' has no 'hue_names' member",
                "line": 153
              },
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of 'Grid' has no 'hue_names' member",
                "line": 156
              },
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of 'Grid' has no '_hue_var' member",
                "line": 160
              },
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
                "line": 181
              },
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
                "line": 190
              },
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
                "line": 193
              },
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
                "line": 194
              },
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
                "line": 195
              },
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
                "line": 198
              },
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
                "line": 201
              },
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
                "line": 208
              },
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of 'Grid' has no 'axes' member",
                "line": 213
              },
              {
                "code": "E1101",
                "file_path": "seaborn/axisgrid.py",
                "message": "Instance of 'Grid' has no '_legend_data' member",
                "line": 239
              },
              {
                "code": "E0606",
                "file_path": "seaborn/axisgrid.py",
                "message": "Possibly using variable 'orient_kw_x' before assignment",
                "line": 1880
              },
              {
                "code": "E0606",
                "file_path": "seaborn/axisgrid.py",
                "message": "Possibly using variable 'orient_kw_y' before assignment",
                "line": 1886
              }
            ]
          },
          "completion_cost": 0.020982,
          "input_tokens": 6074,
          "output_tokens": 184
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "include_message_history": true,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 2000,
        "max_iterations": 8,
        "message": "Applied the change to seaborn/axisgrid.py.",
        "diff": "--- seaborn/axisgrid.py\n+++ seaborn/axisgrid.py\n@@ -2097,10 +2097,13 @@\n     if not isinstance(data, pd.DataFrame):\n         raise TypeError(\n             f\"'data' must be pandas DataFrame object, not: {type(data)}\")\n-\n     plot_kws = {} if plot_kws is None else plot_kws.copy()\n     diag_kws = {} if diag_kws is None else diag_kws.copy()\n     grid_kws = {} if grid_kws is None else grid_kws.copy()\n+\n+    # Flatten columns if DataFrame has MultiIndex columns\n+    if isinstance(data.columns, pd.MultiIndex):\n+        data.columns = [\"\".join(map(str, col)) for col in data.columns]\n \n     # Resolve \"auto\" diag kind\n     if diag_kind == \"auto\":\n",
        "verification_errors": [
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of '_BaseGrid' has no 'axes' member",
            "line": 37
          },
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of '_BaseGrid' has no '_figure' member; maybe 'figure'?",
            "line": 49
          },
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of '_BaseGrid' has no '_figure' member; maybe 'figure'?",
            "line": 54
          },
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
            "line": 118
          },
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of 'Grid' has no '_legend_data' member",
            "line": 151
          },
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of 'Grid' has no 'hue_names' member",
            "line": 153
          },
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of 'Grid' has no 'hue_names' member",
            "line": 156
          },
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of 'Grid' has no '_hue_var' member",
            "line": 160
          },
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
            "line": 181
          },
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
            "line": 190
          },
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
            "line": 193
          },
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
            "line": 194
          },
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
            "line": 195
          },
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
            "line": 198
          },
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
            "line": 201
          },
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of 'Grid' has no '_figure' member; maybe 'figure'?",
            "line": 208
          },
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of 'Grid' has no 'axes' member",
            "line": 213
          },
          {
            "code": "E1101",
            "file_path": "seaborn/axisgrid.py",
            "message": "Instance of 'Grid' has no '_legend_data' member",
            "line": 239
          },
          {
            "code": "E0606",
            "file_path": "seaborn/axisgrid.py",
            "message": "Possibly using variable 'orient_kw_x' before assignment",
            "line": 1880
          },
          {
            "code": "E0606",
            "file_path": "seaborn/axisgrid.py",
            "message": "Possibly using variable 'orient_kw_y' before assignment",
            "line": 1886
          }
        ],
        "max_prompt_file_tokens": 12000,
        "max_tokens_in_edit_prompt": 750,
        "expand_context_with_related_spans": false,
        "allow_hallucinated_spans": false,
        "finish_on_review": true
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The change to flatten the columns of the DataFrame if it has a MultiIndex before creating the PairGrid in the `pairplot` function has been applied successfully. The next step is to finish the task as the issue has been resolved.",
            "action": "finish",
            "finish": "The issue with `pairplot` raising a `KeyError` with a MultiIndex DataFrame has been resolved by flattening the columns of the DataFrame if it has a MultiIndex before creating the PairGrid in the `pairplot` function."
          },
          "output": {
            "message": "The issue with `pairplot` raising a `KeyError` with a MultiIndex DataFrame has been resolved by flattening the columns of the DataFrame if it has a MultiIndex before creating the PairGrid in the `pairplot` function."
          },
          "completion_cost": 0.020382,
          "input_tokens": 6249,
          "output_tokens": 109
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "include_message_history": false,
        "model": "gpt-4o",
        "temperature": 0.0,
        "max_tokens": 1000,
        "message": "The issue with `pairplot` raising a `KeyError` with a MultiIndex DataFrame has been resolved by flattening the columns of the DataFrame if it has a MultiIndex before creating the PairGrid in the `pairplot` function.",
        "output": {
          "max_tokens": 2000,
          "max_prompt_file_tokens": 12000
        }
      },
      "actions": []
    }
  ],
  "info": {
    "evaluation_name": "20240705_sima_fulltest",
    "instance_id": "mwaskom__seaborn-3407",
    "status": "finished",
    "duration": 232.58489894866943,
    "total_cost": 0.827118,
    "submission": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..23bdcab5 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -2098,6 +2098,9 @@ def pairplot(\n         raise TypeError(\n             f\"'data' must be pandas DataFrame object, not: {type(data)}\")\n \n+    if isinstance(data.columns, pd.MultiIndex):\n+        data.columns = [\"\".join(map(str, col)) for col in data.columns]\n+\n     plot_kws = {} if plot_kws is None else plot_kws.copy()\n     diag_kws = {} if diag_kws is None else diag_kws.copy()\n     grid_kws = {} if grid_kws is None else grid_kws.copy()\n"
  }
}