diff --git a/django/db/models/query.py b/django/db/models/query.py
index a5b0f464a9..f55bf469ed 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -305,6 +305,7 @@ class QuerySet(AltersData):
         self._fields = None
         self._defer_next_filter = False
         self._deferred_filter = None
+        self._select_related_only_fields = set()
 
     @property
     def query(self):
@@ -1546,10 +1547,10 @@ class QuerySet(AltersData):
     def select_related(self, *fields):
         """
         Return a new QuerySet instance that will select related objects.
-
+    
         If fields are specified, they must be ForeignKey fields and only those
         related objects are included in the selection.
-
+    
         If select_related(None) is called, clear the list.
         """
         self._not_support_combined_queries("select_related")
@@ -1557,7 +1558,7 @@ class QuerySet(AltersData):
             raise TypeError(
                 "Cannot call select_related() after .values() or .values_list()"
             )
-
+    
         obj = self._chain()
         if fields == (None,):
             obj.query.select_related = False
@@ -1565,6 +1566,14 @@ class QuerySet(AltersData):
             obj.query.add_select_related(fields)
         else:
             obj.query.select_related = True
+            
+        # Integrate only() fields if they exist
+        if obj.query.select_related and self._select_related_only_fields:
+            obj.query.add_deferred_loading(
+                {field.attname for field in self.model._meta.get_fields()}
+                - self._select_related_only_fields,
+                True,
+            )
         return obj
 
     def prefetch_related(self, *lookups):
@@ -1744,6 +1753,10 @@ class QuerySet(AltersData):
                 raise ValueError("only() is not supported with FilteredRelation.")
         clone = self._chain()
         clone.query.add_immediate_loading(fields)
+        clone._select_related_only_fields.update(fields)
+        
+        return clone
+        clone.query.add_immediate_loading(fields)
         return clone
 
     def using(self, alias):
