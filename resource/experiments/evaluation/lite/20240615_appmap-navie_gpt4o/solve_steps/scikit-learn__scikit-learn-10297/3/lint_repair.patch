diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py
index 911c74ae3..bf2b5351b 100644
--- a/sklearn/linear_model/ridge.py
+++ b/sklearn/linear_model/ridge.py
@@ -1127,9 +1127,8 @@ class _BaseRidgeCV(LinearModel):
             if self.store_cv_values:
                 self.cv_values_ = estimator.cv_values_
         else:
-            if self.store_cv_values:
-                raise ValueError("cv!=None and store_cv_values=True "
-                                 " are incompatible")
+            if self.store_cv_values and self.cv is not None:
+                raise ValueError("cv!=None and store_cv_values=True are incompatible")
             parameters = {'alpha': self.alphas}
             gs = GridSearchCV(Ridge(fit_intercept=self.fit_intercept,
                                     normalize=self.normalize),
@@ -1281,6 +1280,12 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):
         a scorer callable object / function with signature
         ``scorer(estimator, X, y)``.
 
+    store_cv_values : boolean, default=False
+        Flag indicating if the cross-validation values corresponding to
+        each alpha should be stored in the `cv_values_` attribute (see
+        below). This flag is only compatible with `cv=None` (i.e. using
+        Generalized Cross-Validation).
+
     cv : int, cross-validation generator or an iterable, optional
         Determines the cross-validation splitting strategy.
         Possible inputs for cv are:
@@ -1333,11 +1338,13 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):
     advantage of the multi-variate response support in Ridge.
     """
     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,
-                 normalize=False, scoring=None, cv=None, class_weight=None):
+                 normalize=False, scoring=None, cv=None, class_weight=None,
+                 store_cv_values=False):
         super(RidgeClassifierCV, self).__init__(
             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,
-            scoring=scoring, cv=cv)
+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)
         self.class_weight = class_weight
+        self.store_cv_values = store_cv_values
 
     def fit(self, X, y, sample_weight=None):
         """Fit the ridge classifier.
