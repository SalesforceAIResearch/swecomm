diff --git a/requests/models.py b/requests/models.py
index fbb3c7e6..6d32c0ff 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -402,11 +402,16 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
 
     def prepare_headers(self, headers):
         """Prepares the given HTTP headers."""
-
+    
+        self.headers = CaseInsensitiveDict()
         if headers:
-            self.headers = CaseInsensitiveDict((to_native_string(name), value) for name, value in headers.items())
-        else:
-            self.headers = CaseInsensitiveDict()
+            for name, value in headers.items():
+                if name is None:
+                    continue
+                if value is None:
+                    self.headers.pop(name, None)
+                else:
+                    self.headers[to_native_string(name)] = value
 
     def prepare_body(self, data, files, json=None):
         """Prepares the given HTTP body data."""
@@ -478,7 +483,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
             l = super_len(body)
             if l:
                 self.headers['Content-Length'] = builtin_str(l)
-        elif (self.method not in ('GET', 'HEAD')) and (self.headers.get('Content-Length') is None):
+        elif (self.method not in ('GET', 'HEAD', None)) and (self.headers.get('Content-Length') is None):
             self.headers['Content-Length'] = '0'
 
     def prepare_auth(self, auth, url=''):
@@ -656,12 +661,24 @@ class Response(object):
         large responses.  The chunk size is the number of bytes it should
         read into memory.  This is not necessarily the length of each item
         returned as decoding can take place.
-
+    
         If decode_unicode is True, content will be decoded using the best
         available encoding based on the response.
         """
-
+        import codecs
+    
         def generate():
+            # Check if decode_unicode is True
+            if decode_unicode:
+                decoder = codecs.getincrementaldecoder(self.encoding or 'utf-8')(errors='replace')
+                for chunk in self.raw.stream(chunk_size, decode_content=True):
+                    rv = decoder.decode(chunk)
+                    if rv:
+                        yield rv
+                rv = decoder.decode(b'', final=True)
+                if rv:
+                    yield rv
+                return
             # Special case for urllib3.
             if hasattr(self.raw, 'stream'):
                 try:
