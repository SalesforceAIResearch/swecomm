diff --git a/sympy/physics/units/prefixes.py b/sympy/physics/units/prefixes.py
index ca6a642156..a0d5bda71d 100644
--- a/sympy/physics/units/prefixes.py
+++ b/sympy/physics/units/prefixes.py
@@ -79,22 +79,33 @@ def __repr__(self):
                 str(self.name), str(self.abbrev), self._exponent, self.base)
 
     def __mul__(self, other):
-        from sympy.physics.units import Quantity
-        if not isinstance(other, (Quantity, Prefix)):
-            return super().__mul__(other)
-
-        fact = self.scale_factor * other.scale_factor
-
-        if fact == 1:
-            return 1
-        elif isinstance(other, Prefix):
-            # simplify prefix
-            for p in PREFIXES:
-                if PREFIXES[p].scale_factor == fact:
-                    return PREFIXES[p]
-            return fact
-
-        return self.scale_factor * other
+            from sympy.physics.units import Quantity
+            if isinstance(other, Prefix):
+                combined_scale_factor = self.scale_factor * other.scale_factor
+                for prefix in PREFIXES.values():
+                    if prefix.scale_factor == combined_scale_factor:
+                        return prefix
+                return Prefix(
+                    name=f"{self.name}{other.name}",
+                    abbrev=f"{self.abbrev}{other.abbrev}",
+                    exponent=sympify(self._exponent + other._exponent),
+                    base=self.base,
+                    latex_repr=self._latex_repr
+                )
+            elif isinstance(other, Quantity):
+                new_name = f"{self.name}{other.name}"
+                new_abbrev = f"{self.abbrev}{other.abbrev}"
+                new_scale_factor = self.scale_factor * other.scale_factor
+    
+                new_quantity = Quantity(
+                    name=new_name,
+                    abbrev=new_abbrev,
+                    scale_factor=new_scale_factor,
+                    is_prefixed=True,
+                )
+                return new_quantity
+            else:
+                return super().__mul__(other)
 
     def __truediv__(self, other):
         if not hasattr(other, "scale_factor"):
