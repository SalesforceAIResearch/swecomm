diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py
index f33bcbdccf..8c209f399f 100644
--- a/django/core/management/commands/inspectdb.py
+++ b/django/core/management/commands/inspectdb.py
@@ -4,6 +4,7 @@ import re
 from django.core.management.base import BaseCommand, CommandError
 from django.db import DEFAULT_DB_ALIAS, connections
 from django.db.models.constants import LOOKUP_SEP
+from collections import defaultdict
 
 
 class Command(BaseCommand):
@@ -59,6 +60,17 @@ class Command(BaseCommand):
         def table2model(table_name):
             return re.sub(r"[^a-zA-Z0-9]", "", table_name.title())
 
+        def generate_unique_related_name(related_name_base, existing_names):
+            counter = 0
+            unique_name = related_name_base
+            while unique_name in existing_names:
+                counter += 1
+                unique_name = f"{related_name_base}_{counter}"
+            existing_names.add(unique_name)
+            return unique_name
+
+        existing_related_names = defaultdict(set)
+        
         with connection.cursor() as cursor:
             yield "# This is an auto-generated Django model module."
             yield "# You'll have to do the following manually to clean this up:"
@@ -182,6 +194,12 @@ class Command(BaseCommand):
                             if ref_db_table == table_name
                             else table2model(ref_db_table)
                         )
+                        
+                        related_name = generate_unique_related_name(
+                            f"{column_name}_related", existing_related_names[rel_to]
+                        )
+                        extra_params["related_name"] = related_name
+
                         if rel_to in known_models:
                             field_type = "%s(%s" % (rel_type, rel_to)
                         else:
