diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py
index d649dd02a9..489632a258 100644
--- a/sympy/simplify/cse_main.py
+++ b/sympy/simplify/cse_main.py
@@ -568,6 +568,7 @@ def tree_cse(exprs, symbols, opt_subs=None, order='canonical', ignore=()):
     """
     from sympy.matrices.expressions import MatrixExpr, MatrixSymbol, MatMul, MatAdd
     from sympy.polys.rootoftools import RootOf
+    from sympy.tensor.indexed import Indexed
 
     if opt_subs is None:
         opt_subs = dict()
@@ -586,6 +587,24 @@ def _find_repeated(expr):
         if isinstance(expr, RootOf):
             return
 
+        # Handle Indexed elements separately
+        if isinstance(expr, Indexed):
+            base = expr.base
+            indices = expr.indices
+            if base in seen_subexp and all(idx in seen_subexp for idx in indices):
+                for ign in ignore:
+                    if ign in expr.free_symbols:
+                        break
+                else:
+                    to_eliminate.add(expr)
+                    return
+            seen_subexp.add(expr)
+            seen_subexp.update(indices)
+            _find_repeated(base)
+            for idx in indices:
+                _find_repeated(idx)
+            return
+
         if isinstance(expr, Basic) and (expr.is_Atom or expr.is_Order):
             if expr.is_Symbol:
                 excluded_symbols.add(expr)
@@ -643,6 +662,21 @@ def _rebuild(expr):
         if expr in opt_subs:
             expr = opt_subs[expr]
 
+        # Ensure we handle Indexed elements of MatrixSymbol appropriately
+        if isinstance(expr, Indexed):
+            base = _rebuild(expr.base)
+            indices = tuple(_rebuild(idx) for idx in expr.indices)
+            new_expr = Indexed(base, *indices)
+            if orig_expr in to_eliminate:
+                try:
+                    sym = next(symbols)
+                except StopIteration:
+                    raise ValueError("Symbols iterator ran out of symbols.")
+                subs[orig_expr] = sym
+                replacements.append((sym, new_expr))
+                return sym
+            return new_expr
+
         # If enabled, parse Muls and Adds arguments by order to ensure
         # replacement order independent from hashes
         if order != 'none':
