diff --git a/sympy/tensor/array/dense_ndim_array.py b/sympy/tensor/array/dense_ndim_array.py
index 6019daf787..6610ba1a4b 100644
--- a/sympy/tensor/array/dense_ndim_array.py
+++ b/sympy/tensor/array/dense_ndim_array.py
@@ -139,6 +139,8 @@ def __new__(cls, iterable, shape=None, **kwargs):
     @classmethod
     def _new(cls, iterable, shape, **kwargs):
         shape, flat_list = cls._handle_ndarray_creation_inputs(iterable, shape, **kwargs)
+        if shape == (0,):
+            flat_list = ()
         shape = Tuple(*map(_sympify, shape))
         cls._check_special_bounds(flat_list, shape)
         flat_list = flatten(flat_list)
diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py
index 6490a655a4..18158c3b89 100644
--- a/sympy/tensor/array/ndim_array.py
+++ b/sympy/tensor/array/ndim_array.py
@@ -193,6 +193,8 @@ def _scan_iterable_shape(cls, iterable):
         def f(pointer):
             if not isinstance(pointer, Iterable):
                 return [pointer], ()
+            if len(pointer) == 0:
+                return [], (0, )
 
             result = []
             elems, shapes = zip(*[f(i) for i in pointer])
@@ -213,6 +215,9 @@ def _handle_ndarray_creation_inputs(cls, iterable=None, shape=None, **kwargs):
             if iterable is None:
                 shape = ()
                 iterable = ()
+            elif isinstance(iterable, Iterable) and len(iterable) == 0:
+                shape = (0,)
+                iterable = ()
             # Construction of a sparse array from a sparse array
             elif isinstance(iterable, SparseNDimArray):
                 return iterable._shape, iterable._sparse_array
