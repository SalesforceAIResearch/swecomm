diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py
index a048ee57f1..ec06467139 100644
--- a/sympy/physics/vector/vector.py
+++ b/sympy/physics/vector/vector.py
@@ -252,9 +252,9 @@ def _pretty(self, printer=None):
         from sympy.physics.vector.printing import VectorPrettyPrinter
         from sympy.printing.pretty.stringpict import prettyForm
         e = self
-
+    
         class Fake(object):
-
+    
             def render(self, *args, **kwargs):
                 ar = e.args  # just to shorten things
                 if len(ar) == 0:
@@ -262,39 +262,21 @@ def render(self, *args, **kwargs):
                 settings = printer._settings if printer else {}
                 vp = printer if printer else VectorPrettyPrinter(settings)
                 pforms = []  # output list, to be concatenated to a string
-                for i, v in enumerate(ar):
-                    for j in 0, 1, 2:
-                        # if the coef of the basis vector is 1, we skip the 1
-                        if ar[i][0][j] == 1:
-                            pform = vp._print(ar[i][1].pretty_vecs[j])
-                        # if the coef of the basis vector is -1, we skip the 1
-                        elif ar[i][0][j] == -1:
-                            pform = vp._print(ar[i][1].pretty_vecs[j])
-                            pform= prettyForm(*pform.left(" - "))
-                            bin = prettyForm.NEG
-                            pform = prettyForm(binding=bin, *pform)
-                        elif ar[i][0][j] != 0:
-                            # If the basis vector coeff is not 1 or -1,
-                            # we might wrap it in parentheses, for readability.
-                            if isinstance(ar[i][0][j], Add):
-                                pform = vp._print(
-                                    ar[i][0][j]).parens()
-                            else:
-                                pform = vp._print(
-                                    ar[i][0][j])
-                            pform = prettyForm(*pform.right(" ",
-                                                ar[i][1].pretty_vecs[j]))
-                        else:
-                            continue
-                        pforms.append(pform)
-
-                pform = prettyForm.__add__(*pforms)
-                kwargs["wrap_line"] = kwargs.get("wrap_line")
-                kwargs["num_columns"] = kwargs.get("num_columns")
-                out_str = pform.render(*args, **kwargs)
-                mlines = [line.rstrip() for line in out_str.split("\n")]
-                return "\n".join(mlines)
-
+                for v, k in self.args:
+                    for j, c in enumerate(v):
+                        if c != 0:
+                            term = vp._print(c) if c != 1 else prettyForm("")
+                            term = prettyForm(*term.right('*' if term else ""))
+                            term = prettyForm(*term.right(k.pretty_vecs[j]))
+                            pforms.append(term)
+                if not pforms:
+                    return "0"
+                pform = pforms[0]
+                for term in pforms[1:]:
+                    pform = prettyForm(*pform.right(f' + {term}'))
+                result = pform.render(*args, **kwargs)
+                return result[:result.rfind('\n')]
+    
         return Fake()
 
     def __ror__(self, other):
