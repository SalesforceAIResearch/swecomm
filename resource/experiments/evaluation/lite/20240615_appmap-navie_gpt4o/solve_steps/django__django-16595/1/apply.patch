diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py
index cd3aab43ad..3f2aaec826 100644
--- a/django/db/migrations/operations/fields.py
+++ b/django/db/migrations/operations/fields.py
@@ -264,6 +264,20 @@ class AlterField(FieldOperation):
                     field=self.field,
                 ),
             ]
+        elif isinstance(operation, AlterField) and self.is_same_field_operation(operation):
+            # Merge the provided operation's field attributes into the current one
+            merged_field = self.field.clone()
+            for attr, value in operation.field.__dict__.items():
+                if value is not None and attr != "name":
+                    setattr(merged_field, attr, value)
+            return [
+                AlterField(
+                    model_name=self.model_name,
+                    name=self.name,
+                    field=merged_field,
+                    preserve_default=self.preserve_default and operation.preserve_default,
+                )
+            ]
         return super().reduce(operation, app_label)
 
 
diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py
index 7e5dea2377..25652c0e55 100644
--- a/django/db/migrations/optimizer.py
+++ b/django/db/migrations/optimizer.py
@@ -48,8 +48,8 @@ class MigrationOptimizer:
                 if isinstance(result, list):
                     in_between = operations[i + 1 : i + j + 1]
                     if right:
-                        new_operations.extend(in_between)
                         new_operations.extend(result)
+                        new_operations.extend(in_between)
                     elif all(op.reduce(other, app_label) is True for op in in_between):
                         # Perform a left reduction if all of the in-between
                         # operations can optimize through other.
