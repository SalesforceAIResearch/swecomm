- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    from sympy.core import S, Pow
    from sympy.core.compatibility import iterable, is_sequence
    from sympy.core.function import (Derivative, AppliedUndef, diff)
    from sympy.core.relational import Equality, Eq
    from sympy.core.symbol import Dummy
    from sympy.core.sympify import sympify

    from sympy.logic.boolalg import BooleanAtom
    from sympy.functions import exp
    from sympy.series import Order
    from sympy.simplify.simplify import simplify, posify, besselsimp
    from sympy.simplify.trigsimp import trigsimp
    from sympy.simplify.sqrtdenest import sqrtdenest
    from sympy.solvers import solve

    from sympy.solvers.deutils import _preprocess, ode_order
  location: sympy/solvers/ode/subscheck.py:1-16
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    class ceiling(RoundFunction):
        """
        Ceiling is a univariate function which returns the smallest integer
        value not less than its argument. This implementation
        generalizes ceiling to complex numbers by taking the ceiling of the
        real and imaginary parts separately.

        Examples
        ========

        >>> from sympy import ceiling, E, I, S, Float, Rational
        >>> ceiling(17)
        17
        >>> ceiling(Rational(23, 10))
        3
        >>> ceiling(2*E)
        6
        >>> ceiling(-Float(0.567))
        0
        >>> ceiling(I/2)
        I
        >>> ceiling(S(5)/2 + 5*I/2)
        3 + 3*I

        See Also
        ========

        sympy.functions.elementary.integers.floor

        References
        ==========

        .. [1] "Concrete mathematics" by Graham, pp. 87
        .. [2] http://mathworld.wolfram.com/CeilingFunction.html

        """
        _dir = 1
  location: sympy/functions/elementary/integers.py:225-261
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    def _eval_is_negative(self):
            return self.args[0].is_negative

        def _eval_is_nonnegative(self):
            return self.args[0].is_nonnegative

        def _eval_rewrite_as_ceiling(self, arg, **kwargs):
            return -ceiling(-arg)

        def _eval_rewrite_as_frac(self, arg, **kwargs):
            return arg - frac(arg)



        def __le__(self, other):
            other = S(other)
            if self.args[0].is_real:
                if other.is_integer:
                    return self.args[0] < other + 1
                if other.is_number and other.is_real:
                    return self.args[0] < ceiling(other)
            if self.args[0] == other and other.is_real:
                return S.true
            if other is S.Infinity and self.is_finite:
                return S.true

            return Le(self, other, evaluate=False)
  location: sympy/functions/elementary/integers.py:150-176
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    ss = simplify(eq)
            if ss != 0:
                eq = ss.expand(force=True)
                if eq != 0:
                    eq = sqrtdenest(eq).simplify()
            else:
                eq = 0
            checkeq.append(eq)
        if len(set(checkeq)) == 1 and list(set(checkeq))[0] == 0:
            return (True, checkeq)
        else:
            return (False, checkeq)
  location: sympy/solvers/ode/subscheck.py:383-394
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    This function returns a tuple.  The first item in the tuple is ``True`` if
        the substitution results in ``0``, and ``False`` otherwise. The second
        item in the tuple is what the substitution results in.  It should always
        be ``0`` if the first item is ``True``. Sometimes this function will
        return ``False`` even when an expression is identically equal to ``0``.
        This happens when :py:meth:`~sympy.simplify.simplify.simplify` does not
        reduce the expression to ``0``.  If an expression returned by this
        function vanishes identically, then ``sol`` really is a solution to
        the ``ode``.

        If this function seems to hang, it is probably because of a hard
        simplification.

        To use this function to test, test the first item of the tuple.

        Examples
        ========
  location: sympy/solvers/ode/subscheck.py:79-95
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    return Le(self, other, evaluate=False)

        def __ge__(self, other):
            other = S(other)
            if self.args[0].is_real:
                if other.is_integer:
                    return self.args[0] >= other
                if other.is_number and other.is_real:
                    return self.args[0] >= ceiling(other)
            if self.args[0] == other and other.is_real:
                return S.false
            if other is S.NegativeInfinity and self.is_finite:
                return S.true

            return Ge(self, other, evaluate=False)

        def __gt__(self, other):
            other = S(other)
            if self.args[0].is_real:
                if other.is_integer:
                    return self.args[0] >= other + 1
                if other.is_number and other.is_real:
                    return self.args[0] >= ceiling(other)
            if self.args[0] == other and other.is_real:
                return S.false
            if other is S.NegativeInfinity and self.is_finite:
                return S.true
  location: sympy/functions/elementary/integers.py:176-202
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    It tries the following method to find zero equivalence for each equation:

        Substitute the solutions for functions, like `x(t)` and `y(t)` into the
        original equations containing those functions.
        This function returns a tuple.  The first item in the tuple is ``True`` if
        the substitution results for each equation is ``0``, and ``False`` otherwise.
        The second item in the tuple is what the substitution results in.  Each element
        of the ``list`` should always be ``0`` corresponding to each equation if the
        first item is ``True``. Note that sometimes this function may return ``False``,
        but with an expression that is identically equal to ``0``, instead of returning
        ``True``.  This is because :py:meth:`~sympy.simplify.simplify.simplify` cannot
        reduce the expression to ``0``.  If an expression returned by each function
        vanishes identically, then ``sols`` really is a solution to ``eqs``.
  location: sympy/solvers/ode/subscheck.py:308-320
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    return Gt(self, other, evaluate=False)

        def __lt__(self, other):
            other = S(other)
            if self.args[0].is_real:
                if other.is_integer:
                    return self.args[0] < other
                if other.is_number and other.is_real:
                    return self.args[0] < ceiling(other)
            if self.args[0] == other and other.is_real:
                return S.false
            if other is S.Infinity and self.is_finite:
                return S.true

            return Lt(self, other, evaluate=False)

    @dispatch(floor, Expr)
  location: sympy/functions/elementary/integers.py:204-220
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    return Ge(self, other, evaluate=False)

        def __le__(self, other):
            other = S(other)
            if self.args[0].is_real:
                if other.is_integer:
                    return self.args[0] <= other
                if other.is_number and other.is_real:
                    return self.args[0] <= floor(other)
            if self.args[0] == other and other.is_real:
                return S.false
            if other is S.Infinity and self.is_finite:
                return S.true

            return Le(self, other, evaluate=False)

    @dispatch(ceiling, Basic)  # type:ignore
  location: sympy/functions/elementary/integers.py:340-356
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    if sol.lhs == func:
                    s = sub_func_doit(ode_diff, func, sol.rhs)
                    s = besselsimp(s)
                else:
                    testnum += 1
                    continue
                ss = simplify(s.rewrite(exp))
                if ss:
                    # with the new numer_denom in power.py, if we do a simple
                    # expansion then testnum == 0 verifies all solutions.
                    s = ss.expand(force=True)
                else:
                    s = 0
                testnum += 1
            elif testnum == 1:
                # Second pass. If we cannot substitute f, try seeing if the nth
                # derivative is equal, this will only work for odes that are exact,
                # by definition.
                s = simplify(
                    trigsimp(diff(sol.lhs, x, order) - diff(sol.rhs, x, order)) -
                    trigsimp(ode.lhs) + trigsimp(ode.rhs))
                # s2 = simplify(
                #     diff(sol.lhs, x, order) - diff(sol.rhs, x, order) - \
  location: sympy/solvers/ode/subscheck.py:183-205
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    if not (npart or spart):
                return ipart

            # Evaluate npart numerically if independent of spart
            if npart and (
                not spart or
                npart.is_real and (spart.is_imaginary or (S.ImaginaryUnit*spart).is_real) or
                    npart.is_imaginary and spart.is_real):
                try:
                    r, i = get_integer_part(
                        npart, cls._dir, {}, return_ints=True)
                    ipart += Integer(r) + Integer(i)*S.ImaginaryUnit
                    npart = S.Zero
                except (PrecisionExhausted, NotImplementedError):
                    pass

            spart += npart
            if not spart:
                return ipart
            elif spart.is_imaginary or (S.ImaginaryUnit*spart).is_real:
                return ipart + cls(im(spart), evaluate=False)*S.ImaginaryUnit
            elif isinstance(spart, (floor, ceiling)):
                return ipart + spart
            else:
                return ipart + cls(spart, evaluate=False)
  location: sympy/functions/elementary/integers.py:53-77
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    if isinstance(ode_or_bool, (bool, BooleanAtom)):
                            if ode_or_bool:
                                lhs = rhs = S.Zero
                        else:
                            lhs = ode_or_bool.lhs
                            rhs = ode_or_bool.rhs
                    # No sense in overworking simplify -- just prove that the
                    # numerator goes to zero
                    num = trigsimp((lhs - rhs).as_numer_denom()[0])
                    # since solutions are obtained using force=True we test
                    # using the same level of assumptions
                    ## replace function with dummy so assumptions will work
                    _func = Dummy('func')
                    num = num.subs(func, _func)
                    ## posify the expression
                    num, reps = posify(num)
                    s = simplify(num).xreplace(reps).xreplace({_func: func})
                    testnum += 1
            else:
                break
  location: sympy/solvers/ode/subscheck.py:262-281
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    References
        ==========

        .. [1] "Concrete mathematics" by Graham, pp. 87
        .. [2] http://mathworld.wolfram.com/CeilingFunction.html

        """
        _dir = 1

        @classmethod
        def _eval_number(cls, arg):
            if arg.is_Number:
                return arg.ceiling()
            elif any(isinstance(i, j)
                    for i in (arg, -arg) for j in (floor, ceiling)):
                return arg
            if arg.is_NumberSymbol:
                return arg.approximation_interval(Integer)[1]

        def _eval_nseries(self, x, n, logx, cdir=0):
            r = self.subs(x, 0)
            args = self.args[0]
            args0 = args.subs(x, 0)
            if args0 == r:
                direction = (args - args0).leadterm(x)[0]
                if direction.is_positive:
                    return r + 1
                else:
                    return r
            else:
                return r

        def _eval_rewrite_as_floor(self, arg, **kwargs):
            return -floor(-arg)
  location: sympy/functions/elementary/integers.py:254-287
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: >-
    from __future__ import print_function, division


    from sympy import Basic, Expr


    from sympy.core import Add, S

    from sympy.core.evalf import get_integer_part, PrecisionExhausted

    from sympy.core.function import Function

    from sympy.core.logic import fuzzy_or

    from sympy.core.numbers import Integer

    from sympy.core.relational import Gt, Lt, Ge, Le, Relational, is_eq

    from sympy.core.symbol import Symbol

    from sympy.core.sympify import _sympify

    from sympy.multipledispatch import dispatch


    ###############################################################################

    ######################### FLOOR and CEILING FUNCTIONS
    #########################

    ###############################################################################
  location: sympy/functions/elementary/integers.py:2-18
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    for sol in sols:
            if len(sol.atoms(AppliedUndef)) != 1:
                raise ValueError("solutions should have one function only")
        if len(funcs) != len({sol.lhs for sol in sols}):
            raise ValueError("number of solutions provided does not match the number of equations")
        dictsol = dict()
        for sol in sols:
            func = list(sol.atoms(AppliedUndef))[0]
            if sol.rhs == func:
                sol = sol.reversed
            solved = sol.lhs == func and not sol.rhs.has(func)
            if not solved:
                rhs = solve(sol, func)
                if not rhs:
                    raise NotImplementedError
            else:
                rhs = sol.rhs
            dictsol[func] = rhs
        checkeq = []
        for eq in eqs:
            for func in funcs:
                eq = sub_func_doit(eq, func, dictsol[func])
            ss = simplify(eq)
            if ss != 0:
                eq = ss.expand(force=True)
                if eq != 0:
                    eq = sqrtdenest(eq).simplify()
            else:
                eq = 0
  location: sympy/solvers/ode/subscheck.py:361-389
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    >>> sympify('2**2 / 3 + 5')
        19/3
        >>> sympify('2**2 / 3 + 5', evaluate=False)
        2**2/3 + 5
        >>> sympify('4/2+7', evaluate=True)
        9
        >>> sympify('4/2+7', evaluate=False)
        4/2 + 7
        >>> sympify(4/2+7, evaluate=False)
        9.00000000000000

        Extending
        ---------

        To extend ``sympify`` to convert custom objects (not derived from ``Basic``),
        just define a ``_sympy_`` method to your class. You can do that even to
        classes that you do not own by subclassing or adding the method at runtime.

        >>> from sympy import Matrix
        >>> class MyList1(object):
        ...     def __iter__(self):
        ...         yield 1
        ...         yield 2
        ...         return
        ...     def __getitem__(self, i): return list(self)[i]
        ...     def _sympy_(self): return Matrix(self)
        >>> sympify(MyList1())
        Matrix([
        [1],
        [2]])
  location: sympy/core/sympify.py:216-245
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    def _eval_is_eq(lhs, rhs): # noqa:F811
       return is_eq(lhs.rewrite(ceiling), rhs) or \
            is_eq(lhs.rewrite(frac),rhs)
  location: sympy/functions/elementary/integers.py:221-223
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    >>> print(sympify(None))
        None
        >>> sympify(None, strict=True)
        Traceback (most recent call last):
        ...
        SympifyError: SympifyError: None

        Evaluation
        ----------

        If the option ``evaluate`` is set to ``False``, then arithmetic and
        operators will be converted into their SymPy equivalents and the
        ``evaluate=False`` option will be added. Nested ``Add`` or ``Mul`` will
        be denested first. This is done via an AST transformation that replaces
        operators with their SymPy equivalents, so if an operand redefines any
        of those operations, the redefined operators will not be used. If
        argument a is not a string, the mathematical expression is evaluated
        before being passed to sympify, so adding evaluate=False will still
        return the evaluated result of expression.
  location: sympy/core/sympify.py:196-214
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    # Make sure the above didn't fail.
                if testnum > 2:
                    continue
                else:
                    # Substitute it into ODE to check for self consistency.
                    lhs, rhs = ode.lhs, ode.rhs
                    for i in range(order, -1, -1):
                        if i == 0 and 0 not in diffsols:
                            # We can only substitute f(x) if the solution was
                            # solved for f(x).
                            break
                        lhs = sub_func_doit(lhs, func.diff(x, i), diffsols[i])
                        rhs = sub_func_doit(rhs, func.diff(x, i), diffsols[i])
                        ode_or_bool = Eq(lhs, rhs)
                        ode_or_bool = simplify(ode_or_bool)
  location: sympy/solvers/ode/subscheck.py:246-260
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    terms = Add.make_args(arg)
            real, imag = S.Zero, S.Zero
            for t in terms:
                # Two checks are needed for complex arguments
                # see issue-7649 for details
                if t.is_imaginary or (S.ImaginaryUnit*t).is_real:
                    i = im(t)
                    if not i.has(S.ImaginaryUnit):
                        imag += i
                    else:
                        real += t
                else:
                    real += t

            real = _eval(real)
            imag = _eval(imag)
            return real + S.ImaginaryUnit*imag

        def _eval_rewrite_as_floor(self, arg, **kwargs):
            return arg - floor(arg)

        def _eval_rewrite_as_ceiling(self, arg, **kwargs):
            return arg + ceiling(-arg)



        def _eval_is_finite(self):
            return True

        def _eval_is_real(self):
            return self.args[0].is_extended_real

        def _eval_is_imaginary(self):
            return self.args[0].is_imaginary
  location: sympy/functions/elementary/integers.py:427-460
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    for superclass in getmro(cls):
            try:
                return converter[superclass](a)
            except KeyError:
                continue

        if cls is type(None):
            if strict:
                raise SympifyError(a)
            else:
                return a

        if evaluate is None:
            evaluate = global_parameters.evaluate

        # Support for basic numpy datatypes
        if _is_numpy_instance(a):
            import numpy as np
            if np.isscalar(a):
                return _convert_numpy_types(a, locals=locals,
                    convert_xor=convert_xor, strict=strict, rational=rational,
                    evaluate=evaluate)

        _sympy_ = getattr(a, "_sympy_", None)
        if _sympy_ is not None:
            try:
                return a._sympy_()
            # XXX: Catches AttributeError: 'SympyConverter' object has no
            # attribute 'tuple'
            # This is probably a bug somewhere but for now we catch it here.
            except AttributeError:
                pass
  location: sympy/core/sympify.py:364-395
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    def _eval_is_eq(lhs, rhs): # noqa:F811
        if (lhs.rewrite(floor) == rhs) or \
            (lhs.rewrite(ceiling) == rhs):
            return True
        # Check if other < 0
        if rhs.is_extended_negative:
            return False
        # Check if other >= 1
        res = lhs._value_one_or_more(rhs)
        if res is not None:
            return False
  location: sympy/functions/elementary/integers.py:529-539
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    transformations = standard_transformations

        if rational:
            transformations += (t_rationalize,)
        if convert_xor:
            transformations += (t_convert_xor,)

        try:
            a = a.replace('\n', '')
            expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)
        except (TokenError, SyntaxError) as exc:
            raise SympifyError('could not parse %r' % a, exc)

        return expr
  location: sympy/core/sympify.py:471-484
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    trigsimp(ode.lhs) + trigsimp(ode.rhs))
                # s2 = simplify(
                #     diff(sol.lhs, x, order) - diff(sol.rhs, x, order) - \
                #     ode.lhs + ode.rhs)
                testnum += 1
            elif testnum == 2:
                # Third pass. Try solving for df/dx and substituting that into the
                # ODE. Thanks to Chris Smith for suggesting this method.  Many of
                # the comments below are his, too.
                # The method:
                # - Take each of 1..n derivatives of the solution.
                # - Solve each nth derivative for d^(n)f/dx^(n)
                #   (the differential of that order)
                # - Back substitute into the ODE in decreasing order
                #   (i.e., n, n-1, ...)
                # - Check the result for zero equivalence
                if sol.lhs == func and not sol.rhs.has(func):
                    diffsols = {0: sol.rhs}
                elif sol.rhs == func and not sol.lhs.has(func):
                    diffsols = {0: sol.lhs}
  location: sympy/solvers/ode/subscheck.py:203-222
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    if not isinstance(a, str):
            if _is_numpy_instance(a):
                import numpy as np
                assert not isinstance(a, np.number)
                if isinstance(a, np.ndarray):
                    # Scalar arrays (those with zero dimensions) have sympify
                    # called on the scalar element.
                    if a.ndim == 0:
                        try:
                            return sympify(a.item(),
                                           locals=locals,
                                           convert_xor=convert_xor,
                                           strict=strict,
                                           rational=rational,
                                           evaluate=evaluate)
                        except SympifyError:
                            pass
            else:
                # float and int can coerce size-one numpy arrays to their lone
                # element.  See issue https://github.com/numpy/numpy/issues/10404.
                for coerce in (float, int):
  location: sympy/core/sympify.py:407-427
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    class floor(RoundFunction):
        """
        Floor is a univariate function which returns the largest integer
        value not greater than its argument. This implementation
        generalizes floor to complex numbers by taking the floor of the
        real and imaginary parts separately.

        Examples
        ========

        >>> from sympy import floor, E, I, S, Float, Rational
        >>> floor(17)
        17
        >>> floor(Rational(23, 10))
        2
        >>> floor(2*E)
        5
        >>> floor(-Float(0.567))
        -1
        >>> floor(-I/2)
        -I
        >>> floor(S(5)/2 + 5*I/2)
        2 + 2*I

        See Also
        ========

        sympy.functions.elementary.integers.ceiling

        References
        ==========

        .. [1] "Concrete mathematics" by Graham, pp. 87
        .. [2] http://mathworld.wolfram.com/FloorFunction.html

        """
        _dir = -1
  location: sympy/functions/elementary/integers.py:89-125
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    def __gt__(self, other):
            if self.is_extended_real:
                other = _sympify(other)
                # Check if other < 0
                res = self._value_one_or_more(other)
                if res is not None:
                    return not(res)
                # Check if other >= 1
                if other.is_extended_negative:
                    return S.true
            return Gt(self, other, evaluate=False)

        def __le__(self, other):
            if self.is_extended_real:
                other = _sympify(other)
                # Check if other < 0
                if other.is_extended_negative:
                    return S.false
                # Check if other >= 1
                res = self._value_one_or_more(other)
                if res is not None:
                    return res
            return Le(self, other, evaluate=False)
  location: sympy/functions/elementary/integers.py:483-505
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    class frac(Function):
        r"""Represents the fractional part of x

        For real numbers it is defined [1]_ as

        .. math::
            x - \left\lfloor{x}\right\rfloor

        Examples
        ========

        >>> from sympy import Symbol, frac, Rational, floor, I
        >>> frac(Rational(4, 3))
        1/3
        >>> frac(-Rational(4, 3))
        2/3

        returns zero for integer arguments

        >>> n = Symbol('n', integer=True)
        >>> frac(n)
        0

        rewrite as floor

        >>> x = Symbol('x')
        >>> frac(x).rewrite(floor)
        x - floor(x)

        for complex arguments

        >>> r = Symbol('r', real=True)
        >>> t = Symbol('t', real=True)
        >>> frac(t + I*r)
        I*frac(r) + frac(t)

        See Also
        ========

        sympy.functions.elementary.integers.floor
        sympy.functions.elementary.integers.ceiling

        References
        ===========

        .. [1] https://en.wikipedia.org/wiki/Fractional_part
        .. [2] http://mathworld.wolfram.com/FractionalPart.html
  location: sympy/functions/elementary/integers.py:360-406
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    If you want *all* single-letter and Greek-letter variables to be symbols
        then you can use the clashing-symbols dictionaries that have been defined
        there as private variables: _clash1 (single-letter variables), _clash2
        (the multi-letter Greek names) or _clash (both single and multi-letter
        names that are defined in abc).

        >>> from sympy.abc import _clash1
        >>> _clash1
        {'C': C, 'E': E, 'I': I, 'N': N, 'O': O, 'Q': Q, 'S': S}
        >>> sympify('I & Q', _clash1)
        I & Q

        Strict
        ------

        If the option ``strict`` is set to ``True``, only the types for which an
        explicit conversion has been defined are converted. In the other
        cases, a SympifyError is raised.

        >>> print(sympify(None))
        None
        >>> sympify(None, strict=True)
        Traceback (most recent call last):
        ...
        SympifyError: SympifyError: None

        Evaluation
        ----------
  location: sympy/core/sympify.py:177-204
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,
            evaluate=None):
        """
        Converts an arbitrary expression to a type that can be used inside SymPy.

        Explanation
        ===========

        It will convert Python ints into instances of sympy.Integer,
        floats into instances of sympy.Float, etc. It is also able to coerce symbolic
        expressions which inherit from Basic. This can be useful in cooperation
        with SAGE.

        .. warning::
            Note that this function uses ``eval``, and thus shouldn't be used on
            unsanitized input.

        If the argument is already a type that SymPy understands, it will do
        nothing but return that value. This can be used at the beginning of a
        function to ensure you are working with the correct type.

        Examples
        ========

        >>> from sympy import sympify

        >>> sympify(2).is_integer
        True
        >>> sympify(2).is_real
        True
  location: sympy/core/sympify.py:92-121
- directory: /home/runner/work/_temp/tmpoce0bxzb/sympy__sympy__1.8-2
  type: code-snippet
  content: |-
    References
        ==========

        .. [1] "Concrete mathematics" by Graham, pp. 87
        .. [2] http://mathworld.wolfram.com/FloorFunction.html

        """
        _dir = -1

        @classmethod
        def _eval_number(cls, arg):
            if arg.is_Number:
                return arg.floor()
            elif any(isinstance(i, j)
                    for i in (arg, -arg) for j in (floor, ceiling)):
                return arg
            if arg.is_NumberSymbol:
                return arg.approximation_interval(Integer)[0]

        def _eval_nseries(self, x, n, logx, cdir=0):
            r = self.subs(x, 0)
            args = self.args[0]
            args0 = args.subs(x, 0)
            if args0 == r:
                direction = (args - args0).leadterm(x)[0]
                if direction.is_positive:
                    return r
                else:
                    return r - 1
            else:
                return r

        def _eval_is_negative(self):
            return self.args[0].is_negative

        def _eval_is_nonnegative(self):
            return self.args[0].is_nonnegative
  location: sympy/functions/elementary/integers.py:118-154
