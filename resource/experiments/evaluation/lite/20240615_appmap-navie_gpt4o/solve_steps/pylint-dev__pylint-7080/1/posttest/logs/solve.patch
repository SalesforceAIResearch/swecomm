diff --git a/pylint/pyreverse/utils.py b/pylint/pyreverse/utils.py
index b1be195e3..0fe1a963e 100644
--- a/pylint/pyreverse/utils.py
+++ b/pylint/pyreverse/utils.py
@@ -11,6 +11,7 @@ import re
 import shutil
 import subprocess
 import sys
+import toml
 from typing import TYPE_CHECKING, Any, Callable, Optional, Tuple, Union
 
 import astroid
@@ -43,12 +44,32 @@ def get_default_options() -> list[str]:
     return options
 
 
-def insert_default_options() -> None:
-    """Insert default options to sys.argv."""
-    options = get_default_options()
-    options.reverse()
-    for arg in options:
-        sys.argv.insert(1, arg)
+def get_ignore_patterns(pyproject_path: str = "pyproject.toml") -> list[str]:
+    """Get ignore patterns from pyproject.toml."""
+    if not os.path.exists(pyproject_path):
+        return []
+
+    with open(pyproject_path, encoding="utf-8") as f:
+        config = toml.load(f)
+
+    return config.get("tool", {}).get("pylint", {}).get("ignore-paths", [])
+
+
+def path_matches_ignore_patterns(path: str, patterns: list[str]) -> bool:
+    """Check if the given path matches any of the ignore patterns."""
+    return any(re.search(pattern, path) for pattern in patterns)
+
+
+def recursive_file_list(directory: str) -> list[str]:
+    """Recursively list files in a directory, respecting ignore patterns."""
+    ignore_patterns = get_ignore_patterns()
+    file_list = []
+    for root, _, files in os.walk(directory):
+        for file in files:
+            file_path = os.path.join(root, file)
+            if not path_matches_ignore_patterns(file_path, ignore_patterns):
+                file_list.append(file_path)
+    return file_list
 
 
 # astroid utilities ###########################################################
@@ -57,20 +78,6 @@ PRIVATE = re.compile(r"^__(_*[^\W_])+_?$")
 PROTECTED = re.compile(r"^_\w*$")
 
 
-def get_visibility(name: str) -> str:
-    """Return the visibility from a name: public, protected, private or special."""
-    if SPECIAL.match(name):
-        visibility = "special"
-    elif PRIVATE.match(name):
-        visibility = "private"
-    elif PROTECTED.match(name):
-        visibility = "protected"
-
-    else:
-        visibility = "public"
-    return visibility
-
-
 def is_interface(node: nodes.ClassDef) -> bool:
     # bw compatibility
     return node.type == "interface"
