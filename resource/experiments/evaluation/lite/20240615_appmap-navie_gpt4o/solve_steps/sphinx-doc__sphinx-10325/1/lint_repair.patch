diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py
index 9d5902d2f..c1a14886c 100644
--- a/sphinx/ext/autodoc/importer.py
+++ b/sphinx/ext/autodoc/importer.py
@@ -229,9 +229,9 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,
     return members
 
 
-def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable
+def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable, ignored_bases: Set[str] = set()
                       ) -> Dict[str, "ObjectMember"]:
-    """Get members and attributes of target class."""
+    """Get members and attributes of target class, excluding specific base classes."""
     from sphinx.ext.autodoc import INSTANCEATTR, ObjectMember
 
     # the members directly defined in the class
@@ -251,11 +251,16 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable
                 value = safe_getattr(subject, name)
                 members[name] = ObjectMember(name, value, class_=subject)
 
-    # members in __slots__
-    try:
-        __slots__ = getslots(subject)
-        if __slots__:
-            from sphinx.ext.autodoc import SLOTSATTR
+    # Skip members from ignored base classes
+    for base in subject.__bases__:
+        if base.__module__ in ignored_bases:
+            continue
+
+        # members in __slots__
+        try:
+            __slots__ = getslots(subject)
+            if __slots__:
+                from sphinx.ext.autodoc import SLOTSATTR
 
             for name, docstring in __slots__.items():
                 members[name] = ObjectMember(name, SLOTSATTR, class_=subject,
diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py
index 1866b6c52..13d1876a7 100644
--- a/sphinx/ext/autosummary/generate.py
+++ b/sphinx/ext/autosummary/generate.py
@@ -272,7 +272,7 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,
         return {}
 
     def get_members(obj: Any, types: Set[str], include_public: List[str] = [],
-                    imported: bool = True) -> Tuple[List[str], List[str]]:
+                    imported: bool = True, ignored_bases: Set[str] = set()) -> Tuple[List[str], List[str]]:
         items: List[str] = []
         public: List[str] = []
 
@@ -282,6 +282,10 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,
             if documenter.objtype in types:
                 # skip imported members if expected
                 if imported or getattr(value, '__module__', None) == obj.__name__:
+                    # Skip members from ignored base classes
+                    if value.__module__ in ignored_bases:
+                        continue
+
                     skipped = skip_member(value, name, documenter.objtype)
                     if skipped is True:
                         pass
