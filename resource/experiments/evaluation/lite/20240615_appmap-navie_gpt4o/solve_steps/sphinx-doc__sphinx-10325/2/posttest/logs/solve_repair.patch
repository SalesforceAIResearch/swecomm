diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 62631f7ff..28973e701 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -110,11 +110,13 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:
 
 
 def inherited_members_option(arg: Any) -> Union[object, Set[str]]:
-    """Used to convert the :members: option to auto directives."""
+    """Used to convert the :inherited-members: option for auto directives."""
     if arg in (None, True):
-        return 'object'
+        return ALL
+    elif arg is False:
+        return EMPTY
     else:
-        return arg
+        return set(x.strip() for x in arg.split(',') if x.strip())
 
 
 def member_order_option(arg: Any) -> Optional[str]:
@@ -357,28 +359,158 @@ class Documenter:
         # the module analyzer to get at attribute docs, or None
         self.analyzer: ModuleAnalyzer = None
 
-    @property
-    def documenters(self) -> Dict[str, Type["Documenter"]]:
-        """Returns registered Documenter classes"""
-        return self.env.app.registry.documenters
-
-    def add_line(self, line: str, source: str, *lineno: int) -> None:
-        """Append one line of generated reST to the output."""
-        if line.strip():  # not a blank line
-            self.directive.result.append(self.indent + line, source, *lineno)
-        else:
-            self.directive.result.append('', source, *lineno)
+    def filter_members(self, members: ObjectMembers, want_all: bool
+                       ) -> List[Tuple[str, Any, bool]]:
+        """Filter the given member list.
 
-    def resolve_name(self, modname: str, parents: Any, path: str, base: Any
-                     ) -> Tuple[str, List[str]]:
-        """Resolve the module and name of the object to document given by the
-        arguments and the current module/class.
+        Members are skipped if
+
+        - they are private (except if given explicitly or the private-members
+          option is set)
+        - they are special methods (except if given explicitly or the
+          special-members option is set)
+        - they are undocumented (except if the undoc-members option is set)
 
-        Must return a pair of the module name and a chain of attributes; for
-        example, it would return ``('zipfile', ['ZipFile', 'open'])`` for the
-        ``zipfile.ZipFile.open`` method.
+        The user can override the skipping decision by connecting to the
+        ``autodoc-skip-member`` event.
         """
-        raise NotImplementedError('must be implemented in subclasses')
+        def is_filtered_inherited_member(name: str, obj: Any) -> bool:
+            if inspect.isclass(self.object):
+                for cls in self.object.__mro__:
+                    if cls.__name__ in self.options.inherited_members and cls != self.object:
+                        # given member is a member of specified *super class*
+                        return True
+                    elif name in cls.__dict__:
+                        return False
+                    elif name in self.get_attr(cls, '__annotations__', {}):
+                        return False
+                    elif isinstance(obj, ObjectMember) and obj.class_ is cls:
+                        return False
+
+            return False
+
+        ret = []
+
+        # search for members in source code too
+        namespace = '.'.join(self.objpath)  # will be empty for modules
+
+        if self.analyzer:
+            attr_docs = self.analyzer.find_attr_docs()
+        else:
+            attr_docs = {}
+
+        # process members and determine which to skip
+        for obj in members:
+            try:
+                membername, member = obj
+                # if isattr is True, the member is documented as an attribute
+                if member is INSTANCEATTR:
+                    isattr = True
+                elif (namespace, membername) in attr_docs:
+                    isattr = True
+                else:
+                    isattr = False
+
+                doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,
+                             self.object, membername)
+                if not isinstance(doc, str):
+                    # Ignore non-string __doc__
+                    doc = None
+
+                # if the member __doc__ is the same as self's __doc__, it's just
+                # inherited and therefore not the member's doc
+                cls = self.get_attr(member, '__class__', None)
+                if cls:
+                    cls_doc = self.get_attr(cls, '__doc__', None)
+                    if cls_doc == doc:
+                        doc = None
+
+                if isinstance(obj, ObjectMember) and obj.docstring:
+                    # hack for ClassDocumenter to inject docstring via ObjectMember
+                    doc = obj.docstring
+
+                doc, metadata = separate_metadata(doc)
+                has_doc = bool(doc)
+
+                if 'private' in metadata:
+                    # consider a member private if docstring has "private" metadata
+                    isprivate = True
+                elif 'public' in metadata:
+                    # consider a member public if docstring has "public" metadata
+                    isprivate = False
+                else:
+                    isprivate = membername.startswith('_')
+
+                keep = False
+                if ismock(member) and (namespace, membername) not in attr_docs:
+                    # mocked module or object
+                    pass
+                elif (self.options.exclude_members and
+                      membername in self.options.exclude_members):
+                    # remove members given by exclude-members
+                    keep = False
+                elif want_all and special_member_re.match(membername):
+                    # special __methods__
+                    if (self.options.special_members and
+                            membername in self.options.special_members):
+                        if membername == '__doc__':
+                            keep = False
+                        elif is_filtered_inherited_member(membername, obj):
+                            keep = False
+                        else:
+                            keep = has_doc or self.options.undoc_members
+                    else:
+                        keep = False
+                elif (namespace, membername) in attr_docs:
+                    if want_all and isprivate:
+                        if self.options.private_members is None:
+                            keep = False
+                        else:
+                            keep = membername in self.options.private_members
+                    else:
+                        # keep documented attributes
+                        keep = True
+                elif want_all and isprivate:
+                    if has_doc or self.options.undoc_members:
+                        if self.options.private_members is None:
+                            keep = False
+                        elif is_filtered_inherited_member(membername, obj):
+                            keep = False
+                        else:
+                            keep = membername in self.options.private_members
+                    else:
+                        keep = False
+                else:
+                    if (self.options.members is ALL and
+                            is_filtered_inherited_member(membername, obj)):
+                        keep = False
+                    else:
+                        # ignore undocumented members if :undoc-members: is not given
+                        keep = has_doc or self.options.undoc_members
+
+                if isinstance(obj, ObjectMember) and obj.skipped:
+                    # forcedly skipped member (ex. a module attribute not defined in __all__)
+                    keep = False
+
+                # give the user a chance to decide whether this member
+                # should be skipped
+                if self.env.app:
+                    # let extensions preprocess docstrings
+                    skip_user = self.env.app.emit_firstresult(
+                        'autodoc-skip-member', self.objtype, membername, member,
+                        not keep, self.options)
+                    if skip_user is not None:
+                        keep = not skip_user
+            except Exception as exc:
+                logger.warning(__('autodoc: failed to determine %s.%s (%r) to be documented, '
+                                  'the following exception was raised:\n%s'),
+                               self.name, membername, member, exc, type='autodoc')
+                keep = False
+
+            if keep:
+                ret.append((membername, member, isattr))
+
+        return ret
 
     def parse_name(self) -> bool:
         """Determine what module to import and what attribute to document.
@@ -1053,6 +1185,9 @@ class ModuleDocumenter(Documenter):
         if self.options.deprecated:
             self.add_line('   :deprecated:', sourcename)
 
+    def add_line(self, line, source, line_number=None):
+        self.directive.result.append(self.indent + line, source, line_number)
+
     def get_module_members(self) -> Dict[str, ObjectMember]:
         """Get members of target module."""
         if self.analyzer:
@@ -2201,6 +2336,9 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:
             self.add_line('   :classmethod:', sourcename)
         if inspect.isstaticmethod(obj, cls=self.parent, name=self.object_name):
             self.add_line('   :staticmethod:', sourcename)
+
+    def add_line(self, line, source, line_number=None):
+        self.directive.result.append(self.indent + line, source, line_number)
         if self.analyzer and '.'.join(self.objpath) in self.analyzer.finals:
             self.add_line('   :final:', sourcename)
 
