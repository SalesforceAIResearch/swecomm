diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py
index 9d5902d2f..c79586954 100644
--- a/sphinx/ext/autodoc/importer.py
+++ b/sphinx/ext/autodoc/importer.py
@@ -12,6 +12,8 @@ from sphinx.util import logging
 from sphinx.util.inspect import (getannotations, getmro, getslots, isclass, isenumclass,
                                  safe_getattr)
 
+from sphinx.util.option_parsers import parse_list
+
 if False:
     # For type annotation
     from typing import Type  # NOQA
@@ -229,11 +231,13 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,
     return members
 
 
-def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable
+def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable, ignored_bases: List[str] = None
                       ) -> Dict[str, "ObjectMember"]:
-    """Get members and attributes of target class."""
+    """Get members and attributes of target class, with support for ignoring specific base classes."""
     from sphinx.ext.autodoc import INSTANCEATTR, ObjectMember
 
+    ignored_bases = ignored_bases or []
+
     # the members directly defined in the class
     obj_dict = attrgetter(subject, '__dict__', {})
 
diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py
index 1866b6c52..e975c80e9 100644
--- a/sphinx/ext/autosummary/generate.py
+++ b/sphinx/ext/autosummary/generate.py
@@ -25,6 +25,8 @@ from gettext import NullTranslations
 from os import path
 from typing import Any, Dict, List, NamedTuple, Sequence, Set, Tuple, Type, Union
 
+from sphinx.util.option_parsers import parse_list
+
 from jinja2 import TemplateNotFound
 from jinja2.sandbox import SandboxedEnvironment
 
diff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py
index c8a3dc763..479382262 100644
--- a/sphinx/ext/inheritance_diagram.py
+++ b/sphinx/ext/inheritance_diagram.py
@@ -154,11 +154,11 @@ class InheritanceGraph:
         return classes
 
     def _class_info(self, classes: List[Any], show_builtins: bool, private_bases: bool,
-                    parts: int, aliases: Dict[str, str], top_classes: List[Any]
+                    parts: int, aliases: Dict[str, str], top_classes: List[Any], ignored_bases: List[str] = None
                     ) -> List[Tuple[str, str, List[str], str]]:
         """Return name and bases for all classes that are ancestors of
         *classes*.
-
+    
         *parts* gives the number of dotted name parts to include in the
         displayed node names, from right to left. If given as a negative, the
         number of parts to drop from the left. A value of 0 displays the full
@@ -167,21 +167,27 @@ class InheritanceGraph:
         ``inheritance_diagram.InheritanceGraph``, and as
         ``ext.inheritance_diagram.InheritanceGraph`` with ``parts=3`` or
         ``parts=-1``.
-
+    
         *top_classes* gives the name(s) of the top most ancestor class to
         traverse to. Multiple names can be specified separated by comma.
+    
+        *ignored_bases* is a list of base class names to be ignored during
+        member inspection and graph generation.
         """
+        ignored_bases = ignored_bases or []
         all_classes = {}
-
+    
         def recurse(cls: Any) -> None:
             if not show_builtins and cls in py_builtins:
                 return
             if not private_bases and cls.__name__.startswith('_'):
                 return
-
+            if cls.__name__ in ignored_bases:
+                return
+    
             nodename = self.class_name(cls, parts, aliases)
             fullname = self.class_name(cls, 0, aliases)
-
+    
             # Use first line of docstring as tooltip, if available
             tooltip = None
             try:
@@ -191,25 +197,27 @@ class InheritanceGraph:
                         tooltip = '"%s"' % doc.replace('"', '\\"')
             except Exception:  # might raise AttributeError for strange classes
                 pass
-
+    
             baselist: List[str] = []
             all_classes[cls] = (nodename, fullname, baselist, tooltip)
-
+    
             if fullname in top_classes:
                 return
-
+    
             for base in cls.__bases__:
                 if not show_builtins and base in py_builtins:
                     continue
                 if not private_bases and base.__name__.startswith('_'):
                     continue
+                if base.__name__ in ignored_bases:
+                    continue
                 baselist.append(self.class_name(base, parts, aliases))
                 if base not in all_classes:
                     recurse(base)
-
+    
         for cls in classes:
             recurse(cls)
-
+    
         return list(all_classes.values())
 
     def class_name(self, cls: Any, parts: int = 0, aliases: Dict[str, str] = None) -> str:
