diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py
index 0e84403307..64ea292c43 100644
--- a/sympy/polys/monomials.py
+++ b/sympy/polys/monomials.py
@@ -10,6 +10,7 @@
 from sympy.polys.polyutils import PicklableWithSlots, dict_from_expr
 from sympy.utilities import public
 from sympy.core.compatibility import is_sequence
+from sympy.polys.monomialtools import degree_list
 
 @public
 def itermonomials(variables, max_degrees, min_degrees=None):
@@ -145,11 +146,18 @@ def itermonomials(variables, max_degrees, min_degrees=None):
     else:
         if any(min_degrees[i] > max_degrees[i] for i in range(n)):
             raise ValueError('min_degrees[i] must be <= max_degrees[i] for all i')
-        power_lists = []
-        for var, min_d, max_d in zip(variables, min_degrees, max_degrees):
-            power_lists.append([var**i for i in range(min_d, max_d + 1)])
-        for powers in product(*power_lists):
-            yield Mul(*powers)
+        
+        variable_powers = [
+            [var**exp for exp in range(min_d, max_d + 1)]
+            for var, min_d, max_d in zip(variables, min_degrees, max_degrees)
+        ]
+        
+        for exponents in product(*variable_powers):
+            monomial = Mul(*exponents)
+            from sympy.polys.monomialtools import degree_list # Importing the missing module
+            degrees = [degree_list(monom, variables)[i] for i, monom in enumerate(exponents)]
+            if all(min_d <= degree <= max_d for degree, min_d, max_d in zip(degrees, min_degrees, max_degrees)):
+                yield monomial
 
 def monomial_count(V, N):
     r"""
