diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py
index 0e84403307..5cbb670f80 100644
--- a/sympy/polys/monomials.py
+++ b/sympy/polys/monomials.py
@@ -113,7 +113,10 @@ def itermonomials(variables, max_degrees, min_degrees=None):
     if total_degree:
         if min_degree > max_degree:
             return
-        if not variables or max_degree == 0:
+        if not variables:
+            yield S.One
+            return
+        if max_degree == 0:
             yield S.One
             return
         # Force to list in case of passed tuple or other incompatible collection
@@ -127,7 +130,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 for variable in item:
                     if variable != 1:
                         powers[variable] += 1
-                if max(powers.values()) >= min_degree:
+                if min_degree <= sum(powers.values()) <= max_degree:
                     monomials_list_comm.append(Mul(*item))
             yield from set(monomials_list_comm)
         else:
@@ -139,7 +142,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 for variable in item:
                     if variable != 1:
                         powers[variable] += 1
-                if max(powers.values()) >= min_degree:
+                if min_degree <= sum(powers.values()) <= max_degree:
                     monomials_list_non_comm.append(Mul(*item))
             yield from set(monomials_list_non_comm)
     else:
@@ -149,7 +152,8 @@ def itermonomials(variables, max_degrees, min_degrees=None):
         for var, min_d, max_d in zip(variables, min_degrees, max_degrees):
             power_lists.append([var**i for i in range(min_d, max_d + 1)])
         for powers in product(*power_lists):
-            yield Mul(*powers)
+            if all(min_d <= exp <= max_d for exp, min_d, max_d in zip(powers, min_degrees, max_degrees)):
+                yield Mul(*powers)
 
 def monomial_count(V, N):
     r"""
