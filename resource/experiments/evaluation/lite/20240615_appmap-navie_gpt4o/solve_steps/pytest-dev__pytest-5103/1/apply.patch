diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py
index 2903b8995..0c44db721 100644
--- a/src/_pytest/assertion/rewrite.py
+++ b/src/_pytest/assertion/rewrite.py
@@ -983,13 +983,35 @@ warn_explicit(
                 arg_expls.append(keyword.arg + "=" + expl)
             else:  # **args have `arg` keywords with an .arg of None
                 arg_expls.append("**" + expl)
-
-        expl = "%s(%s)" % (func_expl, ", ".join(arg_expls))
-        new_call = ast.Call(new_func, new_args, new_kwargs)
-        res = self.assign(new_call)
-        res_expl = self.explanation_param(self.display(res))
-        outer_expl = "%s\n{%s = %s\n}" % (res_expl, res_expl, expl)
-        return res, outer_expl
+                
+        # Handle `all` and `any` specifically
+        if isinstance(call.func, ast.Name) and call.func.id in {"all", "any"}:
+            self.statements.append(ast.Expr(ast.Str(s="Beginning enhanced {} assertion".format(call.func.id))))
+            bool_op, _bool_op_expl = self.assert_enhanced_boolop(call.func.id, new_args[0])
+            new_call = self.assign(bool_op)
+        else:
+            expl = "%s(%s)" % (func_expl, ", ".join(arg_expls))
+            new_call = ast.Call(new_func, new_args, new_kwargs)
+            res = self.assign(new_call)
+            res_expl = self.explanation_param(self.display(res))
+            outer_expl = "%s\n{%s = %s\n}" % (res_expl, res_expl, expl)
+            return res, outer_expl
+    
+    def assert_enhanced_boolop(self, func_name, iterable):
+        """Handles enhanced assertions for `all` and `any` built-in functions."""
+        temp_var = self.variable()
+        bool_op = None
+        
+        if func_name == "all":
+            bool_op = ast.BoolOp(op=ast.And(), values=[
+                elem for elem in iterable.elts
+            ])
+        elif func_name == "any":
+            bool_op = ast.BoolOp(op=ast.Or(), values=[
+                elem for elem in iterable.elts
+            ])
+
+        return bool_op, self.explanation_param(self.display(bool_op))
 
     def visit_Starred(self, starred):
         # From Python 3.5, a Starred node can appear in a function call
