diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py
index 2d3072da04..74668e9776 100644
--- a/lib/matplotlib/colors.py
+++ b/lib/matplotlib/colors.py
@@ -955,20 +955,20 @@ class LinearSegmentedColormap(Colormap):
     """
 
     def __init__(self, name, segmentdata, N=256, gamma=1.0):
-        """
-        Create colormap from linear mapping segments
-
-        segmentdata argument is a dictionary with a red, green and blue
-        entries. Each entry should be a list of *x*, *y0*, *y1* tuples,
-        forming rows in a table. Entries for alpha are optional.
-
-        Example: suppose you want red to increase from 0 to 1 over
-        the bottom half, green to do the same over the middle half,
-        and blue over the top half.  Then you would use::
-
-            cdict = {'red':   [(0.0,  0.0, 0.0),
-                               (0.5,  1.0, 1.0),
-                               (1.0,  1.0, 1.0)],
+            """
+            Create colormap from linear mapping segments
+    
+            segmentdata argument is a dictionary with a red, green and blue
+            entries. Each entry should be a list of *x*, *y0*, *y1* tuples,
+            forming rows in a table. Entries for alpha are optional.
+    
+            Example: suppose you want red to increase from 0 to 1 over
+            the bottom half, green to do the same over the middle half,
+            and blue over the top half.  Then you would use::
+    
+                cdict = {'red':   [(0.0,  0.0, 0.0),
+                                   (0.5,  1.0, 1.0),
+                                   (1.0,  1.0, 1.0)],
 
                      'green': [(0.0,  0.0, 0.0),
                                (0.25, 0.0, 0.0),
@@ -1004,26 +1004,26 @@ class LinearSegmentedColormap(Colormap):
         self._segmentdata = segmentdata
         self._gamma = gamma
 
-    def _init(self):
+        def _init(self):
         self._lut = np.ones((self.N + 3, 4), float)
-        self._lut[:-3, 0] = _create_lookup_table(
-            self.N, self._segmentdata['red'], self._gamma)
-        self._lut[:-3, 1] = _create_lookup_table(
-            self.N, self._segmentdata['green'], self._gamma)
-        self._lut[:-3, 2] = _create_lookup_table(
-            self.N, self._segmentdata['blue'], self._gamma)
+        self._lut[:-3, 0] = np.clip(_create_lookup_table(
+            self.N, self._segmentdata['red'], self._gamma), 0, 1).astype(np.float32)
+        self._lut[:-3, 1] = np.clip(_create_lookup_table(
+            self.N, self._segmentdata['green'], self._gamma), 0, 1).astype(np.float32)
+        self._lut[:-3, 2] = np.clip(_create_lookup_table(
+            self.N, self._segmentdata['blue'], self._gamma), 0, 1).astype(np.float32)
         if 'alpha' in self._segmentdata:
-            self._lut[:-3, 3] = _create_lookup_table(
-                self.N, self._segmentdata['alpha'], 1)
+            self._lut[:-3, 3] = np.clip(_create_lookup_table(
+                self.N, self._segmentdata['alpha'], 1), 0, 1).astype(np.float32)
         self._isinit = True
         self._set_extremes()
 
-    def set_gamma(self, gamma):
+        def set_gamma(self, gamma):
         """Set a new gamma value and regenerate colormap."""
         self._gamma = gamma
         self._init()
 
-    @staticmethod
+        @staticmethod
     def from_list(name, colors, N=256, gamma=1.0):
         """
         Create a `LinearSegmentedColormap` from a list of colors.
