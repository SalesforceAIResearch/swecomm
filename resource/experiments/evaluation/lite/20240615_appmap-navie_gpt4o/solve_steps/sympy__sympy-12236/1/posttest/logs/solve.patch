diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py
index 612b8f4607..05b23ddd8d 100644
--- a/sympy/polys/partfrac.py
+++ b/sympy/polys/partfrac.py
@@ -118,12 +118,11 @@ def apart(f, x=None, full=False, **options):
             return f.xreplace(dict(reps))
 
     if P.is_multivariate:
-        fc = f.cancel()
-        if fc != f:
-            return apart(fc, x=x, full=full, **_options)
-
-        raise NotImplementedError(
-            "multivariate partial fraction decomposition")
+        # Decompose with respect to all variables iteratively.
+        decomposed = f
+        for var in P.gens:
+            decomposed = apart(decomposed, x=var, full=full, **_options)
+        return decomposed
 
     common, P, Q = P.cancel(Q)
 
@@ -159,11 +158,19 @@ def apart_undetermined_coeffs(P, Q):
     for f, k in factors:
         n, q = f.degree(), Q
 
+        # Include checks for other symbols in multivariate P
+        other_symbols = [s for s in P.free_symbols if s != Q.gen]
         for i in range(1, k + 1):
             coeffs, q = take(X, n), q.quo(f)
             partial.append((coeffs, q, f, i))
             symbols.extend(coeffs)
 
+            # Avoid premature simplification when other symbols exist
+            if other_symbols:
+                coeffs = [c.as_independent(*other_symbols, as_Add=False)[1] for c in coeffs]
+                partial[-1] = (coeffs, q, f, i)
+                symbols.extend(coeffs)
+
     dom = Q.get_domain().inject(*symbols)
     F = Poly(0, Q.gen, domain=dom)
 
@@ -393,6 +400,10 @@ def apart_list_full_decomposition(P, Q, dummygen):
 
         for j in range(0, n):
             P, Q = cancel(H[j]).as_numer_denom()
+            
+            # Ensure proper handling when multiple variables participate
+            if Q.free_symbols.difference({x}):
+                raise PolynomialError("Non-univariate denom in partial fraction")
 
             for i in range(0, j + 1):
                 P = P.subs(*subs[j - i])
