diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py
index 5a50cded0..adcf2a005 100644
--- a/src/_pytest/mark/structures.py
+++ b/src/_pytest/mark/structures.py
@@ -65,6 +65,13 @@ def get_empty_parameterset_mark(
         )
     else:
         raise LookupError(requested_mark)
+
+    # Integrate dynamically added xfail markers correctly
+    if hasattr(config, "_store_additional_markers"):
+        additional_markers = config._store_additional_markers.get('xfail')
+        if additional_markers:
+            mark = MARK_GEN.xfail(reason=additional_markers, run=False)
+
     return mark
 
 
@@ -480,7 +487,7 @@ class MarkGenerator:
     def __getattr__(self, name: str) -> MarkDecorator:
         if name[0] == "_":
             raise AttributeError("Marker name must NOT start with underscore")
-
+    
         if self._config is not None:
             # We store a set of markers as a performance optimisation - if a mark
             # name is in the set we definitely know it, but a mark may be known and
@@ -492,29 +499,35 @@ class MarkGenerator:
                     # marker name we split on both `:` and `(`.
                     marker = line.split(":")[0].split("(")[0].strip()
                     self._markers.add(marker)
-
-            # If the name is not in the set of known marks after updating,
-            # then it really is time to issue a warning or an error.
-            if name not in self._markers:
-                if self._config.option.strict_markers:
-                    fail(
-                        "{!r} not found in `markers` configuration option".format(name),
-                        pytrace=False,
+    
+                # If the name is not in the set of known marks after updating,
+                # then it really is time to issue a warning or an error.
+                if name not in self._markers:
+                    if self._config.option.strict_markers:
+                        fail(
+                            "{!r} not found in `markers` configuration option".format(name),
+                            pytrace=False,
+                        )
+    
+                    # Raise a specific error for common misspellings of "parametrize".
+                    if name in ["parameterize", "parametrise", "parameterise"]:
+                        __tracebackhide__ = True
+                        fail("Unknown '{}' mark, did you mean 'parametrize'?".format(name))
+    
+                    warnings.warn(
+                        "Unknown pytest.mark.%s - is this a typo?  You can register "
+                        "custom marks to avoid this warning - for details, see "
+                        "https://docs.pytest.org/en/stable/mark.html" % name,
+                        PytestUnknownMarkWarning,
+                        2,
                     )
-
-                # Raise a specific error for common misspellings of "parametrize".
-                if name in ["parameterize", "parametrise", "parameterise"]:
-                    __tracebackhide__ = True
-                    fail("Unknown '{}' mark, did you mean 'parametrize'?".format(name))
-
-                warnings.warn(
-                    "Unknown pytest.mark.%s - is this a typo?  You can register "
-                    "custom marks to avoid this warning - for details, see "
-                    "https://docs.pytest.org/en/stable/mark.html" % name,
-                    PytestUnknownMarkWarning,
-                    2,
-                )
-
+    
+            # Integrate dynamically added markers correctly
+            if hasattr(self._config, "_store_additional_markers"):
+                dynamic_markers = self._config._store_additional_markers.get(name)
+                if dynamic_markers:
+                    return MarkDecorator(Mark(name, dynamic_markers, {}))
+    
         return MarkDecorator(Mark(name, (), {}))
 
 
