diff --git a/django/contrib/staticfiles/handlers.py b/django/contrib/staticfiles/handlers.py
index 711d8864ad..d7e8500de1 100644
--- a/django/contrib/staticfiles/handlers.py
+++ b/django/contrib/staticfiles/handlers.py
@@ -9,7 +9,6 @@ from django.core.handlers.exception import response_for_exception
 from django.core.handlers.wsgi import WSGIHandler, get_path_info
 from django.http import Http404
 
-
 class StaticFilesHandlerMixin:
     """
     Common methods used by WSGI and ASGI handlers.
@@ -23,6 +22,15 @@ class StaticFilesHandlerMixin:
         # them for self.
         pass
 
+    async def get_response_async(self, request):
+        """Get the asynchronous response."""
+        try:
+            from asgiref.sync import sync_to_async
+            return await sync_to_async(self.serve, thread_sensitive=True)(request)
+        except Http404 as e:
+            from asgiref.sync import sync_to_async
+            return await sync_to_async(response_for_exception, thread_sensitive=True)(request, e)
+
     def get_base_url(self):
         utils.check_settings()
         return settings.STATIC_URL
@@ -82,7 +90,12 @@ class ASGIStaticFilesHandler(StaticFilesHandlerMixin, ASGIHandler):
         # Only even look at HTTP requests
         if scope['type'] == 'http' and self._should_handle(scope['path']):
             # Serve static content
-            # (the one thing super() doesn't do is __call__, apparently)
-            return await super().__call__(scope, receive, send)
+            request, error_response = self.create_request(scope, await self.read_body(receive))
+            if request is None:
+                await self.send_response(error_response, send)
+                return
+            response = await self.get_response_async(request)
+            await self.send_response(response, send)
+            return
         # Hand off to the main app
         return await self.application(scope, receive, send)
