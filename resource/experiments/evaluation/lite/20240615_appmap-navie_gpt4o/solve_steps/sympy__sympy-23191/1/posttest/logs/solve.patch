diff --git a/sympy/physics/vector/printing.py b/sympy/physics/vector/printing.py
index 59efcd90e3..f8a66dbac6 100644
--- a/sympy/physics/vector/printing.py
+++ b/sympy/physics/vector/printing.py
@@ -32,6 +32,9 @@ def _print_Function(self, e):
         t = dynamicsymbols._t
         if isinstance(type(e), UndefinedFunction):
             return StrPrinter().doprint(e).replace("(%s)" % t, '')
+        # Properly format unit vectors in vector expressions
+        if hasattr(e, 'args') and len(e.args) == 0 and hasattr(e, '_base_scalars'):
+            return " + ".join([str(scalar) + unitvector._name for scalar, unitvector in zip(e._base_scalars, e._base_vectors)])
         return e.func.__name__ + "(%s)" % self.stringify(e.args, ", ")
 
 
@@ -104,7 +107,7 @@ def _print_Derivative(self, der_expr):
 
 
 class VectorPrettyPrinter(PrettyPrinter):
-    """Pretty Printer for vectorialexpressions. """
+    """Pretty Printer for vectorial expressions. """
 
     def _print_Derivative(self, deriv):
         from sympy.physics.vector.functions import dynamicsymbols
@@ -126,6 +129,40 @@ def _print_Derivative(self, deriv):
         else:
             pform = self._print_Function(deriv.expr)
 
+        # Format for vector expressions with unit vectors
+        if hasattr(deriv.expr, '_base_scalars'):
+            scalar_exprs = [self._print(scalar) for scalar in deriv.expr._base_scalars]
+            unit_vector_exprs = [self._print(unitvector) for unitvector in deriv.expr._base_vectors]
+            return " + ".join([scalar_expr + unit_vector_expr for scalar_expr, unit_vector_expr in zip(scalar_exprs, unit_vector_exprs)])
+
+        # the following condition would happen with some sort of non-standard
+        # dynamic symbol I guess, so we'll just print the SymPy way
+        if len(pform.picture) > 1:
+            return super()._print_Derivative(deriv)
+
+        # There are only special symbols up to fourth-order derivatives
+        if dot_i >= 5:
+            return super()._print_Derivative(deriv)
+
+        # Deal with special symbols
+        dots = {0: "",
+                1: "\N{COMBINING DOT ABOVE}",
+                2: "\N{COMBINING DIAERESIS}",
+                3: "\N{COMBINING THREE DOTS ABOVE}",
+                4: "\N{COMBINING FOUR DOTS ABOVE}"}
+
+        d = pform.__dict__
+        # if unicode is false then calculate number of apostrophes needed and
+        # add to output
+        if not self._use_unicode:
+            apostrophes = ""
+            for i in range(0, dot_i):
+                apostrophes += "'"
+            d['picture'][0] += apostrophes + "(t)"
+        else:
+            d['picture'] = [center_accent(d['picture'][0], dots[dot_i])]
+        return pform
+
         # the following condition would happen with some sort of non-standard
         # dynamic symbol I guess, so we'll just print the SymPy way
         if len(pform.picture) > 1:
@@ -364,6 +401,9 @@ def init_vprinting(**kwargs):
     kwargs['str_printer'] = vsstrrepr
     kwargs['pretty_printer'] = vpprint
     kwargs['latex_printer'] = vlatex
+    kwargs['str_printer'].unit_vector_config = True
+    kwargs['pretty_printer'].unit_vector_config = True
+    kwargs['latex_printer'].unit_vector_config = True
     init_printing(**kwargs)
 
 
