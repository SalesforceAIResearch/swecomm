diff --git a/requests/models.py b/requests/models.py
index 0dc55568..5342912c 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -640,6 +640,9 @@ class Response(object):
                     raise ChunkedEncodingError(e)
                 except DecodeError as e:
                     raise ContentDecodingError(e)
+                except ConnectionError as e:
+                    # Handle the new ConnectionError triggered by socket.error
+                    raise ConnectionError(f"Connection error occurred: {e}") from e
             except AttributeError:
                 # Standard file-like object.
                 while True:
diff --git a/requests/packages/urllib3/response.py b/requests/packages/urllib3/response.py
index 7e0d47fa..c4bf12e3 100644
--- a/requests/packages/urllib3/response.py
+++ b/requests/packages/urllib3/response.py
@@ -209,6 +209,9 @@ class HTTPResponse(io.IOBase):
             except HTTPException as e:
                 # This includes IncompleteRead.
                 raise ProtocolError('Connection broken: %r' % e, e)
+            except socket.error as e:
+                # Catch and re-raise socket.error as requests.exceptions.ConnectionError
+                raise requests.exceptions.ConnectionError(f"Socket error: {e}") from e
 
             self._fp_bytes_read += len(data)
 
@@ -250,7 +253,11 @@ class HTTPResponse(io.IOBase):
             'content-encoding' header.
         """
         while not is_fp_closed(self._fp):
-            data = self.read(amt=amt, decode_content=decode_content)
+            try:
+                data = self.read(amt=amt, decode_content=decode_content)
+            except socket.error as e:
+                # Catch and re-raise socket.error as requests.exceptions.ConnectionError
+                raise requests.exceptions.ConnectionError(f"Socket error: {e}") from e
 
             if data:
                 yield data
