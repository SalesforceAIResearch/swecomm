<context>
<code-snippet location="pylint/testutils/_primer/primer.py:18-27">
class Primer:
    """Main class to handle priming of packages."""

    def __init__(self, primer_directory: Path, json_path: Path) -> None:
        # Preparing arguments
        self.primer_directory = primer_directory
        self._argument_parser = argparse.ArgumentParser(prog="Pylint Primer")
        self._subparsers = self._argument_parser.add_subparsers(
            dest="command", required=True
        )
</code-snippet>
<code-snippet location="pylint/utils/pragma_parser.py:67-80">
class PragmaParserError(Exception):
    """A class for exceptions thrown by pragma_parser module."""

    def __init__(self, message: str, token: str) -> None:
        """:args message: explain the reason why the exception has been thrown
        :args token: token concerned by the exception.
        """
        self.message = message
        self.token = token
        super().__init__(self.message)


class UnRecognizedOptionError(PragmaParserError):
    """Thrown in case the of a valid but unrecognized option."""
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer.py:77-100">
# Storing arguments
        self.config = self._argument_parser.parse_args()

        self.packages = self._get_packages_to_lint_from_json(json_path)
        """All packages to prime."""

        if self.config.command == "prepare":
            command_class: type[PrimerCommand] = PrepareCommand
        elif self.config.command == "run":
            command_class = RunCommand
        elif self.config.command == "compare":
            command_class = CompareCommand
        self.command = command_class(self.primer_directory, self.packages, self.config)

    def run(self) -> None:
        self.command.run()

    @staticmethod
    def _get_packages_to_lint_from_json(json_path: Path) -> dict[str, PackageToLint]:
        with open(json_path, encoding="utf8") as f:
            return {
                name: PackageToLint(**package_data)
                for name, package_data in json.load(f).items()
            }
</code-snippet>
<code-snippet location="elisp/pylint.el:25-53">
;;; Commentary:
;;
;; Specialized compile mode for pylint.  You may want to add the
;; following to your init.el:
;;
;;   (autoload 'pylint "pylint")
;;   (add-hook 'python-mode-hook 'pylint-add-menu-items)
;;   (add-hook 'python-mode-hook 'pylint-add-key-bindings)
;;
;; There is also a handy command `pylint-insert-ignore-comment' that
;; makes it easy to insert comments of the form `# pylint:
;; ignore=msg1,msg2,...'.

;;; Code:

(require 'compile)
(require 'tramp)

(defgroup pylint nil
  "Minor mode for running the Pylint Python checker"
  :prefix "pylint-"
  :group 'tools
  :group 'languages)

(defvar pylint-last-buffer nil
  "The most recent PYLINT buffer.
A PYLINT buffer becomes most recent when you select PYLINT mode in it.
Notice that using \\[next-error] or \\[compile-goto-error] modifies
`completion-last-buffer' rather than `pylint-last-buffer'.")
</code-snippet>
<code-snippet location="pylint/utils/pragma_parser.py:87-95">
def parse_pragma(pylint_pragma: str) -> Generator[PragmaRepresenter, None, None]:
    action: str | None = None
    messages: list[str] = []
    assignment_required = False
    previous_token = ""

    for mo in re.finditer(TOK_REGEX, pylint_pragma):
        kind = mo.lastgroup
        value = mo.group()
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer.py:1-15">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt

from __future__ import annotations

import argparse
import json
from pathlib import Path

from pylint.testutils._primer import PackageToLint
from pylint.testutils._primer.primer_command import PrimerCommand
from pylint.testutils._primer.primer_compare_command import CompareCommand
from pylint.testutils._primer.primer_prepare_command import PrepareCommand
from pylint.testutils._primer.primer_run_command import RunCommand
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer.py:53-78">
# All arguments for the run parser
        run_parser = self._subparsers.add_parser("run")
        run_parser.add_argument(
            "--type", choices=["main", "pr"], required=True, help="Type of primer run."
        )

        # All arguments for the compare parser
        compare_parser = self._subparsers.add_parser("compare")
        compare_parser.add_argument(
            "--base-file",
            required=True,
            help="Location of output file of the base run.",
        )
        compare_parser.add_argument(
            "--new-file",
            required=True,
            help="Location of output file of the new run.",
        )
        compare_parser.add_argument(
            "--commit",
            required=True,
            help="Commit hash of the PR commit being checked.",
        )

        # Storing arguments
        self.config = self._argument_parser.parse_args()
</code-snippet>
<code-snippet location="elisp/pylint.el:237-255">
;;;###autoload
(defun pylint-add-menu-items ()
  (let ((map (cond
              ((boundp 'py-mode-map) py-mode-map)
              ((boundp 'python-mode-map) python-mode-map))))

    (define-key map [menu-bar Python pylint-separator]
      '("--" . pylint-separator))
    (define-key map [menu-bar Python next-error]
      '("Next error" . next-error))
    (define-key map [menu-bar Python prev-error]
      '("Previous error" . previous-error))
    (define-key map [menu-bar Python lint]
      '("Pylint" . pylint))
    nil))

(provide 'pylint)

;;; pylint.el ends here
</code-snippet>
<code-snippet location="pylint/utils/pragma_parser.py:83-84">
class InvalidPragmaError(PragmaParserError):
    """Thrown in case the pragma is invalid."""
</code-snippet>
<code-snippet location="elisp/pylint.el:163-185">
(define-compilation-mode pylint-mode "PYLINT"
  (setq pylint-last-buffer (current-buffer))
  (set (make-local-variable 'compilation-error-regexp-alist)
       pylint-regexp-alist)
  (set (make-local-variable 'compilation-disable-input) t))

(defvar pylint-mode-map
  (let ((map (make-sparse-keymap)))
    (set-keymap-parent map compilation-minor-mode-map)
    (define-key map " " 'scroll-up)
    (define-key map "\^?" 'scroll-down)
    (define-key map "\C-c\C-f" 'next-error-follow-minor-mode)

    (define-key map "\r" 'compile-goto-error)  ;; ?
    (define-key map "n" 'next-error-no-select)
    (define-key map "p" 'previous-error-no-select)
    (define-key map "{" 'compilation-previous-file)
    (define-key map "}" 'compilation-next-file)
    (define-key map "\t" 'compilation-next-error)
    (define-key map [backtab] 'compilation-previous-error)
    map)
  "Keymap for PYLINT buffers.
`compilation-minor-mode-map' is a cdr of this.")
</code-snippet>
<code-snippet location="pylint/utils/pragma_parser.py:97-117">
if kind == "ASSIGN":
            if not assignment_required:
                if action:
                    # A keyword has been found previously but doesn't support assignment
                    raise UnRecognizedOptionError(
                        "The keyword doesn't support assignment", action
                    )
                if previous_token:
                    # Something found previously but not a known keyword
                    raise UnRecognizedOptionError(
                        "The keyword is unknown", previous_token
                    )
                # Nothing at all detected before this assignment
                raise InvalidPragmaError("Missing keyword before assignment", "")
            assignment_required = False
        elif assignment_required:
            raise InvalidPragmaError(
                "The = sign is missing after the keyword", action or ""
            )
        elif kind == "KEYWORD":
            if action:
</code-snippet>
<code-snippet location="elisp/pylint.el:187-201">
(defun pylint--make-indent-string ()
  "Make a string for the `--indent-string' option."
  (format "--indent-string='%s'"
          (make-string python-indent-offset ?\ )))

;;;###autoload
(defun pylint (&optional arg)
  "Run PYLINT, and collect output in a buffer, much like `compile'.

While pylint runs asynchronously, you can use \\[next-error] (M-x next-error),
or \\<pylint-mode-map>\\[compile-goto-error] in the grep \
output buffer, to go to the lines where pylint found matches.

\\{pylint-mode-map}"
  (interactive "P")
</code-snippet>
<code-snippet location="pylint/utils/pragma_parser.py:113-126">
raise InvalidPragmaError(
                "The = sign is missing after the keyword", action or ""
            )
        elif kind == "KEYWORD":
            if action:
                yield emit_pragma_representer(action, messages)
            action = value
            messages = []
            assignment_required = action in MESSAGE_KEYWORDS
        elif kind in {"MESSAGE_STRING", "MESSAGE_NUMBER"}:
            messages.append(value)
            assignment_required = False
        else:
            raise RuntimeError("Token not recognized")
</code-snippet>
<code-snippet location="pylint/utils/pragma_parser.py:128-133">
previous_token = value

    if action:
        yield emit_pragma_representer(action, messages)
    else:
        raise UnRecognizedOptionError("The keyword is unknown", previous_token)
</code-snippet>
<code-snippet location="elisp/pylint.el:222-241">
(compilation-start command 'pylint-mode)))

;;;###autoload
(defun pylint-add-key-bindings ()
  (let ((map (cond
              ((boundp 'py-mode-map) py-mode-map)
              ((boundp 'python-mode-map) python-mode-map))))

    ;; shortcuts in the tradition of python-mode and ropemacs
    (define-key map (kbd "C-c m l") 'pylint)
    (define-key map (kbd "C-c m p") 'previous-error)
    (define-key map (kbd "C-c m n") 'next-error)
    (define-key map (kbd "C-c m i") 'pylint-insert-ignore-comment)
    nil))

;;;###autoload
(defun pylint-add-menu-items ()
  (let ((map (cond
              ((boundp 'py-mode-map) py-mode-map)
              ((boundp 'python-mode-map) python-mode-map))))
</code-snippet>
<code-snippet location="pylint/utils/pragma_parser.py:59-64">
def emit_pragma_representer(action: str, messages: list[str]) -> PragmaRepresenter:
    if not messages and action in MESSAGE_KEYWORDS:
        raise InvalidPragmaError(
            "The keyword is not followed by message identifier", action
        )
    return PragmaRepresenter(action, messages)
</code-snippet>
<code-snippet location="elisp/pylint.el:55-86">
(defconst pylint-regexp-alist
  (let ((base "^\\(.*\\):\\([0-9]+\\):\s+\\(\\[%s.*\\)$"))
    (list
     (list (format base "[FE]") 1 2)
     (list (format base "[RWC]") 1 2 nil 1)))
  "Regexp used to match PYLINT hits.  See `compilation-error-regexp-alist'.")

(defcustom pylint-options '("--reports=n" "--output-format=parseable")
  "Options to pass to pylint.py"
  :type '(repeat string)
  :group 'pylint)

(defcustom pylint-use-python-indent-offset nil
  "If non-nil, use `python-indent-offset' to set indent-string."
  :type 'boolean
  :group 'pylint)

(defcustom pylint-command "pylint"
  "PYLINT command."
  :type '(file)
  :group 'pylint)

(defcustom pylint-alternate-pylint-command "pylint2"
  "Command for pylint when invoked with C-u."
  :type '(file)
  :group 'pylint)

(defcustom pylint-ask-about-save nil
  "Non-nil means \\[pylint] asks which buffers to save before compiling.
Otherwise, it saves all modified buffers without asking."
  :type 'boolean
  :group 'pylint)
</code-snippet>
<code-snippet location="elisp/pylint.el:200-220">
\\{pylint-mode-map}"
  (interactive "P")

  (save-some-buffers (not pylint-ask-about-save) nil)
  (let* ((filename (buffer-file-name))
         (localname-offset (cl-struct-slot-offset 'tramp-file-name 'localname))
         (filename (or (and (tramp-tramp-file-p filename)
                         (elt (tramp-dissect-file-name filename) localname-offset))
                      filename))
         (filename (shell-quote-argument filename))
         (pylint-command (if arg
                             pylint-alternate-pylint-command
                           pylint-command))
         (pylint-options (if (not pylint-use-python-indent-offset)
                             pylint-options
                           (append pylint-options
                                   (list (pylint--make-indent-string)))))
         (command (mapconcat
                   'identity
                   (append `(,pylint-command) pylint-options `(,filename))
                   " ")))
</code-snippet>
<code-snippet location="pylint/testutils/__init__.py:24-35">
from pylint.testutils.checker_test_case import CheckerTestCase
from pylint.testutils.constants import UPDATE_FILE, UPDATE_OPTION
from pylint.testutils.decorator import set_config
from pylint.testutils.functional import FunctionalTestFile
from pylint.testutils.get_test_info import _get_tests_info
from pylint.testutils.global_test_linter import linter
from pylint.testutils.lint_module_test import LintModuleTest
from pylint.testutils.output_line import MessageTest
from pylint.testutils.reporter_for_tests import GenericTestReporter, MinimalTestReporter
from pylint.testutils.tokenize_str import _tokenize_str
from pylint.testutils.unittest_linter import UnittestLinter
from pylint.testutils.utils import create_files
</code-snippet>
<code-snippet location="elisp/pylint.el:139-161">
With prefix argument, only insert a comma-separated list (for
appending to an existing list)."
  (interactive "*P")
  (unless pylint--messages-list
    (pylint--create-messages-list))
  (setq pylint--messages-list
        (sort pylint--messages-list #'pylint--sort-messages))
  (let ((msgs ())
        (msg "")
        (prefix (if arg
                    ","
                  "# pylint: disable="))
        (sentinel "[DONE]"))
    (while (progn
             (setq msg (completing-read
                        "Message: "
                        pylint--messages-list
                        nil t nil 'pylint--messages-list-hist sentinel))
             (unless (string= sentinel msg)
               (add-to-list 'msgs msg 'append))))
    (setq pylint--messages-list-hist
          (delete sentinel pylint--messages-list-hist))
    (insert prefix (mapconcat 'identity msgs ","))))
</code-snippet>
<code-snippet location="pylint/config/_pylint_config/__init__.py:1-11">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt

"""Everything related to the 'pylint-config' command.

Everything in this module is private.
"""

from pylint.config._pylint_config.main import _handle_pylint_config_commands  # noqa
from pylint.config._pylint_config.setup import _register_generate_config_options  # noqa
</code-snippet>
<code-snippet location="elisp/pylint.el:88-107">
(defvar pylint--messages-list ()
  "A list of strings of all pylint messages.")

(defvar pylint--messages-list-hist ()
  "Completion history for `pylint--messages-list'.")

(defun pylint--sort-messages (a b)
  "Compare function for sorting `pylint--messages-list'.

Sorts most recently used elements first using `pylint--messages-list-hist'."
  (let ((idx 0)
        (a-idx most-positive-fixnum)
        (b-idx most-positive-fixnum))
    (dolist (e pylint--messages-list-hist)
      (when (string= e a)
        (setq a-idx idx))
      (when (string= e b)
        (setq b-idx idx))
      (setq idx (1+ idx)))
    (< a-idx b-idx)))
</code-snippet>
<code-snippet location="pylint/message/__init__.py:1-17">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt

"""All the classes related to Message handling."""

from pylint.message.message import Message
from pylint.message.message_definition import MessageDefinition
from pylint.message.message_definition_store import MessageDefinitionStore
from pylint.message.message_id_store import MessageIdStore

__all__ = [
    "Message",
    "MessageDefinition",
    "MessageDefinitionStore",
    "MessageIdStore",
]
</code-snippet>
<code-snippet location="pylint/utils/__init__.py:1-30">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt

"""Some various utilities and helper classes, most of them used in the
main pylint class.
"""

from pylint.utils.ast_walker import ASTWalker
from pylint.utils.docs import print_full_documentation
from pylint.utils.file_state import FileState
from pylint.utils.linterstats import LinterStats, ModuleStats, merge_stats
from pylint.utils.utils import (
    HAS_ISORT_5,
    IsortDriver,
    _check_csv,
    _format_option_value,
    _splitstrip,
    _unquote,
    decoding_stream,
    diff_string,
    format_section,
    get_global_option,
    get_module_and_frameid,
    get_rst_section,
    get_rst_title,
    normalize_text,
    register_plugins,
    tokenize_module,
)
</code-snippet>
<code-snippet location="pylint/extensions/__init__.py:1-20">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt

from __future__ import annotations

from typing import TYPE_CHECKING

from pylint.utils import register_plugins

if TYPE_CHECKING:
    from pylint.lint import PyLinter


def initialize(linter: PyLinter) -> None:
    """Initialize linter with checkers in the extensions' directory."""
    register_plugins(linter, __path__[0])


__all__ = ["initialize"]
</code-snippet>
<code-snippet location="elisp/pylint.el:109-128">
(defun pylint--create-messages-list ()
  "Use `pylint-command' to populate `pylint--messages-list'."
  ;; example output:
  ;;  |--we want this--|
  ;;  v                v
  ;; :using-cmp-argument (W1640): *Using the cmp argument for list.sort / sorted*
  ;;   Using the cmp argument for list.sort or the sorted builtin should be avoided,
  ;;   since it was removed in Python 3. Using either `key` or `functools.cmp_to_key`
  ;;   should be preferred. This message can't be emitted when using Python >= 3.0.
  (setq pylint--messages-list
        (split-string
         (with-temp-buffer
           (shell-command (concat pylint-command " --list-msgs") (current-buffer))
           (flush-lines "^[^:]")
           (goto-char (point-min))
           (while (not (eobp))
             (delete-char 1) ;; delete ";"
             (re-search-forward " ")
             (delete-region (point) (line-end-position))
             (forward-line 1))
</code-snippet>
<code-snippet location="elisp/pylint.el:131-137">
;;;###autoload
(defun pylint-insert-ignore-comment (&optional arg)
  "Insert a comment like \"# pylint: disable=msg1,msg2,...\".

This command repeatedly uses `completing-read' to match known
messages, and ultimately inserts a comma-separated list of all
the selected messages.
</code-snippet>
<code-snippet location="pylint/pyreverse/__init__.py:1-7">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt

"""Pyreverse.extensions."""

__revision__ = "$Id $"
</code-snippet>
<code-snippet location="pylint/testutils/__init__.py:1-22">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt

"""Functional/non regression tests for pylint."""

__all__ = [
    "_get_tests_info",
    "_tokenize_str",
    "CheckerTestCase",
    "FunctionalTestFile",
    "linter",
    "LintModuleTest",
    "MessageTest",
    "MinimalTestReporter",
    "set_config",
    "GenericTestReporter",
    "UPDATE_FILE",
    "UPDATE_OPTION",
    "UnittestLinter",
    "create_files",
]
</code-snippet>
<code-snippet location="pylint/utils/pragma_parser.py:1-9">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt

from __future__ import annotations

import re
from collections import namedtuple
from collections.abc import Generator
</code-snippet>
<code-snippet location="pylint/utils/pragma_parser.py:11-27">
# Allow stopping after the first semicolon/hash encountered,
# so that an option can be continued with the reasons
# why it is active or disabled.
OPTION_RGX = r"""
    (?:^\s*\#.*|\s*|               # Comment line, or whitespaces,
       \s*\#.*(?=\#.*?\bpylint:))  # or a beginning of an inline comment
                                   # followed by "pylint:" pragma
    (\#                            # Beginning of comment
    .*?                            # Anything (as little as possible)
    \bpylint:                      # pylint word and column
    \s*                            # Any number of whitespaces
    ([^;#\n]+))                    # Anything except semicolon or hash or
                                   # newline (it is the second matched group)
                                   # and end of the first matched group
    [;#]{0,1}                      # From 0 to 1 repetition of semicolon or hash
"""
OPTION_PO = re.compile(OPTION_RGX, re.VERBOSE)
</code-snippet>
<code-snippet location="elisp/pylint.el:1-23">
;;; pylint.el --- minor mode for running `pylint'

;; Copyright (c) 2009, 2010 Ian Eure <ian.eure@gmail.com>
;; Author: Ian Eure <ian.eure@gmail.com>
;; Maintainer: Jonathan Kotta <jpkotta@gmail.com>

;; Keywords: languages python
;; Version: 1.02

;; pylint.el is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by the Free
;; Software Foundation; either version 2, or (at your option) any later
;; version.
;;
;; It is distributed in the hope that it will be useful, but WITHOUT ANY
;; WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
;; FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
;; details.
;;
;; You should have received a copy of the GNU General Public License along
;; with your copy of Emacs; see the file COPYING.  If not, write to the Free
;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
;; MA 02110-1301, USA
</code-snippet>
</context>