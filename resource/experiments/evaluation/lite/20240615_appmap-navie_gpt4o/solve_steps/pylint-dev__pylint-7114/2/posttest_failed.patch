diff --git a/pylint/lint/__init__.py b/pylint/lint/__init__.py
index 86186ebd4..63824134e 100644
--- a/pylint/lint/__init__.py
+++ b/pylint/lint/__init__.py
@@ -15,6 +15,8 @@
   Display help messages about given message identifiers and exit.
 """
 import sys
+import os
+import importlib.util
 
 from pylint.config.exceptions import ArgumentPreprocessingError
 from pylint.lint.caching import load_results, save_results
@@ -28,6 +30,26 @@ from pylint.lint.report_functions import (
 from pylint.lint.run import Run
 from pylint.lint.utils import _patch_sys_path, fix_import_path
 
+def is_python_module(path):
+    """Check if the path is a Python file or directory that can be a module."""
+    if os.path.isdir(path):
+        # Directory must have __init__.py or at least one .py file to be considered a package/module
+        return any(f.endswith('.py') for f in os.listdir(path))
+    elif path.endswith('.py'):
+        return True
+    return False
+
+def resolve_module(path):
+    """Resolve the module name from the given path."""
+    if os.path.isfile(path):
+        if path.endswith('.py'):
+            return os.path.splitext(os.path.basename(path))[0]
+    elif os.path.isdir(path):
+        if any(f.endswith('.py') for f in os.listdir(path)):
+            return os.path.basename(path)
+    raise ImportError(f"Cannot resolve module from path: {path}")
+
+
 __all__ = [
     "check_parallel",
     "PyLinter",
@@ -43,4 +65,14 @@ __all__ = [
 ]
 
 if __name__ == "__main__":
-    Run(sys.argv[1:])
+    for module_path in sys.argv[1:]:
+        if is_python_module(module_path):
+            try:
+                module_name = resolve_module(module_path)
+                # This may not match the exact internal loading mechanism used by pylint.
+                # Adjust Run or importing mechanism for actual module loading needed.
+                Run([module_name])
+            except ImportError as err:
+                print(f"Error resolving module: {err}", file=sys.stderr)
+        else:
+            print(f"Path {module_path} is not a valid Python module", file=sys.stderr)
