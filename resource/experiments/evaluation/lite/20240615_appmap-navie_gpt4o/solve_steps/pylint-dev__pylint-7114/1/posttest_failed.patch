diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py
index 042d3845e..31847830d 100644
--- a/pylint/pyreverse/inspector.py
+++ b/pylint/pyreverse/inspector.py
@@ -280,10 +280,11 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):
             # analyze dependencies
             fullname = f"{basename}.{name[0]}"
             if fullname.find(".") > -1:
-                try:
-                    fullname = astroid.modutils.get_module_part(fullname, context_file)
-                except ImportError:
-                    continue
+                if context_file:
+                    try:
+                        fullname = astroid.modutils.get_module_part(fullname, context_file)
+                    except ImportError:
+                        continue
             if fullname != basename:
                 self._imported_module(node, fullname, relative)
 
@@ -327,23 +328,34 @@ def project_from_files(
         if not os.path.exists(something):
             fpath = astroid.modutils.file_from_modpath(something.split("."))
         elif os.path.isdir(something):
-            fpath = os.path.join(something, "__init__.py")
+            fpath = something  # Consider the directory directly if __init__.py is missing
         else:
             fpath = something
-        ast = func_wrapper(astroid_manager.ast_from_file, fpath)
-        if ast is None:
-            continue
-        project.path = project.path or ast.file
-        project.add_module(ast)
-        base_name = ast.name
-        # recurse in package except if __init__ was explicitly given
-        if ast.package and something.find("__init__") == -1:
-            # recurse on others packages / modules if this is a package
-            for fpath in astroid.modutils.get_module_files(
-                os.path.dirname(ast.file), black_list
-            ):
-                ast = func_wrapper(astroid_manager.ast_from_file, fpath)
-                if ast is None or ast.name == base_name:
-                    continue
-                project.add_module(ast)
+        if os.path.isdir(fpath) and not os.path.isfile(os.path.join(fpath, "__init__.py")):
+            # Handle the case where a directory does not have __init__.py, still consider as package
+            for dirpath, _, filenames in os.walk(fpath):
+                for filename in filenames:
+                    file_path = os.path.join(dirpath, filename)
+                    ast = func_wrapper(astroid_manager.ast_from_file, file_path)
+                    if ast is None:
+                        continue
+                    project.path = project.path or ast.file
+                    project.add_module(ast)
+        else:
+            ast = func_wrapper(astroid_manager.ast_from_file, fpath)
+            if ast is None:
+                continue
+            project.path = project.path or ast.file
+            project.add_module(ast)
+            base_name = ast.name
+            # recurse in package except if __init__ was explicitly given
+            if ast.package and something.find("__init__") == -1:
+                # recurse on others packages / modules if this is a package
+                for fpath in astroid.modutils.get_module_files(
+                    os.path.dirname(ast.file), black_list
+                ):
+                    ast = func_wrapper(astroid_manager.ast_from_file, fpath)
+                    if ast is None or ast.name == base_name:
+                        continue
+                    project.add_module(ast)
     return project
