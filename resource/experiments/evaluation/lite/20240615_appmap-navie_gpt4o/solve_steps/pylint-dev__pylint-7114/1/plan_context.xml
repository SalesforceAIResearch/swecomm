<context>
<code-snippet location="pylint/testutils/_primer/primer.py:18-27">
class Primer:
    """Main class to handle priming of packages."""

    def __init__(self, primer_directory: Path, json_path: Path) -> None:
        # Preparing arguments
        self.primer_directory = primer_directory
        self._argument_parser = argparse.ArgumentParser(prog="Pylint Primer")
        self._subparsers = self._argument_parser.add_subparsers(
            dest="command", required=True
        )
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer_run_command.py:74-93">
def _lint_package(
        self, package_name: str, data: PackageToLint
    ) -> tuple[list[OldJsonExport], list[Message], list[Message]]:
        # We want to test all the code we can
        enables = ["--enable-all-extensions", "--enable=all"]
        # Duplicate code takes too long and is relatively safe
        # TODO: Find a way to allow cyclic-import and compare output correctly
        disables = ["--disable=duplicate-code,cyclic-import"]
        arguments = data.pylint_args + enables + disables
        output = StringIO()
        reporter = JSONReporter(output)
        print(f"Running 'pylint {', '.join(arguments)}'")
        pylint_exit_code = -1
        try:
            Run(arguments, reporter=reporter)
        except SystemExit as e:
            pylint_exit_code = int(e.code)
        readable_messages: str = output.getvalue()
        messages: list[OldJsonExport] = json.loads(readable_messages)
        astroid_errors: list[Message] = []
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer_run_command.py:1-20">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt

from __future__ import annotations

import json
import sys
import warnings
from io import StringIO

from pylint.lint import Run
from pylint.message import Message
from pylint.reporters import JSONReporter
from pylint.reporters.json_reporter import OldJsonExport
from pylint.testutils._primer.package_to_lint import PackageToLint
from pylint.testutils._primer.primer_command import PrimerCommand

GITHUB_CRASH_TEMPLATE_LOCATION = "/home/runner/.cache"
CRASH_TEMPLATE_INTRO = "There is a pre-filled template"
</code-snippet>
<code-snippet location="pylint/pyreverse/inspector.py:126-149">
* implements,
      list of implemented interface _objects_ (only on astroid.Class nodes)
    """

    def __init__(self, project: Project, tag: bool = False) -> None:
        IdGeneratorMixIn.__init__(self)
        utils.LocalsVisitor.__init__(self)
        # tag nodes or not
        self.tag = tag
        # visited project
        self.project = project

    def visit_project(self, node: Project) -> None:
        """Visit a pyreverse.utils.Project node.

        * optionally tag the node with a unique id
        """
        if self.tag:
            node.uid = self.generate_id()
        for module in node.modules:
            self.visit(module)

    def visit_module(self, node: nodes.Module) -> None:
        """Visit an astroid.Module node.
</code-snippet>
<code-snippet location="pylint/interfaces.py:52-68">
class Interface:
    """Base class for interfaces."""

    def __init__(self) -> None:
        warnings.warn(
            "Interface and all of its subclasses have been deprecated "
            "and will be removed in pylint 3.0.",
            DeprecationWarning,
        )

    @classmethod
    def is_implemented_by(
        cls: type[Interface] | tuple[type[Interface], ...], instance: BaseChecker
    ) -> bool:
        with warnings.catch_warnings():
            warnings.filterwarnings("ignore", category=DeprecationWarning)
            return implements(instance, cls)
</code-snippet>
<code-snippet location="pylint/reporters/json_reporter.py:1-25">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt

"""JSON reporter."""

from __future__ import annotations

import json
import sys
from typing import TYPE_CHECKING, Optional

from pylint.interfaces import UNDEFINED
from pylint.message import Message
from pylint.reporters.base_reporter import BaseReporter
from pylint.typing import MessageLocationTuple

if sys.version_info >= (3, 8):
    from typing import TypedDict
else:
    from typing_extensions import TypedDict

if TYPE_CHECKING:
    from pylint.lint.pylinter import PyLinter
    from pylint.reporters.ureports.nodes import Section
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer_run_command.py:91-110">
readable_messages: str = output.getvalue()
        messages: list[OldJsonExport] = json.loads(readable_messages)
        astroid_errors: list[Message] = []
        other_fatal_msgs: list[Message] = []
        if pylint_exit_code % 2 == 0:
            print(f"Successfully primed {package_name}.")
        else:
            astroid_errors, other_fatal_msgs = self._filter_astroid_errors(messages)
            print(f"Encountered fatal errors while priming {package_name} !\n")
            if other_fatal_msgs:
                print(
                    "Fatal messages unrelated to astroid:\n"
                    f"{self._print_msgs(other_fatal_msgs)}\n\n"
                )
            if astroid_errors:
                warnings.warn(
                    f"Fatal messages that could be related to bleeding edge astroid:\n"
                    f"{self._print_msgs(astroid_errors)}\n\n"
                )
        return messages, astroid_errors, other_fatal_msgs
</code-snippet>
<code-snippet location="pylint/pyreverse/inspector.py:335-349">
continue
        project.path = project.path or ast.file
        project.add_module(ast)
        base_name = ast.name
        # recurse in package except if __init__ was explicitly given
        if ast.package and something.find("__init__") == -1:
            # recurse on others packages / modules if this is a package
            for fpath in astroid.modutils.get_module_files(
                os.path.dirname(ast.file), black_list
            ):
                ast = func_wrapper(astroid_manager.ast_from_file, fpath)
                if ast is None or ast.name == base_name:
                    continue
                project.add_module(ast)
    return project
</code-snippet>
<code-snippet location="pylint/reporters/json_reporter.py:23-43">
if TYPE_CHECKING:
    from pylint.lint.pylinter import PyLinter
    from pylint.reporters.ureports.nodes import Section

# Since message-id is an invalid name we need to use the alternative syntax
OldJsonExport = TypedDict(
    "OldJsonExport",
    {
        "type": str,
        "module": str,
        "obj": str,
        "line": int,
        "column": int,
        "endLine": Optional[int],
        "endColumn": Optional[int],
        "path": str,
        "symbol": str,
        "message": str,
        "message-id": str,
    },
)
</code-snippet>
<code-snippet location="pylint/pyreverse/inspector.py:316-339">
def project_from_files(
    files: list[str],
    func_wrapper: _WrapperFuncT = _astroid_wrapper,
    project_name: str = "no name",
    black_list: tuple[str, ...] = constants.DEFAULT_IGNORE_LIST,
) -> Project:
    """Return a Project from a list of files or modules."""
    # build the project representation
    astroid_manager = astroid.MANAGER
    project = Project(project_name)
    for something in files:
        if not os.path.exists(something):
            fpath = astroid.modutils.file_from_modpath(something.split("."))
        elif os.path.isdir(something):
            fpath = os.path.join(something, "__init__.py")
        else:
            fpath = something
        ast = func_wrapper(astroid_manager.ast_from_file, fpath)
        if ast is None:
            continue
        project.path = project.path or ast.file
        project.add_module(ast)
        base_name = ast.name
        # recurse in package except if __init__ was explicitly given
</code-snippet>
<code-snippet location="pylint/pyreverse/inspector.py:62-75">
class IdGeneratorMixIn:
    """Mixin adding the ability to generate integer uid."""

    def __init__(self, start_value: int = 0) -> None:
        self.id_count = start_value

    def init_counter(self, start_value: int = 0) -> None:
        """Init the id counter."""
        self.id_count = start_value

    def generate_id(self) -> int:
        """Generate a new identifier."""
        self.id_count += 1
        return self.id_count
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer.py:1-15">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt

from __future__ import annotations

import argparse
import json
from pathlib import Path

from pylint.testutils._primer import PackageToLint
from pylint.testutils._primer.primer_command import PrimerCommand
from pylint.testutils._primer.primer_compare_command import CompareCommand
from pylint.testutils._primer.primer_prepare_command import PrepareCommand
from pylint.testutils._primer.primer_run_command import RunCommand
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer_compare_command.py:1-11">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt
from __future__ import annotations

import json
from pathlib import Path

from pylint.testutils._primer.primer_command import PackageMessages, PrimerCommand

MAX_GITHUB_COMMENT_LENGTH = 65536
</code-snippet>
<code-snippet location="pylint/interfaces.py:1-34">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt

"""Interfaces for Pylint objects."""

from __future__ import annotations

import warnings
from collections import namedtuple
from tokenize import TokenInfo
from typing import TYPE_CHECKING

from astroid import nodes

if TYPE_CHECKING:
    from pylint.checkers import BaseChecker
    from pylint.message import Message
    from pylint.reporters.ureports.nodes import Section

__all__ = (
    "IRawChecker",
    "IAstroidChecker",
    "ITokenChecker",
    "IReporter",
    "IChecker",
    "HIGH",
    "CONTROL_FLOW",
    "INFERENCE",
    "INFERENCE_FAILURE",
    "UNDEFINED",
    "CONFIDENCE_LEVELS",
    "CONFIDENCE_LEVEL_NAMES",
)
</code-snippet>
<code-snippet location="pylint/pyreverse/inspector.py:1-25">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt

"""Visitor doing some post-processing on the astroid tree.

Try to resolve definitions (namespace) dictionary, relationship...
"""

from __future__ import annotations

import collections
import os
import traceback
import warnings
from collections.abc import Generator
from typing import Any, Callable, Optional

import astroid
from astroid import nodes

from pylint import constants
from pylint.pyreverse import utils

_WrapperFuncT = Callable[[Callable[[str], nodes.Module], str], Optional[nodes.Module]]
</code-snippet>
<code-snippet location="examples/custom.py:1-10">
from typing import TYPE_CHECKING

from astroid import nodes

from pylint.checkers import BaseChecker

if TYPE_CHECKING:
    from pylint.lint import PyLinter

# Checkers should always inherit from `BaseChecker`.
</code-snippet>
<code-snippet location="pylint/pyreverse/inspector.py:28-38">
def _astroid_wrapper(
    func: Callable[[str], nodes.Module], modname: str
) -> nodes.Module | None:
    print(f"parsing {modname}...")
    try:
        return func(modname)
    except astroid.exceptions.AstroidBuildingException as exc:
        print(exc)
    except Exception:  # pylint: disable=broad-except
        traceback.print_exc()
    return None
</code-snippet>
<code-snippet location="pylint/config/_pylint_config/__init__.py:1-11">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE
# Copyright (c) https://github.com/PyCQA/pylint/blob/main/CONTRIBUTORS.txt

"""Everything related to the 'pylint-config' command.

Everything in this module is private.
"""

from pylint.config._pylint_config.main import _handle_pylint_config_commands  # noqa
from pylint.config._pylint_config.setup import _register_generate_config_options  # noqa
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer_run_command.py:48-68">
@staticmethod
    def _filter_astroid_errors(
        messages: list[OldJsonExport],
    ) -> tuple[list[Message], list[Message]]:
        """Separate fatal errors caused by astroid so we can report them
        independently.
        """
        astroid_errors = []
        other_fatal_msgs = []
        for raw_message in messages:
            message = JSONReporter.deserialize(raw_message)
            if message.category == "fatal":
                if GITHUB_CRASH_TEMPLATE_LOCATION in message.msg:
                    # Remove the crash template location if we're running on GitHub.
                    # We were falsely getting "new" errors when the timestamp changed.
                    message.msg = message.msg.rsplit(CRASH_TEMPLATE_INTRO)[0]
                if message.symbol == "astroid-error":
                    astroid_errors.append(message)
                else:
                    other_fatal_msgs.append(message)
        return astroid_errors, other_fatal_msgs
</code-snippet>
<code-snippet location="pylint/reporters/json_reporter.py:98-117">
@staticmethod
    def deserialize(message_as_json: OldJsonExport) -> Message:
        return Message(
            msg_id=message_as_json["message-id"],
            symbol=message_as_json["symbol"],
            msg=message_as_json["message"],
            location=MessageLocationTuple(
                # TODO: 3.0: Add abs-path and confidence in a new JSONReporter
                abspath=message_as_json["path"],
                path=message_as_json["path"],
                module=message_as_json["module"],
                obj=message_as_json["obj"],
                line=message_as_json["line"],
                column=message_as_json["column"],
                end_line=message_as_json["endLine"],
                end_column=message_as_json["endColumn"],
            ),
            # TODO: 3.0: Make confidence available in a new JSONReporter
            confidence=UNDEFINED,
        )
</code-snippet>
<code-snippet location="pylint/pyreverse/inspector.py:183-201">
if not isinstance(assignattr, nodes.Unknown):
                    self.handle_assignattr_type(assignattr, node)
        # resolve implemented interface
        try:
            ifaces = interfaces(node)
            if ifaces is not None:
                node.implements = list(ifaces)
                if node.implements:
                    # TODO: 3.0: Remove support for __implements__
                    warnings.warn(
                        "pyreverse will drop support for resolving and displaying implemented interfaces in pylint 3.0. "
                        "The implementation relies on the '__implements__'  attribute proposed in PEP 245, which was rejected "
                        "in 2006.",
                        DeprecationWarning,
                    )
            else:
                node.implements = []
        except astroid.InferenceError:
            node.implements = []
</code-snippet>
<code-snippet location="pylint/reporters/json_reporter.py:46-69">
class BaseJSONReporter(BaseReporter):
    """Report messages and layouts in JSON."""

    name = "json"
    extension = "json"

    def display_messages(self, layout: Section | None) -> None:
        """Launch layouts display."""
        json_dumpable = [self.serialize(message) for message in self.messages]
        print(json.dumps(json_dumpable, indent=4), file=self.out)

    def display_reports(self, layout: Section) -> None:
        """Don't do anything in this reporter."""

    def _display(self, layout: Section) -> None:
        """Do nothing."""

    @staticmethod
    def serialize(message: Message) -> OldJsonExport:
        raise NotImplementedError

    @staticmethod
    def deserialize(message_as_json: OldJsonExport) -> Message:
        raise NotImplementedError
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer_run_command.py:23-44">
class RunCommand(PrimerCommand):
    def run(self) -> None:
        packages: dict[str, list[OldJsonExport]] = {}
        astroid_errors: list[Message] = []
        other_fatal_msgs: list[Message] = []
        for package, data in self.packages.items():
            messages, p_astroid_errors, p_other_fatal_msgs = self._lint_package(
                package, data
            )
            astroid_errors += p_astroid_errors
            other_fatal_msgs += p_other_fatal_msgs
            packages[package] = messages
        plural = "s" if len(other_fatal_msgs) > 1 else ""
        assert not other_fatal_msgs, (
            f"We encountered {len(other_fatal_msgs)} fatal error message{plural}"
            " that can't be attributed to bleeding edge astroid alone (see log)."
        )
        path = (
            self.primer_directory
            / f"output_{'.'.join(str(i) for i in sys.version_info[:3])}_{self.config.type}.txt"
        )
        print(f"Writing result in {path}")
</code-snippet>
<code-snippet location="pylint/reporters/json_reporter.py:72-96">
class JSONReporter(BaseJSONReporter):

    """
    TODO: 3.0: Remove this JSONReporter in favor of the new one handling abs-path
    and confidence.

    TODO: 2.15: Add a new JSONReporter handling abs-path, confidence and scores.
    (Ultimately all other breaking change related to json for 3.0).
    """

    @staticmethod
    def serialize(message: Message) -> OldJsonExport:
        return {
            "type": message.category,
            "module": message.module,
            "obj": message.obj,
            "line": message.line,
            "column": message.column,
            "endLine": message.end_line,
            "endColumn": message.end_column,
            "path": message.path,
            "symbol": message.symbol,
            "message": message.msg or "",
            "message-id": message.msg_id,
        }
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer.py:77-100">
# Storing arguments
        self.config = self._argument_parser.parse_args()

        self.packages = self._get_packages_to_lint_from_json(json_path)
        """All packages to prime."""

        if self.config.command == "prepare":
            command_class: type[PrimerCommand] = PrepareCommand
        elif self.config.command == "run":
            command_class = RunCommand
        elif self.config.command == "compare":
            command_class = CompareCommand
        self.command = command_class(self.primer_directory, self.packages, self.config)

    def run(self) -> None:
        self.command.run()

    @staticmethod
    def _get_packages_to_lint_from_json(json_path: Path) -> dict[str, PackageToLint]:
        with open(json_path, encoding="utf8") as f:
            return {
                name: PackageToLint(**package_data)
                for name, package_data in json.load(f).items()
            }
</code-snippet>
<code-snippet location="pylint/pyreverse/inspector.py:78-104">
class Project:
    """A project handle a set of modules / packages."""

    def __init__(self, name: str = ""):
        self.name = name
        self.uid: int | None = None
        self.path: str = ""
        self.modules: list[nodes.Module] = []
        self.locals: dict[str, nodes.Module] = {}
        self.__getitem__ = self.locals.__getitem__
        self.__iter__ = self.locals.__iter__
        self.values = self.locals.values
        self.keys = self.locals.keys
        self.items = self.locals.items

    def add_module(self, node: nodes.Module) -> None:
        self.locals[node.name] = node
        self.modules.append(node)

    def get_module(self, name: str) -> nodes.Module:
        return self.locals[name]

    def get_children(self) -> list[nodes.Module]:
        return self.modules

    def __repr__(self) -> str:
        return f"<Project {self.name!r} at {id(self)} ({len(self.modules)} modules)>"
</code-snippet>
<code-snippet location="pylint/reporters/json_reporter.py:120-121">
def register(linter: PyLinter) -> None:
    linter.register_reporter(JSONReporter)
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer_run_command.py:70-72">
@staticmethod
    def _print_msgs(msgs: list[Message]) -> str:
        return "\n".join(f"- {JSONReporter.serialize(m)}" for m in msgs)
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer_compare_command.py:14-23">
class CompareCommand(PrimerCommand):
    def run(self) -> None:
        main_messages = self._load_json(self.config.base_file)
        pr_messages = self._load_json(self.config.new_file)
        missing_messages, new_messages = self._cross_reference(
            main_messages, pr_messages
        )
        comment = self._create_comment(missing_messages, new_messages)
        with open(self.primer_directory / "comment.txt", "w", encoding="utf-8") as f:
            f.write(comment)
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer_compare_command.py:25-43">
@staticmethod
    def _cross_reference(
        main_dict: PackageMessages, pr_messages: PackageMessages
    ) -> tuple[PackageMessages, PackageMessages]:
        missing_messages: PackageMessages = {}
        for package, messages in main_dict.items():
            missing_messages[package] = []
            for message in messages:
                try:
                    pr_messages[package].remove(message)
                except ValueError:
                    missing_messages[package].append(message)
        return missing_messages, pr_messages

    @staticmethod
    def _load_json(file_path: Path | str) -> PackageMessages:
        with open(file_path, encoding="utf-8") as f:
            result: PackageMessages = json.load(f)
        return result
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer_run_command.py:40-46">
path = (
            self.primer_directory
            / f"output_{'.'.join(str(i) for i in sys.version_info[:3])}_{self.config.type}.txt"
        )
        print(f"Writing result in {path}")
        with open(path, "w", encoding="utf-8") as f:
            json.dump(packages, f)
</code-snippet>
<code-snippet location="pylint/pyreverse/inspector.py:107-128">
class Linker(IdGeneratorMixIn, utils.LocalsVisitor):
    """Walk on the project tree and resolve relationships.

    According to options the following attributes may be
    added to visited nodes:

    * uid,
      a unique identifier for the node (on astroid.Project, astroid.Module,
      astroid.Class and astroid.locals_type). Only if the linker
      has been instantiated with tag=True parameter (False by default).

    * Function
      a mapping from locals names to their bounded value, which may be a
      constant like a string or an integer, or an astroid node
      (on astroid.Module, astroid.Class and astroid.Function).

    * instance_attrs_type
      as locals_type but for klass member attributes (only on astroid.Class)

    * implements,
      list of implemented interface _objects_ (only on astroid.Class nodes)
    """
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer_compare_command.py:95-107">
if astroid_errors:
            comment += (
                f"{astroid_errors} error(s) were found stemming from the `astroid` library. "
                "This is unlikely to have been caused by your changes. "
                "A GitHub Actions warning links directly to the crash report template. "
                "Please open an issue against `astroid` if one does not exist already. \n\n"
            )
        if new_non_astroid_messages:
            comment += (
                "The following messages are now emitted:\n\n<details>\n\n"
                + new_non_astroid_messages
                + "\n</details>\n\n"
            )
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer_compare_command.py:69-89">
def _create_comment_for_package(
        self, package: str, new_messages, missing_messages
    ) -> str:
        comment = f"\n\n**Effect on [{package}]({self.packages[package].url}):**\n"
        # Create comment for new messages
        count = 1
        astroid_errors = 0
        new_non_astroid_messages = ""
        if new_messages:
            print("Now emitted:")
        for message in new_messages:
            filepath = str(message["path"]).replace(
                str(self.packages[package].clone_directory), ""
            )
            # Existing astroid errors may still show up as "new" because the timestamp
            # in the message is slightly different.
            if message["symbol"] == "astroid-error":
                astroid_errors += 1
            else:
                new_non_astroid_messages += (
                    f"{count}) {message['symbol']}:\n*{message['message']}*\n"
</code-snippet>
<code-snippet location="pylint/pyreverse/inspector.py:41-59">
def interfaces(node: nodes.ClassDef) -> Generator[Any, None, None]:
    """Return an iterator on interfaces implemented by the given class node."""
    try:
        implements = astroid.bases.Instance(node).getattr("__implements__")[0]
    except astroid.exceptions.NotFoundError:
        return
    if implements.frame(future=True) is not node:
        return
    found = set()
    missing = False
    for iface in nodes.unpack_infer(implements):
        if iface is astroid.Uninferable:
            missing = True
            continue
        if iface not in found:
            found.add(iface)
            yield iface
    if missing:
        raise astroid.exceptions.InferenceError()
</code-snippet>
<code-snippet location="pylint/testutils/_primer/primer_compare_command.py:86-93">
astroid_errors += 1
            else:
                new_non_astroid_messages += (
                    f"{count}) {message['symbol']}:\n*{message['message']}*\n"
                    f"{self.packages[package].url}/blob/{self.packages[package].branch}{filepath}#L{message['line']}\n"
                )
                print(message)
                count += 1
</code-snippet>
<code-snippet location="pylint/pyreverse/inspector.py:242-267">
current = frame.locals_type[node.name]
        frame.locals_type[node.name] = list(set(current) | utils.infer_node(node))

    @staticmethod
    def handle_assignattr_type(node: nodes.AssignAttr, parent: nodes.ClassDef) -> None:
        """Handle an astroid.assignattr node.

        handle instance_attrs_type
        """
        current = set(parent.instance_attrs_type[node.attrname])
        parent.instance_attrs_type[node.attrname] = list(
            current | utils.infer_node(node)
        )

    def visit_import(self, node: nodes.Import) -> None:
        """Visit an astroid.Import node.

        resolve module dependencies
        """
        context_file = node.root().file
        for name in node.names:
            relative = astroid.modutils.is_relative(name[0], context_file)
            self._imported_module(node, name[0], relative)

    def visit_importfrom(self, node: nodes.ImportFrom) -> None:
        """Visit an astroid.ImportFrom node.
</code-snippet>
</context>