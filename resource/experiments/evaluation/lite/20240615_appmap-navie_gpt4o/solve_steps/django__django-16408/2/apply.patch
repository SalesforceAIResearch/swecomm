diff --git a/django/db/models/query.py b/django/db/models/query.py
index f88662de12..c41ed4bc5c 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1520,28 +1520,32 @@ class QuerySet(AltersData):
         return obj
 
     def select_related(self, *fields):
-        """
-        Return a new QuerySet instance that will select related objects.
-
-        If fields are specified, they must be ForeignKey fields and only those
-        related objects are included in the selection.
-
-        If select_related(None) is called, clear the list.
-        """
-        self._not_support_combined_queries("select_related")
-        if self._fields is not None:
-            raise TypeError(
-                "Cannot call select_related() after .values() or .values_list()"
-            )
-
-        obj = self._chain()
-        if fields == (None,):
-            obj.query.select_related = False
-        elif fields:
-            obj.query.add_select_related(fields)
-        else:
-            obj.query.select_related = True
-        return obj
+            """
+            Return a new QuerySet instance that will select related objects.
+    
+            If fields are specified, they must be ForeignKey fields and only those
+            related objects are included in the selection.
+    
+            If select_related(None) is called, clear the list.
+            """
+            self._not_support_combined_queries("select_related")
+            if self._fields is not None:
+                raise TypeError(
+                    "Cannot call select_related() after .values() or .values_list()"
+                )
+    
+            obj = self._chain()
+            if fields == (None,):
+                obj.query.select_related = False
+            elif fields:
+                fields = [
+                    field.prefetch_to if isinstance(field, FilteredRelation) else field
+                    for field in fields
+                ]
+                obj.query.add_select_related(fields)
+            else:
+                obj.query.select_related = True
+            return obj
 
     def prefetch_related(self, *lookups):
         """
