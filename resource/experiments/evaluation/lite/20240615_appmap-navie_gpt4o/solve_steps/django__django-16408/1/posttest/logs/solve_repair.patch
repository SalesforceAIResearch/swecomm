diff --git a/django/db/models/query.py b/django/db/models/query.py
index f88662de12..af2ca1bdde 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -289,7 +289,6 @@ class FlatValuesListIterable(BaseIterable):
 
 class QuerySet(AltersData):
     """Represent a lazy database lookup for a set of objects."""
-
     def __init__(self, model=None, query=None, using=None, hints=None):
         self.model = model
         self._db = using
@@ -305,6 +304,7 @@ class QuerySet(AltersData):
         self._fields = None
         self._defer_next_filter = False
         self._deferred_filter = None
+        self._filtered_relations = {}
 
     @property
     def query(self):
@@ -1855,6 +1855,7 @@ class QuerySet(AltersData):
             using=self._db,
             hints=self._hints,
         )
+        c._filtered_relations = self._filtered_relations
         c._sticky_filter = self._sticky_filter
         c._for_write = self._for_write
         c._prefetch_related_lookups = self._prefetch_related_lookups[:]
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 7c433b3f06..145f5ce4a1 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -42,21 +42,36 @@ class SQLCompiler:
         # they would return an empty result set.
         self.elide_empty = elide_empty
         self.quote_cache = {"*": "*"}
+        self._filtered_relations = dict(self.query._filtered_relations)
         # The select, klass_info, and annotations are needed by QuerySet.iterator()
         # these are set as a side-effect of executing the query. Note that we calculate
         # separately a list of extra select columns needed for grammatical correctness
+        self._filtered_relations = dict(self.query._filtered_relations)
         # of the query, but these columns are not included in self.select.
-        self.select = None
-        self.annotation_col_map = None
-        self.klass_info = None
-        self._meta_ordering = None
-
-    def __repr__(self):
-        return (
-            f"<{self.__class__.__qualname__} "
-            f"model={self.query.model.__qualname__} "
-            f"connection={self.connection!r} using={self.using!r}>"
-        )
+
+                self.select = None
+                self.annotation_col_map = None
+                self.klass_info = None
+                self._meta_ordering = None
+
+                # Ensure that filtered relations are accounted for in related selections
+                if self._filtered_relations:
+                    select_related_filtered_relations = {
+                        key: val for key, val in self._filtered_relations.items()
+                        if any(
+                            (lookup.split("__")[0] == rela.split("__")[0])
+                            for rela in val for lookup in self.query.select_related or ()
+                        )
+                    }
+                else:
+                    select_related_filtered_relations = {}
+
+            def __repr__(self):
+                return (
+                    f"<{self.__class__.__qualname__} "
+                    f"model={self.query.model.__qualname__} "
+                    f"connection={self.connection!r} using={self.using!r}>"
+                )
 
     def setup_query(self, with_col_aliases=False):
         if all(self.query.alias_refcount[a] == 0 for a in self.query.alias_map):
@@ -1123,6 +1138,19 @@ class SQLCompiler:
         Fill in the information needed for a select_related query. The current
         depth is measured as the number of connections away from the root model
         (for example, cur_depth=1 means we are looking at models with direct
+        # Ensure that filtered relations are accounted for in related selections
+        if self._filtered_relations:
+            select_related_filtered_relations = {
+                key: val
+                for key, val in self._filtered_relations.items()
+                if any(
+                    (lookup.split("__")[0] == rela.split("__")[0])
+                    for rela in val
+                    for lookup in requested or ()
+                )
+            }
+        else:
+            select_related_filtered_relations = {}
         connections to the root model).
         """
 
