diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 1edc712358..c5423e5eb3 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -361,6 +361,70 @@ def _print_Mul(self, expr):
         separator = self._settings['mul_symbol_latex']
         numbersep = self._settings['mul_symbol_latex_numbers']
 
+        def convert(expr):
+            if not expr.is_Mul:
+                return str(self._print(expr))
+            else:
+                _tex = last_term_tex = ""
+                if self.order not in ('old', 'none'):
+                    args = expr.as_ordered_factors()
+                else:
+                    args = expr.args
+
+                for i, term in enumerate(args):
+                    term_tex = self._print(term)
+
+                    if self._needs_mul_brackets(term, first=(i == 0),
+                                                last=(i == len(args) - 1)):
+                        term_tex = r"\left(%s\right)" % term_tex
+
+                    if _between_two_numbers_p[0].search(last_term_tex) and
+                            _between_two_numbers_p[1].match(term_tex):
+                        _tex += numbersep
+                    elif _tex:
+                        _tex += separator
+
+                    _tex += term_tex
+                    last_term_tex = term_tex
+                return _tex
+
+        if denom is S.One:
+            tex += convert(expr)
+        else:
+            snumer = convert(numer)
+            sdenom = convert(denom)
+            if self._settings['fold_short_frac'] and len(sdenom.split()) <= 2:
+                tex += r"%s / %s" % (snumer, sdenom)
+            else:
+                tex += r"\frac{%s}{%s}" % (snumer, sdenom)
+
+        if include_parens:
+            tex += ")"
+        return tex
+
+    def _print_Pow(self, expr):
+        if expr.exp.is_Rational and abs(expr.exp.p) == 1 and expr.exp.q != 1:
+            base = self._print(expr.base)
+            expq = expr.exp.q
+
+            if expq == 2:
+                tex = r"\sqrt{%s}" % base
+            else:
+                tex = r"\sqrt[%d]{%s}" % (expq, base)
+
+            if expr.exp.is_negative:
+                return r"\frac{1}{%s}" % tex
+            else:
+                return tex
+
+        if expr.exp.is_negative and expr.base.is_number:
+            return self._print_Mul(expr)
+
+        else:
+            base = self._print(expr.base)
+            exp = self._print(expr.exp)
+            return r"%s^{%s}" % (base, exp)
+
         def convert(expr):
             if not expr.is_Mul:
                 return str(self._print(expr))
