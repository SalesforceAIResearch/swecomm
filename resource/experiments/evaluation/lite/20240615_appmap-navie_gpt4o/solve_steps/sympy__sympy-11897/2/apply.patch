diff --git a/sympy/physics/vector/printing.py b/sympy/physics/vector/printing.py
index cf09aa7b03..df6872b454 100644
--- a/sympy/physics/vector/printing.py
+++ b/sympy/physics/vector/printing.py
@@ -75,48 +75,23 @@ def _print_Function(self, expr, exp=None):
             return r"%s" % (name + supers + subs)
         else:
             args = [str(self._print(arg)) for arg in expr.args]
-            # How inverse trig functions should be displayed, formats are:
-            # abbreviated: asin, full: arcsin, power: sin^-1
-            inv_trig_style = self._settings['inv_trig_style']
-            # If we are dealing with a power-style inverse trig function
-            inv_trig_power_case = False
-            # If it is applicable to fold the argument brackets
-            can_fold_brackets = self._settings['fold_func_brackets'] and \
-                len(args) == 1 and \
-                not self._needs_function_brackets(expr.args[0])
-
-            inv_trig_table = ["asin", "acos", "atan", "acot"]
-
-            # If the function is an inverse trig function, handle the style
-            if func in inv_trig_table:
-                if inv_trig_style == "abbreviated":
-                    func = func
-                elif inv_trig_style == "full":
-                    func = "arc" + func[1:]
-                elif inv_trig_style == "power":
-                    func = func[1:]
-                    inv_trig_power_case = True
-
-                    # Can never fold brackets if we're raised to a power
-                    if exp is not None:
-                        can_fold_brackets = False
-
-            if inv_trig_power_case:
-                name = r"\operatorname{%s}^{-1}" % func
-            elif exp is not None:
-                name = r"\operatorname{%s}^{%s}" % (func, exp)
-            else:
-                name = r"\operatorname{%s}" % func
-
-            if can_fold_brackets:
-                name += r"%s"
-            else:
-                name += r"\left(%s\right)"
-
-            if inv_trig_power_case and exp is not None:
-                name += r"^{%s}" % exp
-
-            return name % ",".join(args)
+            
+            func_str = r"\%s" % func if func.islower() else func
+            
+            # Use \operatorname for functions that are not standard LaTeX commands
+            if "\\" not in func_str:
+                func_str = r"\operatorname{%s}" % func_str
+
+            return func_str + r"\left(%s\right)" % ",".join(args)
+
+    def _print_Division(self, expr):
+        # Ensure that the denominator maintains parentheses around sums
+        num, denom = expr.as_numer_denom()
+        num_str = self._print(num)
+        denom_str = self._print(denom)
+        if denom.is_Add:
+            denom_str = r"\left(%s\right)" % denom_str
+        return r"\frac{%s}{%s}" % (num_str, denom_str)
 
     def _print_Derivative(self, der_expr):
         from sympy.physics.vector.functions import dynamicsymbols
