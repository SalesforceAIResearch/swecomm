diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py
index d2f1f33e2..6e7955507 100644
--- a/src/_pytest/reports.py
+++ b/src/_pytest/reports.py
@@ -153,17 +153,17 @@ class BaseReport:
     def _to_json(self):
         """
         This was originally the serialize_report() function from xdist (ca03269).
-
+    
         Returns the contents of this report as a dict of builtin entries, suitable for
         serialization.
-
+    
         Experimental method.
         """
-
+    
         def disassembled_report(rep):
             reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()
             reprcrash = rep.longrepr.reprcrash.__dict__.copy()
-
+    
             new_entries = []
             for entry in reprtraceback["reprentries"]:
                 entry_data = {
@@ -173,16 +173,19 @@ class BaseReport:
                 for key, value in entry_data["data"].items():
                     if hasattr(value, "__dict__"):
                         entry_data["data"][key] = value.__dict__.copy()
+                    # Add clearer byte string comparison
+                    if isinstance(value, bytes):
+                        entry_data["data"][key] = self._explain_byte_string_diff(value)
                 new_entries.append(entry_data)
-
+    
             reprtraceback["reprentries"] = new_entries
-
+    
             return {
                 "reprcrash": reprcrash,
                 "reprtraceback": reprtraceback,
                 "sections": rep.longrepr.sections,
             }
-
+    
         d = self.__dict__.copy()
         if hasattr(self.longrepr, "toterminal"):
             if hasattr(self.longrepr, "reprtraceback") and hasattr(
@@ -199,6 +202,13 @@ class BaseReport:
             elif name == "result":
                 d[name] = None  # for now
         return d
+    
+    def _explain_byte_string_diff(self, byte_string):
+        """Custom method for explaining byte string differences in a human-readable way."""
+        diff_message = []
+        for i, b in enumerate(byte_string):
+            diff_message.append(f"Byte {i}: {b}")
+        return "\n".join(diff_message)
 
     @classmethod
     def _from_json(cls, reportdict):
