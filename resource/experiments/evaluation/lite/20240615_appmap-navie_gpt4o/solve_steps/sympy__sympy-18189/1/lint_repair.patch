diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py
index 6092e35dab..7b200c9206 100644
--- a/sympy/solvers/diophantine.py
+++ b/sympy/solvers/diophantine.py
@@ -166,7 +166,7 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
     """
 
     from sympy.utilities.iterables import (
-        subsets, permute_signs, signed_permutations)
+        subsets, permute_signs, signed_permutations, permutations)
 
     if isinstance(eq, Eq):
         eq = eq.lhs - eq.rhs
@@ -174,7 +174,23 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
     try:
         var = list(eq.expand(force=True).free_symbols)
         var.sort(key=default_sort_key)
-        if syms:
+        all_solutions = set()
+
+        if syms and permute:
+            perm_syms = permutations(syms)
+        else:
+            perm_syms = [syms]
+
+        for perm in perm_syms:
+            if syms:
+                if not is_sequence(perm):
+                    raise TypeError(
+                        'syms should be given as a sequence, e.g. a list')
+                syms = [i for i in perm if i in var]
+                if syms != var:
+                    dict_sym_index = dict(zip(syms, range(len(syms))))
+                    all_solutions.update({tuple([t[dict_sym_index[i]] for i in var])
+                        for t in diophantine(eq, param)})
             if not is_sequence(syms):
                 raise TypeError(
                     'syms should be given as a sequence, e.g. a list')
@@ -330,7 +346,7 @@ def diophantine(eq, param=symbols("t", integer=True), syms=None,
     # if there is no solution, return trivial solution
     if not sols and eq.subs(zip(var, null)).is_zero:
         sols.add(null)
-    final_soln = set([])
+    final_soln = all_solutions if all_solutions else set([])
     for sol in sols:
         if all(_is_int(s) for s in sol):
             if do_permute_signs:
