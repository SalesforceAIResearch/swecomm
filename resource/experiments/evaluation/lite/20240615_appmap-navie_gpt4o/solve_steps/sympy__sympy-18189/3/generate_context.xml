<context>
<code-snippet location="sympy/combinatorics/util.py:73-95">
def _check_cycles_alt_sym(perm):
    """
    Checks for cycles of prime length p with n/2 < p < n-2.

    Here `n` is the degree of the permutation. This is a helper function for
    the function is_alt_sym from sympy.combinatorics.perm_groups.

    Examples
    ========

    >>> from sympy.combinatorics.util import _check_cycles_alt_sym
    >>> from sympy.combinatorics.permutations import Permutation
    >>> a = Permutation([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12]])
    >>> _check_cycles_alt_sym(a)
    False
    >>> b = Permutation([[0, 1, 2, 3, 4, 5, 6], [7, 8, 9, 10]])
    >>> _check_cycles_alt_sym(b)
    True

    See Also
    ========

    sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym
</code-snippet>
<code-snippet location="sympy/matrices/expressions/permutation.py:205-238">
Permuting the matrix columns:

    >>> B = MatrixPermute(A, p, axis=1)
    >>> B.as_explicit()
    Matrix([
    [2, 3, 1],
    [5, 6, 4],
    [8, 9, 7]])

    See Also
    ========

    sympy.matrices.common.MatrixCommon.permute
    """
    def __new__(cls, mat, perm, axis=S.Zero):
        from sympy.combinatorics.permutations import Permutation

        mat = _sympify(mat)
        if not mat.is_Matrix:
            raise ValueError(
                "{} must be a SymPy matrix instance.".format(perm))

        perm = _sympify(perm)
        if isinstance(perm, PermutationMatrix):
            perm = perm.args[0]

        if not isinstance(perm, Permutation):
            raise ValueError(
                "{} must be a SymPy Permutation or a PermutationMatrix " \
                "instance".format(perm))

        axis = _sympify(axis)
        if axis not in (0, 1):
            raise ValueError("The axis must be 0 or 1.")
</code-snippet>
<code-snippet location="sympy/matrices/expressions/permutation.py:45-87">
>>> M = Matrix([0, 1, 2])
    >>> Matrix(P*M)
    Matrix([
    [1],
    [2],
    [0]])

    >>> Matrix(M.T*P)
    Matrix([[2, 0, 1]])

    See Also
    ========

    sympy.combinatorics.permutations.Permutation
    """

    def __new__(cls, perm):
        from sympy.combinatorics.permutations import Permutation

        perm = _sympify(perm)
        if not isinstance(perm, Permutation):
            raise ValueError(
                "{} must be a SymPy Permutation instance.".format(perm))

        return super(PermutationMatrix, cls).__new__(cls, perm)

    @property
    def shape(self):
        size = self.args[0].size
        return (size, size)

    @property
    def is_Identity(self):
        return self.args[0].is_Identity

    def doit(self):
        if self.is_Identity:
            return Identity(self.rows)
        return self

    def _entry(self, i, j, **kwargs):
        perm = self.args[0]
        return KroneckerDelta(perm.apply(i), j)
</code-snippet>
<code-snippet location="sympy/parsing/sym_expr.py:61-85">
An example of variable definiton:

        >>> from sympy.parsing.sym_expr import SymPyExpression
        >>> src2 = '''
        ... integer :: a, b, c, d
        ... real :: p, q, r, s
        ... '''
        >>> p = SymPyExpression()
        >>> p.convert_to_expr(src2, 'f')
        >>> p.convert_to_c()
        ['int a = 0', 'int b = 0', 'int c = 0', 'int d = 0', 'double p = 0.0', 'double q = 0.0', 'double r = 0.0', 'double s = 0.0']

        An example of Assignment:

        >>> from sympy.parsing.sym_expr import SymPyExpression
        >>> src3 = '''
        ... integer :: a, b, c, d, e
        ... d = a + b - c
        ... e = b * d + c * e / a
        ... '''
        >>> p = SymPyExpression(src3, 'f')
        >>> p.convert_to_python()
        ['a = 0', 'b = 0', 'c = 0', 'd = 0', 'e = 0', 'd = a + b - c', 'e = b*d + c*e/a']

        An example of function definition:
</code-snippet>
<code-snippet location="sympy/utilities/exceptions.py:13-33">
class SymPyDeprecationWarning(DeprecationWarning):
    r"""A warning for deprecated features of SymPy.

    This class is expected to be used with the warnings.warn function (note
    that one has to explicitly turn on deprecation warnings):

    >>> import warnings
    >>> from sympy.utilities.exceptions import SymPyDeprecationWarning
    >>> warnings.simplefilter(
    ...     "always", SymPyDeprecationWarning)
    >>> warnings.warn(
    ...     SymPyDeprecationWarning(feature="Old deprecated thing",
    ...     issue=1065, deprecated_since_version="1.0")) #doctest:+SKIP
    __main__:3: SymPyDeprecationWarning:

    Old deprecated thing has been deprecated since SymPy 1.0. See
    https://github.com/sympy/sympy/issues/1065 for more info.

    >>> SymPyDeprecationWarning(feature="Old deprecated thing",
    ... issue=1065, deprecated_since_version="1.1").warn() #doctest:+SKIP
    __main__:1: SymPyDeprecationWarning:
</code-snippet>
<code-snippet location="sympy/combinatorics/util.py:92-115">
See Also
    ========

    sympy.combinatorics.perm_groups.PermutationGroup.is_alt_sym

    """
    n = perm.size
    af = perm.array_form
    current_len = 0
    total_len = 0
    used = set()
    for i in range(n//2):
        if not i in used and i < n//2 - total_len:
            current_len = 1
            used.add(i)
            j = i
            while af[j] != i:
                current_len += 1
                j = af[j]
                used.add(j)
            total_len += current_len
            if current_len > n//2 and current_len < n - 2 and isprime(current_len):
                return True
    return False
</code-snippet>
<code-snippet location="sympy/parsing/sym_expr.py:85-98">
An example of function definition:

        >>> from sympy.parsing.sym_expr import SymPyExpression
        >>> src = '''
        ... integer function f(a,b)
        ... integer, intent(in) :: a, b
        ... integer :: r
        ... end function
        ... '''
        >>> a = SymPyExpression(src, 'f')
        >>> a.convert_to_python()
        ['def f(a, b):\\n   f = 0\\n    r = 0\\n    return f']

        """
</code-snippet>
<code-snippet location="sympy/integrals/heurisch.py:678-697">
# Rewrite raw_numer as a polynomial in K[coeffs][V] where K is a field
        # that we have to determine. We can't use simply atoms() because log(3),
        # sqrt(y) and similar expressions can appear, leading to non-trivial
        # domains.
        syms = set(poly_coeffs) | set(V)
        non_syms = set([])

        def find_non_syms(expr):
            if expr.is_Integer or expr.is_Rational:
                pass # ignore trivial numbers
            elif expr in syms:
                pass # ignore variables
            elif not expr.has(*syms):
                non_syms.add(expr)
            elif expr.is_Add or expr.is_Mul or expr.is_Pow:
                list(map(find_non_syms, expr.args))
            else:
                # TODO: Non-polynomial expression. This should have been
                # filtered out at an earlier stage.
                raise PolynomialError
</code-snippet>
<code-snippet location="sympy/utilities/exceptions.py:31-51">
>>> SymPyDeprecationWarning(feature="Old deprecated thing",
    ... issue=1065, deprecated_since_version="1.1").warn() #doctest:+SKIP
    __main__:1: SymPyDeprecationWarning:

    Old deprecated thing has been deprecated since SymPy 1.1.
    See https://github.com/sympy/sympy/issues/1065 for more info.

    Three arguments to this class are required: ``feature``, ``issue`` and
    ``deprecated_since_version``.

    The ``issue`` flag should be an integer referencing for a "Deprecation
    Removal" issue in the SymPy issue tracker. See
    https://github.com/sympy/sympy/wiki/Deprecating-policy.

    >>> SymPyDeprecationWarning(
    ...    feature="Old feature",
    ...    useinstead="new feature",
    ...    issue=5241,
    ...    deprecated_since_version="1.1")
    Old feature has been deprecated since SymPy 1.1. Use new feature
    instead. See https://github.com/sympy/sympy/issues/5241 for more info.
</code-snippet>
<code-snippet location="sympy/parsing/sym_expr.py:207-232">
def convert_to_c(self):
            """Returns a list with the c source code for the sympy expressions


            Examples
            ========

            >>> from sympy.parsing.sym_expr import SymPyExpression
            >>> src2 = '''
            ... integer :: a, b, c, d
            ... real :: p, q, r, s
            ... c = a/b
            ... d = c/a
            ... s = p/q
            ... r = q/p
            ... '''
            >>> p = SymPyExpression()
            >>> p.convert_to_expr(src2, 'f')
            >>> p.convert_to_c()
            ['int a = 0', 'int b = 0', 'int c = 0', 'int d = 0', 'double p = 0.0', 'double q = 0.0', 'double r = 0.0', 'double s = 0.0', 'c = a/b;', 'd = c/a;', 's = p/q;', 'r = q/p;']

            """
            self._ccode = []
            for iter in self._expr:
                self._ccode.append(ccode(iter))
            return self._ccode
</code-snippet>
<code-snippet location="sympy/parsing/sym_expr.py:142-161">
Examples
            ========

            >>> from sympy.parsing.sym_expr import SymPyExpression
            >>> src3 = '''
            ... integer function f(a,b) result(r)
            ... integer, intent(in) :: a, b
            ... integer :: x
            ... r = a + b -x
            ... end function
            ... '''
            >>> p = SymPyExpression()
            >>> p.convert_to_expr(src3, 'f')
            >>> p.return_expr()
            [FunctionDefinition(integer, name=f, parameters=(Variable(a), Variable(b)), body=CodeBlock(
            Declaration(Variable(r, type=integer, value=0)),
            Declaration(Variable(x, type=integer, value=0)),
            Assignment(Variable(r), a + b - x),
            Return(Variable(r))
            ))]
</code-snippet>
<code-snippet location="sympy/parsing/sym_expr.py:228-251">
"""
            self._ccode = []
            for iter in self._expr:
                self._ccode.append(ccode(iter))
            return self._ccode

        def convert_to_fortran(self):
            """Returns a list with the fortran source code for the sympy expressions

            Examples
            ========

            >>> from sympy.parsing.sym_expr import SymPyExpression
            >>> src2 = '''
            ... integer :: a, b, c, d
            ... real :: p, q, r, s
            ... c = a/b
            ... d = c/a
            ... s = p/q
            ... r = q/p
            ... '''
            >>> p = SymPyExpression(src2, 'f')
            >>> p.convert_to_fortran()
            ['      integer*4 a', '      integer*4 b', '      integer*4 c', '      integer*4 d', '      real*8 p', '      real*8 q', '      real*8 r', '      real*8 s', '      c = a/b', '      d = c/a', '      s = p/q', '      r = q/p']
</code-snippet>
<code-snippet location="sympy/parsing/sym_expr.py:182-212">
def convert_to_python(self):
            """Returns a list with python code for the sympy expressions

            Examples
            ========

            >>> from sympy.parsing.sym_expr import SymPyExpression
            >>> src2 = '''
            ... integer :: a, b, c, d
            ... real :: p, q, r, s
            ... c = a/b
            ... d = c/a
            ... s = p/q
            ... r = q/p
            ... '''
            >>> p = SymPyExpression(src2, 'f')
            >>> p.convert_to_python()
            ['a = 0', 'b = 0', 'c = 0', 'd = 0', 'p = 0.0', 'q = 0.0', 'r = 0.0', 's = 0.0', 'c = a/b', 'd = c/a', 's = p/q', 'r = q/p']

            """
            self._pycode = []
            for iter in self._expr:
                self._pycode.append(pycode(iter))
            return self._pycode

        def convert_to_c(self):
            """Returns a list with the c source code for the sympy expressions


            Examples
            ========
</code-snippet>
<code-snippet location="sympy/parsing/sym_expr.py:41-61">
- LFortran which is required to use the Fortran parser
        - Clang which is required for the C parser

        Examples
        ========

        Example of parsing C code:

        >>> from sympy.parsing.sym_expr import SymPyExpression
        >>> src = '''
        ... int a,b;
        ... float c = 2, d =4;
        ... '''
        >>> a = SymPyExpression(src, 'c')
        >>> a.return_expr()
        [Declaration(Variable(a, type=integer, value=0)),
        Declaration(Variable(b, type=integer, value=0)),
        Declaration(Variable(c, type=real, value=2.0)),
        Declaration(Variable(d, type=real, value=4.0))]

        An example of variable definiton:
</code-snippet>
<code-snippet location="sympy/parsing/sym_expr.py:259-285">
def return_expr(self):
            """Returns the expression list

            Examples
            ========

            >>> from sympy.parsing.sym_expr import SymPyExpression
            >>> src3 = '''
            ... integer function f(a,b)
            ... integer, intent(in) :: a, b
            ... integer :: r
            ... r = a+b
            ... f = r
            ... end function
            ... '''
            >>> p = SymPyExpression()
            >>> p.convert_to_expr(src3, 'f')
            >>> p.return_expr()
            [FunctionDefinition(integer, name=f, parameters=(Variable(a), Variable(b)), body=CodeBlock(
            Declaration(Variable(f, type=integer, value=0)),
            Declaration(Variable(r, type=integer, value=0)),
            Assignment(Variable(f), Variable(r)),
            Return(Variable(f))
            ))]

            """
            return self._expr
</code-snippet>
<code-snippet location="sympy/parsing/sym_expr.py:1-24">
from sympy.printing import pycode, ccode, fcode
from sympy.external import import_module
from sympy.utilities.decorator import doctest_depends_on

lfortran = import_module('lfortran')
cin = import_module('clang.cindex', __import__kwargs = {'fromlist': ['cindex']})

if not lfortran and not cin:
    class SymPyExpression(object):
        def __init__(self, *args, **kwargs):
            raise ImportError('Module not available.')

else:
    if lfortran:
        from sympy.parsing.fortran.fortran_parser import src_to_sympy
    if cin:
        from sympy.parsing.c.c_parser import parse_c

    @doctest_depends_on(modules=['lfortran', 'clang.cindex'])
    class SymPyExpression(object):
        """Class to store and handle SymPy expressions

        This class will hold SymPy Expressions and handle the API for the
        conversion to and from different languages.
</code-snippet>
<code-snippet location="sympy/matrices/expressions/permutation.py:167-205">
class MatrixPermute(MatrixExpr):
    r"""Symbolic representation for permuting matrix rows or columns.

    Parameters
    ==========

    perm : Permutation, PermutationMatrix
        The permutation to use for permuting the matrix.
        The permutation can be resized to the suitable one,

    axis : 0 or 1
        The axis to permute alongside.
        If `0`, it will permute the matrix rows.
        If `1`, it will permute the matrix columns.

    Notes
    =====

    This follows the same notation used in
    :meth:`sympy.matrices.common.MatrixCommon.permute`.

    Examples
    ========

    >>> from sympy.matrices import Matrix, MatrixPermute
    >>> from sympy.combinatorics import Permutation

    Permuting the matrix rows:

    >>> p = Permutation(1, 2, 0)
    >>> A = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
    >>> B = MatrixPermute(A, p, axis=0)
    >>> B.as_explicit()
    Matrix([
    [4, 5, 6],
    [7, 8, 9],
    [1, 2, 3]])

    Permuting the matrix columns:
</code-snippet>
<code-snippet location="sympy/matrices/expressions/permutation.py:11-56">
class PermutationMatrix(MatrixExpr):
    """A Permutation Matrix

    Parameters
    ==========

    perm : Permutation
        The permutation the matrix uses.

        The size of the permutation determines the matrix size.

        See the documentation of
        :class:`sympy.combinatorics.permutations.Permutation` for
        the further information of how to create a permutation object.

    Examples
    ========

    >>> from sympy.matrices import Matrix, PermutationMatrix
    >>> from sympy.combinatorics import Permutation

    Creating a permutation matrix:

    >>> p = Permutation(1, 2, 0)
    >>> P = PermutationMatrix(p)
    >>> P = P.as_explicit()
    >>> P
    Matrix([
    [0, 1, 0],
    [0, 0, 1],
    [1, 0, 0]])

    Permuting a matrix row and column:

    >>> M = Matrix([0, 1, 2])
    >>> Matrix(P*M)
    Matrix([
    [1],
    [2],
    [0]])

    >>> Matrix(M.T*P)
    Matrix([[2, 0, 1]])

    See Also
    ========
</code-snippet>
<code-snippet location="sympy/utilities/exceptions.py:69-87">
To provide additional information, create an instance of this
    class in this way:

    >>> SymPyDeprecationWarning(
    ...     feature="Such and such",
    ...     last_supported_version="1.2.3",
    ...     useinstead="this other feature",
    ...     issue=1065,
    ...     deprecated_since_version="1.1")
    Such and such has been deprecated since SymPy 1.1. It will be last
    supported in SymPy version 1.2.3. Use this other feature instead. See
    https://github.com/sympy/sympy/issues/1065 for more info.

    Note that the text in ``feature`` begins a sentence, so if it begins with
    a plain English word, the first letter of that word should be capitalized.

    Either (or both) of the arguments ``last_supported_version`` and
    ``useinstead`` can be omitted. In this case the corresponding sentence
    will not be shown:
</code-snippet>
<code-snippet location="sympy/utilities/exceptions.py:127-151">
To mark a function as deprecated, you can use the decorator
    @deprecated.

    See Also
    ========
    sympy.core.decorators.deprecated

    """

    def __init__(self, value=None, feature=None, last_supported_version=None,
                 useinstead=None, issue=None, deprecated_since_version=None):

        self.args = (value, feature, last_supported_version, useinstead,
                issue, deprecated_since_version)

        self.fullMessage = ""

        if not feature:
            raise ValueError("feature is required argument of SymPyDeprecationWarning")

        if not deprecated_since_version:
            raise ValueError("deprecated_since_version is a required argument of SymPyDeprecationWarning")

        self.fullMessage = "%s has been deprecated since SymPy %s. " % \
                                   (feature, deprecated_since_version)
</code-snippet>
<code-snippet location="sympy/utilities/exceptions.py:150-177">
self.fullMessage = "%s has been deprecated since SymPy %s. " % \
                                   (feature, deprecated_since_version)

        if last_supported_version:
            self.fullMessage += ("It will be last supported in SymPy "
                "version %s. ") % last_supported_version
        if useinstead:
            self.fullMessage += "Use %s instead. " % useinstead

        if not issue:
            raise ValueError("""\
The issue argument of SymPyDeprecationWarning is required.
This should be a separate issue with the "Deprecation Removal" label. See
https://github.com/sympy/sympy/wiki/Deprecating-policy.\
""")

        self.fullMessage += ("See "
            "https://github.com/sympy/sympy/issues/%d for more "
            "info. ") % issue

        if value:
            if not isinstance(value, string_types):
                value = "(%s)" % repr(value)
            value = " " + value
        else:
            value = ""

        self.fullMessage += value
</code-snippet>
<code-snippet location="sympy/utilities/exceptions.py:85-97">
Either (or both) of the arguments ``last_supported_version`` and
    ``useinstead`` can be omitted. In this case the corresponding sentence
    will not be shown:

    >>> SymPyDeprecationWarning(feature="Such and such",
    ...     useinstead="this other feature", issue=1065,
    ...     deprecated_since_version="1.1")
    Such and such has been deprecated since SymPy 1.1. Use this other
    feature instead. See https://github.com/sympy/sympy/issues/1065 for
    more info.

    You can still provide the argument value.  If it is a string, it
    will be appended to the end of the message:
</code-snippet>
<code-snippet location="sympy/utilities/exceptions.py:1-10">
"""
General SymPy exceptions and warnings.
"""

from __future__ import print_function, division

import warnings

from sympy.core.compatibility import string_types
from sympy.utilities.misc import filldedent
</code-snippet>
<code-snippet location="sympy/combinatorics/util.py:1-14">
from __future__ import print_function, division

from sympy.combinatorics.permutations import Permutation, _af_invert, _af_rmul
from sympy.core.compatibility import range
from sympy.ntheory import isprime

rmul = Permutation.rmul
_af_new = Permutation._af_new

############################################
#
# Utilities for computational group theory
#
############################################
</code-snippet>
<code-snippet location="sympy/integrals/heurisch.py:462-479">
# TODO: caching is significant factor for why permutations work at all. Change this.
    V = _symbols('x', len(terms))


    # sort mapping expressions from largest to smallest (last is always x).
    mapping = list(reversed(list(zip(*ordered(                          #
        [(a[0].as_independent(x)[1], a) for a in zip(terms, V)])))[1])) #
    rev_mapping = {v: k for k, v in mapping}                            #
    if mappings is None:                                                #
        # optimizing the number of permutations of mapping              #
        assert mapping[-1][0] == x # if not, find it and correct this comment
        unnecessary_permutations = [mapping.pop(-1)]
        mappings = permutations(mapping)
    else:
        unnecessary_permutations = unnecessary_permutations or []

    def _substitute(expr):
        return expr.subs(mapping)
</code-snippet>
<code-snippet location="sympy/utilities/exceptions.py:96-110">
You can still provide the argument value.  If it is a string, it
    will be appended to the end of the message:

    >>> SymPyDeprecationWarning(
    ...     feature="Such and such",
    ...     useinstead="this other feature",
    ...     value="Contact the developers for further information.",
    ...     issue=1065,
    ...     deprecated_since_version="1.1")
    Such and such has been deprecated since SymPy 1.1. Use this other
    feature instead. See https://github.com/sympy/sympy/issues/1065 for
    more info.  Contact the developers for further information.

    If, however, the argument value does not hold a string, a string
    representation of the object will be appended to the message:
</code-snippet>
</context>