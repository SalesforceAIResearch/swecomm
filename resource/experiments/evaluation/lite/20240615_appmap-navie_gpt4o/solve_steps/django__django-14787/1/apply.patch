diff --git a/django/utils/decorators.py b/django/utils/decorators.py
index 5c9a5d01c7..365358bc31 100644
--- a/django/utils/decorators.py
+++ b/django/utils/decorators.py
@@ -1,6 +1,6 @@
 "Functions that help with dynamically creating decorators for views."
 
-from functools import partial, update_wrapper, wraps
+from functools import partial, update_wrapper, wraps, WRAPPER_ASSIGNMENTS
 
 
 class classonlymethod(classmethod):
@@ -46,7 +46,7 @@ def _multi_decorate(decorators, method):
     for dec in decorators:
         _update_method_wrapper(_wrapper, dec)
     # Preserve any existing attributes of 'method', including the name.
-    update_wrapper(_wrapper, method)
+    update_wrapper(_wrapper, method, assigned=WRAPPER_ASSIGNMENTS)
     return _wrapper
 
 
@@ -73,7 +73,8 @@ def method_decorator(decorator, name=''):
                 "%s (%s)." % (name, obj, method)
             )
         _wrapper = _multi_decorate(decorator, method)
-        setattr(obj, name, _wrapper)
+        update_wrapper(_wrapper, method, assigned=WRAPPER_ASSIGNMENTS)
+        setattr(obj, name, _wrapper)        
         return obj
 
     # Don't worry about making _dec look similar to a list/tuple as it's rather
