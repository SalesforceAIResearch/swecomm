diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py
index a26145117..ed30af45a 100644
--- a/sklearn/compose/_column_transformer.py
+++ b/sklearn/compose/_column_transformer.py
@@ -823,14 +823,17 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
 
     def _hstack(self, Xs):
         """Stacks Xs horizontally.
-
+    
         This allows subclasses to control the stacking behavior, while reusing
         everything else from ColumnTransformer.
-
+    
         Parameters
         ----------
         Xs : list of {array-like, sparse matrix, dataframe}
         """
+        # Filter out empty transformers results to avoid length mismatch issues
+        Xs = [X for X in Xs if X.shape[1] > 0]
+    
         if self.sparse_output_:
             try:
                 # since all columns should be numeric before stacking them
@@ -845,7 +848,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
                     "For a sparse output, all columns should "
                     "be a numeric or convertible to a numeric."
                 ) from e
-
+    
             return sparse.hstack(converted_Xs).tocsr()
         else:
             Xs = [f.toarray() if sparse.issparse(f) else f for f in Xs]
@@ -853,15 +856,15 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
             if config["dense"] == "pandas" and all(hasattr(X, "iloc") for X in Xs):
                 pd = check_pandas_support("transform")
                 output = pd.concat(Xs, axis=1)
-
+    
                 # If all transformers define `get_feature_names_out`, then transform
                 # will adjust the column names to be consistent with
                 # verbose_feature_names_out. Here we prefix the feature names if
                 # verbose_feature_names_out=True.
-
+    
                 if not self.verbose_feature_names_out:
                     return output
-
+    
                 transformer_names = [
                     t[0] for t in self._iter(fitted=True, replace_strings=True)
                 ]
@@ -871,7 +874,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
                 )
                 output.columns = names_out
                 return output
-
+    
             return np.hstack(Xs)
 
     def _sk_visual_block_(self):
