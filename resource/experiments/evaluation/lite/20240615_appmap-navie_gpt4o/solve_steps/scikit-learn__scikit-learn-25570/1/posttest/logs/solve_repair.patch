diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py
index a26145117..f68ecf623 100644
--- a/sklearn/compose/_column_transformer.py
+++ b/sklearn/compose/_column_transformer.py
@@ -372,27 +372,32 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
             transformers = [
                 (name, trans, column)
                 for (name, trans, _), column in zip(self.transformers, self._columns)
+                if not _is_empty_column_selection(column)
             ]
+
             # add transformer tuple for remainder
             if self._remainder[2]:
                 transformers = chain(transformers, [self._remainder])
-        get_weight = (self.transformer_weights or {}).get
-
-        output_config = _get_output_config("transform", self)
-        for name, trans, columns in transformers:
-            if replace_strings:
-                # replace 'passthrough' with identity transformer and
-                # skip in case of 'drop'
-                if trans == "passthrough":
-                    trans = FunctionTransformer(
-                        accept_sparse=True,
-                        check_inverse=False,
-                        feature_names_out="one-to-one",
-                    ).set_output(transform=output_config["dense"])
-                elif trans == "drop":
-                    continue
-                elif _is_empty_column_selection(columns):
-                    continue
+            get_weight = (self.transformer_weights or {}).get
+
+            output_config = _get_output_config("transform", self)
+            for name, trans, columns in transformers:
+                if replace_strings:
+                    # replace 'passthrough' with identity transformer and
+                    # skip in case of 'drop' or empty column selection
+                    if trans == "passthrough":
+                        trans = FunctionTransformer(
+                            accept_sparse=True,
+                            check_inverse=False,
+                            feature_names_out="one-to-one",
+                        ).set_output(transform=output_config["dense"])
+                    elif trans == "drop":
+                        continue
+                    elif _is_empty_column_selection(columns):
+                        continue
+
+            if _is_empty_column_selection(columns):
+                continue
 
             if column_as_strings:
                 # Convert all columns to using their string labels
@@ -795,6 +800,14 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):
                 and named_transformers[name] != "drop"
             ]
 
+            non_dropped_indices = [
+                ind
+                for name, ind in self._transformer_to_input_indices.items()
+                if name in named_transformers and not _is_empty_column_selection(ind)
+                and isinstance(named_transformers[name], str)
+                and named_transformers[name] != "drop"
+            ]
+
             all_indices = set(chain(*non_dropped_indices))
             all_names = set(self.feature_names_in_[ind] for ind in all_indices)
 
