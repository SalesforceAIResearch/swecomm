diff --git a/sympy/functions/special/hyper.py b/sympy/functions/special/hyper.py
index e45e964453..2389e9cdb0 100644
--- a/sympy/functions/special/hyper.py
+++ b/sympy/functions/special/hyper.py
@@ -1055,21 +1055,35 @@ class HyperRep_cosasin(HyperRep):
     # Note there are many alternative expressions, e.g. as powers of a sum of
     # square roots.
 
+    @classmethod
+    def _iterative_eval(cls, func, *args):
+        """ 
+        Use an iterative approach with caching to handle recursion depth issues
+        """
+        from sympy.core.cache import cacheit
+        @cacheit
+        def cached_func(*cached_args):
+            return func(*cached_args)
+
+        result = cached_func(*args)
+
+        return result
+
     @classmethod
     def _expr_small(cls, a, z):
-        return cos(2*a*asin(sqrt(z)))
+        return cls._iterative_eval(cos, 2*a*cls._iterative_eval(asin, sqrt(z)))
 
     @classmethod
     def _expr_small_minus(cls, a, z):
-        return cosh(2*a*asinh(sqrt(z)))
+        return cls._iterative_eval(cosh, 2*a*cls._iterative_eval(asinh, sqrt(z)))
 
     @classmethod
     def _expr_big(cls, a, z, n):
-        return cosh(2*a*acosh(sqrt(z)) + a*pi*I*(2*n - 1))
+        return cls._iterative_eval(cosh, 2*a*cls._iterative_eval(acosh, sqrt(z)) + a*pi*I*(2*n - 1))
 
     @classmethod
     def _expr_big_minus(cls, a, z, n):
-        return cosh(2*a*asinh(sqrt(z)) + 2*a*pi*I*n)
+        return cls._iterative_eval(cosh, 2*a*cls._iterative_eval(asinh, sqrt(z)) + 2*a*pi*I*n)
 
 
 class HyperRep_sinasin(HyperRep):
