diff --git a/lib/matplotlib/collections.py b/lib/matplotlib/collections.py
index bf88dd2b68..5b68845637 100644
--- a/lib/matplotlib/collections.py
+++ b/lib/matplotlib/collections.py
@@ -894,6 +894,11 @@ class Collection(artist.Artist, cm.ScalarMappable):
             self._edgecolors = self._mapped_colors
         else:
             self._set_edgecolor(self._original_edgecolor)
+        
+        # Notify associated colorbar to update its norm parameters if needed.
+        if hasattr(self, 'colorbar') and self.colorbar:
+            self.colorbar.update_normal(self)
+            
         self.stale = True
 
     def get_fill(self):
diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py
index f9e4dcbd62..cd573b7ef2 100644
--- a/lib/matplotlib/colors.py
+++ b/lib/matplotlib/colors.py
@@ -1777,10 +1777,32 @@ class FuncNorm(Normalize):
     """
 
 
-LogNorm = make_norm_from_scale(
-    functools.partial(scale.LogScale, nonpositive="mask"))(Normalize)
-LogNorm.__name__ = LogNorm.__qualname__ = "LogNorm"
-LogNorm.__doc__ = "Normalize a given value to the 0-1 range on a log scale."
+class LogNorm(Normalize):
+    def __call__(self, value, clip=None):
+        if clip is None:
+            clip = self.clip
+
+        result, is_scalar = self.process_value(value)
+
+        self.autoscale_None(result)
+        vmin, vmax = self.vmin, self.vmax
+        if vmin > vmax:
+            raise ValueError("minvalue must be less than or equal to maxvalue")
+        if vmin <= 0 or vmax <= 0:
+            raise ValueError("LogNorm can only be applied to positive values")
+        
+        if clip:
+            mask = np.ma.getmask(result)
+            with np.errstate(invalid='ignore'):
+                result = np.ma.array(
+                    np.clip(result.filled(vmax), vmin, vmax), mask=mask)
+        
+        result = np.ma.log(result)
+        result -= np.log(vmin)
+        result /= (np.log(vmax) - np.log(vmin))
+        if is_scalar:
+            result = result[0]
+        return result
 
 
 @make_norm_from_scale(
@@ -1956,7 +1978,7 @@ class BoundaryNorm(Normalize):
         if clip and extend != 'neither':
             raise ValueError("'clip=True' is not compatible with 'extend'")
         super().__init__(vmin=boundaries[0], vmax=boundaries[-1], clip=clip)
-        self.boundaries = np.asarray(boundaries)
+        self.boundaries = np.asarray(boundaries, dtype=float)
         self.N = len(self.boundaries)
         if self.N < 2:
             raise ValueError("You must provide at least 2 boundaries "
