diff --git a/astropy/wcs/src/astropy_wcs.c b/astropy/wcs/src/astropy_wcs.c
index 080598f7d..654742f59 100644
--- a/astropy/wcs/src/astropy_wcs.c
+++ b/astropy/wcs/src/astropy_wcs.c
@@ -235,6 +235,80 @@ Wcs_all_pix2world(
     goto exit;
   }
 
+  // Handle empty input
+  if (PyArray_SIZE(pixcrd) == 0) {
+    world = (PyArrayObject*)PyArray_SimpleNew(2, PyArray_DIMS(pixcrd), NPY_DOUBLE);
+    if (world == NULL) {
+        goto exit;
+    }
+    Py_XDECREF(pixcrd);
+    return (PyObject*)world;
+  }
+
+  world = (PyArrayObject*)PyArray_SimpleNew(2, PyArray_DIMS(pixcrd), NPY_DOUBLE);
+  if (world == NULL) {
+    goto exit;
+  }
+
+  /* Make the call */
+  Py_BEGIN_ALLOW_THREADS
+  preoffset_array(pixcrd, origin);
+  wcsprm_python2c(self->x.wcs);
+  status = pipeline_all_pixel2world(&self->x,
+                                    (unsigned int)PyArray_DIM(pixcrd, 0),
+                                    (unsigned int)PyArray_DIM(pixcrd, 1),
+                                    (double*)PyArray_DATA(pixcrd),
+                                    (double*)PyArray_DATA(world));
+  wcsprm_c2python(self->x.wcs);
+  unoffset_array(pixcrd, origin);
+  Py_END_ALLOW_THREADS
+  /* unoffset_array(world, origin); */
+
+ exit:
+  Py_XDECREF(pixcrd);
+
+  if (status == 0 || status == 8) {
+    return (PyObject*)world;
+  } else {
+    Py_XDECREF(world);
+    if (status == -1) {
+      PyErr_SetString(
+        PyExc_ValueError,
+        "Wrong number of dimensions in input array.  Expected 2.");
+      return NULL;
+    } else {
+      if (status == -1) {
+        /* exception already set */
+        return NULL;
+      } else {
+        wcserr_to_python_exc(self->x.err);
+        return NULL;
+      }
+    }
+  }
+}
+
+  if (!PyArg_ParseTupleAndKeywords(
+          args, kwds, "Oi:all_pix2world", (char **)keywords,
+          &pixcrd_obj, &origin)) {
+    return NULL;
+  }
+
+  naxis = self->x.wcs->naxis;
+
+  pixcrd = (PyArrayObject*)PyArray_ContiguousFromAny(pixcrd_obj, NPY_DOUBLE, 2, 2);
+  if (pixcrd == NULL) {
+    return NULL;
+  }
+
+  if (PyArray_DIM(pixcrd, 1) < naxis) {
+    PyErr_Format(
+      PyExc_RuntimeError,
+      "Input array must be 2-dimensional, where the second dimension >= %d",
+      naxis);
+    goto exit;
+  }
+
   world = (PyArrayObject*)PyArray_SimpleNew(2, PyArray_DIMS(pixcrd), NPY_DOUBLE);
   if (world == NULL) {
     goto exit;
diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py
index d3a06f2b3..16370803d 100644
--- a/astropy/wcs/wcs.py
+++ b/astropy/wcs/wcs.py
@@ -1349,13 +1349,18 @@ reduce these to 2 dimensions using the naxis kwarg.
     def wcs_pix2world(self, *args, **kwargs):
         if self.wcs is None:
             raise ValueError("No basic WCS settings were created.")
+    
+        # Check for empty arrays and return empty results if so
+        if any(isinstance(arg, np.ndarray) and arg.size == 0 for arg in args):
+            return tuple(np.empty_like(arg) for arg in args if isinstance(arg, np.ndarray))
+    
         return self._array_converter(
             lambda xy, o: self.wcs.p2s(xy, o)['world'],
             'output', *args, **kwargs)
     wcs_pix2world.__doc__ = """
         Transforms pixel coordinates to world coordinates by doing
         only the basic `wcslib`_ transformation.
-
+    
         No `SIP`_ or `distortion paper`_ table lookup correction is
         applied.  To perform distortion correction, see
         `~astropy.wcs.WCS.all_pix2world`,
@@ -2156,6 +2161,11 @@ reduce these to 2 dimensions using the naxis kwarg.
     def wcs_world2pix(self, *args, **kwargs):
         if self.wcs is None:
             raise ValueError("No basic WCS settings were created.")
+    
+        # Check for empty arrays and return empty results if so
+        if any(isinstance(arg, np.ndarray) and arg.size == 0 for arg in args):
+            return tuple(np.empty_like(arg) for arg in args if isinstance(arg, np.ndarray))
+    
         return self._array_converter(
             lambda xy, o: self.wcs.s2p(xy, o)['pixcrd'],
             'input', *args, **kwargs)
@@ -2163,21 +2173,21 @@ reduce these to 2 dimensions using the naxis kwarg.
         Transforms world coordinates to pixel coordinates, using only
         the basic `wcslib`_ WCS transformation.  No `SIP`_ or
         `distortion paper`_ table lookup transformation is applied.
-
+    
         Parameters
         ----------
         {0}
-
+    
             For a transformation that is not two-dimensional, the
             two-argument form must be used.
-
+    
         {1}
-
+    
         Returns
         -------
-
+    
         {2}
-
+    
         Notes
         -----
         The order of the axes for the input world array is determined by
@@ -2186,30 +2196,30 @@ reduce these to 2 dimensions using the naxis kwarg.
         `~astropy.wcs.Wcsprm.lat`, `~astropy.wcs.Wcsprm.lng`,
         `~astropy.wcs.Wcsprm.lattyp` and `~astropy.wcs.Wcsprm.lngtyp`
         members can be used to determine the order of the axes.
-
+    
         Raises
         ------
         MemoryError
             Memory allocation failed.
-
+    
         SingularMatrixError
             Linear transformation matrix is singular.
-
+    
         InconsistentAxisTypesError
             Inconsistent or unrecognized coordinate axis types.
-
+    
         ValueError
             Invalid parameter value.
-
+    
         ValueError
             Invalid coordinate transformation parameters.
-
+    
         ValueError
             x- and y-coordinate arrays are not the same size.
-
+    
         InvalidTransformError
             Invalid coordinate transformation parameters.
-
+    
         InvalidTransformError
             Ill-conditioned coordinate transformation parameters.
         """.format(__.TWO_OR_MORE_ARGS('naxis', 8),
