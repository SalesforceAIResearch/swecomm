diff --git a/xarray/core/concat.py b/xarray/core/concat.py
index ecae2566..e4195d73 100644
--- a/xarray/core/concat.py
+++ b/xarray/core/concat.py
@@ -16,6 +16,7 @@ def concat(
     positions=None,
     fill_value=dtypes.NA,
     join="outer",
+    ignore_missing_vars=False,
 ):
     """Concatenate xarray objects along a new or existing dimension.
 
@@ -128,7 +129,7 @@ def concat(
             "can only concatenate xarray Dataset and DataArray "
             "objects, got %s" % type(first_obj)
         )
-    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)
+        return f(objs, dim, data_vars, coords, compat, positions, fill_value, join, ignore_missing_vars)
 
 
 def _calc_concat_dim_coord(dim):
@@ -155,7 +156,7 @@ def _calc_concat_dim_coord(dim):
     return dim, coord
 
 
-def _calc_concat_over(datasets, dim, dim_names, data_vars, coords, compat):
+def _calc_concat_over(datasets, dim, dim_names, data_vars, coords, compat, ignore_missing_vars):
     """
     Determine which dataset variables need to be concatenated in the result,
     """
@@ -287,7 +288,7 @@ def _dataset_concat(
     unlabeled_dims = dim_names - coord_names
 
     both_data_and_coords = coord_names & data_names
-    if both_data_and_coords:
+    if both_data_and_coords and not ignore_missing_vars:
         raise ValueError(
             "%r is a coordinate in some datasets but not others." % both_data_and_coords
         )
@@ -301,7 +302,7 @@ def _dataset_concat(
 
     # determine which variables to concatentate
     concat_over, equals, concat_dim_lengths = _calc_concat_over(
-        datasets, dim, dim_names, data_vars, coords, compat
+        datasets, dim, dim_names, data_vars, coords, compat, ignore_missing_vars
     )
 
     # determine which variables to merge, and then merge them according to compat
@@ -313,11 +314,14 @@ def _dataset_concat(
 
         for ds in datasets:
             absent_merge_vars = variables_to_merge - set(ds.variables)
-            if absent_merge_vars:
+            if absent_merge_vars and not ignore_missing_vars:
                 raise ValueError(
                     "variables %r are present in some datasets but not others. "
                     % absent_merge_vars
                 )
+            elif ignore_missing_vars:
+                for var in absent_merge_vars:
+                    to_merge[var].append(Variable(dims=(), data=fill_value))
 
             for var in variables_to_merge:
                 to_merge[var].append(ds.variables[var])
@@ -394,6 +398,7 @@ def _dataarray_concat(
     positions,
     fill_value=dtypes.NA,
     join="outer",
+    ignore_missing_vars=False,
 ):
     arrays = list(arrays)
 
@@ -422,5 +427,6 @@ def _dataarray_concat(
         positions,
         fill_value=fill_value,
         join=join,
+        ignore_missing_vars=ignore_missing_vars,
     )
     return arrays[0]._from_temp_dataset(ds, name)
