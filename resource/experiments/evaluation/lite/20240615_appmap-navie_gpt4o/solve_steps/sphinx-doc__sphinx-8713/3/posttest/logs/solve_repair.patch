diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py
index 755088ca5..c4df8316a 100644
--- a/sphinx/ext/napoleon/docstring.py
+++ b/sphinx/ext/napoleon/docstring.py
@@ -682,7 +682,13 @@ class GoogleDocstring:
         return self._parse_generic_section(_('Notes'), use_admonition)
 
     def _parse_other_parameters_section(self, section: str) -> List[str]:
-        return self._format_fields(_('Other Parameters'), self._consume_fields())
+        if self._config.napoleon_use_param:
+            # Allow to declare multiple parameters at once (ex: x, y: int)
+            fields = self._consume_fields(multiple=True)
+            return self._format_docutils_params(fields)
+        else:
+            fields = self._consume_fields()
+            return self._format_fields(_('Other Parameters'), fields)
 
     def _parse_parameters_section(self, section: str) -> List[str]:
         if self._config.napoleon_use_param:
@@ -917,6 +923,17 @@ def _token_type(token: str, location: str = None) -> str:
         else:
             return True
 
+    known_warnings = {
+        'invalid value set (missing closing brace)': token.startswith("{") and not token.endswith("}"),
+        'invalid value set (missing opening brace)': not token.startswith("{") and token.endswith("}"),
+        'malformed string literal (missing closing quote)': token.startswith(('"', "'")) and not token.endswith(('"', "'")),
+        'malformed string literal (missing opening quote)': not token.startswith(('"', "'")) and token.endswith(('"', "'")),
+    }
+
+    for warning_message, condition in known_warnings.items():
+        if condition:
+            logger.warning(f"{warning_message}: %s", token, location=location)
+
     if token.startswith(" ") or token.endswith(" "):
         type_ = "delimiter"
     elif (
@@ -926,33 +943,7 @@ def _token_type(token: str, location: str = None) -> str:
             (token.startswith("'") and token.endswith("'"))
     ):
         type_ = "literal"
-    elif token.startswith("{"):
-        logger.warning(
-            __("invalid value set (missing closing brace): %s"),
-            token,
-            location=location,
-        )
-        type_ = "literal"
-    elif token.endswith("}"):
-        logger.warning(
-            __("invalid value set (missing opening brace): %s"),
-            token,
-            location=location,
-        )
-        type_ = "literal"
-    elif token.startswith("'") or token.startswith('"'):
-        logger.warning(
-            __("malformed string literal (missing closing quote): %s"),
-            token,
-            location=location,
-        )
-        type_ = "literal"
-    elif token.endswith("'") or token.endswith('"'):
-        logger.warning(
-            __("malformed string literal (missing opening quote): %s"),
-            token,
-            location=location,
-        )
+    elif token in known_warnings:
         type_ = "literal"
     elif token in ("optional", "default"):
         # default is not a official keyword (yet) but supported by the
