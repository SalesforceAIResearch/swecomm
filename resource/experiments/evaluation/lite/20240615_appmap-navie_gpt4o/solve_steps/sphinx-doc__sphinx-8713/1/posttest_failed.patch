diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py
index 755088ca5..e456ec6c9 100644
--- a/sphinx/ext/napoleon/docstring.py
+++ b/sphinx/ext/napoleon/docstring.py
@@ -682,7 +682,11 @@ class GoogleDocstring:
         return self._parse_generic_section(_('Notes'), use_admonition)
 
     def _parse_other_parameters_section(self, section: str) -> List[str]:
-        return self._format_fields(_('Other Parameters'), self._consume_fields())
+        fields = self._consume_fields()
+        if self._config.napoleon_use_param:
+            return self._format_docutils_params(fields)
+        else:
+            return self._format_fields(_('Other Parameters'), fields)
 
     def _parse_parameters_section(self, section: str) -> List[str]:
         if self._config.napoleon_use_param:
@@ -926,28 +930,28 @@ def _token_type(token: str, location: str = None) -> str:
             (token.startswith("'") and token.endswith("'"))
     ):
         type_ = "literal"
-    elif token.startswith("{"):
+    elif token.startswith("{") and not token.endswith("}"):
         logger.warning(
             __("invalid value set (missing closing brace): %s"),
             token,
             location=location,
         )
         type_ = "literal"
-    elif token.endswith("}"):
+    elif token.endswith("}") and not token.startswith("{"):
         logger.warning(
             __("invalid value set (missing opening brace): %s"),
             token,
             location=location,
         )
         type_ = "literal"
-    elif token.startswith("'") or token.startswith('"'):
+    elif (token.startswith("'") and not token.endswith("'")) or (token.startswith('"') and not token.endswith('"')):
         logger.warning(
             __("malformed string literal (missing closing quote): %s"),
             token,
             location=location,
         )
         type_ = "literal"
-    elif token.endswith("'") or token.endswith('"'):
+    elif (token.endswith("'") and not token.startswith("'")) or (token.endswith('"') and not token.startswith('"')):
         logger.warning(
             __("malformed string literal (missing opening quote): %s"),
             token,
@@ -955,7 +959,7 @@ def _token_type(token: str, location: str = None) -> str:
         )
         type_ = "literal"
     elif token in ("optional", "default"):
-        # default is not a official keyword (yet) but supported by the
+        # default is not an official keyword (yet) but supported by the
         # reference implementation (numpydoc) and widely used
         type_ = "control"
     elif _xref_regex.match(token):
