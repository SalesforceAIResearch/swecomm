diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py
index a436880c4b..212ca1d8f9 100644
--- a/sympy/physics/units/unitsystem.py
+++ b/sympy/physics/units/unitsystem.py
@@ -170,18 +170,21 @@ def _collect_factor_and_dimension(self, expr):
             if self.get_dimension_system().is_dimensionless(exp_dim):
                 exp_dim = 1
             return factor ** exp_factor, dim ** (exp_factor * exp_dim)
-        elif isinstance(expr, Add):
-            factor, dim = self._collect_factor_and_dimension(expr.args[0])
-            for addend in expr.args[1:]:
-                addend_factor, addend_dim = \
-                    self._collect_factor_and_dimension(addend)
-                if dim != addend_dim:
-                    raise ValueError(
-                        'Dimension of "{}" is {}, '
-                        'but it should be {}'.format(
-                            addend, addend_dim, dim))
-                factor += addend_factor
-            return factor, dim
+            elif isinstance(expr, Add):
+                factor, dim = self._collect_factor_and_dimension(expr.args[0])
+                for addend in expr.args[1:]:
+                    addend_factor, addend_dim = \
+                        self._collect_factor_and_dimension(addend)
+                    # Simplify dimensions before comparison
+                    simplified_dim = self.get_dimensional_expr(dim)
+                    simplified_addend_dim = self.get_dimensional_expr(addend_dim)
+                    if self.get_dimensional_expr(simplified_dim) != self.get_dimensional_expr(simplified_addend_dim):
+                        raise ValueError(
+                            'Dimension of "{}" is {}, '
+                            'but it should be {}'.format(
+                                addend, simplified_addend_dim, simplified_dim))
+                    factor += addend_factor
+                return factor, dim
         elif isinstance(expr, Derivative):
             factor, dim = self._collect_factor_and_dimension(expr.args[0])
             for independent, count in expr.variable_count:
