<context>
<code-snippet location="sympy/physics/units/systems/length_weight_time.py:65-84">
# gram; used to define its prefixed units
dimsys_length_weight_time.set_quantity_dimension(gram, mass)
dimsys_length_weight_time.set_quantity_scale_factor(gram, One)

dimsys_length_weight_time.set_quantity_dimension(second, time)
dimsys_length_weight_time.set_quantity_scale_factor(second, One)

# derived units

dimsys_length_weight_time.set_quantity_dimension(newton, force)
dimsys_length_weight_time.set_quantity_scale_factor(newton, kilogram*meter/second**2)

dimsys_length_weight_time.set_quantity_dimension(joule, energy)
dimsys_length_weight_time.set_quantity_scale_factor(joule, newton*meter)

dimsys_length_weight_time.set_quantity_dimension(watt, power)
dimsys_length_weight_time.set_quantity_scale_factor(watt, joule/second)

dimsys_length_weight_time.set_quantity_dimension(pascal, pressure)
dimsys_length_weight_time.set_quantity_scale_factor(pascal, newton/meter**2)
</code-snippet>
<code-snippet location="sympy/physics/units/systems/length_weight_time.py:99-122">
dimsys_length_weight_time.set_quantity_dimension(liter, length**3)
dimsys_length_weight_time.set_quantity_scale_factor(liter, meter**3/1000)


# Newton constant
# REF: NIST SP 959 (June 2019)

dimsys_length_weight_time.set_quantity_dimension(gravitational_constant, length ** 3 * mass ** -1 * time ** -2)
dimsys_length_weight_time.set_quantity_scale_factor(gravitational_constant, 6.67430e-11*m**3/(kg*s**2))

# speed of light

dimsys_length_weight_time.set_quantity_dimension(speed_of_light, velocity)
dimsys_length_weight_time.set_quantity_scale_factor(speed_of_light, 299792458*meter/second)


# Planck constant
# REF: NIST SP 959 (June 2019)

dimsys_length_weight_time.set_quantity_dimension(planck, action)
dimsys_length_weight_time.set_quantity_scale_factor(planck, 6.62607015e-34*joule*second)

# Reduced Planck constant
# REF: NIST SP 959 (June 2019)
</code-snippet>
<code-snippet location="sympy/physics/units/systems/length_weight_time.py:37-67">
dimsys_length_weight_time = DimensionSystem([
    # Dimensional dependencies for MKS base dimensions
    length,
    mass,
    time,
], dimensional_dependencies=dict(
    # Dimensional dependencies for derived dimensions
    velocity=dict(length=1, time=-1),
    acceleration=dict(length=1, time=-2),
    momentum=dict(mass=1, length=1, time=-1),
    force=dict(mass=1, length=1, time=-2),
    energy=dict(mass=1, length=2, time=-2),
    power=dict(length=2, mass=1, time=-3),
    pressure=dict(mass=1, length=-1, time=-2),
    frequency=dict(time=-1),
    action=dict(length=2, mass=1, time=-1),
    area=dict(length=2),
    volume=dict(length=3),
))


One = S.One


# Base units:
dimsys_length_weight_time.set_quantity_dimension(meter, length)
dimsys_length_weight_time.set_quantity_scale_factor(meter, One)

# gram; used to define its prefixed units
dimsys_length_weight_time.set_quantity_dimension(gram, mass)
dimsys_length_weight_time.set_quantity_scale_factor(gram, One)
</code-snippet>
<code-snippet location="sympy/physics/units/systems/length_weight_time.py:83-104">
dimsys_length_weight_time.set_quantity_dimension(pascal, pressure)
dimsys_length_weight_time.set_quantity_scale_factor(pascal, newton/meter**2)

dimsys_length_weight_time.set_quantity_dimension(hertz, frequency)
dimsys_length_weight_time.set_quantity_scale_factor(hertz, One)

# Other derived units:

dimsys_length_weight_time.set_quantity_dimension(dioptre, 1 / length)
dimsys_length_weight_time.set_quantity_scale_factor(dioptre, 1/meter)

# Common volume and area units

dimsys_length_weight_time.set_quantity_dimension(hectare, length**2)
dimsys_length_weight_time.set_quantity_scale_factor(hectare, (meter**2)*(10000))

dimsys_length_weight_time.set_quantity_dimension(liter, length**3)
dimsys_length_weight_time.set_quantity_scale_factor(liter, meter**3/1000)


# Newton constant
# REF: NIST SP 959 (June 2019)
</code-snippet>
<code-snippet location="sympy/physics/units/quantities.py:106-121">
def set_scale_factor(self, scale_factor, unit_system="SI"):
        sympy_deprecation_warning(
            f"""
            Quantity.set_scale_factor() is deprecated. Use either
            unit_system.set_quantity_scale_factors() or
            {self}.set_global_relative_scale_factor() instead.
            """,
            deprecated_since_version="1.5",
            active_deprecations_target="deprecated-quantity-methods",
        )
        from sympy.physics.units import UnitSystem
        unit_system = UnitSystem.get_unit_system(unit_system)
        unit_system.set_quantity_scale_factor(self, scale_factor)

    def set_global_dimension(self, dimension):
        _QuantityMapper._quantity_dimension_global[self] = dimension
</code-snippet>
<code-snippet location="sympy/physics/units/quantities.py:220-248">
def convert_to(self, other, unit_system="SI"):
        """
        Convert the quantity to another quantity of same dimensions.

        Examples
        ========

        >>> from sympy.physics.units import speed_of_light, meter, second
        >>> speed_of_light
        speed_of_light
        >>> speed_of_light.convert_to(meter/second)
        299792458*meter/second

        >>> from sympy.physics.units import liter
        >>> liter.convert_to(meter**3)
        meter**3/1000
        """
        from .util import convert_to
        return convert_to(self, other, unit_system)

    @property
    def free_symbols(self):
        """Return free symbols from quantity."""
        return set()

    @property
    def is_prefixed(self):
        """Whether or not the quantity is prefixed. Eg. `kilogram` is prefixed, but `gram` is not."""
        return self._is_prefixed
</code-snippet>
<code-snippet location="sympy/physics/units/quantities.py:120-142">
def set_global_dimension(self, dimension):
        _QuantityMapper._quantity_dimension_global[self] = dimension

    def set_global_relative_scale_factor(self, scale_factor, reference_quantity):
        """
        Setting a scale factor that is valid across all unit system.
        """
        from sympy.physics.units import UnitSystem
        scale_factor = sympify(scale_factor)
        if isinstance(scale_factor, Prefix):
            self._is_prefixed = True
        # replace all prefixes by their ratio to canonical units:
        scale_factor = scale_factor.replace(
            lambda x: isinstance(x, Prefix),
            lambda x: x.scale_factor
        )
        scale_factor = sympify(scale_factor)
        UnitSystem._quantity_scale_factors_global[self] = (scale_factor, reference_quantity)
        UnitSystem._quantity_dimensional_equivalence_map_global[self] = reference_quantity

    @property
    def name(self):
        return self._name
</code-snippet>
<code-snippet location="sympy/physics/units/quantities.py:42-66">
if dimension is not None:
            sympy_deprecation_warning(
                """
                The 'dimension' argument to to Quantity() is deprecated.
                Instead use the unit_system.set_quantity_dimension() method.
                """,
                deprecated_since_version="1.3",
                active_deprecations_target="deprecated-quantity-dimension-scale-factor"
            )

        if scale_factor is not None:
            sympy_deprecation_warning(
                """
                The 'scale_factor' argument to to Quantity() is deprecated.
                Instead use the unit_system.set_quantity_scale_factors()
                method.
                """,
                deprecated_since_version="1.3",
                active_deprecations_target="deprecated-quantity-dimension-scale-factor"
            )

        if abbrev is None:
            abbrev = name
        elif isinstance(abbrev, str):
            abbrev = Symbol(abbrev)
</code-snippet>
<code-snippet location="sympy/physics/units/util.py:56-82">
``target_units`` may be a single unit/quantity, or a collection of
    units/quantities.

    Examples
    ========

    >>> from sympy.physics.units import speed_of_light, meter, gram, second, day
    >>> from sympy.physics.units import mile, newton, kilogram, atomic_mass_constant
    >>> from sympy.physics.units import kilometer, centimeter
    >>> from sympy.physics.units import gravitational_constant, hbar
    >>> from sympy.physics.units import convert_to
    >>> convert_to(mile, kilometer)
    25146*kilometer/15625
    >>> convert_to(mile, kilometer).n()
    1.609344*kilometer
    >>> convert_to(speed_of_light, meter/second)
    299792458*meter/second
    >>> convert_to(day, second)
    86400*second
    >>> 3*newton
    3*newton
    >>> convert_to(3*newton, kilogram*meter/second**2)
    3*kilogram*meter/second**2
    >>> convert_to(atomic_mass_constant, gram)
    1.660539060e-24*gram

    Conversion to multiple units:
</code-snippet>
<code-snippet location="sympy/physics/units/systems/length_weight_time.py:121-125">
# Reduced Planck constant
# REF: NIST SP 959 (June 2019)

dimsys_length_weight_time.set_quantity_dimension(hbar, action)
dimsys_length_weight_time.set_quantity_scale_factor(hbar, planck / (2 * pi))
</code-snippet>
<code-snippet location="sympy/physics/units/quantities.py:197-218">
@staticmethod
    def _collect_factor_and_dimension(expr, unit_system="SI"):
        """Return tuple with scale factor expression and dimension expression."""
        sympy_deprecation_warning(
            """
            Quantity._collect_factor_and_dimension() is deprecated. This
            method has been moved to the UnitSystem class. Use
            unit_system._collect_factor_and_dimension(expr) instead.
            """,
            deprecated_since_version="1.5",
            active_deprecations_target="deprecated-quantity-methods",
        )
        from sympy.physics.units import UnitSystem
        unit_system = UnitSystem.get_unit_system(unit_system)
        return unit_system._collect_factor_and_dimension(expr)

    def _latex(self, printer):
        if self._latex_repr:
            return self._latex_repr
        else:
            return r'\text{{{}}}'.format(self.args[1] \
                          if len(self.args) >= 2 else self.args[0])
</code-snippet>
<code-snippet location="sympy/physics/units/dimensions.py:52-66">
def set_quantity_scale_factor(self, unit, scale_factor):
        from sympy.physics.units import Quantity
        from sympy.physics.units.prefixes import Prefix
        scale_factor = sympify(scale_factor)
        # replace all prefixes by their ratio to canonical units:
        scale_factor = scale_factor.replace(
            lambda x: isinstance(x, Prefix),
            lambda x: x.scale_factor
        )
        # replace all quantities by their ratio to canonical units:
        scale_factor = scale_factor.replace(
            lambda x: isinstance(x, Quantity),
            lambda x: self.get_quantity_scale_factor(x)
        )
        self._quantity_scale_factors[unit] = scale_factor
</code-snippet>
<code-snippet location="sympy/physics/units/util.py:51-60">
def convert_to(expr, target_units, unit_system="SI"):
    """
    Convert ``expr`` to the same expression with all of its units and quantities
    represented as factors of ``target_units``, whenever the dimension is compatible.

    ``target_units`` may be a single unit/quantity, or a collection of
    units/quantities.

    Examples
    ========
</code-snippet>
<code-snippet location="sympy/physics/units/prefixes.py:138-153">
from sympy.physics.units.quantities import Quantity
    from sympy.physics.units import UnitSystem

    prefixed_units = []

    for prefix_abbr, prefix in prefixes.items():
        quantity = Quantity(
                "%s%s" % (prefix.name, unit.name),
                abbrev=("%s%s" % (prefix.abbrev, unit.abbrev)),
                is_prefixed=True,
           )
        UnitSystem._quantity_dimensional_equivalence_map_global[quantity] = unit
        UnitSystem._quantity_scale_factors_global[quantity] = (prefix.scale_factor, unit)
        prefixed_units.append(quantity)

    return prefixed_units
</code-snippet>
<code-snippet location="sympy/physics/units/dimensions.py:86-92">
def get_quantity_scale_factor(self, unit):
        if unit in self._quantity_scale_factors:
            return self._quantity_scale_factors[unit]
        if unit in self._quantity_scale_factors_global:
            mul_factor, other_unit = self._quantity_scale_factors_global[unit]
            return mul_factor*self.get_quantity_scale_factor(other_unit)
        return S.One
</code-snippet>
<code-snippet location="sympy/physics/units/dimensions.py:30-50">
class _QuantityMapper:

    _quantity_scale_factors_global = {}  # type: tDict[Expr, Expr]
    _quantity_dimensional_equivalence_map_global = {}  # type: tDict[Expr, Expr]
    _quantity_dimension_global = {}  # type: tDict[Expr, Expr]

    def __init__(self, *args, **kwargs):
        self._quantity_dimension_map = {}
        self._quantity_scale_factors = {}

    def set_quantity_dimension(self, unit, dimension):
        from sympy.physics.units import Quantity
        dimension = sympify(dimension)
        if not isinstance(dimension, Dimension):
            if dimension == 1:
                dimension = Dimension(1)
            else:
                raise ValueError("expected dimension or 1")
        elif isinstance(dimension, Quantity):
            dimension = self.get_quantity_dimension(dimension)
        self._quantity_dimension_map[unit] = dimension
</code-snippet>
<code-snippet location="sympy/physics/units/util.py:101-124">
if isinstance(expr, Add):
        return Add.fromiter(convert_to(i, target_units, unit_system)
            for i in expr.args)

    expr = sympify(expr)
    target_units = sympify(target_units)

    if not isinstance(expr, Quantity) and expr.has(Quantity):
        expr = expr.replace(lambda x: isinstance(x, Quantity),
            lambda x: x.convert_to(target_units, unit_system))

    def get_total_scale_factor(expr):
        if isinstance(expr, Mul):
            return reduce(lambda x, y: x * y,
                [get_total_scale_factor(i) for i in expr.args])
        elif isinstance(expr, Pow):
            return get_total_scale_factor(expr.base) ** expr.exp
        elif isinstance(expr, Quantity):
            return unit_system.get_quantity_scale_factor(expr)
        return expr

    depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)
    if depmat is None:
        return expr
</code-snippet>
<code-snippet location="sympy/physics/units/quantities.py:90-104">
return obj

    def set_dimension(self, dimension, unit_system="SI"):
        sympy_deprecation_warning(
            f"""
            Quantity.set_dimension() is deprecated. Use either
            unit_system.set_quantity_dimension() or
            {self}.set_global_dimension() instead.
            """,
            deprecated_since_version="1.5",
            active_deprecations_target="deprecated-quantity-methods",
        )
        from sympy.physics.units import UnitSystem
        unit_system = UnitSystem.get_unit_system(unit_system)
        unit_system.set_quantity_dimension(self, dimension)
</code-snippet>
<code-snippet location="sympy/physics/units/util.py:154-176">
if expr.is_Atom or not expr.has(Prefix, Quantity):
        return expr

    # replace all prefixes with numerical values
    p = expr.atoms(Prefix)
    expr = expr.xreplace({p: p.scale_factor for p in p})

    # replace all quantities of given dimension with a canonical
    # quantity, chosen from those in the expression
    d = sift(expr.atoms(Quantity), lambda i: i.dimension)
    for k in d:
        if len(d[k]) == 1:
            continue
        v = list(ordered(d[k]))
        ref = v[0]/v[0].scale_factor
        expr = expr.xreplace({vi: ref*vi.scale_factor for vi in v[1:]})

    if across_dimensions:
        # combine quantities of different dimensions into a single
        # quantity that is equivalent to the original expression

        if unit_system is None:
            raise ValueError("unit_system must be specified if across_dimensions is True")
</code-snippet>
<code-snippet location="sympy/physics/units/systems/length_weight_time.py:5-21">
from sympy.physics.units import DimensionSystem, hertz, kilogram
from sympy.physics.units.definitions import (
    G, Hz, J, N, Pa, W, c, g, kg, m, s, meter, gram, second, newton,
    joule, watt, pascal)
from sympy.physics.units.definitions.dimension_definitions import (
    acceleration, action, energy, force, frequency, momentum,
    power, pressure, velocity, length, mass, time)
from sympy.physics.units.prefixes import PREFIXES, prefix_unit
from sympy.physics.units.prefixes import (
    kibi, mebi, gibi, tebi, pebi, exbi
)
from sympy.physics.units.definitions import (
    cd, K, coulomb, volt, ohm, siemens, farad, henry, tesla, weber, dioptre,
    lux, katal, gray, becquerel, inch, hectare, liter, julian_year,
    gravitational_constant, speed_of_light, elementary_charge, planck, hbar,
    electronvolt, avogadro_number, avogadro_constant, boltzmann_constant,
    stefan_boltzmann_constant, atomic_mass_constant, molar_gas_constant,
</code-snippet>
<code-snippet location="sympy/physics/units/dimensions.py:269-286">
class DimensionSystem(Basic, _QuantityMapper):
    r"""
    DimensionSystem represents a coherent set of dimensions.

    The constructor takes three parameters:

    - base dimensions;
    - derived dimensions: these are defined in terms of the base dimensions
      (for example velocity is defined from the division of length by time);
    - dependency of dimensions: how the derived dimensions depend
      on the base dimensions.

    Optionally either the ``derived_dims`` or the ``dimensional_dependencies``
    may be omitted.
    """

    def __new__(cls, base_dims, derived_dims=(), dimensional_dependencies={}):
        dimensional_dependencies = dict(dimensional_dependencies)
</code-snippet>
<code-snippet location="sympy/physics/units/quantities.py:140-175">
@property
    def name(self):
        return self._name

    @property
    def dimension(self):
        from sympy.physics.units import UnitSystem
        unit_system = UnitSystem.get_default_unit_system()
        return unit_system.get_quantity_dimension(self)

    @property
    def abbrev(self):
        """
        Symbol representing the unit name.

        Prepend the abbreviation with the prefix symbol if it is defines.
        """
        return self._abbrev

    @property
    def scale_factor(self):
        """
        Overall magnitude of the quantity as compared to the canonical units.
        """
        from sympy.physics.units import UnitSystem
        unit_system = UnitSystem.get_default_unit_system()
        return unit_system.get_quantity_scale_factor(self)

    def _eval_is_positive(self):
        return True

    def _eval_is_constant(self):
        return True

    def _eval_Abs(self):
        return self
</code-snippet>
<code-snippet location="sympy/physics/units/systems/length_weight_time.py:128-141">
__all__ = [
    'mmHg', 'atmosphere', 'newton', 'meter', 'vacuum_permittivity', 'pascal',
    'magnetic_constant', 'angular_mil', 'julian_year', 'weber', 'exbibyte',
    'liter', 'molar_gas_constant', 'faraday_constant', 'avogadro_constant',
    'planck_momentum', 'planck_density', 'gee', 'mol', 'bit', 'gray', 'kibi',
    'bar', 'curie', 'prefix_unit', 'PREFIXES', 'planck_time', 'gram',
    'candela', 'force', 'planck_intensity', 'energy', 'becquerel',
    'planck_acceleration', 'speed_of_light', 'dioptre', 'second', 'frequency',
    'Hz', 'power', 'lux', 'planck_current', 'momentum', 'tebibyte',
    'planck_power', 'degree', 'mebi', 'K', 'planck_volume',
    'quart', 'pressure', 'W', 'joule', 'boltzmann_constant', 'c', 'g',
    'planck_force', 'exbi', 's', 'watt', 'action', 'hbar', 'gibibyte',
    'DimensionSystem', 'cd', 'volt', 'planck_charge',
    'dimsys_length_weight_time', 'pebi', 'vacuum_impedance', 'planck',
</code-snippet>
<code-snippet location="sympy/physics/units/dimensions.py:95-120">
class Dimension(Expr):
    """
    This class represent the dimension of a physical quantities.

    The ``Dimension`` constructor takes as parameters a name and an optional
    symbol.

    For example, in classical mechanics we know that time is different from
    temperature and dimensions make this difference (but they do not provide
    any measure of these quantites.

        >>> from sympy.physics.units import Dimension
        >>> length = Dimension('length')
        >>> length
        Dimension(length)
        >>> time = Dimension('time')
        >>> time
        Dimension(time)

    Dimensions can be composed using multiplication, division and
    exponentiation (by a number) to give new dimensions. Addition and
    subtraction is defined only when the two objects are the same dimension.

        >>> velocity = length / time
        >>> velocity
        Dimension(length/time)
</code-snippet>
<code-snippet location="sympy/physics/units/util.py:82-106">
Conversion to multiple units:

    >>> convert_to(speed_of_light, [meter, second])
    299792458*meter/second
    >>> convert_to(3*newton, [centimeter, gram, second])
    300000*centimeter*gram/second**2

    Conversion to Planck units:

    >>> convert_to(atomic_mass_constant, [gravitational_constant, speed_of_light, hbar]).n()
    7.62963087839509e-20*hbar**0.5*speed_of_light**0.5/gravitational_constant**0.5

    """
    from sympy.physics.units import UnitSystem
    unit_system = UnitSystem.get_unit_system(unit_system)

    if not isinstance(target_units, (Iterable, Tuple)):
        target_units = [target_units]

    if isinstance(expr, Add):
        return Add.fromiter(convert_to(i, target_units, unit_system)
            for i in expr.args)

    expr = sympify(expr)
    target_units = sympify(target_units)
</code-snippet>
<code-snippet location="sympy/physics/units/quantities.py:15-40">
class Quantity(AtomicExpr):
    """
    Physical quantity: can be a unit of measure, a constant or a generic quantity.
    """

    is_commutative = True
    is_real = True
    is_number = False
    is_nonzero = True
    is_physical_constant = False
    _diff_wrt = True

    def __new__(cls, name, abbrev=None, dimension=None, scale_factor=None,
                latex_repr=None, pretty_unicode_repr=None,
                pretty_ascii_repr=None, mathml_presentation_repr=None,
                is_prefixed=False,
                **assumptions):

        if not isinstance(name, Symbol):
            name = Symbol(name)

        # For Quantity(name, dim, scale, abbrev) to work like in the
        # old version of SymPy:
        if not isinstance(abbrev, str) and not \
                   isinstance(abbrev, Symbol):
            dimension, scale_factor, abbrev = abbrev, dimension, scale_factor
</code-snippet>
</context>