diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py
index a7d52a91c..87609136b 100644
--- a/sphinx/ext/viewcode.py
+++ b/sphinx/ext/viewcode.py
@@ -56,7 +56,7 @@ def doctree_read(app: Sphinx, doctree: Node) -> None:
         env._viewcode_modules = {}  # type: ignore
     if app.builder.name == "singlehtml":
         return
-    if app.builder.name.startswith("epub") and not env.config.viewcode_enable_epub:
+    if app.builder.name.startswith("epub") and not app.config.viewcode_enable_epub:
         return
 
     def has_tag(modname: str, fullname: str, docname: str, refname: str) -> bool:
@@ -218,7 +218,7 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non
         maxindex = len(lines) - 1
         for name, docname in used.items():
             type, start, end = tags[name]
-            backlink = urito(pagename, docname) + '#' + refname + '.' + name
+            backlink = urito(env.docname, docname) + '#' + refname + '.' + name
             lines[start] = (
                 '<div class="viewcode-block" id="%s"><a class="viewcode-back" '
                 'href="%s">%s</a>' % (name, backlink, _('[docs]')) +
@@ -231,10 +231,10 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non
             parent = parent.rsplit('.', 1)[0]
             if parent in modnames:
                 parents.append({
-                    'link': urito(pagename,
+                    'link': urito(env.docname,
                                   posixpath.join(OUTPUT_DIRNAME, parent.replace('.', '/'))),
                     'title': parent})
-        parents.append({'link': urito(pagename, posixpath.join(OUTPUT_DIRNAME, 'index')),
+        parents.append({'link': urito(env.docname, posixpath.join(OUTPUT_DIRNAME, 'index')),
                         'title': _('Module code')})
         parents.reverse()
         # putting it all together
@@ -263,7 +263,7 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non
                 html.append('</ul>')
             stack.append(modname + '.')
         html.append('<li><a href="%s">%s</a></li>\n' % (
-            urito(posixpath.join(OUTPUT_DIRNAME, 'index'),
+            urito(env.docname, posixpath.join(OUTPUT_DIRNAME, 'index'),
                   posixpath.join(OUTPUT_DIRNAME, modname.replace('.', '/'))),
             modname))
     html.append('</ul>' * (len(stack) - 1))
