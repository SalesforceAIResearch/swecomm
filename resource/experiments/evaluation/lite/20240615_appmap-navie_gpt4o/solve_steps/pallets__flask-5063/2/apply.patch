diff --git a/src/flask/cli.py b/src/flask/cli.py
index 37a15ff2..e2cadcd9 100644
--- a/src/flask/cli.py
+++ b/src/flask/cli.py
@@ -1018,20 +1018,34 @@ def routes_command(sort: str, all_methods: bool) -> None:
         for rule in rules
     ]
 
-    headers = ("Endpoint", "Methods", "Rule")
+    # Extract subdomain information
+    def get_subdomain(rule):
+        # Check if the blueprint has a subdomain attribute
+        if rule.endpoint and "." in rule.endpoint:
+            blueprint_name = rule.endpoint.split(".")[0]
+            blueprint = current_app.blueprints.get(blueprint_name)
+            if blueprint and hasattr(blueprint, "subdomain"):
+                return blueprint.subdomain
+        # Fall back to None if no subdomain is found
+        return None
+
+    rule_subdomains = [get_subdomain(rule) for rule in rules]
+
+    headers = ("Endpoint", "Methods", "Rule", "Domain")
     widths = (
         max(len(rule.endpoint) for rule in rules),
         max(len(methods) for methods in rule_methods),
         max(len(rule.rule) for rule in rules),
+        max(len(subdomain) if subdomain else 0 for subdomain in rule_subdomains),
     )
     widths = [max(len(h), w) for h, w in zip(headers, widths)]
-    row = "{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}".format(*widths)
+    row = "{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}".format(*widths)
 
     click.echo(row.format(*headers).strip())
     click.echo(row.format(*("-" * width for width in widths)))
 
-    for rule, methods in zip(rules, rule_methods):
-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())
+    for rule, methods, subdomain in zip(rules, rule_methods, rule_subdomains):
+        click.echo(row.format(rule.endpoint, methods, rule.rule, subdomain or "").rstrip())
 
 
 cli = FlaskGroup(
