diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py
index 9b62edad1f..e1efd63116 100644
--- a/django/db/migrations/state.py
+++ b/django/db/migrations/state.py
@@ -96,7 +96,7 @@ class ProjectState:
             self.reload_model(app_label, model_name)
 
     def remove_model(self, app_label, model_name):
-        del self.models[app_label, model_name]
+        del self.models[(app_label, model_name, db_key)]
         if 'apps' in self.__dict__:  # hasattr would cache the property
             self.apps.unregister_model(app_label, model_name)
             # Need to do this explicitly since unregister_model() doesn't clear
@@ -328,8 +328,10 @@ class StateApps(Apps):
         clone.real_models = self.real_models
         return clone
 
-    def register_model(self, app_label, model):
-        self.all_models[app_label][model._meta.model_name] = model
+    def register_model(self, app_label, model, database=None):
+        # Account for database context
+        db_key = database if database else 'default'
+        self.all_models[(app_label, model._meta.model_name, db_key)] = model
         if app_label not in self.app_configs:
             self.app_configs[app_label] = AppConfigStub(app_label)
             self.app_configs[app_label].apps = self
@@ -338,9 +340,11 @@ class StateApps(Apps):
         self.do_pending_operations(model)
         self.clear_cache()
 
-    def unregister_model(self, app_label, model_name):
+    def unregister_model(self, app_label, model_name, database=None):
+        # Account for database context
+        db_key = database if database else 'default'
         try:
-            del self.all_models[app_label][model_name]
+            del self.all_models[(app_label, model_name, db_key)]
             del self.app_configs[app_label].models[model_name]
         except KeyError:
             pass
