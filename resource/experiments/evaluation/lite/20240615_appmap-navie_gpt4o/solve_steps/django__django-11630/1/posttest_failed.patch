diff --git a/django/db/backends/base/introspection.py b/django/db/backends/base/introspection.py
index fb362eed1e..14b34be8f2 100644
--- a/django/db/backends/base/introspection.py
+++ b/django/db/backends/base/introspection.py
@@ -40,19 +40,24 @@ class BaseDatabaseIntrospection:
         order between databases.
         """
         def get_names(cursor):
-            return sorted(ti.name for ti in self.get_table_list(cursor)
+            database_name = self.connection.settings_dict['NAME']
+            return sorted(f"{database_name}.{ti.name}" for ti in self.get_table_list(cursor)
                           if include_views or ti.type == 't')
         if cursor is None:
             with self.connection.cursor() as cursor:
                 return get_names(cursor)
         return get_names(cursor)
 
-    def get_table_list(self, cursor):
-        """
-        Return an unsorted list of TableInfo named tuples of all tables and
-        views that exist in the database.
-        """
-        raise NotImplementedError('subclasses of BaseDatabaseIntrospection may require a get_table_list() method')
+        def get_table_list(self, cursor):
+       """
+       Return an unsorted list of TableInfo named tuples of all tables and
+       views that exist in the database.
+       In the tuple, the name attribute is prefixed by the database name to avoid conflicts.
+       """
+       database_name = self.connection.settings_dict['NAME']
+       # Assuming 'sqlite_master' will list tables for SQLite, adjust based on backend
+       cursor.execute("SELECT name, type FROM sqlite_master WHERE type IN ('table', 'view')")
+       return [TableInfo(name=f"{database_name}.{row[0]}", type=row[1]) for row in cursor.fetchall()]
 
     def django_table_names(self, only_existing=False, include_views=True):
         """
