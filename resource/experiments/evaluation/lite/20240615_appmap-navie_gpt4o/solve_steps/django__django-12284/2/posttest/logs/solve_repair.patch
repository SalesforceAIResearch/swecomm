diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 1a55d3d417..57ecb53e6a 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -747,6 +747,17 @@ class Field(RegisterLookupMixin):
         if self.verbose_name is None and self.name:
             self.verbose_name = self.name.replace('_', ' ')
 
+    def _collect_all_choices(self, cls):
+        """
+        Helper method to collect choices from the class and its ancestors.
+        """
+        choices = []
+        for base in reversed(cls.__mro__):
+            field = base.__dict__.get(self.name)
+            if isinstance(field, Field) and field.choices:
+                choices.extend(field.choices)
+        return choices if choices else None
+
     def contribute_to_class(self, cls, name, private_only=False):
         """
         Register the field with the model class it belongs to.
@@ -771,6 +782,18 @@ class Field(RegisterLookupMixin):
                     partialmethod(cls._get_FIELD_display, field=self),
                 )
 
+        # Ensure the collected choices are cached for use in get_FOO_display
+        self.collected_choices = self._collect_all_choices(cls)
+
+    def _get_FIELD_display(self, field, field_name=None):
+        """
+        Return the human-readable value of the field.
+        """
+        value = getattr(self, field.attname)
+        # Use collected choices, which include inherited choices
+        choices_dict = dict(field.collected_choices or field.flatchoices)
+        return choices_dict.get(value, value)
+
     def get_filter_kwargs_for_object(self, obj):
         """
         Return a dict that when passed as kwargs to self.model.filter(), would
