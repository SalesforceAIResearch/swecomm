diff --git a/django/db/models/query.py b/django/db/models/query.py
index 71a52fb754..8f80c237d1 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1220,8 +1220,13 @@ class QuerySet:
         clone = self._chain()
         if fields == (None,):
             clone.query.clear_deferred_loading()
+            if hasattr(clone, '_explicit_inclusions'):
+                del clone._explicit_inclusions
         else:
             clone.query.add_deferred_loading(fields)
+            if hasattr(clone, '_explicit_inclusions'):
+                # Remove deferred fields from the explicit inclusion list
+                clone._explicit_inclusions.difference_update(fields)
         return clone
 
     def only(self, *fields):
@@ -1237,12 +1242,20 @@ class QuerySet:
             # Can only pass None to defer(), not only(), as the rest option.
             # That won't stop people trying to do this, so let's be explicit.
             raise TypeError("Cannot pass None as an argument to only().")
+            raise TypeError("Cannot pass None as an argument to only().")
         for field in fields:
             field = field.split(LOOKUP_SEP, 1)[0]
             if field in self.query._filtered_relations:
                 raise ValueError('only() is not supported with FilteredRelation.')
+        
         clone = self._chain()
         clone.query.add_immediate_loading(fields)
+        
+        # Maintain an explicit inclusion list
+        if not hasattr(clone, '_explicit_inclusions'):
+            clone._explicit_inclusions = set()
+        
+        clone._explicit_inclusions.update(fields)
         return clone
 
     def using(self, alias):
