diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index abbb1e37cb..50540160d2 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -272,14 +272,19 @@ class SQLCompiler:
         """
         Return a list of 2-tuples of form (expr, (sql, params, is_ref)) for the
         ORDER BY clause.
-
+        
         The order_by clause can alter the select clause (for example it
         can add aliases to clauses that do not yet have one, or it can
         add totally new select clauses).
         """
         if self.query.extra_order_by:
             ordering = self.query.extra_order_by
-        elif not self.query.default_ordering:
+        else:
+            # Deduplicate ordering items here to prevent unnecessary joins
+            ordering = list(dict.fromkeys(
+                self.query.order_by if self.query.order_by else []
+            ))
+        if not self.query.default_ordering:
             ordering = self.query.order_by
         elif self.query.order_by:
             ordering = self.query.order_by
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index d65141b834..53baef8c64 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1896,6 +1896,7 @@ class Query(BaseExpression):
         If 'ordering' is empty, clear all ordering from the query.
         """
         errors = []
+        seen = set()
         for item in ordering:
             if isinstance(item, str):
                 if '.' in item:
@@ -1912,8 +1913,10 @@ class Query(BaseExpression):
                 if item.startswith('-'):
                     item = item[1:]
                 if item in self.annotations:
+                    seen.add(item)
                     continue
                 if self.extra and item in self.extra:
+                    seen.add(item)
                     continue
                 # names_to_path() validates the lookup. A descriptive
                 # FieldError will be raise if it's not.
