diff --git a/sphinx/domains/std.py b/sphinx/domains/std.py
index 4bde57930..31e323457 100644
--- a/sphinx/domains/std.py
+++ b/sphinx/domains/std.py
@@ -843,7 +843,7 @@ class StandardDomain(Domain):
         if figtype is None:
             return None
 
-        if figtype != 'section' and env.config.numfig is False:
+        if figtype != 'section' and not env.config.numfig:
             logger.warning(__('numfig is disabled. :numref: is ignored.'), location=node)
             return contnode
 
@@ -852,7 +852,7 @@ class StandardDomain(Domain):
             if fignumber is None:
                 return contnode
         except ValueError:
-            logger.warning(__("no number is assigned for %s: %s"), figtype, labelid,
+            logger.warning(__("no number is assigned for %s: %s"), figtype, target,
                            location=node)
             return contnode
 
@@ -888,6 +888,38 @@ class StandardDomain(Domain):
                                          nodeclass=addnodes.number_reference,
                                          title=title)
 
+        try:
+            if node['refexplicit']:
+                title = contnode.astext()
+            else:
+                title = env.config.numfig_format.get(figtype, '')
+
+            if figname is None and '{name}' in title:
+                logger.warning(__('the link has no caption: %s'), title, location=node)
+                return contnode
+            else:
+                fignum = '.'.join(map(str, fignumber))
+                if '{name}' in title or 'number' in title:
+                    # new style format (cf. "Fig.{number}")
+                    if figname:
+                        newtitle = title.format(name=figname, number=fignum)
+                    else:
+                        newtitle = title.format(number=fignum)
+                else:
+                    # old style format (cf. "Fig.%s")
+                    newtitle = title % fignum
+        except KeyError as exc:
+            logger.warning(__('invalid numfig_format: %s (%r)'), title, exc, location=node)
+            return contnode
+        except TypeError:
+            logger.warning(__('invalid numfig_format: %s'), title, location=node)
+            return contnode
+
+        return self.build_reference_node(fromdocname, builder,
+                                         docname, labelid, newtitle, 'numref',
+                                         nodeclass=addnodes.number_reference,
+                                         title=title)
+
     def _resolve_keyword_xref(self, env: "BuildEnvironment", fromdocname: str,
                               builder: "Builder", typ: str, target: str,
                               node: pending_xref, contnode: Element) -> Element:
