diff --git a/sklearn/metrics/cluster/_supervised.py b/sklearn/metrics/cluster/_supervised.py
index 4bddae35c..49e7788e4 100644
--- a/sklearn/metrics/cluster/_supervised.py
+++ b/sklearn/metrics/cluster/_supervised.py
@@ -637,12 +637,20 @@ def mutual_info_score(labels_true, labels_pred, contingency=None):
     contingency_sum = contingency.sum()
     pi = np.ravel(contingency.sum(axis=1))
     pj = np.ravel(contingency.sum(axis=0))
-    log_contingency_nm = np.log(nz_val)
-    contingency_nm = nz_val / contingency_sum
-    # Don't need to calculate the full outer product, just for non-zeroes
-    outer = (pi.take(nzx).astype(np.int64, copy=False)
-             * pj.take(nzy).astype(np.int64, copy=False))
-    log_outer = -np.log(outer) + log(pi.sum()) + log(pj.sum())
+    
+    # Handle object dtype without converting to floats
+    if contingency.dtype == object:
+        log_contingency_nm = np.array([log(val) for val in nz_val])
+        contingency_nm = np.array([val / contingency_sum for val in nz_val])
+        outer = np.array([pi.take(nzx)[i] * pj.take(nzy)[i] for i in range(len(nzx))])
+        log_outer = np.array([-log(outer[i]) + log(pi.sum()) + log(pj.sum()) for i in range(len(outer))])
+    else:
+        log_contingency_nm = np.log(nz_val)
+        contingency_nm = nz_val / contingency_sum
+        outer = (pi.take(nzx).astype(np.int64, copy=False)
+                 * pj.take(nzy).astype(np.int64, copy=False))
+        log_outer = -np.log(outer) + log(pi.sum()) + log(pj.sum())
+    
     mi = (contingency_nm * (log_contingency_nm - log(contingency_sum)) +
           contingency_nm * log_outer)
     return mi.sum()
