<context>
<code-snippet location="pylint/testutils/reporter_for_tests.py:65-81">
class MinimalTestReporter(BaseReporter):
    def on_set_current_module(self, module: str, filepath: Optional[str]) -> None:
        self.messages = []

    def _display(self, layout: "Section") -> None:
        pass


class FunctionalTestReporter(BaseReporter):
    def on_set_current_module(self, module: str, filepath: Optional[str]) -> None:
        self.messages = []

    def display_reports(self, layout: "Section") -> None:
        """Ignore layouts and don't call self._display()."""

    def _display(self, layout: "Section") -> None:
        pass
</code-snippet>
<code-snippet location="pylint/testutils/checker_test_case.py:70-84">
assert expected_msg.line == gotten_msg.line, msg
            assert expected_msg.col_offset == gotten_msg.col_offset, msg
            if PY38_PLUS:
                # pylint: disable=fixme
                # TODO: Require end_line and end_col_offset and remove the warning
                if not expected_msg.end_line == gotten_msg.end_line:
                    warnings.warn(
                        f"The end_line attribute of {gotten_msg} does not match "
                        f"the expected value in {expected_msg}. In pylint 3.0 correct end_line "
                        "attributes will be required for MessageTest.",
                        DeprecationWarning,
                    )
                if not expected_msg.end_col_offset == gotten_msg.end_col_offset:
                    warnings.warn(
                        f"The end_col_offset attribute of {gotten_msg} does not match "
</code-snippet>
<code-snippet location="pylint/testutils/reporter_for_tests.py:45-62">
messages.sort()
        for message in messages:
            print(message, file=self.out)

        result = self.out.getvalue()
        self.reset()
        return result

    def on_set_current_module(self, module: str, filepath: Optional[str]) -> None:
        pass

    # pylint: enable=unused-argument

    def display_reports(self, layout: "Section") -> None:
        """Ignore layouts."""

    def _display(self, layout: "Section") -> None:
        pass
</code-snippet>
<code-snippet location="pylint/testutils/functional/lint_module_output_update.py:1-13">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE

import csv
import os
from typing import List, Optional

from _pytest.config import Config

from pylint.constants import PY38_PLUS
from pylint.testutils.functional.test_file import FunctionalTestFile
from pylint.testutils.lint_module_test import LintModuleTest, MessageCounter
from pylint.testutils.output_line import OutputLine
</code-snippet>
<code-snippet location="pylint/testutils/functional/lint_module_output_update.py:16-36">
class LintModuleOutputUpdate(LintModuleTest):
    """Class to be used if expected output files should be updated instead of checked."""

    class TestDialect(csv.excel):
        """Dialect used by the csv writer."""

        delimiter = ":"
        lineterminator = "\n"

    csv.register_dialect("test", TestDialect)

    def __init__(
        self, test_file: FunctionalTestFile, config: Optional[Config] = None
    ) -> None:
        if not PY38_PLUS:
            raise RuntimeError(
                "You need at least python 3.8 for the functional test updater to work. "
                "This is because python 3.8 includes a new AST parser, which amongst others "
                "returns the end line and end column of most nodes."
            )
        super().__init__(test_file, config)
</code-snippet>
<code-snippet location="pylint/testutils/checker_test_case.py:1-12">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE

import contextlib
import warnings
from typing import Dict, Generator, Optional, Type

from pylint.constants import PY38_PLUS
from pylint.testutils.global_test_linter import linter
from pylint.testutils.output_line import MessageTest
from pylint.testutils.unittest_linter import UnittestLinter
from pylint.utils import ASTWalker
</code-snippet>
<code-snippet location="pylint/testutils/reporter_for_tests.py:1-13">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE

from io import StringIO
from os import getcwd, sep
from typing import TYPE_CHECKING, List, Optional

from pylint import interfaces
from pylint.message import Message
from pylint.reporters import BaseReporter

if TYPE_CHECKING:
    from pylint.reporters.ureports.nodes import Section
</code-snippet>
<code-snippet location="pylint/testutils/functional_test_file.py:1-22">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE

__all__ = [
    "FunctionalTestFile",
    "NoFileError",
    "parse_python_version",
]

import warnings

from pylint.testutils.functional import (
    FunctionalTestFile,
    NoFileError,
    parse_python_version,
)

warnings.warn(
    "'pylint.testutils.functional_test_file' will be accessible from"
    " the 'pylint.testutils.functional' namespace in pylint 3.0.",
    DeprecationWarning,
)
</code-snippet>
<code-snippet location="pylint/testutils/output_line.py:1-26">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE

import warnings
from typing import Any, NamedTuple, Optional, Sequence, Tuple, TypeVar, Union

from astroid import nodes

from pylint.constants import PY38_PLUS
from pylint.interfaces import UNDEFINED, Confidence
from pylint.message.message import Message
from pylint.testutils.constants import UPDATE_OPTION

T = TypeVar("T")


class MessageTest(NamedTuple):
    msg_id: str
    line: Optional[int] = None
    node: Optional[nodes.NodeNG] = None
    args: Optional[Any] = None
    confidence: Optional[Confidence] = UNDEFINED
    col_offset: Optional[int] = None
    end_line: Optional[int] = None
    end_col_offset: Optional[int] = None
    """Used to test messages produced by pylint. Class name cannot start with Test as pytest doesn't allow constructors in test classes."""
</code-snippet>
<code-snippet location="pylint/testutils/global_test_linter.py:1-20">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE


from pylint import checkers
from pylint.lint import PyLinter
from pylint.testutils.reporter_for_tests import GenericTestReporter


def create_test_linter():
    test_reporter = GenericTestReporter()
    linter_ = PyLinter()
    linter_.set_reporter(test_reporter)
    linter_.config.persistent = 0
    checkers.initialize(linter_)
    return linter_


# Can't be renamed to a constant (easily), it breaks countless tests
linter = create_test_linter()
</code-snippet>
<code-snippet location="pylint/testutils/get_test_info.py:1-8">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE

from glob import glob
from os.path import basename, join, splitext
from typing import List, Tuple

from pylint.testutils.constants import SYS_VERS_STR
</code-snippet>
<code-snippet location="pylint/testutils/checker_test_case.py:83-88">
warnings.warn(
                        f"The end_col_offset attribute of {gotten_msg} does not match "
                        f"the expected value in {expected_msg}. In pylint 3.0 correct end_col_offset "
                        "attributes will be required for MessageTest.",
                        DeprecationWarning,
                    )
</code-snippet>
<code-snippet location="pylint/testutils/functional/find_functional_tests.py:1-28">
# Licensed under the GPL: https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
# For details: https://github.com/PyCQA/pylint/blob/main/LICENSE

import os
from pathlib import Path
from typing import List, Set, Union

from pylint.testutils.functional.test_file import FunctionalTestFile

REASONABLY_DISPLAYABLE_VERTICALLY = 48
"""'Wet finger' number of files that are reasonable to display by an IDE."""
SHOULD_BE_IN_THE_SAME_DIRECTORY = 5
"""'Wet finger' as in 'in my settings there are precisely this many'."""

IGNORED_PARENT_DIRS = {
    "deprecated_relative_import",
    "ext",
    "regression",
    "regression_02",
}
"""Direct parent directories that should be ignored."""

IGNORED_PARENT_PARENT_DIRS = {
    "docparams",
    "deprecated_relative_import",
    "ext",
}
"""Parents of direct parent directories that should be ignored."""
</code-snippet>
<code-snippet location="pylint/testutils/reporter_for_tests.py:16-43">
class GenericTestReporter(BaseReporter):
    """Reporter storing plain text messages."""

    __implements__ = interfaces.IReporter
    out: StringIO

    def __init__(  # pylint: disable=super-init-not-called # See https://github.com/PyCQA/pylint/issues/4941
        self,
    ) -> None:
        self.path_strip_prefix: str = getcwd() + sep
        self.reset()

    def reset(self) -> None:
        self.out = StringIO()
        self.messages: List[Message] = []

    def handle_message(self, msg: Message) -> None:
        """Append messages to the list of messages of the reporter."""
        self.messages.append(msg)

    def finalize(self) -> str:
        """Format and print messages in the context of the path."""
        messages: List[str] = []
        for msg in self.messages:
            obj = ""
            if msg.obj:
                obj = f":{msg.obj}"
            messages.append(f"{msg.msg_id[0]}:{msg.line:>3}{obj}: {msg.msg}")
</code-snippet>
<code-snippet location="pylint/testutils/output_line.py:132-155">
row[0],
                    int(row[1]),
                    column,
                    None,
                    None,
                    row[3],
                    row[4],
                    UNDEFINED.name,
                )
            if len(row) == 6:
                warnings.warn(
                    "In pylint 3.0 functional tests expected output should always include the "
                    "expected end_line and expected end_column. An OutputLine should thus have "
                    "a length of 8.",
                    DeprecationWarning,
                )
                return cls(
                    row[0], int(row[1]), column, None, None, row[3], row[4], row[5]
                )
            if len(row) == 8:
                end_line = cls._get_py38_none_value(row[3], check_endline)
                end_column = cls._get_py38_none_value(row[4], check_endline)
                return cls(
                    row[0],
</code-snippet>
<code-snippet location="pylint/testutils/output_line.py:113-138">
@classmethod
    def from_csv(
        cls, row: Union[Sequence[str], str], check_endline: bool = True
    ) -> "OutputLine":
        """Create an OutputLine from a comma separated list (the functional tests expected
        output .txt files).
        """
        if isinstance(row, str):
            row = row.split(",")
        try:
            column = cls._get_column(row[2])
            if len(row) == 5:
                warnings.warn(
                    "In pylint 3.0 functional tests expected output should always include the "
                    "expected confidence level, expected end_line and expected end_column. "
                    "An OutputLine should thus have a length of 8.",
                    DeprecationWarning,
                )
                return cls(
                    row[0],
                    int(row[1]),
                    column,
                    None,
                    None,
                    row[3],
                    row[4],
</code-snippet>
<code-snippet location="pylint/testutils/output_line.py:67-92">
class OutputLine(NamedTuple):
    symbol: str
    lineno: int
    column: int
    end_lineno: Optional[int]
    end_column: Optional[int]
    object: str
    msg: str
    confidence: str

    @classmethod
    def from_msg(cls, msg: Message, check_endline: bool = True) -> "OutputLine":
        """Create an OutputLine from a Pylint Message."""
        column = cls._get_column(msg.column)
        end_line = cls._get_py38_none_value(msg.end_line, check_endline)
        end_column = cls._get_py38_none_value(msg.end_column, check_endline)
        return cls(
            msg.symbol,
            msg.line,
            column,
            end_line,
            end_column,
            msg.obj or "",
            msg.msg.replace("\r\n", "\n"),
            msg.confidence.name,
        )
</code-snippet>
<code-snippet location="pylint/testutils/checker_test_case.py:15-38">
class CheckerTestCase:
    """A base testcase class for unit testing individual checker classes."""

    CHECKER_CLASS: Optional[Type] = None
    CONFIG: Dict = {}

    def setup_method(self):
        self.linter = UnittestLinter()
        self.checker = self.CHECKER_CLASS(self.linter)  # pylint: disable=not-callable
        for key, value in self.CONFIG.items():
            setattr(self.checker.config, key, value)
        self.checker.open()

    @contextlib.contextmanager
    def assertNoMessages(self):
        """Assert that no messages are added by the given method."""
        with self.assertAddsMessages():
            yield

    @contextlib.contextmanager
    def assertAddsMessages(
        self, *messages: MessageTest, ignore_position: bool = False
    ) -> Generator[None, None, None]:
        """Assert that exactly the given method adds the given messages.
</code-snippet>
<code-snippet location="pylint/testutils/functional/find_functional_tests.py:31-45">
def get_functional_test_files_from_directory(
    input_dir: Union[Path, str]
) -> List[FunctionalTestFile]:
    """Get all functional tests in the input_dir."""
    suite = []

    _check_functional_tests_structure(Path(input_dir))

    for dirpath, _, filenames in os.walk(input_dir):
        if dirpath.endswith("__pycache__"):
            continue
        for filename in filenames:
            if filename != "__init__.py" and filename.endswith(".py"):
                suite.append(FunctionalTestFile(dirpath, filename))
    return suite
</code-snippet>
<code-snippet location="pylint/testutils/output_line.py:60-64">
Expected '{example}' or '{other_example}' but we got '{raw}':
{reconstructed_row}

Try updating it with: 'python tests/test_functional.py {UPDATE_OPTION}'"""
        super().__init__(msg)
</code-snippet>
<code-snippet location="pylint/testutils/functional/lint_module_output_update.py:38-54">
def _check_output_text(
        self,
        _: MessageCounter,
        expected_output: List[OutputLine],
        actual_output: List[OutputLine],
    ) -> None:
        """Overwrite or remove the expected output file based on actual output."""
        # Remove the file if no output is actually expected and a file exists
        if not expected_output and not actual_output:
            if os.path.exists(self._test_file.expected_output):
                os.remove(self._test_file.expected_output)
            return
        # Write file with expected output
        with open(self._test_file.expected_output, "w", encoding="utf-8") as f:
            writer = csv.writer(f, dialect="test")
            for line in actual_output:
                writer.writerow(line.to_csv())
</code-snippet>
<code-snippet location="pylint/testutils/functional/find_functional_tests.py:48-69">
def _check_functional_tests_structure(directory: Path) -> None:
    """Check if test directories follow correct file/folder structure."""
    # Ignore underscored directories
    if Path(directory).stem.startswith("_"):
        return

    files: Set[Path] = set()
    dirs: Set[Path] = set()

    # Collect all subdirectories and files in directory
    for file_or_dir in directory.iterdir():
        if file_or_dir.is_file():
            if file_or_dir.suffix == ".py" and not file_or_dir.stem.startswith("_"):
                files.add(file_or_dir)
        elif file_or_dir.is_dir():
            dirs.add(file_or_dir)
            _check_functional_tests_structure(file_or_dir)

    assert len(files) <= REASONABLY_DISPLAYABLE_VERTICALLY, (
        f"{directory} contains too many functional tests files "
        + f"({len(files)} > {REASONABLY_DISPLAYABLE_VERTICALLY})."
    )
</code-snippet>
<code-snippet location="pylint/testutils/get_test_info.py:16-35">
We use following conventions for input files and messages:
    for different inputs:
        test for python  >= x.y    ->  input   =  <name>_pyxy.py
        test for python  <  x.y    ->  input   =  <name>_py_xy.py
    for one input and different messages:
        message for python >=  x.y ->  message =  <name>_pyxy.txt
        lower versions             ->  message with highest num
    """
    result = []
    for fname in glob(join(input_dir, prefix + "*" + suffix)):
        infile = basename(fname)
        fbase = splitext(infile)[0]
        # filter input files :
        pyrestr = fbase.rsplit("_py", 1)[-1]  # like _26 or 26
        if pyrestr.isdigit():  # '24', '25'...
            if pyrestr.isdigit() and int(SYS_VERS_STR) < int(pyrestr):
                continue
        if pyrestr.startswith("_") and pyrestr[1:].isdigit():
            # skip test for higher python versions
            if pyrestr[1:].isdigit() and int(SYS_VERS_STR) >= int(pyrestr[1:]):
</code-snippet>
<code-snippet location="pylint/testutils/testing_pylintrc:1-9">
# A bare minimum pylintrc used for the functional tests that don't specify
# their own settings.

[MESSAGES CONTROL]

disable=
    suppressed-message,
    locally-disabled,
    useless-suppression,
</code-snippet>
<code-snippet location="pylint/testutils/get_test_info.py:11-14">
def _get_tests_info(
    input_dir: str, msg_dir: str, prefix: str, suffix: str
) -> List[Tuple[str, str]]:
    """Get python input examples and output messages.
</code-snippet>
<code-snippet location="pylint/testutils/get_test_info.py:33-48">
if pyrestr.startswith("_") and pyrestr[1:].isdigit():
            # skip test for higher python versions
            if pyrestr[1:].isdigit() and int(SYS_VERS_STR) >= int(pyrestr[1:]):
                continue
        messages = glob(join(msg_dir, fbase + "*.txt"))
        # the last one will be without ext, i.e. for all or upper versions:
        if messages:
            for outfile in sorted(messages, reverse=True):
                py_rest = outfile.rsplit("_py", 1)[-1][:-4]
                if py_rest.isdigit() and int(SYS_VERS_STR) >= int(py_rest):
                    break
        else:
            # This will provide an error message indicating the missing filename.
            outfile = join(msg_dir, fbase + ".txt")
        result.append((infile, outfile))
    return result
</code-snippet>
<code-snippet location="pylint/testutils/checker_test_case.py:40-58">
The list of messages must exactly match *all* the messages added by the
        method. Additionally, we check to see whether the args in each message can
        actually be substituted into the message string.

        Using the keyword argument `ignore_position`, all checks for position
        arguments (line, col_offset, ...) will be skipped. This can be used to
        just test messages for the correct node.
        """
        yield
        got = self.linter.release_messages()
        no_msg = "No message."
        expected = "\n".join(repr(m) for m in messages) or no_msg
        got_str = "\n".join(repr(m) for m in got) or no_msg
        msg = (
            "Expected messages did not match actual.\n"
            f"\nExpected:\n{expected}\n\nGot:\n{got_str}\n"
        )

        assert len(messages) == len(got), msg
</code-snippet>
</context>