diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..1c87ac34e7 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -148,11 +148,11 @@ def blocks(self):
 
     @property
     def rowblocksizes(self):
-        return [self.blocks[i, 0].rows for i in range(self.blockshape[0])]
+        return [self.blocks[i, 0].rows if self.blocks[i, 0] != 0 else 0 for i in range(self.blockshape[0])]
 
     @property
     def colblocksizes(self):
-        return [self.blocks[0, i].cols for i in range(self.blockshape[1])]
+        return [self.blocks[0, i].cols if self.blocks[0, i] != 0 else 0 for i in range(self.blockshape[1])]
 
     def structurally_equal(self, other):
         return (isinstance(other, BlockMatrix)
@@ -162,9 +162,14 @@ def structurally_equal(self, other):
             and self.colblocksizes == other.colblocksizes)
 
     def _blockmul(self, other):
-        if (isinstance(other, BlockMatrix) and
-                self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
+        if (isinstance(other, BlockMatrix) and self.colblocksizes == other.rowblocksizes):
+            result_blocks = self.blocks * other.blocks
+            # Ensure zero blocks are ZeroMatrix
+            for i in range(result_blocks.rows):
+                for j in range(result_blocks.cols):
+                    if result_blocks[i, j] == 0:
+                        result_blocks[i, j] = ZeroMatrix(result_blocks[i, j].rows, result_blocks[i, j].cols)
+            return BlockMatrix(result_blocks)
 
         return self * other
 
@@ -454,26 +459,29 @@ def bc_dist(expr):
 def bc_matmul(expr):
     if isinstance(expr, MatPow):
         if expr.args[1].is_Integer:
-            factor, matrices = (1, [expr.args[0]]*expr.args[1])
+            factor, matrices = (1, [expr.args[0]] * expr.args[1])
         else:
             return expr
     else:
         factor, matrices = expr.as_coeff_matrices()
 
     i = 0
-    while (i+1 < len(matrices)):
-        A, B = matrices[i:i+2]
+    while (i + 1 < len(matrices)):
+        A, B = matrices[i:i + 2]
         if isinstance(A, BlockMatrix) and isinstance(B, BlockMatrix):
             matrices[i] = A._blockmul(B)
-            matrices.pop(i+1)
+            matrices.pop(i + 1)
         elif isinstance(A, BlockMatrix):
             matrices[i] = A._blockmul(BlockMatrix([[B]]))
-            matrices.pop(i+1)
+            matrices.pop(i + 1)
         elif isinstance(B, BlockMatrix):
             matrices[i] = BlockMatrix([[A]])._blockmul(B)
-            matrices.pop(i+1)
+            matrices.pop(i + 1)
+        # Add ZeroMatrix conversion for zero results
+        if matrices[i] == 0:
+            matrices[i] = ZeroMatrix(matrices[i].rows, matrices[i].cols)
         else:
-            i+=1
+            i += 1
     return MatMul(factor, *matrices).doit()
 
 def bc_transpose(expr):
