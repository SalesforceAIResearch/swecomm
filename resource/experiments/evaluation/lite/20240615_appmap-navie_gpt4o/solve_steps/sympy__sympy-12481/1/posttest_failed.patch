diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 136ed5a478..eb9a8cd0ea 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -909,12 +909,14 @@ def __new__(cls, *args, **kwargs):
                              max(temp))
 
         if is_cycle:
-            # it's not necessarily canonical so we won't store
-            # it -- use the array form instead
-            c = Cycle()
+            # handle non-disjoint cycles by applying them iteratively
+            aform = list(range(size if size is not None else max(temp) + 1))
             for ci in args:
-                c = c(*ci)
-            aform = c.list()
+                for i in range(len(ci) - 1):
+                    frm, to = ci[i], ci[i + 1]
+                    if frm >= len(aform) or to >= len(aform):
+                        raise IndexError("The given cycle elements exceed the size of the permutation.")
+                    aform[frm], aform[to] = aform[to], aform[frm]
         else:
             aform = list(args)
         if size and size > len(aform):
