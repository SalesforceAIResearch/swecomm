diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 136ed5a478..c173c8e810 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -44,6 +44,16 @@ def _af_rmul(a, b):
     """
     return [a[i] for i in b]
 
+def _apply_cycle(arr, cycle):
+    """Apply a single cycle to the permutation array."""
+    n = len(cycle)
+    if n == 0:
+        return
+    first = arr[cycle[0]]
+    for i in range(n - 1):
+        arr[cycle[i]] = arr[cycle[i + 1]]
+    arr[cycle[-1]] = first
+
 
 def _af_rmuln(*abc):
     """
@@ -909,12 +919,10 @@ def __new__(cls, *args, **kwargs):
                              max(temp))
 
         if is_cycle:
-            # it's not necessarily canonical so we won't store
-            # it -- use the array form instead
-            c = Cycle()
+            # Apply cycles in left-to-right order
+            aform = list(range(max(flatten(args)) + 1))
             for ci in args:
-                c = c(*ci)
-            aform = c.list()
+                _apply_cycle(aform, ci)
         else:
             aform = list(args)
         if size and size > len(aform):
