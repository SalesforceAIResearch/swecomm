diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py
index 860989f7c1..581df27dad 100644
--- a/sympy/functions/elementary/hyperbolic.py
+++ b/sympy/functions/elementary/hyperbolic.py
@@ -218,6 +218,9 @@ def _eval_rewrite_as_tractable(self, arg, limitvar=None, **kwargs):
         return (exp(arg) - exp(-arg)) / 2
 
     def _eval_rewrite_as_exp(self, arg, **kwargs):
+        # Handle Piecewise arguments without triggering PolynomialError
+        if arg.has(Piecewise):
+            return Piecewise(*[(self.func(c.args[0]).rewrite(exp), c.args[1]) for c in arg.args])
         return (exp(arg) - exp(-arg)) / 2
 
     def _eval_rewrite_as_cosh(self, arg, **kwargs):
@@ -404,6 +407,9 @@ def _eval_rewrite_as_tractable(self, arg, limitvar=None, **kwargs):
         return (exp(arg) + exp(-arg)) / 2
 
     def _eval_rewrite_as_exp(self, arg, **kwargs):
+        # Handle Piecewise arguments without triggering PolynomialError
+        if arg.has(Piecewise):
+            return Piecewise(*[(self.func(c.args[0]).rewrite(exp), c.args[1]) for c in arg.args])
         return (exp(arg) + exp(-arg)) / 2
 
     def _eval_rewrite_as_sinh(self, arg, **kwargs):
@@ -629,6 +635,9 @@ def _eval_rewrite_as_tractable(self, arg, limitvar=None, **kwargs):
         return (pos_exp - neg_exp)/(pos_exp + neg_exp)
 
     def _eval_rewrite_as_exp(self, arg, **kwargs):
+        # Handle Piecewise arguments without triggering PolynomialError
+        if arg.has(Piecewise):
+            return Piecewise(*[(self.func(c.args[0]).rewrite(exp), c.args[1]) for c in arg.args])
         neg_exp, pos_exp = exp(-arg), exp(arg)
         return (pos_exp - neg_exp)/(pos_exp + neg_exp)
 
diff --git a/sympy/printing/tensorflow.py b/sympy/printing/tensorflow.py
index b044357db3..9d1a3f619f 100644
--- a/sympy/printing/tensorflow.py
+++ b/sympy/printing/tensorflow.py
@@ -142,7 +142,6 @@ def _print_Piecewise(self, expr):
             tensorflow_piecewise = "tensorflow.select"
         else:
             tensorflow_piecewise = "tensorflow.where"
-
         from sympy import Piecewise
         e, cond = expr.args[0].args
         if len(expr.args) == 1:
