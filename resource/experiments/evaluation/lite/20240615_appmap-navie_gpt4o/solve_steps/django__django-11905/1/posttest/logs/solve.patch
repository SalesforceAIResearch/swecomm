diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index ea51912e8b..2c051f8ec4 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1208,13 +1208,16 @@ class Query(BaseExpression):
         Build a WhereNode for a single filter clause but don't add it
         to this Query. Query.add_q() will then add this filter to the where
         Node.
-
+    
         The 'branch_negated' tells us if the current branch contains any
         negations. This will be used to determine if subqueries are needed.
-
+    
         The 'current_negated' is used to determine if the current filter is
         negated or not and this will be used to determine if IS NULL filtering
         is needed.
+    
+        Validate that the right-hand side of an '__isnull' lookup is a boolean.
+        If not, raise a TypeError with a descriptive message.
 
         The difference between current_negated and branch_negated is that
         branch_negated is set on first negation, but current_negated is
@@ -1254,6 +1257,10 @@ class Query(BaseExpression):
         if not allow_joins and len(parts) > 1:
             raise FieldError("Joined field references are not permitted in this query")
 
+        # Validate that `__isnull` lookup values are boolean
+        if 'isnull' in lookups and not isinstance(value, bool):
+            raise TypeError("__isnull lookup value must be a boolean (True or False).")
+            
         pre_joins = self.alias_refcount.copy()
         value = self.resolve_lookup_value(value, can_reuse, allow_joins, simple_col)
         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}
