diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py
index b4c38368bf..84cca49168 100644
--- a/lib/matplotlib/figure.py
+++ b/lib/matplotlib/figure.py
@@ -1376,22 +1376,18 @@ default: %(va)s
         if axs is None:
             axs = self.axes
         axs = [ax for ax in np.ravel(axs) if ax.get_subplotspec() is not None]
-        for ax in axs:
+        from itertools import product
+        group_pairs = list(product(axs, repeat=2))
+        for ax, axc in group_pairs:
             _log.debug(' Working on: %s', ax.get_xlabel())
-            rowspan = ax.get_subplotspec().rowspan
             pos = ax.xaxis.get_label_position()  # top or bottom
-            # Search through other axes for label positions that are same as
-            # this one and that share the appropriate row number.
-            # Add to a grouper associated with each axes of siblings.
-            # This list is inspected in `axis.draw` by
-            # `axis._update_label_position`.
-            for axc in axs:
-                if axc.xaxis.get_label_position() == pos:
-                    rowspanc = axc.get_subplotspec().rowspan
-                    if (pos == 'top' and rowspan.start == rowspanc.start or
-                            pos == 'bottom' and rowspan.stop == rowspanc.stop):
-                        # grouper for groups of xlabels to align
-                        self._align_label_groups['x'].join(ax, axc)
+            if axc.xaxis.get_label_position() == pos:
+                rowspan = ax.get_subplotspec().rowspan
+                rowspanc = axc.get_subplotspec().rowspan
+                if (pos == 'top' and rowspan.start == rowspanc.start or
+                        pos == 'bottom' and rowspan.stop == rowspanc.stop):
+                    # grouper for groups of xlabels to align
+                    self._align_label_groups['x'].join(ax, axc)
 
     def align_ylabels(self, axs=None):
         """
@@ -1436,22 +1432,18 @@ default: %(va)s
         if axs is None:
             axs = self.axes
         axs = [ax for ax in np.ravel(axs) if ax.get_subplotspec() is not None]
-        for ax in axs:
+        from itertools import product
+        group_pairs = list(product(axs, repeat=2))
+        for ax, axc in group_pairs:
             _log.debug(' Working on: %s', ax.get_ylabel())
-            colspan = ax.get_subplotspec().colspan
             pos = ax.yaxis.get_label_position()  # left or right
-            # Search through other axes for label positions that are same as
-            # this one and that share the appropriate column number.
-            # Add to a list associated with each axes of siblings.
-            # This list is inspected in `axis.draw` by
-            # `axis._update_label_position`.
-            for axc in axs:
-                if axc.yaxis.get_label_position() == pos:
-                    colspanc = axc.get_subplotspec().colspan
-                    if (pos == 'left' and colspan.start == colspanc.start or
-                            pos == 'right' and colspan.stop == colspanc.stop):
-                        # grouper for groups of ylabels to align
-                        self._align_label_groups['y'].join(ax, axc)
+            if axc.yaxis.get_label_position() == pos:
+                colspan = ax.get_subplotspec().colspan
+                colspanc = axc.get_subplotspec().colspan
+                if (pos == 'left' and colspan.start == colspanc.start or
+                        pos == 'right' and colspan.stop == colspanc.stop):
+                    # grouper for groups of ylabels to align
+                    self._align_label_groups['y'].join(ax, axc)
 
     def align_labels(self, axs=None):
         """
@@ -3179,17 +3171,18 @@ None}, default: None
     def __setstate__(self, state):
         version = state.pop('__mpl_version__')
         restore_to_pylab = state.pop('_restore_to_pylab', False)
-
+    
         if version != mpl.__version__:
             _api.warn_external(
                 f"This figure was saved with matplotlib version {version} and "
-                f"is unlikely to function correctly.")
-
+                f"is unlikely to function correctly.  Expect errors and incorrect "
+                f"rendering.")
+    
         self.__dict__ = state
-
+    
         # re-initialise some of the unstored state information
         FigureCanvasBase(self)  # Set self.canvas.
-
+    
         if restore_to_pylab:
             # lazy import to avoid circularity
             import matplotlib.pyplot as plt
@@ -3200,7 +3193,7 @@ None}, default: None
             mgr = backend.new_figure_manager_given_figure(num, self)
             pylab_helpers.Gcf._set_new_active_manager(mgr)
             plt.draw_if_interactive()
-
+    
         self.stale = True
 
     def add_axobserver(self, func):
