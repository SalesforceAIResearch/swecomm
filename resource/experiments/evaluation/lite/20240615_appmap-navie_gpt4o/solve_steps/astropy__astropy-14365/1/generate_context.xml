<context>
<code-snippet location="astropy/io/ascii/fastbasic.py:400-427">
if any(not re.match(r"\d*(N|S)$", x, re.IGNORECASE) for x in types):
            raise core.InconsistentTableError(
                f"RDB type definitions do not all match [num](N|S): {types}"
            )

        try_int = {}
        try_float = {}
        try_string = {}

        for name, col_type in zip(self.engine.get_names(), types):
            if col_type[-1].lower() == "s":
                try_int[name] = 0
                try_float[name] = 0
                try_string[name] = 1
            else:
                try_int[name] = 1
                try_float[name] = 1
                try_string[name] = 0

        self.engine.setup_tokenizer(tmp)
        return (try_int, try_float, try_string)

    def write(self, table, output):
        """
        Override the default writing behavior in `FastBasic` to
        output a line with column types after the column name line.
        """
        self._write(table, output, {}, output_types=True)
</code-snippet>
<code-snippet location=".devcontainer/devcontainer.json:1-17">
{
    "name": "AstroPy",
    "image": "mcr.microsoft.com/devcontainers/miniconda:0-3",
    "onCreateCommand": "conda init bash && sudo cp .devcontainer/welcome-message.txt /usr/local/etc/vscode-dev-containers/first-run-notice.txt",
    "postCreateCommand": "git fetch --tag && pip install tox && pip install -e .[all,test_all,docs]",
    "waitFor": "postCreateCommand",
    "customizations": {
        "vscode": {
            "extensions": [
                "ms-python.python",
                "ms-python.black-formatter",
                "charliermarsh.ruff",
                "stkb.rewrap"
            ]
        }
    }
}
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:893-902">
Returns
    -------
    writer : `~astropy.io.ascii.BaseReader` subclass
        ASCII format writer instance
    """
    if Writer is None:
        Writer = basic.Basic
    if "strip_whitespace" not in kwargs:
        kwargs["strip_whitespace"] = True
    writer = core._get_writer(Writer, fast_writer, **kwargs)
</code-snippet>
<code-snippet location="astropy/io/ascii/connect.py:1-32">
# Licensed under a 3-clause BSD style license - see LICENSE.rst
# This file connects the readers/writers to the astropy.table.Table class


import re

from astropy.io import registry as io_registry  # noqa: F401
from astropy.table import Table

__all__ = []


def io_read(format, filename, **kwargs):
    from .ui import read

    if format != "ascii":
        format = re.sub(r"^ascii\.", "", format)
        kwargs["format"] = format
    return read(filename, **kwargs)


def io_write(format, table, filename, **kwargs):
    from .ui import write

    if format != "ascii":
        format = re.sub(r"^ascii\.", "", format)
        kwargs["format"] = format
    return write(table, filename, **kwargs)


def io_identify(suffix, origin, filepath, fileobj, *args, **kwargs):
    return filepath is not None and filepath.endswith(suffix)
</code-snippet>
<code-snippet location="astropy/io/ascii/connect.py:35-57">
def _get_connectors_table():
    from .core import FORMAT_CLASSES

    rows = []
    rows.append(
        ("ascii", "", "Yes", "ASCII table in any supported format (uses guessing)")
    )
    for format in sorted(FORMAT_CLASSES):
        cls = FORMAT_CLASSES[format]

        io_format = "ascii." + cls._format_name
        description = getattr(cls, "_description", "")
        class_link = f":class:`~{cls.__module__}.{cls.__name__}`"
        suffix = getattr(cls, "_io_registry_suffix", "")
        can_write = "Yes" if getattr(cls, "_io_registry_can_write", True) else ""

        rows.append((io_format, suffix, can_write, f"{class_link}: {description}"))
    out = Table(list(zip(*rows)), names=("Format", "Suffix", "Write", "Description"))
    for colname in ("Format", "Description"):
        width = max(len(x) for x in out[colname])
        out[colname].format = f"%-{width}s"

    return out
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:126-149">
Parameters
    ----------
    Reader : `~astropy.io.ascii.BaseReader`
        Reader class (DEPRECATED). Default is :class:`Basic`.
    Inputter : `~astropy.io.ascii.BaseInputter`
        Inputter class
    Outputter : `~astropy.io.ascii.BaseOutputter`
        Outputter class
    delimiter : str
        Column delimiter string
    comment : str
        Regular expression defining a comment line in table
    quotechar : str
        One-character string to quote fields containing special characters
    header_start : int
        Line index for the header line not counting comment or blank lines.
        A line with only whitespace is considered blank.
    data_start : int
        Line index for the start of data not counting comment or blank lines.
        A line with only whitespace is considered blank.
    data_end : int
        Line index for the end of data not counting comment or blank lines.
        This value can be negative to count from the end.
    converters : dict
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:168-184">
Returns
    -------
    reader : `~astropy.io.ascii.BaseReader` subclass
        ASCII format reader instance
    """
    # This function is a light wrapper around core._get_reader to provide a
    # public interface with a default Reader.
    if Reader is None:
        # Default reader is Basic unless fast reader is forced
        fast_reader = _get_fast_reader_dict(kwargs)
        if fast_reader["enable"] == "force":
            Reader = fastbasic.FastBasic
        else:
            Reader = basic.Basic

    reader = core._get_reader(Reader, Inputter=Inputter, Outputter=Outputter, **kwargs)
    return reader
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:265-279">
def _expand_user_if_path(argument):
    if isinstance(argument, (str, bytes, os.PathLike)):
        # For the `read()` method, a `str` input can be either a file path or
        # the table data itself. File names for io.ascii cannot have newlines
        # in them and io.ascii does not accept table data as `bytes`, so we can
        # attempt to detect data strings like this.
        is_str_data = isinstance(argument, str) and (
            "\n" in argument or "\r" in argument
        )
        if not is_str_data:
            # Remain conservative in expanding the presumed-path
            ex_user = os.path.expanduser(argument)
            if os.path.exists(ex_user):
                argument = ex_user
    return argument
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:187-212">
def _get_format_class(format, ReaderWriter, label):
    if format is not None and ReaderWriter is not None:
        raise ValueError(f"Cannot supply both format and {label} keywords")

    if format is not None:
        if format in core.FORMAT_CLASSES:
            ReaderWriter = core.FORMAT_CLASSES[format]
        else:
            raise ValueError(
                "ASCII format {!r} not in allowed list {}".format(
                    format, sorted(core.FORMAT_CLASSES)
                )
            )
    return ReaderWriter


def _get_fast_reader_dict(kwargs):
    """Convert 'fast_reader' key in kwargs into a dict if not already and make sure
    'enable' key is available.
    """
    fast_reader = copy.deepcopy(kwargs.get("fast_reader", True))
    if isinstance(fast_reader, dict):
        fast_reader.setdefault("enable", "force")
    else:
        fast_reader = {"enable": fast_reader}
    return fast_reader
</code-snippet>
</context>