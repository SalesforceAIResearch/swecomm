diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 02aa32b207..888bac3914 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -59,21 +59,20 @@ class Media:
 
     @property
     def _css(self):
-        css = self._css_lists[0]
-        # filter(None, ...) avoids calling merge with empty dicts.
-        for obj in filter(None, self._css_lists[1:]):
-            css = {
-                medium: self.merge(css.get(medium, []), obj.get(medium, []))
-                for medium in css.keys() | obj.keys()
-            }
+        css = {}
+        for css_list in self._css_lists:
+            for key, value in css_list.items():
+                if key in css:
+                    css[key] = self.merge(css[key], value)
+                else:
+                    css[key] = value
         return css
 
     @property
     def _js(self):
-        js = self._js_lists[0]
-        # filter(None, ...) avoids calling merge() with empty lists.
-        for obj in filter(None, self._js_lists[1:]):
-            js = self.merge(js, obj)
+        js = []
+        for js_list in self._js_lists:
+            js = self.merge(js, js_list)
         return js
 
     def render(self):
@@ -117,43 +116,47 @@ class Media:
     @staticmethod
     def merge(list_1, list_2):
         """
-        Merge two lists while trying to keep the relative order of the elements.
-        Warn if the lists have the same two elements in a different relative
-        order.
+        Merge two lists considering dependencies while trying to keep the relative order 
+        of elements. Warn if the lists have the same two elements in a different relative order.
 
-        For static assets it can be important to have them included in the DOM
-        in a certain order. In JavaScript you may not be able to reference a
-        global or in CSS you might want to override a style.
+        For static assets it can be important to have them included in the DOM in a certain order. 
+        For example, in JavaScript, you may not be able to reference a global or in CSS you might want 
+        to override a style.
         """
-        # Start with a copy of list_1.
+        # List to hold the merged result
         combined_list = list(list_1)
-        last_insert_index = len(list_1)
-        # Walk list_2 in reverse, inserting each element into combined_list if
-        # it doesn't already exist.
-        for path in reversed(list_2):
-            try:
-                # Does path already exist in the list?
-                index = combined_list.index(path)
-            except ValueError:
-                # Add path to combined_list since it doesn't exist.
-                combined_list.insert(last_insert_index, path)
-            else:
-                if index > last_insert_index:
+        insert_point = len(list_1)
+
+        # Walk through list_2 and insert its elements into combined_list if they don't already exist.
+        # If they exist in different order, warn the user.
+        for path in list_2:
+            if path in combined_list:
+                current_index = combined_list.index(path)
+                if current_index < insert_point:
                     warnings.warn(
                         'Detected duplicate Media files in an opposite order:\n'
-                        '%s\n%s' % (combined_list[last_insert_index], combined_list[index]),
+                        '%s\n%s' % (combined_list[insert_point - 1], path),
                         MediaOrderConflictWarning,
                     )
-                # path already exists in the list. Update last_insert_index so
-                # that the following elements are inserted in front of this one.
-                last_insert_index = index
+                insert_point = current_index + 1
+            else:
+                combined_list.insert(insert_point, path)
+                insert_point += 1
+
         return combined_list
 
     def __add__(self, other):
         combined = Media()
         combined._css_lists = self._css_lists + other._css_lists
         combined._js_lists = self._js_lists + other._js_lists
-        return combined
+
+        # Merge gathered CSS and JS lists correctly
+        # Ensure the lists are not empty before attempting to merge.
+        if self._css and other._css:
+            combined._css_lists[-1] = combined.merge(self._css, other._css)
+        if self._js and other._js:
+            combined._js_lists[-1] = combined.merge(self._js, other._js)
+    return combined
 
 
 def media_property(cls):
@@ -164,20 +167,15 @@ def media_property(cls):
             base = sup_cls.media
         except AttributeError:
             base = Media()
-
+        
         # Get the media definition for this class
         definition = getattr(cls, 'Media', None)
         if definition:
-            extend = getattr(definition, 'extend', True)
-            if extend:
-                if extend is True:
-                    m = base
-                else:
-                    m = Media()
-                    for medium in extend:
-                        m = m + base[medium]
-                return m + Media(definition)
-            return Media(definition)
+            new_media = Media(definition)
+            if getattr(definition, 'extend', True):
+                return base + new_media
+            else:
+                return new_media
         return base
     return property(_media)
 
