diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 02aa32b207..371bb22f92 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -153,8 +153,56 @@ class Media:
         combined = Media()
         combined._css_lists = self._css_lists + other._css_lists
         combined._js_lists = self._js_lists + other._js_lists
+        combined._dependencies = {**self._dependencies, **other._dependencies}
         return combined
 
+    def add_dependencies(self, dependencies):
+        """
+        Add script dependencies.
+        :param dependencies: A dictionary where keys are script names and
+                             values are lists of scripts that each key depends on.
+        """
+        self._dependencies.update(dependencies)
+
+    def topological_sort(self, scripts):
+        """
+        Perform a topological sort on the provided scripts based on dependencies.
+        :param scripts: A list of script paths to sort.
+        :return: A sorted list of scripts respecting the dependencies.
+        """
+        in_degree = defaultdict(int)
+        graph = defaultdict(list)
+
+        for script in scripts:
+            in_degree[script] = 0
+
+        for script, deps in self._dependencies.items():
+            for dep in deps:
+                graph[dep].append(script)
+                in_degree[script] += 1
+
+        queue = deque([script for script in scripts if in_degree[script] == 0])
+        sorted_scripts = []
+
+        while queue:
+            script = queue.popleft()
+            sorted_scripts.append(script)
+
+            for neighbor in graph[script]:
+                in_degree[neighbor] -= 1
+                if in_degree[neighbor] == 0:
+                    queue.append(neighbor)
+
+        return sorted_scripts
+
+
+    @property
+    def _js(self):
+        js = self._js_lists[0]
+        # filter(None, ...) avoids calling merge() with empty lists.
+        for obj in filter(None, self._js_lists[1:]):
+            js = self.merge(js, obj)
+        return self.topological_sort(js)
 
 def media_property(cls):
     def _media(self):
