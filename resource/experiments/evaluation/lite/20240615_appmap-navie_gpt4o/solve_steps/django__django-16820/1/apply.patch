diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index b89b6b511b..bf42818d3c 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -79,26 +79,34 @@ class CreateModel(ModelOperation):
         return (self.__class__.__qualname__, [], kwargs)
 
     def state_forwards(self, app_label, state):
-        state.add_model(
-            ModelState(
-                app_label,
-                self.name,
-                list(self.fields),
-                dict(self.options),
-                tuple(self.bases),
-                list(self.managers),
+            options = dict(self.options)
+            
+            if "index_together" in options:
+                options["indexes"] = [
+                    models.Index(fields=list(fields)) for fields in options["index_together"]
+                ]
+                del options["index_together"]
+    
+            state.add_model(
+                ModelState(
+                    app_label,
+                    self.name,
+                    list(self.fields),
+                    options,
+                    tuple(self.bases),
+                    list(self.managers),
+                )
             )
-        )
-
-    def database_forwards(self, app_label, schema_editor, from_state, to_state):
-        model = to_state.apps.get_model(app_label, self.name)
-        if self.allow_migrate_model(schema_editor.connection.alias, model):
-            schema_editor.create_model(model)
-
-    def database_backwards(self, app_label, schema_editor, from_state, to_state):
-        model = from_state.apps.get_model(app_label, self.name)
-        if self.allow_migrate_model(schema_editor.connection.alias, model):
-            schema_editor.delete_model(model)
+    
+        def database_forwards(self, app_label, schema_editor, from_state, to_state):
+            model = to_state.apps.get_model(app_label, self.name)
+            if self.allow_migrate_model(schema_editor.connection.alias, model):
+                schema_editor.create_model(model)
+    
+        def database_backwards(self, app_label, schema_editor, from_state, to_state):
+            model = from_state.apps.get_model(app_label, self.name)
+            if self.allow_migrate_model(schema_editor.connection.alias, model):
+                schema_editor.delete_model(model)
 
     def describe(self):
         return "Create %smodel %s" % (
@@ -648,6 +656,34 @@ class AlterIndexTogether(AlterTogetherOptionOperation):
         super().__init__(name, index_together)
 
 
+class AlterIndexes(ModelOptionOperation):
+    """
+    Change the value of indexes to the target list of Index objects.
+    """
+
+    option_name = "indexes"
+
+    def __init__(self, name, indexes):
+        if indexes:
+            indexes = tuple(indexes)
+        self.indexes = indexes
+        super().__init__(name)
+
+    @cached_property
+    def option_value(self):
+        return self.indexes
+
+    def deconstruct(self):
+        return (
+            "django.db.migrations.operations.models.AlterIndexes",
+            [],
+            {
+                "name": self.name,
+                "indexes": self.indexes,
+            },
+        )
+
+
 class AlterOrderWithRespectTo(ModelOptionOperation):
     """Represent a change with the order_with_respect_to option."""
 
diff --git a/django/db/models/indexes.py b/django/db/models/indexes.py
index b5451f9e24..6772f59bc0 100644
--- a/django/db/models/indexes.py
+++ b/django/db/models/indexes.py
@@ -12,7 +12,7 @@ __all__ = ["Index"]
 
 class Index:
     suffix = "idx"
-    # The max length of the name of the index (restricted to 30 for
+    # The max length of the name of the index (restricted to 30 for 
     # cross-database compatibility with Oracle)
     max_name_length = 30
 
