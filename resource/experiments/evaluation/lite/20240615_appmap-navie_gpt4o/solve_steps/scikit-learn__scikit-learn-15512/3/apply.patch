diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py
index 4806afee9..080504fd6 100644
--- a/sklearn/cluster/_affinity_propagation.py
+++ b/sklearn/cluster/_affinity_propagation.py
@@ -191,20 +191,21 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,
 
         if it >= convergence_iter:
             se = np.sum(e, axis=1)
-            unconverged = (np.sum((se == convergence_iter) + (se == 0))
-                           != n_samples)
-            if (not unconverged and (K > 0)) or (it == max_iter):
+            if (np.all(se == convergence_iter) or np.all(se == 0)) and (K > 0):
                 if verbose:
                     print("Converged after %d iterations." % it)
+                converged = True
                 break
+            converged = False
     else:
+        converged = False
         if verbose:
             print("Did not converge")
 
     I = np.flatnonzero(E)
     K = I.size  # Identify exemplars
 
-    if K > 0:
+    if converged and K > 0:
         c = np.argmax(S[:, I], axis=1)
         c[I] = np.arange(K)  # Identify clusters
         # Refine the final set of exemplars and clusters and return results
@@ -220,13 +221,14 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,
         cluster_centers_indices = np.unique(labels)
         labels = np.searchsorted(cluster_centers_indices, labels)
     else:
-        warnings.warn("Affinity propagation did not converge, this model "
-                      "will not have any cluster centers.", ConvergenceWarning)
+        cluster_centers_indices = np.array([])
         labels = np.array([-1] * n_samples)
-        cluster_centers_indices = []
+        if not converged:
+            warnings.warn("Affinity propagation did not converge, this model "
+                          "will not have any cluster centers.", ConvergenceWarning)
 
     if return_n_iter:
-        return cluster_centers_indices, labels, it + 1
+        return cluster_centers_indices, labels, n_iter
     else:
         return cluster_centers_indices, labels
 
