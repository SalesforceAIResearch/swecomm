diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py
index 488d6a77cd..ddce4ae99f 100644
--- a/django/utils/numberformat.py
+++ b/django/utils/numberformat.py
@@ -25,6 +25,8 @@ def format(
         module in locale.localeconv() LC_NUMERIC grouping (e.g. (3, 2, 0)).
     * thousand_sep: Thousand separator symbol (for example ",")
     """
+    if not str_number:
+        return ""
     use_grouping = (
         use_l10n or (use_l10n is None and settings.USE_L10N)
     ) and settings.USE_THOUSAND_SEPARATOR
@@ -67,38 +69,38 @@ def format(
         else:
             str_number = "{:f}".format(number)
     else:
-        str_number = str(number)
-    if str_number[0] == "-":
-        sign = "-"
-        str_number = str_number[1:]
-    # decimal part
-    if "." in str_number:
-        int_part, dec_part = str_number.split(".")
+            str_number = str(number)
+        if str_number and str_number[0] == "-":
+            sign = "-"
+            str_number = str_number[1:]
+        # decimal part
+        if str_number and "." in str_number:
+            int_part, dec_part = str_number.split(".")
+            if decimal_pos is not None:
+                dec_part = dec_part[:decimal_pos]
+        else:
+            int_part, dec_part = str_number, ""
         if decimal_pos is not None:
-            dec_part = dec_part[:decimal_pos]
-    else:
-        int_part, dec_part = str_number, ""
-    if decimal_pos is not None:
-        dec_part = dec_part + ("0" * (decimal_pos - len(dec_part)))
-    dec_part = dec_part and decimal_sep + dec_part
-    # grouping
-    if use_grouping:
-        try:
-            # if grouping is a sequence
-            intervals = list(grouping)
-        except TypeError:
-            # grouping is a single value
-            intervals = [grouping, 0]
-        active_interval = intervals.pop(0)
-        int_part_gd = ""
-        cnt = 0
-        for digit in int_part[::-1]:
-            if cnt and cnt == active_interval:
-                if intervals:
-                    active_interval = intervals.pop(0) or active_interval
-                int_part_gd += thousand_sep[::-1]
-                cnt = 0
-            int_part_gd += digit
-            cnt += 1
-        int_part = int_part_gd[::-1]
-    return sign + int_part + dec_part
+            dec_part = dec_part + ("0" * (decimal_pos - len(dec_part)))
+        dec_part = dec_part and decimal_sep + dec_part
+        # grouping
+        if use_grouping:
+            try:
+                # if grouping is a sequence
+                intervals = list(grouping)
+            except TypeError:
+                # grouping is a single value
+                intervals = [grouping, 0]
+            active_interval = intervals.pop(0)
+            int_part_gd = ""
+            cnt = 0
+            for digit in int_part[::-1]:
+                if cnt and cnt == active_interval:
+                    if intervals:
+                        active_interval = intervals.pop(0) or active_interval
+                    int_part_gd += thousand_sep[::-1]
+                    cnt = 0
+                int_part_gd += digit
+                cnt += 1
+            int_part = int_part_gd[::-1]
+        return sign + int_part + dec_part
