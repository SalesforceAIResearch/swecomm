diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 171a3e7b0..431c6b05a 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -2301,6 +2301,14 @@ def migrate_autodoc_member_order(app: Sphinx, config: Config) -> None:
         config.autodoc_member_order = 'alphabetical'  # type: ignore
 
 
+def apply_type_aliases(app: Sphinx, what: str, name: str, obj: Any, options: Any, lines: List[str]) -> None:
+    """Apply type aliases to the annotations of class and module-level variables."""
+    if hasattr(obj, '__annotations__'):
+        for attr, annotation in obj.__annotations__.items():
+            if annotation in app.config.autodoc_type_aliases:
+                obj.__annotations__[attr] = app.config.autodoc_type_aliases[annotation]
+
+
 def setup(app: Sphinx) -> Dict[str, Any]:
     app.add_autodocumenter(ModuleDocumenter)
     app.add_autodocumenter(ClassDocumenter)
@@ -2326,10 +2334,13 @@ def setup(app: Sphinx) -> Dict[str, Any]:
     app.add_config_value('autodoc_typehints', "signature", True,
                          ENUM("signature", "description", "none"))
     app.add_config_value('autodoc_type_aliases', {}, True)
+    
+    # Connect the apply_type_aliases function to the autodoc-process-docstring event
+    app.connect("autodoc-process-docstring", apply_type_aliases)
     app.add_config_value('autodoc_warningiserror', True, True)
     app.add_config_value('autodoc_inherit_docstrings', True, True)
     app.add_event('autodoc-before-process-signature')
-    app.add_event('autodoc-process-docstring')
+    app.add_event('autodoc-before-process-docstring') <!--Modified the event name-->
     app.add_event('autodoc-process-signature')
     app.add_event('autodoc-skip-member')
 
diff --git a/sphinx/ext/autodoc/type_comment.py b/sphinx/ext/autodoc/type_comment.py
index debbc1442..3feb3cf22 100644
--- a/sphinx/ext/autodoc/type_comment.py
+++ b/sphinx/ext/autodoc/type_comment.py
@@ -126,6 +126,12 @@ def update_annotations_using_type_comments(app: Sphinx, obj: Any, bound_method:
 
             if 'return' not in obj.__annotations__:
                 obj.__annotations__['return'] = type_sig.return_annotation
+        
+        # Apply type aliases to variables and attributes
+        if hasattr(obj, '__annotations__'):
+            for attr, annotation in obj.__annotations__.items():
+                if annotation in app.config.autodoc_type_aliases:
+                    obj.__annotations__[attr] = app.config.autodoc_type_aliases[annotation]
     except KeyError as exc:
         logger.warning(__("Failed to update signature for %r: parameter not found: %s"),
                        obj, exc)
@@ -134,6 +140,6 @@ def update_annotations_using_type_comments(app: Sphinx, obj: Any, bound_method:
 
 
 def setup(app: Sphinx) -> Dict[str, Any]:
-    app.connect('autodoc-before-process-signature', update_annotations_using_type_comments)
+    app.connect('autodoc-before-process-docstring', update_annotations_using_type_comments)  <!-- Modified the event name-->
 
     return {'version': sphinx.__display_version__, 'parallel_read_safe': True}
