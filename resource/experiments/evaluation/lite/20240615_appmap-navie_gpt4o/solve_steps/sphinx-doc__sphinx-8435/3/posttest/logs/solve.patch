diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 171a3e7b0..1a4022c36 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -1692,8 +1692,7 @@ class DataDocumenter(ModuleLevelDocumenter):
     option_spec["annotation"] = annotation_option
 
     @classmethod
-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any
-                            ) -> bool:
+    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:
         return isinstance(parent, ModuleDocumenter) and isattr
 
     def add_directive_header(self, sig: str) -> None:
@@ -1702,7 +1701,7 @@ class DataDocumenter(ModuleLevelDocumenter):
         if not self.options.annotation:
             # obtain annotation for this data
             try:
-                annotations = get_type_hints(self.parent)
+                annotations = get_type_hints(self.parent, globals(), config.autodoc_type_aliases)
             except NameError:
                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)
                 annotations = safe_getattr(self.parent, '__annotations__', {})
diff --git a/sphinx/ext/autodoc/directive.py b/sphinx/ext/autodoc/directive.py
index 9a3428f5d..1f1621271 100644
--- a/sphinx/ext/autodoc/directive.py
+++ b/sphinx/ext/autodoc/directive.py
@@ -75,9 +75,8 @@ class DocumenterBridge:
         logger.warning(msg, location=(self.env.docname, self.lineno))
 
 
-def process_documenter_options(documenter: "Type[Documenter]", config: Config, options: Dict
-                               ) -> Options:
-    """Recognize options of Documenter from user input."""
+def process_documenter_options(documenter: "Type[Documenter]", config: Config, options: Dict) -> Options:
+    """Recognize options of Documenter from user input and apply type aliases."""
     for name in AUTODOC_DEFAULT_OPTIONS:
         if name not in documenter.option_spec:
             continue
@@ -86,6 +85,11 @@ def process_documenter_options(documenter: "Type[Documenter]", config: Config, o
             if name in config.autodoc_default_options and not negated:
                 options[name] = config.autodoc_default_options[name]
 
+    # Apply autodoc_type_aliases to type annotations in options
+    if 'type' in options:
+        for alias, real_type in config.autodoc_type_aliases.items():
+            options['type'] = options['type'].replace(alias, real_type)
+
     return Options(assemble_option_dict(options.items(), documenter.option_spec))
 
 
