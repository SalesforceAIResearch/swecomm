diff --git a/sphinx/ext/autodoc/type_comment.py b/sphinx/ext/autodoc/type_comment.py
index debbc1442..cd5b59ec9 100644
--- a/sphinx/ext/autodoc/type_comment.py
+++ b/sphinx/ext/autodoc/type_comment.py
@@ -113,7 +113,7 @@ def get_type_comment(obj: Any, bound_method: bool = False) -> Signature:
 
 
 def update_annotations_using_type_comments(app: Sphinx, obj: Any, bound_method: bool) -> None:
-    """Update annotations info of *obj* using type_comments."""
+    """Update annotations info of *obj* using type_comments, including variables and attributes."""
     try:
         type_sig = get_type_comment(obj, bound_method)
         if type_sig:
@@ -122,10 +122,15 @@ def update_annotations_using_type_comments(app: Sphinx, obj: Any, bound_method:
                 if param.name not in obj.__annotations__:
                     annotation = type_sig.parameters[param.name].annotation
                     if annotation is not Parameter.empty:
-                        obj.__annotations__[param.name] = ast_unparse(annotation)
+                        obj.__annotations__[param.name] = apply_type_aliases(app, ast_unparse(annotation))
 
             if 'return' not in obj.__annotations__:
-                obj.__annotations__['return'] = type_sig.return_annotation
+                obj.__annotations__['return'] = apply_type_aliases(app, type_sig.return_annotation)
+
+        # Handle annotations for module-level variables and class attributes
+        if hasattr(obj, '__annotations__'):
+            for name, annotation in obj.__annotations__.items():
+                obj.__annotations__[name] = apply_type_aliases(app, ast_unparse(annotation))
     except KeyError as exc:
         logger.warning(__("Failed to update signature for %r: parameter not found: %s"),
                        obj, exc)
