diff --git a/requests/exceptions.py b/requests/exceptions.py
index 89135a80..fcc36822 100644
--- a/requests/exceptions.py
+++ b/requests/exceptions.py
@@ -8,6 +8,8 @@ This module contains the set of Requests' exceptions.
 
 """
 from .packages.urllib3.exceptions import HTTPError as BaseHTTPError
+from .packages.urllib3.exceptions import DecodeError as BaseDecodeError
+from .packages.urllib3.exceptions import TimeoutError as BaseTimeoutError
 
 
 class RequestException(IOError):
@@ -16,16 +18,22 @@ class RequestException(IOError):
 
     def __init__(self, *args, **kwargs):
         """
-        Initialize RequestException with `request` and `response` objects.
+        Initialize RequestException with `request`, `response` and `message` objects.
         """
         response = kwargs.pop('response', None)
         self.response = response
         self.request = kwargs.pop('request', None)
+        self.message = kwargs.pop('message', "An unexpected error occurred with request.")
         if (response is not None and not self.request and
                 hasattr(response, 'request')):
             self.request = self.response.request
         super(RequestException, self).__init__(*args, **kwargs)
 
+    def __str__(self):
+        if self.request:
+            return f"RequestException: {self.message} for {self.request}"
+        return f"RequestException: {self.message}"
+
 
 class HTTPError(RequestException):
     """An HTTP error occurred."""
@@ -90,6 +98,24 @@ class ChunkedEncodingError(RequestException):
 class ContentDecodingError(RequestException, BaseHTTPError):
     """Failed to decode response content"""
 
+    def __init__(self, *args, **kwargs):
+        if 'response' in kwargs:
+            response = kwargs['response']
+            if isinstance(response.reason, BaseDecodeError):
+                kwargs['message'] = f"DecodeError: {response.reason}"
+        super(ContentDecodingError, self).__init__(*args, **kwargs)
+
+
+class RequestsTimeout(RequestException, BaseHTTPError):
+    """The request timed out"""
+
+    def __init__(self, *args, **kwargs):
+        if 'response' in kwargs:
+            response = kwargs['response']
+            if isinstance(response.reason, BaseTimeoutError):
+                kwargs['message'] = f"TimeoutError: {response.reason}"
+        super(RequestsTimeout, self).__init__(*args, **kwargs)
+
 
 class StreamConsumedError(RequestException, TypeError):
     """The content for this response was already consumed"""
@@ -97,3 +123,10 @@ class StreamConsumedError(RequestException, TypeError):
 
 class RetryError(RequestException):
     """Custom retries logic failed"""
+
+    def __init__(self, *args, **kwargs):
+        self.message = kwargs.pop('message', "Retries exceeded")
+        super(RetryError, self).__init__(*args, **kwargs)
+
+    def __str__(self):
+        return f"RetryError: {self.message}"
