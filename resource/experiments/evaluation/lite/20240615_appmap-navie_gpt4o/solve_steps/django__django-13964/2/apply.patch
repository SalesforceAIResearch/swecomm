diff --git a/django/db/models/base.py b/django/db/models/base.py
index 2428218696..39261e3244 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -938,9 +938,10 @@ class Model(metaclass=ModelBase):
                     # an assignment.
                     setattr(self, field.attname, obj.pk)
                 # If the relationship's pk/to_field was changed, clear the
-                # cached relationship.
+                # cached relationship and ensure fk is updated.
                 if getattr(obj, field.target_field.attname) != getattr(self, field.attname):
                     field.delete_cached_value(self)
+                    self.save(update_fields=[field.attname])
 
     def delete(self, using=None, keep_parents=False):
         using = using or router.db_for_write(self.__class__, instance=self)
diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index 899ae8efe8..8d6f480957 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -452,6 +452,16 @@ class ForeignObject(RelatedField):
     one_to_many = False
     one_to_one = False
 
+    def __set__(self, instance, value):
+        """
+        Update the foreign key field in the parent object when the related object's primary key is set
+        or changed.
+        """
+        super().__set__(instance, value)
+        if value is not None:
+            instance._state.db = router.db_for_write(instance.__class__, instance=instance)
+            instance.save(update_fields=[self.attname])
+
     requires_unique_target = True
     related_accessor_class = ReverseManyToOneDescriptor
     forward_related_accessor_class = ForwardManyToOneDescriptor
