diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9b00e24509..2fb0a7fbfb 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -28,10 +28,16 @@ from .converters import get_converter
 from .exceptions import NoReverseMatch, Resolver404
 from .utils import get_callable
 
-
 class ResolverMatch:
     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):
-        self.func = func
+        # Unwrapping functools.partial objects
+        if isinstance(func, functools.partial):
+            self.partial_func = func
+            self.func, self.partial_args, self.partial_kwargs = func.func, func.args, func.keywords
+        else:
+            self.partial_func = None
+            self.func, self.partial_args, self.partial_kwargs = func, [], {}
+        
         self.args = args
         self.kwargs = kwargs
         self.url_name = url_name
@@ -45,12 +51,12 @@ class ResolverMatch:
         self.namespaces = [x for x in namespaces if x] if namespaces else []
         self.namespace = ':'.join(self.namespaces)
 
-        if not hasattr(func, '__name__'):
+        if not hasattr(self.func, '__name__'):
             # A class-based view
-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__
+            self._func_path = self.func.__class__.__module__ + '.' + self.func.__class__.__name__
         else:
             # A function-based view
-            self._func_path = func.__module__ + '.' + func.__name__
+            self._func_path = self.func.__module__ + '.' + self.func.__name__
 
         view_path = url_name or self._func_path
         self.view_name = ':'.join(self.namespaces + [view_path])
@@ -59,8 +65,16 @@ class ResolverMatch:
         return (self.func, self.args, self.kwargs)[index]
 
     def __repr__(self):
+        if self.partial_func:
+            func_path = self.partial_func.func.__module__ + '.' + self.partial_func.func.__name__
+            partial_args = ", ".join(map(repr, self.partial_args))
+            partial_kwargs = ", ".join(f"{k}={v!r}" for k, v in self.partial_kwargs.items())
+            func_details = f"functools.partial({func_path}, {partial_args}, {partial_kwargs})"
+        else:
+            func_details = self._func_path
+            
         return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
-            self._func_path, self.args, self.kwargs, self.url_name,
+            func_details, self.args, self.kwargs, self.url_name,
             self.app_names, self.namespaces, self.route,
         )
 
