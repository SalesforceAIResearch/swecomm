diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 11aebbc59f..434a1b3df6 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -233,6 +233,9 @@ def transpose(self):
         return self._eval_transpose()
 
     def _entry(self, i, j, **kwargs):
+        if len(self.args) == 1:
+            # Directly return the entry if only one block is present
+            return self.args[0][i, j]
         # Find row entry
         for row_block, numrows in enumerate(self.rowblocksizes):
             if (i < numrows) != False:
@@ -530,12 +533,15 @@ def deblock(B):
 
 def reblock_2x2(B):
     """ Reblock a BlockMatrix so that it has 2x2 blocks of block matrices """
-    if not isinstance(B, BlockMatrix) or not all(d > 2 for d in B.blocks.shape):
+    if not isinstance(B, BlockMatrix):
+        return B
+    if not all(d >= 2 for d in B.blocks.shape):  # Ensure dimensions are at least 2x2
         return B
 
     BM = BlockMatrix  # for brevity's sake
-    return BM([[   B.blocks[0,  0],  BM(B.blocks[0,  1:])],
-               [BM(B.blocks[1:, 0]), BM(B.blocks[1:, 1:])]])
+    block_rows, block_cols = B.blocks.shape
+    return BM([[B.blocks[0, 0], BM(B.blocks[0, 1:block_cols])],
+               [BM(B.blocks[1:block_rows, 0]), BM(B.blocks[1:block_rows, 1:block_cols])]])
 
 
 def bounds(sizes):
