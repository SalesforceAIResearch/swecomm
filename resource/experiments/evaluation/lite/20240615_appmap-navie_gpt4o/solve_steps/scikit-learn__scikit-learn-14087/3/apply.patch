diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py
index 1999f1dae..93e1ff6f0 100644
--- a/sklearn/linear_model/logistic.py
+++ b/sklearn/linear_model/logistic.py
@@ -2166,22 +2166,22 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,
                     l1_ratio=l1_ratio_)
                 w = w[0]
 
-            else:
-                # Take the best scores across every fold and the average of
-                # all coefficients corresponding to the best scores.
-                best_indices = np.argmax(scores, axis=1)
-                if self.multi_class == 'ovr':
-                    w = np.mean([coefs_paths[i, best_indices[i], :]
-                                 for i in range(len(folds))], axis=0)
-                else:
-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]
-                                 for i in range(len(folds))], axis=0)
-
-                best_indices_C = best_indices % len(self.Cs_)
-                self.C_.append(np.mean(self.Cs_[best_indices_C]))
-
-                best_indices_l1 = best_indices // len(self.Cs_)
-                self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))
+else:
+               # Take the best scores across every fold and the average of
+               # all coefficients corresponding to the best scores.
+               best_indices = np.argmax(scores, axis=1)
+               if self.multi_class == 'ovr':
+                   w = np.mean([coefs_paths[i, :, best_indices[i], :]
+                                for i in range(len(folds))], axis=0)
+               else:
+                   w = np.mean([coefs_paths[:, i, best_indices[i], :]
+                                for i in range(len(folds))], axis=0)
+
+               best_indices_C = best_indices % len(self.Cs_)
+               self.C_.append(np.mean(self.Cs_[best_indices_C]))
+
+               best_indices_l1 = best_indices // len(self.Cs_)
+               self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))
 
             if multi_class == 'multinomial':
                 self.C_ = np.tile(self.C_, n_classes)
