diff --git a/sklearn/neighbors/nca.py b/sklearn/neighbors/nca.py
index 1d278b6e1..3089ef0e5 100644
--- a/sklearn/neighbors/nca.py
+++ b/sklearn/neighbors/nca.py
@@ -299,8 +299,12 @@ class NeighborhoodComponentsAnalysis(BaseEstimator, TransformerMixin):
 
         # Check the preferred dimensionality of the projected space
         if self.n_components is not None:
-            check_scalar(self.n_components, 'n_components', int, 1)
-
+            # Convert n_components to int and verify
+            self.n_components = int(self.n_components)
+            if self.n_components < 1:
+                raise ValueError(
+                    "The parameter `n_components` should be a positive integer."
+                )
             if self.n_components > X.shape[1]:
                 raise ValueError('The preferred dimensionality of the '
                                  'projected space `n_components` ({}) cannot '
@@ -319,7 +323,12 @@ class NeighborhoodComponentsAnalysis(BaseEstimator, TransformerMixin):
                                          self.components_.shape[1]))
 
         check_scalar(self.max_iter, 'max_iter', int, 1)
-        check_scalar(self.tol, 'tol', float, 0.)
+        
+        # Convert tol to float and verify
+        self.tol = float(self.tol)
+        if self.tol < 0:
+            raise ValueError("The parameter `tol` must be a non-negative float.")
+
         check_scalar(self.verbose, 'verbose', int, 0)
 
         if self.callback is not None:
@@ -419,6 +428,8 @@ class NeighborhoodComponentsAnalysis(BaseEstimator, TransformerMixin):
                         sys.stdout.flush()
                     pca.fit(X)
                     transformation = pca.components_
+                    if n_components < X.shape[1]:
+                        transformation = transformation[:n_components]
                 elif init == 'lda':
                     from ..discriminant_analysis import (
                         LinearDiscriminantAnalysis)
