diff --git a/sklearn/neighbors/nca.py b/sklearn/neighbors/nca.py
index 1d278b6e1..b4c533f28 100644
--- a/sklearn/neighbors/nca.py
+++ b/sklearn/neighbors/nca.py
@@ -22,7 +22,7 @@ from ..decomposition import PCA
 from ..utils.multiclass import check_classification_targets
 from ..utils.random import check_random_state
 from ..utils.validation import (check_is_fitted, check_array, check_X_y,
-                                check_scalar)
+                                check_param)
 from ..exceptions import ConvergenceWarning
 
 
@@ -299,7 +299,7 @@ class NeighborhoodComponentsAnalysis(BaseEstimator, TransformerMixin):
 
         # Check the preferred dimensionality of the projected space
         if self.n_components is not None:
-            check_scalar(self.n_components, 'n_components', int, 1)
+            check_param(self.n_components, 'n_components', (int, ), 1)
 
             if self.n_components > X.shape[1]:
                 raise ValueError('The preferred dimensionality of the '
@@ -309,7 +309,7 @@ class NeighborhoodComponentsAnalysis(BaseEstimator, TransformerMixin):
                                  .format(self.n_components, X.shape[1]))
 
         # If warm_start is enabled, check that the inputs are consistent
-        check_scalar(self.warm_start, 'warm_start', bool)
+        check_param(self.warm_start, 'warm_start', (bool, ))
         if self.warm_start and hasattr(self, 'components_'):
             if self.components_.shape[1] != X.shape[1]:
                 raise ValueError('The new inputs dimensionality ({}) does not '
@@ -318,9 +318,9 @@ class NeighborhoodComponentsAnalysis(BaseEstimator, TransformerMixin):
                                  .format(X.shape[1],
                                          self.components_.shape[1]))
 
-        check_scalar(self.max_iter, 'max_iter', int, 1)
-        check_scalar(self.tol, 'tol', float, 0.)
-        check_scalar(self.verbose, 'verbose', int, 0)
+        check_param(self.max_iter, 'max_iter', (int, ), 1)
+        check_param(self.tol, 'tol', (float, ), 0.)
+        check_param(self.verbose, 'verbose', (int, ), 0)
 
         if self.callback is not None:
             if not callable(self.callback):
diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py
index 8747844e5..fecf3523f 100644
--- a/sklearn/utils/validation.py
+++ b/sklearn/utils/validation.py
@@ -941,18 +941,19 @@ def check_non_negative(X, whom):
         raise ValueError("Negative values in data passed to %s" % whom)
 
 
-def check_scalar(x, name, target_type, min_val=None, max_val=None):
-    """Validate scalar parameters type and value.
+def check_param(value, name, types, min_val=None, max_val=None):
+    """Generalized parameter checking utility to validate the type
+    and value of a parameter.
 
     Parameters
     ----------
-    x : object
-        The scalar parameter to validate.
+    value : object
+        The parameter to validate.
 
     name : str
         The name of the parameter to be printed in error messages.
 
-    target_type : type or tuple
+    types : tuple of types
         Acceptable data types for the parameter.
 
     min_val : float or int, optional (default=None)
@@ -964,20 +965,19 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):
         is implied that the parameter does not have an upper bound.
 
     Raises
-    -------
+    ------
     TypeError
-        If the parameter's type does not match the desired type.
+        If the parameter's type does not match any of the desired types.
 
     ValueError
         If the parameter's value violates the given bounds.
     """
 
-    if not isinstance(x, target_type):
-        raise TypeError('`{}` must be an instance of {}, not {}.'
-                        .format(name, target_type, type(x)))
+    if not isinstance(value, types):
+        raise TypeError(f'`{name}` must be an instance of {types}, not {type(value)}.')
 
-    if min_val is not None and x < min_val:
-        raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))
+    if min_val is not None and value < min_val:
+        raise ValueError(f'`{name}`= {value}, must be >= {min_val}.')
 
-    if max_val is not None and x > max_val:
-        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))
+    if max_val is not None and value > max_val:
+        raise ValueError(f'`{name}`= {value}, must be <= {max_val}.')
