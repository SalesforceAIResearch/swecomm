diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index 6d3cc05bd3..9d7a5bdbad 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -483,7 +483,8 @@ def _print_Product(self, expr):
             horizontal_chr = xobj('-', 1)
             corner_chr = u'\N{BOX DRAWINGS LIGHT DOWN AND HORIZONTAL}'
 
-        func_height = pretty_func.height()
+        # Adjust `func_height` to remove extra line at the bottom
+        func_height = pretty_func.height() - 1
 
         first = True
         max_upper = 0
@@ -493,7 +494,7 @@ def _print_Product(self, expr):
             width = (func_height + 2) * 5 // 3 - 2
             sign_lines = []
             sign_lines.append(corner_chr + (horizontal_chr*width) + corner_chr)
-            for i in range(func_height + 1):
+            for i in range(func_height):
                 sign_lines.append(vertical_chr + (' '*width) + vertical_chr)
 
             pretty_sign = stringPict('')
@@ -544,6 +545,7 @@ def adjust(s, wid=None, how='<^>'):
             h = max(hrequired, 2)
             d = h//2
             w = d + 1
+            w = max(w, len(prettyForm('*')), len(prettyForm('=')))
             more = hrequired % 2
 
             lines = []
@@ -1672,7 +1674,7 @@ def _print_Mul(self, product):
             if (a[i].is_Add and len(a) > 1) or (i != len(a) - 1 and
                     isinstance(a[i], (Integral, Piecewise, Product, Sum))):
                 a[i] = prettyForm(*self._print(a[i]).parens())
-            elif a[i].is_Relational:
+            elif a[i].is_Relational or a[i].is_Equality:
                 a[i] = prettyForm(*self._print(a[i]).parens())
             else:
                 a[i] = self._print(a[i])
@@ -1859,7 +1861,7 @@ def _print_Intersection(self, u):
 
     def _print_Union(self, u):
 
-        union_delimiter = ' %s ' % pretty_atom('Union', 'U')
+        union_delimiter = ' %s ' % ('\u222A' if self._use_unicode else 'U')
 
         return self._print_seq(u.args, None, None, union_delimiter,
                                parenthesize=lambda set: set.is_ProductSet or
