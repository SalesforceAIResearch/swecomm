diff --git a/src/flask/config.py b/src/flask/config.py
index d4fc310f..12b70d81 100644
--- a/src/flask/config.py
+++ b/src/flask/config.py
@@ -230,38 +230,43 @@ class Config(dict):
                 self[key] = getattr(obj, key)
 
     def from_file(
-        self,
-        filename: str,
-        load: t.Callable[[t.IO[t.Any]], t.Mapping],
-        silent: bool = False,
-    ) -> bool:
-        """Update the values in the config from a file that is loaded
-        using the ``load`` parameter. The loaded data is passed to the
-        :meth:`from_mapping` method.
-
-        .. code-block:: python
-
-            import json
-            app.config.from_file("config.json", load=json.load)
-
-            import toml
-            app.config.from_file("config.toml", load=toml.load)
-
-        :param filename: The path to the data file. This can be an
-            absolute path or relative to the config root path.
-        :param load: A callable that takes a file handle and returns a
-            mapping of loaded data from the file.
-        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``
-            implements a ``read`` method.
+            self,
+            filename: str,
+            load: t.Callable[[t.IO[t.Any]], t.Mapping],
+            silent: bool = False,
+            mode: str = "t",  # Added mode parameter
+        ) -> bool:
+            """Update the values in the config from a file that is loaded
+            using the ``load`` parameter. The loaded data is passed to the
+            :meth:`from_mapping` method.
+    
+            .. code-block:: python
+    
+                import json
+                app.config.from_file("config.json", load=json.load)
+    
+                import toml
+                app.config.from_file("config.toml", load=toml.load, mode="b")
+    
+            :param filename: The path to the data file. This can be an
+                absolute path or relative to the config root path.
+            :param load: A callable that takes a file handle and returns a
+                mapping of loaded data from the file.
+            :type load: ``Callable[[Reader], Mapping]`` where ``Reader``
+                implements a ``read`` method.
+            :param mode: The mode in which the file should be opened, either
+                "t" for text mode or "b" for binary mode.
         :param silent: Ignore the file if it doesn't exist.
         :return: ``True`` if the file was loaded successfully.
 
         .. versionadded:: 2.0
         """
         filename = os.path.join(self.root_path, filename)
+        
+        file_mode = "r" + mode  # Create file mode string based on provided mode
 
         try:
-            with open(filename) as f:
+            with open(filename, file_mode) as f:
                 obj = load(f)
         except OSError as e:
             if silent and e.errno in (errno.ENOENT, errno.EISDIR):
