diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py
index fe1f7236e..6fe16ec7d 100644
--- a/sklearn/utils/validation.py
+++ b/sklearn/utils/validation.py
@@ -10,6 +10,7 @@
 
 import warnings
 import numbers
+import pytest
 
 import numpy as np
 import scipy.sparse as sp
@@ -546,8 +547,16 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,
                 "type np.float64 before passing it to check_array.",
                 FutureWarning)
 
+        # Include pandas import
+        import pandas as pd
+        
+        # Include _warn_on_dtype_conversion import
+        from ._warnings import _warn_on_dtype_conversion
+        
         # make sure we actually converted to numeric:
         if dtype_numeric and array.dtype.kind == "O":
+            if isinstance(array, pd.DataFrame):
+                _warn_on_dtype_conversion(array, dtype_orig, np.float64, context, warn_on_dtype)
             array = array.astype(np.float64)
         if not allow_nd and array.ndim >= 3:
             raise ValueError("Found array with dim %d. %s expected <= 2."
@@ -572,6 +581,15 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,
                              " a minimum of %d is required%s."
                              % (n_features, shape_repr, ensure_min_features,
                                 context))
+    
+    # Include pandas import
+    import pandas as pd
+    
+    # Include _warn_on_dtype_conversion import
+    from ._warnings import _warn_on_dtype_conversion
+
+    if warn_on_dtype and isinstance(array, pd.DataFrame):
+        _warn_on_dtype_conversion(array, dtype_orig, array.dtype, context, warn_on_dtype)
 
     if warn_on_dtype and dtype_orig is not None and array.dtype != dtype_orig:
         msg = ("Data with input dtype %s was converted to %s%s."
