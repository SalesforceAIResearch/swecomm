diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py
index fe1f7236e..47980bb87 100644
--- a/sklearn/utils/validation.py
+++ b/sklearn/utils/validation.py
@@ -10,6 +10,7 @@
 
 import warnings
 import numbers
+import pandas as pd  # Import pandas
 
 import numpy as np
 import scipy.sparse as sp
@@ -50,8 +51,7 @@ def _assert_all_finite(X, allow_nan=False):
         pass
     elif is_float:
         msg_err = "Input contains {} or a value too large for {!r}."
-        if (allow_nan and np.isinf(X).any() or
-                not allow_nan and not np.isfinite(X).all()):
+        if (allow_nan and np.isinf(X).any()) or (not allow_nan and not np.isfinite(X).all()):
             type_err = 'infinity' if allow_nan else 'NaN, infinity'
             raise ValueError(msg_err.format(type_err, X.dtype))
 
@@ -458,6 +458,11 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,
     # function returns
     array_orig = array
 
+    # Check if input is a pandas DataFrame
+    is_dataframe = isinstance(array, pd.DataFrame)
+    if is_dataframe:
+        array_orig_dtypes = array.dtypes
+
     # store whether originally we wanted numeric dtype
     dtype_numeric = isinstance(dtype, six.string_types) and dtype == "numeric"
 
@@ -578,6 +583,14 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,
                % (dtype_orig, array.dtype, context))
         warnings.warn(msg, DataConversionWarning)
 
+    # Check for dtype changes if the input was a DataFrame
+    if warn_on_dtype and is_dataframe:
+        for original_dtype, new_dtype in zip(array_orig_dtypes, array.dtypes):
+            if original_dtype != new_dtype:
+                msg = ("DataFrame column with dtype %s was converted to %s%s."
+                       % (original_dtype, new_dtype, context))
+                warnings.warn(msg, DataConversionWarning)
+
     if copy and np.may_share_memory(array, array_orig):
         array = np.array(array, dtype=dtype, order=order)
 
