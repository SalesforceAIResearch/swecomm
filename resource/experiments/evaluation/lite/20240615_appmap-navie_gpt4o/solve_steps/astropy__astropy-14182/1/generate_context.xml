<context>
<code-snippet location="astropy/io/ascii/connect.py:1-32">
# Licensed under a 3-clause BSD style license - see LICENSE.rst
# This file connects the readers/writers to the astropy.table.Table class


import re

from astropy.io import registry as io_registry  # noqa: F401
from astropy.table import Table

__all__ = []


def io_read(format, filename, **kwargs):
    from .ui import read

    if format != "ascii":
        format = re.sub(r"^ascii\.", "", format)
        kwargs["format"] = format
    return read(filename, **kwargs)


def io_write(format, table, filename, **kwargs):
    from .ui import write

    if format != "ascii":
        format = re.sub(r"^ascii\.", "", format)
        kwargs["format"] = format
    return write(table, filename, **kwargs)


def io_identify(suffix, origin, filepath, fileobj, *args, **kwargs):
    return filepath is not None and filepath.endswith(suffix)
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:892-901">
Returns
    -------
    writer : `~astropy.io.ascii.BaseReader` subclass
        ASCII format writer instance
    """
    if Writer is None:
        Writer = basic.Basic
    if "strip_whitespace" not in kwargs:
        kwargs["strip_whitespace"] = True
    writer = core._get_writer(Writer, fast_writer, **kwargs)
</code-snippet>
<code-snippet location="astropy/io/ascii/fixedwidth.py:1-13">
# Licensed under a 3-clause BSD style license - see LICENSE.rst
"""An extensible ASCII table reader and writer.

fixedwidth.py:
  Read or write a table with fixed width columns.

:Copyright: Smithsonian Astrophysical Observatory (2011)
:Author: Tom Aldcroft (aldcroft@head.cfa.harvard.edu)
"""


from . import basic, core
from .core import DefaultSplitter, InconsistentTableError
</code-snippet>
<code-snippet location="astropy/io/ascii/cds.py:1-22">
# Licensed under a 3-clause BSD style license - see LICENSE.rst
"""An extensible ASCII table reader and writer.

cds.py:
  Classes to read CDS / Vizier table format

:Copyright: Smithsonian Astrophysical Observatory (2011)
:Author: Tom Aldcroft (aldcroft@head.cfa.harvard.edu)
"""


import fnmatch
import itertools
import os
import re
from contextlib import suppress

from astropy.units import Unit

from . import core, fixedwidth

__doctest_skip__ = ["*"]
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:1-50">
# Licensed under a 3-clause BSD style license - see LICENSE.rst
"""An extensible ASCII table reader and writer.

ui.py:
  Provides the main user functions for reading and writing tables.

:Copyright: Smithsonian Astrophysical Observatory (2010)
:Author: Tom Aldcroft (aldcroft@head.cfa.harvard.edu)
"""


import collections
import contextlib
import copy
import os
import re
import sys
import time
import warnings
from io import StringIO

import numpy as np

from astropy.table import Table
from astropy.utils.data import get_readable_fileobj
from astropy.utils.exceptions import AstropyWarning
from astropy.utils.misc import NOT_OVERWRITING_MSG

from . import (
    basic,
    cds,
    core,
    cparser,
    daophot,
    ecsv,
    fastbasic,
    fixedwidth,
    html,
    ipac,
    latex,
    mrt,
    rst,
    sextractor,
)
from .docs import READ_KWARG_TYPES, WRITE_KWARG_TYPES

_read_trace = []

# Default setting for guess parameter in read()
_GUESS = True
</code-snippet>
<code-snippet location="astropy/io/ascii/connect.py:35-57">
def _get_connectors_table():
    from .core import FORMAT_CLASSES

    rows = []
    rows.append(
        ("ascii", "", "Yes", "ASCII table in any supported format (uses guessing)")
    )
    for format in sorted(FORMAT_CLASSES):
        cls = FORMAT_CLASSES[format]

        io_format = "ascii." + cls._format_name
        description = getattr(cls, "_description", "")
        class_link = f":class:`~{cls.__module__}.{cls.__name__}`"
        suffix = getattr(cls, "_io_registry_suffix", "")
        can_write = "Yes" if getattr(cls, "_io_registry_can_write", True) else ""

        rows.append((io_format, suffix, can_write, f"{class_link}: {description}"))
    out = Table(list(zip(*rows)), names=("Format", "Suffix", "Write", "Description"))
    for colname in ("Format", "Description"):
        width = max(len(x) for x in out[colname])
        out[colname].format = f"%-{width}s"

    return out
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:964-980">
if diff_format_with_names:
        warnings.warn(
            "The key(s) {} specified in the formats argument do not match a column"
            " name.".format(diff_format_with_names),
            AstropyWarning,
        )

    if table.has_mixin_columns:
        fast_writer = False

    Writer = _get_format_class(format, Writer, "Writer")
    writer = get_writer(Writer=Writer, fast_writer=fast_writer, **kwargs)
    if writer._format_name in core.FAST_CLASSES:
        writer.write(table, output)
        return

    lines = writer.write(table)
</code-snippet>
<code-snippet location="astropy/io/ascii/html.py:1-29">
# Licensed under a 3-clause BSD style license - see LICENSE.rst
"""An extensible HTML table reader and writer.

html.py:
  Classes to read and write HTML tables

`BeautifulSoup <http://www.crummy.com/software/BeautifulSoup/>`_
must be installed to read HTML tables.
"""

import warnings
from copy import deepcopy

from astropy.table import Column
from astropy.utils.xml import writer

from . import core


class SoupString(str):
    """
    Allows for strings to hold BeautifulSoup data.
    """

    def __new__(cls, *args, **kwargs):
        return str.__new__(cls, *args, **kwargs)

    def __init__(self, val):
        self.soup = val
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:836-861">
# Now read the chunk as a complete table
            tbl = read(complete_chunk, guess=False, **kwargs)

            # For the first chunk pop the meta key which contains the header
            # characters (everything up to the start of data) then fix kwargs
            # so it doesn't return that in meta any more.
            if first_chunk:
                header = tbl.meta.pop("__ascii_fast_reader_header_chars__")
                first_chunk = False

            yield tbl

            if final_chunk:
                break


extra_writer_pars = (
    "delimiter",
    "comment",
    "quotechar",
    "formats",
    "names",
    "include_names",
    "exclude_names",
    "strip_whitespace",
)
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:921-943">
def write(
    table,
    output=None,
    format=None,
    Writer=None,
    fast_writer=True,
    *,
    overwrite=False,
    **kwargs,
):
    # Docstring inserted below

    _validate_read_write_kwargs(
        "write", format=format, fast_writer=fast_writer, overwrite=overwrite, **kwargs
    )

    if isinstance(output, (str, bytes, os.PathLike)):
        output = os.path.expanduser(output)
        if not overwrite and os.path.lexists(output):
            raise OSError(NOT_OVERWRITING_MSG.format(output))

    if output is None:
        output = sys.stdout
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:187-212">
def _get_format_class(format, ReaderWriter, label):
    if format is not None and ReaderWriter is not None:
        raise ValueError(f"Cannot supply both format and {label} keywords")

    if format is not None:
        if format in core.FORMAT_CLASSES:
            ReaderWriter = core.FORMAT_CLASSES[format]
        else:
            raise ValueError(
                "ASCII format {!r} not in allowed list {}".format(
                    format, sorted(core.FORMAT_CLASSES)
                )
            )
    return ReaderWriter


def _get_fast_reader_dict(kwargs):
    """Convert 'fast_reader' key in kwargs into a dict if not already and make sure
    'enable' key is available.
    """
    fast_reader = copy.deepcopy(kwargs.get("fast_reader", True))
    if isinstance(fast_reader, dict):
        fast_reader.setdefault("enable", "force")
    else:
        fast_reader = {"enable": fast_reader}
    return fast_reader
</code-snippet>
<code-snippet location="astropy/io/registry/core.py:391-421">
class UnifiedIORegistry(UnifiedInputRegistry, UnifiedOutputRegistry):
    """Unified I/O Registry.

    .. versionadded:: 5.0
    """

    def __init__(self):
        super().__init__()
        self._registries_order = ("read", "write", "identify")

    def get_formats(self, data_class=None, readwrite=None):
        """
        Get the list of registered I/O formats as a `~astropy.table.Table`.

        Parameters
        ----------
        data_class : class, optional
            Filter readers/writer to match data class (default = all classes).

        readwrite : str or None, optional
            Search only for readers (``"Read"``) or writers (``"Write"``).
            If None search for both.  Default is None.

            .. versionadded:: 1.3

        Returns
        -------
        format_table : :class:`~astropy.table.Table`
            Table of available I/O formats.
        """
        return super().get_formats(data_class, readwrite)
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:168-184">
Returns
    -------
    reader : `~astropy.io.ascii.BaseReader` subclass
        ASCII format reader instance
    """
    # This function is a light wrapper around core._get_reader to provide a
    # public interface with a default Reader.
    if Reader is None:
        # Default reader is Basic unless fast reader is forced
        fast_reader = _get_fast_reader_dict(kwargs)
        if fast_reader["enable"] == "force":
            Reader = fastbasic.FastBasic
        else:
            Reader = basic.Basic

    reader = core._get_reader(Reader, Inputter=Inputter, Outputter=Outputter, **kwargs)
    return reader
</code-snippet>
<code-snippet location="astropy/io/ascii/fastbasic.py:13-27">
class FastBasic(metaclass=core.MetaBaseReader):
    """
    This class is intended to handle the same format addressed by the
    ordinary :class:`Basic` writer, but it acts as a wrapper for underlying C
    code and is therefore much faster. Unlike the other ASCII readers and
    writers, this class is not very extensible and is restricted
    by optimization requirements.
    """

    _format_name = "fast_basic"
    _description = "Basic table with custom delimiter using the fast C engine"
    _fast = True
    fill_extra_cols = False
    guessing = False
    strict_names = False
</code-snippet>
<code-snippet location="astropy/io/registry/core.py:241-260">
class UnifiedOutputRegistry(_UnifiedIORegistryBase):
    """Write-only Registry.

    .. versionadded:: 5.0
    """

    def __init__(self):
        super().__init__()
        self._writers = OrderedDict()
        self._registries["write"] = dict(attr="_writers", column="Write")
        self._registries_order = ("write", "identify")

    # =========================================================================
    # Write Methods

    def register_writer(
        self, data_format, data_class, function, force=False, priority=0
    ):
        """
        Register a table writer function.
</code-snippet>
<code-snippet location="astropy/io/ascii/cds.py:297-322">
If no ``readme`` parameter is specified, then the header
    information is assumed to be at the top of the given table.

      >>> r = ascii.get_reader(ascii.Cds)
      >>> table = r.read("data/cds.dat")
      >>> #The following gives InconsistentTableError, since no
      >>> #readme file was given and table1.dat does not have a header.
      >>> table = r.read("data/vizier/table1.dat")
      Traceback (most recent call last):
        ...
      InconsistentTableError: No CDS section delimiter found

    Caveats:

    * The Units and Explanations are available in the column ``unit`` and
      ``description`` attributes, respectively.
    * The other metadata defined by this format is not available in the output table.
    """

    _format_name = "cds"
    _io_registry_format_aliases = ["cds"]
    _io_registry_can_write = False
    _description = "CDS format table"

    data_class = CdsData
    header_class = CdsHeader
</code-snippet>
<code-snippet location="astropy/io/registry/core.py:325-344">
Returns
        -------
        writer : callable
            The registered writer function for this format and class.
        """
        writers = [(fmt, cls) for fmt, cls in self._writers if fmt == data_format]
        for writer_format, writer_class in writers:
            if self._is_best_match(data_class, writer_class, writers):
                return self._writers[(writer_format, writer_class)][0]
        else:
            format_table_str = self._get_format_table_str(data_class, "Write")
            raise IORegistryError(
                f"No writer defined for format '{data_format}' and class"
                f" '{data_class.__name__}'.\n\nThe available formats"
                f" are:\n\n{format_table_str}"
            )

    def write(self, data, *args, format=None, **kwargs):
        """
        Write out data.
</code-snippet>
<code-snippet location="astropy/io/ascii/fastbasic.py:191-214">
def write(self, table, output):
        """
        Use a fast Cython method to write table data to output,
        where output is a filename or file-like object.
        """
        self._write(table, output, {})

    def _write(
        self, table, output, default_kwargs, header_output=True, output_types=False
    ):
        # Fast writer supports only 1-d columns
        core._check_multidim_table(table, max_ndim=1)

        write_kwargs = {
            "delimiter": self.delimiter,
            "quotechar": self.quotechar,
            "strip_whitespace": self.strip_whitespace_fields,
            "comment": self.write_comment,
        }
        write_kwargs.update(default_kwargs)
        # user kwargs take precedence over default kwargs
        write_kwargs.update(self.kwargs)
        writer = cparser.FastWriter(table, **write_kwargs)
        writer.write(output, header_output, output_types)
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:903-918">
# Handle the corner case of wanting to disable writing table comments for the
    # commented_header format.  This format *requires* a string for `write_comment`
    # because that is used for the header column row, so it is not possible to
    # set the input `comment` to None.  Without adding a new keyword or assuming
    # a default comment character, there is no other option but to tell user to
    # simply remove the meta['comments'].
    if isinstance(
        writer, (basic.CommentedHeader, fastbasic.FastCommentedHeader)
    ) and not isinstance(kwargs.get("comment", ""), str):
        raise ValueError(
            "for the commented_header writer you must supply a string\n"
            "value for the `comment` keyword.  In order to disable writing\n"
            "table comments use `del t.meta['comments']` prior to writing."
        )

    return writer
</code-snippet>
<code-snippet location="astropy/io/ascii/cds.py:262-273">
>>> from astropy.io import ascii
      >>> table = ascii.read("data/cds.dat")
      >>> table = ascii.read("data/vizier/table1.dat", readme="data/vizier/ReadMe")
      >>> table = ascii.read("data/cds/multi/lhs2065.dat", readme="data/cds/multi/ReadMe")
      >>> table = ascii.read("data/cds/glob/lmxbrefs.dat", readme="data/cds/glob/ReadMe")

    The table name and the CDS ReadMe file can be entered as URLs.  This can be used
    to directly load tables from the Internet.  For example, Vizier tables from the
    CDS::

      >>> table = ascii.read("ftp://cdsarc.u-strasbg.fr/pub/cats/VII/253/snrs.dat",
      ...             readme="ftp://cdsarc.u-strasbg.fr/pub/cats/VII/253/ReadMe")
</code-snippet>
<code-snippet location="astropy/io/registry/core.py:288-315">
if data_class not in self._delayed_docs_classes:
            self._update__doc__(data_class, "write")

    def unregister_writer(self, data_format, data_class):
        """
        Unregister a writer function

        Parameters
        ----------
        data_format : str
            The data format identifier.
        data_class : class
            The class of the object that can be written.
        """

        if (data_format, data_class) in self._writers:
            self._writers.pop((data_format, data_class))
        else:
            raise IORegistryError(
                f"No writer defined for format '{data_format}' and class"
                f" '{data_class.__name__}'"
            )

        if data_class not in self._delayed_docs_classes:
            self._update__doc__(data_class, "write")

    def get_writer(self, data_format, data_class):
        """Get writer for ``data_format``.
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:126-149">
Parameters
    ----------
    Reader : `~astropy.io.ascii.BaseReader`
        Reader class (DEPRECATED). Default is :class:`Basic`.
    Inputter : `~astropy.io.ascii.BaseInputter`
        Inputter class
    Outputter : `~astropy.io.ascii.BaseOutputter`
        Outputter class
    delimiter : str
        Column delimiter string
    comment : str
        Regular expression defining a comment line in table
    quotechar : str
        One-character string to quote fields containing special characters
    header_start : int
        Line index for the header line not counting comment or blank lines.
        A line with only whitespace is considered blank.
    data_start : int
        Line index for the start of data not counting comment or blank lines.
        A line with only whitespace is considered blank.
    data_end : int
        Line index for the end of data not counting comment or blank lines.
        This value can be negative to count from the end.
    converters : dict
</code-snippet>
<code-snippet location="astropy/io/ascii/fastbasic.py:217-238">
class FastCsv(FastBasic):
    """
    A faster version of the ordinary :class:`Csv` writer that uses the
    optimized C parsing engine. Note that this reader will append empty
    field values to the end of any row with not enough columns, while
    :class:`FastBasic` simply raises an error.
    """

    _format_name = "fast_csv"
    _description = "Comma-separated values table using the fast C engine"
    _fast = True
    fill_extra_cols = True

    def __init__(self, **kwargs):
        super().__init__({"delimiter": ",", "comment": None}, **kwargs)

    def write(self, table, output):
        """
        Override the default write method of `FastBasic` to
        output masked values as empty fields.
        """
        self._write(table, output, {"fill_values": [(core.masked, "")]})
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:687-712">
# Start with ECSV because an ECSV file will be read by Basic.  This format
    # has very specific header requirements and fails out quickly.
    guess_kwargs_list.append(dict(Reader=ecsv.Ecsv))

    # Now try readers that accept the user-supplied keyword arguments
    # (actually include all here - check for compatibility of arguments later).
    # FixedWidthTwoLine would also be read by Basic, so it needs to come first;
    # same for RST.
    for reader in (
        fixedwidth.FixedWidthTwoLine,
        rst.RST,
        fastbasic.FastBasic,
        basic.Basic,
        fastbasic.FastRdb,
        basic.Rdb,
        fastbasic.FastTab,
        basic.Tab,
        cds.Cds,
        mrt.Mrt,
        daophot.Daophot,
        sextractor.SExtractor,
        ipac.Ipac,
        latex.Latex,
        latex.AASTex,
    ):
        guess_kwargs_list.append(dict(Reader=reader))
</code-snippet>
<code-snippet location="astropy/io/ascii/fastbasic.py:1-10">
# Licensed under a 3-clause BSD style license - see LICENSE.rst

import copy
import re
from collections import OrderedDict

from astropy.table import Table
from astropy.utils.misc import _set_locale

from . import core, cparser
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:864-867">
def get_writer(Writer=None, fast_writer=True, **kwargs):
    """
    Initialize a table writer allowing for common customizations.  Most of the
    default behavior for various parameters is determined by the Writer class.
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:1001-1016">
def get_read_trace():
    """
    Return a traceback of the attempted read formats for the last call to
    `~astropy.io.ascii.read` where guessing was enabled.  This is primarily for
    debugging.

    The return value is a list of dicts, where each dict includes the keyword
    args ``kwargs`` used in the read call and the returned ``status``.

    Returns
    -------
    trace : list of dict
        Ordered list of format guesses and status
    """

    return copy.deepcopy(_read_trace)
</code-snippet>
<code-snippet location="astropy/io/ascii/fixedwidth.py:396-412">
See the :ref:`astropy:fixed_width_gallery` for specific usage examples.

    """

    _format_name = "fixed_width_no_header"
    _description = "Fixed width with no header"
    header_class = FixedWidthNoHeaderHeader
    data_class = FixedWidthNoHeaderData

    def __init__(self, col_starts=None, col_ends=None, delimiter_pad=" ", bookend=True):
        super().__init__(
            col_starts,
            col_ends,
            delimiter_pad=delimiter_pad,
            bookend=bookend,
            header_rows=[],
        )
</code-snippet>
<code-snippet location="astropy/io/ascii/ui.py:146-166">
data_end : int
        Line index for the end of data not counting comment or blank lines.
        This value can be negative to count from the end.
    converters : dict
        Dict of converters.
    data_Splitter : `~astropy.io.ascii.BaseSplitter`
        Splitter class to split data columns.
    header_Splitter : `~astropy.io.ascii.BaseSplitter`
        Splitter class to split header columns.
    names : list
        List of names corresponding to each data column.
    include_names : list, optional
        List of names to include in output.
    exclude_names : list
        List of names to exclude from output (applied after ``include_names``).
    fill_values : tuple, list of tuple
        Specification of fill values for bad or missing table values.
    fill_include_names : list
        List of names to include in fill_values.
    fill_exclude_names : list
        List of names to exclude from fill_values (applied after ``fill_include_names``).
</code-snippet>
<code-snippet location="astropy/io/registry/core.py:314-323">
def get_writer(self, data_format, data_class):
        """Get writer for ``data_format``.

        Parameters
        ----------
        data_format : str
            The data format identifier. This is the string that is used to
            specify the data type when reading/writing.
        data_class : class
            The class of the object that can be written.
</code-snippet>
<code-snippet location="astropy/io/registry/core.py:279-286">
"""
        if not (data_format, data_class) in self._writers or force:
            self._writers[(data_format, data_class)] = function, priority
        else:
            raise IORegistryError(
                f"Writer for format '{data_format}' and class '{data_class.__name__}'"
                " is already defined"
            )
</code-snippet>
<code-snippet location="astropy/io/ascii/fastbasic.py:156-168">
if self.return_header_chars:
            out.meta["__ascii_fast_reader_header_chars__"] = self.engine.header_chars

        return out

    def make_table(self, data, comments):
        """Actually make the output table give the data and comments."""
        meta = OrderedDict()
        if comments:
            meta["comments"] = comments

        names = core._deduplicate_names(self.engine.get_names())
        return Table(data, names=names, meta=meta)
</code-snippet>
<code-snippet location="astropy/io/registry/core.py:361-388">
.. versionadded:: 4.3
        """
        # Expand a tilde-prefixed path if present in args[0]
        args = _expand_user_in_args(args)

        if format is None:
            path = None
            fileobj = None
            if len(args):
                if isinstance(args[0], PATH_TYPES):
                    # path might be a os.PathLike object
                    if isinstance(args[0], os.PathLike):
                        args = (os.fspath(args[0]),) + args[1:]
                    path = args[0]
                    fileobj = None
                elif hasattr(args[0], "read"):
                    path = None
                    fileobj = args[0]

            format = self._get_valid_format(
                "write", data.__class__, path, fileobj, args, kwargs
            )

        writer = self.get_writer(format, data.__class__)
        return writer(data, *args, **kwargs)


# -----------------------------------------------------------------------------
</code-snippet>
<code-snippet location="astropy/io/registry/core.py:262-282">
Parameters
        ----------
        data_format : str
            The data format identifier. This is the string that will be used to
            specify the data type when writing.
        data_class : class
            The class of the object that can be written.
        function : function
            The function to write out a data object.
        force : bool, optional
            Whether to override any existing function if already present.
            Default is ``False``.
        priority : int, optional
            The priority of the writer, used to compare possible formats when trying
            to determine the best writer to use. Higher priorities are preferred
            over lower priorities, with the default priority being 0 (negative
            numbers are allowed though).
        """
        if not (data_format, data_class) in self._writers or force:
            self._writers[(data_format, data_class)] = function, priority
        else:
</code-snippet>
</context>