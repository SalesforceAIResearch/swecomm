diff --git a/sympy/core/basic.py b/sympy/core/basic.py
index d4ca323e0d..29980f6735 100644
--- a/sympy/core/basic.py
+++ b/sympy/core/basic.py
@@ -727,7 +727,7 @@ def as_content_primitive(self, radical=False, clear=True):
     def subs(self, *args, **kwargs):
         """
         Substitutes old for new in an expression after sympifying args.
-
+        
         `args` is either:
           - two arguments, e.g. foo.subs(old, new)
           - one iterable argument, e.g. foo.subs(iterable). The iterable may be
@@ -740,6 +740,10 @@ def subs(self, *args, **kwargs):
                resulting sorted list is then processed as an iterable container
                (see previous).
 
+        After substitution, the result is checked for undefined operations
+        such as divisions by zero. If any undefined states are detected,
+        `S.NaN` is returned.
+
         If the keyword ``simultaneous`` is True, the subexpressions will not be
         evaluated until all the substitutions have been made.
 
@@ -916,10 +920,39 @@ def subs(self, *args, **kwargs):
             return rv.xreplace(reps)
         else:
             rv = self
+            from sympy.core.function import UndefinedFunction
+            from sympy.core.relational import Relational
+
             for old, new in sequence:
                 rv = rv._subs(old, new, **kwargs)
                 if not isinstance(rv, Basic):
                     break
+            
+            # Check for undefined expressions (e.g., division by zero)
+            def check_undefined(expr):
+                if expr.is_Atom:
+                    return expr
+                if expr.is_Function or isinstance(expr, Relational):
+                    args = [check_undefined(arg) for arg in expr.args]
+                    if S.NaN in args:
+                        return S.NaN
+                if expr.is_Pow and expr.exp.is_negative: 
+                    base = check_undefined(expr.base)
+                    if base == 0:
+                        return S.NaN
+                if expr.is_Mul or expr.is_Add:
+                    args = [check_undefined(arg) for arg in expr.args]
+                    if S.NaN in args:
+                        return S.NaN
+                if expr.is_Div:
+                    num, den = expr.as_numer_denom()
+                    if den == 0:
+                        return S.NaN
+                    return expr.func(check_undefined(num), check_undefined(den))
+                return expr
+
+            rv = check_undefined(rv)
+
             return rv
 
     @cacheit
