diff --git a/sympy/core/basic.py b/sympy/core/basic.py
index d4ca323e0d..185c2c5c4c 100644
--- a/sympy/core/basic.py
+++ b/sympy/core/basic.py
@@ -925,21 +925,29 @@ def subs(self, *args, **kwargs):
     @cacheit
     def _subs(self, old, new, **hints):
         """Substitutes an expression old -> new.
-
+        
         If self is not equal to old then _eval_subs is called.
         If _eval_subs doesn't want to make any special replacement
         then a None is received which indicates that the fallback
         should be applied wherein a search for replacements is made
         amongst the arguments of self.
-
+        
         >>> from sympy import Add
         >>> from sympy.abc import x, y, z
-
+        
         Examples
         ========
-
+        
         Add's _eval_subs knows how to target x + y in the following
         so it makes the change:
+        
+        # Pre-check for undefined conditions before substitution.
+        if _check_undefined(self.subs(old, new)):
+            raise ValueError("Resulting expression has undefined behavior")
+
+        >>> if self == old:
+        >>>    new = new._subs(old, new)
+    ...
 
             >>> (x + y + z).subs(x + y, 1)
             z + 1
@@ -1025,6 +1033,20 @@ def fallback(self, old, new):
                         return self.func(coeff, nonnumber, evaluate=False)
                 return rv
             return self
+        
+        if _check_undefined(rv):
+            raise ValueError("Resulting expression has undefined behavior")
+                        if i.is_Number:
+                            coeff *= i
+                        else:
+                            nonnumber.append(i)
+                    nonnumber = self.func(*nonnumber)
+                    if coeff is S.One:
+                        return nonnumber
+                    else:
+                        return self.func(coeff, nonnumber, evaluate=False)
+                return rv
+            return self
 
         if _aresame(self, old):
             return new
