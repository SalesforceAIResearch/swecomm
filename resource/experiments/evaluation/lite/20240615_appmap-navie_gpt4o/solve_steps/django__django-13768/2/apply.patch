diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py
index b7d9d26389..1c12515730 100644
--- a/django/dispatch/dispatcher.py
+++ b/django/dispatch/dispatcher.py
@@ -1,10 +1,13 @@
 import threading
 import warnings
 import weakref
+import logging
 
 from django.utils.deprecation import RemovedInDjango40Warning
 from django.utils.inspect import func_accepts_kwargs
 
+logger = logging.getLogger('django.dispatch')
+
 
 def _make_id(target):
     if hasattr(target, '__func__'):
@@ -182,25 +185,25 @@ class Signal:
     def send_robust(self, sender, **named):
         """
         Send signal from sender to all connected receivers catching errors.
-
+    
         Arguments:
-
+    
             sender
                 The sender of the signal. Can be any Python object (normally one
                 registered with a connect if you actually want something to
                 occur).
-
+    
             named
                 Named arguments which will be passed to receivers.
-
+    
         Return a list of tuple pairs [(receiver, response), ... ].
-
+    
         If any receiver raises an error (specifically any subclass of
         Exception), return the error instance as the result for that receiver.
         """
         if not self.receivers or self.sender_receivers_cache.get(sender) is NO_RECEIVERS:
             return []
-
+    
         # Call each receiver with whatever arguments it can accept.
         # Return a list of tuple pairs [(receiver, response), ... ].
         responses = []
@@ -208,6 +211,7 @@ class Signal:
             try:
                 response = receiver(signal=self, sender=sender, **named)
             except Exception as err:
+                logger.exception(f"Error occurred in receiver: {receiver} from sender: {sender}")
                 responses.append((receiver, err))
             else:
                 responses.append((receiver, response))
