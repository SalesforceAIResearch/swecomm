diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py
index 5eaef2fde..8e98e212e 100644
--- a/sklearn/utils/multiclass.py
+++ b/sklearn/utils/multiclass.py
@@ -4,11 +4,11 @@
 """
 Multi-class / multi-label utility function
 ==========================================
-
 """
 from collections.abc import Sequence
 from itertools import chain
 import warnings
+import pandas as pd
 
 from scipy.sparse import issparse
 from scipy.sparse import dok_matrix
@@ -43,26 +43,21 @@ _FN_UNIQUE_LABELS = {
 
 def unique_labels(*ys):
     """Extract an ordered array of unique labels.
-
     We don't allow:
         - mix of multilabel and multiclass (single label) targets
         - mix of label indicator matrix and anything else,
           because there are no explicit labels)
         - mix of label indicator matrices of different sizes
         - mix of string and integer labels
-
     At the moment, we also don't allow "multiclass-multioutput" input type.
-
     Parameters
     ----------
     *ys : array-likes
         Label values.
-
     Returns
     -------
     out : ndarray of shape (n_unique_labels,)
         An ordered array of unique labels.
-
     Examples
     --------
     >>> from sklearn.utils.multiclass import unique_labels
@@ -73,9 +68,22 @@ def unique_labels(*ys):
     >>> unique_labels([1, 2, 10], [5, 11])
     array([ 1,  2,  5, 10, 11])
     """
+    import pandas as pd
+
+    def convert_nullable_dtype(y):
+        if pd.api.types.is_integer_dtype(y):
+            return y.to_numpy(dtype="int64")
+        elif pd.api.types.is_float_dtype(y):
+            return y.to_numpy(dtype="float64")
+        elif pd.api.types.is_bool_dtype(y):
+            return y.to_numpy(dtype="bool")
+        return y
+
     xp, is_array_api = get_namespace(*ys)
     if not ys:
         raise ValueError("No argument has been passed.")
+    # Convert nullable dtypes to their numpy equivalents
+    ys = [convert_nullable_dtype(y) for y in ys]
     # Check that we don't mix label format
 
     ys_types = set(type_of_target(x) for x in ys)
