diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py
index 5eaef2fde..2de0144f2 100644
--- a/sklearn/utils/multiclass.py
+++ b/sklearn/utils/multiclass.py
@@ -63,6 +63,77 @@ def unique_labels(*ys):
     out : ndarray of shape (n_unique_labels,)
         An ordered array of unique labels.
 
+    Examples
+    --------
+    >>> from sklearn.utils.multiclass import unique_labels
+    >>> unique_labels([3, 5, 5, 5, 7, 7])
+    array([3, 5, 7])
+    >>> unique_labels([1, 2, 3, 4], [2, 2, 3, 4])
+    array([1, 2, 3, 4])
+    >>> unique_labels([1, 2, 10], [5, 11])
+    array([ 1,  2,  5, 10, 11])
+    """
+    try:
+        import pandas as pd
+    except ImportError:
+        pd = None
+
+    def convert_nullable_to_numpy(array):
+        if pd and isinstance(array, pd.Series) and pd.api.types.is_nullable_integer_dtype(array):
+            return array.astype('Int64').to_numpy()
+        if pd and isinstance(array, pd.Series) and pd.api.types.is_nullable_float_dtype(array):
+            return array.astype('Float64').to_numpy()
+        if pd and isinstance(array, pd.Series) and pd.api.types.is_bool_dtype(array):
+            return array.astype('boolean').to_numpy()
+        return array
+
+    ys = [convert_nullable_to_numpy(y) for y in ys]
+
+    xp, is_array_api = get_namespace(*ys)
+    if not ys:
+        raise ValueError("No argument has been passed.")
+    # Check that we don't mix label format
+
+    ys_types = set(type_of_target(x) for x in ys)
+    if ys_types == {"binary", "multiclass"}:
+        ys_types = {"multiclass"}
+
+    if len(ys_types) > 1:
+        raise ValueError("Mix type of y not allowed, got types %s" % ys_types)
+
+    label_type = ys_types.pop()
+
+    # Check consistency for the indicator format
+    if (
+        label_type == "multilabel-indicator"
+        and len(
+            set(
+                check_array(y, accept_sparse=["csr", "csc", "coo"]).shape[1] for y in ys
+            )
+        )
+        > 1
+    ):
+        raise ValueError(
+            "Multi-label binary indicator input with different numbers of labels"
+        )
+
+    # Get the unique set of labels
+    _unique_labels = _FN_UNIQUE_LABELS.get(label_type, None)
+    if not _unique_labels:
+        raise ValueError("Unknown label type: %s" % repr(ys))
+
+    if is_array_api:
+        # array_api does not allow for mixed dtypes
+        unique_ys = xp.concat([_unique_labels(y) for y in ys])
+        return xp.unique_values(unique_ys)
+
+    ys_labels = set(chain.from_iterable((i for i in _unique_labels(y)) for y in ys))
+    # Check that we don't mix string type with number type
+    if len(set(isinstance(label, str) for label in ys_labels)) > 1:
+        raise ValueError("Mix of label input types (string and number)")
+
+    return xp.asarray(sorted(ys_labels))
+
     Examples
     --------
     >>> from sklearn.utils.multiclass import unique_labels
