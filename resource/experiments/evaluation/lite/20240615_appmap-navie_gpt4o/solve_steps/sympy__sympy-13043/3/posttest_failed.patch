diff --git a/sympy/integrals/intpoly.py b/sympy/integrals/intpoly.py
index fc72bd206f..0713547eb0 100644
--- a/sympy/integrals/intpoly.py
+++ b/sympy/integrals/intpoly.py
@@ -21,7 +21,7 @@
 from sympy.polys.polytools import LC, gcd_list, degree_list
 
 
-def polytope_integrate(poly, expr, **kwargs):
+def polytope_integrate(poly, expr, dims=(x, y), **kwargs):
     """Integrates homogeneous functions over polytopes.
 
     This function accepts the polytope in `poly` (currently only polygons are
@@ -32,6 +32,7 @@ def polytope_integrate(poly, expr, **kwargs):
     ==========
     poly : The input Polygon.
     expr : The input polynomial.
+    dims : Tuple of symbols denoting axes (default is (x, y)).
 
     Optional Parameters:
     clockwise : Binary value to sort input points of the polygon clockwise.
@@ -60,12 +61,12 @@ def polytope_integrate(poly, expr, **kwargs):
 
     if isinstance(poly, Polygon):
         # For Vertex Representation
-        hp_params = hyperplane_parameters(poly)
+        hp_params = hyperplane_parameters(poly, dims)
         facets = poly.sides
     else:
         # For Hyperplane Representation
         plen = len(poly)
-        intersections = [intersection(poly[(i - 1) % plen], poly[i])
+        intersections = [intersection(poly[(i - 1) % plen], poly[i], dims)
                          for i in range(0, plen)]
         hp_params = poly
         lints = len(intersections)
@@ -354,7 +355,7 @@ def gradient_terms(binomial_power=0):
     return terms
 
 
-def hyperplane_parameters(poly):
+def hyperplane_parameters(poly, dims=(x, y)):
     """A helper function to return the hyperplane parameters
     of which the facets of the polygon are a part of.
     Currently works for only 2-Polytopes.
@@ -593,7 +594,7 @@ def decompose(expr, separate=False):
         poly_dict[0] = expr
 
     if separate:
-        return list(poly_dict.values())
+        return sorted(poly_dict.values(), key=lambda monom: sum(degree_list(monom)))
     return poly_dict
 
 
@@ -672,7 +673,7 @@ def norm(point):
         return sum(i**2 for i in point.values()) ** half
 
 
-def intersection(lineseg_1, lineseg_2):
+def intersection(lineseg_1, lineseg_2, dims=(x, y)):
     """Returns intersection between lines of which
     the input line segments are a part of.
     Note that this function is meant for use in integration_reduction
