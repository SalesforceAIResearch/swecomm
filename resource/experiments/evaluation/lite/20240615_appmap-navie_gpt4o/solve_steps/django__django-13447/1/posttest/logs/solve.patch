diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py
index 837dabfea8..2952a92373 100644
--- a/django/contrib/admin/sites.py
+++ b/django/contrib/admin/sites.py
@@ -430,13 +430,13 @@ class AdminSite:
                     return HttpResponsePermanentRedirect(path)
         raise Http404
 
-    def _build_app_dict(self, request, label=None):
+    def build_app_dict(self, request, label=None):
         """
         Build the app dictionary. The optional `label` parameter filters models
         of a specific app.
         """
         app_dict = {}
-
+    
         if label:
             models = {
                 m: m_a for m, m_a in self._registry.items()
@@ -444,7 +444,7 @@ class AdminSite:
             }
         else:
             models = self._registry
-
+    
         for model, model_admin in models.items():
             app_label = model._meta.app_label
 
@@ -463,6 +463,7 @@ class AdminSite:
             model_dict = {
                 'name': capfirst(model._meta.verbose_name_plural),
                 'object_name': model._meta.object_name,
+                'model_class': model,
                 'perms': perms,
                 'admin_url': None,
                 'add_url': None,
@@ -503,7 +504,7 @@ class AdminSite:
         Return a sorted list of all the installed apps that have been
         registered in this site.
         """
-        app_dict = self._build_app_dict(request)
+        app_dict = self.build_app_dict(request)
 
         # Sort the apps alphabetically.
         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())
@@ -520,7 +521,7 @@ class AdminSite:
         apps that have been registered in this site.
         """
         app_list = self.get_app_list(request)
-
+    
         context = {
             **self.each_context(request),
             'title': self.index_title,
@@ -528,13 +529,13 @@ class AdminSite:
             'app_list': app_list,
             **(extra_context or {}),
         }
-
+    
         request.current_app = self.name
 
         return TemplateResponse(request, self.index_template or 'admin/index.html', context)
 
     def app_index(self, request, app_label, extra_context=None):
-        app_dict = self._build_app_dict(request, app_label)
+        app_dict = self.build_app_dict(request, app_label)
         if not app_dict:
             raise Http404('The requested admin page does not exist.')
         # Sort the models alphabetically within each app.
