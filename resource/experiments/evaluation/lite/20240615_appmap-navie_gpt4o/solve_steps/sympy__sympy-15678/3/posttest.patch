diff --git a/sympy/geometry/util.py b/sympy/geometry/util.py
index d32adc3066..d96792c9a5 100644
--- a/sympy/geometry/util.py
+++ b/sympy/geometry/util.py
@@ -565,20 +565,32 @@ def idiff(eq, y, x, n=1):
     sympy.core.function.diff: explicitly differentiates wrt symbols
 
     """
+    from sympy import Eq
+
+    if isinstance(eq, Eq):
+        eq = eq.lhs - eq.rhs
+
     if is_sequence(y):
         dep = set(y)
         y = y[0]
     elif isinstance(y, Symbol):
         dep = {y}
+    elif isinstance(y, Function):
+        dep = {y}
+        y_sym = y
+        y = y.args[0]
     else:
         raise ValueError("expecting x-dependent symbol(s) but got: %s" % y)
-
-    f = dict([(s, Function(
-        s.name)(x)) for s in eq.free_symbols if s != x and s in dep])
+    
+    f = {s: Function(s.name)(x) for s in eq.free_symbols if s != x and s in dep}
+    
+    if "y_sym" in locals() and isinstance(y_sym, Function):
+        f[y_sym] = y_sym
+    
     dydx = Function(y.name)(x).diff(x)
     eq = eq.subs(f)
     derivs = {}
-    for i in range(n):
+    for i in range(n):        
         yp = solve(eq.diff(x), dydx)[0].subs(derivs)
         if i == n - 1:
             return yp.subs([(v, k) for k, v in f.items()])
