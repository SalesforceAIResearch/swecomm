diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py
index 34a3bab3fc..e083ab678e 100644
--- a/sympy/simplify/trigsimp.py
+++ b/sympy/simplify/trigsimp.py
@@ -752,6 +752,7 @@ def _trigpats():
     global _trigpat
     a, b, c = symbols('a b c', cls=Wild)
     d = Wild('d', commutative=False)
+    k = Wild('k', cls=Rational)
 
     # for the simplifications like sinh/cosh -> tanh:
     # DO NOT REORDER THE FIRST 14 since these are assumed to be in this
@@ -767,6 +768,8 @@ def _trigpats():
             a*(-sin(b)**2)**c, cos(b) + 1, cos(b) - 1),
         (a*(sin(b) + 1)**c*(sin(b) - 1)**c,
             a*(-cos(b)**2)**c, sin(b) + 1, sin(b) - 1),
+        (1/2*(-I*exp(I*k*b) + I*exp(-I*k*b)), sin(k*b), I, Rational(1, 2)),
+        (1/2/k*(-I*exp(I*k*b) + I*exp(-I*k*b)), sin(k*b)/k, I, Rational(1, 2)),
 
         (a*sinh(b)**c/cosh(b)**c, a*tanh(b)**c, S.One, S.One),
         (a*tanh(b)**c*cosh(b)**c, a*sinh(b)**c, S.One, S.One),
@@ -951,6 +954,12 @@ def __trigsimp(expr, deep=False):
             for i, (pattern, simp, ok1, ok2) in enumerate(matchers_division):
                 if not _dotrig(expr, pattern):
                     continue
+                    
+                # Check if the pattern involves exponential expressions with imaginary units
+                if I in expr.atoms() and expr.has(exp):
+                    if expr.match(pattern):
+                        expr = simp.subs(expr.match(pattern))
+                        break
 
                 newexpr = _match_div_rewrite(expr, i)
                 if newexpr is not None:
