diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index 77768e7383..63099c0017 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1471,18 +1471,64 @@ class DraggableBase:
 
     Derived classes must override the following methods::
 
-        def save_offset(self):
+        def save_offset(self, evt):
             '''
             Called when the object is picked for dragging; should save the
             reference position of the artist.
             '''
 
-        def update_offset(self, dx, dy):
+        def update_offset(self, evt, dx, dy):
             '''
             Called during the dragging; (*dx*, *dy*) is the pixel offset from
             the point where the mouse drag started.
             '''
 
+    def __init__(self, ref_artist, use_blit=False):
+        self.ref_artist = ref_artist
+        if not ref_artist.pickable():
+            ref_artist.set_picker(True)
+        self.got_artist = False
+        self._use_blit = use_blit and self.canvas.supports_blit
+        self.cids = [
+            self.canvas.callbacks._connect_picklable(
+                'pick_event', self.on_pick),
+            self.canvas.callbacks._connect_picklable(
+                'button_release_event', self.on_release),
+        ]
+
+    # A property, not an attribute, to maintain picklability.
+    canvas = property(lambda self: self.ref_artist.figure.canvas)
+
+    def on_motion(self, evt):
+        if self._check_still_parented() and self.got_artist:
+            dx = evt.x - self.mouse_x
+            dy = evt.y - self.mouse_y
+            self.update_offset(evt, dx, dy)
+            if self._use_blit:
+                self.canvas.restore_region(self.background)
+                self.ref_artist.draw(
+                    self.ref_artist.figure._get_renderer())
+                self.canvas.blit()
+            else:
+                self.canvas.draw()
+
+    def on_pick(self, evt):
+        if self._check_still_parented() and evt.artist == self.ref_artist:
+            self.mouse_x = evt.mouseevent.x
+            self.mouse_y = evt.mouseevent.y
+            self.got_artist = True
+            if self._use_blit:
+                self.ref_artist.set_animated(True)
+                self.canvas.draw()
+                self.background = \
+                    self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)
+                self.ref_artist.draw(
+                    self.ref_artist.figure._get_renderer())
+                self.canvas.blit()
+            self._c1 = self.canvas.callbacks._connect_picklable(
+                "motion_notify_event", self.on_motion)
+            self.save_offset(evt)
+
     Optionally, you may override the following method::
 
         def finalize_offset(self):
@@ -1567,10 +1613,10 @@ class DraggableBase:
         else:
             self.canvas.mpl_disconnect(c1)
 
-    def save_offset(self):
+    def save_offset(self, evt):
         pass
 
-    def update_offset(self, dx, dy):
+    def update_offset(self, evt, dx, dy):
         pass
 
     def finalize_offset(self):
@@ -1582,17 +1628,27 @@ class DraggableOffsetBox(DraggableBase):
         super().__init__(ref_artist, use_blit=use_blit)
         self.offsetbox = offsetbox
 
-    def save_offset(self):
+    def save_offset(self, evt):
         offsetbox = self.offsetbox
         renderer = offsetbox.figure._get_renderer()
         offset = offsetbox.get_offset(offsetbox.get_bbox(renderer), renderer)
         self.offsetbox_x, self.offsetbox_y = offset
         self.offsetbox.set_offset(offset)
 
-    def update_offset(self, dx, dy):
+    def update_offset(self, evt, dx, dy):
         loc_in_canvas = self.offsetbox_x + dx, self.offsetbox_y + dy
         self.offsetbox.set_offset(loc_in_canvas)
 
+    def on_release(self, event):
+        if self._check_still_parented() and self.got_artist:
+            self.finalize_offset()
+            self.got_artist = False
+            if self.canvas:
+                self.canvas.mpl_disconnect(self._c1)
+
+            if self._use_blit:
+                self.ref_artist.set_animated(False)
+
     def get_loc_in_canvas(self):
         offsetbox = self.offsetbox
         renderer = offsetbox.figure._get_renderer()
@@ -1607,11 +1663,11 @@ class DraggableAnnotation(DraggableBase):
         super().__init__(annotation, use_blit=use_blit)
         self.annotation = annotation
 
-    def save_offset(self):
+    def save_offset(self, evt):
         ann = self.annotation
         self.ox, self.oy = ann.get_transform().transform(ann.xyann)
 
-    def update_offset(self, dx, dy):
+    def update_offset(self, evt, dx, dy):
         ann = self.annotation
         ann.xyann = ann.get_transform().inverted().transform(
             (self.ox + dx, self.oy + dy))
