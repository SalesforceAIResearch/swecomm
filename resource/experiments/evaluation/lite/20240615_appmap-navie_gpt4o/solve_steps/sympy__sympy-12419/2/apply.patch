diff --git a/sympy/assumptions/handlers/matrices.py b/sympy/assumptions/handlers/matrices.py
index 55b007a306..9b4f5daa41 100644
--- a/sympy/assumptions/handlers/matrices.py
+++ b/sympy/assumptions/handlers/matrices.py
@@ -127,26 +127,31 @@ def MatrixSlice(expr, assumptions):
             return ask(Q.invertible(expr.parent), assumptions)
 
 class AskOrthogonalHandler(CommonHandler):
-    """
-    Handler for key 'orthogonal'
-    """
-    predicate = Q.orthogonal
+"""
+Handler for key 'orthogonal'
+"""
+predicate = Q.orthogonal
 
-    @staticmethod
-    def MatMul(expr, assumptions):
-        factor, mmul = expr.as_coeff_mmul()
-        if (all(ask(Q.orthogonal(arg), assumptions) for arg in mmul.args) and
-                factor == 1):
+@staticmethod
+def MatMul(expr, assumptions):
+    factor, mmul = expr.as_coeff_mmul()
+    if (all(ask(Q.orthogonal(arg), assumptions) for arg in mmul.args) and
+        factor == 1):
+        return True
+    if any(ask(Q.invertible(arg), assumptions) is False
+            for arg in mmul.args):
+        return False
+    if len(mmul.args) >= 2 and mmul.args[0] == mmul.args[-1].T:
+        if len(mmul.args) == 2:
             return True
-        if any(ask(Q.invertible(arg), assumptions) is False
-                for arg in mmul.args):
-            return False
+        return ask(Q.orthogonal(MatMul(*mmul.args[1:-1])), assumptions)
 
-    @staticmethod
-    def MatAdd(expr, assumptions):
-        if (len(expr.args) == 1 and
-                ask(Q.orthogonal(expr.args[0]), assumptions)):
-            return True
+
+@staticmethod
+def MatAdd(expr, assumptions):
+    if (len(expr.args) == 1 and
+            ask(Q.orthogonal(expr.args[0]), assumptions)):
+        return True
 
     @staticmethod
     def MatrixSymbol(expr, assumptions):
diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py
index 372487664c..91dc02f4d4 100644
--- a/sympy/concrete/summations.py
+++ b/sympy/concrete/summations.py
@@ -897,26 +897,31 @@ def eval_sum_direct(expr, limits):
 
 
 def eval_sum_symbolic(f, limits):
-    from sympy.functions import harmonic, bernoulli
-
-    f_orig = f
-    (i, a, b) = limits
-    if not f.has(i):
-        return f*(b - a + 1)
-
-    # Linearity
-    if f.is_Mul:
-        L, R = f.as_two_terms()
-
-        if not L.has(i):
-            sR = eval_sum_symbolic(R, (i, a, b))
-            if sR:
-                return L*sR
-
-        if not R.has(i):
-            sL = eval_sum_symbolic(L, (i, a, b))
-            if sL:
-                return R*sL
+from sympy.functions import harmonic, bernoulli
+from sympy.matrices.expressions.matexpr import Identity
+
+f_orig = f
+(i, a, b) = limits
+if not f.has(i):
+    return f*(b - a + 1)
+
+# Handle identity matrix case
+if isinstance(f, Identity):
+    return Identity(f.shape[0])._eval_sum(limits)
+
+# Linearity
+if f.is_Mul:
+    L, R = f.as_two_terms()
+
+    if not L.has(i):
+        sR = eval_sum_symbolic(R, (i, a, b))
+        if sR:
+            return L*sR
+
+    if not R.has(i):
+        sL = eval_sum_symbolic(L, (i, a, b))
+        if sL:
+            return R*sL
 
         try:
             f = apart(f, i)  # see if it becomes an Add
