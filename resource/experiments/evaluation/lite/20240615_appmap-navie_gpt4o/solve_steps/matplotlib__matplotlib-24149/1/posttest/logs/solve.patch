diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py
index 34c6ddb861..f14b26e8f2 100644
--- a/lib/matplotlib/cbook/__init__.py
+++ b/lib/matplotlib/cbook/__init__.py
@@ -1725,28 +1725,31 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):
             # This is something that numpy can not make heads or tails
             # of, assume "finite"
             return True
-    if skip_nonfinite is False:
-        if isinstance(obj, collections.abc.Iterator):
-            # needed to accept `array.flat` as input.
-            # np.flatiter reports as an instance of collections.Iterator
-            # but can still be indexed via [].
-            # This has the side effect of re-setting the iterator, but
-            # that is acceptable.
-            try:
-                return obj[0]
-            except TypeError:
-                pass
-            raise RuntimeError("matplotlib does not support generators "
-                               "as input")
-        return next(iter(obj))
-    elif isinstance(obj, np.flatiter):
-        # TODO do the finite filtering on this
-        return obj[0]
-    elif isinstance(obj, collections.abc.Iterator):
-        raise RuntimeError("matplotlib does not "
-                           "support generators as input")
-    else:
-        return next(val for val in obj if safe_isfinite(val))
+    try:
+        if skip_nonfinite is False:
+            if isinstance(obj, collections.abc.Iterator):
+                # needed to accept `array.flat` as input.
+                # np.flatiter reports as an instance of collections.Iterator
+                # but can still be indexed via [].
+                # This has the side effect of re-setting the iterator, but
+                # that is acceptable.
+                try:
+                    return obj[0]
+                except TypeError:
+                    pass
+                raise RuntimeError("matplotlib does not support generators "
+                                "as input")
+            return next(iter(obj))
+        elif isinstance(obj, np.flatiter):
+            # TODO do the finite filtering on this
+            return obj[0]
+        elif isinstance(obj, collections.abc.Iterator):
+            raise RuntimeError("matplotlib does not "
+                            "support generators as input")
+        else:
+            return next(val for val in obj if safe_isfinite(val))
+    except StopIteration:
+        return np.nan
 
 
 def sanitize_sequence(data):
