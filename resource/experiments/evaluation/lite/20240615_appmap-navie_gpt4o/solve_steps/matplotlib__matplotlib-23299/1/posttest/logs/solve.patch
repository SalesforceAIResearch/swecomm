diff --git a/lib/matplotlib/_pylab_helpers.py b/lib/matplotlib/_pylab_helpers.py
index 24fcb81fc9..4484c9e333 100644
--- a/lib/matplotlib/_pylab_helpers.py
+++ b/lib/matplotlib/_pylab_helpers.py
@@ -22,6 +22,9 @@ class Gcf:
     figure/manager numbers to managers, and a set of class methods that
     manipulate this `OrderedDict`.
 
+    # Adding a lock to prevent inconsistent state in multi-threaded environments
+    _fig_lock = threading.Lock()
+
     Attributes
     ----------
     figs : OrderedDict
@@ -37,39 +40,41 @@ class Gcf:
         If manager number *num* exists, make it the active one and return it;
         otherwise return *None*.
         """
-        manager = cls.figs.get(num, None)
-        if manager is not None:
-            cls.set_active(manager)
-        return manager
-
+        with cls._fig_lock:
+            manager = cls.figs.get(num, None)
+            if manager is not None:
+                cls.set_active(manager)
+            return manager
+    
     @classmethod
     def destroy(cls, num):
         """
         Destroy manager *num* -- either a manager instance or a manager number.
-
+    
         In the interactive backends, this is bound to the window "destroy" and
         "delete" events.
-
+    
         It is recommended to pass a manager instance, to avoid confusion when
         two managers share the same number.
         """
-        if all(hasattr(num, attr) for attr in ["num", "destroy"]):
-            manager = num
-            if cls.figs.get(manager.num) is manager:
-                cls.figs.pop(manager.num)
-        else:
-            try:
-                manager = cls.figs.pop(num)
-            except KeyError:
-                return
-        if hasattr(manager, "_cidgcf"):
-            manager.canvas.mpl_disconnect(manager._cidgcf)
-        manager.destroy()
-        del manager, num
-        # Full cyclic garbage collection may be too expensive to do on every
-        # figure destruction, so we collect only the youngest two generations.
-        # see: https://github.com/matplotlib/matplotlib/pull/3045
-        gc.collect(1)
+        with cls._fig_lock:
+            if all(hasattr(num, attr) for attr in ["num", "destroy"]):
+                manager = num
+                if cls.figs.get(manager.num) is manager:
+                    cls.figs.pop(manager.num)
+            else:
+                try:
+                    manager = cls.figs.pop(num)
+                except KeyError:
+                    return
+            if hasattr(manager, "_cidgcf"):
+                manager.canvas.mpl_disconnect(manager._cidgcf)
+            manager.destroy()
+            del manager, num
+            # Full cyclic garbage collection may be too expensive to do on every
+            # figure destruction, so we collect only the youngest two generations.
+            # see: https://github.com/matplotlib/matplotlib/pull/3045
+            gc.collect(1)
 
     @classmethod
     def destroy_fig(cls, fig):
@@ -127,18 +132,20 @@ class Gcf:
     @classmethod
     def set_active(cls, manager):
         """Make *manager* the active manager."""
-        cls.figs[manager.num] = manager
-        cls.figs.move_to_end(manager.num)
-
+        with cls._fig_lock:
+            cls.figs[manager.num] = manager
+            cls.figs.move_to_end(manager.num)
+    
     @classmethod
     def draw_all(cls, force=False):
         """
         Redraw all stale managed figures, or, if *force* is True, all managed
         figures.
         """
-        for manager in cls.get_all_fig_managers():
-            if force or manager.canvas.figure.stale:
-                manager.canvas.draw_idle()
+        with cls._fig_lock:
+            for manager in cls.get_all_fig_managers():
+                if force or manager.canvas.figure.stale:
+                    manager.canvas.draw_idle()
 
 
 atexit.register(Gcf.destroy_all)
