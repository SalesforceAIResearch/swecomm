diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py
index e1f97190c0..0bf68b2bd3 100644
--- a/sympy/assumptions/refine.py
+++ b/sympy/assumptions/refine.py
@@ -66,6 +66,24 @@ def refine(expr, assumptions=True):
     return refine(new_expr, assumptions)
 
 
+def refine_arg(expr, assumptions):
+    """
+    Handler for the argument function.
+
+    Examples
+    ========
+
+    >>> from sympy import Q, arg, refine
+    >>> from sympy.abc import x
+    >>> refine(arg(x), Q.positive(x))
+    0
+
+    """
+    arg = expr.args[0]
+    if ask(Q.positive(arg), assumptions):
+        return S.Zero
+    return expr
+
 def refine_abs(expr, assumptions):
     """
     Handler for the absolute value.
@@ -86,12 +104,12 @@ def refine_abs(expr, assumptions):
     from sympy.core.logic import fuzzy_not
     from sympy import Abs
     arg = expr.args[0]
-    if ask(Q.real(arg), assumptions) and \
-            fuzzy_not(ask(Q.negative(arg), assumptions)):
-        # if it's nonnegative
-        return arg
-    if ask(Q.negative(arg), assumptions):
-        return -arg
+    if ask(Q.real(arg), assumptions):
+        if fuzzy_not(ask(Q.negative(arg), assumptions)):
+            # if it's nonnegative
+            return arg
+        if ask(Q.negative(arg), assumptions):
+            return -arg
     # arg is Mul
     if isinstance(arg, Mul):
         r = [refine(abs(a), assumptions) for a in arg.args]
@@ -375,6 +393,7 @@ def refine_matrixelement(expr, assumptions):
 
 handlers_dict = {
     'Abs': refine_abs,
+    'arg': refine_arg,  # Added handler for arg
     'Pow': refine_Pow,
     'atan2': refine_atan2,
     're': refine_re,
