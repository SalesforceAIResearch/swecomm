diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py
index f0c81c123b..aa2354025f 100644
--- a/django/db/backends/sqlite3/schema.py
+++ b/django/db/backends/sqlite3/schema.py
@@ -84,6 +84,10 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
         return False
 
     def alter_db_table(self, model, old_db_table, new_db_table, disable_constraints=True):
+        if old_db_table == new_db_table:
+            # No operation necessary if the old and new db_table are the same
+            self.connection.check_constraints()
+            return
         if (not self.connection.features.supports_atomic_references_rename and
                 disable_constraints and self._is_referenced_by_fk_constraint(old_db_table)):
             if self.connection.in_atomic_block:
diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 982816be3a..bdb1c379e9 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -320,6 +320,9 @@ class RenameModel(ModelOperation):
         new_model = to_state.apps.get_model(app_label, self.new_name)
         if self.allow_migrate_model(schema_editor.connection.alias, new_model):
             old_model = from_state.apps.get_model(app_label, self.old_name)
+            # Skip the operation if db_table is defined and the table names are the same
+            if old_model._meta.db_table == new_model._meta.db_table:
+                return
             # Move the main table
             schema_editor.alter_db_table(
                 new_model,
