diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py
index 1e05aba59..80427c491 100644
--- a/sklearn/preprocessing/_encoders.py
+++ b/sklearn/preprocessing/_encoders.py
@@ -107,9 +107,16 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):
                     raise ValueError(msg)
                 else:
                     # Set the problematic rows to an acceptable value and
-                    # continue `The rows are marked `X_mask` and will be
+                    # continue. The rows are marked `X_mask` and will be
                     # removed later.
                     X_mask[:, i] = valid_mask
+                    if X.dtype.kind in 'UO':  # Check for strings
+                        max_len = max(
+                            len(str(item)) for item in self.categories_[i]
+                        )
+                        # Ensure X is cast to object to avoid truncation errors
+                        if any(len(str(item)) < max_len for item in Xi):
+                            Xi = Xi.astype(object)
                     Xi = Xi.copy()
                     Xi[~valid_mask] = self.categories_[i][0]
             _, encoded = _encode(Xi, self.categories_[i], encode=True)
@@ -506,6 +513,9 @@ class OneHotEncoder(_BaseEncoder):
                 X, self._legacy_fit_transform, self.dtype,
                 self._categorical_features, copy=True)
         else:
+            if any(isinstance(i, str) for sublist in X for i in sublist):
+                # Ensure X is cast to object to handle string length mismatch
+                X = check_array(X, dtype='object', ensure_2d=False)
             return self.fit(X).transform(X)
 
     def _legacy_transform(self, X):
@@ -539,6 +549,10 @@ class OneHotEncoder(_BaseEncoder):
                 raise ValueError("unknown categorical feature present %s "
                                  "during transform." % X.ravel()[~mask])
 
+        # Ensure X is cast to object type to avoid truncation errors
+        if any(isinstance(i, str) for sublist in X for i in sublist):
+            X = X.astype(object)
+
         column_indices = (X + indices[:-1]).ravel()[mask]
         row_indices = np.repeat(np.arange(n_samples, dtype=np.int32),
                                 n_features)[mask]
