diff --git a/requests/sessions.py b/requests/sessions.py
index 425db22c..a4e450e3 100644
--- a/requests/sessions.py
+++ b/requests/sessions.py
@@ -86,6 +86,7 @@ class SessionRedirectMixin(object):
         """Receives a Response. Returns a generator of Responses."""
 
         i = 0
+        prev_method = req.method
 
         while resp.is_redirect:
             prepared_request = req.copy()
@@ -99,7 +100,7 @@ class SessionRedirectMixin(object):
             resp.close()
 
             url = resp.headers['location']
-            method = req.method
+            method = prev_method
 
             # Handle redirection without scheme (see: RFC 1808 Section 4)
             if url.startswith('//'):
@@ -120,25 +121,27 @@ class SessionRedirectMixin(object):
 
             prepared_request.url = to_native_string(url)
 
-            # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4
+            # Reset method to GET if status is 303 (See Other)
             if (resp.status_code == codes.see_other and
                     method != 'HEAD'):
                 method = 'GET'
-
-            # Do what the browsers do, despite standards...
-            # First, turn 302s into GETs.
-            if resp.status_code == codes.found and method != 'HEAD':
-                method = 'GET'
-
-            # Second, if a POST is responded to with a 301, turn it into a GET.
-            # This bizarre behaviour is explained in Issue 1704.
-            if resp.status_code == codes.moved and method == 'POST':
-                method = 'GET'
+            # Ensure the method used during redirection is carried over
+            # for non-303 statuses.
+            elif resp.status_code in (codes.moved, codes.found, codes.temporary):
+                # Second, if a POST is responded to with a 301, turn it into a GET.
+                # This bizarre behavior is explained in Issue 1704.
+                if resp.status_code == codes.moved and method == 'POST':
+                    method = 'GET'
+                elif resp.status_code != codes.temporary:
+                    method = 'GET'
+            elif resp.status_code == codes.resume:
+                method = prev_method
 
             prepared_request.method = method
+            prev_method = method
 
             # https://github.com/kennethreitz/requests/issues/1084
-            if resp.status_code not in (codes.temporary, codes.resume):
+            if resp.status_code != codes.resume:
                 if 'Content-Length' in prepared_request.headers:
                     del prepared_request.headers['Content-Length']
 
