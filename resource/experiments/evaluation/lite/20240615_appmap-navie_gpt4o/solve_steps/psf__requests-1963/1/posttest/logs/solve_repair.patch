diff --git a/requests/models.py b/requests/models.py
index e2fa09f8..f88a7594 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -161,7 +161,7 @@ class RequestHooksMixin(object):
         if event not in self.hooks:
             raise ValueError('Unsupported event specified, with event name "%s"' % (event))
 
-        if isinstance(hook, collections.Callable):
+        if isinstance(hook, collections.abc.Callable):
             self.hooks[event].append(hook)
         elif hasattr(hook, '__iter__'):
             self.hooks[event].extend(h for h in hook if isinstance(h, collections.Callable))
diff --git a/requests/packages/urllib3/_collections.py b/requests/packages/urllib3/_collections.py
index 5907b0dc..f34956fa 100644
--- a/requests/packages/urllib3/_collections.py
+++ b/requests/packages/urllib3/_collections.py
@@ -4,7 +4,7 @@
 # This module is part of urllib3 and is released under
 # the MIT License: http://www.opensource.org/licenses/mit-license.php
 
-from collections import MutableMapping
+from collections.abc import MutableMapping
 try:
     from threading import RLock
 except ImportError: # Platform-specific: No threads available
diff --git a/requests/sessions.py b/requests/sessions.py
index 425db22c..3cf3e110 100644
--- a/requests/sessions.py
+++ b/requests/sessions.py
@@ -9,7 +9,7 @@ requests (cookies, auth, proxies).
 
 """
 import os
-from collections import Mapping
+from collections.abc import Mapping
 from datetime import datetime
 
 from .compat import cookielib, OrderedDict, urljoin, urlparse, builtin_str
@@ -87,6 +87,8 @@ class SessionRedirectMixin(object):
 
         i = 0
 
+        current_method = req.method
+
         while resp.is_redirect:
             prepared_request = req.copy()
 
@@ -99,7 +101,6 @@ class SessionRedirectMixin(object):
             resp.close()
 
             url = resp.headers['location']
-            method = req.method
 
             # Handle redirection without scheme (see: RFC 1808 Section 4)
             if url.startswith('//'):
@@ -122,20 +123,20 @@ class SessionRedirectMixin(object):
 
             # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4
             if (resp.status_code == codes.see_other and
-                    method != 'HEAD'):
-                method = 'GET'
+                    current_method != 'HEAD'):
+                current_method = 'GET'
 
             # Do what the browsers do, despite standards...
             # First, turn 302s into GETs.
-            if resp.status_code == codes.found and method != 'HEAD':
-                method = 'GET'
+            if resp.status_code == codes.found and current_method != 'HEAD':
+                current_method = 'GET'
 
             # Second, if a POST is responded to with a 301, turn it into a GET.
             # This bizarre behaviour is explained in Issue 1704.
-            if resp.status_code == codes.moved and method == 'POST':
-                method = 'GET'
+            if resp.status_code == codes.moved and current_method == 'POST':
+                current_method = 'GET'
 
-            prepared_request.method = method
+            prepared_request.method = current_method
 
             # https://github.com/kennethreitz/requests/issues/1084
             if resp.status_code not in (codes.temporary, codes.resume):
