diff --git a/requests/sessions.py b/requests/sessions.py
index 425db22c..87671ce6 100644
--- a/requests/sessions.py
+++ b/requests/sessions.py
@@ -87,6 +87,8 @@ class SessionRedirectMixin(object):
 
         i = 0
 
+        current_method = req.method
+
         while resp.is_redirect:
             prepared_request = req.copy()
 
@@ -99,7 +101,6 @@ class SessionRedirectMixin(object):
             resp.close()
 
             url = resp.headers['location']
-            method = req.method
 
             # Handle redirection without scheme (see: RFC 1808 Section 4)
             if url.startswith('//'):
@@ -122,20 +123,20 @@ class SessionRedirectMixin(object):
 
             # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4
             if (resp.status_code == codes.see_other and
-                    method != 'HEAD'):
-                method = 'GET'
+                    current_method != 'HEAD'):
+                current_method = 'GET'
 
             # Do what the browsers do, despite standards...
             # First, turn 302s into GETs.
-            if resp.status_code == codes.found and method != 'HEAD':
-                method = 'GET'
+            if resp.status_code == codes.found and current_method != 'HEAD':
+                current_method = 'GET'
 
             # Second, if a POST is responded to with a 301, turn it into a GET.
             # This bizarre behaviour is explained in Issue 1704.
-            if resp.status_code == codes.moved and method == 'POST':
-                method = 'GET'
+            if resp.status_code == codes.moved and current_method == 'POST':
+                current_method = 'GET'
 
-            prepared_request.method = method
+            prepared_request.method = current_method
 
             # https://github.com/kennethreitz/requests/issues/1084
             if resp.status_code not in (codes.temporary, codes.resume):
