diff --git a/django/views/debug.py b/django/views/debug.py
index e6b7d4d821..abb4be51f5 100644
--- a/django/views/debug.py
+++ b/django/views/debug.py
@@ -84,21 +84,28 @@ class SafeExceptionReporterFilter:
         """
         Cleanse an individual setting key/value of sensitive content. If the
         value is a dictionary, recursively cleanse the keys in that dictionary.
+        If the value is a list, tuple, or set, cleanse each element.
         """
         try:
             if self.hidden_settings.search(key):
                 cleansed = self.cleansed_substitute
             elif isinstance(value, dict):
                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}
+            elif isinstance(value, list):
+                cleansed = [self.cleanse_setting(key, v) for v in value]
+            elif isinstance(value, tuple):
+                cleansed = tuple(self.cleanse_setting(key, v) for v in value)
+            elif isinstance(value, set):
+                cleansed = {self.cleanse_setting(key, v) for v in value}
             else:
                 cleansed = value
         except TypeError:
             # If the key isn't regex-able, just return as-is.
             cleansed = value
-
+    
         if callable(cleansed):
             cleansed = CallableSettingWrapper(cleansed)
-
+    
         return cleansed
 
     def get_safe_settings(self):
