<context>
<code-snippet location="data/TeXmacs/bin/tm_sympy:71-97">
for _symbol in _greek.split(' '):
    exec("%s = Symbol('%s')" % (_symbol, _symbol))

del _symbol
"""

eval(compile(_init, 'tm_sympy', 'exec'), _globals)

while True:
    line = os.sys.stdin.readline().strip()

    if not line:
        send("verbatim")
    elif line[0] != DATA_COMMAND:
        line = re.sub(r' {2}(\s*)', r'\n \1', line)

        try:
            output = eval(line, _globals)
        except SyntaxError:
            try:
                output = eval(compile(line, 'tm_sympy', 'exec'), _globals)
            except (SyntaxError, TypeError) :
                send("verbatim", traceback.format_exc(limit = 0))
                continue

        _globals['_'] = output
        send("latex", output)
</code-snippet>
<code-snippet location="sympy/core/evaluate.py:5-18">
class _global_function(list):
    """ The cache must be cleared whenever _global_function is changed. """

    def __setitem__(self, key, value):
        if (self[key] != value):
            clear_cache()
        super(_global_function, self).__setitem__(key, value)


global_evaluate = _global_function([True])
global_distribute = _global_function([True])


@contextmanager
</code-snippet>
<code-snippet location="sympy/combinatorics/free_groups.py:66-89">
def vfree_group(symbols):
    """Construct a free group and inject ``f_0, f_1, ..., f_(n-1)`` as symbols
    into the global namespace.

    Parameters
    ==========

    symbols : str, Symbol/Expr or sequence of str, Symbol/Expr (may be empty)

    Examples
    ========

    >>> from sympy.combinatorics.free_groups import vfree_group
    >>> vfree_group("x, y, z")
    <free group on the generators (x, y, z)>
    >>> x**2*y**-2*z
    x**2*y**-2*z
    >>> type(_)
    <class 'sympy.combinatorics.free_groups.FreeGroupElement'>

    """
    _free_group = FreeGroup(symbols)
    pollute([sym.name for sym in _free_group.symbols], _free_group.generators)
    return _free_group
</code-snippet>
<code-snippet location="sympy/polys/orderings.py:126-135">
def __hash__(self):
        return hash((self.__class__, self.args))

    @property
    def is_global(self):
        if all(o.is_global is True for o, _ in self.args):
            return True
        if all(o.is_global is False for o, _ in self.args):
            return False
        return None
</code-snippet>
<code-snippet location="sympy/core/evaluate.py:49-72">
def distribute(x):
    """ Control automatic distribution of Number over Add

    This context manager controls whether or not Mul distribute Number over
    Add. Plan is to avoid distributing Number over Add in all of sympy. Once
    that is done, this contextmanager will be removed.

    Examples
    ========

    >>> from sympy.abc import x
    >>> from sympy.core.evaluate import distribute
    >>> print(2*(x + 1))
    2*x + 2
    >>> with distribute(False):
    ...     print(2*(x + 1))
    2*(x + 1)
    """

    old = global_distribute[0]

    global_distribute[0] = x
    yield
    global_distribute[0] = old
</code-snippet>
<code-snippet location="sympy/core/evaluate.py:19-48">
def evaluate(x):
    """ Control automatic evaluation

    This context manager controls whether or not all SymPy functions evaluate
    by default.

    Note that much of SymPy expects evaluated expressions.  This functionality
    is experimental and is unlikely to function as intended on large
    expressions.

    Examples
    ========

    >>> from sympy.abc import x
    >>> from sympy.core.evaluate import evaluate
    >>> print(x + x)
    2*x
    >>> with evaluate(False):
    ...     print(x + x)
    x + x
    """

    old = global_evaluate[0]

    global_evaluate[0] = x
    yield
    global_evaluate[0] = old


@contextmanager
</code-snippet>
<code-snippet location="sympy/plotting/experimental_lambdify.py:1-18">
""" rewrite of lambdify - This stuff is not stable at all.

It is for internal use in the new plotting module.
It may (will! see the Q'n'A in the source) be rewritten.

It's completely self contained. Especially it does not use lambdarepr.

It does not aim to replace the current lambdify. Most importantly it will never
ever support anything else than sympy expressions (no Matrices, dictionaries
and so on).
"""

from __future__ import print_function, division

import re
from sympy import Symbol, NumberSymbol, I, zoo, oo
from sympy.core.compatibility import exec_, string_types
from sympy.utilities.iterables import numbered_symbols
</code-snippet>
<code-snippet location="sympy/polys/orderings.py:35-61">
class LexOrder(MonomialOrder):
    """Lexicographic order of monomials. """

    alias = 'lex'
    is_global = True
    is_default = True

    def __call__(self, monomial):
        return monomial

class GradedLexOrder(MonomialOrder):
    """Graded lexicographic order of monomials. """

    alias = 'grlex'
    is_global = True

    def __call__(self, monomial):
        return (sum(monomial), monomial)

class ReversedGradedLexOrder(MonomialOrder):
    """Reversed graded lexicographic order of monomials. """

    alias = 'grevlex'
    is_global = True

    def __call__(self, monomial):
        return (sum(monomial), tuple(reversed([-m for m in monomial])))
</code-snippet>
<code-snippet location="sympy/polys/orderings.py:1-43">
"""Definitions of monomial orderings. """

from __future__ import print_function, division

__all__ = ["lex", "grlex", "grevlex", "ilex", "igrlex", "igrevlex"]

from sympy.core import Symbol
from sympy.core.compatibility import iterable

class MonomialOrder(object):
    """Base class for monomial orderings. """

    alias = None
    is_global = None
    is_default = False

    def __repr__(self):
        return self.__class__.__name__ + "()"

    def __str__(self):
        return self.alias

    def __call__(self, monomial):
        raise NotImplementedError

    def __eq__(self, other):
        return self.__class__ == other.__class__

    def __hash__(self):
        return hash(self.__class__)

    def __ne__(self, other):
        return not (self == other)

class LexOrder(MonomialOrder):
    """Lexicographic order of monomials. """

    alias = 'lex'
    is_global = True
    is_default = True

    def __call__(self, monomial):
        return monomial
</code-snippet>
<code-snippet location="sympy/physics/quantum/identitysearch.py:775-806">
Examples
    ========

    Find a list of gate identities:

    >>> from sympy.physics.quantum.identitysearch import bfs_identity_search
    >>> from sympy.physics.quantum.gate import X, Y, Z, H
    >>> x = X(0); y = Y(0); z = Z(0)
    >>> bfs_identity_search([x], 1, max_depth=2)
    {GateIdentity(X(0), X(0))}

    >>> bfs_identity_search([x, y, z], 1)
    {GateIdentity(X(0), X(0)), GateIdentity(Y(0), Y(0)),
     GateIdentity(Z(0), Z(0)), GateIdentity(X(0), Y(0), Z(0))}

    Find a list of identities that only equal to 1:

    >>> bfs_identity_search([x, y, z], 1, identity_only=True)
    {GateIdentity(X(0), X(0)), GateIdentity(Y(0), Y(0)),
     GateIdentity(Z(0), Z(0))}
    """

    if max_depth is None or max_depth <= 0:
        max_depth = len(gate_list)

    id_only = identity_only

    # Start with an empty sequence (implicitly contains an IdentityGate)
    queue = deque([()])

    # Create an empty set of gate identities
    ids = set()
</code-snippet>
<code-snippet location="sympy/physics/quantum/identitysearch.py:665-694">
def is_degenerate(identity_set, gate_identity):
    """Checks if a gate identity is a permutation of another identity.

    Parameters
    ==========

    identity_set : set
        A Python set with GateIdentity objects.
    gate_identity : GateIdentity
        The GateIdentity to check for existence in the set.

    Examples
    ========

    Check if the identity is a permutation of another identity:

    >>> from sympy.physics.quantum.identitysearch import (
    ...     GateIdentity, is_degenerate)
    >>> from sympy.physics.quantum.gate import X, Y, Z
    >>> x = X(0); y = Y(0); z = Z(0)
    >>> an_identity = GateIdentity(x, y, z)
    >>> id_set = {an_identity}
    >>> another_id = (y, z, x)
    >>> is_degenerate(id_set, another_id)
    True

    >>> another_id = (x, x)
    >>> is_degenerate(id_set, another_id)
    False
    """
</code-snippet>
<code-snippet location="data/TeXmacs/bin/tm_sympy:25-75">
import os
import re
import traceback

from sympy import __version__
from sympy.printing import latex

BEGIN, END = chr(2), chr(5)

DATA_COMMAND = chr(16)
DATA_ESCAPE = chr(27)

def send(kind, output=None):
    if output is None:
        output = ""
    elif kind == "latex":
        output = latex(output)

    message = "%s:%s" %  (kind, output)

    os.sys.stdout.write(BEGIN)
    os.sys.stdout.write(message)
    os.sys.stdout.write(END)
    os.sys.stdout.flush()

send("verbatim", "Welcome to SymPy " + __version__)

_globals = {}

_init = \
"""
from sympy import *

_ = None

x, y, z, t = symbols('x,y,z,t')
k, i, m, n = symbols('k,i,m,n', integer=True)

f = Function('f')

Gamma, Zeta = gamma, zeta

_greek = 'alpha beta gamma delta epsilon zeta eta '  \
         'theta iota kappa mu nu xi omicron rho ' \
         'sigma tau upsilon phi chi psi omega'

for _symbol in _greek.split(' '):
    exec("%s = Symbol('%s')" % (_symbol, _symbol))

del _symbol
"""
</code-snippet>
<code-snippet location="sympy/physics/quantum/identitysearch.py:604-633">
class GateIdentity(Basic):
    """Wrapper class for circuits that reduce to a scalar value.

    A gate identity is a quantum circuit such that the product
    of the gates in the circuit is equal to a scalar value.
    For example, XYZ = i, where X, Y, Z are the Pauli gates and
    i is the imaginary value, is considered a gate identity.

    Parameters
    ==========

    args : Gate tuple
        A variable length tuple of Gates that form an identity.

    Examples
    ========

    Create a GateIdentity and look at its attributes:

    >>> from sympy.physics.quantum.identitysearch import GateIdentity
    >>> from sympy.physics.quantum.gate import X, Y, Z
    >>> x = X(0); y = Y(0); z = Z(0)
    >>> an_identity = GateIdentity(x, y, z)
    >>> an_identity.circuit
    X(0)*Y(0)*Z(0)

    >>> an_identity.equivalent_ids
    {(X(0), Y(0), Z(0)), (X(0), Z(0), Y(0)), (Y(0), X(0), Z(0)),
     (Y(0), Z(0), X(0)), (Z(0), X(0), Y(0)), (Z(0), Y(0), X(0))}
    """
</code-snippet>
<code-snippet location="sympy/physics/quantum/identitysearch.py:755-778">
def bfs_identity_search(gate_list, nqubits, max_depth=None,
       identity_only=False):
    """Constructs a set of gate identities from the list of possible gates.

    Performs a breadth first search over the space of gate identities.
    This allows the finding of the shortest gate identities first.

    Parameters
    ==========

    gate_list : list, Gate
        A list of Gates from which to search for gate identities.
    nqubits : int
        The number of qubits the quantum circuit operates on.
    max_depth : int
        The longest quantum circuit to construct from gate_list.
    identity_only : bool
        True to search for gate identities that reduce to identity;
        False to search for gate identities that reduce to a scalar.

    Examples
    ========

    Find a list of gate identities:
</code-snippet>
<code-snippet location="sympy/polys/orderings.py:162-197">
def __call__(self, monomial):
        def inv(l):
            if iterable(l):
                return tuple(inv(x) for x in l)
            return -l
        return inv(self.O(monomial))

    @property
    def is_global(self):
        if self.O.is_global is True:
            return False
        if self.O.is_global is False:
            return True
        return None

    def __eq__(self, other):
        return isinstance(other, InverseOrder) and other.O == self.O

    def __hash__(self):
        return hash((self.__class__, self.O))

lex = LexOrder()
grlex = GradedLexOrder()
grevlex = ReversedGradedLexOrder()
ilex = InverseOrder(lex)
igrlex = InverseOrder(grlex)
igrevlex = InverseOrder(grevlex)

_monomial_key = {
    'lex': lex,
    'grlex': grlex,
    'grevlex': grevlex,
    'ilex': ilex,
    'igrlex': igrlex,
    'igrevlex': igrevlex
}
</code-snippet>
<code-snippet location="sympy/plotting/experimental_lambdify.py:43-55">
# Q: Why are you not using python abstract syntax tree?
# A: Because it is more complicated and not much more powerful in this case.

# Q: What if I have Symbol('sin') or g=Function('f')?
# A: You will break the algorithm. We should use srepr to defend against this?
#  The problem with Symbol('sin') is that it will be printed as 'sin'. The
# parser will distinguish it from the function 'sin' because functions are
# detected thanks to the opening parenthesis, but the lambda expression won't
# understand the difference if we have also the sin function.
# The solution (complicated) is to use srepr and maybe ast.
#  The problem with the g=Function('f') is that it will be printed as 'f' but in
# the global namespace we have only 'g'. But as the same printer is used in the
# constructor of the namespace there will be no problem.
</code-snippet>
</context>