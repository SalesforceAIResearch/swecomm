diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py
index a940509b47..8251245d21 100644
--- a/sympy/utilities/lambdify.py
+++ b/sympy/utilities/lambdify.py
@@ -22,8 +22,8 @@
 # by simple variable maps, like I => 1j
 MATH_DEFAULT = {}
 MPMATH_DEFAULT = {}
-NUMPY_DEFAULT = {"I": 1j}
-SCIPY_DEFAULT = {"I": 1j}
+NUMPY_DEFAULT = {"I": 1j, "Identity": "numpy.eye"}
+SCIPY_DEFAULT = {"I": 1j, "Identity": "numpy.eye"}
 TENSORFLOW_DEFAULT = {}
 SYMPY_DEFAULT = {}
 NUMEXPR_DEFAULT = {}
@@ -961,6 +961,15 @@ def __init__(self, printer=None, dummify=False):
             if hasattr(printer, '_print_Dummy'):
                 dummyrepr = printer._print_Dummy
 
+            if hasattr(printer, '_print_Identity'):
+                self._exprrepr = self._print_Identity
+
+            if hasattr(printer, '_print_Symbol'):
+                symbolrepr = printer._print_Symbol
+
+            if hasattr(printer, '_print_Dummy'):
+                dummyrepr = printer._print_Dummy
+
         # Used to print the generated function arguments in a standard way
         self._argrepr = LambdaPrinter().doprint
 
@@ -1074,6 +1083,10 @@ def _subexpr(self, expr, dummies_dict):
                 expr = [self._subexpr(sympify(a), dummies_dict) for a in expr]
         return expr
 
+    def _print_Identity(self, expr):
+        n = expr.args[0]
+        return "numpy.eye({})".format(n)
+
     def _print_funcargwrapping(self, args):
         """Generate argument wrapping code.
 
