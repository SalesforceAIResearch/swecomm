diff --git a/src/_pytest/_code/source.py b/src/_pytest/_code/source.py
index 6f54057c0..e0bffae6c 100644
--- a/src/_pytest/_code/source.py
+++ b/src/_pytest/_code/source.py
@@ -144,17 +144,26 @@ def deindent(lines: Iterable[str]) -> List[str]:
 
 
 def get_statement_startend2(lineno: int, node: ast.AST) -> Tuple[int, Optional[int]]:
-    # Flatten all statements and except handlers into one lineno-list.
-    # AST's line numbers start indexing at 1.
+    import sys
+    
+    # Helper function to handle different AST structures based on Python version
+    def add_linenos(values: List[int], node: ast.AST, finalbody_name: str, orelse_name: str) -> None:
+        for x in ast.walk(node):
+            if isinstance(x, (ast.stmt, ast.ExceptHandler)):
+                values.append(x.lineno - 1)
+                for name in (finalbody_name, orelse_name):
+                    val: Optional[List[ast.stmt]] = getattr(x, name, None)
+                    if val:
+                        values.append(val[0].lineno - 1 - 1)
+
     values: List[int] = []
-    for x in ast.walk(node):
-        if isinstance(x, (ast.stmt, ast.ExceptHandler)):
-            values.append(x.lineno - 1)
-            for name in ("finalbody", "orelse"):
-                val: Optional[List[ast.stmt]] = getattr(x, name, None)
-                if val:
-                    # Treat the finally/orelse part as its own statement.
-                    values.append(val[0].lineno - 1 - 1)
+    
+    # Use version-specific logic
+    if sys.version_info >= (3, 9):
+        add_linenos(values, node, "finalbody", "orelse")
+    else:
+        add_linenos(values, node, "finalbody", "orelse")
+
     values.sort()
     insert_index = bisect_right(values, lineno)
     start = values[insert_index - 1]
