diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py
index b03ed4cd88..e84a52a819 100644
--- a/sympy/physics/units/util.py
+++ b/sympy/physics/units/util.py
@@ -21,7 +21,8 @@ def _get_conversion_matrix_for_expr(expr, target_units, unit_system):
     canon_dim_units = [i for x in target_dims for i in dimension_system.get_dimensional_dependencies(x, mark_dimensionless=True)]
     canon_expr_units = {i for i in dim_dependencies}
 
-    if not canon_expr_units.issubset(set(canon_dim_units)):
+    # Check for orthogonal units by comparing dimensions
+    if not any(canon_expr_units & set(dimension_system.get_dimensional_dependencies(td, mark_dimensionless=True)) for td in target_dims):
         return None
 
     seen = set()
@@ -92,6 +93,12 @@ def convert_to(expr, target_units, unit_system="SI"):
     if not isinstance(expr, Quantity) and expr.has(Quantity):
         expr = expr.replace(lambda x: isinstance(x, Quantity), lambda x: x.convert_to(target_units, unit_system))
 
+    if isinstance(target_units, list) and isinstance(expr, Quantity):
+        for target in target_units:
+            if expr.dimension == target.dimension and not expr.equals(target):
+                expr = expr.convert_to(target)
+                break
+
     def get_total_scale_factor(expr):
         if isinstance(expr, Mul):
             return reduce(lambda x, y: x * y, [get_total_scale_factor(i) for i in expr.args])
@@ -103,7 +110,7 @@ def get_total_scale_factor(expr):
 
     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)
     if depmat is None:
-        return expr
+        return expr  # Return original expression if orthogonal units found.
 
     expr_scale_factor = get_total_scale_factor(expr)
     return expr_scale_factor * Mul.fromiter((1/get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat))
