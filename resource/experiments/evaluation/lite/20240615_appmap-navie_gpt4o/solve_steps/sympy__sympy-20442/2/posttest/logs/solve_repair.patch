diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py
index b03ed4cd88..15e2ea0e40 100644
--- a/sympy/physics/units/util.py
+++ b/sympy/physics/units/util.py
@@ -38,6 +38,10 @@ def convert_to(expr, target_units, unit_system="SI"):
     """
     Convert ``expr`` to the same expression with all of its units and quantities
     represented as factors of ``target_units``, whenever the dimension is compatible.
+    If dimensions are orthogonal, the function will:
+        - Return the original expression.
+        - Convert to base units if possible.
+        - Raise an error if conversion is ambiguous or not feasible.
 
     ``target_units`` may be a single unit/quantity, or a collection of
     units/quantities.
@@ -79,6 +83,7 @@ def convert_to(expr, target_units, unit_system="SI"):
 
     """
     from sympy.physics.units import UnitSystem
+    from sympy.physics.units.util import convert_to_base_units
     unit_system = UnitSystem.get_unit_system(unit_system)
 
     if not isinstance(target_units, (Iterable, Tuple)):
@@ -92,6 +97,15 @@ def convert_to(expr, target_units, unit_system="SI"):
     if not isinstance(expr, Quantity) and expr.has(Quantity):
         expr = expr.replace(lambda x: isinstance(x, Quantity), lambda x: x.convert_to(target_units, unit_system))
 
+    # Detect if target units and source units are orthogonal
+    expr_dim = Dimension(unit_system.get_dimensional_expr(expr))
+    target_dims = [Dimension(unit_system.get_dimensional_expr(x)) for x in target_units]
+    if any(expr_dim != t_dim and expr_dim.is_orthogonal(t_dim) for t_dim in target_dims):
+        try:
+            return convert_to_base_units(expr)
+        except ValueError:
+            raise ValueError("Cannot convert orthogonal units: {}".format(expr))
+
     def get_total_scale_factor(expr):
         if isinstance(expr, Mul):
             return reduce(lambda x, y: x * y, [get_total_scale_factor(i) for i in expr.args])
