diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py
index b03ed4cd88..20836f4b0c 100644
--- a/sympy/physics/units/util.py
+++ b/sympy/physics/units/util.py
@@ -65,7 +65,63 @@ def convert_to(expr, target_units, unit_system="SI"):
     >>> convert_to(atomic_mass_constant, gram)
     1.660539060e-24*gram
 
-    Conversion to multiple units:
+    Examples
+
+    >>> convert_to(speed_of_light, [meter, second])
+    299792458*meter/second
+    >>> convert_to(3*newton, [centimeter, gram, second])
+    300000*centimeter*gram/second**2
+
+    Conversion to Planck units:
+
+    >>> convert_to(atomic_mass_constant, [gravitational_constant, speed_of_light, hbar]).n()
+    7.62963085040767e-20*gravitational_constant**(-0.5)*hbar**0.5*speed_of_light**0.5
+
+    Raises:
+    =======
+        ValueError: If conversion is not possible for orthogonal units
+    """
+    from sympy.physics.units import UnitSystem
+    unit_system = UnitSystem.get_unit_system(unit_system)
+
+    if not isinstance(target_units, (Iterable, Tuple)):
+        target_units = [target_units]
+
+    if isinstance(expr, Add):
+        return Add.fromiter(convert_to(i, target_units, unit_system) for i in expr.args)
+
+    expr = sympify(expr)
+
+    if not isinstance(expr, Quantity) and expr.has(Quantity):
+        expr = expr.replace(lambda x: isinstance(x, Quantity), lambda x: x.convert_to(target_units, unit_system))
+
+    def get_total_scale_factor(expr):
+        if isinstance(expr, Mul):
+            return reduce(lambda x, y: x * y, [get_total_scale_factor(i) for i in expr.args])
+        elif isinstance(expr, Pow):
+            return get_total_scale_factor(expr.base) ** expr.exp
+        elif isinstance(expr, Quantity):
+            return unit_system.get_quantity_scale_factor(expr)
+        return expr
+    
+    # Check for orthogonal units and handle accordingly
+    expr_dim = Dimension(unit_system.get_dimensional_expr(expr))
+    target_dims = [Dimension(unit_system.get_dimensional_expr(x)) for x in target_units]
+
+    if any(str(expr_dim) != str(d) for d in target_dims):
+        if all(str(Dimension(unit_system.get_dimensional_expr(x))) == str(expr_dim) for x in expr.args if x.has(Quantity)):
+            return expr
+
+        raise ValueError("Conversion is not possible for orthogonal units")
+
+    depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)
+    if depmat is None:
+        return expr
+
+    expr_scale_factor = get_total_scale_factor(expr)
+    return expr_scale_factor * Mul.fromiter((1/get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat))
+
+    Examples
 
     >>> convert_to(speed_of_light, [meter, second])
     299792458*meter/second
