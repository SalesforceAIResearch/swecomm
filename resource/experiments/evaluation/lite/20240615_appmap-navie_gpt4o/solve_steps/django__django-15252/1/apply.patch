diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py
index aa2fe0883b..f69820cd8b 100644
--- a/django/db/migrations/executor.py
+++ b/django/db/migrations/executor.py
@@ -248,8 +248,9 @@ class MigrationExecutor:
         # For replacement migrations, record individual statuses
         if migration.replaces:
             for app_label, name in migration.replaces:
-                self.recorder.record_applied(app_label, name)
-        else:
+                if router.allow_migrate(self.connection.alias, app_label):
+                    self.recorder.record_applied(app_label, name)
+        elif router.allow_migrate(self.connection.alias, migration.app_label):
             self.recorder.record_applied(migration.app_label, migration.name)
 
     def unapply_migration(self, state, migration, fake=False):
@@ -259,6 +260,13 @@ class MigrationExecutor:
         if not fake:
             with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:
                 state = migration.unapply(state, schema_editor)
+        # Respect db router's allow_migrate rules for recording unapplied migrations
+        if migration.replaces:
+            for app_label, name in migration.replaces:
+                if router.allow_migrate(self.connection.alias, app_label):
+                    self.recorder.record_unapplied(app_label, name)
+        elif router.allow_migrate(self.connection.alias, migration.app_label):
+            self.recorder.record_unapplied(migration.app_label, migration.name)
         # For replacement migrations, also record individual statuses.
         if migration.replaces:
             for app_label, name in migration.replaces:
diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py
index 1a37c6b7d0..d64846dbb8 100644
--- a/django/db/migrations/recorder.py
+++ b/django/db/migrations/recorder.py
@@ -83,11 +83,17 @@ class MigrationRecorder:
 
     def record_applied(self, app, name):
         """Record that a migration was applied."""
+        # Respect db router's allow_migrate rules
+        if not router.allow_migrate(self.connection.alias, app):
+            return
         self.ensure_schema()
         self.migration_qs.create(app=app, name=name)
 
     def record_unapplied(self, app, name):
         """Record that a migration was unapplied."""
+        # Respect db router's allow_migrate rules
+        if not router.allow_migrate(self.connection.alias, app):
+            return
         self.ensure_schema()
         self.migration_qs.filter(app=app, name=name).delete()
 
