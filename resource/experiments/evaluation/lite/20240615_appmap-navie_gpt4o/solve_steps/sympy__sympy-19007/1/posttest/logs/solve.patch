diff --git a/sympy/printing/rust.py b/sympy/printing/rust.py
index c630559235..30054397a1 100644
--- a/sympy/printing/rust.py
+++ b/sympy/printing/rust.py
@@ -216,7 +216,7 @@
 
 
 class RustCodePrinter(CodePrinter):
-    """A printer to convert python expressions to strings of Rust code"""
+    """A printer to convert Python expressions to strings of Rust code"""
     printmethod = "_rust_code"
     language = "Rust"
 
@@ -233,6 +233,35 @@ class RustCodePrinter(CodePrinter):
         'inline': False,
     }  # type: Dict[str, Any]
 
+    def __getitem__(self, key):
+        from sympy.matrices.expressions.blockmatrix import BlockMatrix
+        from itertools import accumulate as _accumulate
+        if isinstance(self, BlockMatrix):
+            i, j = key
+            row_block_sizes = [block.shape[0] for block in self.blocks[0,:]]
+            col_block_sizes = [block.shape[1] for block in self.blocks[:,0]]
+            row_cumsum = list(_accumulate(row_block_sizes))
+            col_cumsum = list(_accumulate(col_block_sizes))
+
+            for m in range(len(row_cumsum)):
+                if i < row_cumsum[m]:
+                    row_block_index = m
+                    local_i = i if m == 0 else i - row_cumsum[m-1]
+                    break
+
+            for n in range(len(col_cumsum)):
+                if j < col_cumsum[n]:
+                    col_block_index = n
+                    local_j = j if n == 0 else j - col_cumsum[n-1]
+                    break
+                    col_block_index = n
+                    local_j = j if n == 0 else j - col_cumsum[n-1]
+                    break
+
+            return self.blocks[row_block_index, col_block_index][local_i, local_j]
+        else:
+            return super(self, self).__getitem__(key)
+
     def __init__(self, settings={}):
         CodePrinter.__init__(self, settings)
         self.known_functions = dict(known_functions)
