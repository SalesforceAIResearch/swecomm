diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py
index 402dae2829..45551a8550 100644
--- a/django/db/migrations/operations/fields.py
+++ b/django/db/migrations/operations/fields.py
@@ -82,8 +82,12 @@ class AddField(FieldOperation):
         }
         if self.preserve_default is not True:
             kwargs['preserve_default'] = self.preserve_default
+        # Custom logic to handle nested class paths
+        path = '%s.%s' % (self.field.__class__.__module__, self.field.__class__.__qualname__)
+        if path.startswith('django.db.models.fields'):
+            path = path.replace('django.db.models.fields', 'django.db.models')
         return (
-            self.__class__.__name__,
+            path,
             [],
             kwargs
         )
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index aa21a151bc..688c7a1b82 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -466,14 +466,6 @@ class Field(RegisterLookupMixin):
             "auto_created": False,
             "validators": [],
             "error_messages": None,
-        }
-        attr_overrides = {
-            "unique": "_unique",
-            "error_messages": "_error_messages",
-            "validators": "_validators",
-            "verbose_name": "_verbose_name",
-            "db_tablespace": "_db_tablespace",
-        }
         equals_comparison = {"choices", "validators"}
         for name, default in possibles.items():
             value = getattr(self, attr_overrides.get(name, name))
@@ -499,6 +491,18 @@ class Field(RegisterLookupMixin):
             path = path.replace("django.db.models.fields", "django.db.models")
         # Return basic info - other fields should override this.
         return (self.name, path, [], keywords)
+        # Work out path - we shorten it for known Django core fields
+        path = "%s.%s" % (self.__class__.__module__, self.__class__.__qualname__)
+        if path.startswith("django.db.models.fields.related"):
+            path = path.replace("django.db.models.fields.related", "django.db.models")
+        elif path.startswith("django.db.models.fields.files"):
+            path = path.replace("django.db.models.fields.files", "django.db.models")
+        elif path.startswith("django.db.models.fields.proxy"):
+            path = path.replace("django.db.models.fields.proxy", "django.db.models")
+        elif path.startswith("django.db.models.fields"):
+            path = path.replace("django.db.models.fields", "django.db.models")
+        # Return basic info - other fields should override this.
+        return (self.name, path, [], keywords)
 
     def clone(self):
         """
