diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index d85d79617..854908d59 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -986,6 +986,53 @@ class ModuleDocumenter(Documenter):
         'imported-members': bool_option, 'ignore-module-all': bool_option
     }  # type: Dict[str, Callable]
 
+    def import_object(self, raiseerror: bool = False) -> bool:
+        ret = super().import_object(raiseerror)
+
+        try:
+            if not self.options.ignore_module_all:
+                self.__all__ = inspect.getall(self.object)
+        except AttributeError as exc:
+            # __all__ raises an error.
+            logger.warning(__('%s.__all__ raises an error. Ignored: %r'),
+                           (self.fullname, exc), type='autodoc')
+        except ValueError as exc:
+            # invalid __all__ found.
+            logger.warning(__('__all__ should be a list of strings, not %r '
+                              '(in module %s) -- ignoring __all__') %
+                           (exc.args[0], self.fullname), type='autodoc')
+
+        return ret
+
+    def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:
+        members = self.get_module_members()
+        if want_all:
+            if self.__all__ is not None:
+                # Check whether __all__ is an empty list
+                if len(self.__all__) == 0:
+                    # __all__ is an empty list, no members should be documented
+                    return False, []
+                for member in members.values():
+                    if member.__name__ not in self.__all__:
+                        member.skipped = True
+                return False, list(members.values())   
+            else:
+                # for implicit module members, check __module__ to avoid
+                # documenting imported objects
+                return True, list(members.values())
+        else:
+            memberlist = self.options.members or []
+            ret = []
+            for name in memberlist:
+                if name in members:
+                    ret.append(members[name])
+                else:
+                    logger.warning(__('missing attribute mentioned in :members: option: '
+                                      'module %s, attribute %s') %
+                                   (safe_getattr(self.object, '__name__', '???'), name),
+                                   type='autodoc')
+            return False, ret
+
     def __init__(self, *args: Any) -> None:
         super().__init__(*args)
         merge_members_option(self.options)
