diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py
index 1aa0ee01a2..f801e3084c 100644
--- a/sympy/printing/mathml.py
+++ b/sympy/printing/mathml.py
@@ -443,6 +443,23 @@ def _print_Function(self, e):
             x.appendChild(self._print(arg))
         return x
 
+    def _print_Indexed(self, e):
+        base = self._print(e.base)
+        indices = [self._print(i) for i in e.indices]
+        
+        mrow = self.dom.createElement('mrow')
+        mrow.appendChild(base)
+        for index in indices:
+            sub = self.dom.createElement('subscript')
+            sub.appendChild(index)
+            mrow.appendChild(sub)
+        return mrow
+
+    def _print_IndexedBase(self, e):
+        x = self.dom.createElement('ci')
+        x.appendChild(self.dom.createTextNode(e.name))
+        return x
+
     def _print_Basic(self, e):
         x = self.dom.createElement(self.mathml_tag(e))
         for arg in e.args:
@@ -1006,6 +1023,21 @@ def _print_polylog(self, expr, exp=None):
         mrow.appendChild(brac)
         return mrow
 
+    def _print_Indexed(self, e):
+        base = self._print(e.base)
+        indices = [self._print(i) for i in e.indices]
+        
+        msub = self.dom.createElement('msub')
+        msub.appendChild(base)
+        for index in indices:
+            msub.appendChild(self._print(index))
+        return msub
+
+    def _print_IndexedBase(self, e):
+        x = self.dom.createElement('mi')
+        x.appendChild(self.dom.createTextNode(e.name))
+        return x
+
     def _print_Basic(self, e):
         mrow = self.dom.createElement('mrow')
         mi = self.dom.createElement('mi')
@@ -1028,37 +1060,41 @@ def _print_Tuple(self, e):
     def _print_Interval(self, i):
         mrow = self.dom.createElement('mrow')
         brac = self.dom.createElement('mfenced')
-        if i.start == i.end:
-            # Most often, this type of Interval is converted to a FiniteSet
-            brac.setAttribute('open', '{')
-            brac.setAttribute('close', '}')
-            brac.appendChild(self._print(i.start))
+        if i.left_open:
+            brac.setAttribute('open', '(')
         else:
-            if i.left_open:
-                brac.setAttribute('open', '(')
-            else:
-                brac.setAttribute('open', '[')
-
-            if i.right_open:
-                brac.setAttribute('close', ')')
-            else:
-                brac.setAttribute('close', ']')
-            brac.appendChild( self._print(i.start))
-            brac.appendChild( self._print(i.end))
-
+            brac.setAttribute('open', '[')
+        if i.right_open:
+            brac.setAttribute('close', ')')
+        else:
+            brac.setAttribute('close', ']')
+        brac.appendChild(self._print(i.start))
+        brac.appendChild(self._print(i.end))
         mrow.appendChild(brac)
         return mrow
 
     def _print_Abs(self, expr, exp=None):
         mrow = self.dom.createElement('mrow')
-        x = self.dom.createElement('mfenced')
-        x.setAttribute('open', '|')
-        x.setAttribute('close', '|')
-        x.appendChild(self._print(expr.args[0]))
+        x = self.dom.createElement('mo')
+        x.appendChild(self.dom.createTextNode('|'))
+        mrow.appendChild(x)
+        for item in expr.args:
+            mrow.appendChild(self._print(item))
+        x = self.dom.createElement('mo')
+        x.appendChild(self.dom.createTextNode('|'))
         mrow.appendChild(x)
         return mrow
 
-    _print_Determinant = _print_Abs
+    def _print_Determinant(self, expr, exp=None):
+        mrow = self.dom.createElement('mrow')
+        x = self.dom.createElement('mo')
+        x.appendChild(self.dom.createTextNode('|'))
+        mrow.appendChild(x)
+        mrow.appendChild(self._print(expr.args[0]))
+        x = self.dom.createElement('mo')
+        x.appendChild(self.dom.createTextNode('|'))
+        mrow.appendChild(x)
+        return mrow
 
     def _print_re_im(self, c, expr):
         mrow = self.dom.createElement('mrow')
@@ -1099,6 +1135,15 @@ def _print_SetOp(self, expr, symbol):
 
     def _print_Union(self, expr):
         return self._print_SetOp(expr, '&#x222A;')
+    
+    def _print_Intersection(self, expr):
+        return self._print_SetOp(expr, '&#x2229;')
+    
+    def _print_Complement(self, expr):
+        return self._print_SetOp(expr, '&#x2216;')
+    
+    def _print_SymmetricDifference(self, expr):
+        return self._print_SetOp(expr, '&#x2206;')
 
     def _print_Intersection(self, expr):
         return self._print_SetOp(expr, '&#x2229;')
