diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py
index 1aa0ee01a2..59710a0e8e 100644
--- a/sympy/printing/mathml.py
+++ b/sympy/printing/mathml.py
@@ -443,6 +443,17 @@ def _print_Function(self, e):
             x.appendChild(self._print(arg))
         return x
 
+    def _print_Indexed(self, e):
+        base = e.base
+        indices = e.indices
+
+        x = self.dom.createElement('apply')
+        x.appendChild(self.dom.createElement('index'))
+        x.appendChild(self._print(base))
+        for index in indices:
+            x.appendChild(self._print(index))
+        return x
+
     def _print_Basic(self, e):
         x = self.dom.createElement(self.mathml_tag(e))
         for arg in e.args:
@@ -1006,6 +1017,26 @@ def _print_polylog(self, expr, exp=None):
         mrow.appendChild(brac)
         return mrow
 
+    def _print_Indexed(self, e):
+        base = e.base
+        indices = e.indices
+
+        mrow = self.dom.createElement('mrow')
+        mrow.appendChild(self._print(base))
+        mo = self.dom.createElement('mo')
+        mo.appendChild(self.dom.createTextNode('['))
+        mrow.appendChild(mo)
+        for index in indices:
+            mrow.appendChild(self._print(index))
+            if index != indices[-1]:
+                separator = self.dom.createElement('mo')
+                separator.appendChild(self.dom.createTextNode(', '))
+                mrow.appendChild(separator)
+        mo = self.dom.createElement('mo')
+        mo.appendChild(self.dom.createTextNode(']'))
+        mrow.appendChild(mo)
+        return mrow
+
     def _print_Basic(self, e):
         mrow = self.dom.createElement('mrow')
         mi = self.dom.createElement('mi')
@@ -1035,25 +1066,25 @@ def _print_Interval(self, i):
             brac.appendChild(self._print(i.start))
         else:
             if i.left_open:
-                brac.setAttribute('open', '(')
+                brac.setAttribute('open', '&#x2329;')
             else:
                 brac.setAttribute('open', '[')
-
+    
             if i.right_open:
-                brac.setAttribute('close', ')')
+                brac.setAttribute('close', '&#x232A;')
             else:
                 brac.setAttribute('close', ']')
-            brac.appendChild( self._print(i.start))
-            brac.appendChild( self._print(i.end))
-
+            brac.appendChild(self._print(i.start))
+            brac.appendChild(self._print(i.end))
+    
         mrow.appendChild(brac)
         return mrow
 
     def _print_Abs(self, expr, exp=None):
         mrow = self.dom.createElement('mrow')
         x = self.dom.createElement('mfenced')
-        x.setAttribute('open', '|')
-        x.setAttribute('close', '|')
+        x.setAttribute('open', '&#124;')  # Unicode for '|'
+        x.setAttribute('close', '&#124;')  # Unicode for '|'
         x.appendChild(self._print(expr.args[0]))
         mrow.appendChild(x)
         return mrow
@@ -1111,12 +1142,12 @@ def _print_SymmetricDifference(self, expr):
 
     def _print_FiniteSet(self, s):
         return self._print_set(s.args)
-
+    
     def _print_set(self, s):
         items = sorted(s, key=default_sort_key)
         brac = self.dom.createElement('mfenced')
-        brac.setAttribute('open', '{')
-        brac.setAttribute('close', '}')
+        brac.setAttribute('open', '&#x7B;')  # Unicode for '{'
+        brac.setAttribute('close', '&#x7D;')  # Unicode for '}'
         for item in items:
             brac.appendChild(self._print(item))
         return brac
@@ -1237,18 +1268,18 @@ def _print_EmptySet(self, e):
     def _print_floor(self, e):
         mrow =  self.dom.createElement('mrow')
         x = self.dom.createElement('mfenced')
-        x.setAttribute('open', u'\u230A')
-        x.setAttribute('close', u'\u230B')
+        x.setAttribute('open', '&#8970;')  # Unicode for '⌊'
+        x.setAttribute('close', '&#8971;')  # Unicode for '⌋'
         x.appendChild(self._print(e.args[0]))
         mrow.appendChild(x)
         return mrow
 
 
     def _print_ceiling(self, e):
-        mrow =  self.dom.createElement('mrow')
+        mrow = self.dom.createElement('mrow')
         x = self.dom.createElement('mfenced')
-        x.setAttribute('open', u'\u2308')
-        x.setAttribute('close', u'\u2309')
+        x.setAttribute('open', '&#8968;')  # Unicode for '⌈'
+        x.setAttribute('close', '&#8969;')  # Unicode for '⌉'
         x.appendChild(self._print(e.args[0]))
         mrow.appendChild(x)
         return mrow
