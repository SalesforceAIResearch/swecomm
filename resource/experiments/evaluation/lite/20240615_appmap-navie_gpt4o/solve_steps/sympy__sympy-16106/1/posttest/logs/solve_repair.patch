diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py
index 1aa0ee01a2..8901e7b4c6 100644
--- a/sympy/printing/mathml.py
+++ b/sympy/printing/mathml.py
@@ -64,6 +64,21 @@ def doprint(self, expr):
         res = xmlbstr.decode()
         return res
 
+    def _print_IndexedBase(self, expr):
+        ci = self.dom.createElement('ci')
+        ci.appendChild(self.dom.createTextNode(expr.name))
+        return ci
+
+    def _print_Indexed(self, expr):
+        apply_elem = self.dom.createElement('apply')
+        csymbol = self.dom.createElement('csymbol')
+        csymbol.appendChild(self.dom.createTextNode('subscript'))
+        apply_elem.appendChild(csymbol)
+        apply_elem.appendChild(self._print(expr.base))
+        for index in expr.indices:
+            apply_elem.appendChild(self._print(index))
+        return apply_elem
+
     def apply_patch(self):
         # Applying the patch of xml.dom.minidom bug
         # Date: 2011-11-18
@@ -472,6 +487,22 @@ def _print_list(self, seq):
             dom_element.appendChild(self._print(item))
         return dom_element
 
+    def _print_IndexedBase(self, expr):
+        mi = self.dom.createElement('mi')
+        mi.appendChild(self.dom.createTextNode(expr.name))
+        return mi
+
+    def _print_Indexed(self, expr):
+        mrow = self.dom.createElement('mrow')
+        msub = self.dom.createElement('msub')
+        msub.appendChild(self._print(expr.base))
+        mrow_indices = self.dom.createElement('mrow')
+        for index in expr.indices:
+            mrow_indices.appendChild(self._print(index))
+        msub.appendChild(mrow_indices)
+        mrow.appendChild(msub)
+        return mrow
+
     def _print_int(self, p):
         dom_element = self.dom.createElement(self.mathml_tag(p))
         dom_element.appendChild(self.dom.createTextNode(str(p)))
@@ -1054,11 +1085,20 @@ def _print_Abs(self, expr, exp=None):
         x = self.dom.createElement('mfenced')
         x.setAttribute('open', '|')
         x.setAttribute('close', '|')
-        x.appendChild(self._print(expr.args[0]))
+        x.appendChild(self.dom.createElement('mrow'))  # Ensure separation
+        x.lastChild.appendChild(self._print(expr.args[0]))
         mrow.appendChild(x)
         return mrow
 
-    _print_Determinant = _print_Abs
+    def _print_Determinant(self, expr, exp=None):
+        det = self.dom.createElement('mfenced')
+        det.setAttribute('open', '|')
+        det.setAttribute('close', '|')
+        matrix = self._print(expr.args[0])
+        det.appendChild(matrix)
+        mrow = self.dom.createElement('mrow')
+        mrow.appendChild(det)
+        return mrow
 
     def _print_re_im(self, c, expr):
         mrow = self.dom.createElement('mrow')
@@ -1092,9 +1132,9 @@ def _print_SetOp(self, expr, symbol):
         for arg in expr.args[1:]:
             x = self.dom.createElement('mo')
             x.appendChild(self.dom.createTextNode(symbol))
-            y = self._print(arg)
             mrow.appendChild(x)
-            mrow.appendChild(y)
+            mrow.appendChild(self.dom.createElement('mrow'))  # Ensure separation
+            mrow.lastChild.appendChild(self._print(arg))
         return mrow
 
     def _print_Union(self, expr):
@@ -1110,7 +1150,14 @@ def _print_SymmetricDifference(self, expr):
         return self._print_SetOp(expr, '&#x2206;')
 
     def _print_FiniteSet(self, s):
-        return self._print_set(s.args)
+        brac = self.dom.createElement('mfenced')
+        brac.setAttribute('open', '{')
+        brac.setAttribute('close', '}')
+        args = sorted(s.args, key=default_sort_key)
+        for item in args:
+            brac.appendChild(self._print(item))
+            brac.appendChild(self.dom.createElement('mo'))  # Ensure separation
+        return brac
 
     def _print_set(self, s):
         items = sorted(s, key=default_sort_key)
@@ -1235,21 +1282,23 @@ def _print_EmptySet(self, e):
 
 
     def _print_floor(self, e):
-        mrow =  self.dom.createElement('mrow')
+        mrow = self.dom.createElement('mrow')
         x = self.dom.createElement('mfenced')
         x.setAttribute('open', u'\u230A')
         x.setAttribute('close', u'\u230B')
-        x.appendChild(self._print(e.args[0]))
+        x.appendChild(self.dom.createElement('mrow'))  # Ensure separation
+        x.lastChild.appendChild(self._print(e.args[0]))
         mrow.appendChild(x)
         return mrow
 
 
     def _print_ceiling(self, e):
-        mrow =  self.dom.createElement('mrow')
+        mrow = self.dom.createElement('mrow')
         x = self.dom.createElement('mfenced')
         x.setAttribute('open', u'\u2308')
         x.setAttribute('close', u'\u2309')
-        x.appendChild(self._print(e.args[0]))
+        x.appendChild(self.dom.createElement('mrow'))  # Ensure separation
+        x.lastChild.appendChild(self._print(e.args[0]))
         mrow.appendChild(x)
         return mrow
 
