diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py
index 7ca05f0304..50e465fa3b 100644
--- a/sympy/simplify/trigsimp.py
+++ b/sympy/simplify/trigsimp.py
@@ -913,6 +913,9 @@ def _match_div_rewrite(expr, i):
     elif i == 10:
         expr = _replace_mul_fpowxgpow(expr, coth, sinh,
             _idn, cosh, _idn)
+    elif i == 14:  # Add new case for recognizing sqrt(sin(x)**2)
+        expr = expr.replace(lambda e: e.is_Pow and e.exp == S.Half and
+            e.base.is_Pow and e.base.base == sin(e.base.exp), lambda e: Abs(sin(e.base.exp)))
     elif i == 11:
         expr = _replace_mul_fpowxgpow(expr, tanh, sinh,
             _midn, cosh, _midn)
@@ -922,19 +925,28 @@ def _match_div_rewrite(expr, i):
     elif i == 13:
         expr = _replace_mul_fpowxgpow(expr, coth, tanh,
             _idn, _one, _idn)
+    elif i == 14:  # Add new case for recognizing sqrt(sin(x)**2)
+        expr = expr.replace(lambda e: e.is_Pow and e.exp == S.Half and
+            e.base.is_Pow and e.base.base == sin(e.base.exp), lambda e: Abs(sin(e.base.exp)))
     else:
         return None
     return expr
 
 
+from sympy import Abs
+
 def _trigsimp(expr, deep=False):
     # protect the cache from non-trig patterns; we only allow
     # trig patterns to enter the cache
     if expr.has(*_trigs):
         return __trigsimp(expr, deep)
+    
+    # Ensure that sqrt(sin(x)**2) is handled explicitly for simplification
+    if expr.is_Pow and expr.exp == S.Half and expr.base.is_Pow and expr.base.base == sin(expr.base.exp):
+        return Abs(sin(expr.base.exp))
+    
     return expr
 
-
 @cacheit
 def __trigsimp(expr, deep=False):
     """recursive helper for trigsimp"""
