<context>
<code-snippet location="sympy/plotting/experimental_lambdify.py:174-188">
class lambdify(object):
    """Returns the lambdified function.

    This function uses experimental_lambdify to create a lambdified
    expression. It uses cmath to lambdify the expression. If the function
    is not implemented in python cmath, python cmath calls evalf on those
    functions.
    """

    def __init__(self, args, expr):
        self.args = args
        self.expr = expr
        self.lambda_func = experimental_lambdify(args, expr, use_evalf=True,
                                                 use_python_cmath=True)
        self.failure = False
</code-snippet>
<code-snippet location="sympy/plotting/experimental_lambdify.py:241-243">
def experimental_lambdify(*args, **kwargs):
    l = Lambdifier(*args, **kwargs)
    return l
</code-snippet>
<code-snippet location="sympy/plotting/experimental_lambdify.py:541-563">
@classmethod
    def tree2str(cls, tree):
        """Converts a tree to string without translations.

        Examples
        ========

        >>> from sympy.abc import x, y, z
        >>> from sympy import Integral, sin
        >>> from sympy.plotting.experimental_lambdify import Lambdifier
        >>> str2tree = Lambdifier([x], x).str2tree
        >>> tree2str = Lambdifier([x], x).tree2str

        >>> tree2str(str2tree(str(x+y*sin(z)+1)))
        'x + y*sin(z) + 1'
        """
        if isinstance(tree, str):
            return tree
        else:
            return ''.join(map(cls.tree2str, tree))

    def tree2str_translate(self, tree):
        """Converts a tree to string with translations.
</code-snippet>
<code-snippet location="sympy/stats/rv.py:1000-1031">
def sample_iter_lambdify(expr, condition=None, numsamples=S.Infinity, **kwargs):
    """
    See sample_iter

    Uses lambdify for computation. This is fast but does not always work.
    """
    if condition:
        ps = pspace(Tuple(expr, condition))
    else:
        ps = pspace(expr)

    rvs = list(ps.values)
    fn = lambdify(rvs, expr, **kwargs)
    if condition:
        given_fn = lambdify(rvs, condition, **kwargs)

    # Check that lambdify can handle the expression
    # Some operations like Sum can prove difficult
    try:
        d = ps.sample()  # a dictionary that maps RVs to values
        args = [d[rv] for rv in rvs]
        fn(*args)
        if condition:
            given_fn(*args)
    except Exception:
        raise TypeError("Expr/condition too complex for lambdify")

    def return_generator():
        count = 0
        while count < numsamples:
            d = ps.sample()  # a dictionary that maps RVs to values
            args = [d[rv] for rv in rvs]
</code-snippet>
<code-snippet location="sympy/plotting/experimental_lambdify.py:82-98">
class vectorized_lambdify(object):
    """ Return a sufficiently smart, vectorized and lambdified function.

    Returns only reals.

    This function uses experimental_lambdify to created a lambdified
    expression ready to be used with numpy. Many of the functions in sympy
    are not implemented in numpy so in some cases we resort to python cmath or
    even to evalf.

    The following translations are tried:
      only numpy complex
      - on errors raised by sympy trying to work with ndarray:
          only python cmath and then vectorize complex128

    When using python cmath there is no need for evalf or float/complex
    because python cmath calls those.
</code-snippet>
<code-snippet location="sympy/plotting/experimental_lambdify.py:491-508">
##############################################################################
    # The translator functions, tree parsers, etc.
    ##############################################################################

    def str2tree(self, exprstr):
        """Converts an expression string to a tree.

        Functions are represented by ('func_name(', tree_of_arguments).
        Other expressions are (head_string, mid_tree, tail_str).
        Expressions that do not contain functions are directly returned.

        Examples
        ========

        >>> from sympy.abc import x, y, z
        >>> from sympy import Integral, sin
        >>> from sympy.plotting.experimental_lambdify import Lambdifier
        >>> str2tree = Lambdifier([x], x).str2tree
</code-snippet>
<code-snippet location="sympy/stats/rv.py:966-997">
def sample_iter(expr, condition=None, numsamples=S.Infinity, **kwargs):
    """
    Returns an iterator of realizations from the expression given a condition

    expr: Random expression to be realized
    condition: A conditional expression (optional)
    numsamples: Length of the iterator (defaults to infinity)

    Examples
    ========

    >>> from sympy.stats import Normal, sample_iter
    >>> X = Normal('X', 0, 1)
    >>> expr = X*X + 3
    >>> iterator = sample_iter(expr, numsamples=3)
    >>> list(iterator) # doctest: +SKIP
    [12, 4, 7]

    See Also
    ========
    Sample
    sampling_P
    sampling_E
    sample_iter_lambdify
    sample_iter_subs
    """
    # lambdify is much faster but not as robust
    try:
        return sample_iter_lambdify(expr, condition, numsamples, **kwargs)
    # use subs when lambdify fails
    except TypeError:
        return sample_iter_subs(expr, condition, numsamples, **kwargs)
</code-snippet>
<code-snippet location="sympy/plotting/experimental_lambdify.py:1-18">
""" rewrite of lambdify - This stuff is not stable at all.

It is for internal use in the new plotting module.
It may (will! see the Q'n'A in the source) be rewritten.

It's completely self contained. Especially it does not use lambdarepr.

It does not aim to replace the current lambdify. Most importantly it will never
ever support anything else than sympy expressions (no Matrices, dictionaries
and so on).
"""

from __future__ import print_function, division

import re
from sympy import Symbol, NumberSymbol, I, zoo, oo
from sympy.core.compatibility import exec_
from sympy.utilities.iterables import numbered_symbols
</code-snippet>
<code-snippet location="sympy/plotting/experimental_lambdify.py:300-305">
raise ImportError(
                    'experimental_lambdify failed to import numpy.')
        if use_interval:
            namespace.update({'imath': __import__(
                'sympy.plotting.intervalmath', fromlist=['intervalmath'])})
            namespace.update({'math': __import__('math')})
</code-snippet>
<code-snippet location="sympy/plotting/experimental_lambdify.py:97-112">
When using python cmath there is no need for evalf or float/complex
    because python cmath calls those.

    This function never tries to mix numpy directly with evalf because numpy
    does not understand sympy Float. If this is needed one can use the
    float_wrap_evalf/complex_wrap_evalf options of experimental_lambdify or
    better one can be explicit about the dtypes that numpy works with.
    Check numpy bug http://projects.scipy.org/numpy/ticket/1013 to know what
    types of errors to expect.
    """
    def __init__(self, args, expr):
        self.args = args
        self.expr = expr
        self.lambda_func = experimental_lambdify(args, expr, use_np=True)
        self.vector_func = self.lambda_func
        self.failure = False
</code-snippet>
<code-snippet location="sympy/plotting/experimental_lambdify.py:37-44">
#  Please, if there is a bug, do not try to fix it here! Rewrite this by using
# the method proposed in the last Q'n'A below. That way the new function will
# work just as well, be just as simple, but it wont need any new workarounds.
#  If you insist on fixing it here, look at the workarounds in the function
# sympy_expression_namespace and in lambdify.

# Q: Why are you not using python abstract syntax tree?
# A: Because it is more complicated and not much more powerful in this case.
</code-snippet>
<code-snippet location="sympy/plotting/experimental_lambdify.py:206-220">
# then it is not caught and the corresponding error is raised.
            # XXX: Remove catching all exceptions once the plotting module
            # is heavily tested.
            if isinstance(e, ZeroDivisionError):
                return None
            elif isinstance(e, TypeError) and ('no ordering relation is'
                                               ' defined for complex numbers'
                                               in str(e) or 'unorderable '
                                               'types' in str(e) or "not "
                                               "supported between instances of"
                                               in str(e)):
                self.lambda_func = experimental_lambdify(self.args, self.expr,
                                                         use_evalf=True,
                                                         use_python_math=True)
                result = self.lambda_func(args.real)
</code-snippet>
<code-snippet location="sympy/plotting/experimental_lambdify.py:219-237">
use_python_math=True)
                result = self.lambda_func(args.real)
                return result
            else:
                if self.failure:
                    raise e
                #Failure
                #Try wrapping it with complex(..).evalf()
                self.failure = True
                self.lambda_func = experimental_lambdify(self.args, self.expr,
                                                    use_evalf=True,
                                                    complex_wrap_evalf=True)
                result = self.lambda_func(args)
                warnings.warn('The evaluation of the expression is'
                        ' problematic. We are trying a failback method'
                        ' that may still work. Please report this as a bug.')
                if abs(result.imag) > 1e-7 * abs(result):
                    return None
                else:
</code-snippet>
</context>