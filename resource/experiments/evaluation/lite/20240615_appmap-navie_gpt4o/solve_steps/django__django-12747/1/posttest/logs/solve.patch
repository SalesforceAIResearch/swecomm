diff --git a/django/db/models/query.py b/django/db/models/query.py
index d9c9b0db04..e6e842d495 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -715,26 +715,31 @@ class QuerySet:
         self._not_support_combined_queries('delete')
         assert not self.query.is_sliced, \
             "Cannot use 'limit' or 'offset' with delete."
-
+    
         if self._fields is not None:
             raise TypeError("Cannot call delete() after .values() or .values_list()")
-
+    
         del_query = self._chain()
-
+    
         # The delete is actually 2 queries - one to find related objects,
         # and one to delete. Make sure that the discovery of related
         # objects is performed on the same database as the deletion.
         del_query._for_write = True
-
+    
         # Disable non-supported fields.
         del_query.query.select_for_update = False
         del_query.query.select_related = False
         del_query.query.clear_ordering(force_empty=True)
-
+    
         collector = Collector(using=del_query.db)
         collector.collect(del_query)
         deleted, _rows_count = collector.delete()
-
+    
+        # If no objects were deleted, standardize the result format.
+        if deleted == 0:
+            model_label = "{}.{}".format(self.model._meta.app_label, self.model._meta.model_name)
+            _rows_count = {model_label: 0}
+    
         # Clear the result cache, in case this QuerySet gets reused.
         self._result_cache = None
         return deleted, _rows_count
