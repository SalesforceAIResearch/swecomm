diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
index 473fde0de0..d71c4071aa 100644
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -103,8 +103,14 @@ class Command(BaseCommand):
     def run(self, **options):
         """Run the server, using the autoreloader if needed."""
         use_reloader = options['use_reloader']
-
+    
         if use_reloader:
+            from django.conf import settings
+            from django.utils._os import safe_join
+            # Ensure BASE_DIR is added to autoreload watch list if it's specified in TEMPLATES[0]['DIRS']
+            template_dirs = [safe_join(settings.BASE_DIR, d) for d in settings.TEMPLATES[0]['DIRS'] if settings.BASE_DIR not in d]
+            for d in template_dirs:
+                autoreload.watch(d)
             autoreload.run_with_reloader(self.inner_run, **options)
         else:
             self.inner_run(None, **options)
diff --git a/django/template/loaders/filesystem.py b/django/template/loaders/filesystem.py
index 2e49e3d6b3..fc01143d03 100644
--- a/django/template/loaders/filesystem.py
+++ b/django/template/loaders/filesystem.py
@@ -31,7 +31,8 @@ class Loader(BaseLoader):
         in template_dirs. For security reasons, if a path doesn't lie inside
         one of the template_dirs it is excluded from the result set.
         """
-        for template_dir in self.get_dirs():
+        {{ Ensure absolute path conversion of base directories to monitor changes }}
+        for template_dir in map(os.path.abspath, self.get_dirs()):
             try:
                 name = safe_join(template_dir, template_name)
             except SuspiciousFileOperation:
diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index 583c2be647..4b7c58b778 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -276,7 +276,7 @@ class BaseReloader:
     def watch_dir(self, path, glob):
         path = Path(path)
         try:
-            path = path.absolute()
+            path = path.resolve().absolute()
         except FileNotFoundError:
             logger.debug(
                 'Unable to watch directory %s as it cannot be resolved.',
