diff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py
index b9809fd4e9..24bbf8a0e7 100644
--- a/sympy/solvers/polysys.py
+++ b/sympy/solvers/polysys.py
@@ -51,7 +51,7 @@ def solve_poly_system(seq, *gens, **args):
     except PolificationFailed as exc:
         raise ComputationFailed('solve_poly_system', len(seq), exc)
 
-    if len(polys) == len(opt.gens) == 2:
+    if len(polys) == 2 and len(opt.gens) >= 2: 
         f, g = polys
 
         if all(i <= 2 for i in f.degree_list() + g.degree_list()):
@@ -240,17 +240,14 @@ def _solve_reduced_system(system, gens, entry=False):
 
         univariate = list(filter(_is_univariate, basis))
 
-        if len(univariate) == 1:
+        if len(univariate) == 1 and len(gens) == 1:
             f = univariate.pop()
         else:
-            raise NotImplementedError(filldedent('''
-                only zero-dimensional systems supported
-                (finite number of solutions)
-                '''))
-
+            continue  # Proceed to attempt solving remaining systems.
+    
         gens = f.gens
         gen = gens[-1]
-
+    
         zeros = list(roots(f.ltrim(gen)).keys())
 
         if not zeros:
@@ -274,11 +271,13 @@ def _solve_reduced_system(system, gens, entry=False):
             for solution in _solve_reduced_system(new_system, new_gens):
                 solutions.append(solution + (zero,))
 
+        """
         if solutions and len(solutions[0]) != len(gens):
             raise NotImplementedError(filldedent('''
                 only zero-dimensional systems supported
                 (finite number of solutions)
                 '''))
+        """
         return solutions
 
     try:
