diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py
index 402dae2829..ec5e279bb7 100644
--- a/django/db/migrations/operations/fields.py
+++ b/django/db/migrations/operations/fields.py
@@ -98,6 +98,27 @@ class AddField(FieldOperation):
         state.models[app_label, self.model_name_lower].fields.append((self.name, field))
         # Delay rendering of relationships if it's not a relational field
         delay = not field.is_relation
+        model_tuple = app_label, self.model_name_lower
+        for (model_app_label, model_name), model_state in state.models.items():
+            for index, (name, field) in enumerate(model_state.fields):
+                remote_field = field.remote_field
+                if remote_field:
+                    remote_model_tuple = self._get_model_tuple(
+                        remote_field.model, model_app_label, model_name
+                    )
+                    if remote_model_tuple == model_tuple:
+                        if getattr(remote_field, 'field_name', None) == self.old_name:
+                            remote_field.field_name = self.new_name
+                        to_fields = getattr(field, 'to_fields', None)
+                        if to_fields:
+                            field.to_fields = tuple([
+                                self.new_name if to_field_name == self.old_name else to_field_name
+                                for to_field_name in to_fields
+                            ])
+                        # Check if this field is a ForeignKey with a to_field parameter matching the old_name
+                        if hasattr(field, 'to_field') and field.to_field == self.old_name:
+                            field.to_field = self.new_name
+
         state.reload_model(app_label, self.model_name_lower, delay=delay)
 
     def database_forwards(self, app_label, schema_editor, from_state, to_state):
