diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py
index dd36dea304..cabe54c8b3 100644
--- a/sympy/utilities/iterables.py
+++ b/sympy/utilities/iterables.py
@@ -1708,8 +1708,9 @@ def partitions(n, m=None, k=None, size=False):
         multiplicities and P is the generated partition.
 
     Each partition is represented as a dictionary, mapping an integer
-    to the number of copies of that integer in the partition.  For example,
+    to the number of copies of that integer in the partition. For example,
     the first partition of 4 returned is {4: 1}, "4: one of them".
+    Note: This function yields copies of the dictionaries to avoid reuse issues.
 
     Examples
     ========
@@ -1738,19 +1739,13 @@ def partitions(n, m=None, k=None, size=False):
     {2: 1, 4: 1}
     {3: 2}
 
-    Note that the _same_ dictionary object is returned each time.
-    This is for speed:  generating each partition goes quickly,
-    taking constant time, independent of n.
+    Each dictionary object returned is a copy. This is to ensure that each partition
+    is independent of others, avoiding reuse issues. Generating each partition
+    still goes quickly, taking constant time, independent of n.
 
     >>> [p for p in partitions(6, k=2)]
-    [{1: 6}, {1: 6}, {1: 6}, {1: 6}]
-
-    If you want to build a list of the returned dictionaries then
-    make a copy of them:
-
-    >>> [p.copy() for p in partitions(6, k=2)]  # doctest: +SKIP
     [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]
-    >>> [(M, p.copy()) for M, p in partitions(6, k=2, size=True)]  # doctest: +SKIP
+    >>> [(M, p) for M, p in partitions(6, k=2, size=True)]
     [(3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})]
 
     References
@@ -1834,17 +1829,19 @@ def partitions(n, m=None, k=None, size=False):
                     return
                 continue
 
-            ms[i] = q
+            ms_copy = ms.copy()
+            ms_copy[i] = q
             keys.append(i)
             if r:
-                ms[r] = 1
+                ms_copy[r] = 1
                 keys.append(r)
+                
             break
         room -= need
         if size:
-            yield sum(ms.values()), ms
+            yield sum(ms_copy.values()), ms_copy
         else:
-            yield ms
+            yield ms_copy
 
 
 def ordered_partitions(n, m=None, sort=True):
