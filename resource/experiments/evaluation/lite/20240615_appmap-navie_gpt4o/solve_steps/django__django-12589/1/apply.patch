diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 78c4f47b5b..e61dff7312 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -466,20 +466,25 @@ class Query(BaseExpression):
             # Remove any aggregates marked for reduction from the subquery
             # and move them to the outer AggregateQuery.
             col_cnt = 0
-            for alias, expression in list(inner_query.annotation_select.items()):
-                annotation_select_mask = inner_query.annotation_select_mask
-                if expression.is_summary:
-                    expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
-                    outer_query.annotations[alias] = expression.relabeled_clone(relabels)
-                    del inner_query.annotations[alias]
-                    annotation_select_mask.remove(alias)
-                # Make sure the annotation_select wont use cached results.
-                inner_query.set_annotation_mask(inner_query.annotation_select_mask)
-            if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
-                # In case of Model.objects[0:3].count(), there would be no
-                # field selected in the inner query, yet we must use a subquery.
-                # So, make sure at least one field is selected.
-                inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
+                for alias, expression in list(inner_query.annotation_select.items()):
+                    annotation_select_mask = inner_query.annotation_select_mask
+                    if expression.is_summary:
+                        expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)
+                        outer_query.annotations[alias] = expression.relabeled_clone(relabels)
+                        del inner_query.annotations[alias]
+                        annotation_select_mask.remove(alias)
+                    # If alias is reused in select fields, add a distinct one
+                    if alias in [column.alias for column in outer_query.select]:
+                        new_alias = alias + '_subq'
+                        outer_query.annotations[new_alias] = outer_query.annotations.pop(alias)
+                        alias = new_alias
+                    # Make sure the annotation_select wont use cached results.
+                    inner_query.set_annotation_mask(inner_query.annotation_select_mask)
+                if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:
+                    # In case of Model.objects[0:3].count(), there would be no
+                    # field selected in the inner query, yet we must use a subquery.
+                    # So, make sure at least one field is selected.
+                    inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)
             try:
                 outer_query.add_subquery(inner_query, using)
             except EmptyResultSet:
