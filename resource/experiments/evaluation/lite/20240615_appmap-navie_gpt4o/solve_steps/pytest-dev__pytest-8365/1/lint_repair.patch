diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py
index 29c7e19d7..be2ec6997 100644
--- a/src/_pytest/tmpdir.py
+++ b/src/_pytest/tmpdir.py
@@ -4,6 +4,7 @@ import re
 import tempfile
 from pathlib import Path
 from typing import Optional
+import string
 
 import attr
 import py
@@ -20,6 +21,11 @@ from _pytest.fixtures import FixtureRequest
 from _pytest.monkeypatch import MonkeyPatch
 
 
+def sanitize_username(user: str) -> str:
+    """Sanitize a username by removing or replacing illegal characters for directory names."""
+    valid_chars = f"-_.{string.ascii_letters}{string.digits}"
+    return "".join(c if c in valid_chars else "_" for c in user)
+
 @final
 @attr.s(init=False)
 class TempPathFactory:
@@ -111,9 +117,8 @@ class TempPathFactory:
         else:
             from_env = os.environ.get("PYTEST_DEBUG_TEMPROOT")
             temproot = Path(from_env or tempfile.gettempdir()).resolve()
-            user = get_user() or "unknown"
-            # use a sub-directory in the temproot to speed-up
-            # make_numbered_dir() call
+            raw_user = get_user()
+            user = sanitize_username(raw_user) if raw_user else "unknown"
             rootdir = temproot.joinpath(f"pytest-of-{user}")
             rootdir.mkdir(exist_ok=True)
             basetemp = make_numbered_dir_with_cleanup(
@@ -154,7 +159,8 @@ def get_user() -> Optional[str]:
     import getpass
 
     try:
-        return getpass.getuser()
+        user = getpass.getuser()
+        return sanitize_username(user)
     except (ImportError, KeyError):
         return None
 
