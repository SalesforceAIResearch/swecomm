diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index d912cd7d5..58181c397 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -30,6 +30,12 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
                     annotation[param.name] = typing.stringify(param.annotation, mode)
             if sig.return_annotation is not sig.empty:
                 annotation['return'] = typing.stringify(sig.return_annotation, mode)
+
+            if '*args' in sig.parameters:
+                annotation['*args'] = typing.stringify(sig.parameters['*args'].annotation, mode)
+
+            if '**kwargs' in sig.parameters:
+                annotation['**kwargs'] = typing.stringify(sig.parameters['**kwargs'].annotation, mode)
     except (TypeError, ValueError):
         pass
 
@@ -111,6 +117,37 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],
         elif parts[0] == 'rtype':
             arguments['return'] = {'type': True}
 
+    # Ensure *args and **kwargs are not duplicated
+    for name in ['*args', '**kwargs']:
+        if name in arguments:
+            annotations.pop(name, None)
+
+    for name, annotation in annotations.items():
+        if name == 'return':
+            continue
+
+        arg = arguments.get(name, {})
+        if not arg.get('type'):
+            field = nodes.field()
+            field += nodes.field_name('', 'type ' + name)
+            field += nodes.field_body('', nodes.paragraph('', annotation))
+            node += field
+        if not arg.get('param'):
+            field = nodes.field()
+            field += nodes.field_name('', 'param ' + name)
+            field += nodes.field_body('', nodes.paragraph('', ''))
+            node += field
+
+    if 'return' in annotations and 'return' not in arguments:
+        annotation = annotations['return']
+        if annotation == 'None' and suppress_rtype:
+            return
+
+        field = nodes.field()
+        field += nodes.field_name('', 'rtype')
+        field += nodes.field_body('', nodes.paragraph('', annotation))
+        node += field
+
     for name, annotation in annotations.items():
         if name == 'return':
             continue
@@ -166,6 +203,31 @@ def augment_descriptions_with_types(
         elif parts[0] == 'rtype':
             has_type.add('return')
 
+    # Ensure *args and **kwargs are not duplicated
+    for name in ['*args', '**kwargs']:
+        if name in annotations and name in has_description:
+            annotations.pop(name, None)
+
+    # Add 'type' for parameters with a description but no declared type.
+    for name in annotations:
+        if name in ('return', 'returns'):
+            continue
+        if name in has_description and name not in has_type:
+            field = nodes.field()
+            field += nodes.field_name('', 'type ' + name)
+            field += nodes.field_body('', nodes.paragraph('', annotations[name]))
+            node += field
+
+    # Add 'rtype' if 'return' is present and 'rtype' isn't.
+    if 'return' in annotations:
+        rtype = annotations['return']
+        if 'return' not in has_type and ('return' in has_description or
+                                         (force_rtype and rtype != "None")):
+            field = nodes.field()
+            field += nodes.field_name('', 'rtype')
+            field += nodes.field_body('', nodes.paragraph('', rtype))
+            node += field
+
     # Add 'type' for parameters with a description but no declared type.
     for name in annotations:
         if name in ('return', 'returns'):
