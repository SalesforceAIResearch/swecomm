diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py
index d912cd7d5..b10f3ca9a 100644
--- a/sphinx/ext/autodoc/typehints.py
+++ b/sphinx/ext/autodoc/typehints.py
@@ -25,9 +25,11 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,
             annotations = app.env.temp_data.setdefault('annotations', {})
             annotation = annotations.setdefault(name, OrderedDict())
             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)
+            processed_params = set()  # Track processed *args and **kwargs
             for param in sig.parameters.values():
-                if param.annotation is not param.empty:
+                if param.annotation is not param.empty and param.name not in processed_params:
                     annotation[param.name] = typing.stringify(param.annotation, mode)
+                    processed_params.add(param.name)
             if sig.return_annotation is not sig.empty:
                 annotation['return'] = typing.stringify(sig.return_annotation, mode)
     except (TypeError, ValueError):
@@ -50,6 +52,8 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element
         # signature node does not have valid context info for the target object
         return
 
+    processed_params = set()  # Track processed *args and **kwargs
+
     annotations = app.env.temp_data.get('annotations', {})
     if annotations.get(fullname, {}):
         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]
@@ -60,16 +64,16 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element
         for field_list in field_lists:
             if app.config.autodoc_typehints_description_target == "all":
                 if objtype == 'class':
-                    modify_field_list(field_list, annotations[fullname], suppress_rtype=True)
+                    modify_field_list(field_list, annotations[fullname], suppress_rtype=True, processed_params=processed_params)
                 else:
-                    modify_field_list(field_list, annotations[fullname])
+                    modify_field_list(field_list, annotations[fullname], processed_params=processed_params)
             elif app.config.autodoc_typehints_description_target == "documented_params":
                 augment_descriptions_with_types(
-                    field_list, annotations[fullname], force_rtype=True
+                    field_list, annotations[fullname], force_rtype=True, processed_params=processed_params
                 )
             else:
                 augment_descriptions_with_types(
-                    field_list, annotations[fullname], force_rtype=False
+                    field_list, annotations[fullname], force_rtype=False, processed_params=processed_params
                 )
 
 
@@ -87,7 +91,7 @@ def insert_field_list(node: Element) -> nodes.field_list:
 
 
 def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],
-                      suppress_rtype: bool = False) -> None:
+                      suppress_rtype: bool = False, processed_params: Set[str] = set()) -> None:
     arguments: Dict[str, Dict[str, bool]] = {}
     fields = cast(Iterable[nodes.field], node)
     for field in fields:
@@ -112,7 +116,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],
             arguments['return'] = {'type': True}
 
     for name, annotation in annotations.items():
-        if name == 'return':
+        if name == 'return' or name in processed_params:
             continue
 
         arg = arguments.get(name, {})
@@ -126,6 +130,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],
             field += nodes.field_name('', 'param ' + name)
             field += nodes.field_body('', nodes.paragraph('', ''))
             node += field
+        processed_params.add(name)
 
     if 'return' in annotations and 'return' not in arguments:
         annotation = annotations['return']
@@ -141,7 +146,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],
 def augment_descriptions_with_types(
     node: nodes.field_list,
     annotations: Dict[str, str],
-    force_rtype: bool
+    force_rtype: bool,
+    processed_params: Set[str] = set()
 ) -> None:
     fields = cast(Iterable[nodes.field], node)
     has_description = set()  # type: Set[str]
@@ -153,14 +159,17 @@ def augment_descriptions_with_types(
             if len(parts) == 2:
                 # :param xxx:
                 has_description.add(parts[1])
+                processed_params.add(parts[1])
             elif len(parts) > 2:
                 # :param xxx yyy:
                 name = ' '.join(parts[2:])
                 has_description.add(name)
                 has_type.add(name)
+                processed_params.add(name)
         elif parts[0] == 'type':
             name = ' '.join(parts[1:])
             has_type.add(name)
+            processed_params.add(name)
         elif parts[0] in ('return', 'returns'):
             has_description.add('return')
         elif parts[0] == 'rtype':
