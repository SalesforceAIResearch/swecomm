diff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py
index 71b021f7c5..65c000beef 100644
--- a/django/db/backends/mysql/schema.py
+++ b/django/db/backends/mysql/schema.py
@@ -118,15 +118,31 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
         covered by another index like a unique_together. "covered" here means
         that the more complex index starts like the simpler one.
         http://bugs.mysql.com/bug.php?id=37910 / Django ticket #24757
-        We check here before removing the [unique|index]_together if we have to
-        recreate a FK index.
+
+        Additionally, ensure we correctly handle cases where both unique_together and 
+        index_together exist on the same fields to avoid ValueError due to multiple constraints.
         """
         first_field = model._meta.get_field(fields[0])
+
+        # Handle foreign key index if applicable
         if first_field.get_internal_type() == 'ForeignKey':
-            constraint_names = self._constraint_names(model, [first_field.column], index=True)
-            if not constraint_names:
+            fk_constraint_names = self._constraint_names(model, [first_field.column], index=True)
+            if not fk_constraint_names:
                 self.execute(self._create_index_sql(model, [first_field], suffix=""))
-        return super()._delete_composed_index(model, fields, *args)
+
+        # Retrieve unique and index constraints on the specified fields
+        unique_constraint_names = self._constraint_names(model, fields, unique=True)
+        index_constraint_names = self._constraint_names(model, fields, index=True)
+        
+        # Ensure proper handling when both constraints exist
+        if unique_constraint_names and index_constraint_names:
+            for constraint in index_constraint_names:
+                self.execute(self.sql_delete_index % {
+                    "table": self.quote_name(model._meta.db_table),
+                    "name": self.quote_name(constraint),
+                })
+        else:
+            return super()._delete_composed_index(model, fields, *args)
 
     def _set_field_new_type_null_status(self, field, new_type):
         """
