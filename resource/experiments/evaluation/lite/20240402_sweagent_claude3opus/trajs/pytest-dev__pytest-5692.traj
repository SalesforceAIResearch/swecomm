{
  "environment": "swe_main",
  "trajectory": [
    {
      "action": "search_dir \"junit xml\"",
      "observation": "Found 2 matches for \"junit xml\" in /pytest-dev__pytest:\n/pytest-dev__pytest/CHANGELOG.rst (2 matches)\nEnd of matches for \"junit xml\" in /pytest-dev__pytest\n",
      "response": "Let's start by searching the pytest codebase to see where the JUnit XML report generation is handled. The issue mentions that pytest enables generating these reports, so there is likely code that handles this functionality.\n<command>\nsearch_dir \"junit xml\"\n</command>",
      "state": "{\"open_file\": \"n/a\", \"working_dir\": \"/pytest-dev__pytest\"}\n",
      "thought": "Let's start by searching the pytest codebase to see where the JUnit XML report generation is handled. The issue mentions that pytest enables generating these reports, so there is likely code that handles this functionality."
    },
    {
      "action": "search_dir \"testsuite\"",
      "observation": "Found 95 matches for \"testsuite\" in /pytest-dev__pytest:\n/pytest-dev__pytest/CHANGELOG.rst (4 matches)\n/pytest-dev__pytest/changelog/5477.bugfix.rst (1 matches)\n/pytest-dev__pytest/changelog/5664.trivial.rst (1 matches)\n/pytest-dev__pytest/doc/en/announce/release-2.4.0.rst (1 matches)\n/pytest-dev__pytest/doc/en/builtin.rst (5 matches)\n/pytest-dev__pytest/doc/en/contents.rst (1 matches)\n/pytest-dev__pytest/doc/en/example/simple.rst (1 matches)\n/pytest-dev__pytest/doc/en/existingtestsuite.rst (1 matches)\n/pytest-dev__pytest/doc/en/getting-started.rst (1 matches)\n/pytest-dev__pytest/doc/en/reference.rst (3 matches)\n/pytest-dev__pytest/doc/en/usage.rst (9 matches)\n/pytest-dev__pytest/src/_pytest/junitxml.py (8 matches)\n/pytest-dev__pytest/testing/logging/test_reporting.py (9 matches)\n/pytest-dev__pytest/testing/test_junitxml.py (50 matches)\nEnd of matches for \"testsuite\" in /pytest-dev__pytest\n",
      "response": "The search results show that the CHANGELOG.rst file mentions \"junit xml\", but it doesn't look like it contains the actual implementation. Let's try searching for a more specific term like \"testsuite\" which is an element in the JUnit XML report.\n<command>\nsearch_dir \"testsuite\"\n</command>",
      "state": "{\"open_file\": \"n/a\", \"working_dir\": \"/pytest-dev__pytest\"}\n",
      "thought": "The search results show that the CHANGELOG.rst file mentions \"junit xml\", but it doesn't look like it contains the actual implementation. Let's try searching for a more specific term like \"testsuite\" which is an element in the JUnit XML report."
    },
    {
      "action": "open src/_pytest/junitxml.py",
      "observation": "[File: /pytest-dev__pytest/src/_pytest/junitxml.py (691 lines total)]\n1:\"\"\"\n2:    report test results in JUnit-XML format,\n3:    for use with Jenkins and build integration servers.\n4:\n5:\n6:Based on initial code from Ross Lawley.\n7:\n8:Output conforms to https://github.com/jenkinsci/xunit-plugin/blob/master/\n9:src/main/resources/org/jenkinsci/plugins/xunit/types/model/xsd/junit-10.xsd\n10:\"\"\"\n11:import functools\n12:import os\n13:import re\n14:import sys\n15:import time\n16:\n17:import py\n18:\n19:import pytest\n20:from _pytest import nodes\n21:from _pytest.config import filename_arg\n22:\n23:\n24:class Junit(py.xml.Namespace):\n25:    pass\n26:\n27:\n28:# We need to get the subset of the invalid unicode ranges according to\n29:# XML 1.0 which are valid in this python build.  Hence we calculate\n30:# this dynamically instead of hardcoding it.  The spec range of valid\n31:# chars is: Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD]\n32:#                    | [#x10000-#x10FFFF]\n33:_legal_chars = (0x09, 0x0A, 0x0D)\n34:_legal_ranges = ((0x20, 0x7E), (0x80, 0xD7FF), (0xE000, 0xFFFD), (0x10000, 0x10FFFF))\n35:_legal_xml_re = [\n36:    \"{}-{}\".format(chr(low), chr(high))\n37:    for (low, high) in _legal_ranges\n38:    if low < sys.maxunicode\n39:]\n40:_legal_xml_re = [chr(x) for x in _legal_chars] + _legal_xml_re\n41:illegal_xml_re = re.compile(\"[^%s]\" % \"\".join(_legal_xml_re))\n42:del _legal_chars\n43:del _legal_ranges\n44:del _legal_xml_re\n45:\n46:_py_ext_re = re.compile(r\"\\.py$\")\n47:\n48:\n49:def bin_xml_escape(arg):\n50:    def repl(matchobj):\n51:        i = ord(matchobj.group())\n52:        if i <= 0xFF:\n53:            return \"#x%02X\" % i\n54:        else:\n55:            return \"#x%04X\" % i\n56:\n57:    return py.xml.raw(illegal_xml_re.sub(repl, py.xml.escape(arg)))\n58:\n59:\n60:def merge_family(left, right):\n61:    result = {}\n62:    for kl, vl in left.items():\n63:        for kr, vr in right.items():\n64:            if not isinstance(vl, list):\n65:                raise TypeError(type(vl))\n66:            result[kl] = vl + vr\n67:    left.update(result)\n68:\n69:\n70:families = {}\n71:families[\"_base\"] = {\"testcase\": [\"classname\", \"name\"]}\n72:families[\"_base_legacy\"] = {\"testcase\": [\"file\", \"line\", \"url\"]}\n73:\n74:# xUnit 1.x inherits legacy attributes\n75:families[\"xunit1\"] = families[\"_base\"].copy()\n76:merge_family(families[\"xunit1\"], families[\"_base_legacy\"])\n77:\n78:# xUnit 2.x uses strict base attributes\n79:families[\"xunit2\"] = families[\"_base\"]\n80:\n81:\n82:class _NodeReporter:\n83:    def __init__(self, nodeid, xml):\n84:        self.id = nodeid\n85:        self.xml = xml\n86:        self.add_stats = self.xml.add_stats\n87:        self.family = self.xml.family\n88:        self.duration = 0\n89:        self.properties = []\n90:        self.nodes = []\n91:        self.testcase = None\n92:        self.attrs = {}\n93:\n94:    def append(self, node):\n95:        self.xml.add_stats(type(node).__name__)\n96:        self.nodes.append(node)\n97:\n98:    def add_property(self, name, value):\n99:        self.properties.append((str(name), bin_xml_escape(value)))\n100:\n(591 more lines below)\n",
      "response": "The search results show that the `src/_pytest/junitxml.py` file contains mentions of \"testsuite\", so it's likely that this file handles the generation of the JUnit XML report. Let's open that file and take a look.\n<command>\nopen src/_pytest/junitxml.py\n</command>",
      "state": "{\"open_file\": \"n/a\", \"working_dir\": \"/pytest-dev__pytest\"}\n",
      "thought": "The search results show that the `src/_pytest/junitxml.py` file contains mentions of \"testsuite\", so it's likely that this file handles the generation of the JUnit XML report. Let's open that file and take a look."
    },
    {
      "action": "search_file \"testsuite\"",
      "observation": "Found 8 matches for \"testsuite\" in /pytest-dev__pytest/src/_pytest/junitxml.py:\nLine 343:    \"\"\"Used by record_testsuite_property to check that the given parameter name is of the proper\nLine 352:def record_testsuite_property(request):\nLine 354:    Records a new ``<property>`` tag as child of the root ``<testsuite>``. This is suitable to\nLine 361:        def test_foo(record_testsuite_property):\nLine 362:            record_testsuite_property(\"ARCH\", \"PPC\")\nLine 363:            record_testsuite_property(\"STORAGE_TYPE\", \"CEPH\")\nLine 660:        suite_node = Junit.testsuite(\nLine 670:        logfile.write(Junit.testsuites([suite_node]).unicode(indent=0))\nEnd of matches for \"testsuite\" in /pytest-dev__pytest/src/_pytest/junitxml.py\n",
      "response": "The `junitxml.py` file seems to be the right place to add the `hostname` and `timestamp` attributes to the `testsuite` element. Let's search for where the `testsuite` element is created in this file.\n<command>\nsearch_file \"testsuite\"\n</command>",
      "state": "{\"open_file\": \"/pytest-dev__pytest/src/_pytest/junitxml.py\", \"working_dir\": \"/pytest-dev__pytest\"}\n",
      "thought": "The `junitxml.py` file seems to be the right place to add the `hostname` and `timestamp` attributes to the `testsuite` element. Let's search for where the `testsuite` element is created in this file."
    },
    {
      "action": "goto 660",
      "observation": "[File: /pytest-dev__pytest/src/_pytest/junitxml.py (691 lines total)]\n(591 more lines above)\n592:            reporter.append_skipped(report)\n593:        self.update_testcase_duration(report)\n594:        if report.when == \"teardown\":\n595:            reporter = self._opentestcase(report)\n596:            reporter.write_captured_output(report)\n597:\n598:            for propname, propvalue in report.user_properties:\n599:                reporter.add_property(propname, propvalue)\n600:\n601:            self.finalize(report)\n602:            report_wid = getattr(report, \"worker_id\", None)\n603:            report_ii = getattr(report, \"item_index\", None)\n604:            close_report = next(\n605:                (\n606:                    rep\n607:                    for rep in self.open_reports\n608:                    if (\n609:                        rep.nodeid == report.nodeid\n610:                        and getattr(rep, \"item_index\", None) == report_ii\n611:                        and getattr(rep, \"worker_id\", None) == report_wid\n612:                    )\n613:                ),\n614:                None,\n615:            )\n616:            if close_report:\n617:                self.open_reports.remove(close_report)\n618:\n619:    def update_testcase_duration(self, report):\n620:        \"\"\"accumulates total duration for nodeid from given report and updates\n621:        the Junit.testcase with the new total if already created.\n622:        \"\"\"\n623:        if self.report_duration == \"total\" or report.when == self.report_duration:\n624:            reporter = self.node_reporter(report)\n625:            reporter.duration += getattr(report, \"duration\", 0.0)\n626:\n627:    def pytest_collectreport(self, report):\n628:        if not report.passed:\n629:            reporter = self._opentestcase(report)\n630:            if report.failed:\n631:                reporter.append_collect_error(report)\n632:            else:\n633:                reporter.append_collect_skipped(report)\n634:\n635:    def pytest_internalerror(self, excrepr):\n636:        reporter = self.node_reporter(\"internal\")\n637:        reporter.attrs.update(classname=\"pytest\", name=\"internal\")\n638:        reporter._add_simple(Junit.error, \"internal error\", excrepr)\n639:\n640:    def pytest_sessionstart(self):\n641:        self.suite_start_time = time.time()\n642:\n643:    def pytest_sessionfinish(self):\n644:        dirname = os.path.dirname(os.path.abspath(self.logfile))\n645:        if not os.path.isdir(dirname):\n646:            os.makedirs(dirname)\n647:        logfile = open(self.logfile, \"w\", encoding=\"utf-8\")\n648:        suite_stop_time = time.time()\n649:        suite_time_delta = suite_stop_time - self.suite_start_time\n650:\n651:        numtests = (\n652:            self.stats[\"passed\"]\n653:            + self.stats[\"failure\"]\n654:            + self.stats[\"skipped\"]\n655:            + self.stats[\"error\"]\n656:            - self.cnt_double_fail_tests\n657:        )\n658:        logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n659:\n660:        suite_node = Junit.testsuite(\n661:            self._get_global_properties_node(),\n662:            [x.to_xml() for x in self.node_reporters_ordered],\n663:            name=self.suite_name,\n664:            errors=self.stats[\"error\"],\n665:            failures=self.stats[\"failure\"],\n666:            skipped=self.stats[\"skipped\"],\n667:            tests=numtests,\n668:            time=\"%.3f\" % suite_time_delta,\n669:        )\n670:        logfile.write(Junit.testsuites([suite_node]).unicode(indent=0))\n671:        logfile.close()\n672:\n673:    def pytest_terminal_summary(self, terminalreporter):\n674:        terminalreporter.write_sep(\"-\", \"generated xml file: %s\" % (self.logfile))\n675:\n676:    def add_global_property(self, name, value):\n677:        __tracebackhide__ = True\n678:        _check_record_param_type(\"name\", name)\n679:        self.global_properties.append((name, bin_xml_escape(value)))\n680:\n681:    def _get_global_properties_node(self):\n682:        \"\"\"Return a Junit node containing custom properties, if any.\n683:        \"\"\"\n684:        if self.global_properties:\n685:            return Junit.properties(\n686:                [\n687:                    Junit.property(name=name, value=value)\n688:                    for name, value in self.global_properties\n689:                ]\n690:            )\n691:        return \"\"\n",
      "response": "It looks like the `testsuite` element is created on line 660 in the `suite_node` variable. Let's take a closer look at that section of the code to see if we can add the `hostname` and `timestamp` attributes there.\n<command>\ngoto 660\n</command>",
      "state": "{\"open_file\": \"/pytest-dev__pytest/src/_pytest/junitxml.py\", \"working_dir\": \"/pytest-dev__pytest\"}\n",
      "thought": "It looks like the `testsuite` element is created on line 660 in the `suite_node` variable. Let's take a closer look at that section of the code to see if we can add the `hostname` and `timestamp` attributes there."
    },
    {
      "action": "edit 660:660\n        import socket\n        suite_node = Junit.testsuite(\n            self._get_global_properties_node(),\n            [x.to_xml() for x in self.node_reporters_ordered],\n            name=self.suite_name,\n            errors=self.stats[\"error\"],\n            failures=self.stats[\"failure\"], \n            skipped=self.stats[\"skipped\"],\n            tests=numtests,\n            time=\"%.3f\" % suite_time_delta,\n            hostname=socket.gethostname(),\n            timestamp=self.suite_start_time\n        )\nend_of_edit",
      "observation": "Your proposed edit has introduced new syntax error(s). Please understand the fixes and retry your edit commmand.\n\nERRORS:\n- E999 IndentationError: unexpected indent\n\nThis is how your edit would have looked if applied\n-------------------------------------------------\n[File: /pytest-dev__pytest/src/_pytest/junitxml.py (703 lines total)]\n(653 more lines above)\n654:            + self.stats[\"skipped\"]\n655:            + self.stats[\"error\"]\n656:            - self.cnt_double_fail_tests\n657:        )\n658:        logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n659:\n660:        import socket\n661:        suite_node = Junit.testsuite(\n662:            self._get_global_properties_node(),\n663:            [x.to_xml() for x in self.node_reporters_ordered],\n664:            name=self.suite_name,\n665:            errors=self.stats[\"error\"],\n666:            failures=self.stats[\"failure\"], \n667:            skipped=self.stats[\"skipped\"],\n668:            tests=numtests,\n669:            time=\"%.3f\" % suite_time_delta,\n670:            hostname=socket.gethostname(),\n671:            timestamp=self.suite_start_time\n672:        )\n673:            self._get_global_properties_node(),\n674:            [x.to_xml() for x in self.node_reporters_ordered],\n675:            name=self.suite_name,\n676:            errors=self.stats[\"error\"],\n(27 more lines below)\n-------------------------------------------------\n\nThis is the original code before your edit\n-------------------------------------------------\n[File: /pytest-dev__pytest/src/_pytest/junitxml.py (691 lines total)]\n(654 more lines above)\n655:            + self.stats[\"error\"]\n656:            - self.cnt_double_fail_tests\n657:        )\n658:        logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n659:\n660:        suite_node = Junit.testsuite(\n661:            self._get_global_properties_node(),\n662:            [x.to_xml() for x in self.node_reporters_ordered],\n663:            name=self.suite_name,\n664:            errors=self.stats[\"error\"],\n665:            failures=self.stats[\"failure\"],\n(26 more lines below)\n-------------------------------------------------\nYour changes have NOT been applied. Please fix your edit command and try again.\nYou either need to 1) Specify the correct start/end line arguments or 2) Correct your edit code.\nDO NOT re-run the same failed edit command. Running it again will lead to the same error.\n",
      "response": "Yes, this is the right place to add the `hostname` and `timestamp` attributes. We can add them as arguments to the `Junit.testsuite()` call on line 660.\n\nTo get the hostname, we can use the `socket.gethostname()` function from the Python standard library. For the timestamp, we can use the `self.suite_start_time` variable which is set in the `pytest_sessionstart` method.\n\nLet's make the necessary changes:\n\n<command>\nedit 660:660\n        import socket\n        suite_node = Junit.testsuite(\n            self._get_global_properties_node(),\n            [x.to_xml() for x in self.node_reporters_ordered],\n            name=self.suite_name,\n            errors=self.stats[\"error\"],\n            failures=self.stats[\"failure\"], \n            skipped=self.stats[\"skipped\"],\n            tests=numtests,\n            time=\"%.3f\" % suite_time_delta,\n            hostname=socket.gethostname(),\n            timestamp=self.suite_start_time\n        )\nend_of_edit\n</command>",
      "state": "{\"open_file\": \"/pytest-dev__pytest/src/_pytest/junitxml.py\", \"working_dir\": \"/pytest-dev__pytest\"}\n",
      "thought": "Yes, this is the right place to add the `hostname` and `timestamp` attributes. We can add them as arguments to the `Junit.testsuite()` call on line 660.\n\nTo get the hostname, we can use the `socket.gethostname()` function from the Python standard library. For the timestamp, we can use the `self.suite_start_time` variable which is set in the `pytest_sessionstart` method.\n\nLet's make the necessary changes:"
    },
    {
      "action": "edit 660:671\n        import socket\n        suite_node = Junit.testsuite(\n            self._get_global_properties_node(),\n            [x.to_xml() for x in self.node_reporters_ordered],\n            name=self.suite_name,\n            errors=self.stats[\"error\"],\n            failures=self.stats[\"failure\"], \n            skipped=self.stats[\"skipped\"],\n            tests=numtests,\n            time=\"%.3f\" % suite_time_delta,\n            hostname=socket.gethostname(),\n            timestamp=self.suite_start_time\n        )\nend_of_edit",
      "observation": "[File: /pytest-dev__pytest/src/_pytest/junitxml.py (692 lines total)]\n(592 more lines above)\n593:        self.update_testcase_duration(report)\n594:        if report.when == \"teardown\":\n595:            reporter = self._opentestcase(report)\n596:            reporter.write_captured_output(report)\n597:\n598:            for propname, propvalue in report.user_properties:\n599:                reporter.add_property(propname, propvalue)\n600:\n601:            self.finalize(report)\n602:            report_wid = getattr(report, \"worker_id\", None)\n603:            report_ii = getattr(report, \"item_index\", None)\n604:            close_report = next(\n605:                (\n606:                    rep\n607:                    for rep in self.open_reports\n608:                    if (\n609:                        rep.nodeid == report.nodeid\n610:                        and getattr(rep, \"item_index\", None) == report_ii\n611:                        and getattr(rep, \"worker_id\", None) == report_wid\n612:                    )\n613:                ),\n614:                None,\n615:            )\n616:            if close_report:\n617:                self.open_reports.remove(close_report)\n618:\n619:    def update_testcase_duration(self, report):\n620:        \"\"\"accumulates total duration for nodeid from given report and updates\n621:        the Junit.testcase with the new total if already created.\n622:        \"\"\"\n623:        if self.report_duration == \"total\" or report.when == self.report_duration:\n624:            reporter = self.node_reporter(report)\n625:            reporter.duration += getattr(report, \"duration\", 0.0)\n626:\n627:    def pytest_collectreport(self, report):\n628:        if not report.passed:\n629:            reporter = self._opentestcase(report)\n630:            if report.failed:\n631:                reporter.append_collect_error(report)\n632:            else:\n633:                reporter.append_collect_skipped(report)\n634:\n635:    def pytest_internalerror(self, excrepr):\n636:        reporter = self.node_reporter(\"internal\")\n637:        reporter.attrs.update(classname=\"pytest\", name=\"internal\")\n638:        reporter._add_simple(Junit.error, \"internal error\", excrepr)\n639:\n640:    def pytest_sessionstart(self):\n641:        self.suite_start_time = time.time()\n642:\n643:    def pytest_sessionfinish(self):\n644:        dirname = os.path.dirname(os.path.abspath(self.logfile))\n645:        if not os.path.isdir(dirname):\n646:            os.makedirs(dirname)\n647:        logfile = open(self.logfile, \"w\", encoding=\"utf-8\")\n648:        suite_stop_time = time.time()\n649:        suite_time_delta = suite_stop_time - self.suite_start_time\n650:\n651:        numtests = (\n652:            self.stats[\"passed\"]\n653:            + self.stats[\"failure\"]\n654:            + self.stats[\"skipped\"]\n655:            + self.stats[\"error\"]\n656:            - self.cnt_double_fail_tests\n657:        )\n658:        logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n659:\n660:        import socket\n661:        suite_node = Junit.testsuite(\n662:            self._get_global_properties_node(),\n663:            [x.to_xml() for x in self.node_reporters_ordered],\n664:            name=self.suite_name,\n665:            errors=self.stats[\"error\"],\n666:            failures=self.stats[\"failure\"], \n667:            skipped=self.stats[\"skipped\"],\n668:            tests=numtests,\n669:            time=\"%.3f\" % suite_time_delta,\n670:            hostname=socket.gethostname(),\n671:            timestamp=self.suite_start_time\n672:        )\n673:\n674:    def pytest_terminal_summary(self, terminalreporter):\n675:        terminalreporter.write_sep(\"-\", \"generated xml file: %s\" % (self.logfile))\n676:\n677:    def add_global_property(self, name, value):\n678:        __tracebackhide__ = True\n679:        _check_record_param_type(\"name\", name)\n680:        self.global_properties.append((name, bin_xml_escape(value)))\n681:\n682:    def _get_global_properties_node(self):\n683:        \"\"\"Return a Junit node containing custom properties, if any.\n684:        \"\"\"\n685:        if self.global_properties:\n686:            return Junit.properties(\n687:                [\n688:                    Junit.property(name=name, value=value)\n689:                    for name, value in self.global_properties\n690:                ]\n691:            )\n692:        return \"\"\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\n",
      "response": "I apologize for the mistake in my previous edit command. The indentation was incorrect. Let me try again with the correct indentation:\n\n<command>\nedit 660:671\n        import socket\n        suite_node = Junit.testsuite(\n            self._get_global_properties_node(),\n            [x.to_xml() for x in self.node_reporters_ordered],\n            name=self.suite_name,\n            errors=self.stats[\"error\"],\n            failures=self.stats[\"failure\"], \n            skipped=self.stats[\"skipped\"],\n            tests=numtests,\n            time=\"%.3f\" % suite_time_delta,\n            hostname=socket.gethostname(),\n            timestamp=self.suite_start_time\n        )\nend_of_edit\n</command>",
      "state": "{\"open_file\": \"/pytest-dev__pytest/src/_pytest/junitxml.py\", \"working_dir\": \"/pytest-dev__pytest\"}\n",
      "thought": "I apologize for the mistake in my previous edit command. The indentation was incorrect. Let me try again with the correct indentation:"
    },
    {
      "action": "find_file \"test_*.py\"",
      "observation": "Found 83 matches for \"test_*.py\" in /pytest-dev__pytest:\n/pytest-dev__pytest/doc/en/example/costlysetup/sub_a/test_quick.py\n/pytest-dev__pytest/doc/en/example/costlysetup/sub_b/test_two.py\n/pytest-dev__pytest/doc/en/example/fixtures/test_fixtures_order.py\n/pytest-dev__pytest/doc/en/example/py2py3/test_py3.py\n/pytest-dev__pytest/doc/en/example/py2py3/test_py2.py\n/pytest-dev__pytest/doc/en/example/assertion/test_setup_flow_example.py\n/pytest-dev__pytest/doc/en/example/assertion/test_failures.py\n/pytest-dev__pytest/doc/en/example/assertion/global_testmodule_config/test_hello_world.py\n/pytest-dev__pytest/testing/test_terminal.py\n/pytest-dev__pytest/testing/example_scripts/collect/collect_init_tests/tests/test_foo.py\n/pytest-dev__pytest/testing/example_scripts/collect/package_infinite_recursion/tests/test_basic.py\n/pytest-dev__pytest/testing/example_scripts/collect/package_init_given_as_arg/pkg/test_foo.py\n/pytest-dev__pytest/testing/example_scripts/marks/marks_considered_keywords/test_marks_as_keywords.py\n/pytest-dev__pytest/testing/example_scripts/dataclasses/test_compare_two_different_dataclasses.py\n/pytest-dev__pytest/testing/example_scripts/dataclasses/test_compare_dataclasses_verbose.py\n/pytest-dev__pytest/testing/example_scripts/dataclasses/test_compare_dataclasses.py\n/pytest-dev__pytest/testing/example_scripts/dataclasses/test_compare_dataclasses_field_comparison_off.py\n/pytest-dev__pytest/testing/example_scripts/warnings/test_group_warnings_by_message.py\n/pytest-dev__pytest/testing/example_scripts/unittest/test_parametrized_fixture_error_message.py\n/pytest-dev__pytest/testing/example_scripts/unittest/test_setup_skip.py\n/pytest-dev__pytest/testing/example_scripts/unittest/test_setup_skip_module.py\n/pytest-dev__pytest/testing/example_scripts/unittest/test_setup_skip_class.py\n/pytest-dev__pytest/testing/example_scripts/issue88_initial_file_multinodes/test_hello.py\n/pytest-dev__pytest/testing/example_scripts/config/collect_pytest_prefix/test_foo.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/test_getfixturevalue_dynamic.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/test_fixture_named_request.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_detect_recursive_dependency_error.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_funcarg_basic.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_conftest_funcargs_only_available_in_subdir/sub1/test_in_sub1.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_conftest_funcargs_only_available_in_subdir/sub2/test_in_sub2.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_extend_fixture_conftest_module/test_extend_fixture_conftest_module.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_funcarg_lookup_classlevel.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_extend_fixture_module_class.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_funcarg_lookupfails.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_funcarg_lookup_modulelevel.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_extend_fixture_conftest_conftest/pkg/test_spam.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/custom_item/foo/test_foo.py\n/pytest-dev__pytest/testing/test_doctest.py\n/pytest-dev__pytest/testing/test_helpconfig.py\n/pytest-dev__pytest/testing/test_pathlib.py\n/pytest-dev__pytest/testing/io/test_saferepr.py\n/pytest-dev__pytest/testing/test_collection.py\n/pytest-dev__pytest/testing/test_junitxml.py\n/pytest-dev__pytest/testing/test_config.py\n/pytest-dev__pytest/testing/test_warning_types.py\n/pytest-dev__pytest/testing/test_warnings.py\n/pytest-dev__pytest/testing/examples/test_issue519.py\n/pytest-dev__pytest/testing/test_pastebin.py\n/pytest-dev__pytest/testing/test_cacheprovider.py\n/pytest-dev__pytest/testing/test_runner.py\n/pytest-dev__pytest/testing/test_resultlog.py\n/pytest-dev__pytest/testing/test_runner_xunit.py\n/pytest-dev__pytest/testing/test_pdb.py\n/pytest-dev__pytest/testing/test_assertrewrite.py\n/pytest-dev__pytest/testing/test_unittest.py\n/pytest-dev__pytest/testing/test_recwarn.py\n/pytest-dev__pytest/testing/test_monkeypatch.py\n/pytest-dev__pytest/testing/freeze/tests/test_trivial.py\n/pytest-dev__pytest/testing/code/test_source.py\n/pytest-dev__pytest/testing/code/test_excinfo.py\n/pytest-dev__pytest/testing/code/test_code.py\n/pytest-dev__pytest/testing/test_pytester.py\n/pytest-dev__pytest/testing/test_assertion.py\n/pytest-dev__pytest/testing/test_nodes.py\n/pytest-dev__pytest/testing/test_mark.py\n/pytest-dev__pytest/testing/test_capture.py\n/pytest-dev__pytest/testing/test_stepwise.py\n/pytest-dev__pytest/testing/test_compat.py\n/pytest-dev__pytest/testing/test_skipping.py\n/pytest-dev__pytest/testing/test_faulthandler.py\n/pytest-dev__pytest/testing/test_argcomplete.py\n/pytest-dev__pytest/testing/test_modimport.py\n/pytest-dev__pytest/testing/test_conftest.py\n/pytest-dev__pytest/testing/test_tmpdir.py\n/pytest-dev__pytest/testing/test_nose.py\n/pytest-dev__pytest/testing/test_session.py\n/pytest-dev__pytest/testing/test_entry_points.py\n/pytest-dev__pytest/testing/test_pluginmanager.py\n/pytest-dev__pytest/testing/test_reports.py\n/pytest-dev__pytest/testing/logging/test_reporting.py\n/pytest-dev__pytest/testing/logging/test_fixture.py\n/pytest-dev__pytest/testing/logging/test_formatter.py\n/pytest-dev__pytest/testing/test_parseopt.py\n",
      "response": "The edit looks good now. The indentation is correct and the `hostname` and `timestamp` attributes have been added to the `Junit.testsuite` call.\n\nTo test if this change works as expected, we should run pytest with the `--junitxml` option to generate a JUnit XML report and then inspect the generated XML to see if the `hostname` and `timestamp` attributes are present on the `<testsuite>` element.\n\nHowever, I don't see any existing test files in the current directory that we could run to generate a report. Let's search the repository to see if there are any existing test files we could use.\n\n<command>\nfind_file \"test_*.py\"\n</command>",
      "state": "{\"open_file\": \"/pytest-dev__pytest/src/_pytest/junitxml.py\", \"working_dir\": \"/pytest-dev__pytest\"}\n",
      "thought": "The edit looks good now. The indentation is correct and the `hostname` and `timestamp` attributes have been added to the `Junit.testsuite` call.\n\nTo test if this change works as expected, we should run pytest with the `--junitxml` option to generate a JUnit XML report and then inspect the generated XML to see if the `hostname` and `timestamp` attributes are present on the `<testsuite>` element.\n\nHowever, I don't see any existing test files in the current directory that we could run to generate a report. Let's search the repository to see if there are any existing test files we could use."
    },
    {
      "action": "cd testing\npython -m pytest test_junitxml.py --junitxml=report.xml",
      "observation": "============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /pytest-dev__pytest, inifile: tox.ini\ncollected 70 items\n\ntest_junitxml.py ....FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF...FFF.FF..FFF [ 78%]\nsFFxFFFF...FFFF                                                          [100%]\n\n=================================== FAILURES ===================================\n________________________ TestPython.test_summing_simple ________________________\n\nself = <test_junitxml.TestPython object at 0xffff9c968a00>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_summing_simple0')>\n\n    def test_summing_simple(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            def test_pass():\n                pass\n            def test_fail():\n                assert 0\n            def test_skip():\n                pytest.skip(\"\")\n            @pytest.mark.xfail\n            def test_xfail():\n                assert 0\n            @pytest.mark.xfail\n            def test_xpass():\n                assert 1\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c9683d0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_summing_simple0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_summing_simple0\ncollected 5 items\n\ntest_summing_simple.py .FsxX                                             [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_fail ___________________________________\n\n    def test_fail():\n>       assert 0\nE       assert 0\n\ntest_summing_simple.py:5: AssertionError\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_summing_simple0/junit.xml -\n===== 1 failed, 1 passed, 1 skipped, 1 xfailed, 1 xpassed in 0.02 seconds ======\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_summing_simple0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_summing_simple0/junit.xml' mode='w' encoding='utf-8'>\n__________________ TestPython.test_summing_simple_with_errors __________________\n\nself = <test_junitxml.TestPython object at 0xffff9c6b6c10>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_summing_simple_with_errors0')>\n\n    def test_summing_simple_with_errors(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture\n            def fixture():\n                raise Exception()\n            def test_pass():\n                pass\n            def test_fail():\n                assert 0\n            def test_error(fixture):\n                pass\n            @pytest.mark.xfail\n            def test_xfail():\n                assert False\n            @pytest.mark.xfail(strict=True)\n            def test_xpass():\n                assert True\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c6decd0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_summing_simple_with_errors0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_summing_simple_with_errors0\ncollected 5 items\n\ntest_summing_simple_with_errors.py .FExF                                 [100%]\n\n==================================== ERRORS ====================================\n_________________________ ERROR at setup of test_error _________________________\n\n    @pytest.fixture\n    def fixture():\n>       raise Exception()\nE       Exception\n\ntest_summing_simple_with_errors.py:4: Exception\n=================================== FAILURES ===================================\n__________________________________ test_fail ___________________________________\n\n    def test_fail():\n>       assert 0\nE       assert 0\n\ntest_summing_simple_with_errors.py:8: AssertionError\n__________________________________ test_xpass __________________________________\n[XPASS(strict)] \n- generated xml file: /tmp/pytest-of-root/pytest-0/test_summing_simple_with_errors0/junit.xml -\n============ 2 failed, 1 passed, 1 xfailed, 1 error in 0.02 seconds ============\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_summing_simple_with_errors0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_summing_simple_with_errors0/junit.xml' mode='w' encoding='utf-8'>\n_______________________ TestPython.test_timing_function ________________________\n\nself = <test_junitxml.TestPython object at 0xffff9c523970>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_timing_function0')>\n\n    def test_timing_function(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import time, pytest\n            def setup_module():\n                time.sleep(0.01)\n            def teardown_module():\n                time.sleep(0.01)\n            def test_sleep():\n                time.sleep(0.01)\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:154: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c5f1160>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_timing_function0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_timing_function0\ncollected 1 item\n\ntest_timing_function.py .                                                [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_timing_function0/junit.xml -\n=========================== 1 passed in 0.05 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_timing_function0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_timing_function0/junit.xml' mode='w' encoding='utf-8'>\n_________________ TestPython.test_junit_duration_report[call] __________________\n\nself = <test_junitxml.TestPython object at 0xffff9c6206a0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_junit_duration_report0')>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0xffff9c620d60>\nduration_report = 'call'\n\n    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n    def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n    \n        # mock LogXML.node_reporter so it always sets a known duration to each test report object\n        original_node_reporter = LogXML.node_reporter\n    \n        def node_reporter_wrapper(s, report):\n            report.duration = 1.0\n            reporter = original_node_reporter(s, report)\n            return reporter\n    \n        monkeypatch.setattr(LogXML, \"node_reporter\", node_reporter_wrapper)\n    \n        testdir.makepyfile(\n            \"\"\"\n            def test_foo():\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(\n            testdir, \"-o\", \"junit_duration_report={}\".format(duration_report)\n        )\n\n/pytest-dev__pytest/testing/test_junitxml.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c620ac0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_junit_duration_report0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_junit_duration_report0\ncollected 1 item\n\ntest_junit_duration_report.py .                                          [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_junit_duration_report0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_junit_duration_report0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_junit_duration_report0/junit.xml' mode='w' encoding='utf-8'>\n_________________ TestPython.test_junit_duration_report[total] _________________\n\nself = <test_junitxml.TestPython object at 0xffff9c6885b0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_junit_duration_report1')>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0xffff9c660df0>\nduration_report = 'total'\n\n    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n    def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n    \n        # mock LogXML.node_reporter so it always sets a known duration to each test report object\n        original_node_reporter = LogXML.node_reporter\n    \n        def node_reporter_wrapper(s, report):\n            report.duration = 1.0\n            reporter = original_node_reporter(s, report)\n            return reporter\n    \n        monkeypatch.setattr(LogXML, \"node_reporter\", node_reporter_wrapper)\n    \n        testdir.makepyfile(\n            \"\"\"\n            def test_foo():\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(\n            testdir, \"-o\", \"junit_duration_report={}\".format(duration_report)\n        )\n\n/pytest-dev__pytest/testing/test_junitxml.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c6b1730>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_junit_duration_report1/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_junit_duration_report1\ncollected 1 item\n\ntest_junit_duration_report.py .                                          [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_junit_duration_report1/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_junit_duration_report1/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_junit_duration_report1/junit.xml' mode='w' encoding='utf-8'>\n_________________________ TestPython.test_setup_error __________________________\n\nself = <test_junitxml.TestPython object at 0xffff9c1e5370>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_setup_error0')>\n\n    def test_setup_error(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            @pytest.fixture\n            def arg(request):\n                raise ValueError()\n            def test_function(arg):\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:203: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c1c4490>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_setup_error0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_setup_error0\ncollected 1 item\n\ntest_setup_error.py E                                                    [100%]\n\n==================================== ERRORS ====================================\n_______________________ ERROR at setup of test_function ________________________\n\nrequest = <SubRequest 'arg' for <Function test_function>>\n\n    @pytest.fixture\n    def arg(request):\n>       raise ValueError()\nE       ValueError\n\ntest_setup_error.py:5: ValueError\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_setup_error0/junit.xml -\n=========================== 1 error in 0.01 seconds ============================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_setup_error0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_setup_error0/junit.xml' mode='w' encoding='utf-8'>\n________________________ TestPython.test_teardown_error ________________________\n\nself = <test_junitxml.TestPython object at 0xffff9c43eee0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_teardown_error0')>\n\n    def test_teardown_error(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            @pytest.fixture\n            def arg():\n                yield\n                raise ValueError()\n            def test_function(arg):\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c353dc0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_teardown_error0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_teardown_error0\ncollected 1 item\n\ntest_teardown_error.py .E                                                [100%]\n\n==================================== ERRORS ====================================\n______________________ ERROR at teardown of test_function ______________________\n\n    @pytest.fixture\n    def arg():\n        yield\n>       raise ValueError()\nE       ValueError\n\ntest_teardown_error.py:6: ValueError\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_teardown_error0/junit.xml -\n====================== 1 passed, 1 error in 0.01 seconds =======================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_teardown_error0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_teardown_error0/junit.xml' mode='w' encoding='utf-8'>\n_________________ TestPython.test_call_failure_teardown_error __________________\n\nself = <test_junitxml.TestPython object at 0xffff9c0a06a0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_call_failure_teardown_error0')>\n\n    def test_call_failure_teardown_error(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            @pytest.fixture\n            def arg():\n                yield\n                raise Exception(\"Teardown Exception\")\n            def test_function(arg):\n                raise Exception(\"Call Exception\")\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:248: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c189340>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_call_failure_teardown_error0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_call_failure_teardown_error0\ncollected 1 item\n\ntest_call_failure_teardown_error.py FE                                   [100%]\n\n==================================== ERRORS ====================================\n______________________ ERROR at teardown of test_function ______________________\n\n    @pytest.fixture\n    def arg():\n        yield\n>       raise Exception(\"Teardown Exception\")\nE       Exception: Teardown Exception\n\ntest_call_failure_teardown_error.py:6: Exception\n=================================== FAILURES ===================================\n________________________________ test_function _________________________________\n\narg = None\n\n    def test_function(arg):\n>       raise Exception(\"Call Exception\")\nE       Exception: Call Exception\n\ntest_call_failure_teardown_error.py:8: Exception\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_call_failure_teardown_error0/junit.xml -\n====================== 1 failed, 1 error in 0.01 seconds =======================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_call_failure_teardown_error0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_call_failure_teardown_error0/junit.xml' mode='w' encoding='utf-8'>\n__________________ TestPython.test_skip_contains_name_reason ___________________\n\nself = <test_junitxml.TestPython object at 0xffff9c0b55e0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_skip_contains_name_reason0')>\n\n    def test_skip_contains_name_reason(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            def test_skip():\n                pytest.skip(\"hello23\")\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:268: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c0aa070>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_skip_contains_name_reason0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_skip_contains_name_reason0\ncollected 1 item\n\ntest_skip_contains_name_reason.py s                                      [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_skip_contains_name_reason0/junit.xml -\n========================== 1 skipped in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_skip_contains_name_reason0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_skip_contains_name_reason0/junit.xml' mode='w' encoding='utf-8'>\n________________ TestPython.test_mark_skip_contains_name_reason ________________\n\nself = <test_junitxml.TestPython object at 0xffff9c09ca30>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_mark_skip_contains_name_reason0')>\n\n    def test_mark_skip_contains_name_reason(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skip(reason=\"hello24\")\n            def test_skip():\n                assert True\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:286: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c714af0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_mark_skip_contains_name_reason0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_mark_skip_contains_name_reason0\ncollected 1 item\n\ntest_mark_skip_contains_name_reason.py s                                 [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_mark_skip_contains_name_reason0/junit.xml -\n========================== 1 skipped in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_mark_skip_contains_name_reason0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_mark_skip_contains_name_reason0/junit.xml' mode='w' encoding='utf-8'>\n_______________ TestPython.test_mark_skipif_contains_name_reason _______________\n\nself = <test_junitxml.TestPython object at 0xffff9bef9c10>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_mark_skipif_contains_name_reason0')>\n\n    def test_mark_skipif_contains_name_reason(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            GLOBAL_CONDITION = True\n            @pytest.mark.skipif(GLOBAL_CONDITION, reason=\"hello25\")\n            def test_skip():\n                assert True\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bfd08b0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_mark_skipif_contains_name_reason0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_mark_skipif_contains_name_reason0\ncollected 1 item\n\ntest_mark_skipif_contains_name_reason.py s                               [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_mark_skipif_contains_name_reason0/junit.xml -\n========================== 1 skipped in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_mark_skipif_contains_name_reason0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_mark_skipif_contains_name_reason0/junit.xml' mode='w' encoding='utf-8'>\n_______________ TestPython.test_mark_skip_doesnt_capture_output ________________\n\nself = <test_junitxml.TestPython object at 0xffff9c327d30>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_mark_skip_doesnt_capture_output0')>\n\n    def test_mark_skip_doesnt_capture_output(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skip(reason=\"foo\")\n            def test_skip():\n                print(\"bar!\")\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:327: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bef0370>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_mark_skip_doesnt_capture_output0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_mark_skip_doesnt_capture_output0\ncollected 1 item\n\ntest_mark_skip_doesnt_capture_output.py s                                [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_mark_skip_doesnt_capture_output0/junit.xml -\n========================== 1 skipped in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_mark_skip_doesnt_capture_output0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_mark_skip_doesnt_capture_output0/junit.xml' mode='w' encoding='utf-8'>\n______________________ TestPython.test_classname_instance ______________________\n\nself = <test_junitxml.TestPython object at 0xffff9bde26d0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_classname_instance0')>\n\n    def test_classname_instance(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            class TestClass(object):\n                def test_method(self):\n                    assert 0\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c3ca3d0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_classname_instance0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_classname_instance0\ncollected 1 item\n\ntest_classname_instance.py F                                             [100%]\n\n=================================== FAILURES ===================================\n____________________________ TestClass.test_method _____________________________\n\nself = <test_classname_instance.TestClass object at 0xffff9c0f6370>\n\n    def test_method(self):\n>       assert 0\nE       assert 0\n\ntest_classname_instance.py:3: AssertionError\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_classname_instance0/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_classname_instance0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_classname_instance0/junit.xml' mode='w' encoding='utf-8'>\n_____________________ TestPython.test_classname_nested_dir _____________________\n\nself = <test_junitxml.TestPython object at 0xffff9bf2a340>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_classname_nested_dir0')>\n\n    def test_classname_nested_dir(self, testdir):\n        p = testdir.tmpdir.ensure(\"sub\", \"test_hello.py\")\n        p.write(\"def test_func(): 0/0\")\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:352: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c010af0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_classname_nested_dir0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_classname_nested_dir0\ncollected 1 item\n\nsub/test_hello.py F                                                      [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_func ___________________________________\n\n>   def test_func(): 0/0\nE   ZeroDivisionError: division by zero\n\nsub/test_hello.py:1: ZeroDivisionError\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_classname_nested_dir0/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_classname_nested_dir0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_classname_nested_dir0/junit.xml' mode='w' encoding='utf-8'>\n________________________ TestPython.test_internal_error ________________________\n\nself = <test_junitxml.TestPython object at 0xffff9c3e9f10>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_internal_error0')>\n\n    def test_internal_error(self, testdir):\n        testdir.makeconftest(\"def pytest_runtest_protocol(): 0 / 0\")\n        testdir.makepyfile(\"def test_function(): pass\")\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:362: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c409cd0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_internal_error0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_internal_error0\ncollected 1 item\nINTERNALERROR> Traceback (most recent call last):\nINTERNALERROR>   File \"/pytest-dev__pytest/src/_pytest/main.py\", line 191, in wrap_session\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\nINTERNALERROR>   File \"/pytest-dev__pytest/src/_pytest/main.py\", line 235, in _main\nINTERNALERROR>     config.hook.pytest_runtestloop(session=session)\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/hooks.py\", line 286, in __call__\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/manager.py\", line 93, in _hookexec\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/manager.py\", line 337, in traced_hookexec\nINTERNALERROR>     return outcome.get_result()\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 80, in get_result\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 52, in from_call\nINTERNALERROR>     result = func()\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/manager.py\", line 335, in <lambda>\nINTERNALERROR>     outcome = _Result.from_call(lambda: oldcall(hook, hook_impls, kwargs))\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/manager.py\", line 84, in <lambda>\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 208, in _multicall\nINTERNALERROR>     return outcome.get_result()\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 80, in get_result\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\nINTERNALERROR>     res = hook_impl.function(*args)\nINTERNALERROR>   File \"/pytest-dev__pytest/src/_pytest/main.py\", line 256, in pytest_runtestloop\nINTERNALERROR>     item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/hooks.py\", line 286, in __call__\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/manager.py\", line 93, in _hookexec\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/manager.py\", line 337, in traced_hookexec\nINTERNALERROR>     return outcome.get_result()\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 80, in get_result\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 52, in from_call\nINTERNALERROR>     result = func()\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/manager.py\", line 335, in <lambda>\nINTERNALERROR>     outcome = _Result.from_call(lambda: oldcall(hook, hook_impls, kwargs))\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/manager.py\", line 84, in <lambda>\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 208, in _multicall\nINTERNALERROR>     return outcome.get_result()\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 80, in get_result\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\nINTERNALERROR>     res = hook_impl.function(*args)\nINTERNALERROR>   File \"/tmp/pytest-of-root/pytest-0/test_internal_error0/conftest.py\", line 1, in pytest_runtest_protocol\nINTERNALERROR>     def pytest_runtest_protocol(): 0 / 0\nINTERNALERROR> ZeroDivisionError: division by zero\n\n========================= no tests ran in 0.01 seconds =========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_internal_error0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_internal_error0/junit.xml' mode='w' encoding='utf-8'>\n_____________________ TestPython.test_failure_function[no] _____________________\n\nself = <test_junitxml.TestPython object at 0xffff9c2ceb50>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_failure_function0')>\njunit_logging = 'no'\n\n    @pytest.mark.parametrize(\"junit_logging\", [\"no\", \"system-out\", \"system-err\"])\n    def test_failure_function(self, testdir, junit_logging):\n        testdir.makepyfile(\n            \"\"\"\n            import logging\n            import sys\n    \n            def test_fail():\n                print(\"hello-stdout\")\n                sys.stderr.write(\"hello-stderr\\\\n\")\n                logging.info('info msg')\n                logging.warning('warning msg')\n                raise ValueError(42)\n        \"\"\"\n        )\n    \n>       result, dom = runandparse(testdir, \"-o\", \"junit_logging=%s\" % junit_logging)\n\n/pytest-dev__pytest/testing/test_junitxml.py:388: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c2eb0a0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_failure_function0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_failure_function0\ncollected 1 item\n\ntest_failure_function.py F                                               [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_fail ___________________________________\n\n    def test_fail():\n        print(\"hello-stdout\")\n        sys.stderr.write(\"hello-stderr\\n\")\n        logging.info('info msg')\n        logging.warning('warning msg')\n>       raise ValueError(42)\nE       ValueError: 42\n\ntest_failure_function.py:9: ValueError\n----------------------------- Captured stdout call -----------------------------\nhello-stdout\n----------------------------- Captured stderr call -----------------------------\nhello-stderr\n------------------------------ Captured log call -------------------------------\nWARNING  root:test_failure_function.py:8 warning msg\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_failure_function0/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_failure_function0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_failure_function0/junit.xml' mode='w' encoding='utf-8'>\n------------------------------ Captured log call -------------------------------\nWARNING  root:test_failure_function.py:8 warning msg\n_________________ TestPython.test_failure_function[system-out] _________________\n\nself = <test_junitxml.TestPython object at 0xffff9c3a9f70>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_failure_function1')>\njunit_logging = 'system-out'\n\n    @pytest.mark.parametrize(\"junit_logging\", [\"no\", \"system-out\", \"system-err\"])\n    def test_failure_function(self, testdir, junit_logging):\n        testdir.makepyfile(\n            \"\"\"\n            import logging\n            import sys\n    \n            def test_fail():\n                print(\"hello-stdout\")\n                sys.stderr.write(\"hello-stderr\\\\n\")\n                logging.info('info msg')\n                logging.warning('warning msg')\n                raise ValueError(42)\n        \"\"\"\n        )\n    \n>       result, dom = runandparse(testdir, \"-o\", \"junit_logging=%s\" % junit_logging)\n\n/pytest-dev__pytest/testing/test_junitxml.py:388: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bdb7a00>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_failure_function1/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_failure_function1\ncollected 1 item\n\ntest_failure_function.py F                                               [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_fail ___________________________________\n\n    def test_fail():\n        print(\"hello-stdout\")\n        sys.stderr.write(\"hello-stderr\\n\")\n        logging.info('info msg')\n        logging.warning('warning msg')\n>       raise ValueError(42)\nE       ValueError: 42\n\ntest_failure_function.py:9: ValueError\n----------------------------- Captured stdout call -----------------------------\nhello-stdout\n----------------------------- Captured stderr call -----------------------------\nhello-stderr\n------------------------------ Captured log call -------------------------------\nWARNING  root:test_failure_function.py:8 warning msg\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_failure_function1/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_failure_function1/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_failure_function1/junit.xml' mode='w' encoding='utf-8'>\n------------------------------ Captured log call -------------------------------\nWARNING  root:test_failure_function.py:8 warning msg\n_________________ TestPython.test_failure_function[system-err] _________________\n\nself = <test_junitxml.TestPython object at 0xffff9bd94730>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_failure_function2')>\njunit_logging = 'system-err'\n\n    @pytest.mark.parametrize(\"junit_logging\", [\"no\", \"system-out\", \"system-err\"])\n    def test_failure_function(self, testdir, junit_logging):\n        testdir.makepyfile(\n            \"\"\"\n            import logging\n            import sys\n    \n            def test_fail():\n                print(\"hello-stdout\")\n                sys.stderr.write(\"hello-stderr\\\\n\")\n                logging.info('info msg')\n                logging.warning('warning msg')\n                raise ValueError(42)\n        \"\"\"\n        )\n    \n>       result, dom = runandparse(testdir, \"-o\", \"junit_logging=%s\" % junit_logging)\n\n/pytest-dev__pytest/testing/test_junitxml.py:388: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9be74fa0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_failure_function2/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_failure_function2\ncollected 1 item\n\ntest_failure_function.py F                                               [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_fail ___________________________________\n\n    def test_fail():\n        print(\"hello-stdout\")\n        sys.stderr.write(\"hello-stderr\\n\")\n        logging.info('info msg')\n        logging.warning('warning msg')\n>       raise ValueError(42)\nE       ValueError: 42\n\ntest_failure_function.py:9: ValueError\n----------------------------- Captured stdout call -----------------------------\nhello-stdout\n----------------------------- Captured stderr call -----------------------------\nhello-stderr\n------------------------------ Captured log call -------------------------------\nWARNING  root:test_failure_function.py:8 warning msg\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_failure_function2/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_failure_function2/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_failure_function2/junit.xml' mode='w' encoding='utf-8'>\n------------------------------ Captured log call -------------------------------\nWARNING  root:test_failure_function.py:8 warning msg\n___________________ TestPython.test_failure_verbose_message ____________________\n\nself = <test_junitxml.TestPython object at 0xffff9be6e130>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_failure_verbose_message0')>\n\n    def test_failure_verbose_message(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import sys\n            def test_fail():\n                assert 0, \"An error\"\n        \"\"\"\n        )\n    \n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:425: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bfd9550>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_failure_verbose_message0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_failure_verbose_message0\ncollected 1 item\n\ntest_failure_verbose_message.py F                                        [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_fail ___________________________________\n\n    def test_fail():\n>       assert 0, \"An error\"\nE       AssertionError: An error\nE       assert 0\n\ntest_failure_verbose_message.py:3: AssertionError\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_failure_verbose_message0/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_failure_verbose_message0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_failure_verbose_message0/junit.xml' mode='w' encoding='utf-8'>\n________________________ TestPython.test_failure_escape ________________________\n\nself = <test_junitxml.TestPython object at 0xffff9bcd08e0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_failure_escape0')>\n\n    def test_failure_escape(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.parametrize('arg1', \"<&'\", ids=\"<&'\")\n            def test_func(arg1):\n                print(arg1)\n                assert 0\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:441: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bf106a0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_failure_escape0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_failure_escape0\ncollected 3 items\n\ntest_failure_escape.py FFF                                               [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_func[<] _________________________________\n\narg1 = '<'\n\n    @pytest.mark.parametrize('arg1', \"<&'\", ids=\"<&'\")\n    def test_func(arg1):\n        print(arg1)\n>       assert 0\nE       assert 0\n\ntest_failure_escape.py:5: AssertionError\n----------------------------- Captured stdout call -----------------------------\n<\n_________________________________ test_func[&] _________________________________\n\narg1 = '&'\n\n    @pytest.mark.parametrize('arg1', \"<&'\", ids=\"<&'\")\n    def test_func(arg1):\n        print(arg1)\n>       assert 0\nE       assert 0\n\ntest_failure_escape.py:5: AssertionError\n----------------------------- Captured stdout call -----------------------------\n&\n_________________________________ test_func['] _________________________________\n\narg1 = \"'\"\n\n    @pytest.mark.parametrize('arg1', \"<&'\", ids=\"<&'\")\n    def test_func(arg1):\n        print(arg1)\n>       assert 0\nE       assert 0\n\ntest_failure_escape.py:5: AssertionError\n----------------------------- Captured stdout call -----------------------------\n'\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_failure_escape0/junit.xml -\n=========================== 3 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_failure_escape0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_failure_escape0/junit.xml' mode='w' encoding='utf-8'>\n_______________________ TestPython.test_junit_prefixing ________________________\n\nself = <test_junitxml.TestPython object at 0xffff9c154550>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_junit_prefixing0')>\n\n    def test_junit_prefixing(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            def test_func():\n                assert 0\n            class TestHello(object):\n                def test_hello(self):\n                    pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir, \"--junitprefix=xyz\")\n\n/pytest-dev__pytest/testing/test_junitxml.py:466: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c153a00>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_junit_prefixing0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_junit_prefixing0\ncollected 2 items\n\ntest_junit_prefixing.py F.                                               [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_func ___________________________________\n\n    def test_func():\n>       assert 0\nE       assert 0\n\ntest_junit_prefixing.py:2: AssertionError\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_junit_prefixing0/junit.xml -\n====================== 1 failed, 1 passed in 0.01 seconds ======================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_junit_prefixing0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_junit_prefixing0/junit.xml' mode='w' encoding='utf-8'>\n______________________ TestPython.test_xfailure_function _______________________\n\nself = <test_junitxml.TestPython object at 0xffff9c1132b0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_xfailure_function0')>\n\n    def test_xfailure_function(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            def test_xfail():\n                pytest.xfail(\"42\")\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:485: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c100850>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_xfailure_function0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_xfailure_function0\ncollected 1 item\n\ntest_xfailure_function.py x                                              [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_xfailure_function0/junit.xml -\n========================== 1 xfailed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_xfailure_function0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_xfailure_function0/junit.xml' mode='w' encoding='utf-8'>\n_______________________ TestPython.test_xfailure_marker ________________________\n\nself = <test_junitxml.TestPython object at 0xffff9bf47580>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_xfailure_marker0')>\n\n    def test_xfailure_marker(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail(reason=\"42\")\n            def test_xfail():\n                assert False\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:504: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bc53e80>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_xfailure_marker0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_xfailure_marker0\ncollected 1 item\n\ntest_xfailure_marker.py x                                                [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_xfailure_marker0/junit.xml -\n========================== 1 xfailed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_xfailure_marker0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_xfailure_marker0/junit.xml' mode='w' encoding='utf-8'>\n__________________ TestPython.test_xfail_captures_output_once __________________\n\nself = <test_junitxml.TestPython object at 0xffff9bf77730>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_xfail_captures_output_once0')>\n\n    def test_xfail_captures_output_once(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import sys\n            import pytest\n    \n            @pytest.mark.xfail()\n            def test_fail():\n                sys.stdout.write('XFAIL This is stdout')\n                sys.stderr.write('XFAIL This is stderr')\n                assert 0\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:526: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bd14ee0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_xfail_captures_output_once0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_xfail_captures_output_once0\ncollected 1 item\n\ntest_xfail_captures_output_once.py x                                     [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_xfail_captures_output_once0/junit.xml -\n========================== 1 xfailed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_xfail_captures_output_once0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_xfail_captures_output_once0/junit.xml' mode='w' encoding='utf-8'>\n________________________ TestPython.test_xfailure_xpass ________________________\n\nself = <test_junitxml.TestPython object at 0xffff9bb17820>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_xfailure_xpass0')>\n\n    def test_xfailure_xpass(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail\n            def test_xpass():\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:541: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bb17580>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_xfailure_xpass0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_xfailure_xpass0\ncollected 1 item\n\ntest_xfailure_xpass.py X                                                 [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_xfailure_xpass0/junit.xml -\n========================== 1 xpassed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_xfailure_xpass0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_xfailure_xpass0/junit.xml' mode='w' encoding='utf-8'>\n____________________ TestPython.test_xfailure_xpass_strict _____________________\n\nself = <test_junitxml.TestPython object at 0xffff9bfa2c40>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_xfailure_xpass_strict0')>\n\n    def test_xfailure_xpass_strict(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail(strict=True, reason=\"This needs to fail!\")\n            def test_xpass():\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:557: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9be2a760>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_xfailure_xpass_strict0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_xfailure_xpass_strict0\ncollected 1 item\n\ntest_xfailure_xpass_strict.py F                                          [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_xpass __________________________________\n[XPASS(strict)] This needs to fail!\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_xfailure_xpass_strict0/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_xfailure_xpass_strict0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_xfailure_xpass_strict0/junit.xml' mode='w' encoding='utf-8'>\n________________________ TestPython.test_collect_error _________________________\n\nself = <test_junitxml.TestPython object at 0xffff9bc25fd0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_collect_error0')>\n\n    def test_collect_error(self, testdir):\n        testdir.makepyfile(\"syntax error\")\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:568: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c113220>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_collect_error0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_collect_error0\ncollected 0 items / 1 errors\n\n==================================== ERRORS ====================================\n____________________ ERROR collecting test_collect_error.py ____________________\n/pytest-dev__pytest/src/_pytest/python.py:494: in _importtestmodule\n    mod = self.fspath.pyimport(ensuresyspath=importmode)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/py/_path/local.py:704: in pyimport\n    __import__(modname)\n<frozen importlib._bootstrap>:1007: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:986: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:680: in _load_unlocked\n    ???\n/pytest-dev__pytest/src/_pytest/assertion/rewrite.py:144: in exec_module\n    source_stat, co = _rewrite_test(fn, self.config)\n/pytest-dev__pytest/src/_pytest/assertion/rewrite.py:293: in _rewrite_test\n    tree = ast.parse(source, filename=fn)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/ast.py:50: in parse\n    return compile(source, filename, mode, flags,\nE     File \"/tmp/pytest-of-root/pytest-0/test_collect_error0/test_collect_error.py\", line 1\nE       syntax error\nE              ^\nE   SyntaxError: invalid syntax\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_collect_error0/junit.xml -\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!\n=========================== 1 error in 0.09 seconds ============================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_collect_error0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_collect_error0/junit.xml' mode='w' encoding='utf-8'>\n___________________________ TestPython.test_unicode ____________________________\n\nself = <test_junitxml.TestPython object at 0xffff9ba6d190>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_unicode0')>\n\n    def test_unicode(self, testdir):\n        value = \"hx\\xc4\\x85\\xc4\\x87\\n\"\n        testdir.makepyfile(\n            \"\"\"\\\n            # coding: latin1\n            def test_hello():\n                print(%r)\n                assert 0\n            \"\"\"\n            % value\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:588: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9ba69520>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_unicode0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_unicode0\ncollected 1 item\n\ntest_unicode.py F                                                        [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_hello __________________________________\n\n    def test_hello():\n        print('hx\u00c3\u0084\\x85\u00c3\u0084\\x87\\n')\n>       assert 0\nE       assert 0\n\ntest_unicode.py:4: AssertionError\n----------------------------- Captured stdout call -----------------------------\nhx\u00c3\u0084\u0085\u00c3\u0084\u0087\n\n--- generated xml file: /tmp/pytest-of-root/pytest-0/test_unicode0/junit.xml ---\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_unicode0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_unicode0/junit.xml' mode='w' encoding='utf-8'>\n______________________ TestPython.test_assertion_binchars ______________________\n\nself = <test_junitxml.TestPython object at 0xffff9b842670>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_assertion_binchars0')>\n\n    def test_assertion_binchars(self, testdir):\n        \"\"\"this test did fail when the escaping wasn't strict\"\"\"\n        testdir.makepyfile(\n            \"\"\"\n    \n            M1 = '\\x01\\x02\\x03\\x04'\n            M2 = '\\x01\\x02\\x03\\x05'\n    \n            def test_str_compare():\n                assert M1 == M2\n            \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:606: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9ba1aca0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_assertion_binchars0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_assertion_binchars0\ncollected 1 item\n\ntest_assertion_binchars.py F                                             [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_str_compare _______________________________\n\n    def test_str_compare():\n>       assert M1 == M2\nE       AssertionError: assert '\\x01\\x02\\x03\\x04' == '\\x01\\x02\\x03\\x05'\nE         - \u0001\u0002\u0003\u0004\nE         ?    ^\nE         + \u0001\u0002\u0003\u0005\nE         ?    ^\n\ntest_assertion_binchars.py:5: AssertionError\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_assertion_binchars0/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_assertion_binchars0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_assertion_binchars0/junit.xml' mode='w' encoding='utf-8'>\n_____________________ TestPython.test_pass_captures_stdout _____________________\n\nself = <test_junitxml.TestPython object at 0xffff9bae6e80>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_pass_captures_stdout0')>\n\n    def test_pass_captures_stdout(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            def test_pass():\n                print('hello-stdout')\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:616: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bac2550>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_pass_captures_stdout0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_pass_captures_stdout0\ncollected 1 item\n\ntest_pass_captures_stdout.py .                                           [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_pass_captures_stdout0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_pass_captures_stdout0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_pass_captures_stdout0/junit.xml' mode='w' encoding='utf-8'>\n_____________________ TestPython.test_pass_captures_stderr _____________________\n\nself = <test_junitxml.TestPython object at 0xffff9baaae20>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_pass_captures_stderr0')>\n\n    def test_pass_captures_stderr(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import sys\n            def test_pass():\n                sys.stderr.write('hello-stderr')\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:630: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9baaa8e0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_pass_captures_stderr0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_pass_captures_stderr0\ncollected 1 item\n\ntest_pass_captures_stderr.py .                                           [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_pass_captures_stderr0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_pass_captures_stderr0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_pass_captures_stderr0/junit.xml' mode='w' encoding='utf-8'>\n_________________ TestPython.test_setup_error_captures_stdout __________________\n\nself = <test_junitxml.TestPython object at 0xffff9b9f1d30>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_setup_error_captures_stdout0')>\n\n    def test_setup_error_captures_stdout(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            @pytest.fixture\n            def arg(request):\n                print('hello-stdout')\n                raise ValueError()\n            def test_function(arg):\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:649: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b9afd90>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_setup_error_captures_stdout0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_setup_error_captures_stdout0\ncollected 1 item\n\ntest_setup_error_captures_stdout.py E                                    [100%]\n\n==================================== ERRORS ====================================\n_______________________ ERROR at setup of test_function ________________________\n\nrequest = <SubRequest 'arg' for <Function test_function>>\n\n    @pytest.fixture\n    def arg(request):\n        print('hello-stdout')\n>       raise ValueError()\nE       ValueError\n\ntest_setup_error_captures_stdout.py:6: ValueError\n---------------------------- Captured stdout setup -----------------------------\nhello-stdout\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_setup_error_captures_stdout0/junit.xml -\n=========================== 1 error in 0.01 seconds ============================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_setup_error_captures_stdout0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_setup_error_captures_stdout0/junit.xml' mode='w' encoding='utf-8'>\n_________________ TestPython.test_setup_error_captures_stderr __________________\n\nself = <test_junitxml.TestPython object at 0xffff9b8956d0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_setup_error_captures_stderr0')>\n\n    def test_setup_error_captures_stderr(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import sys\n            import pytest\n    \n            @pytest.fixture\n            def arg(request):\n                sys.stderr.write('hello-stderr')\n                raise ValueError()\n            def test_function(arg):\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:669: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b838040>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_setup_error_captures_stderr0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_setup_error_captures_stderr0\ncollected 1 item\n\ntest_setup_error_captures_stderr.py E                                    [100%]\n\n==================================== ERRORS ====================================\n_______________________ ERROR at setup of test_function ________________________\n\nrequest = <SubRequest 'arg' for <Function test_function>>\n\n    @pytest.fixture\n    def arg(request):\n        sys.stderr.write('hello-stderr')\n>       raise ValueError()\nE       ValueError\n\ntest_setup_error_captures_stderr.py:7: ValueError\n---------------------------- Captured stderr setup -----------------------------\nhello-stderr\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_setup_error_captures_stderr0/junit.xml -\n=========================== 1 error in 0.01 seconds ============================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_setup_error_captures_stderr0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_setup_error_captures_stderr0/junit.xml' mode='w' encoding='utf-8'>\n_____________________ TestPython.test_avoid_double_stdout ______________________\n\nself = <test_junitxml.TestPython object at 0xffff9be9e730>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_avoid_double_stdout0')>\n\n    def test_avoid_double_stdout(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import sys\n            import pytest\n    \n            @pytest.fixture\n            def arg(request):\n                yield\n                sys.stdout.write('hello-stdout teardown')\n                raise ValueError()\n            def test_function(arg):\n                sys.stdout.write('hello-stdout call')\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:690: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b9d6c10>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_avoid_double_stdout0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_avoid_double_stdout0\ncollected 1 item\n\ntest_avoid_double_stdout.py .E                                           [100%]\n\n==================================== ERRORS ====================================\n______________________ ERROR at teardown of test_function ______________________\n\nrequest = <SubRequest 'arg' for <Function test_function>>\n\n    @pytest.fixture\n    def arg(request):\n        yield\n        sys.stdout.write('hello-stdout teardown')\n>       raise ValueError()\nE       ValueError\n\ntest_avoid_double_stdout.py:8: ValueError\n----------------------------- Captured stdout call -----------------------------\nhello-stdout call\n--------------------------- Captured stdout teardown ---------------------------\nhello-stdout teardown\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_avoid_double_stdout0/junit.xml -\n====================== 1 passed, 1 error in 0.01 seconds =======================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_avoid_double_stdout0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_avoid_double_stdout0/junit.xml' mode='w' encoding='utf-8'>\n______________________ TestNonPython.test_summing_simple _______________________\n\nself = <test_junitxml.TestNonPython object at 0xffff9b5fa160>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_summing_simple1')>\n\n    def test_summing_simple(self, testdir):\n        testdir.makeconftest(\n            \"\"\"\n            import pytest\n            def pytest_collect_file(path, parent):\n                if path.ext == \".xyz\":\n                    return MyItem(path, parent)\n            class MyItem(pytest.Item):\n                def __init__(self, path, parent):\n                    super(MyItem, self).__init__(path.basename, parent)\n                    self.fspath = path\n                def runtest(self):\n                    raise ValueError(42)\n                def repr_failure(self, excinfo):\n                    return \"custom item runtest failed\"\n        \"\"\"\n        )\n        testdir.tmpdir.join(\"myfile.xyz\").write(\"hello\")\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:751: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b5d9340>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_summing_simple1/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_summing_simple1\ncollected 1 item\n\n. F                                                                      [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test session _________________________________\ncustom item runtest failed\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_summing_simple1/junit.xml -\n=========================== 1 failed in 0.00 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_summing_simple1/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_summing_simple1/junit.xml' mode='w' encoding='utf-8'>\n________________________________ test_nullbyte _________________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_nullbyte0')>\n\n    def test_nullbyte(testdir):\n        # A null byte can not occur in XML (see section 2.2 of the spec)\n        testdir.makepyfile(\n            \"\"\"\n            import sys\n            def test_print_nullbyte():\n                sys.stdout.write('Here the null -->' + chr(0) + '<--')\n                sys.stdout.write('In repr form -->' + repr(chr(0)) + '<--')\n                assert False\n        \"\"\"\n        )\n        xmlf = testdir.tmpdir.join(\"junit.xml\")\n        testdir.runpytest(\"--junitxml=%s\" % xmlf)\n        text = xmlf.read()\n        assert \"\\x00\" not in text\n>       assert \"#x00\" in text\nE       assert '#x00' in '<?xml version=\"1.0\" encoding=\"utf-8\"?>'\n\n/pytest-dev__pytest/testing/test_junitxml.py:777: AssertionError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_nullbyte0\ncollected 1 item\n\ntest_nullbyte.py F                                                       [100%]\n\n=================================== FAILURES ===================================\n_____________________________ test_print_nullbyte ______________________________\n\n    def test_print_nullbyte():\n        sys.stdout.write('Here the null -->' + chr(0) + '<--')\n        sys.stdout.write('In repr form -->' + repr(chr(0)) + '<--')\n>       assert False\nE       assert False\n\ntest_nullbyte.py:5: AssertionError\n----------------------------- Captured stdout call -----------------------------\nHere the null -->\u0000<--In repr form -->'\\x00'<--\n-- generated xml file: /tmp/pytest-of-root/pytest-0/test_nullbyte0/junit.xml ---\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_nullbyte0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_nullbyte0/junit.xml' mode='w' encoding='utf-8'>\n____________________________ test_nullbyte_replace _____________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_nullbyte_replace0')>\n\n    def test_nullbyte_replace(testdir):\n        # Check if the null byte gets replaced\n        testdir.makepyfile(\n            \"\"\"\n            import sys\n            def test_print_nullbyte():\n                sys.stdout.write('Here the null -->' + chr(0) + '<--')\n                sys.stdout.write('In repr form -->' + repr(chr(0)) + '<--')\n                assert False\n        \"\"\"\n        )\n        xmlf = testdir.tmpdir.join(\"junit.xml\")\n        testdir.runpytest(\"--junitxml=%s\" % xmlf)\n        text = xmlf.read()\n>       assert \"#x0\" in text\nE       assert '#x0' in '<?xml version=\"1.0\" encoding=\"utf-8\"?>'\n\n/pytest-dev__pytest/testing/test_junitxml.py:794: AssertionError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_nullbyte_replace0\ncollected 1 item\n\ntest_nullbyte_replace.py F                                               [100%]\n\n=================================== FAILURES ===================================\n_____________________________ test_print_nullbyte ______________________________\n\n    def test_print_nullbyte():\n        sys.stdout.write('Here the null -->' + chr(0) + '<--')\n        sys.stdout.write('In repr form -->' + repr(chr(0)) + '<--')\n>       assert False\nE       assert False\n\ntest_nullbyte_replace.py:5: AssertionError\n----------------------------- Captured stdout call -----------------------------\nHere the null -->\u0000<--In repr form -->'\\x00'<--\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_nullbyte_replace0/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_nullbyte_replace0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_nullbyte_replace0/junit.xml' mode='w' encoding='utf-8'>\n_____________________ test_escaped_parametrized_names_xml ______________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_escaped_parametrized_names_xml0')>\n\n    def test_escaped_parametrized_names_xml(testdir):\n        testdir.makepyfile(\n            \"\"\"\\\n            import pytest\n            @pytest.mark.parametrize('char', [\"\\\\x00\"])\n            def test_func(char):\n                assert char\n            \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:893: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b9505e0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_escaped_parametrized_names_xml0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_escaped_parametrized_names_xml0\ncollected 1 item\n\ntest_escaped_parametrized_names_xml.py .                                 [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_escaped_parametrized_names_xml0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_escaped_parametrized_names_xml0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_escaped_parametrized_names_xml0/junit.xml' mode='w' encoding='utf-8'>\n__________________ test_double_colon_split_function_issue469 ___________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_double_colon_split_function_issue4690')>\n\n    def test_double_colon_split_function_issue469(testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.parametrize('param', [\"double::colon\"])\n            def test_func(param):\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b907ee0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_double_colon_split_function_issue4690/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_double_colon_split_function_issue4690\ncollected 1 item\n\ntest_double_colon_split_function_issue469.py .                           [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_double_colon_split_function_issue4690/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_double_colon_split_function_issue4690/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_double_colon_split_function_issue4690/junit.xml' mode='w' encoding='utf-8'>\n___________________ test_double_colon_split_method_issue469 ____________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_double_colon_split_method_issue4690')>\n\n    def test_double_colon_split_method_issue469(testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            class TestClass(object):\n                @pytest.mark.parametrize('param', [\"double::colon\"])\n                def test_func(self, param):\n                    pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:925: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b9696d0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_double_colon_split_method_issue4690/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_double_colon_split_method_issue4690\ncollected 1 item\n\ntest_double_colon_split_method_issue469.py .                             [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_double_colon_split_method_issue4690/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_double_colon_split_method_issue4690/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_double_colon_split_method_issue4690/junit.xml' mode='w' encoding='utf-8'>\n_____________________________ test_record_property _____________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_record_property0')>\n\n    def test_record_property(testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            @pytest.fixture\n            def other(record_property):\n                record_property(\"bar\", 1)\n            def test_record(record_property, other):\n                record_property(\"foo\", \"<1\");\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir, \"-rwv\")\n\n/pytest-dev__pytest/testing/test_junitxml.py:973: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bb77730>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_record_property0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_record_property0\ncollected 1 item\n\ntest_record_property.py .                                                [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_record_property0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_record_property0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_record_property0/junit.xml' mode='w' encoding='utf-8'>\n________________________ test_record_property_same_name ________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_record_property_same_name0')>\n\n    def test_record_property_same_name(testdir):\n        testdir.makepyfile(\n            \"\"\"\n            def test_record_with_same_name(record_property):\n                record_property(\"foo\", \"bar\")\n                record_property(\"foo\", \"baz\")\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir, \"-rw\")\n\n/pytest-dev__pytest/testing/test_junitxml.py:990: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b969f10>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_record_property_same_name0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_record_property_same_name0\ncollected 1 item\n\ntest_record_property_same_name.py .                                      [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_record_property_same_name0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_record_property_same_name0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_record_property_same_name0/junit.xml' mode='w' encoding='utf-8'>\n____________________________ test_record_attribute _____________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_record_attribute0')>\n\n    @pytest.mark.filterwarnings(\"default\")\n    def test_record_attribute(testdir):\n        testdir.makeini(\n            \"\"\"\n            [pytest]\n            junit_family = xunit1\n        \"\"\"\n        )\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            @pytest.fixture\n            def other(record_xml_attribute):\n                record_xml_attribute(\"bar\", 1)\n            def test_record(record_xml_attribute, other):\n                record_xml_attribute(\"foo\", \"<1\");\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir, \"-rw\")\n\n/pytest-dev__pytest/testing/test_junitxml.py:1032: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b2d1910>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_record_attribute0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_record_attribute0, inifile: tox.ini\ncollected 1 item\n\ntest_record_attribute.py .                                               [100%]\n\n=============================== warnings summary ===============================\ntest_record_attribute.py::test_record\n  test_record_attribute.py:6: PytestExperimentalApiWarning: record_xml_attribute is an experimental feature\n    def test_record(record_xml_attribute, other):\n\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_record_attribute0/junit.xml -\n===================== 1 passed, 1 warnings in 0.01 seconds =====================\n______________ test_record_fixtures_xunit2[record_xml_attribute] _______________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit20')>\nfixture_name = 'record_xml_attribute'\n\n    @pytest.mark.filterwarnings(\"default\")\n    @pytest.mark.parametrize(\"fixture_name\", [\"record_xml_attribute\", \"record_property\"])\n    def test_record_fixtures_xunit2(testdir, fixture_name):\n        \"\"\"Ensure record_xml_attribute and record_property drop values when outside of legacy family\n        \"\"\"\n        testdir.makeini(\n            \"\"\"\n            [pytest]\n            junit_family = xunit2\n        \"\"\"\n        )\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            @pytest.fixture\n            def other({fixture_name}):\n                {fixture_name}(\"bar\", 1)\n            def test_record({fixture_name}, other):\n                {fixture_name}(\"foo\", \"<1\");\n        \"\"\".format(\n                fixture_name=fixture_name\n            )\n        )\n    \n>       result, dom = runandparse(testdir, \"-rw\")\n\n/pytest-dev__pytest/testing/test_junitxml.py:1067: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b4ef6a0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit20/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit20, inifile: tox.ini\ncollected 1 item\n\ntest_record_fixtures_xunit2.py .                                         [100%]\n\n=============================== warnings summary ===============================\ntest_record_fixtures_xunit2.py::test_record\n  test_record_fixtures_xunit2.py:6: PytestExperimentalApiWarning: record_xml_attribute is an experimental feature\n    def test_record(record_xml_attribute, other):\n\ntest_record_fixtures_xunit2.py::test_record\n  test_record_fixtures_xunit2.py:6: PytestWarning: record_xml_attribute is incompatible with junit_family 'xunit2' (use 'legacy' or 'xunit1')\n    def test_record(record_xml_attribute, other):\n\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit20/junit.xml -\n===================== 1 passed, 2 warnings in 0.01 seconds =====================\n_________________ test_record_fixtures_xunit2[record_property] _________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit21')>\nfixture_name = 'record_property'\n\n    @pytest.mark.filterwarnings(\"default\")\n    @pytest.mark.parametrize(\"fixture_name\", [\"record_xml_attribute\", \"record_property\"])\n    def test_record_fixtures_xunit2(testdir, fixture_name):\n        \"\"\"Ensure record_xml_attribute and record_property drop values when outside of legacy family\n        \"\"\"\n        testdir.makeini(\n            \"\"\"\n            [pytest]\n            junit_family = xunit2\n        \"\"\"\n        )\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            @pytest.fixture\n            def other({fixture_name}):\n                {fixture_name}(\"bar\", 1)\n            def test_record({fixture_name}, other):\n                {fixture_name}(\"foo\", \"<1\");\n        \"\"\".format(\n                fixture_name=fixture_name\n            )\n        )\n    \n>       result, dom = runandparse(testdir, \"-rw\")\n\n/pytest-dev__pytest/testing/test_junitxml.py:1067: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b4c4280>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit21/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit21, inifile: tox.ini\ncollected 1 item\n\ntest_record_fixtures_xunit2.py .                                         [100%]\n\n=============================== warnings summary ===============================\ntest_record_fixtures_xunit2.py::test_record\n  test_record_fixtures_xunit2.py:6: PytestWarning: record_property is incompatible with junit_family 'xunit2' (use 'legacy' or 'xunit1')\n    def test_record(record_xml_attribute, other):\n\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit21/junit.xml -\n===================== 1 passed, 1 warnings in 0.01 seconds =====================\n___________________________ test_root_testsuites_tag ___________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_root_testsuites_tag0')>\n\n    def test_root_testsuites_tag(testdir):\n        testdir.makepyfile(\n            \"\"\"\n            def test_x():\n                pass\n        \"\"\"\n        )\n>       _, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:1114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9af468e0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_root_testsuites_tag0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_root_testsuites_tag0\ncollected 1 item\n\ntest_root_testsuites_tag.py .                                            [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_root_testsuites_tag0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_root_testsuites_tag0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_root_testsuites_tag0/junit.xml' mode='w' encoding='utf-8'>\n_______________________________ test_runs_twice ________________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_runs_twice0')>\n\n    def test_runs_twice(testdir):\n        f = testdir.makepyfile(\n            \"\"\"\n            def test_pass():\n                pass\n        \"\"\"\n        )\n    \n>       result, dom = runandparse(testdir, f, f)\n\n/pytest-dev__pytest/testing/test_junitxml.py:1129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b183f70>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_runs_twice0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_runs_twice0\ncollected 2 items\n\ntest_runs_twice.py ..\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_runs_twice0/junit.xml --\n=========================== 2 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_runs_twice0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_runs_twice0/junit.xml' mode='w' encoding='utf-8'>\n_________________________ test_fancy_items_regression __________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_fancy_items_regression0')>\n\n    def test_fancy_items_regression(testdir):\n        # issue 1259\n        testdir.makeconftest(\n            \"\"\"\n            import pytest\n            class FunItem(pytest.Item):\n                def runtest(self):\n                    pass\n            class NoFunItem(pytest.Item):\n                def runtest(self):\n                    pass\n    \n            class FunCollector(pytest.File):\n                def collect(self):\n                    return [\n                        FunItem('a', self),\n                        NoFunItem('a', self),\n                        NoFunItem('b', self),\n                    ]\n    \n            def pytest_collect_file(path, parent):\n                if path.check(ext='.py'):\n                    return FunCollector(path, parent)\n        \"\"\"\n        )\n    \n        testdir.makepyfile(\n            \"\"\"\n            def test_pass():\n                pass\n        \"\"\"\n        )\n    \n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:1184: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b3b2eb0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_fancy_items_regression0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_fancy_items_regression0\ncollected 7 items\n\nconftest.py ...                                                          [ 28%]\ntest_fancy_items_regression.py ....\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_fancy_items_regression0/junit.xml -\n=========================== 7 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_fancy_items_regression0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_fancy_items_regression0/junit.xml' mode='w' encoding='utf-8'>\n____________________________ test_global_properties ____________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_global_properties0')>\n\n    def test_global_properties(testdir):\n        path = testdir.tmpdir.join(\"test_global_properties.xml\")\n        log = LogXML(str(path), None)\n    \n        class Report(BaseReport):\n            sections = []\n            nodeid = \"test_node_id\"\n    \n        log.pytest_sessionstart()\n        log.add_global_property(\"foo\", 1)\n        log.add_global_property(\"bar\", 2)\n        log.pytest_sessionfinish()\n    \n>       dom = minidom.parse(str(path))\n\n/pytest-dev__pytest/testing/test_junitxml.py:1216: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b584040>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_global_properties0/test_global_properties.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_global_properties0/test_global_properties.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/pytest-dev__pytest/testing/test_junitxml.py\", line 1214, in test_global_properties\n    log.pytest_sessionfinish()\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_global_properties0/test_global_properties.xml' mode='w' encoding='utf-8'>\n______________________________ test_url_property _______________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_url_property0')>\n\n    def test_url_property(testdir):\n        test_url = \"http://www.github.com/pytest-dev\"\n        path = testdir.tmpdir.join(\"test_url_property.xml\")\n        log = LogXML(str(path), None)\n    \n        class Report(BaseReport):\n            longrepr = \"FooBarBaz\"\n            sections = []\n            nodeid = \"something\"\n            location = \"tests/filename.py\", 42, \"TestClass.method\"\n            url = test_url\n    \n        test_report = Report()\n    \n        log.pytest_sessionstart()\n        node_reporter = log._opentestcase(test_report)\n        node_reporter.append_failure(test_report)\n        log.pytest_sessionfinish()\n    \n>       test_case = minidom.parse(str(path)).getElementsByTagName(\"testcase\")[0]\n\n/pytest-dev__pytest/testing/test_junitxml.py:1256: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b301c70>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_url_property0/test_url_property.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_url_property0/test_url_property.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/pytest-dev__pytest/testing/test_junitxml.py\", line 1254, in test_url_property\n    log.pytest_sessionfinish()\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_url_property0/test_url_property.xml' mode='w' encoding='utf-8'>\n________________________ test_record_testsuite_property ________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_record_testsuite_property0')>\n\n    def test_record_testsuite_property(testdir):\n        testdir.makepyfile(\n            \"\"\"\n            def test_func1(record_testsuite_property):\n                record_testsuite_property(\"stats\", \"all good\")\n    \n            def test_func2(record_testsuite_property):\n                record_testsuite_property(\"stats\", 10)\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:1273: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b3059a0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_record_testsuite_property0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_record_testsuite_property0\ncollected 2 items\n\ntest_record_testsuite_property.py ..                                     [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_record_testsuite_property0/junit.xml -\n=========================== 2 passed in 0.03 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_record_testsuite_property0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_record_testsuite_property0/junit.xml' mode='w' encoding='utf-8'>\n________________________ test_set_suite_name[my_suite] _________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_set_suite_name0')>\nsuite_name = 'my_suite'\n\n    @pytest.mark.parametrize(\"suite_name\", [\"my_suite\", \"\"])\n    def test_set_suite_name(testdir, suite_name):\n        if suite_name:\n            testdir.makeini(\n                \"\"\"\n                [pytest]\n                junit_suite_name={}\n            \"\"\".format(\n                    suite_name\n                )\n            )\n            expected = suite_name\n        else:\n            expected = \"pytest\"\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            def test_func():\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:1332: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b3ac0d0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_set_suite_name0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_set_suite_name0, inifile: tox.ini\ncollected 1 item\n\ntest_set_suite_name.py .                                                 [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_set_suite_name0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_set_suite_name0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_set_suite_name0/junit.xml' mode='w' encoding='utf-8'>\n____________________________ test_set_suite_name[] _____________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_set_suite_name1')>\nsuite_name = ''\n\n    @pytest.mark.parametrize(\"suite_name\", [\"my_suite\", \"\"])\n    def test_set_suite_name(testdir, suite_name):\n        if suite_name:\n            testdir.makeini(\n                \"\"\"\n                [pytest]\n                junit_suite_name={}\n            \"\"\".format(\n                    suite_name\n                )\n            )\n            expected = suite_name\n        else:\n            expected = \"pytest\"\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            def test_func():\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:1332: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9ae7c670>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_set_suite_name1/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_set_suite_name1\ncollected 1 item\n\ntest_set_suite_name.py .                                                 [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_set_suite_name1/junit.xml -\n=========================== 1 passed in 0.03 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_set_suite_name1/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_set_suite_name1/junit.xml' mode='w' encoding='utf-8'>\n______________________ test_escaped_skipreason_issue3533 _______________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_escaped_skipreason_issue35330')>\n\n    def test_escaped_skipreason_issue3533(testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skip(reason='1 <> 2')\n            def test_skip():\n                pass\n        \"\"\"\n        )\n>       _, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:1347: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9abed880>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_escaped_skipreason_issue35330/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_escaped_skipreason_issue35330\ncollected 1 item\n\ntest_escaped_skipreason_issue3533.py s                                   [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_escaped_skipreason_issue35330/junit.xml -\n========================== 1 skipped in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_escaped_skipreason_issue35330/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_escaped_skipreason_issue35330/junit.xml' mode='w' encoding='utf-8'>\n_________ test_logging_passing_tests_disabled_does_not_log_test_output _________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_logging_passing_tests_disabled_does_not_log_test_output0')>\n\n    def test_logging_passing_tests_disabled_does_not_log_test_output(testdir):\n        testdir.makeini(\n            \"\"\"\n            [pytest]\n            junit_log_passing_tests=False\n            junit_logging=system-out\n        \"\"\"\n        )\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            import logging\n            import sys\n    \n            def test_func():\n                sys.stdout.write('This is stdout')\n                sys.stderr.write('This is stderr')\n                logging.warning('hello')\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:1374: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9abd7670>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_logging_passing_tests_disabled_does_not_log_test_output0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_logging_passing_tests_disabled_does_not_log_test_output0, inifile: tox.ini\ncollected 1 item\n\ntest_logging_passing_tests_disabled_does_not_log_test_output.py .        [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_logging_passing_tests_disabled_does_not_log_test_output0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_logging_passing_tests_disabled_does_not_log_test_output0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_logging_passing_tests_disabled_does_not_log_test_output0/junit.xml' mode='w' encoding='utf-8'>\n------------------------------ Captured log call -------------------------------\nWARNING  root:test_logging_passing_tests_disabled_does_not_log_test_output.py:8 hello\n=============================== warnings summary ===============================\ntesting/test_junitxml.py::test_record_attribute\n  /root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py:187: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_record_attribute0/junit.xml' mode='w' encoding='utf-8'>\n    res = hook_impl.function(*args)\n\ntesting/test_junitxml.py::test_record_fixtures_xunit2[record_xml_attribute]\n  /root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py:187: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit20/junit.xml' mode='w' encoding='utf-8'>\n    res = hook_impl.function(*args)\n\ntesting/test_junitxml.py::test_record_fixtures_xunit2[record_property]\n  /root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py:187: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit21/junit.xml' mode='w' encoding='utf-8'>\n    res = hook_impl.function(*args)\n\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\n---------- generated xml file: /pytest-dev__pytest/testing/report.xml ----------\n=========================== short test summary info ============================\nSKIPPED [1] /pytest-dev__pytest/testing/test_junitxml.py:1088: could not import 'xdist': No module named 'xdist'\nXFAIL test_junitxml.py::test_runs_twice_xdist\n  reason: [NOTRUN] hangs\nFAILED test_junitxml.py::TestPython::test_summing_simple - xml.parsers.expat....\nFAILED test_junitxml.py::TestPython::test_summing_simple_with_errors - xml.pa...\nFAILED test_junitxml.py::TestPython::test_timing_function - xml.parsers.expat...\nFAILED test_junitxml.py::TestPython::test_junit_duration_report[call] - xml.p...\nFAILED test_junitxml.py::TestPython::test_junit_duration_report[total] - xml....\nFAILED test_junitxml.py::TestPython::test_setup_error - xml.parsers.expat.Exp...\nFAILED test_junitxml.py::TestPython::test_teardown_error - xml.parsers.expat....\nFAILED test_junitxml.py::TestPython::test_call_failure_teardown_error - xml.p...\nFAILED test_junitxml.py::TestPython::test_skip_contains_name_reason - xml.par...\nFAILED test_junitxml.py::TestPython::test_mark_skip_contains_name_reason - xm...\nFAILED test_junitxml.py::TestPython::test_mark_skipif_contains_name_reason - ...\nFAILED test_junitxml.py::TestPython::test_mark_skip_doesnt_capture_output - x...\nFAILED test_junitxml.py::TestPython::test_classname_instance - xml.parsers.ex...\nFAILED test_junitxml.py::TestPython::test_classname_nested_dir - xml.parsers....\nFAILED test_junitxml.py::TestPython::test_internal_error - xml.parsers.expat....\nFAILED test_junitxml.py::TestPython::test_failure_function[no] - xml.parsers....\nFAILED test_junitxml.py::TestPython::test_failure_function[system-out] - xml....\nFAILED test_junitxml.py::TestPython::test_failure_function[system-err] - xml....\nFAILED test_junitxml.py::TestPython::test_failure_verbose_message - xml.parse...\nFAILED test_junitxml.py::TestPython::test_failure_escape - xml.parsers.expat....\nFAILED test_junitxml.py::TestPython::test_junit_prefixing - xml.parsers.expat...\nFAILED test_junitxml.py::TestPython::test_xfailure_function - xml.parsers.exp...\nFAILED test_junitxml.py::TestPython::test_xfailure_marker - xml.parsers.expat...\nFAILED test_junitxml.py::TestPython::test_xfail_captures_output_once - xml.pa...\nFAILED test_junitxml.py::TestPython::test_xfailure_xpass - xml.parsers.expat....\nFAILED test_junitxml.py::TestPython::test_xfailure_xpass_strict - xml.parsers...\nFAILED test_junitxml.py::TestPython::test_collect_error - xml.parsers.expat.E...\nFAILED test_junitxml.py::TestPython::test_unicode - xml.parsers.expat.ExpatEr...\nFAILED test_junitxml.py::TestPython::test_assertion_binchars - xml.parsers.ex...\nFAILED test_junitxml.py::TestPython::test_pass_captures_stdout - xml.parsers....\nFAILED test_junitxml.py::TestPython::test_pass_captures_stderr - xml.parsers....\nFAILED test_junitxml.py::TestPython::test_setup_error_captures_stdout - xml.p...\nFAILED test_junitxml.py::TestPython::test_setup_error_captures_stderr - xml.p...\nFAILED test_junitxml.py::TestPython::test_avoid_double_stdout - xml.parsers.e...\nFAILED test_junitxml.py::TestNonPython::test_summing_simple - xml.parsers.exp...\nFAILED test_junitxml.py::test_nullbyte - assert '#x00' in '<?xml version=\"1.0...\nFAILED test_junitxml.py::test_nullbyte_replace - assert '#x0' in '<?xml versi...\nFAILED test_junitxml.py::test_escaped_parametrized_names_xml - xml.parsers.ex...\nFAILED test_junitxml.py::test_double_colon_split_function_issue469 - xml.pars...\nFAILED test_junitxml.py::test_double_colon_split_method_issue469 - xml.parser...\nFAILED test_junitxml.py::test_record_property - xml.parsers.expat.ExpatError:...\nFAILED test_junitxml.py::test_record_property_same_name - xml.parsers.expat.E...\nFAILED test_junitxml.py::test_record_attribute - xml.parsers.expat.ExpatError...\nFAILED test_junitxml.py::test_record_fixtures_xunit2[record_xml_attribute] - ...\nFAILED test_junitxml.py::test_record_fixtures_xunit2[record_property] - xml.p...\nFAILED test_junitxml.py::test_root_testsuites_tag - xml.parsers.expat.ExpatEr...\nFAILED test_junitxml.py::test_runs_twice - xml.parsers.expat.ExpatError: no e...\nFAILED test_junitxml.py::test_fancy_items_regression - xml.parsers.expat.Expa...\nFAILED test_junitxml.py::test_global_properties - xml.parsers.expat.ExpatErro...\nFAILED test_junitxml.py::test_url_property - xml.parsers.expat.ExpatError: no...\nFAILED test_junitxml.py::test_record_testsuite_property - xml.parsers.expat.E...\nFAILED test_junitxml.py::test_set_suite_name[my_suite] - xml.parsers.expat.Ex...\nFAILED test_junitxml.py::test_set_suite_name[] - xml.parsers.expat.ExpatError...\nFAILED test_junitxml.py::test_escaped_skipreason_issue3533 - xml.parsers.expa...\nFAILED test_junitxml.py::test_logging_passing_tests_disabled_does_not_log_test_output\n==== 55 failed, 13 passed, 1 skipped, 1 xfailed, 3 warnings in 4.14 seconds ====\n",
      "response": "Great, it looks like there are many existing test files in the repository that we could potentially use. Let's try running one of them with the `--junitxml` option to generate a report.\n\nFor example, we could run the `testing/test_junitxml.py` file, which seems specifically relevant for testing the JUnit XML functionality.\n\nLet's change to the `testing` directory and run that test file:\n\n<command>\ncd testing\npython -m pytest test_junitxml.py --junitxml=report.xml\n</command>",
      "state": "{\"open_file\": \"/pytest-dev__pytest/src/_pytest/junitxml.py\", \"working_dir\": \"/pytest-dev__pytest\"}\n",
      "thought": "Great, it looks like there are many existing test files in the repository that we could potentially use. Let's try running one of them with the `--junitxml` option to generate a report.\n\nFor example, we could run the `testing/test_junitxml.py` file, which seems specifically relevant for testing the JUnit XML functionality.\n\nLet's change to the `testing` directory and run that test file:"
    },
    {
      "action": "cat report.xml",
      "observation": "<?xml version=\"1.0\" encoding=\"utf-8\"?>",
      "response": "The test run revealed several failures related to parsing the generated XML file. It seems that the XML file is not being generated correctly, causing parsing errors.\n\nTo investigate further, let's inspect the generated XML file after running the test. We can do this by opening the `report.xml` file that was generated in the current directory.\n\n<command>\ncat report.xml\n</command>",
      "state": "{\"open_file\": \"/pytest-dev__pytest/src/_pytest/junitxml.py\", \"working_dir\": \"/pytest-dev__pytest/testing\"}\n",
      "thought": "The test run revealed several failures related to parsing the generated XML file. It seems that the XML file is not being generated correctly, causing parsing errors.\n\nTo investigate further, let's inspect the generated XML file after running the test. We can do this by opening the `report.xml` file that was generated in the current directory."
    },
    {
      "action": "exit_cost",
      "observation": "Exited (autosubmitted)",
      "response": "Exit due to cost limit",
      "state": "{\"open_file\": \"/pytest-dev__pytest/src/_pytest/junitxml.py\", \"working_dir\": \"/pytest-dev__pytest/testing\"}\n",
      "thought": "Exit due to cost limit"
    }
  ],
  "history": [
    {
      "role": "system",
      "content": "SETTING: You are an autonomous programmer, and you're working directly in the command line with a special interface.\n\nThe special interface consists of a file editor that shows you 100 lines of a file at a time.\nIn addition to typical bash commands, you can also use the following commands to help you navigate and edit files.\n\nCOMMANDS:\nopen:\n  docstring: opens the file at the given path in the editor. If line_number is provided, the window will be move to include that line\n  signature: open <path> [<line_number>]\n  arguments:\n    - path (string) [required]: the path to the file to open\n    - line_number (integer) [optional]: the line number to move the window to (if not provided, the window will start at the top of the file)\n\ngoto:\n  docstring: moves the window to show <line_number>\n  signature: goto <line_number>\n  arguments:\n    - line_number (integer) [required]: the line number to move the window to\n\nscroll_down:\n  docstring: moves the window down {WINDOW} lines\n  signature: scroll_down\n\nscroll_up:\n  docstring: moves the window down {WINDOW} lines\n  signature: scroll_down\n\ncreate:\n  docstring: creates and opens a new file with the given name\n  signature: create <filename>\n  arguments:\n    - filename (string) [required]: the name of the file to create\n\nsubmit:\n  docstring: submits your current code and terminates the session\n  signature: submit\n\nsearch_dir:\n  docstring: searches for search_term in all files in dir. If dir is not provided, searches in the current directory\n  signature: search_dir <search_term> [<dir>]\n  arguments:\n    - search_term (string) [required]: the term to search for\n    - dir (string) [optional]: the directory to search in (if not provided, searches in the current directory)\n\nsearch_file:\n  docstring: searches for search_term in file. If file is not provided, searches in the current open file\n  signature: search_file <search_term> [<file>]\n  arguments:\n    - search_term (string) [required]: the term to search for\n    - file (string) [optional]: the file to search in (if not provided, searches in the current open file)\n\nfind_file:\n  docstring: finds all files with the given name in dir. If dir is not provided, searches in the current directory\n  signature: find_file <file_name> [<dir>]\n  arguments:\n    - file_name (string) [required]: the name of the file to search for\n    - dir (string) [optional]: the directory to search in (if not provided, searches in the current directory)\n\nedit:\n  docstring: replaces lines <start_line> through <end_line> (inclusive) with the given text in the open file. The replacement text is terminated by a line with only end_of_edit on it. All of the <replacement text> will be entered, so make sure your indentation is formatted properly. Python files will be checked for syntax errors after the edit. If the system detects a syntax error, the edit will not be executed. Simply try to edit the file again, but make sure to read the error message and modify the edit command you issue accordingly. Issuing the same command a second time will just lead to the same error message again.\n  signature: edit <start_line>:<end_line>\n<replacement_text>\nend_of_edit\n  arguments:\n    - start_line (integer) [required]: the line number to start the edit at\n    - end_line (integer) [required]: the line number to end the edit at (inclusive)\n    - replacement_text (string) [required]: the text to replace the current selection with\n\n\n\nPlease note that THE EDIT COMMAND REQUIRES PROPER INDENTATION. \nIf you'd like to add the line '        print(x)' you must fully write that out, with all those spaces before the code! Indentation is important and code that is not idented correctly will fail and require fixing before it can be run.\n\nRESPONSE FORMAT:\nYour shell prompt is formatted as follows:\n(Open file: <path>) <cwd> $\n\nYou need to format your output using two fields; discussion and command.\nYour output should always include _one_ discussion and _one_ command field EXACTLY as in the following example:\nDISCUSSION\nFirst I'll start by using ls to see what files are in the current directory. Then maybe we can look at some relevant files to see what they look like.\n<command>\nls -a\n</command>\n\nYou should only include a *SINGLE* command in the command section and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.\nIf you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first command, and then after receiving a response you'll be able to issue the second command. \nYou're free to use any other bash commands you want (e.g. find, grep, cat, ls, cd) in addition to the special commands listed above.\nHowever, the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them.",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "We're currently solving the following issue within our repository. Here's the issue text:\nISSUE:\nTimeDelta serialization precision\nHi there!\n\nI just found quite strange behaviour of `TimeDelta` field serialization\n\n```python3\nfrom marshmallow.fields import TimeDelta\nfrom datetime import timedelta\n\ntd_field = TimeDelta(precision=\"milliseconds\")\n\nobj = dict()\nobj[\"td_field\"] = timedelta(milliseconds=345)\n\nprint(td_field.serialize(\"td_field\", obj))\n```\n\nOutput of this snippet is `344`, but it seems that `345` is correct.\n\nLooks like a rounding issue here: https://github.com/marshmallow-code/marshmallow/blob/dev/src/marshmallow/fields.py#L1474\n\n\nINSTRUCTIONS:\nNow, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want. \nRemember, YOU CAN ONLY ENTER ONE COMMAND AT A TIME. You should always wait for feedback after every command. \nWhen you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.\nNote however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with `python <script_name>.py`.\n\nNOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line!\n\nIMPORTANT TIPS:\n1. Always start by trying to replicate the bug that the issues discusses. \n   If the issue includes code for reproducing the bug, we recommend that you re-implement that in your environment, and run it to make sure you can reproduce the bug.\n   Then start trying to fix it.\n   When you think you've fixed the bug, re-run the bug reproduction script to make sure that the bug has indeed been fixed.\n   \n   If the bug reproduction script does not print anything when it succesfully runs, we recommend adding a print(\"Script completed successfully, no errors.\") command at the end of the file,\n   so that you can be sure that the script indeed ran fine all the way through. \n\n2. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!\n\n3. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker. \n   \n4. If the bug reproduction script requires inputting/reading a specific file, such as buggy-input.png, and you'd like to understand how to input that file, conduct a search in the existing repo code, to see whether someone else has already done that. Do this by running the command: find_file \"buggy-input.png\" If that doensn't work, use the linux 'find' command. \n\n5. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current  open file.\n\n6. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.\n   \n\n(Open file: n/a)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "Let's first start by reproducing the results of the issue. The issue includes some example code for reproduction, which we can use. We'll create a new file called `reproduce.py` and paste the example code into it.\n<command>\ncreate reproduce.py\n</command>",
      "thought": "Let's first start by reproducing the results of the issue. The issue includes some example code for reproduction, which we can use. We'll create a new file called `reproduce.py` and paste the example code into it.",
      "action": "create reproduce.py",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "[File: /marshmallow-code__marshmallow/reproduce.py (1 lines total)]\n1:\n\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "Now let's paste in the example code from the issue.\n<command>\nedit 1:1\nfrom marshmallow.fields import TimeDelta\nfrom datetime import timedelta\n\ntd_field = TimeDelta(precision=\"milliseconds\")\n\nobj = dict()\nobj[\"td_field\"] = timedelta(milliseconds=345)\n\nprint(td_field.serialize(\"td_field\", obj))\nend_of_edit\n</command>",
      "thought": "Now let's paste in the example code from the issue.",
      "action": "edit 1:1\nfrom marshmallow.fields import TimeDelta\nfrom datetime import timedelta\n\ntd_field = TimeDelta(precision=\"milliseconds\")\n\nobj = dict()\nobj[\"td_field\"] = timedelta(milliseconds=345)\n\nprint(td_field.serialize(\"td_field\", obj))\nend_of_edit",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "[File: /marshmallow-code__marshmallow/reproduce.py (9 lines total)]\n1:from marshmallow.fields import TimeDelta\n2:from datetime import timedelta\n3:\n4:td_field = TimeDelta(precision=\"milliseconds\")\n5:\n6:obj = dict()\n7:obj[\"td_field\"] = timedelta(milliseconds=345)\n8:\n9:print(td_field.serialize(\"td_field\", obj))\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\n\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "Now let's run the code to see if we see the same output as the issue.\n<command>\npython reproduce.py\n</command>",
      "thought": "Now let's run the code to see if we see the same output as the issue.",
      "action": "python reproduce.py",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "344\n\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "We are indeed seeing the same output as the issue. The issue suggests that we should look at line 1474 of the `fields.py` file to see if there is a rounding issue. Let's open the `fields.py` file and navigate to line 1474 to see the relevant code. First we should find the `fields.py` file in the repository. It is likely to be in the `src/marshmallow` directory, but we should check to be sure.\n<command>\nls -F\n</command>",
      "thought": "We are indeed seeing the same output as the issue. The issue suggests that we should look at line 1474 of the `fields.py` file to see if there is a rounding issue. Let's open the `fields.py` file and navigate to line 1474 to see the relevant code. First we should find the `fields.py` file in the repository. It is likely to be in the `src/marshmallow` directory, but we should check to be sure.",
      "action": "ls -F",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "AUTHORS.rst\nCHANGELOG.rst\nCODE_OF_CONDUCT.md\nCONTRIBUTING.rst\nLICENSE\nMANIFEST.in\nNOTICE\nREADME.rst\nRELEASING.md\nazure-pipelines.yml\ndocs/\nexamples/\nperformance/\npyproject.toml\nreproduce.py\nsetup.cfg\nsetup.py\nsrc/\ntests/\ntox.ini\n\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "It looks like the `src` directory is present, which suggests that the `fields.py` file is likely to be in the `src` directory. Let's use find_file to see where it is.\n<command>\nfind_file \"fields.py\" src\n</command>",
      "thought": "It looks like the `src` directory is present, which suggests that the `fields.py` file is likely to be in the `src` directory. Let's use find_file to see where it is.",
      "action": "find_file \"fields.py\" src",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "Found 1 matches for \"fields.py\" in /marshmallow-code__marshmallow/src:\n/marshmallow-code__marshmallow/src/marshmallow/fields.py\n\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "It looks like the `fields.py` file is present in the `./src/marshmallow/` directory. The issue also points to a specific URL with line number 1474. We should navigate to that line in fields.py to see the relevant code for the `TimeDelta` serialization.\n<command>\nopen src/marshmallow/fields.py 1474\n</command>",
      "thought": "It looks like the `fields.py` file is present in the `./src/marshmallow/` directory. The issue also points to a specific URL with line number 1474. We should navigate to that line in fields.py to see the relevant code for the `TimeDelta` serialization.",
      "action": "open src/marshmallow/fields.py 1474",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\n(1458 more lines above)\n1459:            self.WEEKS,\n1460:        )\n1461:\n1462:        if precision not in units:\n1463:            msg = 'The precision must be {} or \"{}\".'.format(\n1464:                \", \".join([f'\"{each}\"' for each in units[:-1]]), units[-1]\n1465:            )\n1466:            raise ValueError(msg)\n1467:\n1468:        self.precision = precision\n1469:        super().__init__(**kwargs)\n1470:\n1471:    def _serialize(self, value, attr, obj, **kwargs):\n1472:        if value is None:\n1473:            return None\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\n1475:        return int(value.total_seconds() / base_unit.total_seconds())\n1476:\n1477:    def _deserialize(self, value, attr, data, **kwargs):\n1478:        try:\n1479:            value = int(value)\n1480:        except (TypeError, ValueError) as error:\n1481:            raise self.make_error(\"invalid\") from error\n1482:\n1483:        kwargs = {self.precision: value}\n1484:\n1485:        try:\n1486:            return dt.timedelta(**kwargs)\n1487:        except OverflowError as error:\n1488:            raise self.make_error(\"invalid\") from error\n1489:\n1490:\n1491:class Mapping(Field):\n1492:    \"\"\"An abstract class for objects with key-value pairs.\n1493:\n1494:    :param keys: A field class or instance for dict keys.\n1495:    :param values: A field class or instance for dict values.\n1496:    :param kwargs: The same keyword arguments that :class:`Field` receives.\n1497:\n1498:    .. note::\n1499:        When the structure of nested data is not known, you may omit the\n1500:        `keys` and `values` arguments to prevent content validation.\n1501:\n1502:    .. versionadded:: 3.0.0rc4\n1503:    \"\"\"\n1504:\n1505:    mapping_type = dict\n1506:\n1507:    #: Default error messages.\n1508:    default_error_messages = {\"invalid\": \"Not a valid mapping type.\"}\n1509:\n1510:    def __init__(\n1511:        self,\n1512:        keys: typing.Optional[typing.Union[Field, type]] = None,\n1513:        values: typing.Optional[typing.Union[Field, type]] = None,\n1514:        **kwargs,\n1515:    ):\n1516:        super().__init__(**kwargs)\n1517:        if keys is None:\n1518:            self.key_field = None\n1519:        else:\n1520:            try:\n1521:                self.key_field = resolve_field_instance(keys)\n1522:            except FieldInstanceResolutionError as error:\n1523:                raise ValueError(\n1524:                    '\"keys\" must be a subclass or instance of '\n1525:                    \"marshmallow.base.FieldABC.\"\n1526:                ) from error\n1527:\n1528:        if values is None:\n1529:            self.value_field = None\n1530:        else:\n1531:            try:\n1532:                self.value_field = resolve_field_instance(values)\n1533:            except FieldInstanceResolutionError as error:\n1534:                raise ValueError(\n1535:                    '\"values\" must be a subclass or instance of '\n1536:                    \"marshmallow.base.FieldABC.\"\n1537:                ) from error\n1538:            if isinstance(self.value_field, Nested):\n1539:                self.only = self.value_field.only\n1540:                self.exclude = self.value_field.exclude\n1541:\n1542:    def _bind_to_schema(self, field_name, schema):\n1543:        super()._bind_to_schema(field_name, schema)\n1544:        if self.value_field:\n1545:            self.value_field = copy.deepcopy(self.value_field)\n1546:            self.value_field._bind_to_schema(field_name, self)\n1547:        if isinstance(self.value_field, Nested):\n1548:            self.value_field.only = self.only\n1549:            self.value_field.exclude = self.exclude\n1550:        if self.key_field:\n1551:            self.key_field = copy.deepcopy(self.key_field)\n1552:            self.key_field._bind_to_schema(field_name, self)\n1553:\n1554:    def _serialize(self, value, attr, obj, **kwargs):\n1555:        if value is None:\n1556:            return None\n1557:        if not self.value_field and not self.key_field:\n1558:            return self.mapping_type(value)\n(439 more lines below)\n\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "We are now looking at the relevant section of the `fields.py` file where the `TimeDelta` serialization occurs. The issue suggests that there is a rounding problem near line 1474. The current implementation uses integer division, which truncates the decimal part and can lead to incorrect rounding on line 1475.To fix this issue, we should ensure that the division results in a float, and then round the result to the nearest integer before converting it to an int. This should preserve the milliseconds precision as expected. Let's make the necessary edit to the code.\n<command>\nedit 1475:1475\nreturn int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\nend_of_edit\n</command>",
      "thought": "We are now looking at the relevant section of the `fields.py` file where the `TimeDelta` serialization occurs. The issue suggests that there is a rounding problem near line 1474. The current implementation uses integer division, which truncates the decimal part and can lead to incorrect rounding on line 1475.To fix this issue, we should ensure that the division results in a float, and then round the result to the nearest integer before converting it to an int. This should preserve the milliseconds precision as expected. Let's make the necessary edit to the code.",
      "action": "edit 1475:1475\nreturn int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\nend_of_edit",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "Your proposed edit has introduced new syntax error(s). Please understand the fixes and retry your edit commmand.\n\nERRORS:\n- E999 IndentationError: unexpected indent\n\nThis is how your edit would have looked if applied\n-------------------------------------------------\n[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\n(1468 more lines above)\n1469:        super().__init__(**kwargs)\n1470:\n1471:    def _serialize(self, value, attr, obj, **kwargs):\n1472:        if value is None:\n1473:            return None\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\n1475:return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\n1476:\n1477:    def _deserialize(self, value, attr, data, **kwargs):\n1478:        try:\n1479:            value = int(value)\n(518 more lines below)\n-------------------------------------------------\n\nThis is the original code before your edit\n-------------------------------------------------\n[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\n(1469 more lines above)\n1470:\n1471:    def _serialize(self, value, attr, obj, **kwargs):\n1472:        if value is None:\n1473:            return None\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\n1475:        return int(value.total_seconds() / base_unit.total_seconds())\n1476:\n1477:    def _deserialize(self, value, attr, data, **kwargs):\n1478:        try:\n1479:            value = int(value)\n1480:        except (TypeError, ValueError) as error:\n(517 more lines below)\n-------------------------------------------------\nYour changes have NOT been applied. Please fix your edit command and try again.\nYou either need to 1) Specify the correct start/end line arguments or 2) Correct your edit code.\nDO NOT re-run the same failed edit command. Running it again will lead to the same error.\n\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "My edit command did not use the proper indentation, I will fix my syntax in this follow up edit command.\n<command>\nedit 1475:1475\n        return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\nend_of_edit\n</command>",
      "thought": "My edit command did not use the proper indentation, I will fix my syntax in this follow up edit command.",
      "action": "edit 1475:1475\n        return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\nend_of_edit",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\n(1424 more lines above)\n1425:\n1426:    :param precision: Influences how the integer is interpreted during\n1427:        (de)serialization. Must be 'days', 'seconds', 'microseconds',\n1428:        'milliseconds', 'minutes', 'hours' or 'weeks'.\n1429:    :param kwargs: The same keyword arguments that :class:`Field` receives.\n1430:\n1431:    .. versionchanged:: 2.0.0\n1432:        Always serializes to an integer value to avoid rounding errors.\n1433:        Add `precision` parameter.\n1434:    \"\"\"\n1435:\n1436:    DAYS = \"days\"\n1437:    SECONDS = \"seconds\"\n1438:    MICROSECONDS = \"microseconds\"\n1439:    MILLISECONDS = \"milliseconds\"\n1440:    MINUTES = \"minutes\"\n1441:    HOURS = \"hours\"\n1442:    WEEKS = \"weeks\"\n1443:\n1444:    #: Default error messages.\n1445:    default_error_messages = {\n1446:        \"invalid\": \"Not a valid period of time.\",\n1447:        \"format\": \"{input!r} cannot be formatted as a timedelta.\",\n1448:    }\n1449:\n1450:    def __init__(self, precision: str = SECONDS, **kwargs):\n1451:        precision = precision.lower()\n1452:        units = (\n1453:            self.DAYS,\n1454:            self.SECONDS,\n1455:            self.MICROSECONDS,\n1456:            self.MILLISECONDS,\n1457:            self.MINUTES,\n1458:            self.HOURS,\n1459:            self.WEEKS,\n1460:        )\n1461:\n1462:        if precision not in units:\n1463:            msg = 'The precision must be {} or \"{}\".'.format(\n1464:                \", \".join([f'\"{each}\"' for each in units[:-1]]), units[-1]\n1465:            )\n1466:            raise ValueError(msg)\n1467:\n1468:        self.precision = precision\n1469:        super().__init__(**kwargs)\n1470:\n1471:    def _serialize(self, value, attr, obj, **kwargs):\n1472:        if value is None:\n1473:            return None\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\n1475:        return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\n1476:\n1477:    def _deserialize(self, value, attr, data, **kwargs):\n1478:        try:\n1479:            value = int(value)\n1480:        except (TypeError, ValueError) as error:\n1481:            raise self.make_error(\"invalid\") from error\n1482:\n1483:        kwargs = {self.precision: value}\n1484:\n1485:        try:\n1486:            return dt.timedelta(**kwargs)\n1487:        except OverflowError as error:\n1488:            raise self.make_error(\"invalid\") from error\n1489:\n1490:\n1491:class Mapping(Field):\n1492:    \"\"\"An abstract class for objects with key-value pairs.\n1493:\n1494:    :param keys: A field class or instance for dict keys.\n1495:    :param values: A field class or instance for dict values.\n1496:    :param kwargs: The same keyword arguments that :class:`Field` receives.\n1497:\n1498:    .. note::\n1499:        When the structure of nested data is not known, you may omit the\n1500:        `keys` and `values` arguments to prevent content validation.\n1501:\n1502:    .. versionadded:: 3.0.0rc4\n1503:    \"\"\"\n1504:\n1505:    mapping_type = dict\n1506:\n1507:    #: Default error messages.\n1508:    default_error_messages = {\"invalid\": \"Not a valid mapping type.\"}\n1509:\n1510:    def __init__(\n1511:        self,\n1512:        keys: typing.Optional[typing.Union[Field, type]] = None,\n1513:        values: typing.Optional[typing.Union[Field, type]] = None,\n1514:        **kwargs,\n1515:    ):\n1516:        super().__init__(**kwargs)\n1517:        if keys is None:\n1518:            self.key_field = None\n1519:        else:\n1520:            try:\n1521:                self.key_field = resolve_field_instance(keys)\n1522:            except FieldInstanceResolutionError as error:\n1523:                raise ValueError(\n1524:                    '\"keys\" must be a subclass or instance of '\n(473 more lines below)\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\n\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "The code has been updated to use the `round` function, which should fix the rounding issue. Before submitting the changes, it would be prudent to run the reproduce.py code again to ensure that this change has the desired effect. I see that \"Current directory\" is still `/marshmallow-code__marshmallow`, so we can just run `reproduce.py` directly.\n<command>\npython reproduce.py\n</command>",
      "thought": "The code has been updated to use the `round` function, which should fix the rounding issue. Before submitting the changes, it would be prudent to run the reproduce.py code again to ensure that this change has the desired effect. I see that \"Current directory\" is still `/marshmallow-code__marshmallow`, so we can just run `reproduce.py` directly.",
      "action": "python reproduce.py",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "345\n\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "The output has changed from 344 to 345, which suggests that the rounding issue has been fixed. Let's remove the reproduce.py file since it is no longer needed.\n<command>\nrm reproduce.py\n</command>",
      "thought": "The output has changed from 344 to 345, which suggests that the rounding issue has been fixed. Let's remove the reproduce.py file since it is no longer needed.",
      "action": "rm reproduce.py",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "Your command ran successfully and did not produce any output.\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "rm doesn't have any output when it deletes successfully, so that must have worked. Now that we have fixed the issue, we should submit our changes to the code base. Let's submit the changes using the `submit` command.\n<command>\nsubmit\n</command>",
      "thought": "rm doesn't have any output when it deletes successfully, so that must have worked. Now that we have fixed the issue, we should submit our changes to the code base. Let's submit the changes using the `submit` command.",
      "action": "submit",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "We're currently solving the following issue within our repository. Here's the issue text:\nISSUE:\nHostname and timestamp properties in generated JUnit XML reports\nPytest enables generating JUnit XML reports of the tests.\r\n\r\nHowever, there are some properties missing, specifically `hostname` and `timestamp` from the `testsuite` XML element. Is there an option to include them?\r\n\r\nExample of a pytest XML report:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<testsuite errors=\"0\" failures=\"2\" name=\"check\" skipped=\"0\" tests=\"4\" time=\"0.049\">\r\n\t<testcase classname=\"test_sample.TestClass\" file=\"test_sample.py\" line=\"3\" name=\"test_addOne_normal\" time=\"0.001\"></testcase>\r\n\t<testcase classname=\"test_sample.TestClass\" file=\"test_sample.py\" line=\"6\" name=\"test_addOne_edge\" time=\"0.001\"></testcase>\r\n</testsuite>\r\n```\r\n\r\nExample of a junit XML report:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<testsuite name=\"location.GeoLocationTest\" tests=\"2\" skipped=\"0\" failures=\"0\" errors=\"0\" timestamp=\"2019-04-22T10:32:27\" hostname=\"Anass-MacBook-Pro.local\" time=\"0.048\">\r\n  <properties/>\r\n  <testcase name=\"testIoException()\" classname=\"location.GeoLocationTest\" time=\"0.044\"/>\r\n  <testcase name=\"testJsonDeserialization()\" classname=\"location.GeoLocationTest\" time=\"0.003\"/>\r\n  <system-out><![CDATA[]]></system-out>\r\n  <system-err><![CDATA[]]></system-err>\r\n</testsuite>\r\n```\n\n\nINSTRUCTIONS:\nNow, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want. \nRemember, YOU CAN ONLY ENTER ONE COMMAND AT A TIME. You should always wait for feedback after every command. \nWhen you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.\nNote however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with `python <script_name>.py`.\n\nNOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line!\n\nIMPORTANT TIPS:\n1. Always start by trying to replicate the bug that the issues discusses. \n   If the issue includes code for reproducing the bug, we recommend that you re-implement that in your environment, and run it to make sure you can reproduce the bug.\n   Then start trying to fix it.\n   When you think you've fixed the bug, re-run the bug reproduction script to make sure that the bug has indeed been fixed.\n   \n   If the bug reproduction script does not print anything when it succesfully runs, we recommend adding a print(\"Script completed successfully, no errors.\") command at the end of the file,\n   so that you can be sure that the script indeed ran fine all the way through. \n\n2. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!\n\n3. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker. \n   \n4. If the bug reproduction script requires inputting/reading a specific file, such as buggy-input.png, and you'd like to understand how to input that file, conduct a search in the existing repo code, to see whether someone else has already done that. Do this by running the command: find_file \"buggy-input.png\" If that doensn't work, use the linux 'find' command. \n\n5. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current  open file.\n\n6. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.\n   \n\n(Open file: n/a)\n(Current directory: /pytest-dev__pytest)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "Let's start by searching the pytest codebase to see where the JUnit XML report generation is handled. The issue mentions that pytest enables generating these reports, so there is likely code that handles this functionality.\n<command>\nsearch_dir \"junit xml\"\n</command>",
      "thought": "Let's start by searching the pytest codebase to see where the JUnit XML report generation is handled. The issue mentions that pytest enables generating these reports, so there is likely code that handles this functionality.",
      "action": "search_dir \"junit xml\"",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "Found 2 matches for \"junit xml\" in /pytest-dev__pytest:\n/pytest-dev__pytest/CHANGELOG.rst (2 matches)\nEnd of matches for \"junit xml\" in /pytest-dev__pytest\n\n(Open file: n/a)\n(Current directory: /pytest-dev__pytest)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "The search results show that the CHANGELOG.rst file mentions \"junit xml\", but it doesn't look like it contains the actual implementation. Let's try searching for a more specific term like \"testsuite\" which is an element in the JUnit XML report.\n<command>\nsearch_dir \"testsuite\"\n</command>",
      "thought": "The search results show that the CHANGELOG.rst file mentions \"junit xml\", but it doesn't look like it contains the actual implementation. Let's try searching for a more specific term like \"testsuite\" which is an element in the JUnit XML report.",
      "action": "search_dir \"testsuite\"",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "Found 95 matches for \"testsuite\" in /pytest-dev__pytest:\n/pytest-dev__pytest/CHANGELOG.rst (4 matches)\n/pytest-dev__pytest/changelog/5477.bugfix.rst (1 matches)\n/pytest-dev__pytest/changelog/5664.trivial.rst (1 matches)\n/pytest-dev__pytest/doc/en/announce/release-2.4.0.rst (1 matches)\n/pytest-dev__pytest/doc/en/builtin.rst (5 matches)\n/pytest-dev__pytest/doc/en/contents.rst (1 matches)\n/pytest-dev__pytest/doc/en/example/simple.rst (1 matches)\n/pytest-dev__pytest/doc/en/existingtestsuite.rst (1 matches)\n/pytest-dev__pytest/doc/en/getting-started.rst (1 matches)\n/pytest-dev__pytest/doc/en/reference.rst (3 matches)\n/pytest-dev__pytest/doc/en/usage.rst (9 matches)\n/pytest-dev__pytest/src/_pytest/junitxml.py (8 matches)\n/pytest-dev__pytest/testing/logging/test_reporting.py (9 matches)\n/pytest-dev__pytest/testing/test_junitxml.py (50 matches)\nEnd of matches for \"testsuite\" in /pytest-dev__pytest\n\n(Open file: n/a)\n(Current directory: /pytest-dev__pytest)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "The search results show that the `src/_pytest/junitxml.py` file contains mentions of \"testsuite\", so it's likely that this file handles the generation of the JUnit XML report. Let's open that file and take a look.\n<command>\nopen src/_pytest/junitxml.py\n</command>",
      "thought": "The search results show that the `src/_pytest/junitxml.py` file contains mentions of \"testsuite\", so it's likely that this file handles the generation of the JUnit XML report. Let's open that file and take a look.",
      "action": "open src/_pytest/junitxml.py",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "[File: /pytest-dev__pytest/src/_pytest/junitxml.py (691 lines total)]\n1:\"\"\"\n2:    report test results in JUnit-XML format,\n3:    for use with Jenkins and build integration servers.\n4:\n5:\n6:Based on initial code from Ross Lawley.\n7:\n8:Output conforms to https://github.com/jenkinsci/xunit-plugin/blob/master/\n9:src/main/resources/org/jenkinsci/plugins/xunit/types/model/xsd/junit-10.xsd\n10:\"\"\"\n11:import functools\n12:import os\n13:import re\n14:import sys\n15:import time\n16:\n17:import py\n18:\n19:import pytest\n20:from _pytest import nodes\n21:from _pytest.config import filename_arg\n22:\n23:\n24:class Junit(py.xml.Namespace):\n25:    pass\n26:\n27:\n28:# We need to get the subset of the invalid unicode ranges according to\n29:# XML 1.0 which are valid in this python build.  Hence we calculate\n30:# this dynamically instead of hardcoding it.  The spec range of valid\n31:# chars is: Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD]\n32:#                    | [#x10000-#x10FFFF]\n33:_legal_chars = (0x09, 0x0A, 0x0D)\n34:_legal_ranges = ((0x20, 0x7E), (0x80, 0xD7FF), (0xE000, 0xFFFD), (0x10000, 0x10FFFF))\n35:_legal_xml_re = [\n36:    \"{}-{}\".format(chr(low), chr(high))\n37:    for (low, high) in _legal_ranges\n38:    if low < sys.maxunicode\n39:]\n40:_legal_xml_re = [chr(x) for x in _legal_chars] + _legal_xml_re\n41:illegal_xml_re = re.compile(\"[^%s]\" % \"\".join(_legal_xml_re))\n42:del _legal_chars\n43:del _legal_ranges\n44:del _legal_xml_re\n45:\n46:_py_ext_re = re.compile(r\"\\.py$\")\n47:\n48:\n49:def bin_xml_escape(arg):\n50:    def repl(matchobj):\n51:        i = ord(matchobj.group())\n52:        if i <= 0xFF:\n53:            return \"#x%02X\" % i\n54:        else:\n55:            return \"#x%04X\" % i\n56:\n57:    return py.xml.raw(illegal_xml_re.sub(repl, py.xml.escape(arg)))\n58:\n59:\n60:def merge_family(left, right):\n61:    result = {}\n62:    for kl, vl in left.items():\n63:        for kr, vr in right.items():\n64:            if not isinstance(vl, list):\n65:                raise TypeError(type(vl))\n66:            result[kl] = vl + vr\n67:    left.update(result)\n68:\n69:\n70:families = {}\n71:families[\"_base\"] = {\"testcase\": [\"classname\", \"name\"]}\n72:families[\"_base_legacy\"] = {\"testcase\": [\"file\", \"line\", \"url\"]}\n73:\n74:# xUnit 1.x inherits legacy attributes\n75:families[\"xunit1\"] = families[\"_base\"].copy()\n76:merge_family(families[\"xunit1\"], families[\"_base_legacy\"])\n77:\n78:# xUnit 2.x uses strict base attributes\n79:families[\"xunit2\"] = families[\"_base\"]\n80:\n81:\n82:class _NodeReporter:\n83:    def __init__(self, nodeid, xml):\n84:        self.id = nodeid\n85:        self.xml = xml\n86:        self.add_stats = self.xml.add_stats\n87:        self.family = self.xml.family\n88:        self.duration = 0\n89:        self.properties = []\n90:        self.nodes = []\n91:        self.testcase = None\n92:        self.attrs = {}\n93:\n94:    def append(self, node):\n95:        self.xml.add_stats(type(node).__name__)\n96:        self.nodes.append(node)\n97:\n98:    def add_property(self, name, value):\n99:        self.properties.append((str(name), bin_xml_escape(value)))\n100:\n(591 more lines below)\n\n(Open file: /pytest-dev__pytest/src/_pytest/junitxml.py)\n(Current directory: /pytest-dev__pytest)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "The `junitxml.py` file seems to be the right place to add the `hostname` and `timestamp` attributes to the `testsuite` element. Let's search for where the `testsuite` element is created in this file.\n<command>\nsearch_file \"testsuite\"\n</command>",
      "thought": "The `junitxml.py` file seems to be the right place to add the `hostname` and `timestamp` attributes to the `testsuite` element. Let's search for where the `testsuite` element is created in this file.",
      "action": "search_file \"testsuite\"",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "Found 8 matches for \"testsuite\" in /pytest-dev__pytest/src/_pytest/junitxml.py:\nLine 343:    \"\"\"Used by record_testsuite_property to check that the given parameter name is of the proper\nLine 352:def record_testsuite_property(request):\nLine 354:    Records a new ``<property>`` tag as child of the root ``<testsuite>``. This is suitable to\nLine 361:        def test_foo(record_testsuite_property):\nLine 362:            record_testsuite_property(\"ARCH\", \"PPC\")\nLine 363:            record_testsuite_property(\"STORAGE_TYPE\", \"CEPH\")\nLine 660:        suite_node = Junit.testsuite(\nLine 670:        logfile.write(Junit.testsuites([suite_node]).unicode(indent=0))\nEnd of matches for \"testsuite\" in /pytest-dev__pytest/src/_pytest/junitxml.py\n\n(Open file: /pytest-dev__pytest/src/_pytest/junitxml.py)\n(Current directory: /pytest-dev__pytest)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "It looks like the `testsuite` element is created on line 660 in the `suite_node` variable. Let's take a closer look at that section of the code to see if we can add the `hostname` and `timestamp` attributes there.\n<command>\ngoto 660\n</command>",
      "thought": "It looks like the `testsuite` element is created on line 660 in the `suite_node` variable. Let's take a closer look at that section of the code to see if we can add the `hostname` and `timestamp` attributes there.",
      "action": "goto 660",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "[File: /pytest-dev__pytest/src/_pytest/junitxml.py (691 lines total)]\n(591 more lines above)\n592:            reporter.append_skipped(report)\n593:        self.update_testcase_duration(report)\n594:        if report.when == \"teardown\":\n595:            reporter = self._opentestcase(report)\n596:            reporter.write_captured_output(report)\n597:\n598:            for propname, propvalue in report.user_properties:\n599:                reporter.add_property(propname, propvalue)\n600:\n601:            self.finalize(report)\n602:            report_wid = getattr(report, \"worker_id\", None)\n603:            report_ii = getattr(report, \"item_index\", None)\n604:            close_report = next(\n605:                (\n606:                    rep\n607:                    for rep in self.open_reports\n608:                    if (\n609:                        rep.nodeid == report.nodeid\n610:                        and getattr(rep, \"item_index\", None) == report_ii\n611:                        and getattr(rep, \"worker_id\", None) == report_wid\n612:                    )\n613:                ),\n614:                None,\n615:            )\n616:            if close_report:\n617:                self.open_reports.remove(close_report)\n618:\n619:    def update_testcase_duration(self, report):\n620:        \"\"\"accumulates total duration for nodeid from given report and updates\n621:        the Junit.testcase with the new total if already created.\n622:        \"\"\"\n623:        if self.report_duration == \"total\" or report.when == self.report_duration:\n624:            reporter = self.node_reporter(report)\n625:            reporter.duration += getattr(report, \"duration\", 0.0)\n626:\n627:    def pytest_collectreport(self, report):\n628:        if not report.passed:\n629:            reporter = self._opentestcase(report)\n630:            if report.failed:\n631:                reporter.append_collect_error(report)\n632:            else:\n633:                reporter.append_collect_skipped(report)\n634:\n635:    def pytest_internalerror(self, excrepr):\n636:        reporter = self.node_reporter(\"internal\")\n637:        reporter.attrs.update(classname=\"pytest\", name=\"internal\")\n638:        reporter._add_simple(Junit.error, \"internal error\", excrepr)\n639:\n640:    def pytest_sessionstart(self):\n641:        self.suite_start_time = time.time()\n642:\n643:    def pytest_sessionfinish(self):\n644:        dirname = os.path.dirname(os.path.abspath(self.logfile))\n645:        if not os.path.isdir(dirname):\n646:            os.makedirs(dirname)\n647:        logfile = open(self.logfile, \"w\", encoding=\"utf-8\")\n648:        suite_stop_time = time.time()\n649:        suite_time_delta = suite_stop_time - self.suite_start_time\n650:\n651:        numtests = (\n652:            self.stats[\"passed\"]\n653:            + self.stats[\"failure\"]\n654:            + self.stats[\"skipped\"]\n655:            + self.stats[\"error\"]\n656:            - self.cnt_double_fail_tests\n657:        )\n658:        logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n659:\n660:        suite_node = Junit.testsuite(\n661:            self._get_global_properties_node(),\n662:            [x.to_xml() for x in self.node_reporters_ordered],\n663:            name=self.suite_name,\n664:            errors=self.stats[\"error\"],\n665:            failures=self.stats[\"failure\"],\n666:            skipped=self.stats[\"skipped\"],\n667:            tests=numtests,\n668:            time=\"%.3f\" % suite_time_delta,\n669:        )\n670:        logfile.write(Junit.testsuites([suite_node]).unicode(indent=0))\n671:        logfile.close()\n672:\n673:    def pytest_terminal_summary(self, terminalreporter):\n674:        terminalreporter.write_sep(\"-\", \"generated xml file: %s\" % (self.logfile))\n675:\n676:    def add_global_property(self, name, value):\n677:        __tracebackhide__ = True\n678:        _check_record_param_type(\"name\", name)\n679:        self.global_properties.append((name, bin_xml_escape(value)))\n680:\n681:    def _get_global_properties_node(self):\n682:        \"\"\"Return a Junit node containing custom properties, if any.\n683:        \"\"\"\n684:        if self.global_properties:\n685:            return Junit.properties(\n686:                [\n687:                    Junit.property(name=name, value=value)\n688:                    for name, value in self.global_properties\n689:                ]\n690:            )\n691:        return \"\"\n\n(Open file: /pytest-dev__pytest/src/_pytest/junitxml.py)\n(Current directory: /pytest-dev__pytest)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "Yes, this is the right place to add the `hostname` and `timestamp` attributes. We can add them as arguments to the `Junit.testsuite()` call on line 660.\n\nTo get the hostname, we can use the `socket.gethostname()` function from the Python standard library. For the timestamp, we can use the `self.suite_start_time` variable which is set in the `pytest_sessionstart` method.\n\nLet's make the necessary changes:\n\n<command>\nedit 660:660\n        import socket\n        suite_node = Junit.testsuite(\n            self._get_global_properties_node(),\n            [x.to_xml() for x in self.node_reporters_ordered],\n            name=self.suite_name,\n            errors=self.stats[\"error\"],\n            failures=self.stats[\"failure\"], \n            skipped=self.stats[\"skipped\"],\n            tests=numtests,\n            time=\"%.3f\" % suite_time_delta,\n            hostname=socket.gethostname(),\n            timestamp=self.suite_start_time\n        )\nend_of_edit\n</command>",
      "thought": "Yes, this is the right place to add the `hostname` and `timestamp` attributes. We can add them as arguments to the `Junit.testsuite()` call on line 660.\n\nTo get the hostname, we can use the `socket.gethostname()` function from the Python standard library. For the timestamp, we can use the `self.suite_start_time` variable which is set in the `pytest_sessionstart` method.\n\nLet's make the necessary changes:",
      "action": "edit 660:660\n        import socket\n        suite_node = Junit.testsuite(\n            self._get_global_properties_node(),\n            [x.to_xml() for x in self.node_reporters_ordered],\n            name=self.suite_name,\n            errors=self.stats[\"error\"],\n            failures=self.stats[\"failure\"], \n            skipped=self.stats[\"skipped\"],\n            tests=numtests,\n            time=\"%.3f\" % suite_time_delta,\n            hostname=socket.gethostname(),\n            timestamp=self.suite_start_time\n        )\nend_of_edit",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "Your proposed edit has introduced new syntax error(s). Please understand the fixes and retry your edit commmand.\n\nERRORS:\n- E999 IndentationError: unexpected indent\n\nThis is how your edit would have looked if applied\n-------------------------------------------------\n[File: /pytest-dev__pytest/src/_pytest/junitxml.py (703 lines total)]\n(653 more lines above)\n654:            + self.stats[\"skipped\"]\n655:            + self.stats[\"error\"]\n656:            - self.cnt_double_fail_tests\n657:        )\n658:        logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n659:\n660:        import socket\n661:        suite_node = Junit.testsuite(\n662:            self._get_global_properties_node(),\n663:            [x.to_xml() for x in self.node_reporters_ordered],\n664:            name=self.suite_name,\n665:            errors=self.stats[\"error\"],\n666:            failures=self.stats[\"failure\"], \n667:            skipped=self.stats[\"skipped\"],\n668:            tests=numtests,\n669:            time=\"%.3f\" % suite_time_delta,\n670:            hostname=socket.gethostname(),\n671:            timestamp=self.suite_start_time\n672:        )\n673:            self._get_global_properties_node(),\n674:            [x.to_xml() for x in self.node_reporters_ordered],\n675:            name=self.suite_name,\n676:            errors=self.stats[\"error\"],\n(27 more lines below)\n-------------------------------------------------\n\nThis is the original code before your edit\n-------------------------------------------------\n[File: /pytest-dev__pytest/src/_pytest/junitxml.py (691 lines total)]\n(654 more lines above)\n655:            + self.stats[\"error\"]\n656:            - self.cnt_double_fail_tests\n657:        )\n658:        logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n659:\n660:        suite_node = Junit.testsuite(\n661:            self._get_global_properties_node(),\n662:            [x.to_xml() for x in self.node_reporters_ordered],\n663:            name=self.suite_name,\n664:            errors=self.stats[\"error\"],\n665:            failures=self.stats[\"failure\"],\n(26 more lines below)\n-------------------------------------------------\nYour changes have NOT been applied. Please fix your edit command and try again.\nYou either need to 1) Specify the correct start/end line arguments or 2) Correct your edit code.\nDO NOT re-run the same failed edit command. Running it again will lead to the same error.\n\n(Open file: /pytest-dev__pytest/src/_pytest/junitxml.py)\n(Current directory: /pytest-dev__pytest)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "I apologize for the mistake in my previous edit command. The indentation was incorrect. Let me try again with the correct indentation:\n\n<command>\nedit 660:671\n        import socket\n        suite_node = Junit.testsuite(\n            self._get_global_properties_node(),\n            [x.to_xml() for x in self.node_reporters_ordered],\n            name=self.suite_name,\n            errors=self.stats[\"error\"],\n            failures=self.stats[\"failure\"], \n            skipped=self.stats[\"skipped\"],\n            tests=numtests,\n            time=\"%.3f\" % suite_time_delta,\n            hostname=socket.gethostname(),\n            timestamp=self.suite_start_time\n        )\nend_of_edit\n</command>",
      "thought": "I apologize for the mistake in my previous edit command. The indentation was incorrect. Let me try again with the correct indentation:",
      "action": "edit 660:671\n        import socket\n        suite_node = Junit.testsuite(\n            self._get_global_properties_node(),\n            [x.to_xml() for x in self.node_reporters_ordered],\n            name=self.suite_name,\n            errors=self.stats[\"error\"],\n            failures=self.stats[\"failure\"], \n            skipped=self.stats[\"skipped\"],\n            tests=numtests,\n            time=\"%.3f\" % suite_time_delta,\n            hostname=socket.gethostname(),\n            timestamp=self.suite_start_time\n        )\nend_of_edit",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "[File: /pytest-dev__pytest/src/_pytest/junitxml.py (692 lines total)]\n(592 more lines above)\n593:        self.update_testcase_duration(report)\n594:        if report.when == \"teardown\":\n595:            reporter = self._opentestcase(report)\n596:            reporter.write_captured_output(report)\n597:\n598:            for propname, propvalue in report.user_properties:\n599:                reporter.add_property(propname, propvalue)\n600:\n601:            self.finalize(report)\n602:            report_wid = getattr(report, \"worker_id\", None)\n603:            report_ii = getattr(report, \"item_index\", None)\n604:            close_report = next(\n605:                (\n606:                    rep\n607:                    for rep in self.open_reports\n608:                    if (\n609:                        rep.nodeid == report.nodeid\n610:                        and getattr(rep, \"item_index\", None) == report_ii\n611:                        and getattr(rep, \"worker_id\", None) == report_wid\n612:                    )\n613:                ),\n614:                None,\n615:            )\n616:            if close_report:\n617:                self.open_reports.remove(close_report)\n618:\n619:    def update_testcase_duration(self, report):\n620:        \"\"\"accumulates total duration for nodeid from given report and updates\n621:        the Junit.testcase with the new total if already created.\n622:        \"\"\"\n623:        if self.report_duration == \"total\" or report.when == self.report_duration:\n624:            reporter = self.node_reporter(report)\n625:            reporter.duration += getattr(report, \"duration\", 0.0)\n626:\n627:    def pytest_collectreport(self, report):\n628:        if not report.passed:\n629:            reporter = self._opentestcase(report)\n630:            if report.failed:\n631:                reporter.append_collect_error(report)\n632:            else:\n633:                reporter.append_collect_skipped(report)\n634:\n635:    def pytest_internalerror(self, excrepr):\n636:        reporter = self.node_reporter(\"internal\")\n637:        reporter.attrs.update(classname=\"pytest\", name=\"internal\")\n638:        reporter._add_simple(Junit.error, \"internal error\", excrepr)\n639:\n640:    def pytest_sessionstart(self):\n641:        self.suite_start_time = time.time()\n642:\n643:    def pytest_sessionfinish(self):\n644:        dirname = os.path.dirname(os.path.abspath(self.logfile))\n645:        if not os.path.isdir(dirname):\n646:            os.makedirs(dirname)\n647:        logfile = open(self.logfile, \"w\", encoding=\"utf-8\")\n648:        suite_stop_time = time.time()\n649:        suite_time_delta = suite_stop_time - self.suite_start_time\n650:\n651:        numtests = (\n652:            self.stats[\"passed\"]\n653:            + self.stats[\"failure\"]\n654:            + self.stats[\"skipped\"]\n655:            + self.stats[\"error\"]\n656:            - self.cnt_double_fail_tests\n657:        )\n658:        logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n659:\n660:        import socket\n661:        suite_node = Junit.testsuite(\n662:            self._get_global_properties_node(),\n663:            [x.to_xml() for x in self.node_reporters_ordered],\n664:            name=self.suite_name,\n665:            errors=self.stats[\"error\"],\n666:            failures=self.stats[\"failure\"], \n667:            skipped=self.stats[\"skipped\"],\n668:            tests=numtests,\n669:            time=\"%.3f\" % suite_time_delta,\n670:            hostname=socket.gethostname(),\n671:            timestamp=self.suite_start_time\n672:        )\n673:\n674:    def pytest_terminal_summary(self, terminalreporter):\n675:        terminalreporter.write_sep(\"-\", \"generated xml file: %s\" % (self.logfile))\n676:\n677:    def add_global_property(self, name, value):\n678:        __tracebackhide__ = True\n679:        _check_record_param_type(\"name\", name)\n680:        self.global_properties.append((name, bin_xml_escape(value)))\n681:\n682:    def _get_global_properties_node(self):\n683:        \"\"\"Return a Junit node containing custom properties, if any.\n684:        \"\"\"\n685:        if self.global_properties:\n686:            return Junit.properties(\n687:                [\n688:                    Junit.property(name=name, value=value)\n689:                    for name, value in self.global_properties\n690:                ]\n691:            )\n692:        return \"\"\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\n\n(Open file: /pytest-dev__pytest/src/_pytest/junitxml.py)\n(Current directory: /pytest-dev__pytest)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "The edit looks good now. The indentation is correct and the `hostname` and `timestamp` attributes have been added to the `Junit.testsuite` call.\n\nTo test if this change works as expected, we should run pytest with the `--junitxml` option to generate a JUnit XML report and then inspect the generated XML to see if the `hostname` and `timestamp` attributes are present on the `<testsuite>` element.\n\nHowever, I don't see any existing test files in the current directory that we could run to generate a report. Let's search the repository to see if there are any existing test files we could use.\n\n<command>\nfind_file \"test_*.py\"\n</command>",
      "thought": "The edit looks good now. The indentation is correct and the `hostname` and `timestamp` attributes have been added to the `Junit.testsuite` call.\n\nTo test if this change works as expected, we should run pytest with the `--junitxml` option to generate a JUnit XML report and then inspect the generated XML to see if the `hostname` and `timestamp` attributes are present on the `<testsuite>` element.\n\nHowever, I don't see any existing test files in the current directory that we could run to generate a report. Let's search the repository to see if there are any existing test files we could use.",
      "action": "find_file \"test_*.py\"",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "Found 83 matches for \"test_*.py\" in /pytest-dev__pytest:\n/pytest-dev__pytest/doc/en/example/costlysetup/sub_a/test_quick.py\n/pytest-dev__pytest/doc/en/example/costlysetup/sub_b/test_two.py\n/pytest-dev__pytest/doc/en/example/fixtures/test_fixtures_order.py\n/pytest-dev__pytest/doc/en/example/py2py3/test_py3.py\n/pytest-dev__pytest/doc/en/example/py2py3/test_py2.py\n/pytest-dev__pytest/doc/en/example/assertion/test_setup_flow_example.py\n/pytest-dev__pytest/doc/en/example/assertion/test_failures.py\n/pytest-dev__pytest/doc/en/example/assertion/global_testmodule_config/test_hello_world.py\n/pytest-dev__pytest/testing/test_terminal.py\n/pytest-dev__pytest/testing/example_scripts/collect/collect_init_tests/tests/test_foo.py\n/pytest-dev__pytest/testing/example_scripts/collect/package_infinite_recursion/tests/test_basic.py\n/pytest-dev__pytest/testing/example_scripts/collect/package_init_given_as_arg/pkg/test_foo.py\n/pytest-dev__pytest/testing/example_scripts/marks/marks_considered_keywords/test_marks_as_keywords.py\n/pytest-dev__pytest/testing/example_scripts/dataclasses/test_compare_two_different_dataclasses.py\n/pytest-dev__pytest/testing/example_scripts/dataclasses/test_compare_dataclasses_verbose.py\n/pytest-dev__pytest/testing/example_scripts/dataclasses/test_compare_dataclasses.py\n/pytest-dev__pytest/testing/example_scripts/dataclasses/test_compare_dataclasses_field_comparison_off.py\n/pytest-dev__pytest/testing/example_scripts/warnings/test_group_warnings_by_message.py\n/pytest-dev__pytest/testing/example_scripts/unittest/test_parametrized_fixture_error_message.py\n/pytest-dev__pytest/testing/example_scripts/unittest/test_setup_skip.py\n/pytest-dev__pytest/testing/example_scripts/unittest/test_setup_skip_module.py\n/pytest-dev__pytest/testing/example_scripts/unittest/test_setup_skip_class.py\n/pytest-dev__pytest/testing/example_scripts/issue88_initial_file_multinodes/test_hello.py\n/pytest-dev__pytest/testing/example_scripts/config/collect_pytest_prefix/test_foo.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/test_getfixturevalue_dynamic.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/test_fixture_named_request.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_detect_recursive_dependency_error.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_funcarg_basic.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_conftest_funcargs_only_available_in_subdir/sub1/test_in_sub1.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_conftest_funcargs_only_available_in_subdir/sub2/test_in_sub2.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_extend_fixture_conftest_module/test_extend_fixture_conftest_module.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_funcarg_lookup_classlevel.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_extend_fixture_module_class.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_funcarg_lookupfails.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_funcarg_lookup_modulelevel.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/fill_fixtures/test_extend_fixture_conftest_conftest/pkg/test_spam.py\n/pytest-dev__pytest/testing/example_scripts/fixtures/custom_item/foo/test_foo.py\n/pytest-dev__pytest/testing/test_doctest.py\n/pytest-dev__pytest/testing/test_helpconfig.py\n/pytest-dev__pytest/testing/test_pathlib.py\n/pytest-dev__pytest/testing/io/test_saferepr.py\n/pytest-dev__pytest/testing/test_collection.py\n/pytest-dev__pytest/testing/test_junitxml.py\n/pytest-dev__pytest/testing/test_config.py\n/pytest-dev__pytest/testing/test_warning_types.py\n/pytest-dev__pytest/testing/test_warnings.py\n/pytest-dev__pytest/testing/examples/test_issue519.py\n/pytest-dev__pytest/testing/test_pastebin.py\n/pytest-dev__pytest/testing/test_cacheprovider.py\n/pytest-dev__pytest/testing/test_runner.py\n/pytest-dev__pytest/testing/test_resultlog.py\n/pytest-dev__pytest/testing/test_runner_xunit.py\n/pytest-dev__pytest/testing/test_pdb.py\n/pytest-dev__pytest/testing/test_assertrewrite.py\n/pytest-dev__pytest/testing/test_unittest.py\n/pytest-dev__pytest/testing/test_recwarn.py\n/pytest-dev__pytest/testing/test_monkeypatch.py\n/pytest-dev__pytest/testing/freeze/tests/test_trivial.py\n/pytest-dev__pytest/testing/code/test_source.py\n/pytest-dev__pytest/testing/code/test_excinfo.py\n/pytest-dev__pytest/testing/code/test_code.py\n/pytest-dev__pytest/testing/test_pytester.py\n/pytest-dev__pytest/testing/test_assertion.py\n/pytest-dev__pytest/testing/test_nodes.py\n/pytest-dev__pytest/testing/test_mark.py\n/pytest-dev__pytest/testing/test_capture.py\n/pytest-dev__pytest/testing/test_stepwise.py\n/pytest-dev__pytest/testing/test_compat.py\n/pytest-dev__pytest/testing/test_skipping.py\n/pytest-dev__pytest/testing/test_faulthandler.py\n/pytest-dev__pytest/testing/test_argcomplete.py\n/pytest-dev__pytest/testing/test_modimport.py\n/pytest-dev__pytest/testing/test_conftest.py\n/pytest-dev__pytest/testing/test_tmpdir.py\n/pytest-dev__pytest/testing/test_nose.py\n/pytest-dev__pytest/testing/test_session.py\n/pytest-dev__pytest/testing/test_entry_points.py\n/pytest-dev__pytest/testing/test_pluginmanager.py\n/pytest-dev__pytest/testing/test_reports.py\n/pytest-dev__pytest/testing/logging/test_reporting.py\n/pytest-dev__pytest/testing/logging/test_fixture.py\n/pytest-dev__pytest/testing/logging/test_formatter.py\n/pytest-dev__pytest/testing/test_parseopt.py\n\n(Open file: /pytest-dev__pytest/src/_pytest/junitxml.py)\n(Current directory: /pytest-dev__pytest)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "Great, it looks like there are many existing test files in the repository that we could potentially use. Let's try running one of them with the `--junitxml` option to generate a report.\n\nFor example, we could run the `testing/test_junitxml.py` file, which seems specifically relevant for testing the JUnit XML functionality.\n\nLet's change to the `testing` directory and run that test file:\n\n<command>\ncd testing\npython -m pytest test_junitxml.py --junitxml=report.xml\n</command>",
      "thought": "Great, it looks like there are many existing test files in the repository that we could potentially use. Let's try running one of them with the `--junitxml` option to generate a report.\n\nFor example, we could run the `testing/test_junitxml.py` file, which seems specifically relevant for testing the JUnit XML functionality.\n\nLet's change to the `testing` directory and run that test file:",
      "action": "cd testing\npython -m pytest test_junitxml.py --junitxml=report.xml",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /pytest-dev__pytest, inifile: tox.ini\ncollected 70 items\n\ntest_junitxml.py ....FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF...FFF.FF..FFF [ 78%]\nsFFxFFFF...FFFF                                                          [100%]\n\n=================================== FAILURES ===================================\n________________________ TestPython.test_summing_simple ________________________\n\nself = <test_junitxml.TestPython object at 0xffff9c968a00>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_summing_simple0')>\n\n    def test_summing_simple(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            def test_pass():\n                pass\n            def test_fail():\n                assert 0\n            def test_skip():\n                pytest.skip(\"\")\n            @pytest.mark.xfail\n            def test_xfail():\n                assert 0\n            @pytest.mark.xfail\n            def test_xpass():\n                assert 1\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c9683d0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_summing_simple0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_summing_simple0\ncollected 5 items\n\ntest_summing_simple.py .FsxX                                             [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_fail ___________________________________\n\n    def test_fail():\n>       assert 0\nE       assert 0\n\ntest_summing_simple.py:5: AssertionError\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_summing_simple0/junit.xml -\n===== 1 failed, 1 passed, 1 skipped, 1 xfailed, 1 xpassed in 0.02 seconds ======\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_summing_simple0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_summing_simple0/junit.xml' mode='w' encoding='utf-8'>\n__________________ TestPython.test_summing_simple_with_errors __________________\n\nself = <test_junitxml.TestPython object at 0xffff9c6b6c10>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_summing_simple_with_errors0')>\n\n    def test_summing_simple_with_errors(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.fixture\n            def fixture():\n                raise Exception()\n            def test_pass():\n                pass\n            def test_fail():\n                assert 0\n            def test_error(fixture):\n                pass\n            @pytest.mark.xfail\n            def test_xfail():\n                assert False\n            @pytest.mark.xfail(strict=True)\n            def test_xpass():\n                assert True\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c6decd0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_summing_simple_with_errors0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_summing_simple_with_errors0\ncollected 5 items\n\ntest_summing_simple_with_errors.py .FExF                                 [100%]\n\n==================================== ERRORS ====================================\n_________________________ ERROR at setup of test_error _________________________\n\n    @pytest.fixture\n    def fixture():\n>       raise Exception()\nE       Exception\n\ntest_summing_simple_with_errors.py:4: Exception\n=================================== FAILURES ===================================\n__________________________________ test_fail ___________________________________\n\n    def test_fail():\n>       assert 0\nE       assert 0\n\ntest_summing_simple_with_errors.py:8: AssertionError\n__________________________________ test_xpass __________________________________\n[XPASS(strict)] \n- generated xml file: /tmp/pytest-of-root/pytest-0/test_summing_simple_with_errors0/junit.xml -\n============ 2 failed, 1 passed, 1 xfailed, 1 error in 0.02 seconds ============\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_summing_simple_with_errors0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_summing_simple_with_errors0/junit.xml' mode='w' encoding='utf-8'>\n_______________________ TestPython.test_timing_function ________________________\n\nself = <test_junitxml.TestPython object at 0xffff9c523970>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_timing_function0')>\n\n    def test_timing_function(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import time, pytest\n            def setup_module():\n                time.sleep(0.01)\n            def teardown_module():\n                time.sleep(0.01)\n            def test_sleep():\n                time.sleep(0.01)\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:154: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c5f1160>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_timing_function0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_timing_function0\ncollected 1 item\n\ntest_timing_function.py .                                                [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_timing_function0/junit.xml -\n=========================== 1 passed in 0.05 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_timing_function0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_timing_function0/junit.xml' mode='w' encoding='utf-8'>\n_________________ TestPython.test_junit_duration_report[call] __________________\n\nself = <test_junitxml.TestPython object at 0xffff9c6206a0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_junit_duration_report0')>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0xffff9c620d60>\nduration_report = 'call'\n\n    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n    def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n    \n        # mock LogXML.node_reporter so it always sets a known duration to each test report object\n        original_node_reporter = LogXML.node_reporter\n    \n        def node_reporter_wrapper(s, report):\n            report.duration = 1.0\n            reporter = original_node_reporter(s, report)\n            return reporter\n    \n        monkeypatch.setattr(LogXML, \"node_reporter\", node_reporter_wrapper)\n    \n        testdir.makepyfile(\n            \"\"\"\n            def test_foo():\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(\n            testdir, \"-o\", \"junit_duration_report={}\".format(duration_report)\n        )\n\n/pytest-dev__pytest/testing/test_junitxml.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c620ac0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_junit_duration_report0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_junit_duration_report0\ncollected 1 item\n\ntest_junit_duration_report.py .                                          [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_junit_duration_report0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_junit_duration_report0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_junit_duration_report0/junit.xml' mode='w' encoding='utf-8'>\n_________________ TestPython.test_junit_duration_report[total] _________________\n\nself = <test_junitxml.TestPython object at 0xffff9c6885b0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_junit_duration_report1')>\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0xffff9c660df0>\nduration_report = 'total'\n\n    @pytest.mark.parametrize(\"duration_report\", [\"call\", \"total\"])\n    def test_junit_duration_report(self, testdir, monkeypatch, duration_report):\n    \n        # mock LogXML.node_reporter so it always sets a known duration to each test report object\n        original_node_reporter = LogXML.node_reporter\n    \n        def node_reporter_wrapper(s, report):\n            report.duration = 1.0\n            reporter = original_node_reporter(s, report)\n            return reporter\n    \n        monkeypatch.setattr(LogXML, \"node_reporter\", node_reporter_wrapper)\n    \n        testdir.makepyfile(\n            \"\"\"\n            def test_foo():\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(\n            testdir, \"-o\", \"junit_duration_report={}\".format(duration_report)\n        )\n\n/pytest-dev__pytest/testing/test_junitxml.py:179: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c6b1730>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_junit_duration_report1/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_junit_duration_report1\ncollected 1 item\n\ntest_junit_duration_report.py .                                          [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_junit_duration_report1/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_junit_duration_report1/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_junit_duration_report1/junit.xml' mode='w' encoding='utf-8'>\n_________________________ TestPython.test_setup_error __________________________\n\nself = <test_junitxml.TestPython object at 0xffff9c1e5370>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_setup_error0')>\n\n    def test_setup_error(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            @pytest.fixture\n            def arg(request):\n                raise ValueError()\n            def test_function(arg):\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:203: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c1c4490>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_setup_error0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_setup_error0\ncollected 1 item\n\ntest_setup_error.py E                                                    [100%]\n\n==================================== ERRORS ====================================\n_______________________ ERROR at setup of test_function ________________________\n\nrequest = <SubRequest 'arg' for <Function test_function>>\n\n    @pytest.fixture\n    def arg(request):\n>       raise ValueError()\nE       ValueError\n\ntest_setup_error.py:5: ValueError\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_setup_error0/junit.xml -\n=========================== 1 error in 0.01 seconds ============================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_setup_error0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_setup_error0/junit.xml' mode='w' encoding='utf-8'>\n________________________ TestPython.test_teardown_error ________________________\n\nself = <test_junitxml.TestPython object at 0xffff9c43eee0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_teardown_error0')>\n\n    def test_teardown_error(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            @pytest.fixture\n            def arg():\n                yield\n                raise ValueError()\n            def test_function(arg):\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c353dc0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_teardown_error0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_teardown_error0\ncollected 1 item\n\ntest_teardown_error.py .E                                                [100%]\n\n==================================== ERRORS ====================================\n______________________ ERROR at teardown of test_function ______________________\n\n    @pytest.fixture\n    def arg():\n        yield\n>       raise ValueError()\nE       ValueError\n\ntest_teardown_error.py:6: ValueError\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_teardown_error0/junit.xml -\n====================== 1 passed, 1 error in 0.01 seconds =======================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_teardown_error0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_teardown_error0/junit.xml' mode='w' encoding='utf-8'>\n_________________ TestPython.test_call_failure_teardown_error __________________\n\nself = <test_junitxml.TestPython object at 0xffff9c0a06a0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_call_failure_teardown_error0')>\n\n    def test_call_failure_teardown_error(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            @pytest.fixture\n            def arg():\n                yield\n                raise Exception(\"Teardown Exception\")\n            def test_function(arg):\n                raise Exception(\"Call Exception\")\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:248: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c189340>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_call_failure_teardown_error0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_call_failure_teardown_error0\ncollected 1 item\n\ntest_call_failure_teardown_error.py FE                                   [100%]\n\n==================================== ERRORS ====================================\n______________________ ERROR at teardown of test_function ______________________\n\n    @pytest.fixture\n    def arg():\n        yield\n>       raise Exception(\"Teardown Exception\")\nE       Exception: Teardown Exception\n\ntest_call_failure_teardown_error.py:6: Exception\n=================================== FAILURES ===================================\n________________________________ test_function _________________________________\n\narg = None\n\n    def test_function(arg):\n>       raise Exception(\"Call Exception\")\nE       Exception: Call Exception\n\ntest_call_failure_teardown_error.py:8: Exception\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_call_failure_teardown_error0/junit.xml -\n====================== 1 failed, 1 error in 0.01 seconds =======================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_call_failure_teardown_error0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_call_failure_teardown_error0/junit.xml' mode='w' encoding='utf-8'>\n__________________ TestPython.test_skip_contains_name_reason ___________________\n\nself = <test_junitxml.TestPython object at 0xffff9c0b55e0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_skip_contains_name_reason0')>\n\n    def test_skip_contains_name_reason(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            def test_skip():\n                pytest.skip(\"hello23\")\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:268: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c0aa070>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_skip_contains_name_reason0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_skip_contains_name_reason0\ncollected 1 item\n\ntest_skip_contains_name_reason.py s                                      [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_skip_contains_name_reason0/junit.xml -\n========================== 1 skipped in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_skip_contains_name_reason0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_skip_contains_name_reason0/junit.xml' mode='w' encoding='utf-8'>\n________________ TestPython.test_mark_skip_contains_name_reason ________________\n\nself = <test_junitxml.TestPython object at 0xffff9c09ca30>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_mark_skip_contains_name_reason0')>\n\n    def test_mark_skip_contains_name_reason(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skip(reason=\"hello24\")\n            def test_skip():\n                assert True\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:286: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c714af0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_mark_skip_contains_name_reason0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_mark_skip_contains_name_reason0\ncollected 1 item\n\ntest_mark_skip_contains_name_reason.py s                                 [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_mark_skip_contains_name_reason0/junit.xml -\n========================== 1 skipped in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_mark_skip_contains_name_reason0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_mark_skip_contains_name_reason0/junit.xml' mode='w' encoding='utf-8'>\n_______________ TestPython.test_mark_skipif_contains_name_reason _______________\n\nself = <test_junitxml.TestPython object at 0xffff9bef9c10>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_mark_skipif_contains_name_reason0')>\n\n    def test_mark_skipif_contains_name_reason(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            GLOBAL_CONDITION = True\n            @pytest.mark.skipif(GLOBAL_CONDITION, reason=\"hello25\")\n            def test_skip():\n                assert True\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:307: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bfd08b0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_mark_skipif_contains_name_reason0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_mark_skipif_contains_name_reason0\ncollected 1 item\n\ntest_mark_skipif_contains_name_reason.py s                               [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_mark_skipif_contains_name_reason0/junit.xml -\n========================== 1 skipped in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_mark_skipif_contains_name_reason0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_mark_skipif_contains_name_reason0/junit.xml' mode='w' encoding='utf-8'>\n_______________ TestPython.test_mark_skip_doesnt_capture_output ________________\n\nself = <test_junitxml.TestPython object at 0xffff9c327d30>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_mark_skip_doesnt_capture_output0')>\n\n    def test_mark_skip_doesnt_capture_output(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skip(reason=\"foo\")\n            def test_skip():\n                print(\"bar!\")\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:327: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bef0370>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_mark_skip_doesnt_capture_output0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_mark_skip_doesnt_capture_output0\ncollected 1 item\n\ntest_mark_skip_doesnt_capture_output.py s                                [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_mark_skip_doesnt_capture_output0/junit.xml -\n========================== 1 skipped in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_mark_skip_doesnt_capture_output0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_mark_skip_doesnt_capture_output0/junit.xml' mode='w' encoding='utf-8'>\n______________________ TestPython.test_classname_instance ______________________\n\nself = <test_junitxml.TestPython object at 0xffff9bde26d0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_classname_instance0')>\n\n    def test_classname_instance(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            class TestClass(object):\n                def test_method(self):\n                    assert 0\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:340: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c3ca3d0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_classname_instance0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_classname_instance0\ncollected 1 item\n\ntest_classname_instance.py F                                             [100%]\n\n=================================== FAILURES ===================================\n____________________________ TestClass.test_method _____________________________\n\nself = <test_classname_instance.TestClass object at 0xffff9c0f6370>\n\n    def test_method(self):\n>       assert 0\nE       assert 0\n\ntest_classname_instance.py:3: AssertionError\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_classname_instance0/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_classname_instance0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_classname_instance0/junit.xml' mode='w' encoding='utf-8'>\n_____________________ TestPython.test_classname_nested_dir _____________________\n\nself = <test_junitxml.TestPython object at 0xffff9bf2a340>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_classname_nested_dir0')>\n\n    def test_classname_nested_dir(self, testdir):\n        p = testdir.tmpdir.ensure(\"sub\", \"test_hello.py\")\n        p.write(\"def test_func(): 0/0\")\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:352: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c010af0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_classname_nested_dir0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_classname_nested_dir0\ncollected 1 item\n\nsub/test_hello.py F                                                      [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_func ___________________________________\n\n>   def test_func(): 0/0\nE   ZeroDivisionError: division by zero\n\nsub/test_hello.py:1: ZeroDivisionError\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_classname_nested_dir0/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_classname_nested_dir0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_classname_nested_dir0/junit.xml' mode='w' encoding='utf-8'>\n________________________ TestPython.test_internal_error ________________________\n\nself = <test_junitxml.TestPython object at 0xffff9c3e9f10>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_internal_error0')>\n\n    def test_internal_error(self, testdir):\n        testdir.makeconftest(\"def pytest_runtest_protocol(): 0 / 0\")\n        testdir.makepyfile(\"def test_function(): pass\")\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:362: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c409cd0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_internal_error0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_internal_error0\ncollected 1 item\nINTERNALERROR> Traceback (most recent call last):\nINTERNALERROR>   File \"/pytest-dev__pytest/src/_pytest/main.py\", line 191, in wrap_session\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\nINTERNALERROR>   File \"/pytest-dev__pytest/src/_pytest/main.py\", line 235, in _main\nINTERNALERROR>     config.hook.pytest_runtestloop(session=session)\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/hooks.py\", line 286, in __call__\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/manager.py\", line 93, in _hookexec\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/manager.py\", line 337, in traced_hookexec\nINTERNALERROR>     return outcome.get_result()\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 80, in get_result\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 52, in from_call\nINTERNALERROR>     result = func()\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/manager.py\", line 335, in <lambda>\nINTERNALERROR>     outcome = _Result.from_call(lambda: oldcall(hook, hook_impls, kwargs))\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/manager.py\", line 84, in <lambda>\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 208, in _multicall\nINTERNALERROR>     return outcome.get_result()\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 80, in get_result\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\nINTERNALERROR>     res = hook_impl.function(*args)\nINTERNALERROR>   File \"/pytest-dev__pytest/src/_pytest/main.py\", line 256, in pytest_runtestloop\nINTERNALERROR>     item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/hooks.py\", line 286, in __call__\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/manager.py\", line 93, in _hookexec\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/manager.py\", line 337, in traced_hookexec\nINTERNALERROR>     return outcome.get_result()\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 80, in get_result\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 52, in from_call\nINTERNALERROR>     result = func()\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/manager.py\", line 335, in <lambda>\nINTERNALERROR>     outcome = _Result.from_call(lambda: oldcall(hook, hook_impls, kwargs))\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/manager.py\", line 84, in <lambda>\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 208, in _multicall\nINTERNALERROR>     return outcome.get_result()\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 80, in get_result\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\nINTERNALERROR>   File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\nINTERNALERROR>     res = hook_impl.function(*args)\nINTERNALERROR>   File \"/tmp/pytest-of-root/pytest-0/test_internal_error0/conftest.py\", line 1, in pytest_runtest_protocol\nINTERNALERROR>     def pytest_runtest_protocol(): 0 / 0\nINTERNALERROR> ZeroDivisionError: division by zero\n\n========================= no tests ran in 0.01 seconds =========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_internal_error0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_internal_error0/junit.xml' mode='w' encoding='utf-8'>\n_____________________ TestPython.test_failure_function[no] _____________________\n\nself = <test_junitxml.TestPython object at 0xffff9c2ceb50>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_failure_function0')>\njunit_logging = 'no'\n\n    @pytest.mark.parametrize(\"junit_logging\", [\"no\", \"system-out\", \"system-err\"])\n    def test_failure_function(self, testdir, junit_logging):\n        testdir.makepyfile(\n            \"\"\"\n            import logging\n            import sys\n    \n            def test_fail():\n                print(\"hello-stdout\")\n                sys.stderr.write(\"hello-stderr\\\\n\")\n                logging.info('info msg')\n                logging.warning('warning msg')\n                raise ValueError(42)\n        \"\"\"\n        )\n    \n>       result, dom = runandparse(testdir, \"-o\", \"junit_logging=%s\" % junit_logging)\n\n/pytest-dev__pytest/testing/test_junitxml.py:388: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c2eb0a0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_failure_function0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_failure_function0\ncollected 1 item\n\ntest_failure_function.py F                                               [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_fail ___________________________________\n\n    def test_fail():\n        print(\"hello-stdout\")\n        sys.stderr.write(\"hello-stderr\\n\")\n        logging.info('info msg')\n        logging.warning('warning msg')\n>       raise ValueError(42)\nE       ValueError: 42\n\ntest_failure_function.py:9: ValueError\n----------------------------- Captured stdout call -----------------------------\nhello-stdout\n----------------------------- Captured stderr call -----------------------------\nhello-stderr\n------------------------------ Captured log call -------------------------------\nWARNING  root:test_failure_function.py:8 warning msg\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_failure_function0/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_failure_function0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_failure_function0/junit.xml' mode='w' encoding='utf-8'>\n------------------------------ Captured log call -------------------------------\nWARNING  root:test_failure_function.py:8 warning msg\n_________________ TestPython.test_failure_function[system-out] _________________\n\nself = <test_junitxml.TestPython object at 0xffff9c3a9f70>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_failure_function1')>\njunit_logging = 'system-out'\n\n    @pytest.mark.parametrize(\"junit_logging\", [\"no\", \"system-out\", \"system-err\"])\n    def test_failure_function(self, testdir, junit_logging):\n        testdir.makepyfile(\n            \"\"\"\n            import logging\n            import sys\n    \n            def test_fail():\n                print(\"hello-stdout\")\n                sys.stderr.write(\"hello-stderr\\\\n\")\n                logging.info('info msg')\n                logging.warning('warning msg')\n                raise ValueError(42)\n        \"\"\"\n        )\n    \n>       result, dom = runandparse(testdir, \"-o\", \"junit_logging=%s\" % junit_logging)\n\n/pytest-dev__pytest/testing/test_junitxml.py:388: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bdb7a00>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_failure_function1/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_failure_function1\ncollected 1 item\n\ntest_failure_function.py F                                               [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_fail ___________________________________\n\n    def test_fail():\n        print(\"hello-stdout\")\n        sys.stderr.write(\"hello-stderr\\n\")\n        logging.info('info msg')\n        logging.warning('warning msg')\n>       raise ValueError(42)\nE       ValueError: 42\n\ntest_failure_function.py:9: ValueError\n----------------------------- Captured stdout call -----------------------------\nhello-stdout\n----------------------------- Captured stderr call -----------------------------\nhello-stderr\n------------------------------ Captured log call -------------------------------\nWARNING  root:test_failure_function.py:8 warning msg\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_failure_function1/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_failure_function1/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_failure_function1/junit.xml' mode='w' encoding='utf-8'>\n------------------------------ Captured log call -------------------------------\nWARNING  root:test_failure_function.py:8 warning msg\n_________________ TestPython.test_failure_function[system-err] _________________\n\nself = <test_junitxml.TestPython object at 0xffff9bd94730>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_failure_function2')>\njunit_logging = 'system-err'\n\n    @pytest.mark.parametrize(\"junit_logging\", [\"no\", \"system-out\", \"system-err\"])\n    def test_failure_function(self, testdir, junit_logging):\n        testdir.makepyfile(\n            \"\"\"\n            import logging\n            import sys\n    \n            def test_fail():\n                print(\"hello-stdout\")\n                sys.stderr.write(\"hello-stderr\\\\n\")\n                logging.info('info msg')\n                logging.warning('warning msg')\n                raise ValueError(42)\n        \"\"\"\n        )\n    \n>       result, dom = runandparse(testdir, \"-o\", \"junit_logging=%s\" % junit_logging)\n\n/pytest-dev__pytest/testing/test_junitxml.py:388: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9be74fa0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_failure_function2/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_failure_function2\ncollected 1 item\n\ntest_failure_function.py F                                               [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_fail ___________________________________\n\n    def test_fail():\n        print(\"hello-stdout\")\n        sys.stderr.write(\"hello-stderr\\n\")\n        logging.info('info msg')\n        logging.warning('warning msg')\n>       raise ValueError(42)\nE       ValueError: 42\n\ntest_failure_function.py:9: ValueError\n----------------------------- Captured stdout call -----------------------------\nhello-stdout\n----------------------------- Captured stderr call -----------------------------\nhello-stderr\n------------------------------ Captured log call -------------------------------\nWARNING  root:test_failure_function.py:8 warning msg\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_failure_function2/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_failure_function2/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_failure_function2/junit.xml' mode='w' encoding='utf-8'>\n------------------------------ Captured log call -------------------------------\nWARNING  root:test_failure_function.py:8 warning msg\n___________________ TestPython.test_failure_verbose_message ____________________\n\nself = <test_junitxml.TestPython object at 0xffff9be6e130>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_failure_verbose_message0')>\n\n    def test_failure_verbose_message(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import sys\n            def test_fail():\n                assert 0, \"An error\"\n        \"\"\"\n        )\n    \n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:425: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bfd9550>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_failure_verbose_message0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_failure_verbose_message0\ncollected 1 item\n\ntest_failure_verbose_message.py F                                        [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_fail ___________________________________\n\n    def test_fail():\n>       assert 0, \"An error\"\nE       AssertionError: An error\nE       assert 0\n\ntest_failure_verbose_message.py:3: AssertionError\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_failure_verbose_message0/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_failure_verbose_message0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_failure_verbose_message0/junit.xml' mode='w' encoding='utf-8'>\n________________________ TestPython.test_failure_escape ________________________\n\nself = <test_junitxml.TestPython object at 0xffff9bcd08e0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_failure_escape0')>\n\n    def test_failure_escape(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.parametrize('arg1', \"<&'\", ids=\"<&'\")\n            def test_func(arg1):\n                print(arg1)\n                assert 0\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:441: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bf106a0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_failure_escape0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_failure_escape0\ncollected 3 items\n\ntest_failure_escape.py FFF                                               [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test_func[<] _________________________________\n\narg1 = '<'\n\n    @pytest.mark.parametrize('arg1', \"<&'\", ids=\"<&'\")\n    def test_func(arg1):\n        print(arg1)\n>       assert 0\nE       assert 0\n\ntest_failure_escape.py:5: AssertionError\n----------------------------- Captured stdout call -----------------------------\n<\n_________________________________ test_func[&] _________________________________\n\narg1 = '&'\n\n    @pytest.mark.parametrize('arg1', \"<&'\", ids=\"<&'\")\n    def test_func(arg1):\n        print(arg1)\n>       assert 0\nE       assert 0\n\ntest_failure_escape.py:5: AssertionError\n----------------------------- Captured stdout call -----------------------------\n&\n_________________________________ test_func['] _________________________________\n\narg1 = \"'\"\n\n    @pytest.mark.parametrize('arg1', \"<&'\", ids=\"<&'\")\n    def test_func(arg1):\n        print(arg1)\n>       assert 0\nE       assert 0\n\ntest_failure_escape.py:5: AssertionError\n----------------------------- Captured stdout call -----------------------------\n'\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_failure_escape0/junit.xml -\n=========================== 3 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_failure_escape0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_failure_escape0/junit.xml' mode='w' encoding='utf-8'>\n_______________________ TestPython.test_junit_prefixing ________________________\n\nself = <test_junitxml.TestPython object at 0xffff9c154550>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_junit_prefixing0')>\n\n    def test_junit_prefixing(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            def test_func():\n                assert 0\n            class TestHello(object):\n                def test_hello(self):\n                    pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir, \"--junitprefix=xyz\")\n\n/pytest-dev__pytest/testing/test_junitxml.py:466: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c153a00>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_junit_prefixing0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_junit_prefixing0\ncollected 2 items\n\ntest_junit_prefixing.py F.                                               [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_func ___________________________________\n\n    def test_func():\n>       assert 0\nE       assert 0\n\ntest_junit_prefixing.py:2: AssertionError\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_junit_prefixing0/junit.xml -\n====================== 1 failed, 1 passed in 0.01 seconds ======================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_junit_prefixing0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_junit_prefixing0/junit.xml' mode='w' encoding='utf-8'>\n______________________ TestPython.test_xfailure_function _______________________\n\nself = <test_junitxml.TestPython object at 0xffff9c1132b0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_xfailure_function0')>\n\n    def test_xfailure_function(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            def test_xfail():\n                pytest.xfail(\"42\")\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:485: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c100850>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_xfailure_function0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_xfailure_function0\ncollected 1 item\n\ntest_xfailure_function.py x                                              [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_xfailure_function0/junit.xml -\n========================== 1 xfailed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_xfailure_function0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_xfailure_function0/junit.xml' mode='w' encoding='utf-8'>\n_______________________ TestPython.test_xfailure_marker ________________________\n\nself = <test_junitxml.TestPython object at 0xffff9bf47580>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_xfailure_marker0')>\n\n    def test_xfailure_marker(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail(reason=\"42\")\n            def test_xfail():\n                assert False\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:504: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bc53e80>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_xfailure_marker0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_xfailure_marker0\ncollected 1 item\n\ntest_xfailure_marker.py x                                                [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_xfailure_marker0/junit.xml -\n========================== 1 xfailed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_xfailure_marker0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_xfailure_marker0/junit.xml' mode='w' encoding='utf-8'>\n__________________ TestPython.test_xfail_captures_output_once __________________\n\nself = <test_junitxml.TestPython object at 0xffff9bf77730>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_xfail_captures_output_once0')>\n\n    def test_xfail_captures_output_once(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import sys\n            import pytest\n    \n            @pytest.mark.xfail()\n            def test_fail():\n                sys.stdout.write('XFAIL This is stdout')\n                sys.stderr.write('XFAIL This is stderr')\n                assert 0\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:526: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bd14ee0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_xfail_captures_output_once0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_xfail_captures_output_once0\ncollected 1 item\n\ntest_xfail_captures_output_once.py x                                     [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_xfail_captures_output_once0/junit.xml -\n========================== 1 xfailed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_xfail_captures_output_once0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_xfail_captures_output_once0/junit.xml' mode='w' encoding='utf-8'>\n________________________ TestPython.test_xfailure_xpass ________________________\n\nself = <test_junitxml.TestPython object at 0xffff9bb17820>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_xfailure_xpass0')>\n\n    def test_xfailure_xpass(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail\n            def test_xpass():\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:541: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bb17580>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_xfailure_xpass0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_xfailure_xpass0\ncollected 1 item\n\ntest_xfailure_xpass.py X                                                 [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_xfailure_xpass0/junit.xml -\n========================== 1 xpassed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_xfailure_xpass0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_xfailure_xpass0/junit.xml' mode='w' encoding='utf-8'>\n____________________ TestPython.test_xfailure_xpass_strict _____________________\n\nself = <test_junitxml.TestPython object at 0xffff9bfa2c40>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_xfailure_xpass_strict0')>\n\n    def test_xfailure_xpass_strict(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.xfail(strict=True, reason=\"This needs to fail!\")\n            def test_xpass():\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:557: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9be2a760>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_xfailure_xpass_strict0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_xfailure_xpass_strict0\ncollected 1 item\n\ntest_xfailure_xpass_strict.py F                                          [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_xpass __________________________________\n[XPASS(strict)] This needs to fail!\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_xfailure_xpass_strict0/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_xfailure_xpass_strict0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_xfailure_xpass_strict0/junit.xml' mode='w' encoding='utf-8'>\n________________________ TestPython.test_collect_error _________________________\n\nself = <test_junitxml.TestPython object at 0xffff9bc25fd0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_collect_error0')>\n\n    def test_collect_error(self, testdir):\n        testdir.makepyfile(\"syntax error\")\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:568: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9c113220>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_collect_error0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_collect_error0\ncollected 0 items / 1 errors\n\n==================================== ERRORS ====================================\n____________________ ERROR collecting test_collect_error.py ____________________\n/pytest-dev__pytest/src/_pytest/python.py:494: in _importtestmodule\n    mod = self.fspath.pyimport(ensuresyspath=importmode)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/py/_path/local.py:704: in pyimport\n    __import__(modname)\n<frozen importlib._bootstrap>:1007: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:986: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:680: in _load_unlocked\n    ???\n/pytest-dev__pytest/src/_pytest/assertion/rewrite.py:144: in exec_module\n    source_stat, co = _rewrite_test(fn, self.config)\n/pytest-dev__pytest/src/_pytest/assertion/rewrite.py:293: in _rewrite_test\n    tree = ast.parse(source, filename=fn)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/ast.py:50: in parse\n    return compile(source, filename, mode, flags,\nE     File \"/tmp/pytest-of-root/pytest-0/test_collect_error0/test_collect_error.py\", line 1\nE       syntax error\nE              ^\nE   SyntaxError: invalid syntax\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_collect_error0/junit.xml -\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!\n=========================== 1 error in 0.09 seconds ============================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_collect_error0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_collect_error0/junit.xml' mode='w' encoding='utf-8'>\n___________________________ TestPython.test_unicode ____________________________\n\nself = <test_junitxml.TestPython object at 0xffff9ba6d190>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_unicode0')>\n\n    def test_unicode(self, testdir):\n        value = \"hx\\xc4\\x85\\xc4\\x87\\n\"\n        testdir.makepyfile(\n            \"\"\"\\\n            # coding: latin1\n            def test_hello():\n                print(%r)\n                assert 0\n            \"\"\"\n            % value\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:588: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9ba69520>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_unicode0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_unicode0\ncollected 1 item\n\ntest_unicode.py F                                                        [100%]\n\n=================================== FAILURES ===================================\n__________________________________ test_hello __________________________________\n\n    def test_hello():\n        print('hx\u00c3\u0084\\x85\u00c3\u0084\\x87\\n')\n>       assert 0\nE       assert 0\n\ntest_unicode.py:4: AssertionError\n----------------------------- Captured stdout call -----------------------------\nhx\u00c3\u0084\u0085\u00c3\u0084\u0087\n\n--- generated xml file: /tmp/pytest-of-root/pytest-0/test_unicode0/junit.xml ---\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_unicode0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_unicode0/junit.xml' mode='w' encoding='utf-8'>\n______________________ TestPython.test_assertion_binchars ______________________\n\nself = <test_junitxml.TestPython object at 0xffff9b842670>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_assertion_binchars0')>\n\n    def test_assertion_binchars(self, testdir):\n        \"\"\"this test did fail when the escaping wasn't strict\"\"\"\n        testdir.makepyfile(\n            \"\"\"\n    \n            M1 = '\\x01\\x02\\x03\\x04'\n            M2 = '\\x01\\x02\\x03\\x05'\n    \n            def test_str_compare():\n                assert M1 == M2\n            \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:606: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9ba1aca0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_assertion_binchars0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_assertion_binchars0\ncollected 1 item\n\ntest_assertion_binchars.py F                                             [100%]\n\n=================================== FAILURES ===================================\n_______________________________ test_str_compare _______________________________\n\n    def test_str_compare():\n>       assert M1 == M2\nE       AssertionError: assert '\\x01\\x02\\x03\\x04' == '\\x01\\x02\\x03\\x05'\nE         - \u0001\u0002\u0003\u0004\nE         ?    ^\nE         + \u0001\u0002\u0003\u0005\nE         ?    ^\n\ntest_assertion_binchars.py:5: AssertionError\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_assertion_binchars0/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_assertion_binchars0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_assertion_binchars0/junit.xml' mode='w' encoding='utf-8'>\n_____________________ TestPython.test_pass_captures_stdout _____________________\n\nself = <test_junitxml.TestPython object at 0xffff9bae6e80>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_pass_captures_stdout0')>\n\n    def test_pass_captures_stdout(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            def test_pass():\n                print('hello-stdout')\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:616: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bac2550>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_pass_captures_stdout0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_pass_captures_stdout0\ncollected 1 item\n\ntest_pass_captures_stdout.py .                                           [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_pass_captures_stdout0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_pass_captures_stdout0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_pass_captures_stdout0/junit.xml' mode='w' encoding='utf-8'>\n_____________________ TestPython.test_pass_captures_stderr _____________________\n\nself = <test_junitxml.TestPython object at 0xffff9baaae20>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_pass_captures_stderr0')>\n\n    def test_pass_captures_stderr(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import sys\n            def test_pass():\n                sys.stderr.write('hello-stderr')\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:630: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9baaa8e0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_pass_captures_stderr0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_pass_captures_stderr0\ncollected 1 item\n\ntest_pass_captures_stderr.py .                                           [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_pass_captures_stderr0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_pass_captures_stderr0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_pass_captures_stderr0/junit.xml' mode='w' encoding='utf-8'>\n_________________ TestPython.test_setup_error_captures_stdout __________________\n\nself = <test_junitxml.TestPython object at 0xffff9b9f1d30>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_setup_error_captures_stdout0')>\n\n    def test_setup_error_captures_stdout(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            @pytest.fixture\n            def arg(request):\n                print('hello-stdout')\n                raise ValueError()\n            def test_function(arg):\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:649: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b9afd90>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_setup_error_captures_stdout0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_setup_error_captures_stdout0\ncollected 1 item\n\ntest_setup_error_captures_stdout.py E                                    [100%]\n\n==================================== ERRORS ====================================\n_______________________ ERROR at setup of test_function ________________________\n\nrequest = <SubRequest 'arg' for <Function test_function>>\n\n    @pytest.fixture\n    def arg(request):\n        print('hello-stdout')\n>       raise ValueError()\nE       ValueError\n\ntest_setup_error_captures_stdout.py:6: ValueError\n---------------------------- Captured stdout setup -----------------------------\nhello-stdout\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_setup_error_captures_stdout0/junit.xml -\n=========================== 1 error in 0.01 seconds ============================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_setup_error_captures_stdout0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_setup_error_captures_stdout0/junit.xml' mode='w' encoding='utf-8'>\n_________________ TestPython.test_setup_error_captures_stderr __________________\n\nself = <test_junitxml.TestPython object at 0xffff9b8956d0>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_setup_error_captures_stderr0')>\n\n    def test_setup_error_captures_stderr(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import sys\n            import pytest\n    \n            @pytest.fixture\n            def arg(request):\n                sys.stderr.write('hello-stderr')\n                raise ValueError()\n            def test_function(arg):\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:669: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b838040>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_setup_error_captures_stderr0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_setup_error_captures_stderr0\ncollected 1 item\n\ntest_setup_error_captures_stderr.py E                                    [100%]\n\n==================================== ERRORS ====================================\n_______________________ ERROR at setup of test_function ________________________\n\nrequest = <SubRequest 'arg' for <Function test_function>>\n\n    @pytest.fixture\n    def arg(request):\n        sys.stderr.write('hello-stderr')\n>       raise ValueError()\nE       ValueError\n\ntest_setup_error_captures_stderr.py:7: ValueError\n---------------------------- Captured stderr setup -----------------------------\nhello-stderr\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_setup_error_captures_stderr0/junit.xml -\n=========================== 1 error in 0.01 seconds ============================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_setup_error_captures_stderr0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_setup_error_captures_stderr0/junit.xml' mode='w' encoding='utf-8'>\n_____________________ TestPython.test_avoid_double_stdout ______________________\n\nself = <test_junitxml.TestPython object at 0xffff9be9e730>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_avoid_double_stdout0')>\n\n    def test_avoid_double_stdout(self, testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import sys\n            import pytest\n    \n            @pytest.fixture\n            def arg(request):\n                yield\n                sys.stdout.write('hello-stdout teardown')\n                raise ValueError()\n            def test_function(arg):\n                sys.stdout.write('hello-stdout call')\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:690: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b9d6c10>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_avoid_double_stdout0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_avoid_double_stdout0\ncollected 1 item\n\ntest_avoid_double_stdout.py .E                                           [100%]\n\n==================================== ERRORS ====================================\n______________________ ERROR at teardown of test_function ______________________\n\nrequest = <SubRequest 'arg' for <Function test_function>>\n\n    @pytest.fixture\n    def arg(request):\n        yield\n        sys.stdout.write('hello-stdout teardown')\n>       raise ValueError()\nE       ValueError\n\ntest_avoid_double_stdout.py:8: ValueError\n----------------------------- Captured stdout call -----------------------------\nhello-stdout call\n--------------------------- Captured stdout teardown ---------------------------\nhello-stdout teardown\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_avoid_double_stdout0/junit.xml -\n====================== 1 passed, 1 error in 0.01 seconds =======================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_avoid_double_stdout0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_avoid_double_stdout0/junit.xml' mode='w' encoding='utf-8'>\n______________________ TestNonPython.test_summing_simple _______________________\n\nself = <test_junitxml.TestNonPython object at 0xffff9b5fa160>\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_summing_simple1')>\n\n    def test_summing_simple(self, testdir):\n        testdir.makeconftest(\n            \"\"\"\n            import pytest\n            def pytest_collect_file(path, parent):\n                if path.ext == \".xyz\":\n                    return MyItem(path, parent)\n            class MyItem(pytest.Item):\n                def __init__(self, path, parent):\n                    super(MyItem, self).__init__(path.basename, parent)\n                    self.fspath = path\n                def runtest(self):\n                    raise ValueError(42)\n                def repr_failure(self, excinfo):\n                    return \"custom item runtest failed\"\n        \"\"\"\n        )\n        testdir.tmpdir.join(\"myfile.xyz\").write(\"hello\")\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:751: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b5d9340>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_summing_simple1/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_summing_simple1\ncollected 1 item\n\n. F                                                                      [100%]\n\n=================================== FAILURES ===================================\n_________________________________ test session _________________________________\ncustom item runtest failed\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_summing_simple1/junit.xml -\n=========================== 1 failed in 0.00 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_summing_simple1/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_summing_simple1/junit.xml' mode='w' encoding='utf-8'>\n________________________________ test_nullbyte _________________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_nullbyte0')>\n\n    def test_nullbyte(testdir):\n        # A null byte can not occur in XML (see section 2.2 of the spec)\n        testdir.makepyfile(\n            \"\"\"\n            import sys\n            def test_print_nullbyte():\n                sys.stdout.write('Here the null -->' + chr(0) + '<--')\n                sys.stdout.write('In repr form -->' + repr(chr(0)) + '<--')\n                assert False\n        \"\"\"\n        )\n        xmlf = testdir.tmpdir.join(\"junit.xml\")\n        testdir.runpytest(\"--junitxml=%s\" % xmlf)\n        text = xmlf.read()\n        assert \"\\x00\" not in text\n>       assert \"#x00\" in text\nE       assert '#x00' in '<?xml version=\"1.0\" encoding=\"utf-8\"?>'\n\n/pytest-dev__pytest/testing/test_junitxml.py:777: AssertionError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_nullbyte0\ncollected 1 item\n\ntest_nullbyte.py F                                                       [100%]\n\n=================================== FAILURES ===================================\n_____________________________ test_print_nullbyte ______________________________\n\n    def test_print_nullbyte():\n        sys.stdout.write('Here the null -->' + chr(0) + '<--')\n        sys.stdout.write('In repr form -->' + repr(chr(0)) + '<--')\n>       assert False\nE       assert False\n\ntest_nullbyte.py:5: AssertionError\n----------------------------- Captured stdout call -----------------------------\nHere the null -->\u0000<--In repr form -->'\\x00'<--\n-- generated xml file: /tmp/pytest-of-root/pytest-0/test_nullbyte0/junit.xml ---\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_nullbyte0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_nullbyte0/junit.xml' mode='w' encoding='utf-8'>\n____________________________ test_nullbyte_replace _____________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_nullbyte_replace0')>\n\n    def test_nullbyte_replace(testdir):\n        # Check if the null byte gets replaced\n        testdir.makepyfile(\n            \"\"\"\n            import sys\n            def test_print_nullbyte():\n                sys.stdout.write('Here the null -->' + chr(0) + '<--')\n                sys.stdout.write('In repr form -->' + repr(chr(0)) + '<--')\n                assert False\n        \"\"\"\n        )\n        xmlf = testdir.tmpdir.join(\"junit.xml\")\n        testdir.runpytest(\"--junitxml=%s\" % xmlf)\n        text = xmlf.read()\n>       assert \"#x0\" in text\nE       assert '#x0' in '<?xml version=\"1.0\" encoding=\"utf-8\"?>'\n\n/pytest-dev__pytest/testing/test_junitxml.py:794: AssertionError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_nullbyte_replace0\ncollected 1 item\n\ntest_nullbyte_replace.py F                                               [100%]\n\n=================================== FAILURES ===================================\n_____________________________ test_print_nullbyte ______________________________\n\n    def test_print_nullbyte():\n        sys.stdout.write('Here the null -->' + chr(0) + '<--')\n        sys.stdout.write('In repr form -->' + repr(chr(0)) + '<--')\n>       assert False\nE       assert False\n\ntest_nullbyte_replace.py:5: AssertionError\n----------------------------- Captured stdout call -----------------------------\nHere the null -->\u0000<--In repr form -->'\\x00'<--\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_nullbyte_replace0/junit.xml -\n=========================== 1 failed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_nullbyte_replace0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_nullbyte_replace0/junit.xml' mode='w' encoding='utf-8'>\n_____________________ test_escaped_parametrized_names_xml ______________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_escaped_parametrized_names_xml0')>\n\n    def test_escaped_parametrized_names_xml(testdir):\n        testdir.makepyfile(\n            \"\"\"\\\n            import pytest\n            @pytest.mark.parametrize('char', [\"\\\\x00\"])\n            def test_func(char):\n                assert char\n            \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:893: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b9505e0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_escaped_parametrized_names_xml0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_escaped_parametrized_names_xml0\ncollected 1 item\n\ntest_escaped_parametrized_names_xml.py .                                 [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_escaped_parametrized_names_xml0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_escaped_parametrized_names_xml0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_escaped_parametrized_names_xml0/junit.xml' mode='w' encoding='utf-8'>\n__________________ test_double_colon_split_function_issue469 ___________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_double_colon_split_function_issue4690')>\n\n    def test_double_colon_split_function_issue469(testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.parametrize('param', [\"double::colon\"])\n            def test_func(param):\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b907ee0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_double_colon_split_function_issue4690/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_double_colon_split_function_issue4690\ncollected 1 item\n\ntest_double_colon_split_function_issue469.py .                           [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_double_colon_split_function_issue4690/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_double_colon_split_function_issue4690/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_double_colon_split_function_issue4690/junit.xml' mode='w' encoding='utf-8'>\n___________________ test_double_colon_split_method_issue469 ____________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_double_colon_split_method_issue4690')>\n\n    def test_double_colon_split_method_issue469(testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            class TestClass(object):\n                @pytest.mark.parametrize('param', [\"double::colon\"])\n                def test_func(self, param):\n                    pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:925: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b9696d0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_double_colon_split_method_issue4690/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_double_colon_split_method_issue4690\ncollected 1 item\n\ntest_double_colon_split_method_issue469.py .                             [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_double_colon_split_method_issue4690/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_double_colon_split_method_issue4690/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_double_colon_split_method_issue4690/junit.xml' mode='w' encoding='utf-8'>\n_____________________________ test_record_property _____________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_record_property0')>\n\n    def test_record_property(testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            @pytest.fixture\n            def other(record_property):\n                record_property(\"bar\", 1)\n            def test_record(record_property, other):\n                record_property(\"foo\", \"<1\");\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir, \"-rwv\")\n\n/pytest-dev__pytest/testing/test_junitxml.py:973: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9bb77730>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_record_property0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_record_property0\ncollected 1 item\n\ntest_record_property.py .                                                [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_record_property0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_record_property0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_record_property0/junit.xml' mode='w' encoding='utf-8'>\n________________________ test_record_property_same_name ________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_record_property_same_name0')>\n\n    def test_record_property_same_name(testdir):\n        testdir.makepyfile(\n            \"\"\"\n            def test_record_with_same_name(record_property):\n                record_property(\"foo\", \"bar\")\n                record_property(\"foo\", \"baz\")\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir, \"-rw\")\n\n/pytest-dev__pytest/testing/test_junitxml.py:990: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b969f10>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_record_property_same_name0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_record_property_same_name0\ncollected 1 item\n\ntest_record_property_same_name.py .                                      [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_record_property_same_name0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_record_property_same_name0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_record_property_same_name0/junit.xml' mode='w' encoding='utf-8'>\n____________________________ test_record_attribute _____________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_record_attribute0')>\n\n    @pytest.mark.filterwarnings(\"default\")\n    def test_record_attribute(testdir):\n        testdir.makeini(\n            \"\"\"\n            [pytest]\n            junit_family = xunit1\n        \"\"\"\n        )\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            @pytest.fixture\n            def other(record_xml_attribute):\n                record_xml_attribute(\"bar\", 1)\n            def test_record(record_xml_attribute, other):\n                record_xml_attribute(\"foo\", \"<1\");\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir, \"-rw\")\n\n/pytest-dev__pytest/testing/test_junitxml.py:1032: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b2d1910>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_record_attribute0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_record_attribute0, inifile: tox.ini\ncollected 1 item\n\ntest_record_attribute.py .                                               [100%]\n\n=============================== warnings summary ===============================\ntest_record_attribute.py::test_record\n  test_record_attribute.py:6: PytestExperimentalApiWarning: record_xml_attribute is an experimental feature\n    def test_record(record_xml_attribute, other):\n\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_record_attribute0/junit.xml -\n===================== 1 passed, 1 warnings in 0.01 seconds =====================\n______________ test_record_fixtures_xunit2[record_xml_attribute] _______________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit20')>\nfixture_name = 'record_xml_attribute'\n\n    @pytest.mark.filterwarnings(\"default\")\n    @pytest.mark.parametrize(\"fixture_name\", [\"record_xml_attribute\", \"record_property\"])\n    def test_record_fixtures_xunit2(testdir, fixture_name):\n        \"\"\"Ensure record_xml_attribute and record_property drop values when outside of legacy family\n        \"\"\"\n        testdir.makeini(\n            \"\"\"\n            [pytest]\n            junit_family = xunit2\n        \"\"\"\n        )\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            @pytest.fixture\n            def other({fixture_name}):\n                {fixture_name}(\"bar\", 1)\n            def test_record({fixture_name}, other):\n                {fixture_name}(\"foo\", \"<1\");\n        \"\"\".format(\n                fixture_name=fixture_name\n            )\n        )\n    \n>       result, dom = runandparse(testdir, \"-rw\")\n\n/pytest-dev__pytest/testing/test_junitxml.py:1067: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b4ef6a0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit20/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit20, inifile: tox.ini\ncollected 1 item\n\ntest_record_fixtures_xunit2.py .                                         [100%]\n\n=============================== warnings summary ===============================\ntest_record_fixtures_xunit2.py::test_record\n  test_record_fixtures_xunit2.py:6: PytestExperimentalApiWarning: record_xml_attribute is an experimental feature\n    def test_record(record_xml_attribute, other):\n\ntest_record_fixtures_xunit2.py::test_record\n  test_record_fixtures_xunit2.py:6: PytestWarning: record_xml_attribute is incompatible with junit_family 'xunit2' (use 'legacy' or 'xunit1')\n    def test_record(record_xml_attribute, other):\n\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit20/junit.xml -\n===================== 1 passed, 2 warnings in 0.01 seconds =====================\n_________________ test_record_fixtures_xunit2[record_property] _________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit21')>\nfixture_name = 'record_property'\n\n    @pytest.mark.filterwarnings(\"default\")\n    @pytest.mark.parametrize(\"fixture_name\", [\"record_xml_attribute\", \"record_property\"])\n    def test_record_fixtures_xunit2(testdir, fixture_name):\n        \"\"\"Ensure record_xml_attribute and record_property drop values when outside of legacy family\n        \"\"\"\n        testdir.makeini(\n            \"\"\"\n            [pytest]\n            junit_family = xunit2\n        \"\"\"\n        )\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            @pytest.fixture\n            def other({fixture_name}):\n                {fixture_name}(\"bar\", 1)\n            def test_record({fixture_name}, other):\n                {fixture_name}(\"foo\", \"<1\");\n        \"\"\".format(\n                fixture_name=fixture_name\n            )\n        )\n    \n>       result, dom = runandparse(testdir, \"-rw\")\n\n/pytest-dev__pytest/testing/test_junitxml.py:1067: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b4c4280>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit21/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit21, inifile: tox.ini\ncollected 1 item\n\ntest_record_fixtures_xunit2.py .                                         [100%]\n\n=============================== warnings summary ===============================\ntest_record_fixtures_xunit2.py::test_record\n  test_record_fixtures_xunit2.py:6: PytestWarning: record_property is incompatible with junit_family 'xunit2' (use 'legacy' or 'xunit1')\n    def test_record(record_xml_attribute, other):\n\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit21/junit.xml -\n===================== 1 passed, 1 warnings in 0.01 seconds =====================\n___________________________ test_root_testsuites_tag ___________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_root_testsuites_tag0')>\n\n    def test_root_testsuites_tag(testdir):\n        testdir.makepyfile(\n            \"\"\"\n            def test_x():\n                pass\n        \"\"\"\n        )\n>       _, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:1114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9af468e0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_root_testsuites_tag0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_root_testsuites_tag0\ncollected 1 item\n\ntest_root_testsuites_tag.py .                                            [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_root_testsuites_tag0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_root_testsuites_tag0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_root_testsuites_tag0/junit.xml' mode='w' encoding='utf-8'>\n_______________________________ test_runs_twice ________________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_runs_twice0')>\n\n    def test_runs_twice(testdir):\n        f = testdir.makepyfile(\n            \"\"\"\n            def test_pass():\n                pass\n        \"\"\"\n        )\n    \n>       result, dom = runandparse(testdir, f, f)\n\n/pytest-dev__pytest/testing/test_junitxml.py:1129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b183f70>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_runs_twice0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_runs_twice0\ncollected 2 items\n\ntest_runs_twice.py ..\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_runs_twice0/junit.xml --\n=========================== 2 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_runs_twice0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_runs_twice0/junit.xml' mode='w' encoding='utf-8'>\n_________________________ test_fancy_items_regression __________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_fancy_items_regression0')>\n\n    def test_fancy_items_regression(testdir):\n        # issue 1259\n        testdir.makeconftest(\n            \"\"\"\n            import pytest\n            class FunItem(pytest.Item):\n                def runtest(self):\n                    pass\n            class NoFunItem(pytest.Item):\n                def runtest(self):\n                    pass\n    \n            class FunCollector(pytest.File):\n                def collect(self):\n                    return [\n                        FunItem('a', self),\n                        NoFunItem('a', self),\n                        NoFunItem('b', self),\n                    ]\n    \n            def pytest_collect_file(path, parent):\n                if path.check(ext='.py'):\n                    return FunCollector(path, parent)\n        \"\"\"\n        )\n    \n        testdir.makepyfile(\n            \"\"\"\n            def test_pass():\n                pass\n        \"\"\"\n        )\n    \n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:1184: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b3b2eb0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_fancy_items_regression0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_fancy_items_regression0\ncollected 7 items\n\nconftest.py ...                                                          [ 28%]\ntest_fancy_items_regression.py ....\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_fancy_items_regression0/junit.xml -\n=========================== 7 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_fancy_items_regression0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_fancy_items_regression0/junit.xml' mode='w' encoding='utf-8'>\n____________________________ test_global_properties ____________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_global_properties0')>\n\n    def test_global_properties(testdir):\n        path = testdir.tmpdir.join(\"test_global_properties.xml\")\n        log = LogXML(str(path), None)\n    \n        class Report(BaseReport):\n            sections = []\n            nodeid = \"test_node_id\"\n    \n        log.pytest_sessionstart()\n        log.add_global_property(\"foo\", 1)\n        log.add_global_property(\"bar\", 2)\n        log.pytest_sessionfinish()\n    \n>       dom = minidom.parse(str(path))\n\n/pytest-dev__pytest/testing/test_junitxml.py:1216: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b584040>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_global_properties0/test_global_properties.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_global_properties0/test_global_properties.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/pytest-dev__pytest/testing/test_junitxml.py\", line 1214, in test_global_properties\n    log.pytest_sessionfinish()\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_global_properties0/test_global_properties.xml' mode='w' encoding='utf-8'>\n______________________________ test_url_property _______________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_url_property0')>\n\n    def test_url_property(testdir):\n        test_url = \"http://www.github.com/pytest-dev\"\n        path = testdir.tmpdir.join(\"test_url_property.xml\")\n        log = LogXML(str(path), None)\n    \n        class Report(BaseReport):\n            longrepr = \"FooBarBaz\"\n            sections = []\n            nodeid = \"something\"\n            location = \"tests/filename.py\", 42, \"TestClass.method\"\n            url = test_url\n    \n        test_report = Report()\n    \n        log.pytest_sessionstart()\n        node_reporter = log._opentestcase(test_report)\n        node_reporter.append_failure(test_report)\n        log.pytest_sessionfinish()\n    \n>       test_case = minidom.parse(str(path)).getElementsByTagName(\"testcase\")[0]\n\n/pytest-dev__pytest/testing/test_junitxml.py:1256: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b301c70>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_url_property0/test_url_property.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_url_property0/test_url_property.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/pytest-dev__pytest/testing/test_junitxml.py\", line 1254, in test_url_property\n    log.pytest_sessionfinish()\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_url_property0/test_url_property.xml' mode='w' encoding='utf-8'>\n________________________ test_record_testsuite_property ________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_record_testsuite_property0')>\n\n    def test_record_testsuite_property(testdir):\n        testdir.makepyfile(\n            \"\"\"\n            def test_func1(record_testsuite_property):\n                record_testsuite_property(\"stats\", \"all good\")\n    \n            def test_func2(record_testsuite_property):\n                record_testsuite_property(\"stats\", 10)\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:1273: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b3059a0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_record_testsuite_property0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_record_testsuite_property0\ncollected 2 items\n\ntest_record_testsuite_property.py ..                                     [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_record_testsuite_property0/junit.xml -\n=========================== 2 passed in 0.03 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_record_testsuite_property0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_record_testsuite_property0/junit.xml' mode='w' encoding='utf-8'>\n________________________ test_set_suite_name[my_suite] _________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_set_suite_name0')>\nsuite_name = 'my_suite'\n\n    @pytest.mark.parametrize(\"suite_name\", [\"my_suite\", \"\"])\n    def test_set_suite_name(testdir, suite_name):\n        if suite_name:\n            testdir.makeini(\n                \"\"\"\n                [pytest]\n                junit_suite_name={}\n            \"\"\".format(\n                    suite_name\n                )\n            )\n            expected = suite_name\n        else:\n            expected = \"pytest\"\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            def test_func():\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:1332: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9b3ac0d0>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_set_suite_name0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_set_suite_name0, inifile: tox.ini\ncollected 1 item\n\ntest_set_suite_name.py .                                                 [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_set_suite_name0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_set_suite_name0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_set_suite_name0/junit.xml' mode='w' encoding='utf-8'>\n____________________________ test_set_suite_name[] _____________________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_set_suite_name1')>\nsuite_name = ''\n\n    @pytest.mark.parametrize(\"suite_name\", [\"my_suite\", \"\"])\n    def test_set_suite_name(testdir, suite_name):\n        if suite_name:\n            testdir.makeini(\n                \"\"\"\n                [pytest]\n                junit_suite_name={}\n            \"\"\".format(\n                    suite_name\n                )\n            )\n            expected = suite_name\n        else:\n            expected = \"pytest\"\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n    \n            def test_func():\n                pass\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:1332: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9ae7c670>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_set_suite_name1/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_set_suite_name1\ncollected 1 item\n\ntest_set_suite_name.py .                                                 [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_set_suite_name1/junit.xml -\n=========================== 1 passed in 0.03 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_set_suite_name1/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_set_suite_name1/junit.xml' mode='w' encoding='utf-8'>\n______________________ test_escaped_skipreason_issue3533 _______________________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_escaped_skipreason_issue35330')>\n\n    def test_escaped_skipreason_issue3533(testdir):\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            @pytest.mark.skip(reason='1 <> 2')\n            def test_skip():\n                pass\n        \"\"\"\n        )\n>       _, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:1347: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9abed880>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_escaped_skipreason_issue35330/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_escaped_skipreason_issue35330\ncollected 1 item\n\ntest_escaped_skipreason_issue3533.py s                                   [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_escaped_skipreason_issue35330/junit.xml -\n========================== 1 skipped in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_escaped_skipreason_issue35330/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_escaped_skipreason_issue35330/junit.xml' mode='w' encoding='utf-8'>\n_________ test_logging_passing_tests_disabled_does_not_log_test_output _________\n\ntestdir = <Testdir local('/tmp/pytest-of-root/pytest-0/test_logging_passing_tests_disabled_does_not_log_test_output0')>\n\n    def test_logging_passing_tests_disabled_does_not_log_test_output(testdir):\n        testdir.makeini(\n            \"\"\"\n            [pytest]\n            junit_log_passing_tests=False\n            junit_logging=system-out\n        \"\"\"\n        )\n        testdir.makepyfile(\n            \"\"\"\n            import pytest\n            import logging\n            import sys\n    \n            def test_func():\n                sys.stdout.write('This is stdout')\n                sys.stderr.write('This is stderr')\n                logging.warning('hello')\n        \"\"\"\n        )\n>       result, dom = runandparse(testdir)\n\n/pytest-dev__pytest/testing/test_junitxml.py:1374: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/pytest-dev__pytest/testing/test_junitxml.py:14: in runandparse\n    xmldoc = minidom.parse(str(resultpath))\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/minidom.py:1988: in parse\n    return expatbuilder.parse(file)\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:911: in parse\n    result = builder.parseFile(fp)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <xml.dom.expatbuilder.ExpatBuilderNS object at 0xffff9abd7670>\nfile = <_io.BufferedReader name='/tmp/pytest-of-root/pytest-0/test_logging_passing_tests_disabled_does_not_log_test_output0/junit.xml'>\n\n    def parseFile(self, file):\n        \"\"\"Parse a document from a file object, returning the document\n        node.\"\"\"\n        parser = self.getParser()\n        first_buffer = True\n        try:\n            while 1:\n                buffer = file.read(16*1024)\n                if not buffer:\n                    break\n                parser.Parse(buffer, False)\n                if first_buffer and self.document.documentElement:\n                    self._setup_subset(buffer)\n                first_buffer = False\n>           parser.Parse(b\"\", True)\nE           xml.parsers.expat.ExpatError: no element found: line 1, column 38\n\n/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/xml/dom/expatbuilder.py:211: ExpatError\n----------------------------- Captured stdout call -----------------------------\n============================= test session starts ==============================\nplatform linux -- Python 3.9.19, pytest-5.0.2.dev185+g29e336bd9, py-1.11.0, pluggy-0.13.1\nrootdir: /tmp/pytest-of-root/pytest-0/test_logging_passing_tests_disabled_does_not_log_test_output0, inifile: tox.ini\ncollected 1 item\n\ntest_logging_passing_tests_disabled_does_not_log_test_output.py .        [100%]\n\n- generated xml file: /tmp/pytest-of-root/pytest-0/test_logging_passing_tests_disabled_does_not_log_test_output0/junit.xml -\n=========================== 1 passed in 0.01 seconds ===========================\n----------------------------- Captured stderr call -----------------------------\nException ignored in: <_io.FileIO name='/tmp/pytest-of-root/pytest-0/test_logging_passing_tests_disabled_does_not_log_test_output0/junit.xml' mode='wb' closefd=True>\nTraceback (most recent call last):\n  File \"/root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\nResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_logging_passing_tests_disabled_does_not_log_test_output0/junit.xml' mode='w' encoding='utf-8'>\n------------------------------ Captured log call -------------------------------\nWARNING  root:test_logging_passing_tests_disabled_does_not_log_test_output.py:8 hello\n=============================== warnings summary ===============================\ntesting/test_junitxml.py::test_record_attribute\n  /root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py:187: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_record_attribute0/junit.xml' mode='w' encoding='utf-8'>\n    res = hook_impl.function(*args)\n\ntesting/test_junitxml.py::test_record_fixtures_xunit2[record_xml_attribute]\n  /root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py:187: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit20/junit.xml' mode='w' encoding='utf-8'>\n    res = hook_impl.function(*args)\n\ntesting/test_junitxml.py::test_record_fixtures_xunit2[record_property]\n  /root/miniconda3/envs/pytest-dev__pytest__5.0/lib/python3.9/site-packages/pluggy/callers.py:187: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/pytest-of-root/pytest-0/test_record_fixtures_xunit21/junit.xml' mode='w' encoding='utf-8'>\n    res = hook_impl.function(*args)\n\n-- Docs: https://docs.pytest.org/en/latest/warnings.html\n---------- generated xml file: /pytest-dev__pytest/testing/report.xml ----------\n=========================== short test summary info ============================\nSKIPPED [1] /pytest-dev__pytest/testing/test_junitxml.py:1088: could not import 'xdist': No module named 'xdist'\nXFAIL test_junitxml.py::test_runs_twice_xdist\n  reason: [NOTRUN] hangs\nFAILED test_junitxml.py::TestPython::test_summing_simple - xml.parsers.expat....\nFAILED test_junitxml.py::TestPython::test_summing_simple_with_errors - xml.pa...\nFAILED test_junitxml.py::TestPython::test_timing_function - xml.parsers.expat...\nFAILED test_junitxml.py::TestPython::test_junit_duration_report[call] - xml.p...\nFAILED test_junitxml.py::TestPython::test_junit_duration_report[total] - xml....\nFAILED test_junitxml.py::TestPython::test_setup_error - xml.parsers.expat.Exp...\nFAILED test_junitxml.py::TestPython::test_teardown_error - xml.parsers.expat....\nFAILED test_junitxml.py::TestPython::test_call_failure_teardown_error - xml.p...\nFAILED test_junitxml.py::TestPython::test_skip_contains_name_reason - xml.par...\nFAILED test_junitxml.py::TestPython::test_mark_skip_contains_name_reason - xm...\nFAILED test_junitxml.py::TestPython::test_mark_skipif_contains_name_reason - ...\nFAILED test_junitxml.py::TestPython::test_mark_skip_doesnt_capture_output - x...\nFAILED test_junitxml.py::TestPython::test_classname_instance - xml.parsers.ex...\nFAILED test_junitxml.py::TestPython::test_classname_nested_dir - xml.parsers....\nFAILED test_junitxml.py::TestPython::test_internal_error - xml.parsers.expat....\nFAILED test_junitxml.py::TestPython::test_failure_function[no] - xml.parsers....\nFAILED test_junitxml.py::TestPython::test_failure_function[system-out] - xml....\nFAILED test_junitxml.py::TestPython::test_failure_function[system-err] - xml....\nFAILED test_junitxml.py::TestPython::test_failure_verbose_message - xml.parse...\nFAILED test_junitxml.py::TestPython::test_failure_escape - xml.parsers.expat....\nFAILED test_junitxml.py::TestPython::test_junit_prefixing - xml.parsers.expat...\nFAILED test_junitxml.py::TestPython::test_xfailure_function - xml.parsers.exp...\nFAILED test_junitxml.py::TestPython::test_xfailure_marker - xml.parsers.expat...\nFAILED test_junitxml.py::TestPython::test_xfail_captures_output_once - xml.pa...\nFAILED test_junitxml.py::TestPython::test_xfailure_xpass - xml.parsers.expat....\nFAILED test_junitxml.py::TestPython::test_xfailure_xpass_strict - xml.parsers...\nFAILED test_junitxml.py::TestPython::test_collect_error - xml.parsers.expat.E...\nFAILED test_junitxml.py::TestPython::test_unicode - xml.parsers.expat.ExpatEr...\nFAILED test_junitxml.py::TestPython::test_assertion_binchars - xml.parsers.ex...\nFAILED test_junitxml.py::TestPython::test_pass_captures_stdout - xml.parsers....\nFAILED test_junitxml.py::TestPython::test_pass_captures_stderr - xml.parsers....\nFAILED test_junitxml.py::TestPython::test_setup_error_captures_stdout - xml.p...\nFAILED test_junitxml.py::TestPython::test_setup_error_captures_stderr - xml.p...\nFAILED test_junitxml.py::TestPython::test_avoid_double_stdout - xml.parsers.e...\nFAILED test_junitxml.py::TestNonPython::test_summing_simple - xml.parsers.exp...\nFAILED test_junitxml.py::test_nullbyte - assert '#x00' in '<?xml version=\"1.0...\nFAILED test_junitxml.py::test_nullbyte_replace - assert '#x0' in '<?xml versi...\nFAILED test_junitxml.py::test_escaped_parametrized_names_xml - xml.parsers.ex...\nFAILED test_junitxml.py::test_double_colon_split_function_issue469 - xml.pars...\nFAILED test_junitxml.py::test_double_colon_split_method_issue469 - xml.parser...\nFAILED test_junitxml.py::test_record_property - xml.parsers.expat.ExpatError:...\nFAILED test_junitxml.py::test_record_property_same_name - xml.parsers.expat.E...\nFAILED test_junitxml.py::test_record_attribute - xml.parsers.expat.ExpatError...\nFAILED test_junitxml.py::test_record_fixtures_xunit2[record_xml_attribute] - ...\nFAILED test_junitxml.py::test_record_fixtures_xunit2[record_property] - xml.p...\nFAILED test_junitxml.py::test_root_testsuites_tag - xml.parsers.expat.ExpatEr...\nFAILED test_junitxml.py::test_runs_twice - xml.parsers.expat.ExpatError: no e...\nFAILED test_junitxml.py::test_fancy_items_regression - xml.parsers.expat.Expa...\nFAILED test_junitxml.py::test_global_properties - xml.parsers.expat.ExpatErro...\nFAILED test_junitxml.py::test_url_property - xml.parsers.expat.ExpatError: no...\nFAILED test_junitxml.py::test_record_testsuite_property - xml.parsers.expat.E...\nFAILED test_junitxml.py::test_set_suite_name[my_suite] - xml.parsers.expat.Ex...\nFAILED test_junitxml.py::test_set_suite_name[] - xml.parsers.expat.ExpatError...\nFAILED test_junitxml.py::test_escaped_skipreason_issue3533 - xml.parsers.expa...\nFAILED test_junitxml.py::test_logging_passing_tests_disabled_does_not_log_test_output\n==== 55 failed, 13 passed, 1 skipped, 1 xfailed, 3 warnings in 4.14 seconds ====\n\n(Open file: /pytest-dev__pytest/src/_pytest/junitxml.py)\n(Current directory: /pytest-dev__pytest/testing)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "The test run revealed several failures related to parsing the generated XML file. It seems that the XML file is not being generated correctly, causing parsing errors.\n\nTo investigate further, let's inspect the generated XML file after running the test. We can do this by opening the `report.xml` file that was generated in the current directory.\n\n<command>\ncat report.xml\n</command>",
      "thought": "The test run revealed several failures related to parsing the generated XML file. It seems that the XML file is not being generated correctly, causing parsing errors.\n\nTo investigate further, let's inspect the generated XML file after running the test. We can do this by opening the `report.xml` file that was generated in the current directory.",
      "action": "cat report.xml",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n(Open file: /pytest-dev__pytest/src/_pytest/junitxml.py)\n(Current directory: /pytest-dev__pytest/testing)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "Exit due to cost limit",
      "thought": "Exit due to cost limit",
      "action": "exit_cost",
      "agent": "primary"
    }
  ],
  "info": {
    "exit_status": "submitted (exit_cost)",
    "submission": "\ndiff --git a/src/_pytest/junitxml.py b/src/_pytest/junitxml.py\nindex 15c630b1d..778a998ca 100644\n--- a/src/_pytest/junitxml.py\n+++ b/src/_pytest/junitxml.py\n@@ -657,18 +657,19 @@ class LogXML:\n         )\n         logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n \n+        import socket\n         suite_node = Junit.testsuite(\n             self._get_global_properties_node(),\n             [x.to_xml() for x in self.node_reporters_ordered],\n             name=self.suite_name,\n             errors=self.stats[\"error\"],\n-            failures=self.stats[\"failure\"],\n+            failures=self.stats[\"failure\"], \n             skipped=self.stats[\"skipped\"],\n             tests=numtests,\n             time=\"%.3f\" % suite_time_delta,\n+            hostname=socket.gethostname(),\n+            timestamp=self.suite_start_time\n         )\n-        logfile.write(Junit.testsuites([suite_node]).unicode(indent=0))\n-        logfile.close()\n \n     def pytest_terminal_summary(self, terminalreporter):\n         terminalreporter.write_sep(\"-\", \"generated xml file: %s\" % (self.logfile))\ndiff --git a/testing/report.xml b/testing/report.xml\nnew file mode 100644\nindex 000000000..42c1bdf97\n--- /dev/null\n+++ b/testing/report.xml\n@@ -0,0 +1 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\\ No newline at end of file\n",
    "model_stats": {
      "total_cost": 93.59397,
      "instance_cost": 4.031325,
      "tokens_sent": 261555,
      "tokens_received": 1440,
      "api_calls": 11
    }
  }
}