{
  "environment": "swe_main",
  "trajectory": [
    {
      "action": "find_file \"settings.py\"",
      "observation": "Found 5 matches for \"settings.py\" in /django__django:\n/django__django/tests/auth_tests/settings.py\n/django__django/tests/staticfiles_tests/settings.py\n/django__django/tests/admin_scripts/custom_templates/project_template/project_name/settings.py\n/django__django/tests/flatpages_tests/settings.py\n/django__django/tests/i18n/sampleproject/sampleproject/settings.py\n",
      "response": "Let's start by trying to reproduce the issue described in the bug report. The issue mentions that raising an Http404 exception in a path converter's to_python method results in an unhelpful error message when DEBUG is True.\n\nTo reproduce this, we'll need to:\n1. Set up a path converter that raises Http404 in its to_python method \n2. Configure a URL pattern that uses this converter\n3. Make a request to a URL that will trigger the Http404\n4. Ensure DEBUG is set to True in settings\n5. Check if we get the unhelpful error message\n\nFirst, let's find the relevant settings file to ensure DEBUG is True.\n<command>\nfind_file \"settings.py\"\n</command>",
      "state": "{\"open_file\": \"n/a\", \"working_dir\": \"/django__django\"}\n",
      "thought": "Let's start by trying to reproduce the issue described in the bug report. The issue mentions that raising an Http404 exception in a path converter's to_python method results in an unhelpful error message when DEBUG is True.\n\nTo reproduce this, we'll need to:\n1. Set up a path converter that raises Http404 in its to_python method \n2. Configure a URL pattern that uses this converter\n3. Make a request to a URL that will trigger the Http404\n4. Ensure DEBUG is set to True in settings\n5. Check if we get the unhelpful error message\n\nFirst, let's find the relevant settings file to ensure DEBUG is True."
    },
    {
      "action": "find_file \"settings.py\" django",
      "observation": "No matches found for \"settings.py\" in /django__django/django\n",
      "response": "The settings files found are all in the tests directory, which suggests they are used for testing purposes. We should look for a settings file in the main Django project directory.\n\nLet's search in the django directory:\n\n<command>\nfind_file \"settings.py\" django\n</command>",
      "state": "{\"open_file\": \"n/a\", \"working_dir\": \"/django__django\"}\n",
      "thought": "The settings files found are all in the tests directory, which suggests they are used for testing purposes. We should look for a settings file in the main Django project directory.\n\nLet's search in the django directory:"
    },
    {
      "action": "ls -F",
      "observation": "AUTHORS\nCONTRIBUTING.rst\nDjango.egg-info/\nFUNDING.yml\nGruntfile.js\nINSTALL\nLICENSE\nLICENSE.python\nMANIFEST.in\nREADME.rst\ndjango/\ndocs/\nextras/\njs_tests/\npackage.json\nscripts/\nsetup.cfg\nsetup.py\ntests/\ntox.ini\n",
      "response": "Hmm, it seems there isn't a settings.py file in the main Django project directory. Django projects typically have a settings.py file in the project root, but this repository might have a different structure or use a different method for configuration.\n\nLet's look for any files or directories that might contain configuration or settings:\n\n<command>\nls -F\n</command>",
      "state": "{\"open_file\": \"n/a\", \"working_dir\": \"/django__django\"}\n",
      "thought": "Hmm, it seems there isn't a settings.py file in the main Django project directory. Django projects typically have a settings.py file in the project root, but this repository might have a different structure or use a different method for configuration.\n\nLet's look for any files or directories that might contain configuration or settings:"
    },
    {
      "action": "ls -F tests",
      "observation": "README.rst\nabsolute_url_overrides/\nadmin_autodiscover/\nadmin_changelist/\nadmin_checks/\nadmin_custom_urls/\nadmin_default_site/\nadmin_docs/\nadmin_filters/\nadmin_inlines/\nadmin_ordering/\nadmin_registration/\nadmin_scripts/\nadmin_utils/\nadmin_views/\nadmin_widgets/\naggregation/\naggregation_regress/\nannotations/\napp_loading/\napps/\nasgi/\nasync/\nauth_tests/\nbackends/\nbase/\nbash_completion/\nbasic/\nbuiltin_server/\nbulk_create/\ncache/\ncheck_framework/\nconditional_processing/\nconstraints/\ncontenttypes_tests/\ncontext_processors/\ncsrf_tests/\ncustom_columns/\ncustom_lookups/\ncustom_managers/\ncustom_methods/\ncustom_migration_operations/\ncustom_pk/\ndatatypes/\ndates/\ndatetimes/\ndb_functions/\ndb_typecasts/\ndb_utils/\ndbshell/\ndecorators/\ndefer/\ndefer_regress/\ndelete/\ndelete_regress/\ndeprecation/\ndispatch/\ndistinct_on_fields/\nempty/\nempty_models/\nexpressions/\nexpressions_case/\nexpressions_window/\nextra_regress/\nfield_deconstruction/\nfield_defaults/\nfield_subclassing/\nfile_storage/\nfile_uploads/\nfiles/\nfiltered_relation/\nfixtures/\nfixtures_model_package/\nfixtures_regress/\nflatpages_tests/\nforce_insert_update/\nforeign_object/\nforms_tests/\nfrom_db_value/\ngeneric_inline_admin/\ngeneric_relations/\ngeneric_relations_regress/\ngeneric_views/\nget_earliest_or_latest/\nget_object_or_404/\nget_or_create/\ngis_tests/\nhandlers/\nhttpwrappers/\nhumanize_tests/\ni18n/\nimport_error_package/\nindexes/\ninline_formsets/\ninspectdb/\nintrospection/\ninvalid_models_tests/\nknown_related_objects/\nlogging_tests/\nlookup/\nm2m_and_m2o/\nm2m_intermediary/\nm2m_multiple/\nm2m_recursive/\nm2m_regress/\nm2m_signals/\nm2m_through/\nm2m_through_regress/\nm2o_recursive/\nmail/\nmanagers_regress/\nmany_to_many/\nmany_to_one/\nmany_to_one_null/\nmax_lengths/\nmessages_tests/\nmiddleware/\nmiddleware_exceptions/\nmigrate_signals/\nmigration_test_data_persistence/\nmigrations/\nmigrations2/\nmodel_fields/\nmodel_forms/\nmodel_formsets/\nmodel_formsets_regress/\nmodel_indexes/\nmodel_inheritance/\nmodel_inheritance_regress/\nmodel_meta/\nmodel_options/\nmodel_package/\nmodel_regress/\nmodeladmin/\nmultiple_database/\nmutually_referential/\nnested_foreign_keys/\nno_models/\nnull_fk/\nnull_fk_ordering/\nnull_queries/\none_to_one/\nor_lookups/\norder_with_respect_to/\nordering/\npagination/\npostgres_tests/\nprefetch_related/\nproject_template/\nproperties/\nproxy_model_inheritance/\nproxy_models/\nqueries/\nqueryset_pickle/\nraw_query/\nredirects_tests/\nrequests/\nrequirements/\nreserved_names/\nresolve_url/\nresponses/\nreverse_lookup/\nruntests.py*\nsave_delete_hooks/\nschema/\nselect_for_update/\nselect_related/\nselect_related_onetoone/\nselect_related_regress/\nserializers/\nservers/\nsessions_tests/\nsettings_tests/\nshell/\nshortcuts/\nsignals/\nsigned_cookies_tests/\nsigning/\nsitemaps_tests/\nsites_framework/\nsites_tests/\nstaticfiles_tests/\nstr/\nstring_lookup/\nswappable_models/\nsyndication_tests/\ntemplate_backends/\ntemplate_loader/\ntemplate_tests/\ntemplates/\ntest_client/\ntest_client_regress/\ntest_exceptions/\ntest_runner/\ntest_runner_apps/\ntest_sqlite.py\ntest_utils/\ntimezones/\ntransaction_hooks/\ntransactions/\nunmanaged_models/\nupdate/\nupdate_only_fields/\nurlpatterns/\nurlpatterns_reverse/\nurls.py\nuser_commands/\nutils_tests/\nvalidation/\nvalidators/\nversion/\nview_tests/\nwsgi/\n",
      "response": "I don't see any obvious settings or configuration files in the root directory. However, I do see a 'tests/' directory. Since the issue is related to DEBUG mode, which is often used during development and testing, it's possible the relevant settings are defined somewhere in the tests directory.\n\nLet's look inside the 'tests/' directory to see if we can find anything related to settings or configuration:\n\n<command>\nls -F tests\n</command>",
      "state": "{\"open_file\": \"n/a\", \"working_dir\": \"/django__django\"}\n",
      "thought": "I don't see any obvious settings or configuration files in the root directory. However, I do see a 'tests/' directory. Since the issue is related to DEBUG mode, which is often used during development and testing, it's possible the relevant settings are defined somewhere in the tests directory.\n\nLet's look inside the 'tests/' directory to see if we can find anything related to settings or configuration:"
    },
    {
      "action": "ls -F tests/settings_tests/",
      "observation": "__init__.py\ntest_file_charset.py\ntests.py\n",
      "response": "The 'tests' directory contains a lot of different test modules and packages. One that stands out is 'settings_tests/'. This likely contains tests related to Django's settings functionality.\n\nLet's look inside the 'settings_tests/' directory:\n\n<command>\nls -F tests/settings_tests/\n</command>",
      "state": "{\"open_file\": \"n/a\", \"working_dir\": \"/django__django\"}\n",
      "thought": "The 'tests' directory contains a lot of different test modules and packages. One that stands out is 'settings_tests/'. This likely contains tests related to Django's settings functionality.\n\nLet's look inside the 'settings_tests/' directory:"
    },
    {
      "action": "search_file \"DEBUG\" tests/settings_tests/tests.py",
      "observation": "No matches found for \"DEBUG\" in /django__django/tests/settings_tests/tests.py\n",
      "response": "The 'tests.py' file in the 'settings_tests/' directory is likely where the main test cases for Django's settings functionality are defined.\n\nLet's open 'tests.py' and search for 'DEBUG' to see if there are any relevant settings or test cases:\n\n<command>\nsearch_file \"DEBUG\" tests/settings_tests/tests.py\n</command>",
      "state": "{\"open_file\": \"n/a\", \"working_dir\": \"/django__django\"}\n",
      "thought": "The 'tests.py' file in the 'settings_tests/' directory is likely where the main test cases for Django's settings functionality are defined.\n\nLet's open 'tests.py' and search for 'DEBUG' to see if there are any relevant settings or test cases:"
    },
    {
      "action": "find . -name \"*.py\" -exec grep -H \"settings\" {} \\;",
      "observation": "./docs/_ext/djangodocs.py:        env = self.state.document.settings.env\n./docs/_ext/djangodocs.py:        env = self.state.document.settings.env\n./docs/conf.py:# building docs/ref/settings.txt sometimes.\n./django/__init__.py:    Configure the settings (this happens as a side effect of accessing the\n./django/__init__.py:    from django.conf import settings\n./django/__init__.py:    configure_logging(settings.LOGGING_CONFIG, settings.LOGGING)\n./django/__init__.py:            '/' if settings.FORCE_SCRIPT_NAME is None else settings.FORCE_SCRIPT_NAME\n./django/__init__.py:    apps.populate(settings.INSTALLED_APPS)\n./django/conf/__init__.py:variable, and then from django.conf.global_settings; see the global_settings.py\n./django/conf/__init__.py:from django.conf import global_settings\n./django/conf/__init__.py:    String subclass which references a current settings value. It's treated as\n./django/conf/__init__.py:    the value in memory but serializes to a settings.NAME attribute reference.\n./django/conf/__init__.py:    A lazy proxy for either global Django settings or a custom settings object.\n./django/conf/__init__.py:    The user can manually configure settings prior to using them. Otherwise,\n./django/conf/__init__.py:    Django uses the settings module pointed to by DJANGO_SETTINGS_MODULE.\n./django/conf/__init__.py:        Load the settings module pointed to by the environment variable. This\n./django/conf/__init__.py:        is used the first time settings are needed, if the user hasn't\n./django/conf/__init__.py:        configured settings manually.\n./django/conf/__init__.py:        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)\n./django/conf/__init__.py:        if not settings_module:\n./django/conf/__init__.py:            desc = (\"setting %s\" % name) if name else \"settings\"\n./django/conf/__init__.py:                \"Requested %s, but settings are not configured. \"\n./django/conf/__init__.py:                \"or call settings.configure() before accessing settings.\"\n./django/conf/__init__.py:        self._wrapped = Settings(settings_module)\n./django/conf/__init__.py:        return '<LazySettings \"%(settings_module)s\">' % {\n./django/conf/__init__.py:            'settings_module': self._wrapped.SETTINGS_MODULE,\n./django/conf/__init__.py:        (@override_settings does this) or clear single values when set.\n./django/conf/__init__.py:    def configure(self, default_settings=global_settings, **options):\n./django/conf/__init__.py:        Called to manually configure the settings. The 'default_settings'\n./django/conf/__init__.py:        holder = UserSettingsHolder(default_settings)\n./django/conf/__init__.py:        \"\"\"Return True if the settings have already been configured.\"\"\"\n./django/conf/__init__.py:    def __init__(self, settings_module):\n./django/conf/__init__.py:        # update this dict from global settings (but only for ALL_CAPS settings)\n./django/conf/__init__.py:        for setting in dir(global_settings):\n./django/conf/__init__.py:                setattr(self, setting, getattr(global_settings, setting))\n./django/conf/__init__.py:        # store the settings module in case someone later cares\n./django/conf/__init__.py:        self.SETTINGS_MODULE = settings_module\n./django/conf/__init__.py:        tuple_settings = (\n./django/conf/__init__.py:        self._explicit_settings = set()\n./django/conf/__init__.py:                if (setting in tuple_settings and\n./django/conf/__init__.py:                self._explicit_settings.add(setting)\n./django/conf/__init__.py:        return setting in self._explicit_settings\n./django/conf/__init__.py:        return '<%(cls)s \"%(settings_module)s\">' % {\n./django/conf/__init__.py:            'settings_module': self.SETTINGS_MODULE,\n./django/conf/__init__.py:    \"\"\"Holder for user configured settings.\"\"\"\n./django/conf/__init__.py:    def __init__(self, default_settings):\n./django/conf/__init__.py:        from the module specified in default_settings (if possible).\n./django/conf/__init__.py:        self.default_settings = default_settings\n./django/conf/__init__.py:        return getattr(self.default_settings, name)\n./django/conf/__init__.py:            s for s in [*self.__dict__, *dir(self.default_settings)]\n./django/conf/__init__.py:        set_on_default = getattr(self.default_settings, 'is_overridden', lambda s: False)(setting)\n./django/conf/__init__.py:settings = LazySettings()\n./django/conf/global_settings.py:Default Django settings. Override these with settings in the module pointed to\n./django/conf/global_settings.py:# django.utils.translation -- that module depends on the settings.\n./django/conf/global_settings.py:# hashing algorithms. Set this in your settings, or Django will complain\n./django/conf/global_settings.py:# django.contrib.messages to avoid imports in this settings file.\n./django/conf/urls/static.py:from django.conf import settings\n./django/conf/urls/static.py:    from django.conf import settings\n./django/conf/urls/static.py:    ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n./django/conf/urls/static.py:    elif not settings.DEBUG or urlsplit(prefix).netloc:\n./django/conf/urls/i18n.py:from django.conf import settings\n./django/conf/urls/i18n.py:    if not settings.USE_I18N:\n./django/core/exceptions.py:    settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.\n./django/core/exceptions.py:    settings.DATA_UPLOAD_MAX_MEMORY_SIZE.\n./django/core/checks/caches.py:from django.conf import settings\n./django/core/checks/caches.py:    if DEFAULT_CACHE_ALIAS not in settings.CACHES:\n./django/core/checks/model_checks.py:from django.conf import settings\n./django/core/checks/model_checks.py:    if settings.DATABASE_ROUTERS:\n./django/core/checks/model_checks.py:            'You have configured settings.DATABASE_ROUTERS. Verify that %s '\n./django/core/checks/templates.py:from django.conf import settings\n./django/core/checks/templates.py:        for conf in settings.TEMPLATES\n./django/core/checks/templates.py:    for conf in settings.TEMPLATES:\n./django/core/checks/messages.py:        from django.conf import settings\n./django/core/checks/messages.py:        return self.id in settings.SILENCED_SYSTEM_CHECKS\n./django/core/checks/urls.py:from django.conf import settings\n./django/core/checks/urls.py:    if getattr(settings, 'ROOT_URLCONF', None):\n./django/core/checks/urls.py:    if not getattr(settings, 'ROOT_URLCONF', None):\n./django/core/checks/urls.py:def check_url_settings(app_configs, **kwargs):\n./django/core/checks/urls.py:        value = getattr(settings, name)\n./django/core/checks/security/csrf.py:from django.conf import settings\n./django/core/checks/security/csrf.py:    return 'django.middleware.csrf.CsrfViewMiddleware' in settings.MIDDLEWARE\n./django/core/checks/security/csrf.py:        settings.CSRF_USE_SESSIONS or\n./django/core/checks/security/csrf.py:        settings.CSRF_COOKIE_SECURE\n./django/core/checks/security/base.py:from django.conf import settings\n./django/core/checks/security/base.py:    \"SECURE_BROWSER_XSS_FILTER, and SECURE_SSL_REDIRECT settings \"\n./django/core/checks/security/base.py:    return 'django.middleware.security.SecurityMiddleware' in settings.MIDDLEWARE\n./django/core/checks/security/base.py:    return 'django.middleware.clickjacking.XFrameOptionsMiddleware' in settings.MIDDLEWARE\n./django/core/checks/security/base.py:    passed_check = not _security_middleware() or settings.SECURE_HSTS_SECONDS\n./django/core/checks/security/base.py:        not settings.SECURE_HSTS_SECONDS or\n./django/core/checks/security/base.py:        settings.SECURE_HSTS_INCLUDE_SUBDOMAINS is True\n./django/core/checks/security/base.py:        not settings.SECURE_HSTS_SECONDS or\n./django/core/checks/security/base.py:        settings.SECURE_HSTS_PRELOAD is True\n./django/core/checks/security/base.py:        settings.SECURE_CONTENT_TYPE_NOSNIFF is True\n./django/core/checks/security/base.py:        settings.SECURE_SSL_REDIRECT is True\n./django/core/checks/security/base.py:        getattr(settings, 'SECRET_KEY', None) and\n./django/core/checks/security/base.py:        len(set(settings.SECRET_KEY)) >= SECRET_KEY_MIN_UNIQUE_CHARACTERS and\n./django/core/checks/security/base.py:        len(settings.SECRET_KEY) >= SECRET_KEY_MIN_LENGTH\n./django/core/checks/security/base.py:    passed_check = not settings.DEBUG\n./django/core/checks/security/base.py:        settings.X_FRAME_OPTIONS == 'DENY'\n./django/core/checks/security/base.py:    return [] if settings.ALLOWED_HOSTS else [W020]\n./django/core/checks/security/sessions.py:from django.conf import settings\n./django/core/checks/security/sessions.py:    if not settings.SESSION_COOKIE_SECURE:\n./django/core/checks/security/sessions.py:    if not settings.SESSION_COOKIE_HTTPONLY:\n./django/core/checks/security/sessions.py:    return 'django.contrib.sessions.middleware.SessionMiddleware' in settings.MIDDLEWARE\n./django/core/checks/security/sessions.py:    return \"django.contrib.sessions\" in settings.INSTALLED_APPS\n./django/core/checks/translation.py:from django.conf import settings\n./django/core/checks/translation.py:    tag = settings.LANGUAGE_CODE\n./django/core/checks/translation.py:        for tag, _ in settings.LANGUAGES if not isinstance(tag, str) or not language_code_re.match(tag)\n./django/core/checks/translation.py:        for tag in settings.LANGUAGES_BIDI if not isinstance(tag, str) or not language_code_re.match(tag)\n./django/core/checks/translation.py:def check_language_settings_consistent(app_configs, **kwargs):\n./django/core/checks/translation.py:    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n./django/core/checks/translation.py:    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n./django/core/checks/translation.py:    if settings.LANGUAGE_CODE not in available_tags:\n./django/core/signing.py:from django.conf import settings\n./django/core/signing.py:    Signer = import_string(settings.SIGNING_BACKEND)\n./django/core/signing.py:    key = force_bytes(settings.SECRET_KEY)  # SECRET_KEY may be str or bytes.\n./django/core/signing.py:    None, use settings.SECRET_KEY instead.\n./django/core/signing.py:        self.key = key or settings.SECRET_KEY\n./django/core/cache/__init__.py:from django.conf import settings\n./django/core/cache/__init__.py:            conf = settings.CACHES[backend]\n./django/core/cache/__init__.py:        if alias not in settings.CACHES:\n./django/core/cache/__init__.py:                \"Could not find config for '%s' in settings.CACHES\" % alias\n./django/core/cache/backends/db.py:from django.conf import settings\n./django/core/cache/backends/db.py:            elif settings.USE_TZ:\n./django/core/cache/backends/db.py:        if settings.USE_TZ:\n./django/core/management/__init__.py:from django.conf import settings\n./django/core/management/__init__.py:    Core commands are always included. If a settings module has been\n./django/core/management/__init__.py:    if not settings.configured:\n./django/core/management/__init__.py:        self.settings_exception = None\n./django/core/management/__init__.py:            # Output an extra note if settings are not properly configured\n./django/core/management/__init__.py:            if self.settings_exception is not None:\n./django/core/management/__init__.py:                    \"as settings are not properly configured (error: %s).\"\n./django/core/management/__init__.py:                    % self.settings_exception))\n./django/core/management/__init__.py:                # If `subcommand` is missing due to misconfigured settings, the\n./django/core/management/__init__.py:                settings.INSTALLED_APPS\n./django/core/management/__init__.py:                sys.stderr.write(\"No Django settings specified.\\n\")\n./django/core/management/__init__.py:        # Preprocess options to extract --settings and --pythonpath.\n./django/core/management/__init__.py:        parser.add_argument('--settings')\n./django/core/management/__init__.py:            settings.INSTALLED_APPS\n./django/core/management/__init__.py:            self.settings_exception = exc\n./django/core/management/__init__.py:            self.settings_exception = exc\n./django/core/management/__init__.py:        if settings.configured:\n./django/core/management/commands/startproject.py:        # Create a random SECRET_KEY to put it in the main settings.\n./django/core/management/commands/runserver.py:from django.conf import settings\n./django/core/management/commands/runserver.py:        if not settings.DEBUG and not settings.ALLOWED_HOSTS:\n./django/core/management/commands/runserver.py:            raise CommandError('You must set settings.ALLOWED_HOSTS if DEBUG is False.')\n./django/core/management/commands/runserver.py:            \"Django version %(version)s, using settings %(settings)r\\n\"\n./django/core/management/commands/runserver.py:            \"settings\": settings.SETTINGS_MODULE,\n./django/core/management/commands/compilemessages.py:            from django.conf import settings\n./django/core/management/commands/compilemessages.py:            basedirs.extend(settings.LOCALE_PATHS)\n./django/core/management/commands/compilemessages.py:                               \"the settings module specified.\")\n./django/core/management/commands/squashmigrations.py:from django.conf import settings\n./django/core/management/commands/squashmigrations.py:                    if settings.AUTH_USER_MODEL == dependency.setting:\n./django/core/management/commands/makemessages.py:from django.conf import settings\n./django/core/management/commands/makemessages.py:        encoding = settings.FILE_CHARSET if self.command.settings_available else 'utf-8'\n./django/core/management/commands/makemessages.py:            if self.settings_available:\n./django/core/management/commands/makemessages.py:                self.locale_paths.extend(settings.LOCALE_PATHS)\n./django/core/management/commands/makemessages.py:    def settings_available(self):\n./django/core/management/commands/makemessages.py:            settings.LOCALE_PATHS\n./django/core/management/commands/makemessages.py:                self.stderr.write(\"Running without configured settings.\")\n./django/core/management/commands/makemessages.py:        if self.settings_available:\n./django/core/management/commands/makemessages.py:            ignored_roots = [os.path.normpath(p) for p in (settings.MEDIA_ROOT, settings.STATIC_ROOT) if p]\n./django/core/management/commands/diffsettings.py:    help = \"\"\"Displays differences between the current settings.py and Django's\n./django/core/management/commands/diffsettings.py:    default settings.\"\"\"\n./django/core/management/commands/diffsettings.py:                'Display all settings, regardless of their value. In \"hash\" '\n./django/core/management/commands/diffsettings.py:                \"The settings module to compare the current settings against. Leave empty to \"\n./django/core/management/commands/diffsettings.py:                \"compare against Django's default settings.\"\n./django/core/management/commands/diffsettings.py:                \"setting, with the settings that don't appear in the defaults \"\n./django/core/management/commands/diffsettings.py:        from django.conf import settings, Settings, global_settings\n./django/core/management/commands/diffsettings.py:        # Because settings are imported lazily, we need to explicitly load them.\n./django/core/management/commands/diffsettings.py:        if not settings.configured:\n./django/core/management/commands/diffsettings.py:            settings._setup()\n./django/core/management/commands/diffsettings.py:        user_settings = module_to_dict(settings._wrapped)\n./django/core/management/commands/diffsettings.py:        default_settings = module_to_dict(Settings(default) if default else global_settings)\n./django/core/management/commands/diffsettings.py:        return '\\n'.join(output_func(user_settings, default_settings, **options))\n./django/core/management/commands/diffsettings.py:    def output_hash(self, user_settings, default_settings, **options):\n./django/core/management/commands/diffsettings.py:        for key in sorted(user_settings):\n./django/core/management/commands/diffsettings.py:            if key not in default_settings:\n./django/core/management/commands/diffsettings.py:                output.append(\"%s = %s  ###\" % (key, user_settings[key]))\n./django/core/management/commands/diffsettings.py:            elif user_settings[key] != default_settings[key]:\n./django/core/management/commands/diffsettings.py:                output.append(\"%s = %s\" % (key, user_settings[key]))\n./django/core/management/commands/diffsettings.py:                output.append(\"### %s = %s\" % (key, user_settings[key]))\n./django/core/management/commands/diffsettings.py:    def output_unified(self, user_settings, default_settings, **options):\n./django/core/management/commands/diffsettings.py:        for key in sorted(user_settings):\n./django/core/management/commands/diffsettings.py:            if key not in default_settings:\n./django/core/management/commands/diffsettings.py:                output.append(self.style.SUCCESS(\"+ %s = %s\" % (key, user_settings[key])))\n./django/core/management/commands/diffsettings.py:            elif user_settings[key] != default_settings[key]:\n./django/core/management/commands/diffsettings.py:                output.append(self.style.ERROR(\"- %s = %s\" % (key, default_settings[key])))\n./django/core/management/commands/diffsettings.py:                output.append(self.style.SUCCESS(\"+ %s = %s\" % (key, user_settings[key])))\n./django/core/management/commands/diffsettings.py:                output.append(\"  %s = %s\" % (key, user_settings[key]))\n./django/core/management/commands/loaddata.py:from django.conf import settings\n./django/core/management/commands/loaddata.py:        fixture_dirs = settings.FIXTURE_DIRS\n./django/core/management/commands/loaddata.py:            raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n./django/core/management/commands/loaddata.py:                    \"and cannot be listed in settings.FIXTURE_DIRS.\" % (app_dir, app_label)\n./django/core/management/commands/test.py:from django.conf import settings\n./django/core/management/commands/test.py:        test_runner_class = get_runner(settings, self.test_runner)\n./django/core/management/commands/test.py:        TestRunner = get_runner(settings, options['testrunner'])\n./django/core/management/commands/createcachetable.py:from django.conf import settings\n./django/core/management/commands/createcachetable.py:            help='Optional table names. Otherwise, settings.CACHES is used to find cache tables.',\n./django/core/management/commands/createcachetable.py:            for cache_alias in settings.CACHES:\n./django/core/management/commands/makemigrations.py:from django.conf import settings\n./django/core/management/commands/makemigrations.py:        aliases_to_check = connections if settings.DATABASE_ROUTERS else [DEFAULT_DB_ALIAS]\n./django/core/management/commands/makemigrations.py:            if (connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any(\n./django/core/management/commands/flush.py:    Type 'yes' to continue, or 'no' to cancel: \"\"\" % connection.settings_dict['NAME'])\n./django/core/management/commands/flush.py:                        connection.settings_dict['NAME'],\n./django/core/management/commands/check.py:            help='Check deployment settings.',\n./django/core/management/commands/sendtestemail.py:            help='Send a test email to the addresses specified in settings.MANAGERS.',\n./django/core/management/commands/sendtestemail.py:            help='Send a test email to the addresses specified in settings.ADMINS.',\n./django/core/management/base.py:    if options.settings:\n./django/core/management/base.py:        os.environ['DJANGO_SETTINGS_MODULE'] = options.settings\n./django/core/management/base.py:        '--version', '--verbosity', '--traceback', '--settings', '--pythonpath',\n./django/core/management/base.py:            '--settings',\n./django/core/management/base.py:                'The Python path to a settings module, e.g. '\n./django/core/management/base.py:                '\"myproject.settings.main\". If this isn\\'t provided, the '\n./django/core/management/base.py:        and Django settings), then run this command. If the\n./django/core/management/base.py:                # configured settings).\n./django/core/management/templates.py:from django.conf import settings\n./django/core/management/templates.py:        # Setup a stub settings environment for template rendering\n./django/core/management/templates.py:        if not settings.configured:\n./django/core/management/templates.py:            settings.configure()\n./django/core/management/color.py:    color_settings = termcolors.parse_color_setting(config_string)\n./django/core/management/color.py:        if color_settings:\n./django/core/management/color.py:            format = color_settings.get(role, {})\n./django/core/mail/message.py:from django.conf import settings\n./django/core/mail/message.py:    encoding = encoding or settings.DEFAULT_CHARSET\n./django/core/mail/message.py:    encoding = None     # None => use settings default\n./django/core/mail/message.py:        self.from_email = from_email or settings.DEFAULT_FROM_EMAIL\n./django/core/mail/message.py:        encoding = self.encoding or settings.DEFAULT_CHARSET\n./django/core/mail/message.py:            msg['Date'] = formatdate(localtime=settings.EMAIL_USE_LOCALTIME)\n./django/core/mail/message.py:            encoding = self.encoding or settings.DEFAULT_CHARSET\n./django/core/mail/message.py:            encoding = self.encoding or settings.DEFAULT_CHARSET\n./django/core/mail/message.py:        encoding = self.encoding or settings.DEFAULT_CHARSET\n./django/core/mail/__init__.py:from django.conf import settings\n./django/core/mail/__init__.py:    If backend is None (default), use settings.EMAIL_BACKEND.\n./django/core/mail/__init__.py:    klass = import_string(backend or settings.EMAIL_BACKEND)\n./django/core/mail/__init__.py:    if not settings.ADMINS:\n./django/core/mail/__init__.py:    if not all(isinstance(a, (list, tuple)) and len(a) == 2 for a in settings.ADMINS):\n./django/core/mail/__init__.py:        '%s%s' % (settings.EMAIL_SUBJECT_PREFIX, subject), message,\n./django/core/mail/__init__.py:        settings.SERVER_EMAIL, [a[1] for a in settings.ADMINS],\n./django/core/mail/__init__.py:    if not settings.MANAGERS:\n./django/core/mail/__init__.py:    if not all(isinstance(a, (list, tuple)) and len(a) == 2 for a in settings.MANAGERS):\n./django/core/mail/__init__.py:        '%s%s' % (settings.EMAIL_SUBJECT_PREFIX, subject), message,\n./django/core/mail/__init__.py:        settings.SERVER_EMAIL, [a[1] for a in settings.MANAGERS],\n./django/core/mail/backends/smtp.py:from django.conf import settings\n./django/core/mail/backends/smtp.py:        self.host = host or settings.EMAIL_HOST\n./django/core/mail/backends/smtp.py:        self.port = port or settings.EMAIL_PORT\n./django/core/mail/backends/smtp.py:        self.username = settings.EMAIL_HOST_USER if username is None else username\n./django/core/mail/backends/smtp.py:        self.password = settings.EMAIL_HOST_PASSWORD if password is None else password\n./django/core/mail/backends/smtp.py:        self.use_tls = settings.EMAIL_USE_TLS if use_tls is None else use_tls\n./django/core/mail/backends/smtp.py:        self.use_ssl = settings.EMAIL_USE_SSL if use_ssl is None else use_ssl\n./django/core/mail/backends/smtp.py:        self.timeout = settings.EMAIL_TIMEOUT if timeout is None else timeout\n./django/core/mail/backends/smtp.py:        self.ssl_keyfile = settings.EMAIL_SSL_KEYFILE if ssl_keyfile is None else ssl_keyfile\n./django/core/mail/backends/smtp.py:        self.ssl_certfile = settings.EMAIL_SSL_CERTFILE if ssl_certfile is None else ssl_certfile\n./django/core/mail/backends/smtp.py:                \"one of those settings to True.\")\n./django/core/mail/backends/smtp.py:        encoding = email_message.encoding or settings.DEFAULT_CHARSET\n./django/core/mail/backends/filebased.py:from django.conf import settings\n./django/core/mail/backends/filebased.py:            self.file_path = getattr(settings, 'EMAIL_FILE_PATH', None)\n./django/core/files/uploadedfile.py:from django.conf import settings\n./django/core/files/uploadedfile.py:        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n./django/core/files/storage.py:from django.conf import settings\n./django/core/files/storage.py:        return self._value_or_setting(self._location, settings.MEDIA_ROOT)\n./django/core/files/storage.py:        return self._value_or_setting(self._base_url, settings.MEDIA_URL)\n./django/core/files/storage.py:        return self._value_or_setting(self._file_permissions_mode, settings.FILE_UPLOAD_PERMISSIONS)\n./django/core/files/storage.py:        return self._value_or_setting(self._directory_permissions_mode, settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS)\n./django/core/files/storage.py:        if settings.USE_TZ:\n./django/core/files/storage.py:    return import_string(import_path or settings.DEFAULT_FILE_STORAGE)\n./django/core/files/uploadhandler.py:from django.conf import settings\n./django/core/files/uploadhandler.py:        self.activated = content_length <= settings.FILE_UPLOAD_MAX_MEMORY_SIZE\n./django/core/servers/basehttp.py:    ``settings.WSGI_APPLICATION``. With the default ``startproject`` layout,\n./django/core/servers/basehttp.py:    If settings.WSGI_APPLICATION is not set (is ``None``), return\n./django/core/servers/basehttp.py:    from django.conf import settings\n./django/core/servers/basehttp.py:    app_path = getattr(settings, 'WSGI_APPLICATION')\n./django/core/handlers/wsgi.py:from django.conf import settings\n./django/core/handlers/wsgi.py:    if settings.FORCE_SCRIPT_NAME is not None:\n./django/core/handlers/wsgi.py:        return settings.FORCE_SCRIPT_NAME\n./django/core/handlers/base.py:from django.conf import settings\n./django/core/handlers/base.py:        Populate middleware lists from settings.MIDDLEWARE.\n./django/core/handlers/base.py:        for middleware_path in reversed(settings.MIDDLEWARE):\n./django/core/handlers/base.py:                if settings.DEBUG:\n./django/core/handlers/base.py:            if db.settings_dict['ATOMIC_REQUESTS'] and db.alias not in non_atomic_requests:\n./django/core/handlers/base.py:        set_urlconf(settings.ROOT_URLCONF)\n./django/core/handlers/asgi.py:from django.conf import settings\n./django/core/handlers/asgi.py:        body_file = tempfile.SpooledTemporaryFile(max_size=settings.FILE_UPLOAD_MAX_MEMORY_SIZE, mode='w+b')\n./django/core/handlers/asgi.py:                traceback.format_exc() if settings.DEBUG else 'Internal Server Error',\n./django/core/handlers/asgi.py:        if settings.FORCE_SCRIPT_NAME:\n./django/core/handlers/asgi.py:            return settings.FORCE_SCRIPT_NAME\n./django/core/handlers/exception.py:from django.conf import settings\n./django/core/handlers/exception.py:        if settings.DEBUG:\n./django/core/handlers/exception.py:        if settings.DEBUG:\n./django/core/handlers/exception.py:    if settings.DEBUG_PROPAGATE_EXCEPTIONS:\n./django/core/handlers/exception.py:    if settings.DEBUG:\n./django/core/serializers/__init__.py:from django.conf import settings\n./django/core/serializers/__init__.py:    Register built-in and settings-defined serializers. This is done lazily so\n./django/core/serializers/__init__.py:    that user code has a chance to (e.g.) set up custom settings without\n./django/core/serializers/__init__.py:    if hasattr(settings, \"SERIALIZATION_MODULES\"):\n./django/core/serializers/__init__.py:        for format in settings.SERIALIZATION_MODULES:\n./django/core/serializers/__init__.py:            register_serializer(format, settings.SERIALIZATION_MODULES[format], serializers)\n./django/core/serializers/xml_serializer.py:from django.conf import settings\n./django/core/serializers/xml_serializer.py:        self.xml = SimplerXMLGenerator(self.stream, self.options.get(\"encoding\", settings.DEFAULT_CHARSET))\n./django/utils/http.py:                'settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.'\n./django/utils/translation/__init__.py:# We are trying to solve two problems: (1) access settings, in particular\n./django/utils/translation/__init__.py:# settings.USE_I18N, as late as possible, so that modules can be imported\n./django/utils/translation/__init__.py:# settings).\n./django/utils/translation/__init__.py:        from django.conf import settings\n./django/utils/translation/__init__.py:        if settings.USE_I18N:\n./django/utils/translation/reloader.py:    from django.conf import settings\n./django/utils/translation/reloader.py:    if settings.USE_I18N:\n./django/utils/translation/reloader.py:        directories.extend(Path(p) for p in settings.LOCALE_PATHS)\n./django/utils/translation/trans_null.py:# settings.USE_I18N = False can use this module rather than trans_real.py.\n./django/utils/translation/trans_null.py:from django.conf import settings\n./django/utils/translation/trans_null.py:    return settings.LANGUAGE_CODE\n./django/utils/translation/trans_null.py:    return settings.LANGUAGE_CODE in settings.LANGUAGES_BIDI\n./django/utils/translation/trans_null.py:    return settings.LANGUAGE_CODE\n./django/utils/translation/trans_null.py:    if lang_code == settings.LANGUAGE_CODE:\n./django/utils/translation/trans_real.py:from django.conf import settings\n./django/utils/translation/trans_real.py:# The default translation is based on the settings file.\n./django/utils/translation/trans_real.py:        if self.__language == settings.LANGUAGE_CODE and self.domain == 'django' and self._catalog is None:\n./django/utils/translation/trans_real.py:            raise OSError('No translation files found for default language %s.' % settings.LANGUAGE_CODE)\n./django/utils/translation/trans_real.py:        settingsfile = sys.modules[settings.__module__].__file__\n./django/utils/translation/trans_real.py:        localedir = os.path.join(os.path.dirname(settingsfile), 'locale')\n./django/utils/translation/trans_real.py:        for localedir in reversed(settings.LOCALE_PATHS):\n./django/utils/translation/trans_real.py:        if self.__language == settings.LANGUAGE_CODE or self.__language.startswith('en'):\n./django/utils/translation/trans_real.py:            default_translation = translation(settings.LANGUAGE_CODE)\n./django/utils/translation/trans_real.py:                settings.LANGUAGE_CODE, domain=self.domain, localedirs=localedirs\n./django/utils/translation/trans_real.py:    return settings.LANGUAGE_CODE\n./django/utils/translation/trans_real.py:        return base_lang in settings.LANGUAGES_BIDI\n./django/utils/translation/trans_real.py:        _default = translation(settings.LANGUAGE_CODE)\n./django/utils/translation/trans_real.py:        _default = _default or translation(settings.LANGUAGE_CODE)\n./django/utils/translation/trans_real.py:        _default = translation(settings.LANGUAGE_CODE)\n./django/utils/translation/trans_real.py:        os.path.dirname(sys.modules[settings.__module__].__file__), 'locale')\n./django/utils/translation/trans_real.py:    return [globalpath, *settings.LOCALE_PATHS, *app_paths]\n./django/utils/translation/trans_real.py:    Cache of settings.LANGUAGES in a dictionary for easy lookups by key.\n./django/utils/translation/trans_real.py:    return dict(settings.LANGUAGES)\n./django/utils/translation/trans_real.py:    show. Only languages listed in settings.LANGUAGES are taken into account.\n./django/utils/translation/trans_real.py:    lang_code = request.COOKIES.get(settings.LANGUAGE_COOKIE_NAME)\n./django/utils/translation/trans_real.py:        return get_supported_language_variant(settings.LANGUAGE_CODE)\n./django/utils/translation/trans_real.py:        return settings.LANGUAGE_CODE\n./django/utils/log.py:from django.conf import settings\n./django/utils/log.py:def configure_logging(logging_config, logging_settings):\n./django/utils/log.py:        # ... then invoke it with the logging settings\n./django/utils/log.py:        if logging_settings:\n./django/utils/log.py:            logging_config_func(logging_settings)\n./django/utils/log.py:                ('internal' if request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS\n./django/utils/log.py:        return not settings.DEBUG\n./django/utils/log.py:        return settings.DEBUG\n./django/utils/crypto.py:from django.conf import settings\n./django/utils/crypto.py:    secret (which defaults to settings.SECRET_KEY).\n./django/utils/crypto.py:        secret = settings.SECRET_KEY\n./django/utils/cache.py:from django.conf import settings\n./django/utils/cache.py:        cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS\n./django/utils/cache.py:    if settings.USE_I18N or settings.USE_L10N:\n./django/utils/cache.py:        # which in turn can also fall back to settings.LANGUAGE_CODE\n./django/utils/cache.py:    if settings.USE_TZ:\n./django/utils/cache.py:        key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n./django/utils/cache.py:        cache = caches[settings.CACHE_MIDDLEWARE_ALIAS]\n./django/utils/cache.py:        key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n./django/utils/cache.py:        cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS\n./django/utils/cache.py:        cache = caches[settings.CACHE_MIDDLEWARE_ALIAS]\n./django/utils/cache.py:        is_accept_language_redundant = settings.USE_I18N or settings.USE_L10N\n./django/utils/timezone.py:from django.conf import settings\n./django/utils/timezone.py:# In order to avoid accessing settings at compile time,\n./django/utils/timezone.py:    This is the time zone defined by settings.TIME_ZONE.\n./django/utils/timezone.py:    return pytz.timezone(settings.TIME_ZONE)\n./django/utils/timezone.py:    Django will then use the time zone defined by settings.TIME_ZONE.\n./django/utils/timezone.py:    be converted (or not), overriding the value of settings.USE_TZ.\n./django/utils/timezone.py:        (settings.USE_TZ if use_tz is None else use_tz) and\n./django/utils/timezone.py:    Return an aware or naive datetime.datetime, depending on settings.USE_TZ.\n./django/utils/timezone.py:    if settings.USE_TZ:\n./django/utils/formats.py:from django.conf import settings\n./django/utils/formats.py:        format_module_path = settings.FORMAT_MODULE_PATH\n./django/utils/formats.py:        _format_modules_cache[lang] = list(iter_format_modules(lang, settings.FORMAT_MODULE_PATH))\n./django/utils/formats.py:    language (locale). Default to the format in the settings.\n./django/utils/formats.py:    be localized (or not), overriding the value of settings.USE_L10N.\n./django/utils/formats.py:    use_l10n = use_l10n or (use_l10n is None and settings.USE_L10N)\n./django/utils/formats.py:    # there or if l10n is disabled, fall back to the project settings.\n./django/utils/formats.py:        val = getattr(settings, format_type)\n./django/utils/formats.py:    be localized (or not), overriding the value of settings.USE_L10N.\n./django/utils/formats.py:    be localized (or not), overriding the value of settings.USE_L10N.\n./django/utils/formats.py:    Format a numeric value using localization settings.\n./django/utils/formats.py:    be localized (or not), overriding the value of settings.USE_L10N.\n./django/utils/formats.py:    if use_l10n or (use_l10n is None and settings.USE_L10N):\n./django/utils/formats.py:    be localized (or not), overriding the value of settings.USE_L10N.\n./django/utils/formats.py:        if settings.USE_THOUSAND_SEPARATOR:\n./django/utils/numberformat.py:from django.conf import settings\n./django/utils/numberformat.py:    use_grouping = (use_l10n or (use_l10n is None and settings.USE_L10N)) and settings.USE_THOUSAND_SEPARATOR\n./django/middleware/locale.py:from django.conf import settings\n./django/middleware/locale.py:        urlconf = getattr(request, 'urlconf', settings.ROOT_URLCONF)\n./django/middleware/locale.py:            language = settings.LANGUAGE_CODE\n./django/middleware/locale.py:        urlconf = getattr(request, 'urlconf', settings.ROOT_URLCONF)\n./django/middleware/locale.py:                    settings.APPEND_SLASH and not language_path.endswith('/') and\n./django/middleware/csrf.py:from django.conf import settings\n./django/middleware/csrf.py:    return get_callable(settings.CSRF_FAILURE_VIEW)\n./django/middleware/csrf.py:        if settings.CSRF_USE_SESSIONS:\n./django/middleware/csrf.py:                    'in MIDDLEWARE%s.' % ('_CLASSES' if settings.MIDDLEWARE is None else '')\n./django/middleware/csrf.py:                cookie_token = request.COOKIES[settings.CSRF_COOKIE_NAME]\n./django/middleware/csrf.py:        if settings.CSRF_USE_SESSIONS:\n./django/middleware/csrf.py:                settings.CSRF_COOKIE_NAME,\n./django/middleware/csrf.py:                max_age=settings.CSRF_COOKIE_AGE,\n./django/middleware/csrf.py:                domain=settings.CSRF_COOKIE_DOMAIN,\n./django/middleware/csrf.py:                path=settings.CSRF_COOKIE_PATH,\n./django/middleware/csrf.py:                secure=settings.CSRF_COOKIE_SECURE,\n./django/middleware/csrf.py:                httponly=settings.CSRF_COOKIE_HTTPONLY,\n./django/middleware/csrf.py:                samesite=settings.CSRF_COOKIE_SAMESITE,\n./django/middleware/csrf.py:                    settings.SESSION_COOKIE_DOMAIN\n./django/middleware/csrf.py:                    if settings.CSRF_USE_SESSIONS\n./django/middleware/csrf.py:                    else settings.CSRF_COOKIE_DOMAIN\n./django/middleware/csrf.py:                good_hosts = list(settings.CSRF_TRUSTED_ORIGINS)\n./django/middleware/csrf.py:                request_csrf_token = request.META.get(settings.CSRF_HEADER_NAME, '')\n./django/middleware/common.py:from django.conf import settings\n./django/middleware/common.py:        - Forbid access to User-Agents in settings.DISALLOWED_USER_AGENTS\n./django/middleware/common.py:        - URL rewriting: Based on the APPEND_SLASH and PREPEND_WWW settings,\n./django/middleware/common.py:        settings.APPEND_SLASH and settings.PREPEND_WWW\n./django/middleware/common.py:            for user_agent_regex in settings.DISALLOWED_USER_AGENTS:\n./django/middleware/common.py:        # Check for a redirect based on settings.PREPEND_WWW\n./django/middleware/common.py:        must_prepend = settings.PREPEND_WWW and host and not host.startswith('www.')\n./django/middleware/common.py:        Return True if settings.APPEND_SLASH is True and appending a slash to\n./django/middleware/common.py:        if settings.APPEND_SLASH and not request.path_info.endswith('/'):\n./django/middleware/common.py:        Raise a RuntimeError if settings.DEBUG is True and request.method is\n./django/middleware/common.py:        if settings.DEBUG and request.method in ('POST', 'PUT', 'PATCH'):\n./django/middleware/common.py:                \"slash), or set APPEND_SLASH=False in your Django settings.\" % {\n./django/middleware/common.py:        if response.status_code == 404 and not settings.DEBUG:\n./django/middleware/common.py:        according to project settings or in situations outlined by the inline\n./django/middleware/common.py:        if settings.APPEND_SLASH and uri.endswith('/') and referer == uri[:-1]:\n./django/middleware/common.py:        return any(pattern.search(uri) for pattern in settings.IGNORABLE_404_URLS)\n./django/middleware/cache.py:from django.conf import settings\n./django/middleware/cache.py:        self.cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS\n./django/middleware/cache.py:        self.key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n./django/middleware/cache.py:        self.cache_alias = settings.CACHE_MIDDLEWARE_ALIAS\n./django/middleware/cache.py:        self.key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n./django/middleware/cache.py:        self.cache_alias = settings.CACHE_MIDDLEWARE_ALIAS\n./django/middleware/cache.py:            key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n./django/middleware/cache.py:            cache_alias = settings.CACHE_MIDDLEWARE_ALIAS\n./django/middleware/cache.py:            cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS\n./django/middleware/security.py:from django.conf import settings\n./django/middleware/security.py:        self.sts_seconds = settings.SECURE_HSTS_SECONDS\n./django/middleware/security.py:        self.sts_include_subdomains = settings.SECURE_HSTS_INCLUDE_SUBDOMAINS\n./django/middleware/security.py:        self.sts_preload = settings.SECURE_HSTS_PRELOAD\n./django/middleware/security.py:        self.content_type_nosniff = settings.SECURE_CONTENT_TYPE_NOSNIFF\n./django/middleware/security.py:        self.xss_filter = settings.SECURE_BROWSER_XSS_FILTER\n./django/middleware/security.py:        self.redirect = settings.SECURE_SSL_REDIRECT\n./django/middleware/security.py:        self.redirect_host = settings.SECURE_SSL_HOST\n./django/middleware/security.py:        self.redirect_exempt = [re.compile(r) for r in settings.SECURE_REDIRECT_EXEMPT]\n./django/middleware/clickjacking.py:from django.conf import settings\n./django/middleware/clickjacking.py:    your project's Django settings to 'DENY'.\n./django/middleware/clickjacking.py:        return getattr(settings, 'X_FRAME_OPTIONS', 'SAMEORIGIN').upper()\n./django/db/models/sql/query.py:        Remove any ordering settings. If 'force_empty' is True, there will be\n./django/db/models/fields/__init__.py:from django.conf import settings\n./django/db/models/fields/__init__.py:        return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE\n./django/db/models/fields/__init__.py:            if settings.USE_TZ and timezone.is_aware(value):\n./django/db/models/fields/__init__.py:            if settings.USE_TZ:\n./django/db/models/fields/__init__.py:        if value is not None and settings.USE_TZ and timezone.is_naive(value):\n./django/db/models/fields/related.py:                    hint=\"Update the relation to point at 'settings.%s'.\" % self.remote_field.model._meta.swappable,\n./django/db/models/fields/related.py:            return apps.get_swappable_settings_name(to_string)\n./django/db/models/fields/related.py:            # If it's already a settings reference, error\n./django/db/models/fields/related.py:            # If it's already a settings reference, error.\n./django/db/models/query.py:from django.conf import settings\n./django/db/models/query.py:        use_chunked_fetch = not connections[self.db].settings_dict.get('DISABLE_SERVER_SIDE_CURSORS')\n./django/db/models/query.py:        if settings.USE_TZ:\n./django/db/models/base.py:from django.conf import settings\n./django/db/models/base.py:        get_absolute_url_override = settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)\n./django/db/models/base.py:        for db in settings.DATABASES:\n./django/db/models/base.py:        for db in settings.DATABASES:\n./django/db/models/functions/datetime.py:from django.conf import settings\n./django/db/models/functions/datetime.py:        if settings.USE_TZ:\n./django/db/models/functions/datetime.py:            if not settings.USE_TZ:\n./django/db/models/functions/datetime.py:        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None\n./django/db/models/functions/datetime.py:        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None\n./django/db/models/options.py:from django.conf import settings\n./django/db/models/options.py:        self.db_tablespace = settings.DEFAULT_TABLESPACE\n./django/db/models/options.py:            swapped_for = getattr(settings, self.swappable, None)\n./django/db/utils.py:from django.conf import settings\n./django/db/utils.py:        like settings.DATABASES).\n./django/db/utils.py:            self._databases = settings.DATABASES\n./django/db/utils.py:        Put the defaults into the settings dictionary for a given connection\n./django/db/utils.py:        where no settings is provided.\n./django/db/utils.py:    def prepare_test_settings(self, alias):\n./django/db/utils.py:        Make sure the test settings are available in the 'TEST' sub-dictionary.\n./django/db/utils.py:        test_settings = conn.setdefault('TEST', {})\n./django/db/utils.py:            test_settings.setdefault(key, None)\n./django/db/utils.py:        self.prepare_test_settings(alias)\n./django/db/utils.py:        If routers is not specified, default to settings.DATABASE_ROUTERS.\n./django/db/utils.py:            self._routers = settings.DATABASE_ROUTERS\n./django/db/migrations/loader.py:from django.conf import settings\n./django/db/migrations/loader.py:        settings.MIGRATION_MODULE.\n./django/db/migrations/loader.py:        if app_label in settings.MIGRATION_MODULES:\n./django/db/migrations/loader.py:            return settings.MIGRATION_MODULES[app_label], True\n./django/db/migrations/serializer.py:        return \"settings.%s\" % self.value.setting_name, {\"from django.conf import settings\"}\n./django/db/migrations/autodetector.py:from django.conf import settings\n./django/db/migrations/autodetector.py:        resolved_app_label, resolved_object_name = getattr(settings, dependency[1]).split('.')\n./django/db/migrations/autodetector.py:                settings.AUTH_USER_MODEL.lower() == string_version.lower()\n./django/db/migrations/writer.py:                dependencies.append(\"        migrations.swappable_dependency(settings.%s),\" % dependency[1])\n./django/db/migrations/writer.py:                imports.add(\"from django.conf import settings\")\n./django/db/migrations/state.py:from django.conf import settings\n./django/db/migrations/state.py:        ignore = {make_model_tuple(settings.AUTH_USER_MODEL)} if ignore_swappable else set()\n./django/db/backends/base/operations.py:from django.conf import settings\n./django/db/backends/base/operations.py:        if settings.USE_TZ:\n./django/db/backends/base/base.py:from django.conf import settings\n./django/db/backends/base/base.py:    def __init__(self, settings_dict, alias=DEFAULT_DB_ALIAS):\n./django/db/backends/base/base.py:        # `settings_dict` should be a dictionary containing keys such as\n./django/db/backends/base/base.py:        # NAME, USER, etc. It's called `settings_dict` instead of `settings`\n./django/db/backends/base/base.py:        # to disambiguate it from Django settings modules.\n./django/db/backends/base/base.py:        self.settings_dict = settings_dict\n./django/db/backends/base/base.py:        if not settings.USE_TZ:\n./django/db/backends/base/base.py:        elif self.settings_dict['TIME_ZONE'] is None:\n./django/db/backends/base/base.py:            return pytz.timezone(self.settings_dict['TIME_ZONE'])\n./django/db/backends/base/base.py:        if not settings.USE_TZ:\n./django/db/backends/base/base.py:            return settings.TIME_ZONE\n./django/db/backends/base/base.py:        elif self.settings_dict['TIME_ZONE'] is None:\n./django/db/backends/base/base.py:            return self.settings_dict['TIME_ZONE']\n./django/db/backends/base/base.py:        return self.force_debug_cursor or settings.DEBUG\n./django/db/backends/base/base.py:        \"\"\"Initialize the database connection settings.\"\"\"\n./django/db/backends/base/base.py:        self.check_settings()\n./django/db/backends/base/base.py:        max_age = self.settings_dict['CONN_MAX_AGE']\n./django/db/backends/base/base.py:        self.set_autocommit(self.settings_dict['AUTOCOMMIT'])\n./django/db/backends/base/base.py:    def check_settings(self):\n./django/db/backends/base/base.py:        if self.settings_dict['TIME_ZONE'] is not None:\n./django/db/backends/base/base.py:            if not settings.USE_TZ:\n./django/db/backends/base/base.py:            if self.get_autocommit() != self.settings_dict['AUTOCOMMIT']:\n./django/db/backends/base/base.py:        return self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n./django/db/backends/base/base.py:        settings_dict = copy.deepcopy(self.settings_dict)\n./django/db/backends/base/base.py:        return type(self)(settings_dict, alias)\n./django/db/backends/base/creation.py:from django.conf import settings\n./django/db/backends/base/creation.py:        settings.DATABASES[self.connection.alias][\"NAME\"] = test_database_name\n./django/db/backends/base/creation.py:        self.connection.settings_dict[\"NAME\"] = test_database_name\n./django/db/backends/base/creation.py:    def set_as_test_mirror(self, primary_settings_dict):\n./django/db/backends/base/creation.py:        database whose settings are given.\n./django/db/backends/base/creation.py:        self.connection.settings_dict['NAME'] = primary_settings_dict['NAME']\n./django/db/backends/base/creation.py:                app_config.name not in settings.TEST_NON_SERIALIZED_APPS\n./django/db/backends/base/creation.py:        settings.\n./django/db/backends/base/creation.py:        if self.connection.settings_dict['TEST']['NAME']:\n./django/db/backends/base/creation.py:            return self.connection.settings_dict['TEST']['NAME']\n./django/db/backends/base/creation.py:        return TEST_DATABASE_PREFIX + self.connection.settings_dict['NAME']\n./django/db/backends/base/creation.py:        source_database_name = self.connection.settings_dict['NAME']\n./django/db/backends/base/creation.py:    def get_test_db_clone_settings(self, suffix):\n./django/db/backends/base/creation.py:        Return a modified connection settings dict for the n-th clone of a DB.\n./django/db/backends/base/creation.py:        # already and its name has been copied to settings_dict['NAME'] so\n./django/db/backends/base/creation.py:        orig_settings_dict = self.connection.settings_dict\n./django/db/backends/base/creation.py:        return {**orig_settings_dict, 'NAME': '{}_{}'.format(orig_settings_dict['NAME'], suffix)}\n./django/db/backends/base/creation.py:            test_database_name = self.connection.settings_dict['NAME']\n./django/db/backends/base/creation.py:            test_database_name = self.get_test_db_clone_settings(suffix)['NAME']\n./django/db/backends/base/creation.py:            settings.DATABASES[self.connection.alias][\"NAME\"] = old_database_name\n./django/db/backends/base/creation.py:            self.connection.settings_dict[\"NAME\"] = old_database_name\n./django/db/backends/base/creation.py:        Return a tuple with elements of self.connection.settings_dict (a\n./django/db/backends/base/creation.py:        settings_dict = self.connection.settings_dict\n./django/db/backends/base/creation.py:            settings_dict['HOST'],\n./django/db/backends/base/creation.py:            settings_dict['PORT'],\n./django/db/backends/base/creation.py:            settings_dict['ENGINE'],\n./django/db/backends/sqlite3/operations.py:from django.conf import settings\n./django/db/backends/sqlite3/operations.py:        if settings.USE_TZ:\n./django/db/backends/sqlite3/operations.py:            if settings.USE_TZ:\n./django/db/backends/sqlite3/operations.py:            if settings.USE_TZ and not timezone.is_aware(value):\n./django/db/backends/sqlite3/client.py:                self.connection.settings_dict['NAME']]\n./django/db/backends/sqlite3/base.py:        settings_dict = self.settings_dict\n./django/db/backends/sqlite3/base.py:        if not settings_dict['NAME']:\n./django/db/backends/sqlite3/base.py:                \"settings.DATABASES is improperly configured. \"\n./django/db/backends/sqlite3/base.py:            'database': settings_dict['NAME'],\n./django/db/backends/sqlite3/base.py:            **settings_dict['OPTIONS'],\n./django/db/backends/sqlite3/base.py:        return self.creation.is_in_memory_db(self.settings_dict['NAME'])\n./django/db/backends/sqlite3/creation.py:        test_database_name = self.connection.settings_dict['TEST']['NAME'] or ':memory:'\n./django/db/backends/sqlite3/creation.py:    def get_test_db_clone_settings(self, suffix):\n./django/db/backends/sqlite3/creation.py:        orig_settings_dict = self.connection.settings_dict\n./django/db/backends/sqlite3/creation.py:        source_database_name = orig_settings_dict['NAME']\n./django/db/backends/sqlite3/creation.py:            return orig_settings_dict\n./django/db/backends/sqlite3/creation.py:            root, ext = os.path.splitext(orig_settings_dict['NAME'])\n./django/db/backends/sqlite3/creation.py:            return {**orig_settings_dict, 'NAME': '{}_{}.{}'.format(root, suffix, ext)}\n./django/db/backends/sqlite3/creation.py:        source_database_name = self.connection.settings_dict['NAME']\n./django/db/backends/sqlite3/creation.py:        target_database_name = self.get_test_db_clone_settings(suffix)['NAME']\n./django/db/backends/sqlite3/creation.py:        sig = [self.connection.settings_dict['NAME']]\n./django/db/backends/oracle/operations.py:from django.conf import settings\n./django/db/backends/oracle/operations.py:        if not settings.USE_TZ:\n./django/db/backends/oracle/operations.py:            if settings.USE_TZ:\n./django/db/backends/oracle/operations.py:            if settings.USE_TZ:\n./django/db/backends/oracle/base.py:from django.conf import settings\n./django/db/backends/oracle/base.py:        use_returning_into = self.settings_dict[\"OPTIONS\"].get('use_returning_into', True)\n./django/db/backends/oracle/base.py:        settings_dict = self.settings_dict\n./django/db/backends/oracle/base.py:        if not settings_dict['HOST'].strip():\n./django/db/backends/oracle/base.py:            settings_dict['HOST'] = 'localhost'\n./django/db/backends/oracle/base.py:        if settings_dict['PORT']:\n./django/db/backends/oracle/base.py:            return Database.makedsn(settings_dict['HOST'], int(settings_dict['PORT']), settings_dict['NAME'])\n./django/db/backends/oracle/base.py:        return settings_dict['NAME']\n./django/db/backends/oracle/base.py:        return '%s/\"%s\"@%s' % (self.settings_dict['USER'], self.settings_dict['PASSWORD'], self._dsn())\n./django/db/backends/oracle/base.py:        conn_params = self.settings_dict['OPTIONS'].copy()\n./django/db/backends/oracle/base.py:            user=self.settings_dict['USER'],\n./django/db/backends/oracle/base.py:            password=self.settings_dict['PASSWORD'],\n./django/db/backends/oracle/base.py:            (\" TIME_ZONE = 'UTC'\" if settings.USE_TZ else '')\n./django/db/backends/oracle/base.py:            # the same settings.\n./django/db/backends/oracle/base.py:        if settings.USE_TZ and (isinstance(param, datetime.datetime) and\n./django/db/backends/oracle/creation.py:from django.conf import settings\n./django/db/backends/oracle/creation.py:        settings_dict = settings.DATABASES[self.connection.alias]\n./django/db/backends/oracle/creation.py:        user = settings_dict.get('SAVED_USER') or settings_dict['USER']\n./django/db/backends/oracle/creation.py:        password = settings_dict.get('SAVED_PASSWORD') or settings_dict['PASSWORD']\n./django/db/backends/oracle/creation.py:        settings_dict = {**settings_dict, 'USER': user, 'PASSWORD': password}\n./django/db/backends/oracle/creation.py:        return DatabaseWrapper(settings_dict, alias=self.connection.alias)\n./django/db/backends/oracle/creation.py:        return self.connection.settings_dict['NAME']\n./django/db/backends/oracle/creation.py:        credentials in the SAVED_USER/SAVED_PASSWORD key in the settings dict.\n./django/db/backends/oracle/creation.py:        real_settings = settings.DATABASES[self.connection.alias]\n./django/db/backends/oracle/creation.py:        real_settings['SAVED_USER'] = self.connection.settings_dict['SAVED_USER'] = \\\n./django/db/backends/oracle/creation.py:            self.connection.settings_dict['USER']\n./django/db/backends/oracle/creation.py:        real_settings['SAVED_PASSWORD'] = self.connection.settings_dict['SAVED_PASSWORD'] = \\\n./django/db/backends/oracle/creation.py:            self.connection.settings_dict['PASSWORD']\n./django/db/backends/oracle/creation.py:        real_test_settings = real_settings['TEST']\n./django/db/backends/oracle/creation.py:        test_settings = self.connection.settings_dict['TEST']\n./django/db/backends/oracle/creation.py:        real_test_settings['USER'] = real_settings['USER'] = test_settings['USER'] = \\\n./django/db/backends/oracle/creation.py:            self.connection.settings_dict['USER'] = parameters['user']\n./django/db/backends/oracle/creation.py:        real_settings['PASSWORD'] = self.connection.settings_dict['PASSWORD'] = parameters['password']\n./django/db/backends/oracle/creation.py:    def set_as_test_mirror(self, primary_settings_dict):\n./django/db/backends/oracle/creation.py:        database whose settings are given.\n./django/db/backends/oracle/creation.py:        self.connection.settings_dict['USER'] = primary_settings_dict['USER']\n./django/db/backends/oracle/creation.py:        self.connection.settings_dict['PASSWORD'] = primary_settings_dict['PASSWORD']\n./django/db/backends/oracle/creation.py:        self.connection.settings_dict['USER'] = self.connection.settings_dict['SAVED_USER']\n./django/db/backends/oracle/creation.py:        self.connection.settings_dict['PASSWORD'] = self.connection.settings_dict['SAVED_PASSWORD']\n./django/db/backends/oracle/creation.py:        if not success and self._test_settings_get('PASSWORD') is None:\n./django/db/backends/oracle/creation.py:    def _test_settings_get(self, key, default=None, prefixed=None):\n./django/db/backends/oracle/creation.py:        Return a value from the test settings dict, or a given default, or a\n./django/db/backends/oracle/creation.py:        prefixed entry from the main settings dict.\n./django/db/backends/oracle/creation.py:        settings_dict = self.connection.settings_dict\n./django/db/backends/oracle/creation.py:        val = settings_dict['TEST'].get(key, default)\n./django/db/backends/oracle/creation.py:            val = TEST_DATABASE_PREFIX + settings_dict[prefixed]\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('NAME', prefixed='NAME')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('CREATE_DB', default=True)\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('CREATE_USER', default=True)\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('USER', prefixed='USER')\n./django/db/backends/oracle/creation.py:        password = self._test_settings_get('PASSWORD')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('TBLSPACE', prefixed='USER')\n./django/db/backends/oracle/creation.py:        settings_dict = self.connection.settings_dict\n./django/db/backends/oracle/creation.py:        return settings_dict['TEST'].get('TBLSPACE_TMP',\n./django/db/backends/oracle/creation.py:                                         TEST_DATABASE_PREFIX + settings_dict['USER'] + '_temp')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('DATAFILE', default=tblspace)\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('DATAFILE_TMP', default=tblspace)\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('DATAFILE_MAXSIZE', default='500M')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('DATAFILE_TMP_MAXSIZE', default='500M')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('DATAFILE_SIZE', default='50M')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('DATAFILE_TMP_SIZE', default='50M')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('DATAFILE_EXTSIZE', default='25M')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('DATAFILE_TMP_EXTSIZE', default='25M')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('ORACLE_MANAGED_FILES', default=False)\n./django/db/backends/oracle/creation.py:        return self.connection.settings_dict['NAME']\n./django/db/backends/oracle/creation.py:        settings_dict = self.connection.settings_dict\n./django/db/backends/oracle/creation.py:            settings_dict['HOST'],\n./django/db/backends/oracle/creation.py:            settings_dict['PORT'],\n./django/db/backends/oracle/creation.py:            settings_dict['ENGINE'],\n./django/db/backends/oracle/creation.py:            settings_dict['NAME'],\n./django/db/backends/dummy/base.py:    raise ImproperlyConfigured(\"settings.DATABASES is improperly configured. \"\n./django/db/backends/dummy/base.py:                               \"settings documentation for more details.\")\n./django/db/backends/utils.py:from django.conf import settings\n./django/db/backends/utils.py:    tzinfo = utc if settings.USE_TZ else None\n./django/db/backends/postgresql/operations.py:from django.conf import settings\n./django/db/backends/postgresql/operations.py:        if settings.USE_TZ:\n./django/db/backends/postgresql/base.py:from django.conf import settings\n./django/db/backends/postgresql/base.py:        settings_dict = self.settings_dict\n./django/db/backends/postgresql/base.py:        if settings_dict['NAME'] == '':\n./django/db/backends/postgresql/base.py:                \"settings.DATABASES is improperly configured. \"\n./django/db/backends/postgresql/base.py:        if len(settings_dict['NAME'] or '') > self.ops.max_name_length():\n./django/db/backends/postgresql/base.py:                \"in settings.DATABASES.\" % (\n./django/db/backends/postgresql/base.py:                    settings_dict['NAME'],\n./django/db/backends/postgresql/base.py:                    len(settings_dict['NAME']),\n./django/db/backends/postgresql/base.py:            'database': settings_dict['NAME'] or 'postgres',\n./django/db/backends/postgresql/base.py:            **settings_dict['OPTIONS'],\n./django/db/backends/postgresql/base.py:        if settings_dict['USER']:\n./django/db/backends/postgresql/base.py:            conn_params['user'] = settings_dict['USER']\n./django/db/backends/postgresql/base.py:        if settings_dict['PASSWORD']:\n./django/db/backends/postgresql/base.py:            conn_params['password'] = settings_dict['PASSWORD']\n./django/db/backends/postgresql/base.py:        if settings_dict['HOST']:\n./django/db/backends/postgresql/base.py:            conn_params['host'] = settings_dict['HOST']\n./django/db/backends/postgresql/base.py:        if settings_dict['PORT']:\n./django/db/backends/postgresql/base.py:            conn_params['port'] = settings_dict['PORT']\n./django/db/backends/postgresql/base.py:        options = self.settings_dict['OPTIONS']\n./django/db/backends/postgresql/base.py:        cursor.tzinfo_factory = utc_tzinfo_factory if settings.USE_TZ else None\n./django/db/backends/postgresql/base.py:                if connection.vendor == 'postgresql' and connection.settings_dict['NAME'] != 'postgres':\n./django/db/backends/postgresql/base.py:                        {**self.settings_dict, 'NAME': connection.settings_dict['NAME']},\n./django/db/backends/postgresql/creation.py:        test_settings = self.connection.settings_dict['TEST']\n./django/db/backends/postgresql/creation.py:        assert test_settings['COLLATION'] is None, (\n./django/db/backends/postgresql/creation.py:            encoding=test_settings['CHARSET'],\n./django/db/backends/postgresql/creation.py:            template=test_settings.get('TEMPLATE'),\n./django/db/backends/postgresql/creation.py:        source_database_name = self.connection.settings_dict['NAME']\n./django/db/backends/postgresql/creation.py:        target_database_name = self.get_test_db_clone_settings(suffix)['NAME']\n./django/db/backends/mysql/operations.py:from django.conf import settings\n./django/db/backends/mysql/operations.py:        if settings.USE_TZ and self.connection.timezone_name != tzname:\n./django/db/backends/mysql/operations.py:            if settings.USE_TZ:\n./django/db/backends/mysql/operations.py:            if settings.USE_TZ:\n./django/db/backends/mysql/client.py:    def settings_to_cmd_args(cls, settings_dict):\n./django/db/backends/mysql/client.py:        db = settings_dict['OPTIONS'].get('db', settings_dict['NAME'])\n./django/db/backends/mysql/client.py:        user = settings_dict['OPTIONS'].get('user', settings_dict['USER'])\n./django/db/backends/mysql/client.py:        passwd = settings_dict['OPTIONS'].get('passwd', settings_dict['PASSWORD'])\n./django/db/backends/mysql/client.py:        host = settings_dict['OPTIONS'].get('host', settings_dict['HOST'])\n./django/db/backends/mysql/client.py:        port = settings_dict['OPTIONS'].get('port', settings_dict['PORT'])\n./django/db/backends/mysql/client.py:        server_ca = settings_dict['OPTIONS'].get('ssl', {}).get('ca')\n./django/db/backends/mysql/client.py:        client_cert = settings_dict['OPTIONS'].get('ssl', {}).get('cert')\n./django/db/backends/mysql/client.py:        client_key = settings_dict['OPTIONS'].get('ssl', {}).get('key')\n./django/db/backends/mysql/client.py:        defaults_file = settings_dict['OPTIONS'].get('read_default_file')\n./django/db/backends/mysql/client.py:        args = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict)\n./django/db/backends/mysql/base.py:        settings_dict = self.settings_dict\n./django/db/backends/mysql/base.py:        if settings_dict['USER']:\n./django/db/backends/mysql/base.py:            kwargs['user'] = settings_dict['USER']\n./django/db/backends/mysql/base.py:        if settings_dict['NAME']:\n./django/db/backends/mysql/base.py:            kwargs['db'] = settings_dict['NAME']\n./django/db/backends/mysql/base.py:        if settings_dict['PASSWORD']:\n./django/db/backends/mysql/base.py:            kwargs['passwd'] = settings_dict['PASSWORD']\n./django/db/backends/mysql/base.py:        if settings_dict['HOST'].startswith('/'):\n./django/db/backends/mysql/base.py:            kwargs['unix_socket'] = settings_dict['HOST']\n./django/db/backends/mysql/base.py:        elif settings_dict['HOST']:\n./django/db/backends/mysql/base.py:            kwargs['host'] = settings_dict['HOST']\n./django/db/backends/mysql/base.py:        if settings_dict['PORT']:\n./django/db/backends/mysql/base.py:            kwargs['port'] = int(settings_dict['PORT'])\n./django/db/backends/mysql/base.py:        options = settings_dict['OPTIONS'].copy()\n./django/db/backends/mysql/creation.py:        test_settings = self.connection.settings_dict['TEST']\n./django/db/backends/mysql/creation.py:        if test_settings['CHARSET']:\n./django/db/backends/mysql/creation.py:            suffix.append('CHARACTER SET %s' % test_settings['CHARSET'])\n./django/db/backends/mysql/creation.py:        if test_settings['COLLATION']:\n./django/db/backends/mysql/creation.py:            suffix.append('COLLATE %s' % test_settings['COLLATION'])\n./django/db/backends/mysql/creation.py:        source_database_name = self.connection.settings_dict['NAME']\n./django/db/backends/mysql/creation.py:        target_database_name = self.get_test_db_clone_settings(suffix)['NAME']\n./django/db/backends/mysql/creation.py:        dump_args = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict)[1:]\n./django/db/backends/mysql/creation.py:        load_cmd = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict)\n./django/contrib/auth/tokens.py:from django.conf import settings\n./django/contrib/auth/tokens.py:    secret = settings.SECRET_KEY\n./django/contrib/auth/tokens.py:        if (self._num_days(self._today()) - ts) > settings.PASSWORD_RESET_TIMEOUT_DAYS:\n./django/contrib/auth/tokens.py:        Failing those things, settings.PASSWORD_RESET_TIMEOUT_DAYS eventually\n./django/contrib/auth/__init__.py:from django.conf import settings\n./django/contrib/auth/__init__.py:    for backend_path in settings.AUTHENTICATION_BACKENDS:\n./django/contrib/auth/__init__.py:        return django_apps.get_model(settings.AUTH_USER_MODEL, require_ready=False)\n./django/contrib/auth/__init__.py:            \"AUTH_USER_MODEL refers to model '%s' that has not been installed\" % settings.AUTH_USER_MODEL\n./django/contrib/auth/__init__.py:        if backend_path in settings.AUTHENTICATION_BACKENDS:\n./django/contrib/auth/mixins.py:from django.conf import settings\n./django/contrib/auth/mixins.py:        login_url = self.login_url or settings.LOGIN_URL\n./django/contrib/auth/mixins.py:                '{0} is missing the login_url attribute. Define {0}.login_url, settings.LOGIN_URL, or override '\n./django/contrib/auth/password_validation.py:from django.conf import settings\n./django/contrib/auth/password_validation.py:    return get_password_validators(settings.AUTH_PASSWORD_VALIDATORS)\n./django/contrib/auth/views.py:from django.conf import settings\n./django/contrib/auth/views.py:        return url or resolve_url(settings.LOGIN_REDIRECT_URL)\n./django/contrib/auth/views.py:        elif settings.LOGOUT_REDIRECT_URL:\n./django/contrib/auth/views.py:            next_page = resolve_url(settings.LOGOUT_REDIRECT_URL)\n./django/contrib/auth/views.py:    login_url = resolve_url(login_url or settings.LOGIN_URL)\n./django/contrib/auth/views.py:    resolved_url = resolve_url(login_url or settings.LOGIN_URL)\n./django/contrib/auth/views.py:        context['login_url'] = resolve_url(settings.LOGIN_URL)\n./django/contrib/auth/checks.py:from django.conf import settings\n./django/contrib/auth/checks.py:        cls = apps.get_model(settings.AUTH_USER_MODEL)\n./django/contrib/auth/checks.py:        app_label, model_name = settings.AUTH_USER_MODEL.split('.')\n./django/contrib/auth/checks.py:        if (settings.AUTHENTICATION_BACKENDS ==\n./django/contrib/auth/backends.py:    Authenticates against settings.AUTH_USER_MODEL.\n./django/contrib/auth/hashers.py:from django.conf import settings\n./django/contrib/auth/hashers.py:    for hasher_path in settings.PASSWORD_HASHERS:\n./django/contrib/auth/hashers.py:    specified in the project's settings file if needed.\n./django/contrib/auth/admin.py:from django.conf import settings\n./django/contrib/auth/admin.py:            if self.has_add_permission(request) and settings.DEBUG:\n./django/contrib/auth/middleware.py:from django.conf import settings\n./django/contrib/auth/middleware.py:        ) % (\"_CLASSES\" if settings.MIDDLEWARE is None else \"\")\n./django/contrib/auth/decorators.py:from django.conf import settings\n./django/contrib/auth/decorators.py:            resolved_login_url = resolve_url(login_url or settings.LOGIN_URL)\n./django/contrib/staticfiles/views.py:from django.conf import settings\n./django/contrib/staticfiles/views.py:    if not settings.DEBUG and not insecure:\n./django/contrib/staticfiles/handlers.py:from django.conf import settings\n./django/contrib/staticfiles/handlers.py:        utils.check_settings()\n./django/contrib/staticfiles/handlers.py:        return settings.STATIC_URL\n./django/contrib/staticfiles/management/commands/collectstatic.py:    settings.STATIC_ROOT.\n./django/contrib/staticfiles/management/commands/collectstatic.py:            'location as specified in your settings'\n./django/contrib/staticfiles/management/commands/runserver.py:from django.conf import settings\n./django/contrib/staticfiles/management/commands/runserver.py:        if use_static_handler and (settings.DEBUG or insecure_serving):\n./django/contrib/staticfiles/storage.py:from django.conf import settings\n./django/contrib/staticfiles/storage.py:from django.contrib.staticfiles.utils import check_settings, matches_patterns\n./django/contrib/staticfiles/storage.py:            location = settings.STATIC_ROOT\n./django/contrib/staticfiles/storage.py:            base_url = settings.STATIC_URL\n./django/contrib/staticfiles/storage.py:        check_settings(base_url)\n./django/contrib/staticfiles/storage.py:        if settings.DEBUG and not force:\n./django/contrib/staticfiles/storage.py:            if url.startswith('/') and not url.startswith(settings.STATIC_URL):\n./django/contrib/staticfiles/storage.py:                assert url_path.startswith(settings.STATIC_URL)\n./django/contrib/staticfiles/storage.py:                target_name = url_path[len(settings.STATIC_URL):]\n./django/contrib/staticfiles/storage.py:                    content = original_file.read().decode(settings.FILE_CHARSET)\n./django/contrib/staticfiles/storage.py:        self._wrapped = get_storage_class(settings.STATICFILES_STORAGE)()\n./django/contrib/staticfiles/utils.py:from django.conf import settings\n./django/contrib/staticfiles/utils.py:def check_settings(base_url=None):\n./django/contrib/staticfiles/utils.py:    Check if the staticfiles settings have sane values.\n./django/contrib/staticfiles/utils.py:        base_url = settings.STATIC_URL\n./django/contrib/staticfiles/utils.py:    if settings.MEDIA_URL == base_url:\n./django/contrib/staticfiles/utils.py:                                   \"settings must have different values\")\n./django/contrib/staticfiles/utils.py:    if (settings.DEBUG and settings.MEDIA_URL and settings.STATIC_URL and\n./django/contrib/staticfiles/utils.py:            settings.MEDIA_URL.startswith(settings.STATIC_URL)):\n./django/contrib/staticfiles/utils.py:    if ((settings.MEDIA_ROOT and settings.STATIC_ROOT) and\n./django/contrib/staticfiles/utils.py:            (settings.MEDIA_ROOT == settings.STATIC_ROOT)):\n./django/contrib/staticfiles/utils.py:                                   \"settings must have different values\")\n./django/contrib/staticfiles/finders.py:from django.conf import settings\n./django/contrib/staticfiles/finders.py:        for root in settings.STATICFILES_DIRS:\n./django/contrib/staticfiles/finders.py:        if not isinstance(settings.STATICFILES_DIRS, (list, tuple)):\n./django/contrib/staticfiles/finders.py:        for root in settings.STATICFILES_DIRS:\n./django/contrib/staticfiles/finders.py:            if settings.STATIC_ROOT and os.path.abspath(settings.STATIC_ROOT) == os.path.abspath(root):\n./django/contrib/staticfiles/finders.py:    for finder_path in settings.STATICFILES_FINDERS:\n./django/contrib/staticfiles/urls.py:from django.conf import settings\n./django/contrib/staticfiles/urls.py:        prefix = settings.STATIC_URL\n./django/contrib/staticfiles/urls.py:if settings.DEBUG and not urlpatterns:\n./django/contrib/messages/utils.py:from django.conf import settings\n./django/contrib/messages/utils.py:        **getattr(settings, 'MESSAGE_TAGS', {}),\n./django/contrib/messages/storage/__init__.py:from django.conf import settings\n./django/contrib/messages/storage/__init__.py:    This isn't just default_storage = import_string(settings.MESSAGE_STORAGE)\n./django/contrib/messages/storage/__init__.py:    to avoid accessing the settings at the module level.\n./django/contrib/messages/storage/__init__.py:    return import_string(settings.MESSAGE_STORAGE)(request)\n./django/contrib/messages/storage/session.py:from django.conf import settings\n./django/contrib/messages/storage/session.py:            \"MIDDLEWARE%s list.\" % (\"_CLASSES\" if settings.MIDDLEWARE is None else \"\")\n./django/contrib/messages/storage/base.py:from django.conf import settings\n./django/contrib/messages/storage/base.py:            self._level = getattr(settings, 'MESSAGE_LEVEL', constants.INFO)\n./django/contrib/messages/storage/cookie.py:from django.conf import settings\n./django/contrib/messages/storage/cookie.py:                domain=settings.SESSION_COOKIE_DOMAIN,\n./django/contrib/messages/storage/cookie.py:                secure=settings.SESSION_COOKIE_SECURE or None,\n./django/contrib/messages/storage/cookie.py:                httponly=settings.SESSION_COOKIE_HTTPONLY or None,\n./django/contrib/messages/storage/cookie.py:                samesite=settings.SESSION_COOKIE_SAMESITE,\n./django/contrib/messages/storage/cookie.py:            response.delete_cookie(self.cookie_name, domain=settings.SESSION_COOKIE_DOMAIN)\n./django/contrib/messages/middleware.py:from django.conf import settings\n./django/contrib/messages/middleware.py:            if unstored_messages and settings.DEBUG:\n./django/contrib/sitemaps/__init__.py:from django.conf import settings\n./django/contrib/sitemaps/__init__.py:            for lang_code, lang_name in settings.LANGUAGES:\n./django/contrib/postgres/apps.py:    is \"uninstalled\" by override_settings().\n./django/contrib/gis/db/backends/spatialite/operations.py:                    self.connection.settings_dict['NAME'],\n./django/contrib/gis/db/backends/spatialite/base.py:from django.conf import settings\n./django/contrib/gis/db/backends/spatialite/base.py:        # manually in the settings via the `SPATIALITE_LIBRARY_PATH` setting.\n./django/contrib/gis/db/backends/spatialite/base.py:            getattr(settings, 'SPATIALITE_LIBRARY_PATH', None),\n./django/contrib/gis/db/backends/spatialite/base.py:                if getattr(settings, 'SPATIALITE_LIBRARY_PATH', None):\n./django/contrib/gis/db/backends/postgis/operations.py:from django.conf import settings\n./django/contrib/gis/db/backends/postgis/operations.py:        if hasattr(settings, 'POSTGIS_VERSION'):\n./django/contrib/gis/db/backends/postgis/operations.py:            version = settings.POSTGIS_VERSION\n./django/contrib/gis/db/backends/postgis/operations.py:                    'template?' % self.connection.settings_dict['NAME']\n./django/contrib/gis/geos/libgeos.py:        from django.conf import settings\n./django/contrib/gis/geos/libgeos.py:        lib_path = settings.GEOS_LIBRARY_PATH\n./django/contrib/gis/geos/libgeos.py:            'Try setting GEOS_LIBRARY_PATH in your settings.' %\n./django/contrib/gis/forms/widgets.py:from django.conf import settings\n./django/contrib/gis/forms/widgets.py:            'STATIC_URL': settings.STATIC_URL,\n./django/contrib/gis/gdal/__init__.py: by setting `GDAL_LIBRARY_PATH` in your settings with the path to the GDAL C\n./django/contrib/gis/gdal/libgdal.py:    from django.conf import settings\n./django/contrib/gis/gdal/libgdal.py:    lib_path = settings.GDAL_LIBRARY_PATH\n./django/contrib/gis/gdal/libgdal.py:        'If it is, try setting GDAL_LIBRARY_PATH in your settings.'\n./django/contrib/gis/admin/widgets.py:# Creating a template context that contains Django settings\n./django/contrib/gis/admin/options.py:    The administration options class for Geographic models. Map settings\n./django/contrib/gis/admin/options.py:    # The default map settings that may be overloaded -- still subject\n./django/contrib/gis/admin/options.py:        in the `widget` attribute) using the settings from the attributes set\n./django/contrib/gis/geoip2/__init__.py:directory corresponding to settings.GEOIP_PATH.\n./django/contrib/gis/geoip2/base.py:from django.conf import settings\n./django/contrib/gis/geoip2/base.py:# Creating the settings dictionary with any settings, if needed.\n./django/contrib/gis/geoip2/base.py:    'GEOIP_PATH': getattr(settings, 'GEOIP_PATH', None),\n./django/contrib/gis/geoip2/base.py:    'GEOIP_CITY': getattr(settings, 'GEOIP_CITY', 'GeoLite2-City.mmdb'),\n./django/contrib/gis/geoip2/base.py:    'GEOIP_COUNTRY': getattr(settings, 'GEOIP_COUNTRY', 'GeoLite2-Country.mmdb'),\n./django/contrib/gis/geoip2/base.py:        settings. Keyword arguments may be passed in to customize the locations\n./django/contrib/gis/geoip2/base.py:        * cache: The cache settings when opening up the GeoIP datasets. May be\n./django/contrib/gis/geoip2/base.py:            `GeoIPOptions` C API settings,  respectively. Defaults to 0,\n./django/contrib/gis/geoip2/base.py:            # Constructing the GeoIP database filenames using the settings\n./django/contrib/gis/shortcuts.py:from django.conf import settings\n./django/contrib/gis/shortcuts.py:        zf.writestr('doc.kml', kml.encode(settings.DEFAULT_CHARSET))\n./django/contrib/sessions/management/commands/clearsessions.py:from django.conf import settings\n./django/contrib/sessions/management/commands/clearsessions.py:        engine = import_module(settings.SESSION_ENGINE)\n./django/contrib/sessions/management/commands/clearsessions.py:                              \"expired sessions.\\n\" % settings.SESSION_ENGINE)\n./django/contrib/sessions/backends/base.py:from django.conf import settings\n./django/contrib/sessions/backends/base.py:        self.serializer = import_string(settings.SESSION_SERIALIZER)\n./django/contrib/sessions/backends/base.py:                'request.COOKIES[settings.LANGUAGE_COOKIE_NAME] instead.',\n./django/contrib/sessions/backends/base.py:        return settings.SESSION_COOKIE_AGE\n./django/contrib/sessions/backends/base.py:            return settings.SESSION_EXPIRE_AT_BROWSER_CLOSE\n./django/contrib/sessions/backends/cache.py:from django.conf import settings\n./django/contrib/sessions/backends/cache.py:        self._cache = caches[settings.SESSION_CACHE_ALIAS]\n./django/contrib/sessions/backends/cached_db.py:from django.conf import settings\n./django/contrib/sessions/backends/cached_db.py:        self._cache = caches[settings.SESSION_CACHE_ALIAS]\n./django/contrib/sessions/backends/file.py:from django.conf import settings\n./django/contrib/sessions/backends/file.py:        self.file_prefix = settings.SESSION_COOKIE_NAME\n./django/contrib/sessions/backends/file.py:            storage_path = getattr(settings, 'SESSION_FILE_PATH', None) or tempfile.gettempdir()\n./django/contrib/sessions/backends/file.py:        if settings.USE_TZ:\n./django/contrib/sessions/backends/file.py:        file_prefix = settings.SESSION_COOKIE_NAME\n./django/contrib/sessions/middleware.py:from django.conf import settings\n./django/contrib/sessions/middleware.py:        engine = import_module(settings.SESSION_ENGINE)\n./django/contrib/sessions/middleware.py:        session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME)\n./django/contrib/sessions/middleware.py:        if settings.SESSION_COOKIE_NAME in request.COOKIES and empty:\n./django/contrib/sessions/middleware.py:                settings.SESSION_COOKIE_NAME,\n./django/contrib/sessions/middleware.py:                path=settings.SESSION_COOKIE_PATH,\n./django/contrib/sessions/middleware.py:                domain=settings.SESSION_COOKIE_DOMAIN,\n./django/contrib/sessions/middleware.py:            if (modified or settings.SESSION_SAVE_EVERY_REQUEST) and not empty:\n./django/contrib/sessions/middleware.py:                        settings.SESSION_COOKIE_NAME,\n./django/contrib/sessions/middleware.py:                        expires=expires, domain=settings.SESSION_COOKIE_DOMAIN,\n./django/contrib/sessions/middleware.py:                        path=settings.SESSION_COOKIE_PATH,\n./django/contrib/sessions/middleware.py:                        secure=settings.SESSION_COOKIE_SECURE or None,\n./django/contrib/sessions/middleware.py:                        httponly=settings.SESSION_COOKIE_HTTPONLY or None,\n./django/contrib/sessions/middleware.py:                        samesite=settings.SESSION_COOKIE_SAMESITE,\n./django/contrib/humanize/templatetags/humanize.py:from django.conf import settings\n./django/contrib/humanize/templatetags/humanize.py:    if settings.USE_L10N and use_l10n:\n./django/contrib/humanize/templatetags/humanize.py:        if settings.USE_L10N:\n./django/contrib/humanize/templatetags/humanize.py:    formatted according to settings.DATE_FORMAT.\n./django/contrib/admin/checks.py:from django.conf import settings\n./django/contrib/admin/checks.py:                _contains_subclass('django.contrib.auth.backends.ModelBackend', settings.AUTHENTICATION_BACKENDS)):\n./django/contrib/admin/checks.py:    if not _contains_subclass('django.contrib.auth.middleware.AuthenticationMiddleware', settings.MIDDLEWARE):\n./django/contrib/admin/checks.py:    if not _contains_subclass('django.contrib.messages.middleware.MessageMiddleware', settings.MIDDLEWARE):\n./django/contrib/admin/checks.py:    if not _contains_subclass('django.contrib.sessions.middleware.SessionMiddleware', settings.MIDDLEWARE):\n./django/contrib/admin/widgets.py:from django.conf import settings\n./django/contrib/admin/widgets.py:        extra = '' if settings.DEBUG else '.min'\n./django/contrib/admin/widgets.py:        extra = '' if settings.DEBUG else '.min'\n./django/contrib/admin/helpers.py:from django.conf import settings\n./django/contrib/admin/helpers.py:            extra = '' if settings.DEBUG else '.min'\n./django/contrib/admin/views/main.py:from django.conf import settings\n./django/contrib/admin/views/main.py:# Changelist settings\n./django/contrib/admin/views/main.py:                if settings.USE_TZ:\n./django/contrib/admin/migrations/0001_initial.py:from django.conf import settings\n./django/contrib/admin/migrations/0001_initial.py:        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n./django/contrib/admin/migrations/0001_initial.py:                    to=settings.AUTH_USER_MODEL,\n./django/contrib/admin/models.py:from django.conf import settings\n./django/contrib/admin/models.py:        settings.AUTH_USER_MODEL,\n./django/contrib/admin/tests.py:from django.test import modify_settings\n./django/contrib/admin/tests.py:@modify_settings(MIDDLEWARE={'append': 'django.contrib.admin.tests.CSPMiddleware'})\n./django/contrib/admin/options.py:from django.conf import settings\n./django/contrib/admin/options.py:        extra = '' if settings.DEBUG else '.min'\n./django/contrib/admin/options.py:        extra = '' if settings.DEBUG else '.min'\n./django/contrib/redirects/middleware.py:from django.conf import settings\n./django/contrib/redirects/middleware.py:        if r is None and settings.APPEND_SLASH and not request.path.endswith('/'):\n./django/contrib/flatpages/views.py:from django.conf import settings\n./django/contrib/flatpages/views.py:        if not url.endswith('/') and settings.APPEND_SLASH:\n./django/contrib/flatpages/forms.py:from django.conf import settings\n./django/contrib/flatpages/forms.py:            settings.APPEND_SLASH and\n./django/contrib/flatpages/forms.py:            'django.middleware.common.CommonMiddleware' in settings.MIDDLEWARE\n./django/contrib/flatpages/templatetags/flatpages.py:from django.conf import settings\n./django/contrib/flatpages/templatetags/flatpages.py:            site_pk = settings.SITE_ID\n./django/contrib/flatpages/middleware.py:from django.conf import settings\n./django/contrib/flatpages/middleware.py:            if settings.DEBUG:\n./django/contrib/admindocs/views.py:from django.conf import settings\n./django/contrib/admindocs/views.py:            # Non-trivial TEMPLATES settings aren't supported (#24125).\n./django/contrib/admindocs/views.py:            # Non-trivial TEMPLATES settings aren't supported (#24125).\n./django/contrib/admindocs/views.py:        urlconf = import_module(settings.ROOT_URLCONF)\n./django/contrib/admindocs/views.py:            # Non-trivial TEMPLATES settings aren't supported (#24125).\n./django/contrib/admindocs/utils.py:        writer_name='html', settings_overrides=overrides,\n./django/contrib/admindocs/utils.py:                inliner.document.settings.link_base,\n./django/contrib/admindocs/utils.py:    context = inliner.document.settings.default_reference_context\n./django/contrib/admindocs/utils.py:            inliner.document.settings.link_base,\n./django/contrib/admindocs/middleware.py:from django.conf import settings\n./django/contrib/admindocs/middleware.py:                \"_CLASSES\" if settings.MIDDLEWARE is None else \"\"\n./django/contrib/admindocs/middleware.py:        if request.method == 'HEAD' and (request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS or\n./django/contrib/sites/managers.py:from django.conf import settings\n./django/contrib/sites/managers.py:        return super().get_queryset().filter(**{self._get_field_name() + '__id': settings.SITE_ID})\n./django/contrib/sites/management.py:from django.conf import settings\n./django/contrib/sites/management.py:        # The default settings set SITE_ID = 1, and some tests in Django's test\n./django/contrib/sites/management.py:        Site(pk=getattr(settings, 'SITE_ID', 1), domain=\"example.com\", name=\"example.com\").save(using=using)\n./django/contrib/sites/models.py:        Return the current Site based on the SITE_ID in the project's settings.\n./django/contrib/sites/models.py:        from django.conf import settings\n./django/contrib/sites/models.py:        if getattr(settings, 'SITE_ID', ''):\n./django/contrib/sites/models.py:            site_id = settings.SITE_ID\n./django/forms/renderers.py:from django.conf import settings\n./django/forms/renderers.py:    renderer_class = import_string(settings.FORM_RENDERER)\n./django/forms/renderers.py:    based on settings.TEMPLATES.\n./django/forms/utils.py:from django.conf import settings\n./django/forms/utils.py:    if settings.USE_TZ and value is not None and timezone.is_naive(value):\n./django/forms/utils.py:    if settings.USE_TZ and value is not None and timezone.is_aware(value):\n./django/forms/widgets.py:from django.conf import settings\n./django/forms/widgets.py:            elif settings.USE_L10N:\n./django/dispatch/dispatcher.py:        from django.conf import settings\n./django/dispatch/dispatcher.py:        if settings.configured and settings.DEBUG:\n./django/template/context.py:        # Set context processors according to the template engine's settings.\n./django/template/utils.py:from django.conf import settings\n./django/template/utils.py:        (structured like settings.TEMPLATES).\n./django/template/utils.py:            self._templates = settings.TEMPLATES\n./django/template/utils.py:                \"Set a unique NAME for each engine in settings.TEMPLATES.\"\n./django/template/utils.py:                    \"in settings.TEMPLATES\".format(alias))\n./django/template/defaulttags.py:from django.conf import settings\n./django/template/defaulttags.py:            if settings.DEBUG:\n./django/template/defaulttags.py:        tzinfo = timezone.get_current_timezone() if settings.USE_TZ else None\n./django/template/backends/dummy.py:from django.conf import settings\n./django/template/backends/dummy.py:                with open(template_file, encoding=settings.FILE_CHARSET) as fp:\n./django/template/backends/base.py:        `params` is a dict of configuration settings.\n./django/template/backends/jinja2.py:from django.conf import settings\n./django/template/backends/jinja2.py:        options.setdefault('auto_reload', settings.DEBUG)\n./django/template/backends/jinja2.py:                           jinja2.DebugUndefined if settings.DEBUG else jinja2.Undefined)\n./django/template/backends/django.py:from django.conf import settings\n./django/template/backends/django.py:        options.setdefault('debug', settings.DEBUG)\n./django/template/backends/django.py:        options.setdefault('file_charset', settings.FILE_CHARSET)\n./django/template/context_processors.py:from django.conf import settings\n./django/template/context_processors.py:    if settings.DEBUG and request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS:\n./django/template/context_processors.py:        'LANGUAGES': settings.LANGUAGES,\n./django/template/context_processors.py:    return {'STATIC_URL': settings.STATIC_URL}\n./django/template/context_processors.py:    return {'MEDIA_URL': settings.MEDIA_URL}\n./django/views/debug.py:from django.conf import settings\n./django/views/debug.py:    Object to wrap callable appearing in settings.\n./django/views/debug.py:def get_safe_settings():\n./django/views/debug.py:    Return a dictionary of the settings module with values of sensitive\n./django/views/debug.py:    settings replaced with stars (*********).\n./django/views/debug.py:    settings_dict = {}\n./django/views/debug.py:    for k in dir(settings):\n./django/views/debug.py:            settings_dict[k] = cleanse_setting(k, getattr(settings, k))\n./django/views/debug.py:    return settings_dict\n./django/views/debug.py:    return import_string(settings.DEFAULT_EXCEPTION_REPORTER_FILTER)()\n./django/views/debug.py:        return settings.DEBUG is False\n./django/views/debug.py:            'settings': get_safe_settings(),\n./django/views/debug.py:    urlconf = getattr(request, 'urlconf', settings.ROOT_URLCONF)\n./django/views/debug.py:        'root_urlconf': settings.ROOT_URLCONF,\n./django/views/debug.py:        'settings': get_safe_settings(),\n./django/views/csrf.py:from django.conf import settings\n./django/views/csrf.py:# other way of making it available independent of what is in the settings file.\n./django/views/csrf.py:  True</code> in your Django settings file. Change that to <code>False</code>,\n./django/views/csrf.py:        'DEBUG': settings.DEBUG,\n./django/views/generic/dates.py:from django.conf import settings\n./django/views/generic/dates.py:            if settings.USE_TZ:\n./django/views/generic/dates.py:            if settings.USE_TZ:\n./django/views/generic/dates.py:    if settings.USE_TZ:\n./django/views/i18n.py:from django.conf import settings\n./django/views/i18n.py:                settings.LANGUAGE_COOKIE_NAME, lang_code,\n./django/views/i18n.py:                max_age=settings.LANGUAGE_COOKIE_AGE,\n./django/views/i18n.py:                path=settings.LANGUAGE_COOKIE_PATH,\n./django/views/i18n.py:                domain=settings.LANGUAGE_COOKIE_DOMAIN,\n./django/views/i18n.py:                secure=settings.LANGUAGE_COOKIE_SECURE,\n./django/views/i18n.py:                httponly=settings.LANGUAGE_COOKIE_HTTPONLY,\n./django/views/i18n.py:                samesite=settings.LANGUAGE_COOKIE_SAMESITE,\n./django/templatetags/static.py:            from django.conf import settings\n./django/templatetags/static.py:            prefix = iri_to_uri(getattr(settings, name, ''))\n./django/templatetags/static.py:    ``settings.STATIC_URL``.\n./django/templatetags/static.py:    ``settings.MEDIA_URL``.\n./django/templatetags/tz.py:    regardless of the value of ``settings.USE_TZ``.\n./django/templatetags/l10n.py:    regardless of the value of ``settings.USE_L10N``.\n./django/templatetags/l10n.py:    regardless of the value of ``settings.USE_L10N``.\n./django/templatetags/l10n.py:    `settings.USE_L10N`.\n./django/templatetags/i18n.py:from django.conf import settings\n./django/templatetags/i18n.py:        context[self.variable] = [(k, translation.gettext(v)) for k, v in settings.LANGUAGES]\n./django/templatetags/i18n.py:    This puts settings.LANGUAGES into the named variable.\n./django/templatetags/i18n.py:    a list of strings or a settings.LANGUAGES style list (or any sequence of\n./django/http/multipartparser.py:from django.conf import settings\n./django/http/multipartparser.py:        self._encoding = encoding or settings.DEFAULT_CHARSET\n./django/http/multipartparser.py:                    if (settings.DATA_UPLOAD_MAX_NUMBER_FIELDS is not None and\n./django/http/multipartparser.py:                            settings.DATA_UPLOAD_MAX_NUMBER_FIELDS < num_post_keys):\n./django/http/multipartparser.py:                            'settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.'\n./django/http/multipartparser.py:                    if settings.DATA_UPLOAD_MAX_MEMORY_SIZE is not None:\n./django/http/multipartparser.py:                        read_size = settings.DATA_UPLOAD_MAX_MEMORY_SIZE - num_bytes_read\n./django/http/multipartparser.py:                    if (settings.DATA_UPLOAD_MAX_MEMORY_SIZE is not None and\n./django/http/multipartparser.py:                            num_bytes_read > settings.DATA_UPLOAD_MAX_MEMORY_SIZE):\n./django/http/multipartparser.py:                        raise RequestDataTooBig('Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.')\n./django/http/response.py:from django.conf import settings\n./django/http/response.py:        return settings.DEFAULT_CHARSET\n./django/http/request.py:from django.conf import settings\n./django/http/request.py:        if settings.USE_X_FORWARDED_HOST and (\n./django/http/request.py:        allowed_hosts = settings.ALLOWED_HOSTS\n./django/http/request.py:        if settings.DEBUG and not allowed_hosts:\n./django/http/request.py:        if settings.USE_X_FORWARDED_PORT and 'HTTP_X_FORWARDED_PORT' in self.META:\n./django/http/request.py:        if settings.SECURE_PROXY_SSL_HEADER:\n./django/http/request.py:                header, secure_value = settings.SECURE_PROXY_SSL_HEADER\n./django/http/request.py:                                 for handler in settings.FILE_UPLOAD_HANDLERS]\n./django/http/request.py:            # If there are no upload handlers defined, initialize them from settings.\n./django/http/request.py:            if (settings.DATA_UPLOAD_MAX_MEMORY_SIZE is not None and\n./django/http/request.py:                    int(self.META.get('CONTENT_LENGTH') or 0) > settings.DATA_UPLOAD_MAX_MEMORY_SIZE):\n./django/http/request.py:                raise RequestDataTooBig('Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.')\n./django/http/request.py:        self.encoding = encoding or settings.DEFAULT_CHARSET\n./django/http/request.py:            'fields_limit': settings.DATA_UPLOAD_MAX_NUMBER_FIELDS,\n./django/http/request.py:            self._encoding = settings.DEFAULT_CHARSET\n./django/urls/base.py:    settings). If urlconf_name is None, revert back to the default.\n./django/urls/resolvers.py:from django.conf import settings\n./django/urls/resolvers.py:        urlconf = settings.ROOT_URLCONF\n./django/urls/resolvers.py:        if not settings.APPEND_SLASH:\n./django/urls/resolvers.py:        language_code = get_language() or settings.LANGUAGE_CODE\n./django/urls/resolvers.py:        if language_code == settings.LANGUAGE_CODE and not self.prefix_default_language:\n./django/test/signals.py:# Settings that may not work well when using 'override_settings' (#19031)\n./django/test/signals.py:def localize_settings_changed(**kwargs):\n./django/test/signals.py:        # this stacklevel shows the line containing the override_settings call.\n./django/test/__init__.py:    ignore_warnings, modify_settings, override_settings,\n./django/test/__init__.py:    'modify_settings', 'override_settings', 'override_system_checks', 'tag',\n./django/test/client.py:from django.conf import settings\n./django/test/client.py:        # settings weren't available.\n./django/test/client.py:        return force_bytes(s, settings.DEFAULT_CHARSET)\n./django/test/client.py:        return force_bytes(s, settings.DEFAULT_CHARSET)\n./django/test/client.py:                charset = settings.DEFAULT_CHARSET\n./django/test/client.py:        data = force_bytes(data, settings.DEFAULT_CHARSET)\n./django/test/client.py:        engine = import_module(settings.SESSION_ENGINE)\n./django/test/client.py:        cookie = self.cookies.get(settings.SESSION_COOKIE_NAME)\n./django/test/client.py:        self.cookies[settings.SESSION_COOKIE_NAME] = session.session_key\n./django/test/client.py:            for backend_path in settings.AUTHENTICATION_BACKENDS:\n./django/test/client.py:        engine = import_module(settings.SESSION_ENGINE)\n./django/test/client.py:        session_cookie = settings.SESSION_COOKIE_NAME\n./django/test/client.py:            'domain': settings.SESSION_COOKIE_DOMAIN,\n./django/test/client.py:            'secure': settings.SESSION_COOKIE_SECURE or None,\n./django/test/client.py:        engine = import_module(settings.SESSION_ENGINE)\n./django/test/runner.py:        settings_dict = connection.creation.get_test_db_clone_settings(str(_worker_id))\n./django/test/runner.py:        # connection.settings_dict must be updated in place for changes to be\n./django/test/runner.py:        # connection.settings_dict = settings_dict, new threads would connect\n./django/test/runner.py:        connection.settings_dict.update(settings_dict)\n./django/test/runner.py:            help='Sets settings.DEBUG to True.',\n./django/test/utils.py:from django.conf import UserSettingsHolder, settings\n./django/test/utils.py:    'modify_settings', 'override_settings',\n./django/test/utils.py:        debug = settings.DEBUG\n./django/test/utils.py:    saved_data.allowed_hosts = settings.ALLOWED_HOSTS\n./django/test/utils.py:    settings.ALLOWED_HOSTS = [*settings.ALLOWED_HOSTS, 'testserver']\n./django/test/utils.py:    saved_data.debug = settings.DEBUG\n./django/test/utils.py:    settings.DEBUG = debug\n./django/test/utils.py:    saved_data.email_backend = settings.EMAIL_BACKEND\n./django/test/utils.py:    settings.EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend'\n./django/test/utils.py:    settings.ALLOWED_HOSTS = saved_data.allowed_hosts\n./django/test/utils.py:    settings.DEBUG = saved_data.debug\n./django/test/utils.py:    settings.EMAIL_BACKEND = saved_data.email_backend\n./django/test/utils.py:                    serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n./django/test/utils.py:                connections[alias].creation.set_as_test_mirror(connections[first_alias].settings_dict)\n./django/test/utils.py:            connections[mirror_alias].settings_dict)\n./django/test/utils.py:        test_settings = connection.settings_dict['TEST']\n./django/test/utils.py:        if test_settings['MIRROR']:\n./django/test/utils.py:            mirrored_aliases[alias] = test_settings['MIRROR']\n./django/test/utils.py:                (connection.settings_dict['NAME'], set())\n./django/test/utils.py:            if 'DEPENDENCIES' in test_settings:\n./django/test/utils.py:                dependencies[alias] = test_settings['DEPENDENCIES']\n./django/test/utils.py:                    dependencies[alias] = test_settings.get('DEPENDENCIES', [DEFAULT_DB_ALIAS])\n./django/test/utils.py:def get_runner(settings, test_runner_class=None):\n./django/test/utils.py:    test_runner_class = test_runner_class or settings.TEST_RUNNER\n./django/test/utils.py:class override_settings(TestContextDecorator):\n./django/test/utils.py:        # Keep this code at the beginning to leave the settings unchanged\n./django/test/utils.py:        override = UserSettingsHolder(settings._wrapped)\n./django/test/utils.py:        self.wrapped = settings._wrapped\n./django/test/utils.py:        settings._wrapped = override\n./django/test/utils.py:                    sender=settings._wrapped.__class__,\n./django/test/utils.py:        settings._wrapped = self.wrapped\n./django/test/utils.py:            new_value = getattr(settings, key, None)\n./django/test/utils.py:                sender=settings._wrapped.__class__,\n./django/test/utils.py:        if test_func._overridden_settings is None:\n./django/test/utils.py:            test_func._overridden_settings = self.options\n./django/test/utils.py:            test_func._overridden_settings = {\n./django/test/utils.py:                **test_func._overridden_settings,\n./django/test/utils.py:                \"with override_settings\")\n./django/test/utils.py:class modify_settings(override_settings):\n./django/test/utils.py:    Like override_settings, but makes it possible to append, prepend, or remove\n./django/test/utils.py:        super(override_settings, self).__init__()\n./django/test/utils.py:        if test_func._modified_settings is None:\n./django/test/utils.py:            test_func._modified_settings = self.operations\n./django/test/utils.py:            test_func._modified_settings = list(\n./django/test/utils.py:                test_func._modified_settings) + self.operations\n./django/test/utils.py:                value = list(getattr(settings, name, []))\n./django/test/utils.py:    return override_settings(TEMPLATES=[{\n./django/test/testcases.py:from django.conf import settings\n./django/test/testcases.py:    CaptureQueriesContext, ContextList, compare_xml, modify_settings,\n./django/test/testcases.py:    override_settings,\n./django/test/testcases.py:    _overridden_settings = None\n./django/test/testcases.py:    _modified_settings = None\n./django/test/testcases.py:        if cls._overridden_settings:\n./django/test/testcases.py:            cls._cls_overridden_context = override_settings(**cls._overridden_settings)\n./django/test/testcases.py:        if cls._modified_settings:\n./django/test/testcases.py:            cls._cls_modified_context = modify_settings(cls._modified_settings)\n./django/test/testcases.py:                message = '%s.%s.databases refers to %r which is not defined in settings.DATABASES.' % (\n./django/test/testcases.py:    def settings(self, **kwargs):\n./django/test/testcases.py:        return override_settings(**kwargs)\n./django/test/testcases.py:    def modify_settings(self, **kwargs):\n./django/test/testcases.py:        return modify_settings(**kwargs)\n./django/test/testcases.py:                if domain and not validate_host(domain, settings.ALLOWED_HOSTS):\n./django/test/testcases.py:                sender=settings._wrapped.__class__,\n./django/test/testcases.py:                    sender=settings._wrapped.__class__,\n./django/test/testcases.py:                    value=settings.INSTALLED_APPS,\n./django/test/testcases.py:                include_mirrors or not connections[alias].settings_dict['TEST']['MIRROR']\n./django/test/testcases.py:                setting_changed.send(sender=settings._wrapped.__class__,\n./django/test/testcases.py:                                     value=settings.INSTALLED_APPS,\n./django/test/testcases.py:    the *_ROOT settings, and serves those files, publishing them under *_URL.\n./django/test/testcases.py:        return settings.STATIC_ROOT\n./django/test/testcases.py:        return settings.STATIC_URL\n./django/test/testcases.py:        return settings.MEDIA_ROOT\n./django/test/testcases.py:        return settings.MEDIA_URL\n./django/test/testcases.py:        cls._live_server_modified_settings = modify_settings(\n./django/test/testcases.py:        cls._live_server_modified_settings.enable()\n./django/test/testcases.py:        cls._live_server_modified_settings.disable()\n./django/apps/registry.py:            from django.conf import settings\n./django/apps/registry.py:            # If \"not ready\" is due to unconfigured settings, accessing\n./django/apps/registry.py:            settings.INSTALLED_APPS\n./django/apps/registry.py:    def get_swappable_settings_name(self, to_string):\n./django/apps/registry.py:        corresponding settings name if it refers to a swappable model. If the\n./django/apps/registry.py:        critical when it comes to migrations. Since the swappable settings don't\n./django/apps/registry.py:        change after Django has loaded the settings, there is no reason to get\n./django/apps/registry.py:        the respective settings attribute over and over again.\n./tests/check_framework/test_model_checks.py:    isolate_apps, modify_settings, override_settings, override_system_checks,\n./tests/check_framework/test_model_checks.py:    @override_settings(DATABASE_ROUTERS=['check_framework.test_model_checks.EmptyRouter'])\n./tests/check_framework/test_model_checks.py:                    'You have configured settings.DATABASE_ROUTERS. Verify '\n./tests/check_framework/test_model_checks.py:    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n./tests/check_framework/test_model_checks.py:    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n./tests/check_framework/test_model_checks.py:    @override_settings(DATABASE_ROUTERS=['check_framework.test_model_checks.EmptyRouter'])\n./tests/check_framework/test_model_checks.py:                    'You have configured settings.DATABASE_ROUTERS. Verify '\n./tests/check_framework/test_model_checks.py:    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n./tests/check_framework/test_model_checks.py:    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n./tests/check_framework/test_model_checks.py:    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n./tests/check_framework/test_model_checks.py:    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n./tests/check_framework/test_security.py:from django.conf import settings\n./tests/check_framework/test_security.py:from django.test.utils import override_settings\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[])\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=['django.middleware.csrf.CsrfViewMiddleware'])\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[], CSRF_COOKIE_SECURE=False)\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[])\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=['django.middleware.security.SecurityMiddleware'])\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[], SECURE_HSTS_SECONDS=0)\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[], SECURE_HSTS_PRELOAD=False, SECURE_HSTS_SECONDS=3600)\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[])\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[\"django.middleware.clickjacking.XFrameOptionsMiddleware\"])\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[], X_FRAME_OPTIONS='SAMEORIGIN')\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[], SECURE_CONTENT_TYPE_NOSNIFF=False)\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[], SECURE_SSL_REDIRECT=False)\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(SECRET_KEY=('abcdefghijklmnopqrstuvwx' * 2) + 'ab')\n./tests/check_framework/test_security.py:        self.assertEqual(len(settings.SECRET_KEY), base.SECRET_KEY_MIN_LENGTH)\n./tests/check_framework/test_security.py:        self.assertGreater(len(set(settings.SECRET_KEY)), base.SECRET_KEY_MIN_UNIQUE_CHARACTERS)\n./tests/check_framework/test_security.py:    @override_settings(SECRET_KEY='')\n./tests/check_framework/test_security.py:    @override_settings(SECRET_KEY=None)\n./tests/check_framework/test_security.py:        del settings.SECRET_KEY\n./tests/check_framework/test_security.py:    @override_settings(SECRET_KEY=None)\n./tests/check_framework/test_security.py:    @override_settings(SECRET_KEY=('abcdefghijklmnopqrstuvwx' * 2) + 'a')\n./tests/check_framework/test_security.py:        self.assertEqual(len(settings.SECRET_KEY), base.SECRET_KEY_MIN_LENGTH - 1)\n./tests/check_framework/test_security.py:    @override_settings(SECRET_KEY='abcd' * 20)\n./tests/check_framework/test_security.py:        self.assertGreater(len(settings.SECRET_KEY), base.SECRET_KEY_MIN_LENGTH)\n./tests/check_framework/test_security.py:        self.assertLess(len(set(settings.SECRET_KEY)), base.SECRET_KEY_MIN_UNIQUE_CHARACTERS)\n./tests/check_framework/test_security.py:    @override_settings(DEBUG=True)\n./tests/check_framework/test_security.py:    @override_settings(DEBUG=False)\n./tests/check_framework/test_security.py:    @override_settings(ALLOWED_HOSTS=[])\n./tests/check_framework/test_security.py:    @override_settings(ALLOWED_HOSTS=['.example.com'])\n./tests/check_framework/test_caches.py:from django.test.utils import override_settings\n./tests/check_framework/test_caches.py:    @override_settings(CACHES=VALID_CACHES_CONFIGURATION)\n./tests/check_framework/test_caches.py:    @override_settings(CACHES=INVALID_CACHES_CONFIGURATION)\n./tests/check_framework/test_multi_db.py:from django.test.utils import isolate_apps, override_settings\n./tests/check_framework/test_multi_db.py:@override_settings(DATABASE_ROUTERS=[TestRouter()])\n./tests/check_framework/test_templates.py:from django.test.utils import override_settings\n./tests/check_framework/test_templates.py:    @override_settings(TEMPLATES=TEMPLATES_APP_DIRS_AND_LOADERS)\n./tests/check_framework/test_templates.py:        with self.settings(TEMPLATES=TEMPLATES):\n./tests/check_framework/test_templates.py:        with self.settings(TEMPLATES=TEMPLATES):\n./tests/check_framework/test_templates.py:    @override_settings(TEMPLATES=TEMPLATES_STRING_IF_INVALID)\n./tests/check_framework/test_templates.py:        with self.settings(TEMPLATES=TEMPLATES):\n./tests/check_framework/test_templates.py:        with self.settings(TEMPLATES=TEMPLATES):\n./tests/check_framework/test_templates.py:        with self.settings(TEMPLATES=TEMPLATES):\n./tests/check_framework/test_urls.py:from django.conf import settings\n./tests/check_framework/test_urls.py:    E006, check_url_config, check_url_namespaces_unique, check_url_settings,\n./tests/check_framework/test_urls.py:from django.test.utils import override_settings\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.no_warnings')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.no_warnings_i18n')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.warning_in_include')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.include_with_dollar')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.contains_tuple')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.include_contains_tuple')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.beginning_with_slash')\n./tests/check_framework/test_urls.py:    @override_settings(\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.name_with_colon')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF=None)\n./tests/check_framework/test_urls.py:    def test_no_root_urlconf_in_settings(self):\n./tests/check_framework/test_urls.py:        delattr(settings, 'ROOT_URLCONF')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.non_unique_namespaces')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.unique_namespaces')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.path_compatibility.contains_re_named_group')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.path_compatibility.beginning_with_caret')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.path_compatibility.ending_with_dollar')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.bad_error_handlers')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.bad_error_handlers_invalid_path')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.good_error_handlers')\n./tests/check_framework/test_urls.py:    @override_settings(STATIC_URL='a/', MEDIA_URL='b/')\n./tests/check_framework/test_urls.py:        self.assertEqual(check_url_settings(None), [])\n./tests/check_framework/test_urls.py:    @override_settings(STATIC_URL='', MEDIA_URL='')\n./tests/check_framework/test_urls.py:        self.assertEqual(check_url_settings(None), [])\n./tests/check_framework/test_urls.py:    @override_settings(STATIC_URL='noslash')\n./tests/check_framework/test_urls.py:        self.assertEqual(check_url_settings(None), [E006('STATIC_URL')])\n./tests/check_framework/test_urls.py:    @override_settings(STATIC_URL='slashes//')\n./tests/check_framework/test_urls.py:        self.assertEqual(check_url_settings(None), [])\n./tests/check_framework/test_urls.py:    @override_settings(MEDIA_URL='noslash')\n./tests/check_framework/test_urls.py:        self.assertEqual(check_url_settings(None), [E006('MEDIA_URL')])\n./tests/check_framework/tests.py:    isolate_apps, override_settings, override_system_checks,\n./tests/check_framework/tests.py:    @override_settings(SILENCED_SYSTEM_CHECKS=['myerrorcheck.E001'])\n./tests/check_framework/tests.py:    @override_settings(SILENCED_SYSTEM_CHECKS=['mywarningcheck.E001'])\n./tests/check_framework/test_translation.py:    check_language_settings_consistent, check_setting_language_code,\n./tests/check_framework/test_translation.py:            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n./tests/check_framework/test_translation.py:            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n./tests/check_framework/test_translation.py:            with self.subTest(tag), self.settings(LANGUAGES=[(tag, tag)]):\n./tests/check_framework/test_translation.py:            with self.subTest(tag), self.settings(LANGUAGES=[(tag, tag)]):\n./tests/check_framework/test_translation.py:            with self.subTest(tag), self.settings(LANGUAGES_BIDI=[tag]):\n./tests/check_framework/test_translation.py:            with self.subTest(tag), self.settings(LANGUAGES_BIDI=[tag]):\n./tests/check_framework/test_translation.py:    def test_inconsistent_language_settings(self):\n./tests/check_framework/test_translation.py:        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n./tests/check_framework/test_translation.py:            self.assertEqual(check_language_settings_consistent(None), [\n./tests/postgres_tests/__init__.py:from django.test import SimpleTestCase, TestCase, modify_settings\n./tests/postgres_tests/__init__.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_search.py:from django.test import SimpleTestCase, modify_settings, skipUnlessDBFeature\n./tests/postgres_tests/test_search.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_search.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_search.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_search.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_integration.py:            [sys.executable, '-m', 'django', 'check', '--settings', 'integration_settings'],\n./tests/postgres_tests/test_unaccent.py:from django.test import modify_settings\n./tests/postgres_tests/test_unaccent.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_citext.py:from django.test.utils import modify_settings\n./tests/postgres_tests/test_citext.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_array.py:from django.test import TransactionTestCase, modify_settings, override_settings\n./tests/postgres_tests/test_array.py:    @override_settings(MIGRATION_MODULES={\n./tests/postgres_tests/test_array.py:    @override_settings(MIGRATION_MODULES={\n./tests/postgres_tests/test_array.py:    @modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_apps.py:from django.test.utils import modify_settings\n./tests/postgres_tests/test_apps.py:        with modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'}):\n./tests/postgres_tests/test_apps.py:        with self.modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'}):\n./tests/postgres_tests/test_ranges.py:from django.test import ignore_warnings, override_settings\n./tests/postgres_tests/test_ranges.py:    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Johannesburg')\n./tests/postgres_tests/test_introspection.py:from django.test.utils import modify_settings\n./tests/postgres_tests/test_introspection.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_trigram.py:from django.test import modify_settings\n./tests/postgres_tests/test_trigram.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/invalid_models_tests/test_ordinary_fields.py:from django.test.utils import isolate_apps, override_settings\n./tests/invalid_models_tests/test_ordinary_fields.py:    @override_settings(USE_TZ=True)\n./tests/invalid_models_tests/test_ordinary_fields.py:    @override_settings(USE_TZ=True)\n./tests/invalid_models_tests/test_ordinary_fields.py:    @override_settings(USE_TZ=True)\n./tests/invalid_models_tests/test_models.py:from django.conf import settings\n./tests/invalid_models_tests/test_models.py:from django.test.utils import isolate_apps, override_settings, register_lookup\n./tests/invalid_models_tests/test_models.py:    for db in settings.DATABASES:\n./tests/invalid_models_tests/test_models.py:    @override_settings(TEST_SWAPPED_MODEL_BAD_VALUE='not-a-model')\n./tests/invalid_models_tests/test_models.py:    @override_settings(TEST_SWAPPED_MODEL_BAD_MODEL='not_an_app.Target')\n./tests/invalid_models_tests/test_relative_fields.py:from django.test.utils import isolate_apps, override_settings\n./tests/invalid_models_tests/test_relative_fields.py:    @override_settings(TEST_SWAPPED_MODEL='invalid_models_tests.Replacement')\n./tests/invalid_models_tests/test_relative_fields.py:            hint=\"Update the relation to point at 'settings.TEST_SWAPPED_MODEL'.\",\n./tests/sitemaps_tests/test_http.py:from django.conf import settings\n./tests/sitemaps_tests/test_http.py:from django.test import modify_settings, override_settings\n./tests/sitemaps_tests/test_http.py:    @override_settings(TEMPLATES=[{\n./tests/sitemaps_tests/test_http.py:    @override_settings(TEMPLATES=[{\n./tests/sitemaps_tests/test_http.py:    @skipUnless(settings.USE_I18N, \"Internationalization is not enabled\")\n./tests/sitemaps_tests/test_http.py:    @override_settings(USE_L10N=True)\n./tests/sitemaps_tests/test_http.py:    @modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'})\n./tests/sitemaps_tests/test_http.py:    @modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'})\n./tests/sitemaps_tests/test_http.py:    @override_settings(LANGUAGES=(('en', 'English'), ('pt', 'Portuguese')))\n./tests/sitemaps_tests/test_utils.py:from django.test import modify_settings, override_settings\n./tests/sitemaps_tests/test_utils.py:    @override_settings(ROOT_URLCONF='sitemaps_tests.urls.index_only')\n./tests/sitemaps_tests/test_utils.py:    @override_settings(ROOT_URLCONF='sitemaps_tests.urls.empty')\n./tests/sitemaps_tests/test_utils.py:    @modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'})\n./tests/sitemaps_tests/base.py:from django.test import TestCase, modify_settings, override_settings\n./tests/sitemaps_tests/base.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.sitemaps'})\n./tests/sitemaps_tests/base.py:@override_settings(ROOT_URLCONF='sitemaps_tests.urls.http')\n./tests/sitemaps_tests/test_generic.py:from django.test import override_settings\n./tests/sitemaps_tests/test_generic.py:@override_settings(ABSOLUTE_URL_OVERRIDES={})\n./tests/sitemaps_tests/test_https.py:from django.test import override_settings\n./tests/sitemaps_tests/test_https.py:@override_settings(ROOT_URLCONF='sitemaps_tests.urls.https')\n./tests/sitemaps_tests/test_https.py:@override_settings(SECURE_PROXY_SSL_HEADER=False)\n./tests/app_loading/tests.py:            with self.settings(INSTALLED_APPS=['app_with_models']):\n./tests/app_loading/tests.py:            with self.settings(INSTALLED_APPS=['app_no_models']):\n./tests/app_loading/tests.py:            with self.settings(INSTALLED_APPS=['omelet.app_with_models']):\n./tests/app_loading/tests.py:            with self.settings(INSTALLED_APPS=['omelet.app_no_models']):\n./tests/app_loading/tests.py:                with self.settings(INSTALLED_APPS=['broken_app']):\n./tests/admin_widgets/test_autocomplete_widget.py:from django.test import TestCase, override_settings\n./tests/admin_widgets/test_autocomplete_widget.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:from django.conf import settings\n./tests/admin_widgets/tests.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/admin_widgets/tests.py:        # Override any settings on the model admin\n./tests/admin_widgets/tests.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:        with self.settings(USE_L10N=True), translation.override('de-at'):\n./tests/admin_widgets/tests.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:        for language_code, language_name in settings.LANGUAGES:\n./tests/admin_widgets/tests.py:            with override_settings(LANGUAGE_CODE=language_code, USE_L10N=True):\n./tests/admin_widgets/tests.py:@override_settings(TIME_ZONE='Asia/Singapore')\n./tests/admin_widgets/tests.py:        in the default time zone \"America/Chicago\" despite `override_settings` changing\n./tests/admin_widgets/tests.py:        # settings has the same UTC offset as \"Asia/Singapore\" because the\n./tests/admin_widgets/tests.py:@override_settings(TIME_ZONE='US/Eastern')\n./tests/view_tests/tests/test_defaults.py:from django.test.utils import override_settings\n./tests/view_tests/tests/test_defaults.py:@override_settings(ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_defaults.py:    @override_settings(TEMPLATES=[{\n./tests/view_tests/tests/test_defaults.py:    @override_settings(TEMPLATES=[{\n./tests/view_tests/tests/test_specials.py:from django.test import SimpleTestCase, override_settings\n./tests/view_tests/tests/test_specials.py:@override_settings(ROOT_URLCONF='view_tests.generic_urls')\n./tests/view_tests/tests/test_i18n.py:from django.conf import settings\n./tests/view_tests/tests/test_i18n.py:    RequestFactory, SimpleTestCase, TestCase, ignore_warnings, modify_settings,\n./tests/view_tests/tests/test_i18n.py:    override_settings,\n./tests/view_tests/tests/test_i18n.py:@override_settings(ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_i18n.py:        return [code for code, name in settings.LANGUAGES if not code == current_language][0]\n./tests/view_tests/tests/test_i18n.py:        language_cookie = self.client.cookies[settings.LANGUAGE_COOKIE_NAME]\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:            'request.COOKIES[settings.LANGUAGE_COOKIE_NAME] instead.'\n./tests/view_tests/tests/test_i18n.py:        test_settings = {\n./tests/view_tests/tests/test_i18n.py:        with self.settings(**test_settings):\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:    @modify_settings(MIDDLEWARE={\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, 'nl')\n./tests/view_tests/tests/test_i18n.py:@override_settings(ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_i18n.py:    @override_settings(LANGUAGE_CODE='de')\n./tests/view_tests/tests/test_i18n.py:        \"\"\"The javascript_catalog can be deployed with language settings\"\"\"\n./tests/view_tests/tests/test_i18n.py:    @override_settings(USE_I18N=False)\n./tests/view_tests/tests/test_i18n.py:        The json_catalog returns the language catalog and settings as JSON.\n./tests/view_tests/tests/test_i18n.py:        languages and you've set settings.LANGUAGE_CODE to some other language\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='es'), override('en-us'):\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='es'), override('en-us'):\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='fr'), override('fi'):\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='pt'), override('ru'):\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='ru'), override('pt'):\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='fr'), override('en-us'):\n./tests/view_tests/tests/test_i18n.py:    @modify_settings(INSTALLED_APPS={'append': 'view_tests.app0'})\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='fr'), override('en-us'):\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='fr'), override('none'):\n./tests/view_tests/tests/test_i18n.py:    @modify_settings(INSTALLED_APPS={'append': ['view_tests.app5']})\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='en-us'), override('fr'):\n./tests/view_tests/tests/test_i18n.py:    @modify_settings(INSTALLED_APPS={'append': ['view_tests.app1', 'view_tests.app2']})\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='en-us'), override('fr'):\n./tests/view_tests/tests/test_i18n.py:    @modify_settings(INSTALLED_APPS={'append': ['view_tests.app3', 'view_tests.app4']})\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='fr'), override('es-ar'):\n./tests/view_tests/tests/test_i18n.py:        extended_locale_paths = settings.LOCALE_PATHS + [\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='es-ar', LOCALE_PATHS=extended_locale_paths):\n./tests/view_tests/tests/test_i18n.py:@override_settings(ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_i18n.py:    @override_settings(LANGUAGE_CODE='de')\n./tests/view_tests/tests/test_i18n.py:    @modify_settings(INSTALLED_APPS={'append': ['view_tests.app1', 'view_tests.app2']})\n./tests/view_tests/tests/test_i18n.py:    @override_settings(LANGUAGE_CODE='fr')\n./tests/view_tests/tests/test_debug.py:from django.test import RequestFactory, SimpleTestCase, override_settings\n./tests/view_tests/tests/test_debug.py:@override_settings(DEBUG=True, ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_debug.py:    @override_settings(TEMPLATES=[{\n./tests/view_tests/tests/test_debug.py:    @override_settings(TEMPLATES=[{\n./tests/view_tests/tests/test_debug.py:    @override_settings(ROOT_URLCONF=WithoutEmptyPathUrls)\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True, USE_L10N=True):\n./tests/view_tests/tests/test_debug.py:            with override_settings(TEMPLATES=[{\n./tests/view_tests/tests/test_debug.py:    @override_settings(ROOT_URLCONF='view_tests.default_urls')\n./tests/view_tests/tests/test_debug.py:    @override_settings(ROOT_URLCONF='view_tests.regression_21530_urls')\n./tests/view_tests/tests/test_debug.py:@override_settings(\n./tests/view_tests/tests/test_debug.py:    @override_settings(ALLOWED_HOSTS='example.com')\n./tests/view_tests/tests/test_debug.py:    @override_settings(DEBUG=True)\n./tests/view_tests/tests/test_debug.py:    @override_settings(ALLOWED_HOSTS='example.com')\n./tests/view_tests/tests/test_debug.py:        with self.settings(ADMINS=[('Admin', 'admin@fattie-breakie.com')]):\n./tests/view_tests/tests/test_debug.py:        with self.settings(ADMINS=[('Admin', 'admin@fattie-breakie.com')]):\n./tests/view_tests/tests/test_debug.py:        with self.settings(ADMINS=[('Admin', 'admin@fattie-breakie.com')]):\n./tests/view_tests/tests/test_debug.py:@override_settings(ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:    def test_callable_settings(self):\n./tests/view_tests/tests/test_debug.py:        Callable settings should not be evaluated in the debug page (#21345).\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True, FOOBAR=callable_setting):\n./tests/view_tests/tests/test_debug.py:    def test_callable_settings_forbidding_to_set_attributes(self):\n./tests/view_tests/tests/test_debug.py:        Callable settings which forbid to set attributes should not break\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True, WITH_SLOTS=CallableSettingWithSlots()):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True, FOOBAR={42: None}):\n./tests/view_tests/tests/test_debug.py:    def test_sensitive_settings(self):\n./tests/view_tests/tests/test_debug.py:        The debug page should not show some sensitive settings\n./tests/view_tests/tests/test_debug.py:        sensitive_settings = [\n./tests/view_tests/tests/test_debug.py:        for setting in sensitive_settings:\n./tests/view_tests/tests/test_debug.py:            with self.settings(DEBUG=True, **{setting: \"should not be displayed\"}):\n./tests/view_tests/tests/test_debug.py:    def test_settings_with_sensitive_keys(self):\n./tests/view_tests/tests/test_debug.py:        dict settings.\n./tests/view_tests/tests/test_debug.py:        sensitive_settings = [\n./tests/view_tests/tests/test_debug.py:        for setting in sensitive_settings:\n./tests/view_tests/tests/test_debug.py:            with self.settings(DEBUG=True, FOOBAR=FOOBAR):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:    @override_settings(DEBUG=True, ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_static.py:from django.test import SimpleTestCase, override_settings\n./tests/view_tests/tests/test_static.py:@override_settings(DEBUG=True, ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_static.py:    @override_settings(TEMPLATES=[{\n./tests/view_tests/tests/test_static.py:    @override_settings(DEBUG=False)\n./tests/view_tests/tests/test_csrf.py:    Client, RequestFactory, SimpleTestCase, override_settings,\n./tests/view_tests/tests/test_csrf.py:@override_settings(ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_csrf.py:    @override_settings(\n./tests/view_tests/tests/test_csrf.py:        with self.settings(LANGUAGE_CODE='nl'), override('en-us'):\n./tests/view_tests/tests/test_csrf.py:    @override_settings(\n./tests/view_tests/tests/test_csrf.py:    @override_settings(TEMPLATES=[])\n./tests/view_tests/tests/test_csrf.py:    @override_settings(TEMPLATES=[{\n./tests/view_tests/tests/test_json.py:from django.test import SimpleTestCase, override_settings\n./tests/view_tests/tests/test_json.py:@override_settings(ROOT_URLCONF='view_tests.generic_urls')\n./tests/context_processors/tests.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/context_processors/tests.py:@override_settings(\n./tests/context_processors/tests.py:@override_settings(\n./tests/context_processors/tests.py:        with override_settings(DEBUG=False):\n./tests/fixtures_regress/tests.py:    TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n./tests/fixtures_regress/tests.py:    @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, 'fixtures_1')])\n./tests/fixtures_regress/tests.py:    @override_settings(SERIALIZATION_MODULES={'unkn': 'unexistent.path'})\n./tests/fixtures_regress/tests.py:    @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, 'fixtures_1'),\n./tests/fixtures_regress/tests.py:    @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, 'fixtures_1'),\n./tests/fixtures_regress/tests.py:        settings.FIXTURE_DIRS cannot contain duplicates in order to avoid\n./tests/fixtures_regress/tests.py:        with self.assertRaisesMessage(ImproperlyConfigured, \"settings.FIXTURE_DIRS contains duplicates.\"):\n./tests/fixtures_regress/tests.py:    @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, 'fixtures')])\n./tests/fixtures_regress/tests.py:        settings.FIXTURE_DIRS cannot contain a default fixtures directory\n./tests/fixtures_regress/tests.py:            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n./tests/fixtures_regress/tests.py:    @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, 'fixtures_1'),\n./tests/syndication_tests/feeds.py:        # settings.TIME_ZONE.\n./tests/syndication_tests/tests.py:from django.test import TestCase, override_settings\n./tests/syndication_tests/tests.py:@override_settings(ROOT_URLCONF='syndication_tests.urls')\n./tests/db_utils/tests.py:        Empty DATABASES and empty 'default' settings default to the dummy\n./tests/db_utils/tests.py:        self.assertEqual(conns[DEFAULT_DB_ALIAS].settings_dict['ENGINE'], 'django.db.backends.dummy')\n./tests/db_utils/tests.py:            'settings.DATABASES is improperly configured. Please supply the '\n./tests/db_utils/tests.py:            'ENGINE value. Check settings documentation for more details.'\n./tests/csrf_tests/tests.py:from django.conf import settings\n./tests/csrf_tests/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/csrf_tests/tests.py:        csrf_cookie = resp2.cookies.get(settings.CSRF_COOKIE_NAME, False)\n./tests/csrf_tests/tests.py:    @override_settings(CSRF_HEADER_NAME='HTTP_X_CSRFTOKEN_CUSTOMIZED')\n./tests/csrf_tests/tests.py:        settings.CSRF_HEADER_NAME can be used to customize the CSRF header name\n./tests/csrf_tests/tests.py:        req.COOKIES[settings.CSRF_COOKIE_NAME] = \"\"\n./tests/csrf_tests/tests.py:        csrf_cookie = resp2.cookies[settings.CSRF_COOKIE_NAME]\n./tests/csrf_tests/tests.py:        csrf_cookie = resp.cookies.get(settings.CSRF_COOKIE_NAME, None)\n./tests/csrf_tests/tests.py:    @override_settings(DEBUG=True, ALLOWED_HOSTS=['www.example.com'])\n./tests/csrf_tests/tests.py:    @override_settings(DEBUG=True)\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'])\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'])\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'], CSRF_TRUSTED_ORIGINS=['dashboard.example.com'])\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'], CSRF_TRUSTED_ORIGINS=['.example.com'])\n./tests/csrf_tests/tests.py:                self.COOKIES[settings.CSRF_COOKIE_NAME] = token\n./tests/csrf_tests/tests.py:        req.COOKIES[settings.CSRF_COOKIE_NAME] = self._csrf_id_cookie\n./tests/csrf_tests/tests.py:        req.COOKIES[settings.CSRF_COOKIE_NAME] = self._csrf_id_cookie[:32]\n./tests/csrf_tests/tests.py:        self.assertTrue(resp.cookies.get(settings.CSRF_COOKIE_NAME, False))\n./tests/csrf_tests/tests.py:        self.assertTrue(resp2.cookies.get(settings.CSRF_COOKIE_NAME, False))\n./tests/csrf_tests/tests.py:        CSRF cookie age can be set using settings.CSRF_COOKIE_AGE.\n./tests/csrf_tests/tests.py:        with self.settings(CSRF_COOKIE_NAME='csrfcookie',\n./tests/csrf_tests/tests.py:        with self.settings(CSRF_COOKIE_NAME='csrfcookie',\n./tests/csrf_tests/tests.py:        with self.settings(CSRF_COOKIE_NAME='csrfcookie', CSRF_COOKIE_SAMESITE='Strict'):\n./tests/csrf_tests/tests.py:        req.COOKIES[settings.CSRF_COOKIE_NAME] = 'x' * 100000\n./tests/csrf_tests/tests.py:        csrf_cookie = resp2.cookies.get(settings.CSRF_COOKIE_NAME, False)\n./tests/csrf_tests/tests.py:        req.COOKIES[settings.CSRF_COOKIE_NAME] = token\n./tests/csrf_tests/tests.py:        csrf_cookie = resp2.cookies.get(settings.CSRF_COOKIE_NAME, False)\n./tests/csrf_tests/tests.py:        self.assertIn(settings.CSRF_COOKIE_NAME, resp.cookies, \"Cookie was not reset from bare secret\")\n./tests/csrf_tests/tests.py:        csrf_cookie = resp.cookies[settings.CSRF_COOKIE_NAME]\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'], CSRF_COOKIE_DOMAIN='.example.com', USE_X_FORWARDED_PORT=True)\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'], CSRF_COOKIE_DOMAIN='.example.com')\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'], CSRF_COOKIE_DOMAIN='.example.com')\n./tests/csrf_tests/tests.py:    @override_settings(CSRF_COOKIE_DOMAIN='.example.com', DEBUG=True)\n./tests/csrf_tests/tests.py:@override_settings(CSRF_USE_SESSIONS=True, CSRF_COOKIE_DOMAIN=None)\n./tests/csrf_tests/tests.py:    @override_settings(\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'], SESSION_COOKIE_DOMAIN='.example.com')\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'], SESSION_COOKIE_DOMAIN='.example.com')\n./tests/csrf_tests/tests.py:    @override_settings(SESSION_COOKIE_DOMAIN='.example.com', DEBUG=True)\n./tests/csrf_tests/tests.py:@override_settings(ROOT_URLCONF='csrf_tests.csrf_token_error_handler_urls', DEBUG=False)\n./tests/test_runner/test_discover_runner.py:        with self.modify_settings(INSTALLED_APPS={'append': sub_app}):\n./tests/test_runner/tests.py:from django.conf import settings\n./tests/test_runner/tests.py:    through a settings file.\n./tests/test_runner/tests.py:        settings = {\n./tests/test_runner/tests.py:        self.write_settings('settings.py', sdict=settings)\n./tests/test_runner/tests.py:        args = ['test', '--settings=test_project.settings']\n./tests/test_runner/tests.py:        args = ['test', '--settings=test_project.settings', '--option_b=foo']\n./tests/test_runner/tests.py:        args = ['test', '--settings=test_project.settings', '--option_b', 'foo']\n./tests/test_runner/tests.py:        args = ['test', '--settings=test_project.settings', '--option_a=bar',\n./tests/test_runner/tests.py:        self.write_settings('settings.py')\n./tests/test_runner/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/test_runner/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/test_runner/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/test_runner/tests.py:        self.write_settings('settings.py')\n./tests/test_runner/tests.py:                'ENGINE': settings.DATABASES[db.DEFAULT_DB_ALIAS][\"ENGINE\"],\n./tests/test_runner/tests.py:        old_name = settings.DATABASES[db.DEFAULT_DB_ALIAS][\"NAME\"]\n./tests/test_runner/tests.py:            self.assertEqual(tested_connections['default'].settings_dict[\"NAME\"], old_name)\n./tests/test_runner/tests.py:        An empty default database in settings does not raise an ImproperlyConfigured\n./tests/test_runner/tests.py:        self.assertEqual(connection.settings_dict['ENGINE'], 'django.db.backends.dummy')\n./tests/sites_framework/tests.py:from django.conf import settings\n./tests/sites_framework/tests.py:        Site.objects.get_or_create(id=settings.SITE_ID, domain=\"example.com\", name=\"example.com\")\n./tests/sites_framework/tests.py:        Site.objects.create(id=settings.SITE_ID + 1, domain=\"example2.com\", name=\"example2.com\")\n./tests/sites_framework/tests.py:        article = ExclusiveArticle.objects.create(title=\"Breaking News!\", site_id=settings.SITE_ID)\n./tests/sites_framework/tests.py:        article.sites.add(Site.objects.get(id=settings.SITE_ID))\n./tests/sites_framework/tests.py:        article.sites.add(Site.objects.get(id=settings.SITE_ID + 1))\n./tests/sites_framework/tests.py:        article2.sites.add(Site.objects.get(id=settings.SITE_ID + 1))\n./tests/sites_framework/tests.py:            places_this_article_should_appear_id=settings.SITE_ID,\n./tests/signed_cookies_tests/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/signed_cookies_tests/tests.py:    @override_settings(SECRET_KEY=b'\\xe7')\n./tests/admin_utils/test_logentry.py:from django.test import TestCase, override_settings\n./tests/admin_utils/test_logentry.py:@override_settings(ROOT_URLCONF='admin_utils.urls')\n./tests/admin_utils/test_logentry.py:    @override_settings(USE_L10N=True)\n./tests/admin_utils/tests.py:from django.conf import settings\n./tests/admin_utils/tests.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/admin_utils/tests.py:        expected = '<img src=\"%sadmin/img/icon-unknown.svg\" alt=\"None\">' % settings.STATIC_URL\n./tests/admin_utils/tests.py:        expected = '<img src=\"%sadmin/img/icon-unknown.svg\" alt=\"None\" />' % settings.STATIC_URL\n./tests/admin_utils/tests.py:    @override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True)\n./tests/admin_utils/tests.py:    @override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True)\n./tests/swappable_models/tests.py:from django.test import TestCase, override_settings\n./tests/swappable_models/tests.py:    @override_settings(TEST_ARTICLE_MODEL='swappable_models.AlternateArticle')\n./tests/swappable_models/tests.py:    @override_settings(TEST_ARTICLE_MODEL='swappable_models.article')\n./tests/timezones/tests.py:    SimpleTestCase, TestCase, TransactionTestCase, override_settings,\n./tests/timezones/tests.py:# settings.TIME_ZONE is forced to EAT. Most tests use a variant of\n./tests/timezones/tests.py:        orig_timezone = connection.settings_dict['TIME_ZONE']\n./tests/timezones/tests.py:        connection.settings_dict['TIME_ZONE'] = timezone\n./tests/timezones/tests.py:        connection.settings_dict['TIME_ZONE'] = orig_timezone\n./tests/timezones/tests.py:@override_settings(TIME_ZONE='Africa/Nairobi', USE_TZ=False)\n./tests/timezones/tests.py:@override_settings(TIME_ZONE='Africa/Nairobi', USE_TZ=True)\n./tests/timezones/tests.py:@override_settings(TIME_ZONE='Africa/Nairobi', USE_TZ=True)\n./tests/timezones/tests.py:@override_settings(TIME_ZONE='Africa/Nairobi', USE_TZ=True)\n./tests/timezones/tests.py:@override_settings(TIME_ZONE='Africa/Nairobi')\n./tests/timezones/tests.py:@override_settings(DATETIME_FORMAT='c', TIME_ZONE='Africa/Nairobi', USE_L10N=False, USE_TZ=True)\n./tests/timezones/tests.py:        with self.settings(USE_TZ=False):\n./tests/timezones/tests.py:        with self.settings(TIME_ZONE='Europe/Paris'):\n./tests/timezones/tests.py:        with self.settings(USE_TZ=True):\n./tests/timezones/tests.py:@override_settings(DATETIME_FORMAT='c', TIME_ZONE='Africa/Nairobi', USE_L10N=False, USE_TZ=False)\n./tests/timezones/tests.py:@override_settings(DATETIME_FORMAT='c', TIME_ZONE='Africa/Nairobi', USE_L10N=False, USE_TZ=True)\n./tests/timezones/tests.py:@override_settings(\n./tests/auth_tests/test_decorators.py:from django.conf import settings\n./tests/auth_tests/test_decorators.py:from django.test import TestCase, override_settings\n./tests/auth_tests/test_decorators.py:@override_settings(ROOT_URLCONF='auth_tests.urls')\n./tests/auth_tests/test_decorators.py:            login_url = settings.LOGIN_URL\n./tests/auth_tests/test_signals.py:from django.test import TestCase, override_settings\n./tests/auth_tests/test_signals.py:@override_settings(ROOT_URLCONF='auth_tests.urls')\n./tests/auth_tests/test_signals.py:            with self.settings(AUTH_USER_MODEL='auth_tests.MinimalUser'):\n./tests/auth_tests/test_signals.py:            with self.settings(AUTH_USER_MODEL='auth_tests.UserWithDisabledLastLoginField'):\n./tests/auth_tests/test_signals.py:            with self.settings(AUTH_USER_MODEL='auth.User'):\n./tests/auth_tests/test_handlers.py:from django.test import TransactionTestCase, override_settings\n./tests/auth_tests/test_handlers.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUser')\n./tests/auth_tests/test_admin_multidb.py:from django.test import TestCase, override_settings\n./tests/auth_tests/test_admin_multidb.py:@override_settings(ROOT_URLCONF=__name__, DATABASE_ROUTERS=['%s.Router' % __name__])\n./tests/auth_tests/test_forms.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/auth_tests/test_forms.py:from .settings import AUTH_TEMPLATES\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_PASSWORD_VALIDATORS=[\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_PASSWORD_VALIDATORS=[\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_PASSWORD_VALIDATORS=[\n./tests/auth_tests/test_forms.py:@override_settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.AllowAllUsersModelBackend'])\n./tests/auth_tests/test_forms.py:    @override_settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.ModelBackend'])\n./tests/auth_tests/test_forms.py:        with self.settings(USE_I18N=True), translation.override('pt-br', deactivate=True):\n./tests/auth_tests/test_forms.py:    @override_settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.AllowAllUsersModelBackend'])\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomEmailField')\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_PASSWORD_VALIDATORS=[\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_PASSWORD_VALIDATORS=[\n./tests/auth_tests/test_forms.py:@override_settings(TEMPLATES=AUTH_TEMPLATES)\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomEmailField')\n./tests/auth_tests/test_forms.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.PBKDF2PasswordHasher'])\n./tests/auth_tests/test_tokens.py:from django.conf import settings\n./tests/auth_tests/test_tokens.py:        p1 = Mocked(date.today() + timedelta(settings.PASSWORD_RESET_TIMEOUT_DAYS))\n./tests/auth_tests/test_tokens.py:        p2 = Mocked(date.today() + timedelta(settings.PASSWORD_RESET_TIMEOUT_DAYS + 1))\n./tests/auth_tests/test_tokens.py:        self.assertEqual(p1.secret, settings.SECRET_KEY)\n./tests/auth_tests/test_views.py:from django.conf import settings\n./tests/auth_tests/test_views.py:from django.test import Client, TestCase, override_settings\n./tests/auth_tests/test_views.py:from .settings import AUTH_TEMPLATES\n./tests/auth_tests/test_views.py:@override_settings(\n./tests/auth_tests/test_views.py:@override_settings(ROOT_URLCONF='django.contrib.auth.urls')\n./tests/auth_tests/test_views.py:        self.assertEqual(settings.DEFAULT_FROM_EMAIL, mail.outbox[0].from_email)\n./tests/auth_tests/test_views.py:    @override_settings(DEBUG_PROPAGATE_EXCEPTIONS=True)\n./tests/auth_tests/test_views.py:    @override_settings(DEBUG_PROPAGATE_EXCEPTIONS=True)\n./tests/auth_tests/test_views.py:    @override_settings(\n./tests/auth_tests/test_views.py:@override_settings(AUTH_USER_MODEL='auth_tests.CustomUser')\n./tests/auth_tests/test_views.py:@override_settings(AUTH_USER_MODEL='auth_tests.UUIDUser')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL='/login/')\n./tests/auth_tests/test_views.py:        self.assertEqual(response.url, settings.LOGIN_REDIRECT_URL)\n./tests/auth_tests/test_views.py:        self.assertRedirects(response, settings.LOGIN_REDIRECT_URL, fetch_redirect_response=False)\n./tests/auth_tests/test_views.py:        csrf_cookie = resp2.cookies.get(settings.CSRF_COOKIE_NAME, None)\n./tests/auth_tests/test_views.py:        req.COOKIES[settings.CSRF_COOKIE_NAME] = token1\n./tests/auth_tests/test_views.py:        csrf_cookie = resp2.cookies.get(settings.CSRF_COOKIE_NAME, None)\n./tests/auth_tests/test_views.py:        engine = import_module(settings.SESSION_ENGINE)\n./tests/auth_tests/test_views.py:        self.client.cookies[settings.SESSION_COOKIE_NAME] = original_session_key\n./tests/auth_tests/test_views.py:    \"\"\"Tests for settings.LOGIN_URL.\"\"\"\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL='/login/')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL='login')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL='http://remote.example.com/login')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL='https:///login/')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL='/login/?pretty=1')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL='http://remote.example.com/login/?next=/default/')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL=reverse_lazy('login'))\n./tests/auth_tests/test_views.py:    \"\"\"Tests for settings.LOGIN_REDIRECT_URL.\"\"\"\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_REDIRECT_URL='/custom/')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_REDIRECT_URL='password_reset')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_REDIRECT_URL='http://remote.example.com/welcome/')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL=reverse_lazy('login'))\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL=reverse_lazy('login'))\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL='/login/')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_REDIRECT_URL='/custom/')\n./tests/auth_tests/test_views.py:        with self.settings(LOGIN_REDIRECT_URL=self.do_redirect_url):\n./tests/auth_tests/test_views.py:        with self.settings(LOGIN_URL=self.do_redirect_url):\n./tests/auth_tests/test_views.py:        with self.settings(LOGIN_URL=self.do_redirect_url):\n./tests/auth_tests/test_views.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, 'pl')\n./tests/auth_tests/test_views.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, 'pl')\n./tests/auth_tests/test_views.py:    @override_settings(LOGOUT_REDIRECT_URL='/custom/')\n./tests/auth_tests/test_views.py:    @override_settings(LOGOUT_REDIRECT_URL='logout')\n./tests/auth_tests/test_views.py:@override_settings(ROOT_URLCONF='auth_tests.urls_admin')\n./tests/auth_tests/test_views.py:@override_settings(\n./tests/auth_tests/test_management.py:from django.test import TestCase, override_settings\n./tests/auth_tests/test_management.py:@override_settings(AUTH_PASSWORD_VALIDATORS=[\n./tests/auth_tests/test_management.py:@override_settings(\n./tests/auth_tests/test_management.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUser')\n./tests/auth_tests/test_management.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUser')\n./tests/auth_tests/test_management.py:    @override_settings(\n./tests/auth_tests/test_management.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithFK')\n./tests/auth_tests/test_management.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithFK')\n./tests/auth_tests/test_management.py:    @override_settings(AUTH_PASSWORD_VALIDATORS=[\n./tests/auth_tests/test_management.py:    @override_settings(\n./tests/auth_tests/test_management.py:    @override_settings(AUTH_USER_MODEL='auth_tests.NoPasswordUser')\n./tests/auth_tests/test_management.py:    @override_settings(AUTH_USER_MODEL='auth_tests.NoPasswordUser')\n./tests/auth_tests/test_auth_backends.py:    SimpleTestCase, TestCase, modify_settings, override_settings,\n./tests/auth_tests/test_auth_backends.py:@override_settings(AUTHENTICATION_BACKENDS=['auth_tests.test_auth_backends.SimpleBackend'])\n./tests/auth_tests/test_auth_backends.py:        self.patched_settings = modify_settings(\n./tests/auth_tests/test_auth_backends.py:        self.patched_settings.enable()\n./tests/auth_tests/test_auth_backends.py:        self.patched_settings.disable()\n./tests/auth_tests/test_auth_backends.py:    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n./tests/auth_tests/test_auth_backends.py:    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithoutIsActiveField')\n./tests/auth_tests/test_auth_backends.py:@override_settings(AUTH_USER_MODEL='auth_tests.ExtensionUser')\n./tests/auth_tests/test_auth_backends.py:@override_settings(AUTH_USER_MODEL='auth_tests.CustomPermissionsUser')\n./tests/auth_tests/test_auth_backends.py:@override_settings(AUTH_USER_MODEL='auth_tests.CustomUser')\n./tests/auth_tests/test_auth_backends.py:@override_settings(AUTH_USER_MODEL='auth_tests.UUIDUser')\n./tests/auth_tests/test_auth_backends.py:@modify_settings(AUTHENTICATION_BACKENDS={\n./tests/auth_tests/test_auth_backends.py:@override_settings(\n./tests/auth_tests/test_auth_backends.py:@override_settings(AUTHENTICATION_BACKENDS=[])\n./tests/auth_tests/test_auth_backends.py:@override_settings(AUTHENTICATION_BACKENDS=['auth_tests.test_auth_backends.SimpleRowlevelBackend'])\n./tests/auth_tests/test_auth_backends.py:    @modify_settings(AUTHENTICATION_BACKENDS={'prepend': backend})\n./tests/auth_tests/test_auth_backends.py:    @modify_settings(AUTHENTICATION_BACKENDS={'append': backend})\n./tests/auth_tests/test_auth_backends.py:    @modify_settings(AUTHENTICATION_BACKENDS={'prepend': backend})\n./tests/auth_tests/test_auth_backends.py:    @modify_settings(AUTHENTICATION_BACKENDS={'append': backend})\n./tests/auth_tests/test_auth_backends.py:    Tests for changes in the settings.AUTHENTICATION_BACKENDS\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTHENTICATION_BACKENDS=[backend])\n./tests/auth_tests/test_auth_backends.py:    def test_changed_backend_settings(self):\n./tests/auth_tests/test_auth_backends.py:        with self.settings(AUTHENTICATION_BACKENDS=[\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTHENTICATION_BACKENDS=['auth_tests.test_auth_backends.TypeErrorBackend'])\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTHENTICATION_BACKENDS=(\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTH_USER_MODEL='thismodel.doesntexist')\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTHENTICATION_BACKENDS=[backend])\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTHENTICATION_BACKENDS=[backend])\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTHENTICATION_BACKENDS=[backend, other_backend])\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTHENTICATION_BACKENDS=[backend, other_backend])\n./tests/auth_tests/test_auth_backends.py:@override_settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.AllowAllUsersModelBackend'])\n./tests/auth_tests/test_hashers.py:from django.conf.global_settings import PASSWORD_HASHERS\n./tests/auth_tests/test_hashers.py:from django.test.utils import override_settings\n./tests/auth_tests/test_hashers.py:@override_settings(PASSWORD_HASHERS=PASSWORD_HASHERS)\n./tests/auth_tests/test_hashers.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'])\n./tests/auth_tests/test_hashers.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.MD5PasswordHasher'])\n./tests/auth_tests/test_hashers.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.UnsaltedMD5PasswordHasher'])\n./tests/auth_tests/test_hashers.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher'])\n./tests/auth_tests/test_hashers.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.CryptPasswordHasher'])\n./tests/auth_tests/test_hashers.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.BCryptPasswordHasher'])\n./tests/auth_tests/test_hashers.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.BCryptPasswordHasher'])\n./tests/auth_tests/test_hashers.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.BCryptPasswordHasher'])\n./tests/auth_tests/test_hashers.py:    @override_settings(\n./tests/auth_tests/test_hashers.py:    @override_settings(\n./tests/auth_tests/test_hashers.py:        with self.settings(PASSWORD_HASHERS=[\n./tests/auth_tests/test_hashers.py:        with self.settings(PASSWORD_HASHERS=[\n./tests/auth_tests/test_hashers.py:@override_settings(PASSWORD_HASHERS=PASSWORD_HASHERS)\n./tests/auth_tests/test_remote_user.py:from django.conf import settings\n./tests/auth_tests/test_remote_user.py:from django.test import TestCase, modify_settings, override_settings\n./tests/auth_tests/test_remote_user.py:@override_settings(ROOT_URLCONF='auth_tests.urls')\n./tests/auth_tests/test_remote_user.py:        self.patched_settings = modify_settings(\n./tests/auth_tests/test_remote_user.py:        self.patched_settings.enable()\n./tests/auth_tests/test_remote_user.py:        self.patched_settings.disable()\n./tests/auth_tests/test_remote_user.py:        if settings.USE_TZ:\n./tests/auth_tests/test_context_processors.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/auth_tests/test_context_processors.py:from .settings import AUTH_MIDDLEWARE, AUTH_TEMPLATES\n./tests/auth_tests/test_context_processors.py:@override_settings(ROOT_URLCONF='auth_tests.urls', TEMPLATES=AUTH_TEMPLATES)\n./tests/auth_tests/test_context_processors.py:    @override_settings(MIDDLEWARE=AUTH_MIDDLEWARE)\n./tests/auth_tests/test_context_processors.py:    @override_settings(MIDDLEWARE=AUTH_MIDDLEWARE)\n./tests/auth_tests/test_checks.py:    SimpleTestCase, override_settings, override_system_checks,\n./tests/auth_tests/test_checks.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserNonListRequiredFields')\n./tests/auth_tests/test_checks.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserBadRequiredFields')\n./tests/auth_tests/test_checks.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserNonUniqueUsername')\n./tests/auth_tests/test_checks.py:        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n./tests/auth_tests/test_checks.py:    @override_settings(AUTH_USER_MODEL='auth_tests.BadUser')\n./tests/auth_tests/test_templates.py:from django.test import RequestFactory, TestCase, override_settings\n./tests/auth_tests/test_templates.py:@override_settings(ROOT_URLCONF='auth_tests.urls')\n./tests/auth_tests/test_models.py:from django.conf.global_settings import PASSWORD_HASHERS\n./tests/auth_tests/test_models.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/auth_tests/test_models.py:        settings.PASSWORD_HASHERS.\n./tests/auth_tests/test_models.py:            with self.subTest(model=model), self.settings(AUTH_USER_MODEL=model):\n./tests/auth_tests/test_models.py:    @override_settings(PASSWORD_HASHERS=PASSWORD_HASHERS)\n./tests/auth_tests/test_models.py:    @override_settings(AUTH_USER_MODEL='auth_tests.IsActiveTestUser1')\n./tests/auth_tests/test_basic.py:from django.test import TestCase, override_settings\n./tests/auth_tests/test_basic.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUser')\n./tests/auth_tests/test_basic.py:    @override_settings(AUTH_USER_MODEL='badsetting')\n./tests/auth_tests/test_basic.py:    @override_settings(AUTH_USER_MODEL='thismodel.doesntexist')\n./tests/auth_tests/test_remote_user_deprecation.py:from django.test import TestCase, modify_settings, override_settings\n./tests/auth_tests/test_remote_user_deprecation.py:@override_settings(ROOT_URLCONF='auth_tests.urls')\n./tests/auth_tests/test_remote_user_deprecation.py:        self.patched_settings = modify_settings(\n./tests/auth_tests/test_remote_user_deprecation.py:        self.patched_settings.enable()\n./tests/auth_tests/test_remote_user_deprecation.py:        self.patched_settings.disable()\n./tests/auth_tests/test_validators.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/auth_tests/test_validators.py:@override_settings(AUTH_PASSWORD_VALIDATORS=[\n./tests/auth_tests/test_validators.py:    @override_settings(AUTH_PASSWORD_VALIDATORS=[])\n./tests/admin_custom_urls/tests.py:from django.test import TestCase, override_settings\n./tests/admin_custom_urls/tests.py:@override_settings(ROOT_URLCONF='admin_custom_urls.urls',)\n./tests/file_storage/tests.py:    LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n./tests/file_storage/tests.py:    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Algiers')\n./tests/file_storage/tests.py:    @override_settings(USE_TZ=False, TIME_ZONE='Africa/Algiers')\n./tests/file_storage/tests.py:    @override_settings(\n./tests/file_storage/tests.py:        Properties using settings values as defaults should be updated on\n./tests/file_storage/tests.py:        referenced settings change while specified values should be unchanged.\n./tests/file_storage/tests.py:        settings = {\n./tests/file_storage/tests.py:        with self.settings(**settings):\n./tests/file_storage/tests.py:            self.assertEqual(defaults_storage.base_location, settings['MEDIA_ROOT'])\n./tests/file_storage/tests.py:            self.assertIn(settings['MEDIA_ROOT'], defaults_storage.location)\n./tests/file_storage/tests.py:            self.assertEqual(defaults_storage.base_url, settings['MEDIA_URL'])\n./tests/file_storage/tests.py:            self.assertEqual(defaults_storage.file_permissions_mode, settings['FILE_UPLOAD_PERMISSIONS'])\n./tests/file_storage/tests.py:                defaults_storage.directory_permissions_mode, settings['FILE_UPLOAD_DIRECTORY_PERMISSIONS']\n./tests/file_storage/tests.py:    @override_settings(FILE_UPLOAD_PERMISSIONS=0o654)\n./tests/file_storage/tests.py:    @override_settings(FILE_UPLOAD_PERMISSIONS=None)\n./tests/file_storage/tests.py:    @override_settings(FILE_UPLOAD_DIRECTORY_PERMISSIONS=0o765)\n./tests/file_storage/tests.py:    @override_settings(FILE_UPLOAD_DIRECTORY_PERMISSIONS=None)\n./tests/file_storage/tests.py:@override_settings(ROOT_URLCONF='file_storage.urls')\n./tests/middleware/test_security.py:from django.test.utils import override_settings\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=3600)\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=3600)\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=3600)\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=0)\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=600, SECURE_HSTS_INCLUDE_SUBDOMAINS=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=600, SECURE_HSTS_INCLUDE_SUBDOMAINS=False)\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=10886400, SECURE_HSTS_PRELOAD=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=10886400, SECURE_HSTS_INCLUDE_SUBDOMAINS=True, SECURE_HSTS_PRELOAD=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=10886400, SECURE_HSTS_PRELOAD=False)\n./tests/middleware/test_security.py:    @override_settings(SECURE_CONTENT_TYPE_NOSNIFF=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_CONTENT_TYPE_NOSNIFF=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_CONTENT_TYPE_NOSNIFF=False)\n./tests/middleware/test_security.py:    @override_settings(SECURE_BROWSER_XSS_FILTER=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_BROWSER_XSS_FILTER=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_BROWSER_XSS_FILTER=False)\n./tests/middleware/test_security.py:    @override_settings(SECURE_SSL_REDIRECT=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_SSL_REDIRECT=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_SSL_REDIRECT=True, SECURE_REDIRECT_EXEMPT=[\"^insecure/\"])\n./tests/middleware/test_security.py:    @override_settings(SECURE_SSL_REDIRECT=True, SECURE_SSL_HOST=\"secure.example.com\")\n./tests/middleware/test_security.py:    @override_settings(SECURE_SSL_REDIRECT=False)\n./tests/middleware/tests.py:from django.conf import settings\n./tests/middleware/tests.py:from django.test import RequestFactory, SimpleTestCase, override_settings\n./tests/middleware/tests.py:@override_settings(ROOT_URLCONF='middleware.urls')\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True, DEBUG=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=False)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=False, PREPEND_WWW=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True, PREPEND_WWW=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True, PREPEND_WWW=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True, DEBUG=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=False)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=False, PREPEND_WWW=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True, PREPEND_WWW=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True, PREPEND_WWW=True)\n./tests/middleware/tests.py:    @override_settings(DISALLOWED_USER_AGENTS=[re.compile(r'foo')])\n./tests/middleware/tests.py:@override_settings(\n./tests/middleware/tests.py:        with self.settings(SECURE_PROXY_SSL_HEADER=('HTTP_X_PROTO', 'https')):\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=False)\n./tests/middleware/tests.py:@override_settings(ROOT_URLCONF='middleware.cond_get_urls')\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='SAMEORIGIN'):\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='sameorigin'):\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='DENY'):\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='deny'):\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS=None):\n./tests/middleware/tests.py:            del settings.X_FRAME_OPTIONS    # restored by override_settings\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='DENY'):\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='SAMEORIGIN'):\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='SAMEORIGIN'):\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='DENY'):\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='SAMEORIGIN'):\n./tests/urlpatterns_reverse/test_localeregexdescriptor.py:from django.test import SimpleTestCase, override_settings\n./tests/urlpatterns_reverse/test_localeregexdescriptor.py:@override_settings(LOCALE_PATHS=[os.path.join(here, 'translations', 'locale')])\n./tests/urlpatterns_reverse/tests.py:from django.conf import settings\n./tests/urlpatterns_reverse/tests.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.no_urls')\n./tests/urlpatterns_reverse/tests.py:        resolver = URLResolver(RegexPattern(r'^$'), settings.ROOT_URLCONF)\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.reverse_lazy_urls')\n./tests/urlpatterns_reverse/tests.py:    reverse_lazy can be used in settings without causing a circular\n./tests/urlpatterns_reverse/tests.py:        self.write_settings(\n./tests/urlpatterns_reverse/tests.py:            'settings.py',\n./tests/urlpatterns_reverse/tests.py:    def test_lazy_in_settings(self):\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.namespace_urls')\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF=urlconf_outer.__name__)\n./tests/urlpatterns_reverse/tests.py:    @override_settings(\n./tests/urlpatterns_reverse/tests.py:    @override_settings(\n./tests/urlpatterns_reverse/tests.py:    @override_settings(\n./tests/urlpatterns_reverse/tests.py:    @override_settings(\n./tests/urlpatterns_reverse/tests.py:    @override_settings(\n./tests/urlpatterns_reverse/tests.py:    @override_settings(\n./tests/urlpatterns_reverse/tests.py:        with override_settings(MIDDLEWARE=['%s.ChangeURLconfMiddleware' % middleware.__name__]):\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.urls_without_handlers')\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF=None)\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.namespace_urls')\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n./tests/admin_views/test_history_view.py:from django.test import TestCase, override_settings\n./tests/admin_views/test_history_view.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/test_forms.py:from django.test import TestCase, override_settings\n./tests/admin_views/test_forms.py:@override_settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.AllowAllUsersModelBackend'])\n./tests/admin_views/test_multidb.py:from django.test import TestCase, override_settings\n./tests/admin_views/test_multidb.py:@override_settings(ROOT_URLCONF=__name__, DATABASE_ROUTERS=['%s.Router' % __name__])\n./tests/admin_views/test_autocomplete_view.py:from django.test import RequestFactory, override_settings\n./tests/admin_views/test_autocomplete_view.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:    TestCase, modify_settings, override_settings, skipUnlessDBFeature,\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls', USE_I18N=True, USE_L10N=False, LANGUAGE_CODE='en')\n./tests/admin_views/tests.py:        with self.settings(LANGUAGE_CODE='fr'), translation.override('en-us'):\n./tests/admin_views/tests.py:        with self.settings(LANGUAGE_CODE='fr'), translation.override('none'):\n./tests/admin_views/tests.py:        with self.settings(LANGUAGE_CODE='ru', USE_L10N=False), translation.override('none'):\n./tests/admin_views/tests.py:    @override_settings(TIME_ZONE='America/Sao_Paulo', USE_TZ=True)\n./tests/admin_views/tests.py:@override_settings(TEMPLATES=[{\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:        with override_settings(DEBUG=False):\n./tests/admin_views/tests.py:        with override_settings(DEBUG=True):\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(\n./tests/admin_views/tests.py:@override_settings(\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:    @override_settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:        with self.settings(LANGUAGE_CODE='fr'):\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@modify_settings(INSTALLED_APPS={'append': ['django.contrib.admindocs', 'django.contrib.flatpages']})\n./tests/admin_views/tests.py:@override_settings(\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls', USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:    @override_settings(MESSAGE_LEVEL=10)  # Set to DEBUG for this request\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/test_actions.py:from django.test import TestCase, override_settings\n./tests/admin_views/test_actions.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/test_actions.py:    @override_settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=True, NUMBER_GROUPING=3)\n./tests/admin_views/test_actions.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/test_adminsite.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/admin_views/test_adminsite.py:@override_settings(ROOT_URLCONF='admin_views.test_adminsite')\n./tests/forms_tests/widget_tests/test_select.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_select.py:    @override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True)\n./tests/forms_tests/widget_tests/test_dateinput.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_dateinput.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/widget_tests/test_splithiddendatetimewidget.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_splithiddendatetimewidget.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/widget_tests/test_radioselect.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_radioselect.py:    @override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True)\n./tests/forms_tests/widget_tests/test_checkboxselectmultiple.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_checkboxselectmultiple.py:    @override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True)\n./tests/forms_tests/widget_tests/test_timeinput.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_timeinput.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/widget_tests/test_datetimeinput.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_datetimeinput.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/widget_tests/test_datetimeinput.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/widget_tests/test_datetimeinput.py:        with self.settings(USE_L10N=False):\n./tests/forms_tests/widget_tests/test_numberinput.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_numberinput.py:    @override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True)\n./tests/forms_tests/widget_tests/test_nullbooleanselect.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_nullbooleanselect.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/widget_tests/test_selectdatewidget.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_selectdatewidget.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/widget_tests/test_selectdatewidget.py:    @override_settings(USE_L10N=False, DATE_INPUT_FORMATS=['%d.%m.%Y'])\n./tests/forms_tests/widget_tests/test_selectdatewidget.py:    @override_settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\n./tests/forms_tests/field_tests/test_datefield.py:from django.test import SimpleTestCase, override_settings\n./tests/forms_tests/field_tests/test_datefield.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/field_tests/test_datefield.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/field_tests/test_datefield.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/field_tests/test_floatfield.py:from django.test.utils import override_settings\n./tests/forms_tests/field_tests/test_floatfield.py:        with translation.override('fr'), self.settings(USE_L10N=True):\n./tests/forms_tests/field_tests/test_floatfield.py:    @override_settings(USE_L10N=False, DECIMAL_SEPARATOR=',')\n./tests/forms_tests/field_tests/test_floatfield.py:    @override_settings(USE_L10N=False, DECIMAL_SEPARATOR=',', USE_THOUSAND_SEPARATOR=True,\n./tests/forms_tests/field_tests/test_decimalfield.py:from django.test import SimpleTestCase, override_settings\n./tests/forms_tests/field_tests/test_decimalfield.py:        with translation.override('fr'), self.settings(USE_L10N=True):\n./tests/forms_tests/field_tests/test_decimalfield.py:    @override_settings(USE_L10N=False, DECIMAL_SEPARATOR=',')\n./tests/forms_tests/field_tests/test_decimalfield.py:    @override_settings(USE_L10N=False, DECIMAL_SEPARATOR=',', USE_THOUSAND_SEPARATOR=True,\n./tests/forms_tests/tests/test_widgets.py:from django.test import override_settings\n./tests/forms_tests/tests/test_widgets.py:@override_settings(ROOT_URLCONF='forms_tests.urls')\n./tests/forms_tests/tests/test_media.py:from django.test import SimpleTestCase, override_settings\n./tests/forms_tests/tests/test_media.py:@override_settings(\n./tests/forms_tests/tests/test_media.py:        # with the value of settings.MEDIA_URL\n./tests/forms_tests/tests/test_input_formats.py:from django.test import SimpleTestCase, override_settings\n./tests/forms_tests/tests/test_input_formats.py:@override_settings(TIME_INPUT_FORMATS=[\"%I:%M:%S %p\", \"%I:%M %p\"], USE_L10N=True)\n./tests/forms_tests/tests/test_input_formats.py:@override_settings(TIME_INPUT_FORMATS=[\"%I:%M:%S %p\", \"%I:%M %p\"])\n./tests/forms_tests/tests/test_input_formats.py:@override_settings(DATE_INPUT_FORMATS=[\"%d/%m/%Y\", \"%d-%m-%Y\"], USE_L10N=True)\n./tests/forms_tests/tests/test_input_formats.py:@override_settings(DATE_INPUT_FORMATS=[\"%d.%m.%Y\", \"%d-%m-%Y\"])\n./tests/forms_tests/tests/test_input_formats.py:@override_settings(DATETIME_INPUT_FORMATS=[\"%I:%M:%S %p %d/%m/%Y\", \"%I:%M %p %d-%m-%Y\"], USE_L10N=True)\n./tests/forms_tests/tests/test_input_formats.py:@override_settings(DATETIME_INPUT_FORMATS=[\"%I:%M:%S %p %d/%m/%Y\", \"%I:%M %p %d-%m-%Y\"])\n./tests/custom_lookups/tests.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/custom_lookups/tests.py:@override_settings(USE_TZ=True)\n./tests/template_backends/test_django.py:from django.test import RequestFactory, override_settings\n./tests/template_backends/test_django.py:    @override_settings(INSTALLED_APPS=['template_backends.apps.good'])\n./tests/template_backends/test_django.py:    @override_settings(INSTALLED_APPS=['template_backends.apps.importerror'])\n./tests/template_backends/test_django.py:    @override_settings(DEBUG=False)\n./tests/template_backends/test_django.py:    @override_settings(DEBUG=True)\n./tests/template_backends/test_utils.py:from django.test import SimpleTestCase, override_settings\n./tests/template_backends/test_utils.py:    @override_settings(TEMPLATES=[{'BACKEND': 'raise.import.error'}])\n./tests/template_backends/test_utils.py:    @override_settings(TEMPLATES=[{\n./tests/template_backends/test_utils.py:    @override_settings(TEMPLATES=[{\n./tests/template_backends/test_utils.py:            \"a unique NAME for each engine in settings.TEMPLATES.\"\n./tests/template_backends/test_jinja2.py:        with self.settings(STATIC_URL='/s/'):\n./tests/admin_docs/test_views.py:from django.conf import settings\n./tests/admin_docs/test_views.py:from django.test import SimpleTestCase, modify_settings, override_settings\n./tests/admin_docs/test_views.py:    @override_settings(ROOT_URLCONF='admin_docs.namespace_urls')\n./tests/admin_docs/test_views.py:    @modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'})\n./tests/admin_docs/test_views.py:    @override_settings(SITE_ID=None)    # will restore SITE_ID after the test\n./tests/admin_docs/test_views.py:        objects. Deleting settings is fine here as UserSettingsHolder is used.\n./tests/admin_docs/test_views.py:        del settings.SITE_ID\n./tests/admin_docs/test_views.py:@override_settings(TEMPLATES=[{\n./tests/admin_docs/test_views.py:        # Overridden because non-trivial TEMPLATES settings aren't supported\n./tests/admin_docs/test_views.py:        # Overridden because non-trivial TEMPLATES settings aren't supported\n./tests/admin_docs/tests.py:    SimpleTestCase, TestCase, modify_settings, override_settings,\n./tests/admin_docs/tests.py:@override_settings(ROOT_URLCONF='admin_docs.urls')\n./tests/admin_docs/tests.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.admindocs'})\n./tests/admin_docs/tests.py:@override_settings(ROOT_URLCONF='admin_docs.urls')\n./tests/admin_docs/tests.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.admindocs'})\n./tests/staticfiles_tests/test_finders.py:from django.conf import settings\n./tests/staticfiles_tests/test_finders.py:from django.test import SimpleTestCase, override_settings\n./tests/staticfiles_tests/test_finders.py:from .settings import TEST_ROOT\n./tests/staticfiles_tests/test_finders.py:            storage=storage.StaticFilesStorage(location=settings.MEDIA_ROOT))\n./tests/staticfiles_tests/test_finders.py:        test_file_path = os.path.join(settings.MEDIA_ROOT, 'media-file.txt')\n./tests/staticfiles_tests/test_finders.py:@override_settings(\n./tests/staticfiles_tests/test_finders.py:    @override_settings(MEDIA_ROOT='')\n./tests/staticfiles_tests/test_forms.py:from django.test import SimpleTestCase, override_settings\n./tests/staticfiles_tests/test_forms.py:@override_settings(\n./tests/staticfiles_tests/test_templatetags.py:from django.test import override_settings\n./tests/staticfiles_tests/test_templatetags.py:    @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.QueryStringStorage')\n./tests/staticfiles_tests/test_views.py:from django.conf import settings\n./tests/staticfiles_tests/test_views.py:from django.test import override_settings\n./tests/staticfiles_tests/test_views.py:@override_settings(ROOT_URLCONF='staticfiles_tests.urls.default')\n./tests/staticfiles_tests/test_views.py:        return self.client.get(quote(posixpath.join(settings.STATIC_URL, filepath)))\n./tests/staticfiles_tests/test_views.py:@override_settings(DEBUG=False)\n./tests/staticfiles_tests/test_views.py:@override_settings(DEBUG=True)\n./tests/staticfiles_tests/test_views.py:@override_settings(DEBUG=True, ROOT_URLCONF='staticfiles_tests.urls.helper')\n./tests/staticfiles_tests/cases.py:from django.conf import settings\n./tests/staticfiles_tests/cases.py:from django.test import SimpleTestCase, override_settings\n./tests/staticfiles_tests/cases.py:from .settings import TEST_SETTINGS\n./tests/staticfiles_tests/cases.py:@override_settings(**TEST_SETTINGS)\n./tests/staticfiles_tests/cases.py:@override_settings(**TEST_SETTINGS)\n./tests/staticfiles_tests/cases.py:        self.patched_settings = self.settings(STATIC_ROOT=temp_dir)\n./tests/staticfiles_tests/cases.py:        self.patched_settings.enable()\n./tests/staticfiles_tests/cases.py:        self.patched_settings.disable()\n./tests/staticfiles_tests/cases.py:        filepath = os.path.join(settings.STATIC_ROOT, filepath)\n./tests/staticfiles_tests/test_management.py:from django.conf import settings\n./tests/staticfiles_tests/test_management.py:from django.test import RequestFactory, override_settings\n./tests/staticfiles_tests/test_management.py:from .settings import TEST_ROOT, TEST_SETTINGS\n./tests/staticfiles_tests/test_management.py:        self.assertEqual(os.listdir(settings.STATIC_ROOT), [])\n./tests/staticfiles_tests/test_management.py:    @override_settings(MIDDLEWARE=['django.middleware.common.CommonMiddleware'])\n./tests/staticfiles_tests/test_management.py:        missing_static_file = os.path.join(settings.STATIC_URL, 'unknown.css')\n./tests/staticfiles_tests/test_management.py:        with override_settings(DEBUG=False):\n./tests/staticfiles_tests/test_management.py:        with override_settings(DEBUG=True):\n./tests/staticfiles_tests/test_management.py:            with override_settings(STATIC_ROOT=root):\n./tests/staticfiles_tests/test_management.py:            with self.settings(STATICFILES_STORAGE='django.contrib.staticfiles.storage.StaticFilesStorage'):\n./tests/staticfiles_tests/test_management.py:            with self.settings(STATICFILES_STORAGE='staticfiles_tests.storage.DummyStorage'):\n./tests/staticfiles_tests/test_management.py:    @override_settings(STATIC_ROOT=None)\n./tests/staticfiles_tests/test_management.py:    def test_missing_settings_dont_prevent_help(self):\n./tests/staticfiles_tests/test_management.py:        self.write_settings('settings.py', apps=['django.contrib.staticfiles'])\n./tests/staticfiles_tests/test_management.py:    @override_settings(STATICFILES_STORAGE='django.contrib.staticfiles.storage.ManifestStaticFilesStorage')\n./tests/staticfiles_tests/test_management.py:    @override_settings(STATICFILES_STORAGE='django.contrib.staticfiles.storage.ManifestStaticFilesStorage')\n./tests/staticfiles_tests/test_management.py:        clear_filepath = os.path.join(settings.STATIC_ROOT, 'cleared.txt')\n./tests/staticfiles_tests/test_management.py:        shutil.rmtree(settings.STATIC_ROOT)\n./tests/staticfiles_tests/test_management.py:    @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.PathNotImplementedStorage')\n./tests/staticfiles_tests/test_management.py:        shutil.rmtree(settings.STATIC_ROOT)\n./tests/staticfiles_tests/test_management.py:            with override_settings(STATIC_ROOT=static_dir):\n./tests/staticfiles_tests/test_management.py:@override_settings(INSTALLED_APPS=[\n./tests/staticfiles_tests/test_management.py:        self.settings_with_test_app = self.modify_settings(\n./tests/staticfiles_tests/test_management.py:            self.settings_with_test_app.enable()\n./tests/staticfiles_tests/test_management.py:        self.settings_with_test_app.disable()\n./tests/staticfiles_tests/test_management.py:@override_settings(STATICFILES_DIRS=[])\n./tests/staticfiles_tests/test_management.py:            with self.settings(STATICFILES_DIRS=[static_dir]):\n./tests/staticfiles_tests/test_management.py:            with self.settings(STATICFILES_DIRS=[static_dir]):\n./tests/staticfiles_tests/test_management.py:@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.DummyStorage')\n./tests/staticfiles_tests/test_management.py:    @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NeverCopyRemoteStorage')\n./tests/staticfiles_tests/test_management.py:        self.assertTrue(os.path.islink(os.path.join(settings.STATIC_ROOT, 'test.txt')))\n./tests/staticfiles_tests/test_management.py:        path = os.path.join(settings.STATIC_ROOT, 'test.txt')\n./tests/staticfiles_tests/test_management.py:        path = os.path.join(settings.STATIC_ROOT, 'test.txt')\n./tests/staticfiles_tests/test_management.py:        nonexistent_file_path = os.path.join(settings.STATIC_ROOT, 'nonexistent.txt')\n./tests/staticfiles_tests/test_management.py:        broken_symlink_path = os.path.join(settings.STATIC_ROOT, 'symlink.txt')\n./tests/staticfiles_tests/test_management.py:    @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.PathNotImplementedStorage')\n./tests/staticfiles_tests/test_checks.py:from django.conf import settings\n./tests/staticfiles_tests/test_checks.py:from django.test import SimpleTestCase, override_settings\n./tests/staticfiles_tests/test_checks.py:    def test_no_errors_with_test_settings(self):\n./tests/staticfiles_tests/test_checks.py:    @override_settings(STATICFILES_DIRS='a string')\n./tests/staticfiles_tests/test_checks.py:    @override_settings(STATICFILES_DIRS=['/fake/path', settings.STATIC_ROOT])\n./tests/staticfiles_tests/test_checks.py:    @override_settings(STATICFILES_DIRS=[('prefix', settings.STATIC_ROOT)])\n./tests/staticfiles_tests/test_checks.py:    @override_settings(STATICFILES_DIRS=[('prefix/', '/fake/path')])\n./tests/staticfiles_tests/test_utils.py:from django.contrib.staticfiles.utils import check_settings\n./tests/staticfiles_tests/test_utils.py:from django.test import SimpleTestCase, override_settings\n./tests/staticfiles_tests/test_utils.py:    @override_settings(DEBUG=True, MEDIA_URL='/static/media/', STATIC_URL='/static/',)\n./tests/staticfiles_tests/test_utils.py:            check_settings()\n./tests/staticfiles_tests/test_utils.py:        with self.settings(DEBUG=False):  # Check disabled if DEBUG=False.\n./tests/staticfiles_tests/test_utils.py:            check_settings()\n./tests/staticfiles_tests/storage.py:from django.conf import settings\n./tests/staticfiles_tests/storage.py:        return os.path.join(settings.STATIC_ROOT, name)\n./tests/staticfiles_tests/test_storage.py:from django.conf import settings\n./tests/staticfiles_tests/test_storage.py:from django.test import SimpleTestCase, ignore_warnings, override_settings\n./tests/staticfiles_tests/test_storage.py:from .settings import TEST_ROOT\n./tests/staticfiles_tests/test_storage.py:    return fullpath.replace(settings.STATIC_URL, '')\n./tests/staticfiles_tests/test_storage.py:    @override_settings(\n./tests/staticfiles_tests/test_storage.py:    @override_settings(\n./tests/staticfiles_tests/test_storage.py:@override_settings(\n./tests/staticfiles_tests/test_storage.py:@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.ExtraPatternsStorage')\n./tests/staticfiles_tests/test_storage.py:        return fullpath.replace(settings.STATIC_URL, '')\n./tests/staticfiles_tests/test_storage.py:@override_settings(\n./tests/staticfiles_tests/test_storage.py:        self.patched_settings = self.settings(\n./tests/staticfiles_tests/test_storage.py:            STATICFILES_DIRS=settings.STATICFILES_DIRS + [temp_dir],\n./tests/staticfiles_tests/test_storage.py:        self.patched_settings.enable()\n./tests/staticfiles_tests/test_storage.py:        self.patched_settings.disable()\n./tests/staticfiles_tests/test_storage.py:        cached_files = os.listdir(os.path.join(settings.STATIC_ROOT, 'cached'))\n./tests/staticfiles_tests/test_storage.py:@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.SimpleStorage')\n./tests/staticfiles_tests/test_storage.py:    @override_settings(\n./tests/staticfiles_tests/test_storage.py:        test_file = os.path.join(settings.STATIC_ROOT, \"test.txt\")\n./tests/staticfiles_tests/test_storage.py:        test_dir = os.path.join(settings.STATIC_ROOT, \"subdir\")\n./tests/staticfiles_tests/test_storage.py:    @override_settings(\n./tests/staticfiles_tests/test_storage.py:        test_file = os.path.join(settings.STATIC_ROOT, \"test.txt\")\n./tests/staticfiles_tests/test_storage.py:        test_dir = os.path.join(settings.STATIC_ROOT, \"subdir\")\n./tests/staticfiles_tests/test_storage.py:    @override_settings(\n./tests/staticfiles_tests/test_storage.py:        test_file = os.path.join(settings.STATIC_ROOT, \"test.txt\")\n./tests/staticfiles_tests/test_storage.py:        test_dir = os.path.join(settings.STATIC_ROOT, \"subdir\")\n./tests/staticfiles_tests/test_storage.py:@override_settings(\n./tests/staticfiles_tests/test_storage.py:        with self.modify_settings(STATICFILES_DIRS={'append': self._temp_dir}):\n./tests/staticfiles_tests/test_liveserver.py:from django.test import modify_settings, override_settings\n./tests/staticfiles_tests/test_liveserver.py:        # Override settings\n./tests/staticfiles_tests/test_liveserver.py:        cls.settings_override = override_settings(**TEST_SETTINGS)\n./tests/staticfiles_tests/test_liveserver.py:        cls.settings_override.enable()\n./tests/staticfiles_tests/test_liveserver.py:        # Restore original settings\n./tests/staticfiles_tests/test_liveserver.py:        cls.settings_override.disable()\n./tests/staticfiles_tests/test_liveserver.py:    @modify_settings(INSTALLED_APPS={'append': 'staticfiles_tests.apps.test'})\n./tests/template_tests/syntax_tests/test_cache.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/syntax_tests/test_cache.py:    @override_settings(CACHES={\n./tests/template_tests/syntax_tests/test_url.py:from django.test import RequestFactory, SimpleTestCase, override_settings\n./tests/template_tests/syntax_tests/test_url.py:@override_settings(ROOT_URLCONF='template_tests.urls')\n./tests/template_tests/syntax_tests/test_static.py:from django.conf import settings\n./tests/template_tests/syntax_tests/test_static.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/syntax_tests/test_static.py:@override_settings(INSTALLED_APPS=[], MEDIA_URL='/media/', STATIC_URL='/static/')\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, settings.STATIC_URL)\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, settings.STATIC_URL)\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, settings.MEDIA_URL)\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, settings.MEDIA_URL)\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, urljoin(settings.STATIC_URL, 'admin/base.css'))\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, urljoin(settings.STATIC_URL, 'admin/base.css'))\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, urljoin(settings.STATIC_URL, 'admin/base.css'))\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, urljoin(settings.STATIC_URL, 'admin/base.css'))\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, urljoin(settings.STATIC_URL, '/static/special%3Fchars%26quoted.html'))\n./tests/template_tests/syntax_tests/i18n/test_blocktrans.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/syntax_tests/i18n/test_blocktrans.py:    @override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/template_tests/syntax_tests/i18n/test_blocktrans.py:    @override_settings(LOCALE_PATHS=[os.path.join(here, 'other', 'locale')])\n./tests/template_tests/syntax_tests/i18n/test_blocktrans.py:    @override_settings(LOCALE_PATHS=[os.path.join(here, 'other', 'locale')])\n./tests/template_tests/syntax_tests/i18n/test_blocktrans.py:    @override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/template_tests/syntax_tests/i18n/test_blocktrans.py:    @override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/template_tests/syntax_tests/i18n/base.py:from django.conf import settings\n./tests/template_tests/syntax_tests/i18n/base.py:extended_locale_paths = settings.LOCALE_PATHS + [\n./tests/template_tests/syntax_tests/i18n/test_trans.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/syntax_tests/i18n/test_trans.py:    @override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/template_tests/utils.py:from django.test.utils import override_settings\n./tests/template_tests/utils.py:        # are properly isolated from Django's global settings.\n./tests/template_tests/utils.py:        @override_settings(TEMPLATES=None)\n./tests/template_tests/test_loaders.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/test_loaders.py:    @override_settings(INSTALLED_APPS=['template_tests'])\n./tests/template_tests/test_loaders.py:    @override_settings(INSTALLED_APPS=[])\n./tests/template_tests/filter_tests/test_time.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/filter_tests/test_time.py:    @override_settings(USE_L10N=True)\n./tests/template_tests/filter_tests/test_filesizeformat.py:        with self.settings(USE_L10N=True), translation.override('de'):\n./tests/template_tests/filter_tests/test_date.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/filter_tests/test_date.py:    @override_settings(USE_L10N=True)\n./tests/template_tests/test_response.py:    RequestFactory, SimpleTestCase, modify_settings, override_settings,\n./tests/template_tests/test_response.py:@override_settings(TEMPLATES=[{\n./tests/template_tests/test_response.py:@modify_settings(MIDDLEWARE={'append': ['template_tests.test_response.CustomURLConfMiddleware']})\n./tests/template_tests/test_response.py:@override_settings(ROOT_URLCONF='template_tests.urls')\n./tests/template_tests/test_response.py:@modify_settings(\n./tests/template_tests/test_response.py:@override_settings(CACHE_MIDDLEWARE_SECONDS=2.0, ROOT_URLCONF='template_tests.alternate_urls')\n./tests/template_tests/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/tests.py:    @override_settings(SETTINGS_MODULE=None)\n./tests/template_tests/tests.py:    def test_url_reverse_no_settings_module(self):\n./tests/template_tests/tests.py:        #9005 -- url tag shouldn't require settings.SETTINGS_MODULE to\n./tests/template_tests/tests.py:        with self.settings(USE_I18N=True), translation.override('de'):\n./tests/template_tests/test_engine.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/test_engine.py:    @override_settings(TEMPLATES=[])\n./tests/template_tests/test_engine.py:    @override_settings(TEMPLATES=[{\n./tests/template_tests/test_engine.py:    @override_settings(TEMPLATES=[{\n./tests/test_client_regress/views.py:from django.conf import settings\n./tests/test_client_regress/views.py:        charset = settings.DEFAULT_CHARSET\n./tests/test_client_regress/tests.py:    Client, SimpleTestCase, TestCase, modify_settings, override_settings,\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:    @modify_settings(ALLOWED_HOSTS={'append': 'otherserver'})\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls',)\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:    @override_settings(TEMPLATES=[{\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:        with self.settings(TEMPLATES=[{\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:    @override_settings(AUTH_USER_MODEL='test_client_regress.CustomUser')\n./tests/test_client_regress/tests.py:    @override_settings(AUTHENTICATION_BACKENDS=(\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls',)\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls',)\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/conditional_processing/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/conditional_processing/tests.py:@override_settings(ROOT_URLCONF='conditional_processing.urls')\n./tests/resolve_url/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/resolve_url/tests.py:@override_settings(ROOT_URLCONF='resolve_url.urls')\n./tests/test_utils/tests.py:from django.conf import settings\n./tests/test_utils/tests.py:    override_settings, setup_test_environment,\n./tests/test_utils/tests.py:@override_settings(ROOT_URLCONF='test_utils.urls')\n./tests/test_utils/tests.py:@override_settings(ROOT_URLCONF='test_utils.urls')\n./tests/test_utils/tests.py:@override_settings(ROOT_URLCONF='test_utils.urls')\n./tests/test_utils/tests.py:@override_settings(ROOT_URLCONF='test_utils.urls')\n./tests/test_utils/tests.py:@override_settings(ROOT_URLCONF='test_utils.urls')\n./tests/test_utils/tests.py:                    with self.settings(ALLOWED_HOSTS=allowed_hosts):\n./tests/test_utils/tests.py:                        self.assertEqual(settings.ALLOWED_HOSTS, ['*', 'testserver'])\n./tests/test_utils/tests.py:    # #21518 -- If neither override_settings nor a setting_changed receiver\n./tests/test_utils/tests.py:    @override_settings(ROOT_URLCONF=FirstUrls)\n./tests/test_utils/tests.py:    @override_settings(ROOT_URLCONF=SecondUrls)\n./tests/test_utils/tests.py:        with override_settings(ROOT_URLCONF=FirstUrls):\n./tests/test_utils/tests.py:            with override_settings(ROOT_URLCONF=SecondUrls):\n./tests/test_utils/tests.py:        with self.settings(MEDIA_ROOT='test_value'):\n./tests/test_utils/tests.py:        with self.settings(MEDIA_URL='/test_value/'):\n./tests/test_utils/tests.py:        with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n./tests/test_utils/tests.py:        with self.settings(FILE_UPLOAD_DIRECTORY_PERMISSIONS=0o777):\n./tests/test_utils/tests.py:        with self.settings(DATABASE_ROUTERS=test_routers):\n./tests/test_utils/tests.py:        with self.settings(STATIC_URL='/test/'):\n./tests/test_utils/tests.py:        with self.settings(STATIC_ROOT='/tmp/test'):\n./tests/test_utils/tests.py:        with self.settings(STATICFILES_STORAGE=new_storage):\n./tests/test_utils/tests.py:        with self.settings(STATICFILES_FINDERS=finders):\n./tests/test_utils/tests.py:        with self.settings(STATICFILES_DIRS=[test_path]):\n./tests/test_utils/tests.py:            \"in settings.DATABASES.\"\n./tests/test_utils/tests.py:            \"in settings.DATABASES. Did you mean 'default'?\"\n./tests/test_utils/test_transactiontestcase.py:from django.test import TestCase, TransactionTestCase, override_settings\n./tests/test_utils/test_transactiontestcase.py:@override_settings(DEBUG=True)  # Enable query logging for test_queries_cleared\n./tests/migrate_signals/tests.py:from django.test import TransactionTestCase, override_settings\n./tests/migrate_signals/tests.py:    @override_settings(MIGRATION_MODULES={'migrate_signals': 'migrate_signals.custom_migrations'})\n./tests/model_fields/test_filefield.py:from django.test import TestCase, override_settings\n./tests/model_fields/test_filefield.py:    @override_settings(MEDIA_ROOT=temp.gettempdir())\n./tests/model_fields/test_datetimefield.py:    SimpleTestCase, TestCase, override_settings, skipUnlessDBFeature,\n./tests/model_fields/test_datetimefield.py:    @override_settings(USE_TZ=False)\n./tests/model_fields/test_datetimefield.py:    @override_settings(USE_TZ=True, TIME_ZONE='America/Vancouver')\n./tests/model_fields/test_datetimefield.py:        with self.settings(TIME_ZONE='UTC'):\n./tests/cache/tests.py:# Uses whatever cache backend is set in the test settings file.\n./tests/cache/tests.py:from django.conf import settings\n./tests/cache/tests.py:    override_settings,\n./tests/cache/tests.py:@override_settings(CACHES={\n./tests/cache/tests.py:    # `base` is used to pull in the memcached config from the original settings,\n./tests/cache/tests.py:    # `params` are test specific overrides and `_caches_settings_base` is the\n./tests/cache/tests.py:        with mock.patch('%s.%s' % (settings.CACHES['default']['BACKEND'], 'add')) as cache_add:\n./tests/cache/tests.py:@override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:        # The super calls needs to happen first for the settings override.\n./tests/cache/tests.py:        self.assertEqual(out.getvalue(), \"Cache table 'test cache table' already exists.\\n\" * len(settings.CACHES))\n./tests/cache/tests.py:    @override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:@override_settings(USE_TZ=True)\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:    @override_settings(DATABASE_ROUTERS=[DBCacheRouter()])\n./tests/cache/tests.py:limit_locmem_entries = override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:@override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:    @override_settings(CACHES={\n./tests/cache/tests.py:# To check the memcached backend, the test settings file will\n./tests/cache/tests.py:for _cache_params in settings.CACHES.values():\n./tests/cache/tests.py:                with self.settings(CACHES={'default': params}):\n./tests/cache/tests.py:        with self.settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:        with self.settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:@override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:        for cache_key in settings.CACHES:\n./tests/cache/tests.py:    @override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:@override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:    @override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:@override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:        # Caches location cannot be modified through override_settings / modify_settings,\n./tests/cache/tests.py:        # hence settings are manipulated directly here and the setting_changed signal\n./tests/cache/tests.py:        for cache_params in settings.CACHES.values():\n./tests/cache/tests.py:@override_settings(CACHES={\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:        settings will use the default 5 minute timeout.\n./tests/cache/tests.py:    @override_settings(CACHES=NEVER_EXPIRING_CACHES_SETTINGS)\n./tests/cache/tests.py:        default settings with have `None` as the default timeout.\n./tests/cache/tests.py:    @override_settings(CACHES=DEFAULT_MEMORY_CACHES_SETTINGS)\n./tests/cache/tests.py:    @override_settings(CACHES=NEVER_EXPIRING_CACHES_SETTINGS)\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:    CACHE_MIDDLEWARE_KEY_PREFIX='settingsprefix',\n./tests/cache/tests.py:            'views.decorators.cache.cache_page.settingsprefix.GET.'\n./tests/cache/tests.py:            'views.decorators.cache.cache_page.settingsprefix.GET.'\n./tests/cache/tests.py:            'views.decorators.cache.cache_page.settingsprefix.GET.'\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:    CACHE_MIDDLEWARE_KEY_PREFIX='settingsprefix',\n./tests/cache/tests.py:    @override_settings(USE_I18N=True, USE_L10N=False, USE_TZ=False)\n./tests/cache/tests.py:    @override_settings(USE_I18N=True, USE_L10N=False, USE_TZ=False)\n./tests/cache/tests.py:    @override_settings(USE_I18N=False, USE_L10N=True, USE_TZ=False)\n./tests/cache/tests.py:    @override_settings(USE_I18N=False, USE_L10N=False, USE_TZ=True)\n./tests/cache/tests.py:    @override_settings(USE_I18N=False, USE_L10N=False)\n./tests/cache/tests.py:    @override_settings(\n./tests/cache/tests.py:    @override_settings(\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:    CACHE_MIDDLEWARE_KEY_PREFIX='settingsprefix',\n./tests/cache/tests.py:            'views.decorators.cache.cache_page.settingsprefix.GET.'\n./tests/cache/tests.py:            'views.decorators.cache.cache_page.settingsprefix.GET.'\n./tests/dispatch/tests.py:from django.test.utils import override_settings\n./tests/dispatch/tests.py:    @override_settings(DEBUG=True)\n./tests/dispatch/tests.py:    @override_settings(DEBUG=True)\n./tests/dbshell/test_mysql.py:    def test_basic_params_specified_in_settings(self):\n./tests/dbshell/test_mysql.py:    def test_options_override_settings_proper_values(self):\n./tests/dbshell/test_mysql.py:        settings_port = 444\n./tests/dbshell/test_mysql.py:        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n./tests/dbshell/test_mysql.py:                'PORT': settings_port,\n./tests/dbshell/test_mysql.py:    def get_command_line_arguments(self, connection_settings):\n./tests/dbshell/test_mysql.py:        return DatabaseClient.settings_to_cmd_args(connection_settings)\n./tests/contenttypes_tests/test_operations.py:from django.conf import settings\n./tests/contenttypes_tests/test_operations.py:from django.test import TransactionTestCase, override_settings\n./tests/contenttypes_tests/test_operations.py:@override_settings(\n./tests/contenttypes_tests/test_operations.py:        settings.MIGRATION_MODULES,\n./tests/contenttypes_tests/test_operations.py:    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n./tests/contenttypes_tests/test_views.py:from django.test import TestCase, override_settings\n./tests/contenttypes_tests/test_views.py:@override_settings(ROOT_URLCONF='contenttypes_tests.urls')\n./tests/contenttypes_tests/test_views.py:@override_settings(ROOT_URLCONF='contenttypes_tests.urls')\n./tests/contenttypes_tests/test_views.py:        with self.settings(SITE_ID=self.site_2.pk):\n./tests/contenttypes_tests/test_views.py:        with self.settings(SITE_ID=self.site_2.pk):\n./tests/contenttypes_tests/test_views.py:        with self.settings(SITE_ID=None, ALLOWED_HOSTS=[self.site_2.domain]):\n./tests/contenttypes_tests/test_views.py:    @override_settings(ALLOWED_HOSTS=['example.com'])\n./tests/contenttypes_tests/test_views.py:        with self.modify_settings(INSTALLED_APPS={'append': 'django.contrib.sites'}):\n./tests/contenttypes_tests/test_views.py:        with self.modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'}):\n./tests/contenttypes_tests/test_management.py:from django.test import TestCase, modify_settings\n./tests/contenttypes_tests/test_management.py:@modify_settings(INSTALLED_APPS={'append': ['no_models']})\n./tests/contenttypes_tests/test_checks.py:from django.test import SimpleTestCase, override_settings\n./tests/contenttypes_tests/test_checks.py:    @override_settings(INSTALLED_APPS=['django.contrib.auth', 'django.contrib.contenttypes', 'contenttypes_tests'])\n./tests/contenttypes_tests/test_checks.py:    @override_settings(TEST_SWAPPED_MODEL='contenttypes_tests.Replacement')\n./tests/contenttypes_tests/test_checks.py:                hint=\"Update the relation to point at 'settings.TEST_SWAPPED_MODEL'.\",\n./tests/contenttypes_tests/test_models.py:from django.test import TestCase, override_settings\n./tests/contenttypes_tests/test_models.py:@override_settings(DATABASE_ROUTERS=[TestRouter()])\n./tests/redirects_tests/tests.py:from django.conf import settings\n./tests/redirects_tests/tests.py:from django.test import TestCase, modify_settings, override_settings\n./tests/redirects_tests/tests.py:@modify_settings(MIDDLEWARE={'append': 'django.contrib.redirects.middleware.RedirectFallbackMiddleware'})\n./tests/redirects_tests/tests.py:@override_settings(APPEND_SLASH=False, ROOT_URLCONF='redirects_tests.urls', SITE_ID=1)\n./tests/redirects_tests/tests.py:        cls.site = Site.objects.get(pk=settings.SITE_ID)\n./tests/redirects_tests/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/redirects_tests/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/redirects_tests/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/redirects_tests/tests.py:    @modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'})\n./tests/redirects_tests/tests.py:@modify_settings(MIDDLEWARE={'append': 'redirects_tests.tests.OverriddenRedirectFallbackMiddleware'})\n./tests/redirects_tests/tests.py:@override_settings(SITE_ID=1)\n./tests/redirects_tests/tests.py:        cls.site = Site.objects.get(pk=settings.SITE_ID)\n./tests/admin_scripts/custom_templates/project_template/project_name/settings.py:# Django settings for {{ project_name }} test project.\n./tests/admin_scripts/tests.py:DJANGO_SETTINGS_MODULE and default settings.py files.\n./tests/admin_scripts/tests.py:from django.conf import settings\n./tests/admin_scripts/tests.py:    LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n./tests/admin_scripts/tests.py:    def write_settings(self, filename, apps=None, is_dir=False, sdict=None, extra=None):\n./tests/admin_scripts/tests.py:            settings_dir = os.path.join(self.test_dir, filename)\n./tests/admin_scripts/tests.py:            os.mkdir(settings_dir)\n./tests/admin_scripts/tests.py:            settings_file_path = os.path.join(settings_dir, '__init__.py')\n./tests/admin_scripts/tests.py:            settings_file_path = os.path.join(self.test_dir, filename)\n./tests/admin_scripts/tests.py:        with open(settings_file_path, 'w') as settings_file:\n./tests/admin_scripts/tests.py:            settings_file.write('# Settings file automatically generated by admin_scripts test case\\n')\n./tests/admin_scripts/tests.py:                settings_file.write(\"%s\\n\" % extra)\n./tests/admin_scripts/tests.py:                if hasattr(settings, s):\n./tests/admin_scripts/tests.py:                    o = getattr(settings, s)\n./tests/admin_scripts/tests.py:                    settings_file.write(\"%s = %s\\n\" % (s, o))\n./tests/admin_scripts/tests.py:            settings_file.write(\"INSTALLED_APPS = %s\\n\" % apps)\n./tests/admin_scripts/tests.py:                    settings_file.write(\"%s = %s\\n\" % (k, v))\n./tests/admin_scripts/tests.py:        for backend in settings.DATABASES.values():\n./tests/admin_scripts/tests.py:    def run_test(self, script, args, settings_file=None, apps=None):\n./tests/admin_scripts/tests.py:        if settings_file:\n./tests/admin_scripts/tests.py:            test_environ['DJANGO_SETTINGS_MODULE'] = settings_file\n./tests/admin_scripts/tests.py:    def run_django_admin(self, args, settings_file=None):\n./tests/admin_scripts/tests.py:        return self.run_test(os.path.join(script_dir, 'django-admin.py'), args, settings_file)\n./tests/admin_scripts/tests.py:    def run_manage(self, args, settings_file=None, manage_py=None):\n./tests/admin_scripts/tests.py:        return self.run_test('./manage.py', args, settings_file)\n./tests/admin_scripts/tests.py:    \"A series of tests for django-admin.py when there is no settings.py file.\"\n./tests/admin_scripts/tests.py:        \"no settings: django-admin builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, 'settings are not configured')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:    def test_commands_with_invalid_settings(self):\n./tests/admin_scripts/tests.py:        Commands that don't require settings succeed if the settings file\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, settings_file='bad_settings')\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for django-admin.py when using a settings.py file that\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py')\n./tests/admin_scripts/tests.py:        \"default: django-admin builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, 'settings are not configured')\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"default: django-admin builtin commands succeed if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"default: django-admin builtin commands succeed if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"default: django-admin builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"default: django-admin builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"default: django-admin can't execute user commands if it isn't provided settings\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No Django settings specified\")\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"default: django-admin can execute user commands if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=test_project.settings']\n./tests/admin_scripts/tests.py:        \"default: django-admin can execute user commands if settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for django-admin.py when using a settings.py file that\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', ['django.contrib.auth', 'django.contrib.contenttypes',\n./tests/admin_scripts/tests.py:        \"fulldefault: django-admin builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, 'settings are not configured')\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"fulldefault: django-admin builtin commands succeed if a settings file is provided\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"fulldefault: django-admin builtin commands succeed if the environment contains settings\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"fulldefault: django-admin can't execute user commands unless settings are provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No Django settings specified\")\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"fulldefault: django-admin can execute user commands if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=test_project.settings']\n./tests/admin_scripts/tests.py:        \"fulldefault: django-admin can execute user commands if settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for django-admin.py when using a settings.py file that\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', apps=['django.contrib.auth', 'django.contrib.contenttypes'])\n./tests/admin_scripts/tests.py:        \"minimal: django-admin builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, 'settings are not configured')\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"minimal: django-admin builtin commands fail if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"minimal: django-admin builtin commands fail if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"minimal: django-admin can't execute user commands unless settings are provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No Django settings specified\")\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"minimal: django-admin can't execute user commands, even if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=test_project.settings']\n./tests/admin_scripts/tests.py:        \"minimal: django-admin can't execute user commands, even if settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for django-admin.py when using a settings file\n./tests/admin_scripts/tests.py:    with a name other than 'settings.py'.\n./tests/admin_scripts/tests.py:        self.write_settings('alternate_settings.py')\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, 'settings are not configured')\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands succeed if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.alternate_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands succeed if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.alternate_settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"alternate: django-admin can't execute user commands unless settings are provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No Django settings specified\")\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: django-admin can execute user commands if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=test_project.alternate_settings']\n./tests/admin_scripts/tests.py:        \"alternate: django-admin can execute user commands if settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.alternate_settings')\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for django-admin.py when multiple settings files\n./tests/admin_scripts/tests.py:    (including the default 'settings.py') are available. The default settings\n./tests/admin_scripts/tests.py:    alternate settings must be used by the running script.\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', apps=['django.contrib.auth', 'django.contrib.contenttypes'])\n./tests/admin_scripts/tests.py:        self.write_settings('alternate_settings.py')\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, 'settings are not configured')\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands succeed if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.alternate_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands succeed if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.alternate_settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"alternate: django-admin can't execute user commands unless settings are provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No Django settings specified\")\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: django-admin can execute user commands if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=test_project.alternate_settings']\n./tests/admin_scripts/tests.py:        \"alternate: django-admin can execute user commands if settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.alternate_settings')\n./tests/admin_scripts/tests.py:    A series of tests for django-admin.py when the settings file is in a\n./tests/admin_scripts/tests.py:        self.write_settings('settings', is_dir=True)\n./tests/admin_scripts/tests.py:        args = ['startapp', 'settings_test']\n./tests/admin_scripts/tests.py:        app_path = os.path.join(self.test_dir, 'settings_test')\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:            self.assertIn(\"name = 'settings_test'\", content)\n./tests/admin_scripts/tests.py:        args = ['startapp', '--template', template_path, 'custom_settings_test']\n./tests/admin_scripts/tests.py:        app_path = os.path.join(self.test_dir, 'custom_settings_test')\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:        \"directory: django-admin builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, 'settings are not configured')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"directory: django-admin builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"directory: django-admin builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"directory: django-admin can't execute user commands unless settings are provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No Django settings specified\")\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"directory: django-admin builtin commands succeed if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"directory: django-admin builtin commands succeed if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    \"A series of tests for manage.py when there is no settings.py file.\"\n./tests/admin_scripts/tests.py:        \"no settings: manage.py builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, r\"No module named '?(test_project\\.)?settings'?\", regex=True)\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for manage.py when using a settings.py file that\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py')\n./tests/admin_scripts/tests.py:        \"default: manage.py builtin commands succeed when default settings are appropriate\"\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"default: manage.py builtin commands succeed if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"default: manage.py builtin commands succeed if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"default: manage.py builtin commands succeed if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"default: manage.py builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"default: manage.py can execute user commands when default settings are appropriate\"\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"default: manage.py can execute user commands when settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=test_project.settings']\n./tests/admin_scripts/tests.py:        \"default: manage.py can execute user commands when settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for manage.py when using a settings.py file that\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', ['django.contrib.auth', 'django.contrib.contenttypes', 'admin_scripts'])\n./tests/admin_scripts/tests.py:        \"fulldefault: manage.py builtin commands succeed when default settings are appropriate\"\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"fulldefault: manage.py builtin commands succeed if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"fulldefault: manage.py builtin commands succeed if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"fulldefault: manage.py can execute user commands when default settings are appropriate\"\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"fulldefault: manage.py can execute user commands when settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=test_project.settings']\n./tests/admin_scripts/tests.py:        \"fulldefault: manage.py can execute user commands when settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for manage.py when using a settings.py file that\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', apps=['django.contrib.auth', 'django.contrib.contenttypes'])\n./tests/admin_scripts/tests.py:        \"minimal: manage.py builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"minimal: manage.py builtin commands fail if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"minimal: manage.py builtin commands fail if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"minimal: manage.py can't execute user commands without appropriate settings\"\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"minimal: manage.py can't execute user commands, even if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=test_project.settings']\n./tests/admin_scripts/tests.py:        \"minimal: manage.py can't execute user commands, even if settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for manage.py when using a settings file\n./tests/admin_scripts/tests.py:    with a name other than 'settings.py'.\n./tests/admin_scripts/tests.py:        self.write_settings('alternate_settings.py')\n./tests/admin_scripts/tests.py:        \"alternate: manage.py builtin commands fail with an error when no default settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, r\"No module named '?(test_project\\.)?settings'?\", regex=True)\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: manage.py builtin commands work with settings provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=alternate_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"alternate: manage.py builtin commands work if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'alternate_settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"alternate: manage.py can't execute user commands without settings\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, r\"No module named '?(test_project\\.)?settings'?\", regex=True)\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: manage.py can execute user commands if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=alternate_settings']\n./tests/admin_scripts/tests.py:            \"('no_color', False), ('pythonpath', None), ('settings', \"\n./tests/admin_scripts/tests.py:            \"'alternate_settings'), ('traceback', False), ('verbosity', 1)]\"\n./tests/admin_scripts/tests.py:        \"alternate: manage.py can execute user commands if settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'alternate_settings')\n./tests/admin_scripts/tests.py:            \"('no_color', False), ('pythonpath', None), ('settings', None), \"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--no-color', '--settings=alternate_settings']\n./tests/admin_scripts/tests.py:            \"('no_color', True), ('pythonpath', None), ('settings', \"\n./tests/admin_scripts/tests.py:            \"'alternate_settings'), ('traceback', False), ('verbosity', 1)]\"\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for manage.py when multiple settings files\n./tests/admin_scripts/tests.py:    (including the default 'settings.py') are available. The default settings\n./tests/admin_scripts/tests.py:    alternate settings must be used by the running script.\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', apps=['django.contrib.auth', 'django.contrib.contenttypes'])\n./tests/admin_scripts/tests.py:        self.write_settings('alternate_settings.py')\n./tests/admin_scripts/tests.py:        \"multiple: manage.py builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"multiple: manage.py builtin commands succeed if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=alternate_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"multiple: manage.py can execute builtin commands if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'alternate_settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"multiple: manage.py can't execute user commands using default settings\"\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"multiple: manage.py can execute user commands if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=alternate_settings']\n./tests/admin_scripts/tests.py:        \"multiple: manage.py can execute user commands if settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'alternate_settings')\n./tests/admin_scripts/tests.py:    Tests for manage.py when using the default settings.py file containing\n./tests/admin_scripts/tests.py:    def write_settings_with_import_error(self, filename):\n./tests/admin_scripts/tests.py:        settings_file_path = os.path.join(self.test_dir, filename)\n./tests/admin_scripts/tests.py:        with open(settings_file_path, 'w') as settings_file:\n./tests/admin_scripts/tests.py:            settings_file.write('# Settings file automatically generated by admin_scripts test case\\n')\n./tests/admin_scripts/tests.py:            settings_file.write('# The next line will cause an import error:\\nimport foo42bar\\n')\n./tests/admin_scripts/tests.py:        when settings with import errors is provided (#14130).\n./tests/admin_scripts/tests.py:        self.write_settings_with_import_error('settings.py')\n./tests/admin_scripts/tests.py:        settings (#18845).\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', sdict={'BAD_VAR': 'INSTALLED_APPS.crash'})\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', sdict={'BAD_VAR': 'DATABASES[\"blah\"]'})\n./tests/admin_scripts/tests.py:        self.write_settings(\n./tests/admin_scripts/tests.py:            'settings.py',\n./tests/admin_scripts/tests.py:        self.write_settings(\n./tests/admin_scripts/tests.py:            'settings.py',\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', apps=['admin_scripts.broken_app'])\n./tests/admin_scripts/tests.py:        self.write_settings(\n./tests/admin_scripts/tests.py:            'settings.py',\n./tests/admin_scripts/tests.py:        self.write_settings(\n./tests/admin_scripts/tests.py:            'settings.py',\n./tests/admin_scripts/tests.py:        self.write_settings(\n./tests/admin_scripts/tests.py:            'settings.py',\n./tests/admin_scripts/tests.py:        self.write_settings(\n./tests/admin_scripts/tests.py:            'settings.py',\n./tests/admin_scripts/tests.py:    @override_settings(INSTALLED_APPS=[\"admin_scripts.app_waiting_migration\"])\n./tests/admin_scripts/tests.py:    @override_settings(\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', sdict={\n./tests/admin_scripts/tests.py:        self.assertOutput(err, 'CommandError: You must set settings.ALLOWED_HOSTS if DEBUG is False.')\n./tests/admin_scripts/tests.py:            stdout=out, settings=None, pythonpath=None, verbosity=1,\n./tests/admin_scripts/tests.py:            settings=None,\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py')\n./tests/admin_scripts/tests.py:            \"('pythonpath', None), ('settings', None), ('traceback', False), \"\n./tests/admin_scripts/tests.py:            \"('no_color', False), ('pythonpath', None), ('settings', None), \"\n./tests/admin_scripts/tests.py:            \"('pythonpath', None), ('settings', None), ('traceback', False), \"\n./tests/admin_scripts/tests.py:            \"('pythonpath', None), ('settings', None), ('traceback', False), \"\n./tests/admin_scripts/tests.py:            \"('pythonpath', None), ('settings', None), ('traceback', False), \"\n./tests/admin_scripts/tests.py:            \"False), ('no_color', False), ('pythonpath', None), ('settings', \"\n./tests/admin_scripts/tests.py:            \"('settings', None), ('traceback', False), ('verbosity', 1)]\"\n./tests/admin_scripts/tests.py:            \"('settings', None), ('traceback', False), ('verbosity', 1)]\"\n./tests/admin_scripts/tests.py:        with self.settings(INSTALLED_APPS=['admin_scripts.complex_app',\n./tests/admin_scripts/tests.py:        with self.settings(INSTALLED_APPS=['admin_scripts.simple_app',\n./tests/admin_scripts/tests.py:    (--settings, --traceback and --pythonpath) are parsed using a basic parser,\n./tests/admin_scripts/tests.py:    ignoring any unknown options. Then the full settings are\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', apps=['django.contrib.auth', 'django.contrib.contenttypes'])\n./tests/admin_scripts/tests.py:        self.write_settings('alternate_settings.py')\n./tests/admin_scripts/tests.py:        \"\"\" Options passed after settings are correctly handled. \"\"\"\n./tests/admin_scripts/tests.py:        args = ['base_command', 'testlabel', '--settings=alternate_settings', '--option_a=x']\n./tests/admin_scripts/tests.py:        \"\"\" Short options passed after settings are correctly handled. \"\"\"\n./tests/admin_scripts/tests.py:        args = ['base_command', 'testlabel', '--settings=alternate_settings', '-a', 'x']\n./tests/admin_scripts/tests.py:        \"\"\" Options passed before settings are correctly handled. \"\"\"\n./tests/admin_scripts/tests.py:        args = ['base_command', 'testlabel', '--option_a=x', '--settings=alternate_settings']\n./tests/admin_scripts/tests.py:        \"\"\" Short options passed before settings are correctly handled. \"\"\"\n./tests/admin_scripts/tests.py:        args = ['base_command', 'testlabel', '-a', 'x', '--settings=alternate_settings']\n./tests/admin_scripts/tests.py:        args = ['base_command', 'testlabel', '--option_a=x', '--settings=alternate_settings', '--option_b=y']\n./tests/admin_scripts/tests.py:            \"('settings', 'alternate_settings'), ('traceback', False), \"\n./tests/admin_scripts/tests.py:@override_settings(ROOT_URLCONF='admin_scripts.urls')\n./tests/admin_scripts/tests.py:        # We're using a custom command so we need the alternate settings\n./tests/admin_scripts/tests.py:        self.write_settings('alternate_settings.py')\n./tests/admin_scripts/tests.py:            '--settings=alternate_settings',\n./tests/admin_scripts/tests.py:    \"\"\"Tests for diffsettings management command.\"\"\"\n./tests/admin_scripts/tests.py:        \"\"\"Runs without error and emits settings diff.\"\"\"\n./tests/admin_scripts/tests.py:        self.write_settings('settings_to_diff.py', sdict={'FOO': '\"bar\"'})\n./tests/admin_scripts/tests.py:        args = ['diffsettings', '--settings=settings_to_diff']\n./tests/admin_scripts/tests.py:    def test_settings_configured(self):\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(['diffsettings'], manage_py='configured_settings_manage.py')\n./tests/admin_scripts/tests.py:        self.assertNotInOutput(out, 'default_settings = ')\n./tests/admin_scripts/tests.py:    def test_dynamic_settings_configured(self):\n./tests/admin_scripts/tests.py:        # Custom default settings appear.\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(['diffsettings'], manage_py='configured_dynamic_settings_manage.py')\n./tests/admin_scripts/tests.py:        \"\"\"The all option also shows settings with the default value.\"\"\"\n./tests/admin_scripts/tests.py:        self.write_settings('settings_to_diff.py', sdict={'STATIC_URL': 'None'})\n./tests/admin_scripts/tests.py:        args = ['diffsettings', '--settings=settings_to_diff', '--all']\n./tests/admin_scripts/tests.py:        The --default option specifies an alternate settings module for\n./tests/admin_scripts/tests.py:        self.write_settings('settings_default.py', sdict={'FOO': '\"foo\"', 'BAR': '\"bar1\"'})\n./tests/admin_scripts/tests.py:        self.write_settings('settings_to_diff.py', sdict={'FOO': '\"foo\"', 'BAR': '\"bar2\"'})\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(['diffsettings', '--settings=settings_to_diff', '--default=settings_default'])\n./tests/admin_scripts/tests.py:        \"\"\"--output=unified emits settings diff in unified mode.\"\"\"\n./tests/admin_scripts/tests.py:        self.write_settings('settings_to_diff.py', sdict={'FOO': '\"bar\"'})\n./tests/admin_scripts/tests.py:        args = ['diffsettings', '--settings=settings_to_diff', '--output=unified']\n./tests/admin_scripts/tests.py:        --output=unified --all emits settings diff in unified mode and includes\n./tests/admin_scripts/tests.py:        settings with the default value.\n./tests/admin_scripts/tests.py:        self.write_settings('settings_to_diff.py', sdict={'FOO': '\"bar\"'})\n./tests/admin_scripts/tests.py:        args = ['diffsettings', '--settings=settings_to_diff', '--output=unified', '--all']\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py')\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py')\n./tests/admin_scripts/tests.py:        args = ['rnserver', '--settings=test_project.settings']\n./tests/admin_scripts/tests.py:        args = ['abcdef', '--settings=test_project.settings']\n./tests/admin_scripts/configured_dynamic_settings_manage.py:from django.conf import global_settings, settings\n./tests/admin_scripts/configured_dynamic_settings_manage.py:        return getattr(global_settings, name)\n./tests/admin_scripts/configured_dynamic_settings_manage.py:        return super().__dir__() + dir(global_settings) + ['FOO']\n./tests/admin_scripts/configured_dynamic_settings_manage.py:    settings.configure(Settings())\n./tests/admin_scripts/configured_settings_manage.py:from django.conf import settings\n./tests/admin_scripts/configured_settings_manage.py:    settings.configure(DEBUG=True, CUSTOM=1)\n./tests/logging_tests/logconfig.py:from django.conf import settings\n./tests/logging_tests/logconfig.py:        self.config = settings.LOGGING\n./tests/logging_tests/tests.py:from django.conf import settings\n./tests/logging_tests/tests.py:from django.test import RequestFactory, SimpleTestCase, override_settings\n./tests/logging_tests/tests.py:        with self.settings(DEBUG=True):\n./tests/logging_tests/tests.py:        with self.settings(DEBUG=False):\n./tests/logging_tests/tests.py:        with self.settings(DEBUG=True):\n./tests/logging_tests/tests.py:        with self.settings(DEBUG=False):\n./tests/logging_tests/tests.py:        cls._logging = settings.LOGGING\n./tests/logging_tests/tests.py:        with self.settings(DEBUG=True):\n./tests/logging_tests/tests.py:    @override_settings(DEBUG=True)\n./tests/logging_tests/tests.py:    @override_settings(DEBUG=True)\n./tests/logging_tests/tests.py:    @override_settings(DEBUG=True)\n./tests/logging_tests/tests.py:@override_settings(DEBUG=True, ROOT_URLCONF='logging_tests.urls')\n./tests/logging_tests/tests.py:@override_settings(\n./tests/logging_tests/tests.py:    @override_settings(\n./tests/logging_tests/tests.py:    @override_settings(\n./tests/logging_tests/tests.py:    @override_settings(\n./tests/logging_tests/tests.py:    @override_settings(\n./tests/logging_tests/tests.py:    @override_settings(\n./tests/logging_tests/tests.py:    @override_settings(\n./tests/logging_tests/tests.py:    @override_settings(ALLOWED_HOSTS='example.com')\n./tests/logging_tests/tests.py:    Accessing settings in a custom logging handler does not trigger\n./tests/logging_tests/tests.py:        self.write_settings('settings.py', sdict={'LOGGING': log_config})\n./tests/logging_tests/tests.py:        # validate is just an example command to trigger settings configuration\n./tests/logging_tests/tests.py:    @override_settings(\n./tests/logging_tests/tests.py:@override_settings(DEBUG=True, ROOT_URLCONF='logging_tests.urls')\n./tests/logging_tests/tests.py:    @override_settings(\n./tests/logging_tests/tests.py:        self.write_settings('settings.py', sdict={\n./tests/sessions_tests/tests.py:from django.conf import settings\n./tests/sessions_tests/tests.py:    RequestFactory, TestCase, ignore_warnings, override_settings,\n./tests/sessions_tests/tests.py:        # A normal session has a max age equal to settings\n./tests/sessions_tests/tests.py:        self.assertEqual(self.session.get_expiry_age(), settings.SESSION_COOKIE_AGE)\n./tests/sessions_tests/tests.py:        self.assertEqual(self.session.get_expiry_age(), settings.SESSION_COOKIE_AGE)\n./tests/sessions_tests/tests.py:        self.assertEqual(self.session.get_expiry_age(), settings.SESSION_COOKIE_AGE)\n./tests/sessions_tests/tests.py:        # Tests get_expire_at_browser_close with different settings and different\n./tests/sessions_tests/tests.py:        with override_settings(SESSION_EXPIRE_AT_BROWSER_CLOSE=False):\n./tests/sessions_tests/tests.py:        with override_settings(SESSION_EXPIRE_AT_BROWSER_CLOSE=True):\n./tests/sessions_tests/tests.py:        with override_settings(SESSION_SERIALIZER='django.contrib.sessions.serializers.PickleSerializer'):\n./tests/sessions_tests/tests.py:            self.session = self.backend()  # reinitialize after overriding settings\n./tests/sessions_tests/tests.py:        with override_settings(SESSION_ENGINE=self.session_engine):\n./tests/sessions_tests/tests.py:@override_settings(USE_TZ=True)\n./tests/sessions_tests/tests.py:    @override_settings(SESSION_CACHE_ALIAS='sessions')\n./tests/sessions_tests/tests.py:@override_settings(USE_TZ=True)\n./tests/sessions_tests/tests.py:        self.original_session_file_path = settings.SESSION_FILE_PATH\n./tests/sessions_tests/tests.py:        self.temp_session_store = settings.SESSION_FILE_PATH = tempfile.mkdtemp()\n./tests/sessions_tests/tests.py:        settings.SESSION_FILE_PATH = self.original_session_file_path\n./tests/sessions_tests/tests.py:    @override_settings(\n./tests/sessions_tests/tests.py:    @override_settings(\n./tests/sessions_tests/tests.py:        file_prefix = settings.SESSION_COOKIE_NAME\n./tests/sessions_tests/tests.py:    @override_settings(CACHES={\n./tests/sessions_tests/tests.py:        # Re-initialize the session backend to make use of overridden settings.\n./tests/sessions_tests/tests.py:    @override_settings(SESSION_COOKIE_SECURE=True)\n./tests/sessions_tests/tests.py:        self.assertIs(response.cookies[settings.SESSION_COOKIE_NAME]['secure'], True)\n./tests/sessions_tests/tests.py:    @override_settings(SESSION_COOKIE_HTTPONLY=True)\n./tests/sessions_tests/tests.py:        self.assertIs(response.cookies[settings.SESSION_COOKIE_NAME]['httponly'], True)\n./tests/sessions_tests/tests.py:            str(response.cookies[settings.SESSION_COOKIE_NAME])\n./tests/sessions_tests/tests.py:    @override_settings(SESSION_COOKIE_SAMESITE='Strict')\n./tests/sessions_tests/tests.py:        self.assertEqual(response.cookies[settings.SESSION_COOKIE_NAME]['samesite'], 'Strict')\n./tests/sessions_tests/tests.py:    @override_settings(SESSION_COOKIE_HTTPONLY=False)\n./tests/sessions_tests/tests.py:        self.assertEqual(response.cookies[settings.SESSION_COOKIE_NAME]['httponly'], '')\n./tests/sessions_tests/tests.py:            str(response.cookies[settings.SESSION_COOKIE_NAME])\n./tests/sessions_tests/tests.py:        request.COOKIES[settings.SESSION_COOKIE_NAME] = 'abc'\n./tests/sessions_tests/tests.py:                settings.SESSION_COOKIE_NAME,\n./tests/sessions_tests/tests.py:            str(response.cookies[settings.SESSION_COOKIE_NAME])\n./tests/sessions_tests/tests.py:    @override_settings(SESSION_COOKIE_DOMAIN='.example.local', SESSION_COOKIE_PATH='/example/')\n./tests/sessions_tests/tests.py:        request.COOKIES[settings.SESSION_COOKIE_NAME] = 'abc'\n./tests/sessions_tests/tests.py:                settings.SESSION_COOKIE_NAME,\n./tests/sessions_tests/tests.py:            str(response.cookies[settings.SESSION_COOKIE_NAME])\n./tests/asgi/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/asgi/tests.py:@override_settings(ROOT_URLCONF='asgi.urls')\n./tests/absolute_url_overrides/tests.py:        with self.settings(\n./tests/absolute_url_overrides/tests.py:        with self.settings(\n./tests/model_options/test_tablespaces.py:from django.conf import settings\n./tests/model_options/test_tablespaces.py:# We can't test the DEFAULT_TABLESPACE and DEFAULT_INDEX_TABLESPACE settings\n./tests/model_options/test_tablespaces.py:# @override_settings doesn't work, and the tests depend\n./tests/model_options/test_tablespaces.py:        if settings.DEFAULT_INDEX_TABLESPACE:\n./tests/model_options/test_tablespaces.py:            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 1)\n./tests/model_options/test_tablespaces.py:        if settings.DEFAULT_INDEX_TABLESPACE:\n./tests/model_options/test_tablespaces.py:            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 2)\n./tests/model_options/test_tablespaces.py:        if settings.DEFAULT_INDEX_TABLESPACE:\n./tests/model_options/test_tablespaces.py:            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 1)\n./tests/model_options/test_tablespaces.py:        if settings.DEFAULT_INDEX_TABLESPACE:\n./tests/model_options/test_tablespaces.py:            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 2)\n./tests/model_options/test_tablespaces.py:        if settings.DEFAULT_INDEX_TABLESPACE:\n./tests/model_options/test_tablespaces.py:            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 1)\n./tests/defer_regress/tests.py:from django.test import TestCase, override_settings\n./tests/defer_regress/tests.py:    @override_settings(SESSION_SERIALIZER='django.contrib.sessions.serializers.PickleSerializer')\n./tests/admin_checks/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/admin_checks/tests.py:@override_settings(\n./tests/admin_checks/tests.py:    @override_settings(INSTALLED_APPS=['django.contrib.admin'])\n./tests/admin_checks/tests.py:    @override_settings(TEMPLATES=[])\n./tests/admin_checks/tests.py:    @override_settings(\n./tests/admin_checks/tests.py:        with self.settings(AUTHENTICATION_BACKENDS=[]):\n./tests/admin_checks/tests.py:    @override_settings(\n./tests/admin_checks/tests.py:    @override_settings(\n./tests/admin_checks/tests.py:    @override_settings(MIDDLEWARE=[])\n./tests/admin_checks/tests.py:    @override_settings(MIDDLEWARE=[\n./tests/admin_checks/tests.py:    @override_settings(MIDDLEWARE=[\n./tests/admin_inlines/tests.py:from django.test import RequestFactory, TestCase, override_settings\n./tests/admin_inlines/tests.py:@override_settings(ROOT_URLCONF='admin_inlines.urls')\n./tests/admin_inlines/tests.py:    @override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True)\n./tests/admin_inlines/tests.py:@override_settings(ROOT_URLCONF='admin_inlines.urls')\n./tests/admin_inlines/tests.py:@override_settings(ROOT_URLCONF='admin_inlines.urls')\n./tests/admin_inlines/tests.py:@override_settings(ROOT_URLCONF='admin_inlines.urls')\n./tests/admin_inlines/tests.py:@override_settings(ROOT_URLCONF='admin_inlines.urls')\n./tests/admin_inlines/tests.py:@override_settings(ROOT_URLCONF='admin_inlines.urls')\n./tests/shortcuts/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/shortcuts/tests.py:@override_settings(ROOT_URLCONF='shortcuts.urls')\n./tests/field_deconstruction/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/field_deconstruction/tests.py:        with self.settings(DEFAULT_DB_TABLESPACE='foo'):\n./tests/field_deconstruction/tests.py:        with self.settings(DEFAULT_DB_TABLESPACE='foo'):\n./tests/field_deconstruction/tests.py:    @override_settings(AUTH_USER_MODEL=\"auth.Permission\")\n./tests/field_deconstruction/tests.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/field_deconstruction/tests.py:    @override_settings(AUTH_USER_MODEL=\"auth.Permission\")\n./tests/field_deconstruction/tests.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/user_commands/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/user_commands/tests.py:@override_settings(\n./tests/user_commands/tests.py:            with self.settings(INSTALLED_APPS=['commandegg']):\n./tests/user_commands/tests.py:            'option3, pythonpath, settings, skip_checks, stderr, stdout, '\n./tests/user_commands/tests.py:            'opt_3, option3, pythonpath, settings, skip_checks, stderr, '\n./tests/user_commands/tests.py:                'pythonpath, settings, skip_checks, stderr, stdout, '\n./tests/user_commands/tests.py:        self.write_settings('settings.py', apps=['user_commands'], sdict={\n./tests/user_commands/tests.py:        self.write_settings('settings.py', apps=['user_commands'])\n./tests/user_commands/tests.py:        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n./tests/test_client/tests.py:    Client, RequestFactory, SimpleTestCase, TestCase, override_settings,\n./tests/test_client/tests.py:@override_settings(ROOT_URLCONF='test_client.urls')\n./tests/test_client/tests.py:    @override_settings(\n./tests/test_client/tests.py:        with self.settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.AllowAllUsersModelBackend']):\n./tests/test_client/tests.py:    @override_settings(\n./tests/test_client/tests.py:    @override_settings(\n./tests/test_client/tests.py:    @override_settings(\n./tests/test_client/tests.py:    @override_settings(AUTHENTICATION_BACKENDS=[\n./tests/test_client/tests.py:    @override_settings(SESSION_ENGINE=\"django.contrib.sessions.backends.signed_cookies\")\n./tests/test_client/tests.py:    @override_settings(\n./tests/test_client/tests.py:    @override_settings(\n./tests/test_client/tests.py:@override_settings(\n./tests/test_client/tests.py:@override_settings(ROOT_URLCONF='test_client.urls')\n./tests/test_sqlite.py:# This is an example test settings file for use with the Django test suite.\n./tests/test_sqlite.py:# database backends as possible.  You may want to create a separate settings\n./tests/flatpages_tests/test_forms.py:from django.conf import settings\n./tests/flatpages_tests/test_forms.py:from django.test import TestCase, modify_settings, override_settings\n./tests/flatpages_tests/test_forms.py:@modify_settings(INSTALLED_APPS={'append': ['django.contrib.flatpages']})\n./tests/flatpages_tests/test_forms.py:@override_settings(SITE_ID=1)\n./tests/flatpages_tests/test_forms.py:            'sites': [settings.SITE_ID],\n./tests/flatpages_tests/test_forms.py:    @override_settings(APPEND_SLASH=True, MIDDLEWARE=['django.middleware.common.CommonMiddleware'])\n./tests/flatpages_tests/test_forms.py:    @override_settings(APPEND_SLASH=False, MIDDLEWARE=['django.middleware.common.CommonMiddleware'])\n./tests/flatpages_tests/test_forms.py:        existing.sites.add(settings.SITE_ID)\n./tests/flatpages_tests/test_views.py:from django.conf import settings\n./tests/flatpages_tests/test_views.py:from django.test import TestCase, modify_settings, override_settings\n./tests/flatpages_tests/test_views.py:from .settings import FLATPAGES_TEMPLATES\n./tests/flatpages_tests/test_views.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.flatpages'})\n./tests/flatpages_tests/test_views.py:@override_settings(\n./tests/flatpages_tests/test_views.py:        fp.sites.add(settings.SITE_ID)\n./tests/flatpages_tests/test_views.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.flatpages'})\n./tests/flatpages_tests/test_views.py:@override_settings(\n./tests/flatpages_tests/test_views.py:        fp.sites.add(settings.SITE_ID)\n./tests/flatpages_tests/test_middleware.py:from django.conf import settings\n./tests/flatpages_tests/test_middleware.py:from django.test import TestCase, modify_settings, override_settings\n./tests/flatpages_tests/test_middleware.py:from .settings import FLATPAGES_TEMPLATES\n./tests/flatpages_tests/test_middleware.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.flatpages'})\n./tests/flatpages_tests/test_middleware.py:@override_settings(\n./tests/flatpages_tests/test_middleware.py:        fp.sites.add(settings.SITE_ID)\n./tests/flatpages_tests/test_middleware.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.flatpages'})\n./tests/flatpages_tests/test_middleware.py:@override_settings(\n./tests/flatpages_tests/test_middleware.py:        fp.sites.add(settings.SITE_ID)\n./tests/flatpages_tests/test_middleware.py:        fp.sites.add(settings.SITE_ID)\n./tests/flatpages_tests/test_sitemaps.py:from django.test.utils import modify_settings, override_settings\n./tests/flatpages_tests/test_sitemaps.py:@override_settings(\n./tests/flatpages_tests/test_sitemaps.py:@modify_settings(\n./tests/flatpages_tests/test_csrf.py:from django.test import Client, TestCase, modify_settings, override_settings\n./tests/flatpages_tests/test_csrf.py:from .settings import FLATPAGES_TEMPLATES\n./tests/flatpages_tests/test_csrf.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.flatpages'})\n./tests/flatpages_tests/test_csrf.py:@override_settings(\n./tests/utils_tests/test_module_loading.py:from django.test import SimpleTestCase, modify_settings\n./tests/utils_tests/test_module_loading.py:@modify_settings(INSTALLED_APPS={'append': 'utils_tests.test_module'})\n./tests/utils_tests/test_timezone.py:from django.test import SimpleTestCase, ignore_warnings, override_settings\n./tests/utils_tests/test_timezone.py:        with override_settings(USE_TZ=True):\n./tests/utils_tests/test_timezone.py:        with override_settings(USE_TZ=False):\n./tests/utils_tests/test_timezone.py:        with override_settings(USE_TZ=True, TIME_ZONE='UTC'):\n./tests/utils_tests/test_dateformat.py:from django.test import SimpleTestCase, override_settings\n./tests/utils_tests/test_dateformat.py:@override_settings(TIME_ZONE='Europe/Copenhagen')\n./tests/utils_tests/test_feedgenerator.py:            with self.settings(USE_TZ=use_tz):\n./tests/utils_tests/test_numberformat.py:        with self.settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=True):\n./tests/utils_tests/test_numberformat.py:        with self.settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=False):\n./tests/admin_default_site/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/admin_default_site/tests.py:@override_settings(INSTALLED_APPS=[\n./tests/mail/test_sendtestemail.py:from django.test import SimpleTestCase, override_settings\n./tests/mail/test_sendtestemail.py:@override_settings(\n./tests/mail/test_sendtestemail.py:        settings.MANAGERS.\n./tests/mail/test_sendtestemail.py:        settings.ADMIN.\n./tests/mail/test_sendtestemail.py:        settings.MANAGERS and settings.ADMINS.\n./tests/mail/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/mail/tests.py:    @override_settings(\n./tests/mail/tests.py:    @override_settings(EMAIL_USE_LOCALTIME=False, USE_TZ=True, TIME_ZONE='Africa/Algiers')\n./tests/mail/tests.py:    @override_settings(EMAIL_USE_LOCALTIME=True, USE_TZ=True, TIME_ZONE='Africa/Algiers')\n./tests/mail/tests.py:        self.settings_override = override_settings(EMAIL_BACKEND=self.email_backend)\n./tests/mail/tests.py:        self.settings_override.enable()\n./tests/mail/tests.py:        self.settings_override.disable()\n./tests/mail/tests.py:    @override_settings(MANAGERS=[('nobody', 'nobody@example.com')])\n./tests/mail/tests.py:    @override_settings(ADMINS=[('nobody', 'nobody@example.com')])\n./tests/mail/tests.py:    @override_settings(\n./tests/mail/tests.py:    @override_settings(ADMINS=[], MANAGERS=[])\n./tests/mail/tests.py:                with self.subTest(setting=setting, value=value), self.settings(**{setting: value}):\n./tests/mail/tests.py:        self._settings_override = override_settings(EMAIL_FILE_PATH=self.tmp_dir)\n./tests/mail/tests.py:        self._settings_override.enable()\n./tests/mail/tests.py:        self._settings_override.disable()\n./tests/mail/tests.py:        cls._settings_override = override_settings(\n./tests/mail/tests.py:        cls._settings_override.enable()\n./tests/mail/tests.py:        cls._settings_override.disable()\n./tests/mail/tests.py:    @override_settings(\n./tests/mail/tests.py:    def test_email_authentication_use_settings(self):\n./tests/mail/tests.py:    @override_settings(\n./tests/mail/tests.py:    def test_email_authentication_override_settings(self):\n./tests/mail/tests.py:    @override_settings(\n./tests/mail/tests.py:    @override_settings(EMAIL_USE_TLS=True)\n./tests/mail/tests.py:    def test_email_tls_use_settings(self):\n./tests/mail/tests.py:    @override_settings(EMAIL_USE_TLS=True)\n./tests/mail/tests.py:    def test_email_tls_override_settings(self):\n./tests/mail/tests.py:            'one of those settings to True.'\n./tests/mail/tests.py:    @override_settings(EMAIL_USE_SSL=True)\n./tests/mail/tests.py:    def test_email_ssl_use_settings(self):\n./tests/mail/tests.py:    @override_settings(EMAIL_USE_SSL=True)\n./tests/mail/tests.py:    def test_email_ssl_override_settings(self):\n./tests/mail/tests.py:    @override_settings(EMAIL_SSL_CERTFILE='foo')\n./tests/mail/tests.py:    def test_email_ssl_certfile_use_settings(self):\n./tests/mail/tests.py:    @override_settings(EMAIL_SSL_CERTFILE='foo')\n./tests/mail/tests.py:    def test_email_ssl_certfile_override_settings(self):\n./tests/mail/tests.py:    @override_settings(EMAIL_SSL_KEYFILE='foo')\n./tests/mail/tests.py:    def test_email_ssl_keyfile_use_settings(self):\n./tests/mail/tests.py:    @override_settings(EMAIL_SSL_KEYFILE='foo')\n./tests/mail/tests.py:    def test_email_ssl_keyfile_override_settings(self):\n./tests/mail/tests.py:    @override_settings(EMAIL_USE_TLS=True)\n./tests/mail/tests.py:    @override_settings(EMAIL_USE_SSL=True)\n./tests/mail/tests.py:    @override_settings(EMAIL_TIMEOUT=10)\n./tests/mail/tests.py:    def test_email_timeout_override_settings(self):\n./tests/file_uploads/tests.py:from django.test import SimpleTestCase, TestCase, client, override_settings\n./tests/file_uploads/tests.py:@override_settings(MEDIA_ROOT=MEDIA_ROOT, ROOT_URLCONF='file_uploads.urls', MIDDLEWARE=[])\n./tests/file_uploads/tests.py:@override_settings(MEDIA_ROOT=MEDIA_ROOT)\n./tests/middleware_exceptions/tests.py:from django.conf import settings\n./tests/middleware_exceptions/tests.py:from django.test import RequestFactory, SimpleTestCase, override_settings\n./tests/middleware_exceptions/tests.py:@override_settings(ROOT_URLCONF='middleware_exceptions.urls')\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.ProcessViewNoneMiddleware'])\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.ProcessViewMiddleware'])\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=[\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=[\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.TemplateResponseMiddleware'])\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.NoTemplateResponseMiddleware'])\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.LogMiddleware'])\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.ProcessExceptionMiddleware'])\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=[\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=[\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.ProcessExceptionMiddleware'])\n./tests/middleware_exceptions/tests.py:@override_settings(ROOT_URLCONF='middleware_exceptions.urls')\n./tests/middleware_exceptions/tests.py:    @override_settings(ROOT_URLCONF=None)\n./tests/middleware_exceptions/tests.py:        # Removing ROOT_URLCONF is safe, as override_settings will restore\n./tests/middleware_exceptions/tests.py:        # the previously defined settings.\n./tests/middleware_exceptions/tests.py:        del settings.ROOT_URLCONF\n./tests/middleware_exceptions/tests.py:@override_settings(\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.tests.MyMiddleware'])\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.tests.MyMiddlewareWithExceptionMessage'])\n./tests/middleware_exceptions/tests.py:    @override_settings(DEBUG=False)\n./tests/template_loader/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/template_loader/tests.py:@override_settings(TEMPLATES=[{\n./tests/i18n/test_extraction.py:from django.test import SimpleTestCase, override_settings\n./tests/i18n/test_extraction.py:    @override_settings(USE_I18N=False)\n./tests/i18n/test_extraction.py:        with override_settings(STATIC_ROOT=os.path.join(self.test_dir, 'static/'),\n./tests/i18n/test_extraction.py:    @override_settings(STATIC_ROOT=None, MEDIA_ROOT='')\n./tests/i18n/test_extraction.py:    def test_default_root_settings(self):\n./tests/i18n/test_extraction.py:        with override_settings(STATIC_ROOT=os.path.join(self.test_dir, 'static/'),\n./tests/i18n/test_extraction.py:        with override_settings(LOCALE_PATHS=[os.path.join(self.test_dir, 'project_locale')]):\n./tests/i18n/test_extraction.py:    def test_makemessages_no_settings(self):\n./tests/i18n/test_percents.py:from django.test import SimpleTestCase, override_settings\n./tests/i18n/test_percents.py:@override_settings(LOCALE_PATHS=[SAMPLEPROJECT_LOCALE])\n./tests/i18n/sampleproject/manage.py:    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"sampleproject.settings\")\n./tests/i18n/patterns/tests.py:from django.conf import settings\n./tests/i18n/patterns/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/i18n/patterns/tests.py:@override_settings(\n./tests/i18n/patterns/tests.py:            self.assertEqual(reverse('prefixed'), '/%s/prefixed/' % settings.LANGUAGE_CODE)\n./tests/i18n/patterns/tests.py:    @override_settings(ROOT_URLCONF='i18n.patterns.urls.wrong')\n./tests/i18n/patterns/tests.py:@override_settings(ROOT_URLCONF='i18n.patterns.urls.disabled')\n./tests/i18n/patterns/tests.py:    @override_settings(USE_I18N=False)\n./tests/i18n/patterns/tests.py:    @override_settings(ROOT_URLCONF='i18n.patterns.urls.path_unused')\n./tests/i18n/patterns/tests.py:@override_settings(ROOT_URLCONF='i18n.patterns.urls.path_unused')\n./tests/i18n/patterns/tests.py:    @override_settings(\n./tests/i18n/patterns/tests.py:    (`settings.APPEND_SLASH=True`).\n./tests/i18n/patterns/tests.py:    (`settings.APPEND_SLASH=False`).\n./tests/i18n/patterns/tests.py:    @override_settings(APPEND_SLASH=False)\n./tests/i18n/patterns/tests.py:    @override_settings(APPEND_SLASH=False)\n./tests/i18n/tests.py:from django.conf import settings\n./tests/i18n/tests.py:    RequestFactory, SimpleTestCase, TestCase, override_settings,\n./tests/i18n/tests.py:extended_locale_paths = settings.LOCALE_PATHS + [\n./tests/i18n/tests.py:def patch_formats(lang, **settings):\n./tests/i18n/tests.py:    for key, value in settings.items():\n./tests/i18n/tests.py:    @override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/i18n/tests.py:    @override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/i18n/tests.py:    @override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/i18n/tests.py:    @override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/i18n/tests.py:        with override_settings(LANGUAGE_CODE='he'):\n./tests/i18n/tests.py:@override_settings(USE_L10N=True)\n./tests/i18n/tests.py:        with self.settings(USE_THOUSAND_SEPARATOR=False):\n./tests/i18n/tests.py:        with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:    @override_settings(USE_L10N=False)\n./tests/i18n/tests.py:            # THOUSAND_SEPARATOR settings are specified\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True, NUMBER_GROUPING=1, THOUSAND_SEPARATOR='!'):\n./tests/i18n/tests.py:        The active locale's formats take precedence over the default settings\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True, THOUSAND_SEPARATOR='!'):\n./tests/i18n/tests.py:            with self.settings(FIRST_DAY_OF_WEEK=0):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=False):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=False):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=False):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=False):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=False):\n./tests/i18n/tests.py:        with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:        with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=False):\n./tests/i18n/tests.py:        with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:        with self.settings(USE_L10N=False, DECIMAL_SEPARATOR=','):\n./tests/i18n/tests.py:        with self.settings(\n./tests/i18n/tests.py:        with self.settings(FORMAT_MODULE_PATH='i18n.other.locale'):\n./tests/i18n/tests.py:            with self.settings(USE_L10N=False, USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:    def test_format_arbitrary_settings(self):\n./tests/i18n/tests.py:        with self.settings(FORMAT_MODULE_PATH='i18n.other.locale'):\n./tests/i18n/tests.py:        for language_code, language_name in settings.LANGUAGES:\n./tests/i18n/tests.py:    @override_settings(LANGUAGE_CODE='de')\n./tests/i18n/tests.py:    @override_settings(\n./tests/i18n/tests.py:        r.COOKIES = {settings.LANGUAGE_COOKIE_NAME: 'pt-br'}\n./tests/i18n/tests.py:        r.COOKIES = {settings.LANGUAGE_COOKIE_NAME: 'pt'}\n./tests/i18n/tests.py:        r.COOKIES = {settings.LANGUAGE_COOKIE_NAME: 'es'}\n./tests/i18n/tests.py:        r.COOKIES = {settings.LANGUAGE_COOKIE_NAME: 'es-us'}\n./tests/i18n/tests.py:        r.COOKIES = {settings.LANGUAGE_COOKIE_NAME: 'zh-hans'}\n./tests/i18n/tests.py:    @override_settings(\n./tests/i18n/tests.py:        self.assertEqual(g(settings.LANGUAGE_CODE), settings.LANGUAGE_CODE)\n./tests/i18n/tests.py:    @override_settings(\n./tests/i18n/tests.py:        with self.settings(LANGUAGES=[('en', 'English')]):\n./tests/i18n/tests.py:        with override_settings(USE_I18N=False):\n./tests/i18n/tests.py:        with override_settings(USE_I18N=True):\n./tests/i18n/tests.py:    @override_settings(LANGUAGE_CODE='de')\n./tests/i18n/tests.py:        with self.modify_settings(INSTALLED_APPS={'append': 'i18n.resolution'}):\n./tests/i18n/tests.py:            with self.modify_settings(INSTALLED_APPS={'remove': 'django.contrib.admin.apps.SimpleAdminConfig'}):\n./tests/i18n/tests.py:@override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/i18n/tests.py:        with self.settings(INSTALLED_APPS=['i18n.resolution']):\n./tests/i18n/tests.py:@override_settings(INSTALLED_APPS=['i18n.territorial_fallback'])\n./tests/i18n/tests.py:@override_settings(\n./tests/i18n/tests.py:    @override_settings(\n./tests/i18n/tests.py:@override_settings(\n./tests/i18n/tests.py:        language (settings.LANGUAGE_CODE) should be accessible without a prefix.\n./tests/i18n/tests.py:@override_settings(\n./tests/i18n/tests.py:        with override_settings(LANGUAGE_CODE='de'):\n./tests/i18n/tests.py:    @override_settings(\n./tests/i18n/tests.py:    @override_settings(USE_I18N=True)\n./tests/i18n/tests.py:    @override_settings(\n./tests/i18n/tests.py:@override_settings(USE_I18N=True)\n./tests/i18n/tests.py:    @override_settings(USE_I18N=False)\n./tests/i18n/tests.py:            with self.settings(LOCALE_PATHS=[app_dir]):\n./tests/i18n/tests.py:        with self.settings(INSTALLED_APPS=['tests.i18n.sampleproject']):\n./tests/i18n/test_compilation.py:from django.test import SimpleTestCase, override_settings\n./tests/i18n/test_compilation.py:        with override_settings(LOCALE_PATHS=[os.path.join(self.test_dir, 'locale')]):\n./tests/i18n/test_compilation.py:        with override_settings(LOCALE_PATHS=[os.path.join(self.test_dir, 'locale')]):\n./tests/i18n/test_compilation.py:        with override_settings(LOCALE_PATHS=[os.path.join(self.test_dir, 'locale')]):\n./tests/i18n/test_compilation.py:        with override_settings(LOCALE_PATHS=[os.path.join(self.test_dir, 'locale')]):\n./tests/i18n/contenttypes/tests.py:from django.test import TestCase, override_settings\n./tests/i18n/contenttypes/tests.py:@override_settings(\n./tests/migrations/test_writer.py:from django.conf import SettingsReference, settings\n./tests/migrations/test_writer.py:    def test_serialize_settings(self):\n./tests/migrations/test_writer.py:        self.assertSerializedEqual(SettingsReference(settings.AUTH_USER_MODEL, \"AUTH_USER_MODEL\"))\n./tests/migrations/test_writer.py:            (\"settings.AUTH_USER_MODEL\", {\"from django.conf import settings\"})\n./tests/migrations/test_writer.py:            with self.modify_settings(INSTALLED_APPS={'append': app}):\n./tests/migrations/test_operations.py:from django.test import SimpleTestCase, override_settings, skipUnlessDBFeature\n./tests/migrations/test_operations.py:    @override_settings(TEST_SWAP_MODEL=\"migrations.SomeFakeModel\")\n./tests/migrations/test_operations.py:    @override_settings(TEST_SWAP_MODEL=\"migrations.SomeFakeModel\")\n./tests/migrations/test_operations.py:    @override_settings(TEST_SWAP_MODEL=\"migrations.SomeFakeModel\")\n./tests/migrations/test_operations.py:    @override_settings(TEST_SWAP_MODEL='migrations.SomeFakeModel')\n./tests/migrations/test_deprecated_fields.py:from django.test import override_settings\n./tests/migrations/test_deprecated_fields.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.deprecated_field_migrations\"})\n./tests/migrations/test_base.py:                with self.settings(MIGRATION_MODULES={app_label: new_module}):\n./tests/migrations/test_migrations_custom_user/0001_initial.py:from django.conf import settings\n./tests/migrations/test_migrations_custom_user/0001_initial.py:        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n./tests/migrations/test_migrations_custom_user/0001_initial.py:                (\"author\", models.ForeignKey(settings.AUTH_USER_MODEL, models.CASCADE, to_field=\"id\")),\n./tests/migrations/test_multidb.py:from django.test import override_settings\n./tests/migrations/test_multidb.py:        CreateModel honors multi-db settings.\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[AgnosticRouter()])\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[MigrateNothingRouter()])\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[MigrateEverythingRouter()])\n./tests/migrations/test_multidb.py:        with override_settings(DATABASE_ROUTERS=[AgnosticRouter(), AgnosticRouter()]):\n./tests/migrations/test_multidb.py:        with override_settings(DATABASE_ROUTERS=[MigrateNothingRouter(), MigrateEverythingRouter()]):\n./tests/migrations/test_multidb.py:        with override_settings(DATABASE_ROUTERS=[MigrateEverythingRouter(), MigrateNothingRouter()]):\n./tests/migrations/test_multidb.py:        with override_settings(DATABASE_ROUTERS=[MigrateEverythingRouter()]):\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[MigrateNothingRouter()])\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[MigrateWhenFooRouter()])\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[MigrateWhenFooRouter()])\n./tests/migrations/test_multidb.py:        with override_settings(DATABASE_ROUTERS=[MigrateEverythingRouter()]):\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[MigrateNothingRouter()])\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[MigrateWhenFooRouter()])\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[MigrateWhenFooRouter()])\n./tests/migrations/test_executor.py:    SimpleTestCase, modify_settings, override_settings, skipUnlessDBFeature,\n./tests/migrations/test_executor.py:@modify_settings(INSTALLED_APPS={'append': 'migrations2'})\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_non_atomic\"})\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_atomic_operation\"})\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_executor.py:    @override_settings(\n./tests/migrations/test_executor.py:    @override_settings(\n./tests/migrations/test_executor.py:    @override_settings(\n./tests/migrations/test_executor.py:    @override_settings(\n./tests/migrations/test_executor.py:    @override_settings(\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_executor.py:    @override_settings(\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n./tests/migrations/test_autodetector.py:from django.conf import settings\n./tests/migrations/test_autodetector.py:from django.test import TestCase, override_settings\n./tests/migrations/test_autodetector.py:    @override_settings(AUTH_USER_MODEL=\"thirdapp.CustomUser\")\n./tests/migrations/test_autodetector.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/migrations/test_autodetector.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/migrations/test_autodetector.py:            with override_settings(AUTH_USER_MODEL=\"thirdapp.CustomUser\"):\n./tests/migrations/test_autodetector.py:    @override_settings(AUTH_USER_MODEL=\"thirdapp.CustomUser\")\n./tests/migrations/test_autodetector.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/migrations/test_autodetector.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_autodetector.py:    @override_settings(AUTH_USER_MODEL=\"a.Tenant\")\n./tests/migrations/test_autodetector.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/migrations/test_autodetector.py:                (\"tenant\", models.ForeignKey(settings.AUTH_USER_MODEL, models.CASCADE)),\n./tests/migrations/test_autodetector.py:    @override_settings(AUTH_USER_MODEL=\"b.Tenant\")\n./tests/migrations/test_autodetector.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/migrations/test_autodetector.py:                (\"tenant\", models.ForeignKey(settings.AUTH_USER_MODEL, models.CASCADE)),\n./tests/migrations/test_autodetector.py:    @override_settings(AUTH_USER_MODEL=\"a.Person\")\n./tests/migrations/test_autodetector.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/migrations/test_autodetector.py:                (\"parent1\", models.ForeignKey(settings.AUTH_USER_MODEL, models.CASCADE, related_name='children'))\n./tests/migrations/test_autodetector.py:    @override_settings(AUTH_USER_MODEL='a.User')\n./tests/migrations/test_autodetector.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/migrations/test_autodetector.py:                ('user', models.ForeignKey(settings.AUTH_USER_MODEL, models.CASCADE))\n./tests/migrations/test_questioner.py:from django.test.utils import captured_stdout, override_settings\n./tests/migrations/test_questioner.py:    @override_settings(\n./tests/migrations/test_commands.py:from django.test import TestCase, override_settings\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=[\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=['migrations', 'migrations.migrations_test_apps.unmigrated_app_syncdb'])\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_clashing_prefix'})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_initial_false\"})\n./tests/migrations/test_commands.py:    @override_settings(\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_fake_split_initial\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_conflict\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_run_before\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_plan'})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_empty'})\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_empty\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed_complex\"})\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=[\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=[\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_non_atomic\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no_operations'})\n./tests/migrations/test_commands.py:    @override_settings(\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app_syncdb'])\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=[\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=['migrations', 'migrations2'])\n./tests/migrations/test_commands.py:        settings.DATABASE_ROUTERS.\n./tests/migrations/test_commands.py:                with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n./tests/migrations/test_commands.py:                with self.settings(DATABASE_ROUTERS=['migrations.routers.EmptyRouter']):\n./tests/migrations/test_commands.py:                with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": None})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'some.nonexistent.path'})\n./tests/migrations/test_commands.py:    @override_settings(\n./tests/migrations/test_commands.py:    @override_settings(\n./tests/migrations/test_commands.py:    @override_settings(\n./tests/migrations/test_state.py:from django.test import SimpleTestCase, override_settings\n./tests/migrations/test_state.py:    @override_settings(TEST_SWAPPABLE_MODEL='migrations.SomeFakeModel')\n./tests/migrations/test_state.py:    @override_settings(TEST_SWAPPABLE_MODEL='migrations.SomeFakeModel')\n./tests/migrations/test_state.py:    @override_settings(TEST_SWAPPABLE_MODEL='migrations.SomeFakeModel')\n./tests/migrations/test_loader.py:from django.test import TestCase, modify_settings, override_settings\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_loader.py:    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\n./tests/migrations/test_loader.py:    @modify_settings(INSTALLED_APPS={'append': 'migrations2'})\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_unmigdep\"})\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_run_before\"})\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\n./tests/migrations/test_loader.py:    @modify_settings(INSTALLED_APPS={'append': 'migrations2'})\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_loader.py:        with override_settings(MIGRATION_MODULES={\"migrations\": \"import_error_package\"}):\n./tests/migrations/test_loader.py:        with override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.faulty_migrations.file\"}):\n./tests/migrations/test_loader.py:        with override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.faulty_migrations.namespace\"}):\n./tests/migrations/test_loader.py:    @override_settings(\n./tests/migrations/test_loader.py:    @override_settings(\n./tests/migrations/test_loader.py:    @override_settings(\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed_complex\"})\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\n./tests/migrations/test_loader.py:    @modify_settings(INSTALLED_APPS={'append': [\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\n./tests/migrations/test_loader.py:    @modify_settings(INSTALLED_APPS={'append': [\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed_erroneous\"})\n./tests/migrations/test_loader.py:    @override_settings(\n./tests/migrations/test_loader.py:    @override_settings(\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\n./tests/migrations/test_loader.py:    @modify_settings(INSTALLED_APPS={'append': [\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_private'})\n./tests/wsgi/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/wsgi/tests.py:@override_settings(ROOT_URLCONF='wsgi.urls')\n./tests/wsgi/tests.py:    @override_settings(WSGI_APPLICATION=\"wsgi.wsgi.application\")\n./tests/wsgi/tests.py:    @override_settings(WSGI_APPLICATION=None)\n./tests/wsgi/tests.py:    @override_settings(WSGI_APPLICATION=\"wsgi.noexist.app\")\n./tests/wsgi/tests.py:    @override_settings(WSGI_APPLICATION=\"wsgi.wsgi.noexist\")\n./tests/proxy_models/tests.py:from django.test import TestCase, override_settings\n./tests/proxy_models/tests.py:    @override_settings(TEST_SWAPPABLE_MODEL='proxy_models.AlternateModel')\n./tests/proxy_models/tests.py:@override_settings(ROOT_URLCONF='proxy_models.urls')\n./tests/prefetch_related/tests.py:from django.test import TestCase, override_settings\n./tests/prefetch_related/tests.py:    @override_settings(DEBUG=True)\n./tests/servers/tests.py:from django.test import LiveServerTestCase, override_settings\n./tests/servers/tests.py:@override_settings(ROOT_URLCONF='servers.urls', **TEST_SETTINGS)\n./tests/servers/tests.py:@override_settings(ROOT_URLCONF='servers.urls')\n./tests/select_for_update/tests.py:    TransactionTestCase, override_settings, skipIfDBFeature,\n./tests/select_for_update/tests.py:    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n./tests/urlpatterns/tests.py:from django.test.utils import override_settings\n./tests/urlpatterns/tests.py:@override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n./tests/urlpatterns/tests.py:    @override_settings(ROOT_URLCONF='urlpatterns.path_base64_urls')\n./tests/urlpatterns/tests.py:    @override_settings(ROOT_URLCONF='urlpatterns.path_base64_urls')\n./tests/urlpatterns/tests.py:    @override_settings(ROOT_URLCONF='urlpatterns.path_base64_urls')\n./tests/urlpatterns/tests.py:@override_settings(ROOT_URLCONF='urlpatterns.converter_urls')\n./tests/urlpatterns/tests.py:@override_settings(ROOT_URLCONF='urlpatterns.path_dynamic_urls')\n./tests/urlpatterns/test_resolvers.py:from django.test.utils import override_settings\n./tests/urlpatterns/test_resolvers.py:    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n./tests/urlpatterns/test_resolvers.py:        # settings.ROOT_URLCONF is the same cached object.\n./tests/proxy_model_inheritance/tests.py:            with self.modify_settings(INSTALLED_APPS={'append': ['app1', 'app2']}):\n./tests/multiple_database/tests.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/multiple_database/tests.py:        with self.settings(DATABASE_ROUTERS=[router]):\n./tests/multiple_database/tests.py:    @override_settings(DATABASE_ROUTERS=[AuthRouter()])\n./tests/multiple_database/tests.py:    @override_settings(DATABASE_ROUTERS=[\n./tests/multiple_database/tests.py:@override_settings(DATABASE_ROUTERS=[TestRouter()])\n./tests/multiple_database/tests.py:        with override_settings(DATABASE_ROUTERS=[TestRouter(), AuthRouter()]):\n./tests/multiple_database/tests.py:        with override_settings(DATABASE_ROUTERS=[AuthRouter(), TestRouter()]):\n./tests/multiple_database/tests.py:        with override_settings(DATABASE_ROUTERS=[WriteRouter(), AuthRouter(), TestRouter()]):\n./tests/multiple_database/tests.py:@override_settings(DATABASE_ROUTERS=[AuthRouter()])\n./tests/multiple_database/tests.py:    @override_settings(DATABASE_ROUTERS=[AntiPetRouter()])\n./tests/multiple_database/tests.py:    @override_settings(DATABASE_ROUTERS=[AntiPetRouter()])\n./tests/multiple_database/tests.py:        return override_settings(DATABASE_ROUTERS=[WriteToOtherRouter()])\n./tests/multiple_database/tests.py:        return override_settings(DATABASE_ROUTERS=[AttributeErrorRouter()])\n./tests/multiple_database/tests.py:@override_settings(DATABASE_ROUTERS=[ModelMetaRouter()])\n./tests/multiple_database/tests.py:        with override_settings(DATABASE_ROUTERS=[SyncOnlyDefaultDatabaseRouter()]):\n./tests/multiple_database/tests.py:        return override_settings(DATABASE_ROUTERS=[RouteForWriteTestCase.WriteCheckRouter()])\n./tests/multiple_database/tests.py:@override_settings(DATABASE_ROUTERS=[NoRelationRouter()])\n./tests/model_indexes/tests.py:from django.conf import settings\n./tests/model_indexes/tests.py:                # consequence, @override_settings doesn't work.\n./tests/model_indexes/tests.py:                if settings.DEFAULT_INDEX_TABLESPACE:\n./tests/model_indexes/tests.py:                        '\"%s\"' % settings.DEFAULT_INDEX_TABLESPACE,\n./tests/datetimes/tests.py:from django.test import TestCase, override_settings\n./tests/datetimes/tests.py:    @override_settings(USE_TZ=True)\n./tests/humanize_tests/tests.py:from django.test import SimpleTestCase, modify_settings, override_settings\n./tests/humanize_tests/tests.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.humanize'})\n./tests/humanize_tests/tests.py:        with self.settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=False):\n./tests/humanize_tests/tests.py:        with translation.override('ja'), self.settings(USE_L10N=True):\n./tests/humanize_tests/tests.py:        with self.settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True):\n./tests/humanize_tests/tests.py:        with self.settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True):\n./tests/humanize_tests/tests.py:            with override_settings(TIME_ZONE=\"America/Chicago\", USE_TZ=True):\n./tests/humanize_tests/tests.py:                with override_settings(USE_TZ=True):\n./tests/humanize_tests/tests.py:            with translation.override('cs'), self.settings(USE_L10N=True):\n./tests/requests/tests.py:from django.test import RequestFactory, SimpleTestCase, override_settings\n./tests/requests/tests.py:        with override_settings(FORCE_SCRIPT_NAME='/FORCED_PREFIX/'):\n./tests/requests/tests.py:        with override_settings(FORCE_SCRIPT_NAME='/FORCED_PREFIX/'):\n./tests/requests/tests.py:        with override_settings(FORCE_SCRIPT_NAME='/FORCED_PREFIX'):\n./tests/requests/tests.py:    @override_settings(ALLOWED_HOSTS=['example.com'])\n./tests/requests/tests.py:    @override_settings(\n./tests/requests/tests.py:    @override_settings(USE_X_FORWARDED_HOST=True, ALLOWED_HOSTS=['*'])\n./tests/requests/tests.py:    @override_settings(USE_X_FORWARDED_PORT=False)\n./tests/requests/tests.py:    @override_settings(USE_X_FORWARDED_PORT=True)\n./tests/requests/tests.py:    @override_settings(DEBUG=True, ALLOWED_HOSTS=[])\n./tests/requests/tests.py:    @override_settings(ALLOWED_HOSTS=[])\n./tests/requests/test_data_upload_settings.py:TOO_MANY_FIELDS_MSG = 'The number of GET/POST parameters exceeded settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.'\n./tests/requests/test_data_upload_settings.py:TOO_MUCH_DATA_MSG = 'Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.'\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=12):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=13):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=None):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=10):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=11):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=None):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=1):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=2):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=3):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=None):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=1):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=3):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=1):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=2):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=None):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=2):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=3):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=None):\n./tests/sites_tests/tests.py:from django.conf import settings\n./tests/sites_tests/tests.py:    SimpleTestCase, TestCase, modify_settings, override_settings,\n./tests/sites_tests/tests.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.sites'})\n./tests/sites_tests/tests.py:        cls.site = Site(id=settings.SITE_ID, domain='example.com', name='example.com')\n./tests/sites_tests/tests.py:        s2 = Site.objects.get(id=settings.SITE_ID)\n./tests/sites_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['example.com'])\n./tests/sites_tests/tests.py:        self.assertEqual(site.id, settings.SITE_ID)\n./tests/sites_tests/tests.py:        with self.modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'}):\n./tests/sites_tests/tests.py:    @override_settings(SITE_ID='', ALLOWED_HOSTS=['example.com'])\n./tests/sites_tests/tests.py:        del settings.SITE_ID\n./tests/sites_tests/tests.py:    @override_settings(SITE_ID='', ALLOWED_HOSTS=['example.com'])\n./tests/sites_tests/tests.py:    @override_settings(SITE_ID='', ALLOWED_HOSTS=['example.com', 'example.net'])\n./tests/sites_tests/tests.py:        with self.modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'}):\n./tests/sites_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['example.com'])\n./tests/sites_tests/tests.py:        with self.settings(SITE_ID=''):\n./tests/sites_tests/tests.py:    @override_settings(SITE_ID='', ALLOWED_HOSTS=['example2.com'])\n./tests/sites_tests/tests.py:@override_settings(ALLOWED_HOSTS=['example.com'])\n./tests/sites_tests/tests.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.sites'})\n./tests/sites_tests/tests.py:    @override_settings(DATABASE_ROUTERS=[JustOtherRouter()])\n./tests/sites_tests/tests.py:    @override_settings(SITE_ID=35696)\n./tests/sites_tests/tests.py:    @override_settings()  # Restore original ``SITE_ID`` afterwards.\n./tests/sites_tests/tests.py:        del settings.SITE_ID\n./tests/sites_tests/tests.py:        self.assertEqual(request.site.id, settings.SITE_ID)\n./tests/sites_tests/tests.py:        self.assertContains(response, settings.SITE_ID)\n./tests/messages_tests/test_cookie.py:from django.test import SimpleTestCase, override_settings\n./tests/messages_tests/test_cookie.py:@override_settings(SESSION_COOKIE_DOMAIN='.example.com', SESSION_COOKIE_SECURE=True, SESSION_COOKIE_HTTPONLY=True)\n./tests/messages_tests/test_cookie.py:    @override_settings(SESSION_COOKIE_SAMESITE='Strict')\n./tests/messages_tests/test_mixins.py:from django.test import SimpleTestCase, override_settings\n./tests/messages_tests/test_mixins.py:@override_settings(ROOT_URLCONF='messages_tests.urls')\n./tests/messages_tests/base.py:from django.test import modify_settings, override_settings\n./tests/messages_tests/base.py:class override_settings_tags(override_settings):\n./tests/messages_tests/base.py:        # settings.MESSAGE_TAGS, update that constant also.\n./tests/messages_tests/base.py:        self.settings_override = override_settings_tags(\n./tests/messages_tests/base.py:        self.settings_override.enable()\n./tests/messages_tests/base.py:        self.settings_override.disable()\n./tests/messages_tests/base.py:    @override_settings(MESSAGE_LEVEL=constants.DEBUG)\n./tests/messages_tests/base.py:    @override_settings(MESSAGE_LEVEL=constants.DEBUG)\n./tests/messages_tests/base.py:    @override_settings(MESSAGE_LEVEL=constants.DEBUG)\n./tests/messages_tests/base.py:    @modify_settings(\n./tests/messages_tests/base.py:    @override_settings(\n./tests/messages_tests/base.py:    @modify_settings(\n./tests/messages_tests/base.py:    @override_settings(\n./tests/messages_tests/base.py:    @override_settings(MESSAGE_LEVEL=29)\n./tests/messages_tests/base.py:    def test_settings_level(self):\n./tests/messages_tests/base.py:    @override_settings_tags(MESSAGE_TAGS={\n./tests/generic_inline_admin/tests.py:    RequestFactory, SimpleTestCase, TestCase, override_settings,\n./tests/generic_inline_admin/tests.py:@override_settings(ROOT_URLCONF='generic_inline_admin.urls')\n./tests/generic_inline_admin/tests.py:@override_settings(ROOT_URLCONF='generic_inline_admin.urls')\n./tests/generic_inline_admin/tests.py:@override_settings(ROOT_URLCONF='generic_inline_admin.urls')\n./tests/generic_inline_admin/tests.py:@override_settings(ROOT_URLCONF='generic_inline_admin.urls')\n./tests/generic_inline_admin/tests.py:@override_settings(ROOT_URLCONF='generic_inline_admin.urls')\n./tests/gis_tests/test_geoip2.py:from django.conf import settings\n./tests/gis_tests/test_geoip2.py:    HAS_GEOIP2 and getattr(settings, \"GEOIP_PATH\", None),\n./tests/gis_tests/test_geoip2.py:        path = settings.GEOIP_PATH\n./tests/gis_tests/test_geoip2.py:        path = settings.GEOIP_PATH\n./tests/gis_tests/layermap/tests.py:from django.conf import settings\n./tests/gis_tests/layermap/tests.py:from django.test import TestCase, override_settings\n./tests/gis_tests/layermap/tests.py:@override_settings(DATABASE_ROUTERS=[OtherRouter()])\n./tests/gis_tests/layermap/tests.py:    @unittest.skipUnless(len(settings.DATABASES) > 1, 'multiple databases required')\n./tests/gis_tests/utils.py:from django.conf import settings\n./tests/gis_tests/utils.py:    if settings.DATABASES[DEFAULT_DB_ALIAS]['ENGINE'].rsplit('.')[-1] == backend:\n./tests/gis_tests/utils.py:_default_db = settings.DATABASES[DEFAULT_DB_ALIAS]['ENGINE'].rsplit('.')[-1]\n./tests/gis_tests/utils.py:if oracle and 'gis' in settings.DATABASES[DEFAULT_DB_ALIAS]['ENGINE']:\n./tests/gis_tests/geoadmin/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/gis_tests/geoadmin/tests.py:@override_settings(ROOT_URLCONF='django.contrib.gis.tests.geoadmin.urls')\n./tests/gis_tests/inspectapp/tests.py:from django.test.utils import modify_settings\n./tests/gis_tests/inspectapp/tests.py:@modify_settings(\n./tests/gis_tests/inspectapp/tests.py:    connection settings from the Django test.\n./tests/gis_tests/inspectapp/tests.py:        # Don't add the parameter if it is not in django's settings\n./tests/gis_tests/tests.py:            self.settings_dict = {\n./tests/gis_tests/geoapp/test_feeds.py:from django.conf import settings\n./tests/gis_tests/geoapp/test_feeds.py:from django.test import TestCase, modify_settings, override_settings\n./tests/gis_tests/geoapp/test_feeds.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.sites'})\n./tests/gis_tests/geoapp/test_feeds.py:@override_settings(ROOT_URLCONF='gis_tests.geoapp.urls')\n./tests/gis_tests/geoapp/test_feeds.py:        Site(id=settings.SITE_ID, domain=\"example.com\", name=\"example.com\").save()\n./tests/gis_tests/geoapp/test_sitemaps.py:from django.conf import settings\n./tests/gis_tests/geoapp/test_sitemaps.py:from django.test import TestCase, modify_settings, override_settings\n./tests/gis_tests/geoapp/test_sitemaps.py:@modify_settings(INSTALLED_APPS={'append': ['django.contrib.sites', 'django.contrib.sitemaps']})\n./tests/gis_tests/geoapp/test_sitemaps.py:@override_settings(ROOT_URLCONF='gis_tests.geoapp.urls')\n./tests/gis_tests/geoapp/test_sitemaps.py:        Site(id=settings.SITE_ID, domain=\"example.com\", name=\"example.com\").save()\n./tests/gis_tests/test_geoforms.py:from django.test import SimpleTestCase, override_settings\n./tests/gis_tests/test_geoforms.py:    @override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True)\n./tests/gis_tests/relatedapp/tests.py:from django.test.utils import override_settings\n./tests/gis_tests/relatedapp/tests.py:    @override_settings(USE_TZ=True)\n./tests/handlers/test_exception.py:from django.test import SimpleTestCase, override_settings\n./tests/handlers/test_exception.py:    @override_settings(DATA_UPLOAD_MAX_MEMORY_SIZE=12)\n./tests/handlers/test_exception.py:    @override_settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=2)\n./tests/handlers/tests_custom_error_handlers.py:from django.test import SimpleTestCase, modify_settings, override_settings\n./tests/handlers/tests_custom_error_handlers.py:@override_settings(ROOT_URLCONF='handlers.tests_custom_error_handlers')\n./tests/handlers/tests_custom_error_handlers.py:@modify_settings(MIDDLEWARE={'append': 'handlers.tests_custom_error_handlers.MiddlewareAccessingContent'})\n./tests/handlers/tests.py:    RequestFactory, SimpleTestCase, TransactionTestCase, override_settings,\n./tests/handlers/tests.py:    @override_settings(ROOT_URLCONF='handlers.urls')\n./tests/handlers/tests.py:@override_settings(ROOT_URLCONF='handlers.urls', MIDDLEWARE=[])\n./tests/handlers/tests.py:        old_atomic_requests = connection.settings_dict['ATOMIC_REQUESTS']\n./tests/handlers/tests.py:            connection.settings_dict['ATOMIC_REQUESTS'] = True\n./tests/handlers/tests.py:            connection.settings_dict['ATOMIC_REQUESTS'] = old_atomic_requests\n./tests/handlers/tests.py:        old_atomic_requests = connection.settings_dict['ATOMIC_REQUESTS']\n./tests/handlers/tests.py:            connection.settings_dict['ATOMIC_REQUESTS'] = True\n./tests/handlers/tests.py:            connection.settings_dict['ATOMIC_REQUESTS'] = old_atomic_requests\n./tests/handlers/tests.py:@override_settings(ROOT_URLCONF='handlers.urls')\n./tests/handlers/tests.py:@override_settings(ROOT_URLCONF='handlers.urls')\n./tests/handlers/tests.py:    @override_settings(MIDDLEWARE=['handlers.tests.empty_middleware'])\n./tests/indexes/tests.py:from django.test.utils import override_settings\n./tests/indexes/tests.py:@override_settings(USE_TZ=True)\n./tests/backends/base/test_operations.py:    SimpleTestCase, TestCase, override_settings, skipIfDBFeature,\n./tests/backends/base/test_operations.py:    @override_settings(USE_TZ=False)\n./tests/backends/base/test_creation.py:        test_connection.settings_dict = copy.copy(connections[DEFAULT_DB_ALIAS].settings_dict)\n./tests/backends/base/test_creation.py:        test_connection.settings_dict['NAME'] = prod_name\n./tests/backends/base/test_creation.py:        test_connection.settings_dict['TEST'] = {'NAME': None}\n./tests/backends/base/test_creation.py:        test_connection.settings_dict['TEST'] = {'NAME': test_name}\n./tests/backends/base/test_creation.py:        test_connection.settings_dict['TEST'] = {'NAME': test_name}\n./tests/backends/sqlite/tests.py:    TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n./tests/backends/sqlite/tests.py:        settings_dict = {\n./tests/backends/sqlite/tests.py:        creation = DatabaseWrapper(settings_dict).creation\n./tests/backends/sqlite/tests.py:        self.assertEqual(creation._get_test_db_name(), creation.connection.settings_dict['TEST']['NAME'])\n./tests/backends/sqlite/tests.py:@override_settings(DEBUG=True)\n./tests/backends/sqlite/tests.py:    All tests in this test case are also run with settings.DEBUG=True in\n./tests/backends/sqlite/tests.py:@override_settings(DEBUG=True)\n./tests/backends/oracle/test_creation.py:        return connection.settings_dict['SAVED_PASSWORD']\n./tests/backends/oracle/tests.py:        old_password = connection.settings_dict['PASSWORD']\n./tests/backends/oracle/tests.py:        connection.settings_dict['PASSWORD'] = 'p@ssword'\n./tests/backends/oracle/tests.py:            connection.settings_dict['PASSWORD'] = old_password\n./tests/backends/tests.py:    TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n./tests/backends/tests.py:@override_settings(DEBUG=True)\n./tests/backends/tests.py:    All tests in this test case are also run with settings.DEBUG=True in\n./tests/backends/tests.py:@override_settings(DEBUG=True)\n./tests/backends/tests.py:        with override_settings(DEBUG=True):\n./tests/backends/tests.py:        with override_settings(DEBUG=True):\n./tests/backends/tests.py:        old_password = connection.settings_dict['PASSWORD']\n./tests/backends/tests.py:        connection.settings_dict['PASSWORD'] = \"fran\u00e7ois\"\n./tests/backends/tests.py:            connection.settings_dict['PASSWORD'] = old_password\n./tests/backends/tests.py:    @override_settings(DEBUG=True)\n./tests/backends/tests.py:    @override_settings(DEBUG=True)\n./tests/backends/tests.py:        with self.settings(TIME_ZONE=None, USE_TZ=False):\n./tests/backends/postgresql/test_creation.py:    def changed_test_settings(self, **kwargs):\n./tests/backends/postgresql/test_creation.py:        settings = connection.settings_dict['TEST']\n./tests/backends/postgresql/test_creation.py:            if name in settings:\n./tests/backends/postgresql/test_creation.py:                saved_values[name] = settings[name]\n./tests/backends/postgresql/test_creation.py:            settings[name] = value\n./tests/backends/postgresql/test_creation.py:                    settings[name] = saved_values[name]\n./tests/backends/postgresql/test_creation.py:                    del settings[name]\n./tests/backends/postgresql/test_creation.py:    def check_sql_table_creation_suffix(self, settings, expected):\n./tests/backends/postgresql/test_creation.py:        with self.changed_test_settings(**settings):\n./tests/backends/postgresql/test_creation.py:    def test_sql_table_creation_suffix_with_none_settings(self):\n./tests/backends/postgresql/test_creation.py:        settings = {'CHARSET': None, 'TEMPLATE': None}\n./tests/backends/postgresql/test_creation.py:        self.check_sql_table_creation_suffix(settings, \"\")\n./tests/backends/postgresql/test_creation.py:        settings = {'CHARSET': 'UTF8'}\n./tests/backends/postgresql/test_creation.py:        self.check_sql_table_creation_suffix(settings, \"WITH ENCODING 'UTF8'\")\n./tests/backends/postgresql/test_creation.py:        settings = {'TEMPLATE': 'template0'}\n./tests/backends/postgresql/test_creation.py:        self.check_sql_table_creation_suffix(settings, 'WITH TEMPLATE \"template0\"')\n./tests/backends/postgresql/test_creation.py:        settings = {'CHARSET': 'UTF8', 'TEMPLATE': 'template0'}\n./tests/backends/postgresql/test_creation.py:        self.check_sql_table_creation_suffix(settings, '''WITH ENCODING 'UTF8' TEMPLATE \"template0\"''')\n./tests/backends/postgresql/test_server_side_cursors.py:            original_value = connection.settings_dict.get(setting)\n./tests/backends/postgresql/test_server_side_cursors.py:            if setting in connection.settings_dict:\n./tests/backends/postgresql/test_server_side_cursors.py:                self.addCleanup(operator.setitem, connection.settings_dict, setting, original_value)\n./tests/backends/postgresql/test_server_side_cursors.py:                self.addCleanup(operator.delitem, connection.settings_dict, setting)\n./tests/backends/postgresql/test_server_side_cursors.py:            connection.settings_dict[setting] = kwargs[setting]\n./tests/backends/postgresql/tests.py:from django.test import TestCase, override_settings\n./tests/backends/postgresql/tests.py:            if self.settings_dict['NAME'] is None:\n./tests/backends/postgresql/tests.py:        self.assertIsNone(nodb_conn.settings_dict['NAME'])\n./tests/backends/postgresql/tests.py:                    'settings_dict',\n./tests/backends/postgresql/tests.py:                    {**connection.settings_dict, 'NAME': 'postgres'},\n./tests/backends/postgresql/tests.py:        self.assertIsNotNone(nodb_conn.settings_dict['NAME'])\n./tests/backends/postgresql/tests.py:        self.assertEqual(nodb_conn.settings_dict['NAME'], connections['other'].settings_dict['NAME'])\n./tests/backends/postgresql/tests.py:        settings = connection.settings_dict.copy()\n./tests/backends/postgresql/tests.py:        settings['NAME'] = 'a' + (max_name_length * 'a')\n./tests/backends/postgresql/tests.py:            \"settings.DATABASES.\"\n./tests/backends/postgresql/tests.py:        ) % (settings['NAME'], max_name_length + 1, max_name_length)\n./tests/backends/postgresql/tests.py:            DatabaseWrapper(settings).get_connection_params()\n./tests/backends/postgresql/tests.py:            # the time zone in new_connection.settings_dict. We can\n./tests/backends/postgresql/tests.py:            with self.settings(TIME_ZONE=new_tz):\n./tests/backends/postgresql/tests.py:        new_connection.settings_dict['AUTOCOMMIT'] = False\n./tests/backends/postgresql/tests.py:        new_connection.settings_dict['OPTIONS']['isolation_level'] = serializable\n./tests/backends/postgresql/tests.py:    @override_settings(DEBUG=True)\n./tests/backends/mysql/test_creation.py:            saved_settings = connection.settings_dict\n./tests/backends/mysql/test_creation.py:            connection.settings_dict = {\n./tests/backends/mysql/test_creation.py:            connection.settings_dict = saved_settings\n./tests/backends/mysql/tests.py:from django.test import TestCase, override_settings\n./tests/backends/mysql/tests.py:@override_settings(DEBUG=True)\n./tests/backends/mysql/tests.py:            new_connection.settings_dict['OPTIONS']['isolation_level'] = self.other_isolation_level\n./tests/backends/mysql/tests.py:            new_connection.settings_dict['OPTIONS']['isolation_level'] = self.other_isolation_level.upper()\n./tests/backends/mysql/tests.py:        # If not specified in settings, the default is read committed.\n./tests/backends/mysql/tests.py:            new_connection.settings_dict['OPTIONS'].pop('isolation_level', None)\n./tests/backends/mysql/tests.py:        new_connection.settings_dict['OPTIONS']['isolation_level'] = 'xxx'\n./tests/db_functions/comparison/test_cast.py:    TestCase, ignore_warnings, override_settings, skipUnlessDBFeature,\n./tests/db_functions/comparison/test_cast.py:    @override_settings(DEBUG=True)\n./tests/db_functions/datetime/test_extract_trunc.py:from django.conf import settings\n./tests/db_functions/datetime/test_extract_trunc.py:    TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n./tests/db_functions/datetime/test_extract_trunc.py:@override_settings(USE_TZ=False)\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        tz = pytz.UTC if settings.USE_TZ else None\n./tests/db_functions/datetime/test_extract_trunc.py:@override_settings(USE_TZ=True, TIME_ZONE='UTC')\n./tests/managers_regress/tests.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/managers_regress/tests.py:    @override_settings(TEST_SWAPPABLE_MODEL='managers_regress.Parent')\n./tests/managers_regress/tests.py:    @override_settings(TEST_SWAPPABLE_MODEL='managers_regress.Parent')\n./tests/managers_regress/tests.py:    @override_settings(TEST_SWAPPABLE_MODEL='managers_regress.Parent')\n./tests/admin_changelist/test_date_hierarchy.py:        with self.settings(USE_TZ=True, TIME_ZONE='Asia/Jerusalem'):\n./tests/admin_changelist/tests.py:from django.test import TestCase, override_settings\n./tests/admin_changelist/tests.py:@override_settings(ROOT_URLCONF=\"admin_changelist.urls\")\n./tests/admin_changelist/tests.py:        ModelAdmin settings.\n./tests/admin_changelist/tests.py:@override_settings(ROOT_URLCONF='admin_changelist.urls')\n./tests/runtests.py:    from django.conf import settings\n./tests/runtests.py:        'INSTALLED_APPS': settings.INSTALLED_APPS,\n./tests/runtests.py:        'ROOT_URLCONF': getattr(settings, \"ROOT_URLCONF\", \"\"),\n./tests/runtests.py:        'TEMPLATES': settings.TEMPLATES,\n./tests/runtests.py:        'LANGUAGE_CODE': settings.LANGUAGE_CODE,\n./tests/runtests.py:        'STATIC_URL': settings.STATIC_URL,\n./tests/runtests.py:        'STATIC_ROOT': settings.STATIC_ROOT,\n./tests/runtests.py:        'MIDDLEWARE': settings.MIDDLEWARE,\n./tests/runtests.py:    # Redirect some settings for the duration of these tests.\n./tests/runtests.py:    settings.INSTALLED_APPS = ALWAYS_INSTALLED_APPS\n./tests/runtests.py:    settings.ROOT_URLCONF = 'urls'\n./tests/runtests.py:    settings.STATIC_URL = '/static/'\n./tests/runtests.py:    settings.STATIC_ROOT = os.path.join(TMPDIR, 'static')\n./tests/runtests.py:    settings.TEMPLATES = [{\n./tests/runtests.py:    settings.LANGUAGE_CODE = 'en'\n./tests/runtests.py:    settings.SITE_ID = 1\n./tests/runtests.py:    settings.MIDDLEWARE = ALWAYS_MIDDLEWARE\n./tests/runtests.py:    settings.MIGRATION_MODULES = {\n./tests/runtests.py:    settings.LOGGING = log_config\n./tests/runtests.py:    settings.SILENCED_SYSTEM_CHECKS = [\n./tests/runtests.py:            settings.INSTALLED_APPS.append(CONTRIB_TESTS_TO_APPS[module_name])\n./tests/runtests.py:            settings.INSTALLED_APPS.append(module_label)\n./tests/runtests.py:    # @override_settings(INSTALLED_APPS=...) on all test cases.\n./tests/runtests.py:    if connection.features.gis_enabled and gis not in settings.INSTALLED_APPS:\n./tests/runtests.py:        settings.INSTALLED_APPS.append(gis)\n./tests/runtests.py:    apps.set_installed_apps(settings.INSTALLED_APPS)\n./tests/runtests.py:    # Restore the old settings.\n./tests/runtests.py:        setattr(settings, key, value)\n./tests/runtests.py:    if not hasattr(settings, 'TEST_RUNNER'):\n./tests/runtests.py:        settings.TEST_RUNNER = 'django.test.runner.DiscoverRunner'\n./tests/runtests.py:    TestRunner = get_runner(settings)\n./tests/runtests.py:        sys.executable, __file__, '--settings=%s' % options.settings\n./tests/runtests.py:        '--settings',\n./tests/runtests.py:        help='Python path to settings module, e.g. \"myproject.settings\". If '\n./tests/runtests.py:    if options.settings:\n./tests/runtests.py:        os.environ['DJANGO_SETTINGS_MODULE'] = options.settings\n./tests/runtests.py:        options.settings = os.environ['DJANGO_SETTINGS_MODULE']\n./tests/dates/tests.py:from django.test import TestCase, override_settings\n./tests/dates/tests.py:    @override_settings(USE_TZ=False)\n./tests/settings_tests/tests.py:from django.conf import ENVIRONMENT_VARIABLE, LazySettings, Settings, settings\n./tests/settings_tests/tests.py:    SimpleTestCase, TestCase, TransactionTestCase, modify_settings,\n./tests/settings_tests/tests.py:    override_settings, signals,\n./tests/settings_tests/tests.py:@modify_settings(ITEMS={\n./tests/settings_tests/tests.py:@override_settings(ITEMS=['a', 'c', 'e'], ITEMS_OUTER=[1, 2, 3], TEST='override', TEST_OUTER='outer')\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS, ['b', 'c', 'd'])\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS_OUTER, [1, 2, 3])\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST, 'override')\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST_OUTER, 'outer')\n./tests/settings_tests/tests.py:    @modify_settings(ITEMS={\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS, ['a', 'b', 'e', 'f'])\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS_OUTER, [1, 2, 3])\n./tests/settings_tests/tests.py:    @modify_settings(ITEMS={\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS, ['b', 'd'])\n./tests/settings_tests/tests.py:    @modify_settings(ITEMS={\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS, ['a', 'b', 'd', 'e'])\n./tests/settings_tests/tests.py:    @modify_settings(ITEMS={'remove': ['b', 'd']})\n./tests/settings_tests/tests.py:    @modify_settings(ITEMS={'append': ['b'], 'prepend': ['d']})\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS, ['d', 'c', 'b'])\n./tests/settings_tests/tests.py:    @override_settings(TEST='override2')\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST, 'override2')\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST_OUTER, 'outer')\n./tests/settings_tests/tests.py:@modify_settings(ITEMS={\n./tests/settings_tests/tests.py:@override_settings(ITEMS=['a', 'c', 'e'], TEST='override')\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS, ['b', 'c', 'd'])\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST, 'override')\n./tests/settings_tests/tests.py:    @modify_settings(ITEMS={\n./tests/settings_tests/tests.py:    @override_settings(TEST='override2')\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS, ['a', 'b', 'd', 'e'])\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST, 'override2')\n./tests/settings_tests/tests.py:@override_settings(TEST='override')\n./tests/settings_tests/tests.py:        cls.foo = getattr(settings, 'TEST', 'BUG')\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST, 'override')\n./tests/settings_tests/tests.py:    @override_settings(TEST='override2')\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST, 'override2')\n./tests/settings_tests/tests.py:@modify_settings(ITEMS={'append': 'mother'})\n./tests/settings_tests/tests.py:@override_settings(ITEMS=['father'], TEST='override-parent')\n./tests/settings_tests/tests.py:@modify_settings(ITEMS={'append': ['child']})\n./tests/settings_tests/tests.py:@override_settings(TEST='override-child')\n./tests/settings_tests/tests.py:    def test_override_settings_inheritance(self):\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS, ['father', 'mother', 'child'])\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST, 'override-child')\n./tests/settings_tests/tests.py:        settings.TEST = 'test'\n./tests/settings_tests/tests.py:        self.assertEqual('test', settings.TEST)\n./tests/settings_tests/tests.py:        with self.settings(TEST='override'):\n./tests/settings_tests/tests.py:            self.assertEqual('override', settings.TEST)\n./tests/settings_tests/tests.py:        self.assertEqual('test', settings.TEST)\n./tests/settings_tests/tests.py:        del settings.TEST\n./tests/settings_tests/tests.py:        settings.TEST = 'test'\n./tests/settings_tests/tests.py:        self.assertEqual('test', settings.TEST)\n./tests/settings_tests/tests.py:        with self.settings(TEST='override'):\n./tests/settings_tests/tests.py:            self.assertEqual('override', settings.TEST)\n./tests/settings_tests/tests.py:            settings.TEST = 'test2'\n./tests/settings_tests/tests.py:        self.assertEqual('test', settings.TEST)\n./tests/settings_tests/tests.py:        del settings.TEST\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:        with self.settings(TEST='override'):\n./tests/settings_tests/tests.py:            self.assertEqual('override', settings.TEST)\n./tests/settings_tests/tests.py:            settings.TEST = 'test'\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:    @override_settings(TEST='override')\n./tests/settings_tests/tests.py:        self.assertEqual('override', settings.TEST)\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:        override = override_settings(TEST='override')\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:        self.assertEqual('override', settings.TEST)\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:        # SimpleTestCase can be decorated by override_settings, but not ut.TestCase\n./tests/settings_tests/tests.py:        decorated = override_settings(TEST='override')(SimpleTestCaseSubclass)\n./tests/settings_tests/tests.py:            decorated = override_settings(TEST='override')(UnittestTestCaseSubclass)\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:        with self.settings(TEST='override'):\n./tests/settings_tests/tests.py:    @override_settings(TEST='override')\n./tests/settings_tests/tests.py:    # Regression tests for #10130: deleting settings.\n./tests/settings_tests/tests.py:    def test_settings_delete(self):\n./tests/settings_tests/tests.py:        settings.TEST = 'test'\n./tests/settings_tests/tests.py:        self.assertEqual('test', settings.TEST)\n./tests/settings_tests/tests.py:        del settings.TEST\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:    def test_settings_delete_wrapped(self):\n./tests/settings_tests/tests.py:            delattr(settings, '_wrapped')\n./tests/settings_tests/tests.py:    def test_override_settings_delete(self):\n./tests/settings_tests/tests.py:        Allow deletion of a setting in an overridden settings set (#18824)\n./tests/settings_tests/tests.py:        previous_i18n = settings.USE_I18N\n./tests/settings_tests/tests.py:        previous_l10n = settings.USE_L10N\n./tests/settings_tests/tests.py:        with self.settings(USE_I18N=False):\n./tests/settings_tests/tests.py:            del settings.USE_I18N\n./tests/settings_tests/tests.py:                getattr(settings, 'USE_I18N')\n./tests/settings_tests/tests.py:            del settings.USE_L10N\n./tests/settings_tests/tests.py:                getattr(settings, 'USE_L10N')\n./tests/settings_tests/tests.py:            self.assertNotIn('USE_I18N', dir(settings))\n./tests/settings_tests/tests.py:            self.assertNotIn('USE_L10N', dir(settings))\n./tests/settings_tests/tests.py:        self.assertEqual(settings.USE_I18N, previous_i18n)\n./tests/settings_tests/tests.py:        self.assertEqual(settings.USE_L10N, previous_l10n)\n./tests/settings_tests/tests.py:    def test_override_settings_nested(self):\n./tests/settings_tests/tests.py:        override_settings uses the actual _wrapped attribute at\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST2')\n./tests/settings_tests/tests.py:        inner = override_settings(TEST2='override')\n./tests/settings_tests/tests.py:        with override_settings(TEST='override'):\n./tests/settings_tests/tests.py:            self.assertEqual('override', settings.TEST)\n./tests/settings_tests/tests.py:                self.assertEqual('override', settings.TEST)\n./tests/settings_tests/tests.py:                self.assertEqual('override', settings.TEST2)\n./tests/settings_tests/tests.py:            # inner's __exit__ should have restored the settings of the outer\n./tests/settings_tests/tests.py:            self.assertEqual('override', settings.TEST)\n./tests/settings_tests/tests.py:                getattr(settings, 'TEST2')\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST2')\n./tests/settings_tests/tests.py:        settings_module = ModuleType('fake_settings_module')\n./tests/settings_tests/tests.py:        sys.modules['fake_settings_module'] = settings_module\n./tests/settings_tests/tests.py:                Settings('fake_settings_module')\n./tests/settings_tests/tests.py:            del sys.modules['fake_settings_module']\n./tests/settings_tests/tests.py:    def test_no_settings_module(self):\n./tests/settings_tests/tests.py:            'Requested setting%s, but settings are not configured. You '\n./tests/settings_tests/tests.py:            'or call settings.configure() before accessing settings.'\n./tests/settings_tests/tests.py:        orig_settings = os.environ[ENVIRONMENT_VARIABLE]\n./tests/settings_tests/tests.py:                settings._setup()\n./tests/settings_tests/tests.py:                settings._setup('TEST')\n./tests/settings_tests/tests.py:            os.environ[ENVIRONMENT_VARIABLE] = orig_settings\n./tests/settings_tests/tests.py:            settings.configure()\n./tests/settings_tests/tests.py:    def test_nonupper_settings_prohibited_in_configure(self):\n./tests/settings_tests/tests.py:    def test_nonupper_settings_ignored_in_default_settings(self):\n./tests/settings_tests/tests.py:    @mock.patch('django.conf.global_settings.TIME_ZONE', 'test')\n./tests/settings_tests/tests.py:            settings._setup()\n./tests/settings_tests/tests.py:        self.old_warn_override_settings = signals.COMPLEX_OVERRIDE_SETTINGS.copy()\n./tests/settings_tests/tests.py:        signals.COMPLEX_OVERRIDE_SETTINGS = self.old_warn_override_settings\n./tests/settings_tests/tests.py:            with override_settings(TEST_WARN='override'):\n./tests/settings_tests/tests.py:                self.assertEqual(settings.TEST_WARN, 'override')\n./tests/settings_tests/tests.py:    @override_settings(SECURE_PROXY_SSL_HEADER=None)\n./tests/settings_tests/tests.py:    @override_settings(SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTOCOL', 'https'))\n./tests/settings_tests/tests.py:    @override_settings(SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTOCOL', 'https'))\n./tests/settings_tests/tests.py:    @override_settings(SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTOCOL', 'https'))\n./tests/settings_tests/tests.py:    @override_settings(SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTOCOL', 'https'))\n./tests/settings_tests/tests.py:        settings_module = ModuleType('fake_settings_module')\n./tests/settings_tests/tests.py:        settings_module.SECRET_KEY = 'foo'\n./tests/settings_tests/tests.py:        sys.modules['fake_settings_module'] = settings_module\n./tests/settings_tests/tests.py:            s = Settings('fake_settings_module')\n./tests/settings_tests/tests.py:            del sys.modules['fake_settings_module']\n./tests/settings_tests/tests.py:        self.assertFalse(settings.is_overridden('ALLOWED_HOSTS'))\n./tests/settings_tests/tests.py:        with override_settings(ALLOWED_HOSTS=[]):\n./tests/settings_tests/tests.py:            self.assertTrue(settings.is_overridden('ALLOWED_HOSTS'))\n./tests/settings_tests/tests.py:    def test_unevaluated_lazysettings_repr(self):\n./tests/settings_tests/tests.py:        lazy_settings = LazySettings()\n./tests/settings_tests/tests.py:        self.assertEqual(repr(lazy_settings), expected)\n./tests/settings_tests/tests.py:    def test_evaluated_lazysettings_repr(self):\n./tests/settings_tests/tests.py:        lazy_settings = LazySettings()\n./tests/settings_tests/tests.py:        lazy_settings.APPEND_SLASH\n./tests/settings_tests/tests.py:        self.assertEqual(repr(lazy_settings), expected)\n./tests/settings_tests/tests.py:    def test_usersettingsholder_repr(self):\n./tests/settings_tests/tests.py:        lazy_settings = LazySettings()\n./tests/settings_tests/tests.py:        lazy_settings.configure(APPEND_SLASH=False)\n./tests/settings_tests/tests.py:        self.assertEqual(repr(lazy_settings._wrapped), expected)\n./tests/settings_tests/tests.py:    def test_settings_repr(self):\n./tests/settings_tests/tests.py:        lazy_settings = Settings(module)\n./tests/settings_tests/tests.py:        self.assertEqual(repr(lazy_settings), expected)\n./tests/settings_tests/tests.py:    Make sure settings that should be lists or tuples throw\n./tests/settings_tests/tests.py:    list_or_tuple_settings = (\n./tests/settings_tests/tests.py:    def test_tuple_settings(self):\n./tests/settings_tests/tests.py:        settings_module = ModuleType('fake_settings_module')\n./tests/settings_tests/tests.py:        settings_module.SECRET_KEY = 'foo'\n./tests/settings_tests/tests.py:        for setting in self.list_or_tuple_settings:\n./tests/settings_tests/tests.py:            setattr(settings_module, setting, ('non_list_or_tuple_value'))\n./tests/settings_tests/tests.py:            sys.modules['fake_settings_module'] = settings_module\n./tests/settings_tests/tests.py:                    Settings('fake_settings_module')\n./tests/settings_tests/tests.py:                del sys.modules['fake_settings_module']\n./tests/settings_tests/tests.py:                delattr(settings_module, setting)\n./tests/settings_tests/tests.py:    The override_settings context manager restore settings if one of the\n./tests/settings_tests/tests.py:        A receiver that fails while certain settings are being changed.\n./tests/settings_tests/tests.py:    def check_settings(self):\n./tests/settings_tests/tests.py:        \"\"\"Assert that settings for these tests aren't present.\"\"\"\n./tests/settings_tests/tests.py:        self.assertFalse(hasattr(settings, 'SETTING_BOTH'))\n./tests/settings_tests/tests.py:        self.assertFalse(hasattr(settings, 'SETTING_ENTER'))\n./tests/settings_tests/tests.py:        self.assertFalse(hasattr(settings, 'SETTING_EXIT'))\n./tests/settings_tests/tests.py:        self.assertFalse(hasattr(settings, 'SETTING_PASS'))\n./tests/settings_tests/tests.py:    def test_override_settings_both(self):\n./tests/settings_tests/tests.py:            with override_settings(SETTING_PASS='BOTH', SETTING_BOTH='BOTH'):\n./tests/settings_tests/tests.py:        self.check_settings()\n./tests/settings_tests/tests.py:        # Two settings were touched, so expect two calls of `spy_receiver`.\n./tests/settings_tests/tests.py:    def test_override_settings_enter(self):\n./tests/settings_tests/tests.py:            with override_settings(SETTING_PASS='ENTER', SETTING_ENTER='ENTER'):\n./tests/settings_tests/tests.py:        self.check_settings()\n./tests/settings_tests/tests.py:        # Two settings were touched, so expect two calls of `spy_receiver`.\n./tests/settings_tests/tests.py:    def test_override_settings_exit(self):\n./tests/settings_tests/tests.py:            with override_settings(SETTING_PASS='EXIT', SETTING_EXIT='EXIT'):\n./tests/settings_tests/tests.py:        self.check_settings()\n./tests/settings_tests/tests.py:        # Two settings were touched, so expect two calls of `spy_receiver`.\n./tests/settings_tests/tests.py:    def test_override_settings_reusable_on_enter(self):\n./tests/settings_tests/tests.py:        Error is raised correctly when reusing the same override_settings\n./tests/settings_tests/tests.py:        @override_settings(SETTING_ENTER='ENTER')\n./tests/settings_tests/test_file_charset.py:from django.conf import FILE_CHARSET_DEPRECATED_MSG, Settings, settings\n./tests/settings_tests/test_file_charset.py:    def test_override_settings_warning(self):\n./tests/settings_tests/test_file_charset.py:            with self.settings(FILE_CHARSET='latin1'):\n./tests/settings_tests/test_file_charset.py:    def test_settings_init_warning(self):\n./tests/settings_tests/test_file_charset.py:        settings_module = ModuleType('fake_settings_module')\n./tests/settings_tests/test_file_charset.py:        settings_module.FILE_CHARSET = 'latin1'\n./tests/settings_tests/test_file_charset.py:        settings_module.SECRET_KEY = 'ABC'\n./tests/settings_tests/test_file_charset.py:        sys.modules['fake_settings_module'] = settings_module\n./tests/settings_tests/test_file_charset.py:                Settings('fake_settings_module')\n./tests/settings_tests/test_file_charset.py:            del sys.modules['fake_settings_module']\n./tests/settings_tests/test_file_charset.py:            settings.FILE_CHARSET\n./tests/settings_tests/test_file_charset.py:            settings.FILE_CHARSET\n./tests/settings_tests/test_file_charset.py:        with self.settings(FILE_CHARSET='latin1'):\n./tests/settings_tests/test_file_charset.py:            self.assertEqual(settings.FILE_CHARSET, 'latin1')\n./tests/settings_tests/test_file_charset.py:            self.assertEqual(settings.FILE_CHARSET, 'latin1')\n./tests/responses/tests.py:from django.conf import settings\n./tests/responses/tests.py:        self.assertEqual(response.charset, settings.DEFAULT_CHARSET)\n./tests/responses/tests.py:        self.assertEqual(response.charset, settings.DEFAULT_CHARSET)\n./tests/responses/tests.py:        self.assertEqual(response.charset, settings.DEFAULT_CHARSET)\n./tests/serializers/tests.py:from django.test import SimpleTestCase, override_settings, skipUnlessDBFeature\n./tests/serializers/tests.py:@override_settings(\n./tests/admin_filters/tests.py:from django.test import RequestFactory, TestCase, override_settings\n./tests/admin_filters/tests.py:    @override_settings(USE_TZ=True)\n./tests/generic_views/test_detail.py:from django.test import TestCase, override_settings\n./tests/generic_views/test_detail.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_base.py:from django.test import RequestFactory, SimpleTestCase, override_settings\n./tests/generic_views/test_base.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_base.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_dates.py:from django.test import TestCase, override_settings, skipUnlessDBFeature\n./tests/generic_views/test_dates.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_dates.py:    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Nairobi')\n./tests/generic_views/test_dates.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_dates.py:    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Nairobi')\n./tests/generic_views/test_dates.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_dates.py:    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Nairobi')\n./tests/generic_views/test_dates.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_dates.py:    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Nairobi')\n./tests/generic_views/test_dates.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_dates.py:    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Nairobi')\n./tests/generic_views/test_dates.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_dates.py:    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Nairobi')\n./tests/generic_views/test_edit.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/generic_views/test_edit.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_edit.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_edit.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_edit.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_list.py:from django.test import TestCase, override_settings\n./tests/generic_views/test_list.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_list.py:    @override_settings(DEBUG=True)\n./tests/bulk_create/tests.py:    TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n./tests/bulk_create/tests.py:        with override_settings(DEBUG=True):\n./tests/bulk_create/tests.py:        with override_settings(DEBUG=True):\n./tests/project_template/test_settings.py:        template_settings_py = os.path.join(\n./tests/project_template/test_settings.py:            'settings.py-tpl',\n./tests/project_template/test_settings.py:        test_settings_py = os.path.join(self.temp_dir.name, 'test_settings.py')\n./tests/project_template/test_settings.py:        shutil.copyfile(template_settings_py, test_settings_py)\n./tests/project_template/test_settings.py:            from test_settings import MIDDLEWARE\n./tests/project_template/test_settings.py:        with self.settings(\n./tests/apps/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['apps.apps.BadConfig']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['apps.apps.NotAConfig']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['there is no such app']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['apps.apps.NoSuchApp']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['apps.NoSuchConfig']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['apps.apps.NoSuchConfig']):\n./tests/apps/tests.py:        with self.settings(INSTALLED_APPS=['apps.default_config_app']):\n./tests/apps/tests.py:    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n./tests/apps/tests.py:    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n./tests/apps/tests.py:    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n./tests/apps/tests.py:    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n./tests/apps/tests.py:    @override_settings(INSTALLED_APPS=['apps.apps.RelabeledAppsConfig'])\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['apps.apps.PlainAppsConfig', 'apps']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['apps.apps.RelabeledAppsConfig', 'apps']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['import_error_package']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['nsapp']):\n./tests/apps/tests.py:                with self.settings(INSTALLED_APPS=['nsapp']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['nsapp.apps.NSAppConfig']):\n./scripts/manage_translations.py:from django.conf import settings\n./scripts/manage_translations.py:    settings.configure()\n",
      "response": "It seems the 'tests.py' file in 'settings_tests/' does not contain any references to 'DEBUG'. Let's take a step back and think about where the DEBUG setting might be defined in a typical Django project.\n\nIn a standard Django project, the main settings file is usually located in the project's root directory or in a 'config/' or 'settings/' subdirectory. However, this repository appears to have a non-standard structure.\n\nLet's search for 'settings' in all Python files in the repository to see if we can find where the main settings file might be located:\n\n<command>\nfind . -name \"*.py\" -exec grep -H \"settings\" {} \\;\n</command>",
      "state": "{\"open_file\": \"n/a\", \"working_dir\": \"/django__django\"}\n",
      "thought": "It seems the 'tests.py' file in 'settings_tests/' does not contain any references to 'DEBUG'. Let's take a step back and think about where the DEBUG setting might be defined in a typical Django project.\n\nIn a standard Django project, the main settings file is usually located in the project's root directory or in a 'config/' or 'settings/' subdirectory. However, this repository appears to have a non-standard structure.\n\nLet's search for 'settings' in all Python files in the repository to see if we can find where the main settings file might be located:"
    },
    {
      "action": "create tests/path_converter_tests.py",
      "observation": "[File: /django__django/tests/path_converter_tests.py (1 lines total)]\n1:\n",
      "response": "It looks like the issue is related to raising Http404 in a path converter's to_python() method. To reproduce this, we'll need to:\n\n1. Create a custom path converter that raises Http404 in its to_python() method\n2. Configure a URL pattern that uses this converter \n3. Make a request to a URL that will trigger the Http404\n4. Check that we get the unhelpful error message\n\nLet's start by creating a new file to define the custom path converter:\n\n<command>\ncreate tests/path_converter_tests.py\n</command>",
      "state": "{\"open_file\": \"n/a\", \"working_dir\": \"/django__django\"}\n",
      "thought": "It looks like the issue is related to raising Http404 in a path converter's to_python() method. To reproduce this, we'll need to:\n\n1. Create a custom path converter that raises Http404 in its to_python() method\n2. Configure a URL pattern that uses this converter \n3. Make a request to a URL that will trigger the Http404\n4. Check that we get the unhelpful error message\n\nLet's start by creating a new file to define the custom path converter:"
    },
    {
      "action": "exit_cost",
      "observation": "Exited (autosubmitted)",
      "response": "Exit due to cost limit",
      "state": "{\"open_file\": \"/django__django/tests/path_converter_tests.py\", \"working_dir\": \"/django__django\"}\n",
      "thought": "Exit due to cost limit"
    }
  ],
  "history": [
    {
      "role": "system",
      "content": "SETTING: You are an autonomous programmer, and you're working directly in the command line with a special interface.\n\nThe special interface consists of a file editor that shows you 100 lines of a file at a time.\nIn addition to typical bash commands, you can also use the following commands to help you navigate and edit files.\n\nCOMMANDS:\nopen:\n  docstring: opens the file at the given path in the editor. If line_number is provided, the window will be move to include that line\n  signature: open <path> [<line_number>]\n  arguments:\n    - path (string) [required]: the path to the file to open\n    - line_number (integer) [optional]: the line number to move the window to (if not provided, the window will start at the top of the file)\n\ngoto:\n  docstring: moves the window to show <line_number>\n  signature: goto <line_number>\n  arguments:\n    - line_number (integer) [required]: the line number to move the window to\n\nscroll_down:\n  docstring: moves the window down {WINDOW} lines\n  signature: scroll_down\n\nscroll_up:\n  docstring: moves the window down {WINDOW} lines\n  signature: scroll_down\n\ncreate:\n  docstring: creates and opens a new file with the given name\n  signature: create <filename>\n  arguments:\n    - filename (string) [required]: the name of the file to create\n\nsubmit:\n  docstring: submits your current code and terminates the session\n  signature: submit\n\nsearch_dir:\n  docstring: searches for search_term in all files in dir. If dir is not provided, searches in the current directory\n  signature: search_dir <search_term> [<dir>]\n  arguments:\n    - search_term (string) [required]: the term to search for\n    - dir (string) [optional]: the directory to search in (if not provided, searches in the current directory)\n\nsearch_file:\n  docstring: searches for search_term in file. If file is not provided, searches in the current open file\n  signature: search_file <search_term> [<file>]\n  arguments:\n    - search_term (string) [required]: the term to search for\n    - file (string) [optional]: the file to search in (if not provided, searches in the current open file)\n\nfind_file:\n  docstring: finds all files with the given name in dir. If dir is not provided, searches in the current directory\n  signature: find_file <file_name> [<dir>]\n  arguments:\n    - file_name (string) [required]: the name of the file to search for\n    - dir (string) [optional]: the directory to search in (if not provided, searches in the current directory)\n\nedit:\n  docstring: replaces lines <start_line> through <end_line> (inclusive) with the given text in the open file. The replacement text is terminated by a line with only end_of_edit on it. All of the <replacement text> will be entered, so make sure your indentation is formatted properly. Python files will be checked for syntax errors after the edit. If the system detects a syntax error, the edit will not be executed. Simply try to edit the file again, but make sure to read the error message and modify the edit command you issue accordingly. Issuing the same command a second time will just lead to the same error message again.\n  signature: edit <start_line>:<end_line>\n<replacement_text>\nend_of_edit\n  arguments:\n    - start_line (integer) [required]: the line number to start the edit at\n    - end_line (integer) [required]: the line number to end the edit at (inclusive)\n    - replacement_text (string) [required]: the text to replace the current selection with\n\n\n\nPlease note that THE EDIT COMMAND REQUIRES PROPER INDENTATION. \nIf you'd like to add the line '        print(x)' you must fully write that out, with all those spaces before the code! Indentation is important and code that is not idented correctly will fail and require fixing before it can be run.\n\nRESPONSE FORMAT:\nYour shell prompt is formatted as follows:\n(Open file: <path>) <cwd> $\n\nYou need to format your output using two fields; discussion and command.\nYour output should always include _one_ discussion and _one_ command field EXACTLY as in the following example:\nDISCUSSION\nFirst I'll start by using ls to see what files are in the current directory. Then maybe we can look at some relevant files to see what they look like.\n<command>\nls -a\n</command>\n\nYou should only include a *SINGLE* command in the command section and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.\nIf you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first command, and then after receiving a response you'll be able to issue the second command. \nYou're free to use any other bash commands you want (e.g. find, grep, cat, ls, cd) in addition to the special commands listed above.\nHowever, the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them.",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "We're currently solving the following issue within our repository. Here's the issue text:\nISSUE:\nTimeDelta serialization precision\nHi there!\n\nI just found quite strange behaviour of `TimeDelta` field serialization\n\n```python3\nfrom marshmallow.fields import TimeDelta\nfrom datetime import timedelta\n\ntd_field = TimeDelta(precision=\"milliseconds\")\n\nobj = dict()\nobj[\"td_field\"] = timedelta(milliseconds=345)\n\nprint(td_field.serialize(\"td_field\", obj))\n```\n\nOutput of this snippet is `344`, but it seems that `345` is correct.\n\nLooks like a rounding issue here: https://github.com/marshmallow-code/marshmallow/blob/dev/src/marshmallow/fields.py#L1474\n\n\nINSTRUCTIONS:\nNow, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want. \nRemember, YOU CAN ONLY ENTER ONE COMMAND AT A TIME. You should always wait for feedback after every command. \nWhen you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.\nNote however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with `python <script_name>.py`.\n\nNOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line!\n\nIMPORTANT TIPS:\n1. Always start by trying to replicate the bug that the issues discusses. \n   If the issue includes code for reproducing the bug, we recommend that you re-implement that in your environment, and run it to make sure you can reproduce the bug.\n   Then start trying to fix it.\n   When you think you've fixed the bug, re-run the bug reproduction script to make sure that the bug has indeed been fixed.\n   \n   If the bug reproduction script does not print anything when it succesfully runs, we recommend adding a print(\"Script completed successfully, no errors.\") command at the end of the file,\n   so that you can be sure that the script indeed ran fine all the way through. \n\n2. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!\n\n3. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker. \n   \n4. If the bug reproduction script requires inputting/reading a specific file, such as buggy-input.png, and you'd like to understand how to input that file, conduct a search in the existing repo code, to see whether someone else has already done that. Do this by running the command: find_file \"buggy-input.png\" If that doensn't work, use the linux 'find' command. \n\n5. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current  open file.\n\n6. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.\n   \n\n(Open file: n/a)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "Let's first start by reproducing the results of the issue. The issue includes some example code for reproduction, which we can use. We'll create a new file called `reproduce.py` and paste the example code into it.\n<command>\ncreate reproduce.py\n</command>",
      "thought": "Let's first start by reproducing the results of the issue. The issue includes some example code for reproduction, which we can use. We'll create a new file called `reproduce.py` and paste the example code into it.",
      "action": "create reproduce.py",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "[File: /marshmallow-code__marshmallow/reproduce.py (1 lines total)]\n1:\n\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "Now let's paste in the example code from the issue.\n<command>\nedit 1:1\nfrom marshmallow.fields import TimeDelta\nfrom datetime import timedelta\n\ntd_field = TimeDelta(precision=\"milliseconds\")\n\nobj = dict()\nobj[\"td_field\"] = timedelta(milliseconds=345)\n\nprint(td_field.serialize(\"td_field\", obj))\nend_of_edit\n</command>",
      "thought": "Now let's paste in the example code from the issue.",
      "action": "edit 1:1\nfrom marshmallow.fields import TimeDelta\nfrom datetime import timedelta\n\ntd_field = TimeDelta(precision=\"milliseconds\")\n\nobj = dict()\nobj[\"td_field\"] = timedelta(milliseconds=345)\n\nprint(td_field.serialize(\"td_field\", obj))\nend_of_edit",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "[File: /marshmallow-code__marshmallow/reproduce.py (9 lines total)]\n1:from marshmallow.fields import TimeDelta\n2:from datetime import timedelta\n3:\n4:td_field = TimeDelta(precision=\"milliseconds\")\n5:\n6:obj = dict()\n7:obj[\"td_field\"] = timedelta(milliseconds=345)\n8:\n9:print(td_field.serialize(\"td_field\", obj))\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\n\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "Now let's run the code to see if we see the same output as the issue.\n<command>\npython reproduce.py\n</command>",
      "thought": "Now let's run the code to see if we see the same output as the issue.",
      "action": "python reproduce.py",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "344\n\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "We are indeed seeing the same output as the issue. The issue suggests that we should look at line 1474 of the `fields.py` file to see if there is a rounding issue. Let's open the `fields.py` file and navigate to line 1474 to see the relevant code. First we should find the `fields.py` file in the repository. It is likely to be in the `src/marshmallow` directory, but we should check to be sure.\n<command>\nls -F\n</command>",
      "thought": "We are indeed seeing the same output as the issue. The issue suggests that we should look at line 1474 of the `fields.py` file to see if there is a rounding issue. Let's open the `fields.py` file and navigate to line 1474 to see the relevant code. First we should find the `fields.py` file in the repository. It is likely to be in the `src/marshmallow` directory, but we should check to be sure.",
      "action": "ls -F",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "AUTHORS.rst\nCHANGELOG.rst\nCODE_OF_CONDUCT.md\nCONTRIBUTING.rst\nLICENSE\nMANIFEST.in\nNOTICE\nREADME.rst\nRELEASING.md\nazure-pipelines.yml\ndocs/\nexamples/\nperformance/\npyproject.toml\nreproduce.py\nsetup.cfg\nsetup.py\nsrc/\ntests/\ntox.ini\n\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "It looks like the `src` directory is present, which suggests that the `fields.py` file is likely to be in the `src` directory. Let's use find_file to see where it is.\n<command>\nfind_file \"fields.py\" src\n</command>",
      "thought": "It looks like the `src` directory is present, which suggests that the `fields.py` file is likely to be in the `src` directory. Let's use find_file to see where it is.",
      "action": "find_file \"fields.py\" src",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "Found 1 matches for \"fields.py\" in /marshmallow-code__marshmallow/src:\n/marshmallow-code__marshmallow/src/marshmallow/fields.py\n\n(Open file: /marshmallow-code__marshmallow/reproduce.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "It looks like the `fields.py` file is present in the `./src/marshmallow/` directory. The issue also points to a specific URL with line number 1474. We should navigate to that line in fields.py to see the relevant code for the `TimeDelta` serialization.\n<command>\nopen src/marshmallow/fields.py 1474\n</command>",
      "thought": "It looks like the `fields.py` file is present in the `./src/marshmallow/` directory. The issue also points to a specific URL with line number 1474. We should navigate to that line in fields.py to see the relevant code for the `TimeDelta` serialization.",
      "action": "open src/marshmallow/fields.py 1474",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\n(1458 more lines above)\n1459:            self.WEEKS,\n1460:        )\n1461:\n1462:        if precision not in units:\n1463:            msg = 'The precision must be {} or \"{}\".'.format(\n1464:                \", \".join([f'\"{each}\"' for each in units[:-1]]), units[-1]\n1465:            )\n1466:            raise ValueError(msg)\n1467:\n1468:        self.precision = precision\n1469:        super().__init__(**kwargs)\n1470:\n1471:    def _serialize(self, value, attr, obj, **kwargs):\n1472:        if value is None:\n1473:            return None\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\n1475:        return int(value.total_seconds() / base_unit.total_seconds())\n1476:\n1477:    def _deserialize(self, value, attr, data, **kwargs):\n1478:        try:\n1479:            value = int(value)\n1480:        except (TypeError, ValueError) as error:\n1481:            raise self.make_error(\"invalid\") from error\n1482:\n1483:        kwargs = {self.precision: value}\n1484:\n1485:        try:\n1486:            return dt.timedelta(**kwargs)\n1487:        except OverflowError as error:\n1488:            raise self.make_error(\"invalid\") from error\n1489:\n1490:\n1491:class Mapping(Field):\n1492:    \"\"\"An abstract class for objects with key-value pairs.\n1493:\n1494:    :param keys: A field class or instance for dict keys.\n1495:    :param values: A field class or instance for dict values.\n1496:    :param kwargs: The same keyword arguments that :class:`Field` receives.\n1497:\n1498:    .. note::\n1499:        When the structure of nested data is not known, you may omit the\n1500:        `keys` and `values` arguments to prevent content validation.\n1501:\n1502:    .. versionadded:: 3.0.0rc4\n1503:    \"\"\"\n1504:\n1505:    mapping_type = dict\n1506:\n1507:    #: Default error messages.\n1508:    default_error_messages = {\"invalid\": \"Not a valid mapping type.\"}\n1509:\n1510:    def __init__(\n1511:        self,\n1512:        keys: typing.Optional[typing.Union[Field, type]] = None,\n1513:        values: typing.Optional[typing.Union[Field, type]] = None,\n1514:        **kwargs,\n1515:    ):\n1516:        super().__init__(**kwargs)\n1517:        if keys is None:\n1518:            self.key_field = None\n1519:        else:\n1520:            try:\n1521:                self.key_field = resolve_field_instance(keys)\n1522:            except FieldInstanceResolutionError as error:\n1523:                raise ValueError(\n1524:                    '\"keys\" must be a subclass or instance of '\n1525:                    \"marshmallow.base.FieldABC.\"\n1526:                ) from error\n1527:\n1528:        if values is None:\n1529:            self.value_field = None\n1530:        else:\n1531:            try:\n1532:                self.value_field = resolve_field_instance(values)\n1533:            except FieldInstanceResolutionError as error:\n1534:                raise ValueError(\n1535:                    '\"values\" must be a subclass or instance of '\n1536:                    \"marshmallow.base.FieldABC.\"\n1537:                ) from error\n1538:            if isinstance(self.value_field, Nested):\n1539:                self.only = self.value_field.only\n1540:                self.exclude = self.value_field.exclude\n1541:\n1542:    def _bind_to_schema(self, field_name, schema):\n1543:        super()._bind_to_schema(field_name, schema)\n1544:        if self.value_field:\n1545:            self.value_field = copy.deepcopy(self.value_field)\n1546:            self.value_field._bind_to_schema(field_name, self)\n1547:        if isinstance(self.value_field, Nested):\n1548:            self.value_field.only = self.only\n1549:            self.value_field.exclude = self.exclude\n1550:        if self.key_field:\n1551:            self.key_field = copy.deepcopy(self.key_field)\n1552:            self.key_field._bind_to_schema(field_name, self)\n1553:\n1554:    def _serialize(self, value, attr, obj, **kwargs):\n1555:        if value is None:\n1556:            return None\n1557:        if not self.value_field and not self.key_field:\n1558:            return self.mapping_type(value)\n(439 more lines below)\n\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "We are now looking at the relevant section of the `fields.py` file where the `TimeDelta` serialization occurs. The issue suggests that there is a rounding problem near line 1474. The current implementation uses integer division, which truncates the decimal part and can lead to incorrect rounding on line 1475.To fix this issue, we should ensure that the division results in a float, and then round the result to the nearest integer before converting it to an int. This should preserve the milliseconds precision as expected. Let's make the necessary edit to the code.\n<command>\nedit 1475:1475\nreturn int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\nend_of_edit\n</command>",
      "thought": "We are now looking at the relevant section of the `fields.py` file where the `TimeDelta` serialization occurs. The issue suggests that there is a rounding problem near line 1474. The current implementation uses integer division, which truncates the decimal part and can lead to incorrect rounding on line 1475.To fix this issue, we should ensure that the division results in a float, and then round the result to the nearest integer before converting it to an int. This should preserve the milliseconds precision as expected. Let's make the necessary edit to the code.",
      "action": "edit 1475:1475\nreturn int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\nend_of_edit",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "Your proposed edit has introduced new syntax error(s). Please understand the fixes and retry your edit commmand.\n\nERRORS:\n- E999 IndentationError: unexpected indent\n\nThis is how your edit would have looked if applied\n-------------------------------------------------\n[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\n(1468 more lines above)\n1469:        super().__init__(**kwargs)\n1470:\n1471:    def _serialize(self, value, attr, obj, **kwargs):\n1472:        if value is None:\n1473:            return None\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\n1475:return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\n1476:\n1477:    def _deserialize(self, value, attr, data, **kwargs):\n1478:        try:\n1479:            value = int(value)\n(518 more lines below)\n-------------------------------------------------\n\nThis is the original code before your edit\n-------------------------------------------------\n[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\n(1469 more lines above)\n1470:\n1471:    def _serialize(self, value, attr, obj, **kwargs):\n1472:        if value is None:\n1473:            return None\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\n1475:        return int(value.total_seconds() / base_unit.total_seconds())\n1476:\n1477:    def _deserialize(self, value, attr, data, **kwargs):\n1478:        try:\n1479:            value = int(value)\n1480:        except (TypeError, ValueError) as error:\n(517 more lines below)\n-------------------------------------------------\nYour changes have NOT been applied. Please fix your edit command and try again.\nYou either need to 1) Specify the correct start/end line arguments or 2) Correct your edit code.\nDO NOT re-run the same failed edit command. Running it again will lead to the same error.\n\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "My edit command did not use the proper indentation, I will fix my syntax in this follow up edit command.\n<command>\nedit 1475:1475\n        return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\nend_of_edit\n</command>",
      "thought": "My edit command did not use the proper indentation, I will fix my syntax in this follow up edit command.",
      "action": "edit 1475:1475\n        return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\nend_of_edit",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "[File: /marshmallow-code__marshmallow/src/marshmallow/fields.py (1997 lines total)]\n(1424 more lines above)\n1425:\n1426:    :param precision: Influences how the integer is interpreted during\n1427:        (de)serialization. Must be 'days', 'seconds', 'microseconds',\n1428:        'milliseconds', 'minutes', 'hours' or 'weeks'.\n1429:    :param kwargs: The same keyword arguments that :class:`Field` receives.\n1430:\n1431:    .. versionchanged:: 2.0.0\n1432:        Always serializes to an integer value to avoid rounding errors.\n1433:        Add `precision` parameter.\n1434:    \"\"\"\n1435:\n1436:    DAYS = \"days\"\n1437:    SECONDS = \"seconds\"\n1438:    MICROSECONDS = \"microseconds\"\n1439:    MILLISECONDS = \"milliseconds\"\n1440:    MINUTES = \"minutes\"\n1441:    HOURS = \"hours\"\n1442:    WEEKS = \"weeks\"\n1443:\n1444:    #: Default error messages.\n1445:    default_error_messages = {\n1446:        \"invalid\": \"Not a valid period of time.\",\n1447:        \"format\": \"{input!r} cannot be formatted as a timedelta.\",\n1448:    }\n1449:\n1450:    def __init__(self, precision: str = SECONDS, **kwargs):\n1451:        precision = precision.lower()\n1452:        units = (\n1453:            self.DAYS,\n1454:            self.SECONDS,\n1455:            self.MICROSECONDS,\n1456:            self.MILLISECONDS,\n1457:            self.MINUTES,\n1458:            self.HOURS,\n1459:            self.WEEKS,\n1460:        )\n1461:\n1462:        if precision not in units:\n1463:            msg = 'The precision must be {} or \"{}\".'.format(\n1464:                \", \".join([f'\"{each}\"' for each in units[:-1]]), units[-1]\n1465:            )\n1466:            raise ValueError(msg)\n1467:\n1468:        self.precision = precision\n1469:        super().__init__(**kwargs)\n1470:\n1471:    def _serialize(self, value, attr, obj, **kwargs):\n1472:        if value is None:\n1473:            return None\n1474:        base_unit = dt.timedelta(**{self.precision: 1})\n1475:        return int(round(value.total_seconds() / base_unit.total_seconds()))  # round to nearest int\n1476:\n1477:    def _deserialize(self, value, attr, data, **kwargs):\n1478:        try:\n1479:            value = int(value)\n1480:        except (TypeError, ValueError) as error:\n1481:            raise self.make_error(\"invalid\") from error\n1482:\n1483:        kwargs = {self.precision: value}\n1484:\n1485:        try:\n1486:            return dt.timedelta(**kwargs)\n1487:        except OverflowError as error:\n1488:            raise self.make_error(\"invalid\") from error\n1489:\n1490:\n1491:class Mapping(Field):\n1492:    \"\"\"An abstract class for objects with key-value pairs.\n1493:\n1494:    :param keys: A field class or instance for dict keys.\n1495:    :param values: A field class or instance for dict values.\n1496:    :param kwargs: The same keyword arguments that :class:`Field` receives.\n1497:\n1498:    .. note::\n1499:        When the structure of nested data is not known, you may omit the\n1500:        `keys` and `values` arguments to prevent content validation.\n1501:\n1502:    .. versionadded:: 3.0.0rc4\n1503:    \"\"\"\n1504:\n1505:    mapping_type = dict\n1506:\n1507:    #: Default error messages.\n1508:    default_error_messages = {\"invalid\": \"Not a valid mapping type.\"}\n1509:\n1510:    def __init__(\n1511:        self,\n1512:        keys: typing.Optional[typing.Union[Field, type]] = None,\n1513:        values: typing.Optional[typing.Union[Field, type]] = None,\n1514:        **kwargs,\n1515:    ):\n1516:        super().__init__(**kwargs)\n1517:        if keys is None:\n1518:            self.key_field = None\n1519:        else:\n1520:            try:\n1521:                self.key_field = resolve_field_instance(keys)\n1522:            except FieldInstanceResolutionError as error:\n1523:                raise ValueError(\n1524:                    '\"keys\" must be a subclass or instance of '\n(473 more lines below)\nFile updated. Please review the changes and make sure they are correct (correct indentation, no duplicate lines, etc). Edit the file again if necessary.\n\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "The code has been updated to use the `round` function, which should fix the rounding issue. Before submitting the changes, it would be prudent to run the reproduce.py code again to ensure that this change has the desired effect. I see that \"Current directory\" is still `/marshmallow-code__marshmallow`, so we can just run `reproduce.py` directly.\n<command>\npython reproduce.py\n</command>",
      "thought": "The code has been updated to use the `round` function, which should fix the rounding issue. Before submitting the changes, it would be prudent to run the reproduce.py code again to ensure that this change has the desired effect. I see that \"Current directory\" is still `/marshmallow-code__marshmallow`, so we can just run `reproduce.py` directly.",
      "action": "python reproduce.py",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "345\n\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "The output has changed from 344 to 345, which suggests that the rounding issue has been fixed. Let's remove the reproduce.py file since it is no longer needed.\n<command>\nrm reproduce.py\n</command>",
      "thought": "The output has changed from 344 to 345, which suggests that the rounding issue has been fixed. Let's remove the reproduce.py file since it is no longer needed.",
      "action": "rm reproduce.py",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "Your command ran successfully and did not produce any output.\n(Open file: /marshmallow-code__marshmallow/src/marshmallow/fields.py)\n(Current directory: /marshmallow-code__marshmallow)\nbash-$",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "assistant",
      "content": "rm doesn't have any output when it deletes successfully, so that must have worked. Now that we have fixed the issue, we should submit our changes to the code base. Let's submit the changes using the `submit` command.\n<command>\nsubmit\n</command>",
      "thought": "rm doesn't have any output when it deletes successfully, so that must have worked. Now that we have fixed the issue, we should submit our changes to the code base. Let's submit the changes using the `submit` command.",
      "action": "submit",
      "agent": "primary",
      "is_demo": true
    },
    {
      "role": "user",
      "content": "We're currently solving the following issue within our repository. Here's the issue text:\nISSUE:\nWhen DEBUG is True, raising Http404 in a path converter's to_python method does not result in a technical response\nDescription\n\t\nThis is the response I get (plain text): \nA server error occurred. Please contact the administrator.\nI understand a ValueError should be raised which tells the URL resolver \"this path does not match, try next one\" but Http404 is what came to my mind intuitively and the error message was not very helpful.\nOne could also make a point that raising a Http404 should be valid way to tell the resolver \"this is indeed the right path but the current parameter value does not match anything so stop what you are doing and let the handler return the 404 page (including a helpful error message when DEBUG is True instead of the default 'Django tried these URL patterns')\".\nThis would prove useful for example to implement a path converter that uses get_object_or_404.\n\n\nINSTRUCTIONS:\nNow, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want. \nRemember, YOU CAN ONLY ENTER ONE COMMAND AT A TIME. You should always wait for feedback after every command. \nWhen you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.\nNote however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with `python <script_name>.py`.\n\nNOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line!\n\nIMPORTANT TIPS:\n1. Always start by trying to replicate the bug that the issues discusses. \n   If the issue includes code for reproducing the bug, we recommend that you re-implement that in your environment, and run it to make sure you can reproduce the bug.\n   Then start trying to fix it.\n   When you think you've fixed the bug, re-run the bug reproduction script to make sure that the bug has indeed been fixed.\n   \n   If the bug reproduction script does not print anything when it succesfully runs, we recommend adding a print(\"Script completed successfully, no errors.\") command at the end of the file,\n   so that you can be sure that the script indeed ran fine all the way through. \n\n2. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!\n\n3. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker. \n   \n4. If the bug reproduction script requires inputting/reading a specific file, such as buggy-input.png, and you'd like to understand how to input that file, conduct a search in the existing repo code, to see whether someone else has already done that. Do this by running the command: find_file \"buggy-input.png\" If that doensn't work, use the linux 'find' command. \n\n5. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current  open file.\n\n6. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.\n   \n\n(Open file: n/a)\n(Current directory: /django__django)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "Let's start by trying to reproduce the issue described in the bug report. The issue mentions that raising an Http404 exception in a path converter's to_python method results in an unhelpful error message when DEBUG is True.\n\nTo reproduce this, we'll need to:\n1. Set up a path converter that raises Http404 in its to_python method \n2. Configure a URL pattern that uses this converter\n3. Make a request to a URL that will trigger the Http404\n4. Ensure DEBUG is set to True in settings\n5. Check if we get the unhelpful error message\n\nFirst, let's find the relevant settings file to ensure DEBUG is True.\n<command>\nfind_file \"settings.py\"\n</command>",
      "thought": "Let's start by trying to reproduce the issue described in the bug report. The issue mentions that raising an Http404 exception in a path converter's to_python method results in an unhelpful error message when DEBUG is True.\n\nTo reproduce this, we'll need to:\n1. Set up a path converter that raises Http404 in its to_python method \n2. Configure a URL pattern that uses this converter\n3. Make a request to a URL that will trigger the Http404\n4. Ensure DEBUG is set to True in settings\n5. Check if we get the unhelpful error message\n\nFirst, let's find the relevant settings file to ensure DEBUG is True.",
      "action": "find_file \"settings.py\"",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "Found 5 matches for \"settings.py\" in /django__django:\n/django__django/tests/auth_tests/settings.py\n/django__django/tests/staticfiles_tests/settings.py\n/django__django/tests/admin_scripts/custom_templates/project_template/project_name/settings.py\n/django__django/tests/flatpages_tests/settings.py\n/django__django/tests/i18n/sampleproject/sampleproject/settings.py\n\n(Open file: n/a)\n(Current directory: /django__django)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "The settings files found are all in the tests directory, which suggests they are used for testing purposes. We should look for a settings file in the main Django project directory.\n\nLet's search in the django directory:\n\n<command>\nfind_file \"settings.py\" django\n</command>",
      "thought": "The settings files found are all in the tests directory, which suggests they are used for testing purposes. We should look for a settings file in the main Django project directory.\n\nLet's search in the django directory:",
      "action": "find_file \"settings.py\" django",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "No matches found for \"settings.py\" in /django__django/django\n\n(Open file: n/a)\n(Current directory: /django__django)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "Hmm, it seems there isn't a settings.py file in the main Django project directory. Django projects typically have a settings.py file in the project root, but this repository might have a different structure or use a different method for configuration.\n\nLet's look for any files or directories that might contain configuration or settings:\n\n<command>\nls -F\n</command>",
      "thought": "Hmm, it seems there isn't a settings.py file in the main Django project directory. Django projects typically have a settings.py file in the project root, but this repository might have a different structure or use a different method for configuration.\n\nLet's look for any files or directories that might contain configuration or settings:",
      "action": "ls -F",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "AUTHORS\nCONTRIBUTING.rst\nDjango.egg-info/\nFUNDING.yml\nGruntfile.js\nINSTALL\nLICENSE\nLICENSE.python\nMANIFEST.in\nREADME.rst\ndjango/\ndocs/\nextras/\njs_tests/\npackage.json\nscripts/\nsetup.cfg\nsetup.py\ntests/\ntox.ini\n\n(Open file: n/a)\n(Current directory: /django__django)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "I don't see any obvious settings or configuration files in the root directory. However, I do see a 'tests/' directory. Since the issue is related to DEBUG mode, which is often used during development and testing, it's possible the relevant settings are defined somewhere in the tests directory.\n\nLet's look inside the 'tests/' directory to see if we can find anything related to settings or configuration:\n\n<command>\nls -F tests\n</command>",
      "thought": "I don't see any obvious settings or configuration files in the root directory. However, I do see a 'tests/' directory. Since the issue is related to DEBUG mode, which is often used during development and testing, it's possible the relevant settings are defined somewhere in the tests directory.\n\nLet's look inside the 'tests/' directory to see if we can find anything related to settings or configuration:",
      "action": "ls -F tests",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "README.rst\nabsolute_url_overrides/\nadmin_autodiscover/\nadmin_changelist/\nadmin_checks/\nadmin_custom_urls/\nadmin_default_site/\nadmin_docs/\nadmin_filters/\nadmin_inlines/\nadmin_ordering/\nadmin_registration/\nadmin_scripts/\nadmin_utils/\nadmin_views/\nadmin_widgets/\naggregation/\naggregation_regress/\nannotations/\napp_loading/\napps/\nasgi/\nasync/\nauth_tests/\nbackends/\nbase/\nbash_completion/\nbasic/\nbuiltin_server/\nbulk_create/\ncache/\ncheck_framework/\nconditional_processing/\nconstraints/\ncontenttypes_tests/\ncontext_processors/\ncsrf_tests/\ncustom_columns/\ncustom_lookups/\ncustom_managers/\ncustom_methods/\ncustom_migration_operations/\ncustom_pk/\ndatatypes/\ndates/\ndatetimes/\ndb_functions/\ndb_typecasts/\ndb_utils/\ndbshell/\ndecorators/\ndefer/\ndefer_regress/\ndelete/\ndelete_regress/\ndeprecation/\ndispatch/\ndistinct_on_fields/\nempty/\nempty_models/\nexpressions/\nexpressions_case/\nexpressions_window/\nextra_regress/\nfield_deconstruction/\nfield_defaults/\nfield_subclassing/\nfile_storage/\nfile_uploads/\nfiles/\nfiltered_relation/\nfixtures/\nfixtures_model_package/\nfixtures_regress/\nflatpages_tests/\nforce_insert_update/\nforeign_object/\nforms_tests/\nfrom_db_value/\ngeneric_inline_admin/\ngeneric_relations/\ngeneric_relations_regress/\ngeneric_views/\nget_earliest_or_latest/\nget_object_or_404/\nget_or_create/\ngis_tests/\nhandlers/\nhttpwrappers/\nhumanize_tests/\ni18n/\nimport_error_package/\nindexes/\ninline_formsets/\ninspectdb/\nintrospection/\ninvalid_models_tests/\nknown_related_objects/\nlogging_tests/\nlookup/\nm2m_and_m2o/\nm2m_intermediary/\nm2m_multiple/\nm2m_recursive/\nm2m_regress/\nm2m_signals/\nm2m_through/\nm2m_through_regress/\nm2o_recursive/\nmail/\nmanagers_regress/\nmany_to_many/\nmany_to_one/\nmany_to_one_null/\nmax_lengths/\nmessages_tests/\nmiddleware/\nmiddleware_exceptions/\nmigrate_signals/\nmigration_test_data_persistence/\nmigrations/\nmigrations2/\nmodel_fields/\nmodel_forms/\nmodel_formsets/\nmodel_formsets_regress/\nmodel_indexes/\nmodel_inheritance/\nmodel_inheritance_regress/\nmodel_meta/\nmodel_options/\nmodel_package/\nmodel_regress/\nmodeladmin/\nmultiple_database/\nmutually_referential/\nnested_foreign_keys/\nno_models/\nnull_fk/\nnull_fk_ordering/\nnull_queries/\none_to_one/\nor_lookups/\norder_with_respect_to/\nordering/\npagination/\npostgres_tests/\nprefetch_related/\nproject_template/\nproperties/\nproxy_model_inheritance/\nproxy_models/\nqueries/\nqueryset_pickle/\nraw_query/\nredirects_tests/\nrequests/\nrequirements/\nreserved_names/\nresolve_url/\nresponses/\nreverse_lookup/\nruntests.py*\nsave_delete_hooks/\nschema/\nselect_for_update/\nselect_related/\nselect_related_onetoone/\nselect_related_regress/\nserializers/\nservers/\nsessions_tests/\nsettings_tests/\nshell/\nshortcuts/\nsignals/\nsigned_cookies_tests/\nsigning/\nsitemaps_tests/\nsites_framework/\nsites_tests/\nstaticfiles_tests/\nstr/\nstring_lookup/\nswappable_models/\nsyndication_tests/\ntemplate_backends/\ntemplate_loader/\ntemplate_tests/\ntemplates/\ntest_client/\ntest_client_regress/\ntest_exceptions/\ntest_runner/\ntest_runner_apps/\ntest_sqlite.py\ntest_utils/\ntimezones/\ntransaction_hooks/\ntransactions/\nunmanaged_models/\nupdate/\nupdate_only_fields/\nurlpatterns/\nurlpatterns_reverse/\nurls.py\nuser_commands/\nutils_tests/\nvalidation/\nvalidators/\nversion/\nview_tests/\nwsgi/\n\n(Open file: n/a)\n(Current directory: /django__django)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "The 'tests' directory contains a lot of different test modules and packages. One that stands out is 'settings_tests/'. This likely contains tests related to Django's settings functionality.\n\nLet's look inside the 'settings_tests/' directory:\n\n<command>\nls -F tests/settings_tests/\n</command>",
      "thought": "The 'tests' directory contains a lot of different test modules and packages. One that stands out is 'settings_tests/'. This likely contains tests related to Django's settings functionality.\n\nLet's look inside the 'settings_tests/' directory:",
      "action": "ls -F tests/settings_tests/",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "__init__.py\ntest_file_charset.py\ntests.py\n\n(Open file: n/a)\n(Current directory: /django__django)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "The 'tests.py' file in the 'settings_tests/' directory is likely where the main test cases for Django's settings functionality are defined.\n\nLet's open 'tests.py' and search for 'DEBUG' to see if there are any relevant settings or test cases:\n\n<command>\nsearch_file \"DEBUG\" tests/settings_tests/tests.py\n</command>",
      "thought": "The 'tests.py' file in the 'settings_tests/' directory is likely where the main test cases for Django's settings functionality are defined.\n\nLet's open 'tests.py' and search for 'DEBUG' to see if there are any relevant settings or test cases:",
      "action": "search_file \"DEBUG\" tests/settings_tests/tests.py",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "No matches found for \"DEBUG\" in /django__django/tests/settings_tests/tests.py\n\n(Open file: n/a)\n(Current directory: /django__django)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "It seems the 'tests.py' file in 'settings_tests/' does not contain any references to 'DEBUG'. Let's take a step back and think about where the DEBUG setting might be defined in a typical Django project.\n\nIn a standard Django project, the main settings file is usually located in the project's root directory or in a 'config/' or 'settings/' subdirectory. However, this repository appears to have a non-standard structure.\n\nLet's search for 'settings' in all Python files in the repository to see if we can find where the main settings file might be located:\n\n<command>\nfind . -name \"*.py\" -exec grep -H \"settings\" {} \\;\n</command>",
      "thought": "It seems the 'tests.py' file in 'settings_tests/' does not contain any references to 'DEBUG'. Let's take a step back and think about where the DEBUG setting might be defined in a typical Django project.\n\nIn a standard Django project, the main settings file is usually located in the project's root directory or in a 'config/' or 'settings/' subdirectory. However, this repository appears to have a non-standard structure.\n\nLet's search for 'settings' in all Python files in the repository to see if we can find where the main settings file might be located:",
      "action": "find . -name \"*.py\" -exec grep -H \"settings\" {} \\;",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "./docs/_ext/djangodocs.py:        env = self.state.document.settings.env\n./docs/_ext/djangodocs.py:        env = self.state.document.settings.env\n./docs/conf.py:# building docs/ref/settings.txt sometimes.\n./django/__init__.py:    Configure the settings (this happens as a side effect of accessing the\n./django/__init__.py:    from django.conf import settings\n./django/__init__.py:    configure_logging(settings.LOGGING_CONFIG, settings.LOGGING)\n./django/__init__.py:            '/' if settings.FORCE_SCRIPT_NAME is None else settings.FORCE_SCRIPT_NAME\n./django/__init__.py:    apps.populate(settings.INSTALLED_APPS)\n./django/conf/__init__.py:variable, and then from django.conf.global_settings; see the global_settings.py\n./django/conf/__init__.py:from django.conf import global_settings\n./django/conf/__init__.py:    String subclass which references a current settings value. It's treated as\n./django/conf/__init__.py:    the value in memory but serializes to a settings.NAME attribute reference.\n./django/conf/__init__.py:    A lazy proxy for either global Django settings or a custom settings object.\n./django/conf/__init__.py:    The user can manually configure settings prior to using them. Otherwise,\n./django/conf/__init__.py:    Django uses the settings module pointed to by DJANGO_SETTINGS_MODULE.\n./django/conf/__init__.py:        Load the settings module pointed to by the environment variable. This\n./django/conf/__init__.py:        is used the first time settings are needed, if the user hasn't\n./django/conf/__init__.py:        configured settings manually.\n./django/conf/__init__.py:        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)\n./django/conf/__init__.py:        if not settings_module:\n./django/conf/__init__.py:            desc = (\"setting %s\" % name) if name else \"settings\"\n./django/conf/__init__.py:                \"Requested %s, but settings are not configured. \"\n./django/conf/__init__.py:                \"or call settings.configure() before accessing settings.\"\n./django/conf/__init__.py:        self._wrapped = Settings(settings_module)\n./django/conf/__init__.py:        return '<LazySettings \"%(settings_module)s\">' % {\n./django/conf/__init__.py:            'settings_module': self._wrapped.SETTINGS_MODULE,\n./django/conf/__init__.py:        (@override_settings does this) or clear single values when set.\n./django/conf/__init__.py:    def configure(self, default_settings=global_settings, **options):\n./django/conf/__init__.py:        Called to manually configure the settings. The 'default_settings'\n./django/conf/__init__.py:        holder = UserSettingsHolder(default_settings)\n./django/conf/__init__.py:        \"\"\"Return True if the settings have already been configured.\"\"\"\n./django/conf/__init__.py:    def __init__(self, settings_module):\n./django/conf/__init__.py:        # update this dict from global settings (but only for ALL_CAPS settings)\n./django/conf/__init__.py:        for setting in dir(global_settings):\n./django/conf/__init__.py:                setattr(self, setting, getattr(global_settings, setting))\n./django/conf/__init__.py:        # store the settings module in case someone later cares\n./django/conf/__init__.py:        self.SETTINGS_MODULE = settings_module\n./django/conf/__init__.py:        tuple_settings = (\n./django/conf/__init__.py:        self._explicit_settings = set()\n./django/conf/__init__.py:                if (setting in tuple_settings and\n./django/conf/__init__.py:                self._explicit_settings.add(setting)\n./django/conf/__init__.py:        return setting in self._explicit_settings\n./django/conf/__init__.py:        return '<%(cls)s \"%(settings_module)s\">' % {\n./django/conf/__init__.py:            'settings_module': self.SETTINGS_MODULE,\n./django/conf/__init__.py:    \"\"\"Holder for user configured settings.\"\"\"\n./django/conf/__init__.py:    def __init__(self, default_settings):\n./django/conf/__init__.py:        from the module specified in default_settings (if possible).\n./django/conf/__init__.py:        self.default_settings = default_settings\n./django/conf/__init__.py:        return getattr(self.default_settings, name)\n./django/conf/__init__.py:            s for s in [*self.__dict__, *dir(self.default_settings)]\n./django/conf/__init__.py:        set_on_default = getattr(self.default_settings, 'is_overridden', lambda s: False)(setting)\n./django/conf/__init__.py:settings = LazySettings()\n./django/conf/global_settings.py:Default Django settings. Override these with settings in the module pointed to\n./django/conf/global_settings.py:# django.utils.translation -- that module depends on the settings.\n./django/conf/global_settings.py:# hashing algorithms. Set this in your settings, or Django will complain\n./django/conf/global_settings.py:# django.contrib.messages to avoid imports in this settings file.\n./django/conf/urls/static.py:from django.conf import settings\n./django/conf/urls/static.py:    from django.conf import settings\n./django/conf/urls/static.py:    ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n./django/conf/urls/static.py:    elif not settings.DEBUG or urlsplit(prefix).netloc:\n./django/conf/urls/i18n.py:from django.conf import settings\n./django/conf/urls/i18n.py:    if not settings.USE_I18N:\n./django/core/exceptions.py:    settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.\n./django/core/exceptions.py:    settings.DATA_UPLOAD_MAX_MEMORY_SIZE.\n./django/core/checks/caches.py:from django.conf import settings\n./django/core/checks/caches.py:    if DEFAULT_CACHE_ALIAS not in settings.CACHES:\n./django/core/checks/model_checks.py:from django.conf import settings\n./django/core/checks/model_checks.py:    if settings.DATABASE_ROUTERS:\n./django/core/checks/model_checks.py:            'You have configured settings.DATABASE_ROUTERS. Verify that %s '\n./django/core/checks/templates.py:from django.conf import settings\n./django/core/checks/templates.py:        for conf in settings.TEMPLATES\n./django/core/checks/templates.py:    for conf in settings.TEMPLATES:\n./django/core/checks/messages.py:        from django.conf import settings\n./django/core/checks/messages.py:        return self.id in settings.SILENCED_SYSTEM_CHECKS\n./django/core/checks/urls.py:from django.conf import settings\n./django/core/checks/urls.py:    if getattr(settings, 'ROOT_URLCONF', None):\n./django/core/checks/urls.py:    if not getattr(settings, 'ROOT_URLCONF', None):\n./django/core/checks/urls.py:def check_url_settings(app_configs, **kwargs):\n./django/core/checks/urls.py:        value = getattr(settings, name)\n./django/core/checks/security/csrf.py:from django.conf import settings\n./django/core/checks/security/csrf.py:    return 'django.middleware.csrf.CsrfViewMiddleware' in settings.MIDDLEWARE\n./django/core/checks/security/csrf.py:        settings.CSRF_USE_SESSIONS or\n./django/core/checks/security/csrf.py:        settings.CSRF_COOKIE_SECURE\n./django/core/checks/security/base.py:from django.conf import settings\n./django/core/checks/security/base.py:    \"SECURE_BROWSER_XSS_FILTER, and SECURE_SSL_REDIRECT settings \"\n./django/core/checks/security/base.py:    return 'django.middleware.security.SecurityMiddleware' in settings.MIDDLEWARE\n./django/core/checks/security/base.py:    return 'django.middleware.clickjacking.XFrameOptionsMiddleware' in settings.MIDDLEWARE\n./django/core/checks/security/base.py:    passed_check = not _security_middleware() or settings.SECURE_HSTS_SECONDS\n./django/core/checks/security/base.py:        not settings.SECURE_HSTS_SECONDS or\n./django/core/checks/security/base.py:        settings.SECURE_HSTS_INCLUDE_SUBDOMAINS is True\n./django/core/checks/security/base.py:        not settings.SECURE_HSTS_SECONDS or\n./django/core/checks/security/base.py:        settings.SECURE_HSTS_PRELOAD is True\n./django/core/checks/security/base.py:        settings.SECURE_CONTENT_TYPE_NOSNIFF is True\n./django/core/checks/security/base.py:        settings.SECURE_SSL_REDIRECT is True\n./django/core/checks/security/base.py:        getattr(settings, 'SECRET_KEY', None) and\n./django/core/checks/security/base.py:        len(set(settings.SECRET_KEY)) >= SECRET_KEY_MIN_UNIQUE_CHARACTERS and\n./django/core/checks/security/base.py:        len(settings.SECRET_KEY) >= SECRET_KEY_MIN_LENGTH\n./django/core/checks/security/base.py:    passed_check = not settings.DEBUG\n./django/core/checks/security/base.py:        settings.X_FRAME_OPTIONS == 'DENY'\n./django/core/checks/security/base.py:    return [] if settings.ALLOWED_HOSTS else [W020]\n./django/core/checks/security/sessions.py:from django.conf import settings\n./django/core/checks/security/sessions.py:    if not settings.SESSION_COOKIE_SECURE:\n./django/core/checks/security/sessions.py:    if not settings.SESSION_COOKIE_HTTPONLY:\n./django/core/checks/security/sessions.py:    return 'django.contrib.sessions.middleware.SessionMiddleware' in settings.MIDDLEWARE\n./django/core/checks/security/sessions.py:    return \"django.contrib.sessions\" in settings.INSTALLED_APPS\n./django/core/checks/translation.py:from django.conf import settings\n./django/core/checks/translation.py:    tag = settings.LANGUAGE_CODE\n./django/core/checks/translation.py:        for tag, _ in settings.LANGUAGES if not isinstance(tag, str) or not language_code_re.match(tag)\n./django/core/checks/translation.py:        for tag in settings.LANGUAGES_BIDI if not isinstance(tag, str) or not language_code_re.match(tag)\n./django/core/checks/translation.py:def check_language_settings_consistent(app_configs, **kwargs):\n./django/core/checks/translation.py:    \"\"\"Error if language settings are not consistent with each other.\"\"\"\n./django/core/checks/translation.py:    available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n./django/core/checks/translation.py:    if settings.LANGUAGE_CODE not in available_tags:\n./django/core/signing.py:from django.conf import settings\n./django/core/signing.py:    Signer = import_string(settings.SIGNING_BACKEND)\n./django/core/signing.py:    key = force_bytes(settings.SECRET_KEY)  # SECRET_KEY may be str or bytes.\n./django/core/signing.py:    None, use settings.SECRET_KEY instead.\n./django/core/signing.py:        self.key = key or settings.SECRET_KEY\n./django/core/cache/__init__.py:from django.conf import settings\n./django/core/cache/__init__.py:            conf = settings.CACHES[backend]\n./django/core/cache/__init__.py:        if alias not in settings.CACHES:\n./django/core/cache/__init__.py:                \"Could not find config for '%s' in settings.CACHES\" % alias\n./django/core/cache/backends/db.py:from django.conf import settings\n./django/core/cache/backends/db.py:            elif settings.USE_TZ:\n./django/core/cache/backends/db.py:        if settings.USE_TZ:\n./django/core/management/__init__.py:from django.conf import settings\n./django/core/management/__init__.py:    Core commands are always included. If a settings module has been\n./django/core/management/__init__.py:    if not settings.configured:\n./django/core/management/__init__.py:        self.settings_exception = None\n./django/core/management/__init__.py:            # Output an extra note if settings are not properly configured\n./django/core/management/__init__.py:            if self.settings_exception is not None:\n./django/core/management/__init__.py:                    \"as settings are not properly configured (error: %s).\"\n./django/core/management/__init__.py:                    % self.settings_exception))\n./django/core/management/__init__.py:                # If `subcommand` is missing due to misconfigured settings, the\n./django/core/management/__init__.py:                settings.INSTALLED_APPS\n./django/core/management/__init__.py:                sys.stderr.write(\"No Django settings specified.\\n\")\n./django/core/management/__init__.py:        # Preprocess options to extract --settings and --pythonpath.\n./django/core/management/__init__.py:        parser.add_argument('--settings')\n./django/core/management/__init__.py:            settings.INSTALLED_APPS\n./django/core/management/__init__.py:            self.settings_exception = exc\n./django/core/management/__init__.py:            self.settings_exception = exc\n./django/core/management/__init__.py:        if settings.configured:\n./django/core/management/commands/startproject.py:        # Create a random SECRET_KEY to put it in the main settings.\n./django/core/management/commands/runserver.py:from django.conf import settings\n./django/core/management/commands/runserver.py:        if not settings.DEBUG and not settings.ALLOWED_HOSTS:\n./django/core/management/commands/runserver.py:            raise CommandError('You must set settings.ALLOWED_HOSTS if DEBUG is False.')\n./django/core/management/commands/runserver.py:            \"Django version %(version)s, using settings %(settings)r\\n\"\n./django/core/management/commands/runserver.py:            \"settings\": settings.SETTINGS_MODULE,\n./django/core/management/commands/compilemessages.py:            from django.conf import settings\n./django/core/management/commands/compilemessages.py:            basedirs.extend(settings.LOCALE_PATHS)\n./django/core/management/commands/compilemessages.py:                               \"the settings module specified.\")\n./django/core/management/commands/squashmigrations.py:from django.conf import settings\n./django/core/management/commands/squashmigrations.py:                    if settings.AUTH_USER_MODEL == dependency.setting:\n./django/core/management/commands/makemessages.py:from django.conf import settings\n./django/core/management/commands/makemessages.py:        encoding = settings.FILE_CHARSET if self.command.settings_available else 'utf-8'\n./django/core/management/commands/makemessages.py:            if self.settings_available:\n./django/core/management/commands/makemessages.py:                self.locale_paths.extend(settings.LOCALE_PATHS)\n./django/core/management/commands/makemessages.py:    def settings_available(self):\n./django/core/management/commands/makemessages.py:            settings.LOCALE_PATHS\n./django/core/management/commands/makemessages.py:                self.stderr.write(\"Running without configured settings.\")\n./django/core/management/commands/makemessages.py:        if self.settings_available:\n./django/core/management/commands/makemessages.py:            ignored_roots = [os.path.normpath(p) for p in (settings.MEDIA_ROOT, settings.STATIC_ROOT) if p]\n./django/core/management/commands/diffsettings.py:    help = \"\"\"Displays differences between the current settings.py and Django's\n./django/core/management/commands/diffsettings.py:    default settings.\"\"\"\n./django/core/management/commands/diffsettings.py:                'Display all settings, regardless of their value. In \"hash\" '\n./django/core/management/commands/diffsettings.py:                \"The settings module to compare the current settings against. Leave empty to \"\n./django/core/management/commands/diffsettings.py:                \"compare against Django's default settings.\"\n./django/core/management/commands/diffsettings.py:                \"setting, with the settings that don't appear in the defaults \"\n./django/core/management/commands/diffsettings.py:        from django.conf import settings, Settings, global_settings\n./django/core/management/commands/diffsettings.py:        # Because settings are imported lazily, we need to explicitly load them.\n./django/core/management/commands/diffsettings.py:        if not settings.configured:\n./django/core/management/commands/diffsettings.py:            settings._setup()\n./django/core/management/commands/diffsettings.py:        user_settings = module_to_dict(settings._wrapped)\n./django/core/management/commands/diffsettings.py:        default_settings = module_to_dict(Settings(default) if default else global_settings)\n./django/core/management/commands/diffsettings.py:        return '\\n'.join(output_func(user_settings, default_settings, **options))\n./django/core/management/commands/diffsettings.py:    def output_hash(self, user_settings, default_settings, **options):\n./django/core/management/commands/diffsettings.py:        for key in sorted(user_settings):\n./django/core/management/commands/diffsettings.py:            if key not in default_settings:\n./django/core/management/commands/diffsettings.py:                output.append(\"%s = %s  ###\" % (key, user_settings[key]))\n./django/core/management/commands/diffsettings.py:            elif user_settings[key] != default_settings[key]:\n./django/core/management/commands/diffsettings.py:                output.append(\"%s = %s\" % (key, user_settings[key]))\n./django/core/management/commands/diffsettings.py:                output.append(\"### %s = %s\" % (key, user_settings[key]))\n./django/core/management/commands/diffsettings.py:    def output_unified(self, user_settings, default_settings, **options):\n./django/core/management/commands/diffsettings.py:        for key in sorted(user_settings):\n./django/core/management/commands/diffsettings.py:            if key not in default_settings:\n./django/core/management/commands/diffsettings.py:                output.append(self.style.SUCCESS(\"+ %s = %s\" % (key, user_settings[key])))\n./django/core/management/commands/diffsettings.py:            elif user_settings[key] != default_settings[key]:\n./django/core/management/commands/diffsettings.py:                output.append(self.style.ERROR(\"- %s = %s\" % (key, default_settings[key])))\n./django/core/management/commands/diffsettings.py:                output.append(self.style.SUCCESS(\"+ %s = %s\" % (key, user_settings[key])))\n./django/core/management/commands/diffsettings.py:                output.append(\"  %s = %s\" % (key, user_settings[key]))\n./django/core/management/commands/loaddata.py:from django.conf import settings\n./django/core/management/commands/loaddata.py:        fixture_dirs = settings.FIXTURE_DIRS\n./django/core/management/commands/loaddata.py:            raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n./django/core/management/commands/loaddata.py:                    \"and cannot be listed in settings.FIXTURE_DIRS.\" % (app_dir, app_label)\n./django/core/management/commands/test.py:from django.conf import settings\n./django/core/management/commands/test.py:        test_runner_class = get_runner(settings, self.test_runner)\n./django/core/management/commands/test.py:        TestRunner = get_runner(settings, options['testrunner'])\n./django/core/management/commands/createcachetable.py:from django.conf import settings\n./django/core/management/commands/createcachetable.py:            help='Optional table names. Otherwise, settings.CACHES is used to find cache tables.',\n./django/core/management/commands/createcachetable.py:            for cache_alias in settings.CACHES:\n./django/core/management/commands/makemigrations.py:from django.conf import settings\n./django/core/management/commands/makemigrations.py:        aliases_to_check = connections if settings.DATABASE_ROUTERS else [DEFAULT_DB_ALIAS]\n./django/core/management/commands/makemigrations.py:            if (connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any(\n./django/core/management/commands/flush.py:    Type 'yes' to continue, or 'no' to cancel: \"\"\" % connection.settings_dict['NAME'])\n./django/core/management/commands/flush.py:                        connection.settings_dict['NAME'],\n./django/core/management/commands/check.py:            help='Check deployment settings.',\n./django/core/management/commands/sendtestemail.py:            help='Send a test email to the addresses specified in settings.MANAGERS.',\n./django/core/management/commands/sendtestemail.py:            help='Send a test email to the addresses specified in settings.ADMINS.',\n./django/core/management/base.py:    if options.settings:\n./django/core/management/base.py:        os.environ['DJANGO_SETTINGS_MODULE'] = options.settings\n./django/core/management/base.py:        '--version', '--verbosity', '--traceback', '--settings', '--pythonpath',\n./django/core/management/base.py:            '--settings',\n./django/core/management/base.py:                'The Python path to a settings module, e.g. '\n./django/core/management/base.py:                '\"myproject.settings.main\". If this isn\\'t provided, the '\n./django/core/management/base.py:        and Django settings), then run this command. If the\n./django/core/management/base.py:                # configured settings).\n./django/core/management/templates.py:from django.conf import settings\n./django/core/management/templates.py:        # Setup a stub settings environment for template rendering\n./django/core/management/templates.py:        if not settings.configured:\n./django/core/management/templates.py:            settings.configure()\n./django/core/management/color.py:    color_settings = termcolors.parse_color_setting(config_string)\n./django/core/management/color.py:        if color_settings:\n./django/core/management/color.py:            format = color_settings.get(role, {})\n./django/core/mail/message.py:from django.conf import settings\n./django/core/mail/message.py:    encoding = encoding or settings.DEFAULT_CHARSET\n./django/core/mail/message.py:    encoding = None     # None => use settings default\n./django/core/mail/message.py:        self.from_email = from_email or settings.DEFAULT_FROM_EMAIL\n./django/core/mail/message.py:        encoding = self.encoding or settings.DEFAULT_CHARSET\n./django/core/mail/message.py:            msg['Date'] = formatdate(localtime=settings.EMAIL_USE_LOCALTIME)\n./django/core/mail/message.py:            encoding = self.encoding or settings.DEFAULT_CHARSET\n./django/core/mail/message.py:            encoding = self.encoding or settings.DEFAULT_CHARSET\n./django/core/mail/message.py:        encoding = self.encoding or settings.DEFAULT_CHARSET\n./django/core/mail/__init__.py:from django.conf import settings\n./django/core/mail/__init__.py:    If backend is None (default), use settings.EMAIL_BACKEND.\n./django/core/mail/__init__.py:    klass = import_string(backend or settings.EMAIL_BACKEND)\n./django/core/mail/__init__.py:    if not settings.ADMINS:\n./django/core/mail/__init__.py:    if not all(isinstance(a, (list, tuple)) and len(a) == 2 for a in settings.ADMINS):\n./django/core/mail/__init__.py:        '%s%s' % (settings.EMAIL_SUBJECT_PREFIX, subject), message,\n./django/core/mail/__init__.py:        settings.SERVER_EMAIL, [a[1] for a in settings.ADMINS],\n./django/core/mail/__init__.py:    if not settings.MANAGERS:\n./django/core/mail/__init__.py:    if not all(isinstance(a, (list, tuple)) and len(a) == 2 for a in settings.MANAGERS):\n./django/core/mail/__init__.py:        '%s%s' % (settings.EMAIL_SUBJECT_PREFIX, subject), message,\n./django/core/mail/__init__.py:        settings.SERVER_EMAIL, [a[1] for a in settings.MANAGERS],\n./django/core/mail/backends/smtp.py:from django.conf import settings\n./django/core/mail/backends/smtp.py:        self.host = host or settings.EMAIL_HOST\n./django/core/mail/backends/smtp.py:        self.port = port or settings.EMAIL_PORT\n./django/core/mail/backends/smtp.py:        self.username = settings.EMAIL_HOST_USER if username is None else username\n./django/core/mail/backends/smtp.py:        self.password = settings.EMAIL_HOST_PASSWORD if password is None else password\n./django/core/mail/backends/smtp.py:        self.use_tls = settings.EMAIL_USE_TLS if use_tls is None else use_tls\n./django/core/mail/backends/smtp.py:        self.use_ssl = settings.EMAIL_USE_SSL if use_ssl is None else use_ssl\n./django/core/mail/backends/smtp.py:        self.timeout = settings.EMAIL_TIMEOUT if timeout is None else timeout\n./django/core/mail/backends/smtp.py:        self.ssl_keyfile = settings.EMAIL_SSL_KEYFILE if ssl_keyfile is None else ssl_keyfile\n./django/core/mail/backends/smtp.py:        self.ssl_certfile = settings.EMAIL_SSL_CERTFILE if ssl_certfile is None else ssl_certfile\n./django/core/mail/backends/smtp.py:                \"one of those settings to True.\")\n./django/core/mail/backends/smtp.py:        encoding = email_message.encoding or settings.DEFAULT_CHARSET\n./django/core/mail/backends/filebased.py:from django.conf import settings\n./django/core/mail/backends/filebased.py:            self.file_path = getattr(settings, 'EMAIL_FILE_PATH', None)\n./django/core/files/uploadedfile.py:from django.conf import settings\n./django/core/files/uploadedfile.py:        file = tempfile.NamedTemporaryFile(suffix='.upload' + ext, dir=settings.FILE_UPLOAD_TEMP_DIR)\n./django/core/files/storage.py:from django.conf import settings\n./django/core/files/storage.py:        return self._value_or_setting(self._location, settings.MEDIA_ROOT)\n./django/core/files/storage.py:        return self._value_or_setting(self._base_url, settings.MEDIA_URL)\n./django/core/files/storage.py:        return self._value_or_setting(self._file_permissions_mode, settings.FILE_UPLOAD_PERMISSIONS)\n./django/core/files/storage.py:        return self._value_or_setting(self._directory_permissions_mode, settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS)\n./django/core/files/storage.py:        if settings.USE_TZ:\n./django/core/files/storage.py:    return import_string(import_path or settings.DEFAULT_FILE_STORAGE)\n./django/core/files/uploadhandler.py:from django.conf import settings\n./django/core/files/uploadhandler.py:        self.activated = content_length <= settings.FILE_UPLOAD_MAX_MEMORY_SIZE\n./django/core/servers/basehttp.py:    ``settings.WSGI_APPLICATION``. With the default ``startproject`` layout,\n./django/core/servers/basehttp.py:    If settings.WSGI_APPLICATION is not set (is ``None``), return\n./django/core/servers/basehttp.py:    from django.conf import settings\n./django/core/servers/basehttp.py:    app_path = getattr(settings, 'WSGI_APPLICATION')\n./django/core/handlers/wsgi.py:from django.conf import settings\n./django/core/handlers/wsgi.py:    if settings.FORCE_SCRIPT_NAME is not None:\n./django/core/handlers/wsgi.py:        return settings.FORCE_SCRIPT_NAME\n./django/core/handlers/base.py:from django.conf import settings\n./django/core/handlers/base.py:        Populate middleware lists from settings.MIDDLEWARE.\n./django/core/handlers/base.py:        for middleware_path in reversed(settings.MIDDLEWARE):\n./django/core/handlers/base.py:                if settings.DEBUG:\n./django/core/handlers/base.py:            if db.settings_dict['ATOMIC_REQUESTS'] and db.alias not in non_atomic_requests:\n./django/core/handlers/base.py:        set_urlconf(settings.ROOT_URLCONF)\n./django/core/handlers/asgi.py:from django.conf import settings\n./django/core/handlers/asgi.py:        body_file = tempfile.SpooledTemporaryFile(max_size=settings.FILE_UPLOAD_MAX_MEMORY_SIZE, mode='w+b')\n./django/core/handlers/asgi.py:                traceback.format_exc() if settings.DEBUG else 'Internal Server Error',\n./django/core/handlers/asgi.py:        if settings.FORCE_SCRIPT_NAME:\n./django/core/handlers/asgi.py:            return settings.FORCE_SCRIPT_NAME\n./django/core/handlers/exception.py:from django.conf import settings\n./django/core/handlers/exception.py:        if settings.DEBUG:\n./django/core/handlers/exception.py:        if settings.DEBUG:\n./django/core/handlers/exception.py:    if settings.DEBUG_PROPAGATE_EXCEPTIONS:\n./django/core/handlers/exception.py:    if settings.DEBUG:\n./django/core/serializers/__init__.py:from django.conf import settings\n./django/core/serializers/__init__.py:    Register built-in and settings-defined serializers. This is done lazily so\n./django/core/serializers/__init__.py:    that user code has a chance to (e.g.) set up custom settings without\n./django/core/serializers/__init__.py:    if hasattr(settings, \"SERIALIZATION_MODULES\"):\n./django/core/serializers/__init__.py:        for format in settings.SERIALIZATION_MODULES:\n./django/core/serializers/__init__.py:            register_serializer(format, settings.SERIALIZATION_MODULES[format], serializers)\n./django/core/serializers/xml_serializer.py:from django.conf import settings\n./django/core/serializers/xml_serializer.py:        self.xml = SimplerXMLGenerator(self.stream, self.options.get(\"encoding\", settings.DEFAULT_CHARSET))\n./django/utils/http.py:                'settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.'\n./django/utils/translation/__init__.py:# We are trying to solve two problems: (1) access settings, in particular\n./django/utils/translation/__init__.py:# settings.USE_I18N, as late as possible, so that modules can be imported\n./django/utils/translation/__init__.py:# settings).\n./django/utils/translation/__init__.py:        from django.conf import settings\n./django/utils/translation/__init__.py:        if settings.USE_I18N:\n./django/utils/translation/reloader.py:    from django.conf import settings\n./django/utils/translation/reloader.py:    if settings.USE_I18N:\n./django/utils/translation/reloader.py:        directories.extend(Path(p) for p in settings.LOCALE_PATHS)\n./django/utils/translation/trans_null.py:# settings.USE_I18N = False can use this module rather than trans_real.py.\n./django/utils/translation/trans_null.py:from django.conf import settings\n./django/utils/translation/trans_null.py:    return settings.LANGUAGE_CODE\n./django/utils/translation/trans_null.py:    return settings.LANGUAGE_CODE in settings.LANGUAGES_BIDI\n./django/utils/translation/trans_null.py:    return settings.LANGUAGE_CODE\n./django/utils/translation/trans_null.py:    if lang_code == settings.LANGUAGE_CODE:\n./django/utils/translation/trans_real.py:from django.conf import settings\n./django/utils/translation/trans_real.py:# The default translation is based on the settings file.\n./django/utils/translation/trans_real.py:        if self.__language == settings.LANGUAGE_CODE and self.domain == 'django' and self._catalog is None:\n./django/utils/translation/trans_real.py:            raise OSError('No translation files found for default language %s.' % settings.LANGUAGE_CODE)\n./django/utils/translation/trans_real.py:        settingsfile = sys.modules[settings.__module__].__file__\n./django/utils/translation/trans_real.py:        localedir = os.path.join(os.path.dirname(settingsfile), 'locale')\n./django/utils/translation/trans_real.py:        for localedir in reversed(settings.LOCALE_PATHS):\n./django/utils/translation/trans_real.py:        if self.__language == settings.LANGUAGE_CODE or self.__language.startswith('en'):\n./django/utils/translation/trans_real.py:            default_translation = translation(settings.LANGUAGE_CODE)\n./django/utils/translation/trans_real.py:                settings.LANGUAGE_CODE, domain=self.domain, localedirs=localedirs\n./django/utils/translation/trans_real.py:    return settings.LANGUAGE_CODE\n./django/utils/translation/trans_real.py:        return base_lang in settings.LANGUAGES_BIDI\n./django/utils/translation/trans_real.py:        _default = translation(settings.LANGUAGE_CODE)\n./django/utils/translation/trans_real.py:        _default = _default or translation(settings.LANGUAGE_CODE)\n./django/utils/translation/trans_real.py:        _default = translation(settings.LANGUAGE_CODE)\n./django/utils/translation/trans_real.py:        os.path.dirname(sys.modules[settings.__module__].__file__), 'locale')\n./django/utils/translation/trans_real.py:    return [globalpath, *settings.LOCALE_PATHS, *app_paths]\n./django/utils/translation/trans_real.py:    Cache of settings.LANGUAGES in a dictionary for easy lookups by key.\n./django/utils/translation/trans_real.py:    return dict(settings.LANGUAGES)\n./django/utils/translation/trans_real.py:    show. Only languages listed in settings.LANGUAGES are taken into account.\n./django/utils/translation/trans_real.py:    lang_code = request.COOKIES.get(settings.LANGUAGE_COOKIE_NAME)\n./django/utils/translation/trans_real.py:        return get_supported_language_variant(settings.LANGUAGE_CODE)\n./django/utils/translation/trans_real.py:        return settings.LANGUAGE_CODE\n./django/utils/log.py:from django.conf import settings\n./django/utils/log.py:def configure_logging(logging_config, logging_settings):\n./django/utils/log.py:        # ... then invoke it with the logging settings\n./django/utils/log.py:        if logging_settings:\n./django/utils/log.py:            logging_config_func(logging_settings)\n./django/utils/log.py:                ('internal' if request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS\n./django/utils/log.py:        return not settings.DEBUG\n./django/utils/log.py:        return settings.DEBUG\n./django/utils/crypto.py:from django.conf import settings\n./django/utils/crypto.py:    secret (which defaults to settings.SECRET_KEY).\n./django/utils/crypto.py:        secret = settings.SECRET_KEY\n./django/utils/cache.py:from django.conf import settings\n./django/utils/cache.py:        cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS\n./django/utils/cache.py:    if settings.USE_I18N or settings.USE_L10N:\n./django/utils/cache.py:        # which in turn can also fall back to settings.LANGUAGE_CODE\n./django/utils/cache.py:    if settings.USE_TZ:\n./django/utils/cache.py:        key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n./django/utils/cache.py:        cache = caches[settings.CACHE_MIDDLEWARE_ALIAS]\n./django/utils/cache.py:        key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n./django/utils/cache.py:        cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS\n./django/utils/cache.py:        cache = caches[settings.CACHE_MIDDLEWARE_ALIAS]\n./django/utils/cache.py:        is_accept_language_redundant = settings.USE_I18N or settings.USE_L10N\n./django/utils/timezone.py:from django.conf import settings\n./django/utils/timezone.py:# In order to avoid accessing settings at compile time,\n./django/utils/timezone.py:    This is the time zone defined by settings.TIME_ZONE.\n./django/utils/timezone.py:    return pytz.timezone(settings.TIME_ZONE)\n./django/utils/timezone.py:    Django will then use the time zone defined by settings.TIME_ZONE.\n./django/utils/timezone.py:    be converted (or not), overriding the value of settings.USE_TZ.\n./django/utils/timezone.py:        (settings.USE_TZ if use_tz is None else use_tz) and\n./django/utils/timezone.py:    Return an aware or naive datetime.datetime, depending on settings.USE_TZ.\n./django/utils/timezone.py:    if settings.USE_TZ:\n./django/utils/formats.py:from django.conf import settings\n./django/utils/formats.py:        format_module_path = settings.FORMAT_MODULE_PATH\n./django/utils/formats.py:        _format_modules_cache[lang] = list(iter_format_modules(lang, settings.FORMAT_MODULE_PATH))\n./django/utils/formats.py:    language (locale). Default to the format in the settings.\n./django/utils/formats.py:    be localized (or not), overriding the value of settings.USE_L10N.\n./django/utils/formats.py:    use_l10n = use_l10n or (use_l10n is None and settings.USE_L10N)\n./django/utils/formats.py:    # there or if l10n is disabled, fall back to the project settings.\n./django/utils/formats.py:        val = getattr(settings, format_type)\n./django/utils/formats.py:    be localized (or not), overriding the value of settings.USE_L10N.\n./django/utils/formats.py:    be localized (or not), overriding the value of settings.USE_L10N.\n./django/utils/formats.py:    Format a numeric value using localization settings.\n./django/utils/formats.py:    be localized (or not), overriding the value of settings.USE_L10N.\n./django/utils/formats.py:    if use_l10n or (use_l10n is None and settings.USE_L10N):\n./django/utils/formats.py:    be localized (or not), overriding the value of settings.USE_L10N.\n./django/utils/formats.py:        if settings.USE_THOUSAND_SEPARATOR:\n./django/utils/numberformat.py:from django.conf import settings\n./django/utils/numberformat.py:    use_grouping = (use_l10n or (use_l10n is None and settings.USE_L10N)) and settings.USE_THOUSAND_SEPARATOR\n./django/middleware/locale.py:from django.conf import settings\n./django/middleware/locale.py:        urlconf = getattr(request, 'urlconf', settings.ROOT_URLCONF)\n./django/middleware/locale.py:            language = settings.LANGUAGE_CODE\n./django/middleware/locale.py:        urlconf = getattr(request, 'urlconf', settings.ROOT_URLCONF)\n./django/middleware/locale.py:                    settings.APPEND_SLASH and not language_path.endswith('/') and\n./django/middleware/csrf.py:from django.conf import settings\n./django/middleware/csrf.py:    return get_callable(settings.CSRF_FAILURE_VIEW)\n./django/middleware/csrf.py:        if settings.CSRF_USE_SESSIONS:\n./django/middleware/csrf.py:                    'in MIDDLEWARE%s.' % ('_CLASSES' if settings.MIDDLEWARE is None else '')\n./django/middleware/csrf.py:                cookie_token = request.COOKIES[settings.CSRF_COOKIE_NAME]\n./django/middleware/csrf.py:        if settings.CSRF_USE_SESSIONS:\n./django/middleware/csrf.py:                settings.CSRF_COOKIE_NAME,\n./django/middleware/csrf.py:                max_age=settings.CSRF_COOKIE_AGE,\n./django/middleware/csrf.py:                domain=settings.CSRF_COOKIE_DOMAIN,\n./django/middleware/csrf.py:                path=settings.CSRF_COOKIE_PATH,\n./django/middleware/csrf.py:                secure=settings.CSRF_COOKIE_SECURE,\n./django/middleware/csrf.py:                httponly=settings.CSRF_COOKIE_HTTPONLY,\n./django/middleware/csrf.py:                samesite=settings.CSRF_COOKIE_SAMESITE,\n./django/middleware/csrf.py:                    settings.SESSION_COOKIE_DOMAIN\n./django/middleware/csrf.py:                    if settings.CSRF_USE_SESSIONS\n./django/middleware/csrf.py:                    else settings.CSRF_COOKIE_DOMAIN\n./django/middleware/csrf.py:                good_hosts = list(settings.CSRF_TRUSTED_ORIGINS)\n./django/middleware/csrf.py:                request_csrf_token = request.META.get(settings.CSRF_HEADER_NAME, '')\n./django/middleware/common.py:from django.conf import settings\n./django/middleware/common.py:        - Forbid access to User-Agents in settings.DISALLOWED_USER_AGENTS\n./django/middleware/common.py:        - URL rewriting: Based on the APPEND_SLASH and PREPEND_WWW settings,\n./django/middleware/common.py:        settings.APPEND_SLASH and settings.PREPEND_WWW\n./django/middleware/common.py:            for user_agent_regex in settings.DISALLOWED_USER_AGENTS:\n./django/middleware/common.py:        # Check for a redirect based on settings.PREPEND_WWW\n./django/middleware/common.py:        must_prepend = settings.PREPEND_WWW and host and not host.startswith('www.')\n./django/middleware/common.py:        Return True if settings.APPEND_SLASH is True and appending a slash to\n./django/middleware/common.py:        if settings.APPEND_SLASH and not request.path_info.endswith('/'):\n./django/middleware/common.py:        Raise a RuntimeError if settings.DEBUG is True and request.method is\n./django/middleware/common.py:        if settings.DEBUG and request.method in ('POST', 'PUT', 'PATCH'):\n./django/middleware/common.py:                \"slash), or set APPEND_SLASH=False in your Django settings.\" % {\n./django/middleware/common.py:        if response.status_code == 404 and not settings.DEBUG:\n./django/middleware/common.py:        according to project settings or in situations outlined by the inline\n./django/middleware/common.py:        if settings.APPEND_SLASH and uri.endswith('/') and referer == uri[:-1]:\n./django/middleware/common.py:        return any(pattern.search(uri) for pattern in settings.IGNORABLE_404_URLS)\n./django/middleware/cache.py:from django.conf import settings\n./django/middleware/cache.py:        self.cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS\n./django/middleware/cache.py:        self.key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n./django/middleware/cache.py:        self.cache_alias = settings.CACHE_MIDDLEWARE_ALIAS\n./django/middleware/cache.py:        self.key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n./django/middleware/cache.py:        self.cache_alias = settings.CACHE_MIDDLEWARE_ALIAS\n./django/middleware/cache.py:            key_prefix = settings.CACHE_MIDDLEWARE_KEY_PREFIX\n./django/middleware/cache.py:            cache_alias = settings.CACHE_MIDDLEWARE_ALIAS\n./django/middleware/cache.py:            cache_timeout = settings.CACHE_MIDDLEWARE_SECONDS\n./django/middleware/security.py:from django.conf import settings\n./django/middleware/security.py:        self.sts_seconds = settings.SECURE_HSTS_SECONDS\n./django/middleware/security.py:        self.sts_include_subdomains = settings.SECURE_HSTS_INCLUDE_SUBDOMAINS\n./django/middleware/security.py:        self.sts_preload = settings.SECURE_HSTS_PRELOAD\n./django/middleware/security.py:        self.content_type_nosniff = settings.SECURE_CONTENT_TYPE_NOSNIFF\n./django/middleware/security.py:        self.xss_filter = settings.SECURE_BROWSER_XSS_FILTER\n./django/middleware/security.py:        self.redirect = settings.SECURE_SSL_REDIRECT\n./django/middleware/security.py:        self.redirect_host = settings.SECURE_SSL_HOST\n./django/middleware/security.py:        self.redirect_exempt = [re.compile(r) for r in settings.SECURE_REDIRECT_EXEMPT]\n./django/middleware/clickjacking.py:from django.conf import settings\n./django/middleware/clickjacking.py:    your project's Django settings to 'DENY'.\n./django/middleware/clickjacking.py:        return getattr(settings, 'X_FRAME_OPTIONS', 'SAMEORIGIN').upper()\n./django/db/models/sql/query.py:        Remove any ordering settings. If 'force_empty' is True, there will be\n./django/db/models/fields/__init__.py:from django.conf import settings\n./django/db/models/fields/__init__.py:        return self._db_tablespace or settings.DEFAULT_INDEX_TABLESPACE\n./django/db/models/fields/__init__.py:            if settings.USE_TZ and timezone.is_aware(value):\n./django/db/models/fields/__init__.py:            if settings.USE_TZ:\n./django/db/models/fields/__init__.py:        if value is not None and settings.USE_TZ and timezone.is_naive(value):\n./django/db/models/fields/related.py:                    hint=\"Update the relation to point at 'settings.%s'.\" % self.remote_field.model._meta.swappable,\n./django/db/models/fields/related.py:            return apps.get_swappable_settings_name(to_string)\n./django/db/models/fields/related.py:            # If it's already a settings reference, error\n./django/db/models/fields/related.py:            # If it's already a settings reference, error.\n./django/db/models/query.py:from django.conf import settings\n./django/db/models/query.py:        use_chunked_fetch = not connections[self.db].settings_dict.get('DISABLE_SERVER_SIDE_CURSORS')\n./django/db/models/query.py:        if settings.USE_TZ:\n./django/db/models/base.py:from django.conf import settings\n./django/db/models/base.py:        get_absolute_url_override = settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)\n./django/db/models/base.py:        for db in settings.DATABASES:\n./django/db/models/base.py:        for db in settings.DATABASES:\n./django/db/models/functions/datetime.py:from django.conf import settings\n./django/db/models/functions/datetime.py:        if settings.USE_TZ:\n./django/db/models/functions/datetime.py:            if not settings.USE_TZ:\n./django/db/models/functions/datetime.py:        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None\n./django/db/models/functions/datetime.py:        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None\n./django/db/models/options.py:from django.conf import settings\n./django/db/models/options.py:        self.db_tablespace = settings.DEFAULT_TABLESPACE\n./django/db/models/options.py:            swapped_for = getattr(settings, self.swappable, None)\n./django/db/utils.py:from django.conf import settings\n./django/db/utils.py:        like settings.DATABASES).\n./django/db/utils.py:            self._databases = settings.DATABASES\n./django/db/utils.py:        Put the defaults into the settings dictionary for a given connection\n./django/db/utils.py:        where no settings is provided.\n./django/db/utils.py:    def prepare_test_settings(self, alias):\n./django/db/utils.py:        Make sure the test settings are available in the 'TEST' sub-dictionary.\n./django/db/utils.py:        test_settings = conn.setdefault('TEST', {})\n./django/db/utils.py:            test_settings.setdefault(key, None)\n./django/db/utils.py:        self.prepare_test_settings(alias)\n./django/db/utils.py:        If routers is not specified, default to settings.DATABASE_ROUTERS.\n./django/db/utils.py:            self._routers = settings.DATABASE_ROUTERS\n./django/db/migrations/loader.py:from django.conf import settings\n./django/db/migrations/loader.py:        settings.MIGRATION_MODULE.\n./django/db/migrations/loader.py:        if app_label in settings.MIGRATION_MODULES:\n./django/db/migrations/loader.py:            return settings.MIGRATION_MODULES[app_label], True\n./django/db/migrations/serializer.py:        return \"settings.%s\" % self.value.setting_name, {\"from django.conf import settings\"}\n./django/db/migrations/autodetector.py:from django.conf import settings\n./django/db/migrations/autodetector.py:        resolved_app_label, resolved_object_name = getattr(settings, dependency[1]).split('.')\n./django/db/migrations/autodetector.py:                settings.AUTH_USER_MODEL.lower() == string_version.lower()\n./django/db/migrations/writer.py:                dependencies.append(\"        migrations.swappable_dependency(settings.%s),\" % dependency[1])\n./django/db/migrations/writer.py:                imports.add(\"from django.conf import settings\")\n./django/db/migrations/state.py:from django.conf import settings\n./django/db/migrations/state.py:        ignore = {make_model_tuple(settings.AUTH_USER_MODEL)} if ignore_swappable else set()\n./django/db/backends/base/operations.py:from django.conf import settings\n./django/db/backends/base/operations.py:        if settings.USE_TZ:\n./django/db/backends/base/base.py:from django.conf import settings\n./django/db/backends/base/base.py:    def __init__(self, settings_dict, alias=DEFAULT_DB_ALIAS):\n./django/db/backends/base/base.py:        # `settings_dict` should be a dictionary containing keys such as\n./django/db/backends/base/base.py:        # NAME, USER, etc. It's called `settings_dict` instead of `settings`\n./django/db/backends/base/base.py:        # to disambiguate it from Django settings modules.\n./django/db/backends/base/base.py:        self.settings_dict = settings_dict\n./django/db/backends/base/base.py:        if not settings.USE_TZ:\n./django/db/backends/base/base.py:        elif self.settings_dict['TIME_ZONE'] is None:\n./django/db/backends/base/base.py:            return pytz.timezone(self.settings_dict['TIME_ZONE'])\n./django/db/backends/base/base.py:        if not settings.USE_TZ:\n./django/db/backends/base/base.py:            return settings.TIME_ZONE\n./django/db/backends/base/base.py:        elif self.settings_dict['TIME_ZONE'] is None:\n./django/db/backends/base/base.py:            return self.settings_dict['TIME_ZONE']\n./django/db/backends/base/base.py:        return self.force_debug_cursor or settings.DEBUG\n./django/db/backends/base/base.py:        \"\"\"Initialize the database connection settings.\"\"\"\n./django/db/backends/base/base.py:        self.check_settings()\n./django/db/backends/base/base.py:        max_age = self.settings_dict['CONN_MAX_AGE']\n./django/db/backends/base/base.py:        self.set_autocommit(self.settings_dict['AUTOCOMMIT'])\n./django/db/backends/base/base.py:    def check_settings(self):\n./django/db/backends/base/base.py:        if self.settings_dict['TIME_ZONE'] is not None:\n./django/db/backends/base/base.py:            if not settings.USE_TZ:\n./django/db/backends/base/base.py:            if self.get_autocommit() != self.settings_dict['AUTOCOMMIT']:\n./django/db/backends/base/base.py:        return self.__class__({**self.settings_dict, 'NAME': None}, alias=NO_DB_ALIAS)\n./django/db/backends/base/base.py:        settings_dict = copy.deepcopy(self.settings_dict)\n./django/db/backends/base/base.py:        return type(self)(settings_dict, alias)\n./django/db/backends/base/creation.py:from django.conf import settings\n./django/db/backends/base/creation.py:        settings.DATABASES[self.connection.alias][\"NAME\"] = test_database_name\n./django/db/backends/base/creation.py:        self.connection.settings_dict[\"NAME\"] = test_database_name\n./django/db/backends/base/creation.py:    def set_as_test_mirror(self, primary_settings_dict):\n./django/db/backends/base/creation.py:        database whose settings are given.\n./django/db/backends/base/creation.py:        self.connection.settings_dict['NAME'] = primary_settings_dict['NAME']\n./django/db/backends/base/creation.py:                app_config.name not in settings.TEST_NON_SERIALIZED_APPS\n./django/db/backends/base/creation.py:        settings.\n./django/db/backends/base/creation.py:        if self.connection.settings_dict['TEST']['NAME']:\n./django/db/backends/base/creation.py:            return self.connection.settings_dict['TEST']['NAME']\n./django/db/backends/base/creation.py:        return TEST_DATABASE_PREFIX + self.connection.settings_dict['NAME']\n./django/db/backends/base/creation.py:        source_database_name = self.connection.settings_dict['NAME']\n./django/db/backends/base/creation.py:    def get_test_db_clone_settings(self, suffix):\n./django/db/backends/base/creation.py:        Return a modified connection settings dict for the n-th clone of a DB.\n./django/db/backends/base/creation.py:        # already and its name has been copied to settings_dict['NAME'] so\n./django/db/backends/base/creation.py:        orig_settings_dict = self.connection.settings_dict\n./django/db/backends/base/creation.py:        return {**orig_settings_dict, 'NAME': '{}_{}'.format(orig_settings_dict['NAME'], suffix)}\n./django/db/backends/base/creation.py:            test_database_name = self.connection.settings_dict['NAME']\n./django/db/backends/base/creation.py:            test_database_name = self.get_test_db_clone_settings(suffix)['NAME']\n./django/db/backends/base/creation.py:            settings.DATABASES[self.connection.alias][\"NAME\"] = old_database_name\n./django/db/backends/base/creation.py:            self.connection.settings_dict[\"NAME\"] = old_database_name\n./django/db/backends/base/creation.py:        Return a tuple with elements of self.connection.settings_dict (a\n./django/db/backends/base/creation.py:        settings_dict = self.connection.settings_dict\n./django/db/backends/base/creation.py:            settings_dict['HOST'],\n./django/db/backends/base/creation.py:            settings_dict['PORT'],\n./django/db/backends/base/creation.py:            settings_dict['ENGINE'],\n./django/db/backends/sqlite3/operations.py:from django.conf import settings\n./django/db/backends/sqlite3/operations.py:        if settings.USE_TZ:\n./django/db/backends/sqlite3/operations.py:            if settings.USE_TZ:\n./django/db/backends/sqlite3/operations.py:            if settings.USE_TZ and not timezone.is_aware(value):\n./django/db/backends/sqlite3/client.py:                self.connection.settings_dict['NAME']]\n./django/db/backends/sqlite3/base.py:        settings_dict = self.settings_dict\n./django/db/backends/sqlite3/base.py:        if not settings_dict['NAME']:\n./django/db/backends/sqlite3/base.py:                \"settings.DATABASES is improperly configured. \"\n./django/db/backends/sqlite3/base.py:            'database': settings_dict['NAME'],\n./django/db/backends/sqlite3/base.py:            **settings_dict['OPTIONS'],\n./django/db/backends/sqlite3/base.py:        return self.creation.is_in_memory_db(self.settings_dict['NAME'])\n./django/db/backends/sqlite3/creation.py:        test_database_name = self.connection.settings_dict['TEST']['NAME'] or ':memory:'\n./django/db/backends/sqlite3/creation.py:    def get_test_db_clone_settings(self, suffix):\n./django/db/backends/sqlite3/creation.py:        orig_settings_dict = self.connection.settings_dict\n./django/db/backends/sqlite3/creation.py:        source_database_name = orig_settings_dict['NAME']\n./django/db/backends/sqlite3/creation.py:            return orig_settings_dict\n./django/db/backends/sqlite3/creation.py:            root, ext = os.path.splitext(orig_settings_dict['NAME'])\n./django/db/backends/sqlite3/creation.py:            return {**orig_settings_dict, 'NAME': '{}_{}.{}'.format(root, suffix, ext)}\n./django/db/backends/sqlite3/creation.py:        source_database_name = self.connection.settings_dict['NAME']\n./django/db/backends/sqlite3/creation.py:        target_database_name = self.get_test_db_clone_settings(suffix)['NAME']\n./django/db/backends/sqlite3/creation.py:        sig = [self.connection.settings_dict['NAME']]\n./django/db/backends/oracle/operations.py:from django.conf import settings\n./django/db/backends/oracle/operations.py:        if not settings.USE_TZ:\n./django/db/backends/oracle/operations.py:            if settings.USE_TZ:\n./django/db/backends/oracle/operations.py:            if settings.USE_TZ:\n./django/db/backends/oracle/base.py:from django.conf import settings\n./django/db/backends/oracle/base.py:        use_returning_into = self.settings_dict[\"OPTIONS\"].get('use_returning_into', True)\n./django/db/backends/oracle/base.py:        settings_dict = self.settings_dict\n./django/db/backends/oracle/base.py:        if not settings_dict['HOST'].strip():\n./django/db/backends/oracle/base.py:            settings_dict['HOST'] = 'localhost'\n./django/db/backends/oracle/base.py:        if settings_dict['PORT']:\n./django/db/backends/oracle/base.py:            return Database.makedsn(settings_dict['HOST'], int(settings_dict['PORT']), settings_dict['NAME'])\n./django/db/backends/oracle/base.py:        return settings_dict['NAME']\n./django/db/backends/oracle/base.py:        return '%s/\"%s\"@%s' % (self.settings_dict['USER'], self.settings_dict['PASSWORD'], self._dsn())\n./django/db/backends/oracle/base.py:        conn_params = self.settings_dict['OPTIONS'].copy()\n./django/db/backends/oracle/base.py:            user=self.settings_dict['USER'],\n./django/db/backends/oracle/base.py:            password=self.settings_dict['PASSWORD'],\n./django/db/backends/oracle/base.py:            (\" TIME_ZONE = 'UTC'\" if settings.USE_TZ else '')\n./django/db/backends/oracle/base.py:            # the same settings.\n./django/db/backends/oracle/base.py:        if settings.USE_TZ and (isinstance(param, datetime.datetime) and\n./django/db/backends/oracle/creation.py:from django.conf import settings\n./django/db/backends/oracle/creation.py:        settings_dict = settings.DATABASES[self.connection.alias]\n./django/db/backends/oracle/creation.py:        user = settings_dict.get('SAVED_USER') or settings_dict['USER']\n./django/db/backends/oracle/creation.py:        password = settings_dict.get('SAVED_PASSWORD') or settings_dict['PASSWORD']\n./django/db/backends/oracle/creation.py:        settings_dict = {**settings_dict, 'USER': user, 'PASSWORD': password}\n./django/db/backends/oracle/creation.py:        return DatabaseWrapper(settings_dict, alias=self.connection.alias)\n./django/db/backends/oracle/creation.py:        return self.connection.settings_dict['NAME']\n./django/db/backends/oracle/creation.py:        credentials in the SAVED_USER/SAVED_PASSWORD key in the settings dict.\n./django/db/backends/oracle/creation.py:        real_settings = settings.DATABASES[self.connection.alias]\n./django/db/backends/oracle/creation.py:        real_settings['SAVED_USER'] = self.connection.settings_dict['SAVED_USER'] = \\\n./django/db/backends/oracle/creation.py:            self.connection.settings_dict['USER']\n./django/db/backends/oracle/creation.py:        real_settings['SAVED_PASSWORD'] = self.connection.settings_dict['SAVED_PASSWORD'] = \\\n./django/db/backends/oracle/creation.py:            self.connection.settings_dict['PASSWORD']\n./django/db/backends/oracle/creation.py:        real_test_settings = real_settings['TEST']\n./django/db/backends/oracle/creation.py:        test_settings = self.connection.settings_dict['TEST']\n./django/db/backends/oracle/creation.py:        real_test_settings['USER'] = real_settings['USER'] = test_settings['USER'] = \\\n./django/db/backends/oracle/creation.py:            self.connection.settings_dict['USER'] = parameters['user']\n./django/db/backends/oracle/creation.py:        real_settings['PASSWORD'] = self.connection.settings_dict['PASSWORD'] = parameters['password']\n./django/db/backends/oracle/creation.py:    def set_as_test_mirror(self, primary_settings_dict):\n./django/db/backends/oracle/creation.py:        database whose settings are given.\n./django/db/backends/oracle/creation.py:        self.connection.settings_dict['USER'] = primary_settings_dict['USER']\n./django/db/backends/oracle/creation.py:        self.connection.settings_dict['PASSWORD'] = primary_settings_dict['PASSWORD']\n./django/db/backends/oracle/creation.py:        self.connection.settings_dict['USER'] = self.connection.settings_dict['SAVED_USER']\n./django/db/backends/oracle/creation.py:        self.connection.settings_dict['PASSWORD'] = self.connection.settings_dict['SAVED_PASSWORD']\n./django/db/backends/oracle/creation.py:        if not success and self._test_settings_get('PASSWORD') is None:\n./django/db/backends/oracle/creation.py:    def _test_settings_get(self, key, default=None, prefixed=None):\n./django/db/backends/oracle/creation.py:        Return a value from the test settings dict, or a given default, or a\n./django/db/backends/oracle/creation.py:        prefixed entry from the main settings dict.\n./django/db/backends/oracle/creation.py:        settings_dict = self.connection.settings_dict\n./django/db/backends/oracle/creation.py:        val = settings_dict['TEST'].get(key, default)\n./django/db/backends/oracle/creation.py:            val = TEST_DATABASE_PREFIX + settings_dict[prefixed]\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('NAME', prefixed='NAME')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('CREATE_DB', default=True)\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('CREATE_USER', default=True)\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('USER', prefixed='USER')\n./django/db/backends/oracle/creation.py:        password = self._test_settings_get('PASSWORD')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('TBLSPACE', prefixed='USER')\n./django/db/backends/oracle/creation.py:        settings_dict = self.connection.settings_dict\n./django/db/backends/oracle/creation.py:        return settings_dict['TEST'].get('TBLSPACE_TMP',\n./django/db/backends/oracle/creation.py:                                         TEST_DATABASE_PREFIX + settings_dict['USER'] + '_temp')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('DATAFILE', default=tblspace)\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('DATAFILE_TMP', default=tblspace)\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('DATAFILE_MAXSIZE', default='500M')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('DATAFILE_TMP_MAXSIZE', default='500M')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('DATAFILE_SIZE', default='50M')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('DATAFILE_TMP_SIZE', default='50M')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('DATAFILE_EXTSIZE', default='25M')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('DATAFILE_TMP_EXTSIZE', default='25M')\n./django/db/backends/oracle/creation.py:        return self._test_settings_get('ORACLE_MANAGED_FILES', default=False)\n./django/db/backends/oracle/creation.py:        return self.connection.settings_dict['NAME']\n./django/db/backends/oracle/creation.py:        settings_dict = self.connection.settings_dict\n./django/db/backends/oracle/creation.py:            settings_dict['HOST'],\n./django/db/backends/oracle/creation.py:            settings_dict['PORT'],\n./django/db/backends/oracle/creation.py:            settings_dict['ENGINE'],\n./django/db/backends/oracle/creation.py:            settings_dict['NAME'],\n./django/db/backends/dummy/base.py:    raise ImproperlyConfigured(\"settings.DATABASES is improperly configured. \"\n./django/db/backends/dummy/base.py:                               \"settings documentation for more details.\")\n./django/db/backends/utils.py:from django.conf import settings\n./django/db/backends/utils.py:    tzinfo = utc if settings.USE_TZ else None\n./django/db/backends/postgresql/operations.py:from django.conf import settings\n./django/db/backends/postgresql/operations.py:        if settings.USE_TZ:\n./django/db/backends/postgresql/base.py:from django.conf import settings\n./django/db/backends/postgresql/base.py:        settings_dict = self.settings_dict\n./django/db/backends/postgresql/base.py:        if settings_dict['NAME'] == '':\n./django/db/backends/postgresql/base.py:                \"settings.DATABASES is improperly configured. \"\n./django/db/backends/postgresql/base.py:        if len(settings_dict['NAME'] or '') > self.ops.max_name_length():\n./django/db/backends/postgresql/base.py:                \"in settings.DATABASES.\" % (\n./django/db/backends/postgresql/base.py:                    settings_dict['NAME'],\n./django/db/backends/postgresql/base.py:                    len(settings_dict['NAME']),\n./django/db/backends/postgresql/base.py:            'database': settings_dict['NAME'] or 'postgres',\n./django/db/backends/postgresql/base.py:            **settings_dict['OPTIONS'],\n./django/db/backends/postgresql/base.py:        if settings_dict['USER']:\n./django/db/backends/postgresql/base.py:            conn_params['user'] = settings_dict['USER']\n./django/db/backends/postgresql/base.py:        if settings_dict['PASSWORD']:\n./django/db/backends/postgresql/base.py:            conn_params['password'] = settings_dict['PASSWORD']\n./django/db/backends/postgresql/base.py:        if settings_dict['HOST']:\n./django/db/backends/postgresql/base.py:            conn_params['host'] = settings_dict['HOST']\n./django/db/backends/postgresql/base.py:        if settings_dict['PORT']:\n./django/db/backends/postgresql/base.py:            conn_params['port'] = settings_dict['PORT']\n./django/db/backends/postgresql/base.py:        options = self.settings_dict['OPTIONS']\n./django/db/backends/postgresql/base.py:        cursor.tzinfo_factory = utc_tzinfo_factory if settings.USE_TZ else None\n./django/db/backends/postgresql/base.py:                if connection.vendor == 'postgresql' and connection.settings_dict['NAME'] != 'postgres':\n./django/db/backends/postgresql/base.py:                        {**self.settings_dict, 'NAME': connection.settings_dict['NAME']},\n./django/db/backends/postgresql/creation.py:        test_settings = self.connection.settings_dict['TEST']\n./django/db/backends/postgresql/creation.py:        assert test_settings['COLLATION'] is None, (\n./django/db/backends/postgresql/creation.py:            encoding=test_settings['CHARSET'],\n./django/db/backends/postgresql/creation.py:            template=test_settings.get('TEMPLATE'),\n./django/db/backends/postgresql/creation.py:        source_database_name = self.connection.settings_dict['NAME']\n./django/db/backends/postgresql/creation.py:        target_database_name = self.get_test_db_clone_settings(suffix)['NAME']\n./django/db/backends/mysql/operations.py:from django.conf import settings\n./django/db/backends/mysql/operations.py:        if settings.USE_TZ and self.connection.timezone_name != tzname:\n./django/db/backends/mysql/operations.py:            if settings.USE_TZ:\n./django/db/backends/mysql/operations.py:            if settings.USE_TZ:\n./django/db/backends/mysql/client.py:    def settings_to_cmd_args(cls, settings_dict):\n./django/db/backends/mysql/client.py:        db = settings_dict['OPTIONS'].get('db', settings_dict['NAME'])\n./django/db/backends/mysql/client.py:        user = settings_dict['OPTIONS'].get('user', settings_dict['USER'])\n./django/db/backends/mysql/client.py:        passwd = settings_dict['OPTIONS'].get('passwd', settings_dict['PASSWORD'])\n./django/db/backends/mysql/client.py:        host = settings_dict['OPTIONS'].get('host', settings_dict['HOST'])\n./django/db/backends/mysql/client.py:        port = settings_dict['OPTIONS'].get('port', settings_dict['PORT'])\n./django/db/backends/mysql/client.py:        server_ca = settings_dict['OPTIONS'].get('ssl', {}).get('ca')\n./django/db/backends/mysql/client.py:        client_cert = settings_dict['OPTIONS'].get('ssl', {}).get('cert')\n./django/db/backends/mysql/client.py:        client_key = settings_dict['OPTIONS'].get('ssl', {}).get('key')\n./django/db/backends/mysql/client.py:        defaults_file = settings_dict['OPTIONS'].get('read_default_file')\n./django/db/backends/mysql/client.py:        args = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict)\n./django/db/backends/mysql/base.py:        settings_dict = self.settings_dict\n./django/db/backends/mysql/base.py:        if settings_dict['USER']:\n./django/db/backends/mysql/base.py:            kwargs['user'] = settings_dict['USER']\n./django/db/backends/mysql/base.py:        if settings_dict['NAME']:\n./django/db/backends/mysql/base.py:            kwargs['db'] = settings_dict['NAME']\n./django/db/backends/mysql/base.py:        if settings_dict['PASSWORD']:\n./django/db/backends/mysql/base.py:            kwargs['passwd'] = settings_dict['PASSWORD']\n./django/db/backends/mysql/base.py:        if settings_dict['HOST'].startswith('/'):\n./django/db/backends/mysql/base.py:            kwargs['unix_socket'] = settings_dict['HOST']\n./django/db/backends/mysql/base.py:        elif settings_dict['HOST']:\n./django/db/backends/mysql/base.py:            kwargs['host'] = settings_dict['HOST']\n./django/db/backends/mysql/base.py:        if settings_dict['PORT']:\n./django/db/backends/mysql/base.py:            kwargs['port'] = int(settings_dict['PORT'])\n./django/db/backends/mysql/base.py:        options = settings_dict['OPTIONS'].copy()\n./django/db/backends/mysql/creation.py:        test_settings = self.connection.settings_dict['TEST']\n./django/db/backends/mysql/creation.py:        if test_settings['CHARSET']:\n./django/db/backends/mysql/creation.py:            suffix.append('CHARACTER SET %s' % test_settings['CHARSET'])\n./django/db/backends/mysql/creation.py:        if test_settings['COLLATION']:\n./django/db/backends/mysql/creation.py:            suffix.append('COLLATE %s' % test_settings['COLLATION'])\n./django/db/backends/mysql/creation.py:        source_database_name = self.connection.settings_dict['NAME']\n./django/db/backends/mysql/creation.py:        target_database_name = self.get_test_db_clone_settings(suffix)['NAME']\n./django/db/backends/mysql/creation.py:        dump_args = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict)[1:]\n./django/db/backends/mysql/creation.py:        load_cmd = DatabaseClient.settings_to_cmd_args(self.connection.settings_dict)\n./django/contrib/auth/tokens.py:from django.conf import settings\n./django/contrib/auth/tokens.py:    secret = settings.SECRET_KEY\n./django/contrib/auth/tokens.py:        if (self._num_days(self._today()) - ts) > settings.PASSWORD_RESET_TIMEOUT_DAYS:\n./django/contrib/auth/tokens.py:        Failing those things, settings.PASSWORD_RESET_TIMEOUT_DAYS eventually\n./django/contrib/auth/__init__.py:from django.conf import settings\n./django/contrib/auth/__init__.py:    for backend_path in settings.AUTHENTICATION_BACKENDS:\n./django/contrib/auth/__init__.py:        return django_apps.get_model(settings.AUTH_USER_MODEL, require_ready=False)\n./django/contrib/auth/__init__.py:            \"AUTH_USER_MODEL refers to model '%s' that has not been installed\" % settings.AUTH_USER_MODEL\n./django/contrib/auth/__init__.py:        if backend_path in settings.AUTHENTICATION_BACKENDS:\n./django/contrib/auth/mixins.py:from django.conf import settings\n./django/contrib/auth/mixins.py:        login_url = self.login_url or settings.LOGIN_URL\n./django/contrib/auth/mixins.py:                '{0} is missing the login_url attribute. Define {0}.login_url, settings.LOGIN_URL, or override '\n./django/contrib/auth/password_validation.py:from django.conf import settings\n./django/contrib/auth/password_validation.py:    return get_password_validators(settings.AUTH_PASSWORD_VALIDATORS)\n./django/contrib/auth/views.py:from django.conf import settings\n./django/contrib/auth/views.py:        return url or resolve_url(settings.LOGIN_REDIRECT_URL)\n./django/contrib/auth/views.py:        elif settings.LOGOUT_REDIRECT_URL:\n./django/contrib/auth/views.py:            next_page = resolve_url(settings.LOGOUT_REDIRECT_URL)\n./django/contrib/auth/views.py:    login_url = resolve_url(login_url or settings.LOGIN_URL)\n./django/contrib/auth/views.py:    resolved_url = resolve_url(login_url or settings.LOGIN_URL)\n./django/contrib/auth/views.py:        context['login_url'] = resolve_url(settings.LOGIN_URL)\n./django/contrib/auth/checks.py:from django.conf import settings\n./django/contrib/auth/checks.py:        cls = apps.get_model(settings.AUTH_USER_MODEL)\n./django/contrib/auth/checks.py:        app_label, model_name = settings.AUTH_USER_MODEL.split('.')\n./django/contrib/auth/checks.py:        if (settings.AUTHENTICATION_BACKENDS ==\n./django/contrib/auth/backends.py:    Authenticates against settings.AUTH_USER_MODEL.\n./django/contrib/auth/hashers.py:from django.conf import settings\n./django/contrib/auth/hashers.py:    for hasher_path in settings.PASSWORD_HASHERS:\n./django/contrib/auth/hashers.py:    specified in the project's settings file if needed.\n./django/contrib/auth/admin.py:from django.conf import settings\n./django/contrib/auth/admin.py:            if self.has_add_permission(request) and settings.DEBUG:\n./django/contrib/auth/middleware.py:from django.conf import settings\n./django/contrib/auth/middleware.py:        ) % (\"_CLASSES\" if settings.MIDDLEWARE is None else \"\")\n./django/contrib/auth/decorators.py:from django.conf import settings\n./django/contrib/auth/decorators.py:            resolved_login_url = resolve_url(login_url or settings.LOGIN_URL)\n./django/contrib/staticfiles/views.py:from django.conf import settings\n./django/contrib/staticfiles/views.py:    if not settings.DEBUG and not insecure:\n./django/contrib/staticfiles/handlers.py:from django.conf import settings\n./django/contrib/staticfiles/handlers.py:        utils.check_settings()\n./django/contrib/staticfiles/handlers.py:        return settings.STATIC_URL\n./django/contrib/staticfiles/management/commands/collectstatic.py:    settings.STATIC_ROOT.\n./django/contrib/staticfiles/management/commands/collectstatic.py:            'location as specified in your settings'\n./django/contrib/staticfiles/management/commands/runserver.py:from django.conf import settings\n./django/contrib/staticfiles/management/commands/runserver.py:        if use_static_handler and (settings.DEBUG or insecure_serving):\n./django/contrib/staticfiles/storage.py:from django.conf import settings\n./django/contrib/staticfiles/storage.py:from django.contrib.staticfiles.utils import check_settings, matches_patterns\n./django/contrib/staticfiles/storage.py:            location = settings.STATIC_ROOT\n./django/contrib/staticfiles/storage.py:            base_url = settings.STATIC_URL\n./django/contrib/staticfiles/storage.py:        check_settings(base_url)\n./django/contrib/staticfiles/storage.py:        if settings.DEBUG and not force:\n./django/contrib/staticfiles/storage.py:            if url.startswith('/') and not url.startswith(settings.STATIC_URL):\n./django/contrib/staticfiles/storage.py:                assert url_path.startswith(settings.STATIC_URL)\n./django/contrib/staticfiles/storage.py:                target_name = url_path[len(settings.STATIC_URL):]\n./django/contrib/staticfiles/storage.py:                    content = original_file.read().decode(settings.FILE_CHARSET)\n./django/contrib/staticfiles/storage.py:        self._wrapped = get_storage_class(settings.STATICFILES_STORAGE)()\n./django/contrib/staticfiles/utils.py:from django.conf import settings\n./django/contrib/staticfiles/utils.py:def check_settings(base_url=None):\n./django/contrib/staticfiles/utils.py:    Check if the staticfiles settings have sane values.\n./django/contrib/staticfiles/utils.py:        base_url = settings.STATIC_URL\n./django/contrib/staticfiles/utils.py:    if settings.MEDIA_URL == base_url:\n./django/contrib/staticfiles/utils.py:                                   \"settings must have different values\")\n./django/contrib/staticfiles/utils.py:    if (settings.DEBUG and settings.MEDIA_URL and settings.STATIC_URL and\n./django/contrib/staticfiles/utils.py:            settings.MEDIA_URL.startswith(settings.STATIC_URL)):\n./django/contrib/staticfiles/utils.py:    if ((settings.MEDIA_ROOT and settings.STATIC_ROOT) and\n./django/contrib/staticfiles/utils.py:            (settings.MEDIA_ROOT == settings.STATIC_ROOT)):\n./django/contrib/staticfiles/utils.py:                                   \"settings must have different values\")\n./django/contrib/staticfiles/finders.py:from django.conf import settings\n./django/contrib/staticfiles/finders.py:        for root in settings.STATICFILES_DIRS:\n./django/contrib/staticfiles/finders.py:        if not isinstance(settings.STATICFILES_DIRS, (list, tuple)):\n./django/contrib/staticfiles/finders.py:        for root in settings.STATICFILES_DIRS:\n./django/contrib/staticfiles/finders.py:            if settings.STATIC_ROOT and os.path.abspath(settings.STATIC_ROOT) == os.path.abspath(root):\n./django/contrib/staticfiles/finders.py:    for finder_path in settings.STATICFILES_FINDERS:\n./django/contrib/staticfiles/urls.py:from django.conf import settings\n./django/contrib/staticfiles/urls.py:        prefix = settings.STATIC_URL\n./django/contrib/staticfiles/urls.py:if settings.DEBUG and not urlpatterns:\n./django/contrib/messages/utils.py:from django.conf import settings\n./django/contrib/messages/utils.py:        **getattr(settings, 'MESSAGE_TAGS', {}),\n./django/contrib/messages/storage/__init__.py:from django.conf import settings\n./django/contrib/messages/storage/__init__.py:    This isn't just default_storage = import_string(settings.MESSAGE_STORAGE)\n./django/contrib/messages/storage/__init__.py:    to avoid accessing the settings at the module level.\n./django/contrib/messages/storage/__init__.py:    return import_string(settings.MESSAGE_STORAGE)(request)\n./django/contrib/messages/storage/session.py:from django.conf import settings\n./django/contrib/messages/storage/session.py:            \"MIDDLEWARE%s list.\" % (\"_CLASSES\" if settings.MIDDLEWARE is None else \"\")\n./django/contrib/messages/storage/base.py:from django.conf import settings\n./django/contrib/messages/storage/base.py:            self._level = getattr(settings, 'MESSAGE_LEVEL', constants.INFO)\n./django/contrib/messages/storage/cookie.py:from django.conf import settings\n./django/contrib/messages/storage/cookie.py:                domain=settings.SESSION_COOKIE_DOMAIN,\n./django/contrib/messages/storage/cookie.py:                secure=settings.SESSION_COOKIE_SECURE or None,\n./django/contrib/messages/storage/cookie.py:                httponly=settings.SESSION_COOKIE_HTTPONLY or None,\n./django/contrib/messages/storage/cookie.py:                samesite=settings.SESSION_COOKIE_SAMESITE,\n./django/contrib/messages/storage/cookie.py:            response.delete_cookie(self.cookie_name, domain=settings.SESSION_COOKIE_DOMAIN)\n./django/contrib/messages/middleware.py:from django.conf import settings\n./django/contrib/messages/middleware.py:            if unstored_messages and settings.DEBUG:\n./django/contrib/sitemaps/__init__.py:from django.conf import settings\n./django/contrib/sitemaps/__init__.py:            for lang_code, lang_name in settings.LANGUAGES:\n./django/contrib/postgres/apps.py:    is \"uninstalled\" by override_settings().\n./django/contrib/gis/db/backends/spatialite/operations.py:                    self.connection.settings_dict['NAME'],\n./django/contrib/gis/db/backends/spatialite/base.py:from django.conf import settings\n./django/contrib/gis/db/backends/spatialite/base.py:        # manually in the settings via the `SPATIALITE_LIBRARY_PATH` setting.\n./django/contrib/gis/db/backends/spatialite/base.py:            getattr(settings, 'SPATIALITE_LIBRARY_PATH', None),\n./django/contrib/gis/db/backends/spatialite/base.py:                if getattr(settings, 'SPATIALITE_LIBRARY_PATH', None):\n./django/contrib/gis/db/backends/postgis/operations.py:from django.conf import settings\n./django/contrib/gis/db/backends/postgis/operations.py:        if hasattr(settings, 'POSTGIS_VERSION'):\n./django/contrib/gis/db/backends/postgis/operations.py:            version = settings.POSTGIS_VERSION\n./django/contrib/gis/db/backends/postgis/operations.py:                    'template?' % self.connection.settings_dict['NAME']\n./django/contrib/gis/geos/libgeos.py:        from django.conf import settings\n./django/contrib/gis/geos/libgeos.py:        lib_path = settings.GEOS_LIBRARY_PATH\n./django/contrib/gis/geos/libgeos.py:            'Try setting GEOS_LIBRARY_PATH in your settings.' %\n./django/contrib/gis/forms/widgets.py:from django.conf import settings\n./django/contrib/gis/forms/widgets.py:            'STATIC_URL': settings.STATIC_URL,\n./django/contrib/gis/gdal/__init__.py: by setting `GDAL_LIBRARY_PATH` in your settings with the path to the GDAL C\n./django/contrib/gis/gdal/libgdal.py:    from django.conf import settings\n./django/contrib/gis/gdal/libgdal.py:    lib_path = settings.GDAL_LIBRARY_PATH\n./django/contrib/gis/gdal/libgdal.py:        'If it is, try setting GDAL_LIBRARY_PATH in your settings.'\n./django/contrib/gis/admin/widgets.py:# Creating a template context that contains Django settings\n./django/contrib/gis/admin/options.py:    The administration options class for Geographic models. Map settings\n./django/contrib/gis/admin/options.py:    # The default map settings that may be overloaded -- still subject\n./django/contrib/gis/admin/options.py:        in the `widget` attribute) using the settings from the attributes set\n./django/contrib/gis/geoip2/__init__.py:directory corresponding to settings.GEOIP_PATH.\n./django/contrib/gis/geoip2/base.py:from django.conf import settings\n./django/contrib/gis/geoip2/base.py:# Creating the settings dictionary with any settings, if needed.\n./django/contrib/gis/geoip2/base.py:    'GEOIP_PATH': getattr(settings, 'GEOIP_PATH', None),\n./django/contrib/gis/geoip2/base.py:    'GEOIP_CITY': getattr(settings, 'GEOIP_CITY', 'GeoLite2-City.mmdb'),\n./django/contrib/gis/geoip2/base.py:    'GEOIP_COUNTRY': getattr(settings, 'GEOIP_COUNTRY', 'GeoLite2-Country.mmdb'),\n./django/contrib/gis/geoip2/base.py:        settings. Keyword arguments may be passed in to customize the locations\n./django/contrib/gis/geoip2/base.py:        * cache: The cache settings when opening up the GeoIP datasets. May be\n./django/contrib/gis/geoip2/base.py:            `GeoIPOptions` C API settings,  respectively. Defaults to 0,\n./django/contrib/gis/geoip2/base.py:            # Constructing the GeoIP database filenames using the settings\n./django/contrib/gis/shortcuts.py:from django.conf import settings\n./django/contrib/gis/shortcuts.py:        zf.writestr('doc.kml', kml.encode(settings.DEFAULT_CHARSET))\n./django/contrib/sessions/management/commands/clearsessions.py:from django.conf import settings\n./django/contrib/sessions/management/commands/clearsessions.py:        engine = import_module(settings.SESSION_ENGINE)\n./django/contrib/sessions/management/commands/clearsessions.py:                              \"expired sessions.\\n\" % settings.SESSION_ENGINE)\n./django/contrib/sessions/backends/base.py:from django.conf import settings\n./django/contrib/sessions/backends/base.py:        self.serializer = import_string(settings.SESSION_SERIALIZER)\n./django/contrib/sessions/backends/base.py:                'request.COOKIES[settings.LANGUAGE_COOKIE_NAME] instead.',\n./django/contrib/sessions/backends/base.py:        return settings.SESSION_COOKIE_AGE\n./django/contrib/sessions/backends/base.py:            return settings.SESSION_EXPIRE_AT_BROWSER_CLOSE\n./django/contrib/sessions/backends/cache.py:from django.conf import settings\n./django/contrib/sessions/backends/cache.py:        self._cache = caches[settings.SESSION_CACHE_ALIAS]\n./django/contrib/sessions/backends/cached_db.py:from django.conf import settings\n./django/contrib/sessions/backends/cached_db.py:        self._cache = caches[settings.SESSION_CACHE_ALIAS]\n./django/contrib/sessions/backends/file.py:from django.conf import settings\n./django/contrib/sessions/backends/file.py:        self.file_prefix = settings.SESSION_COOKIE_NAME\n./django/contrib/sessions/backends/file.py:            storage_path = getattr(settings, 'SESSION_FILE_PATH', None) or tempfile.gettempdir()\n./django/contrib/sessions/backends/file.py:        if settings.USE_TZ:\n./django/contrib/sessions/backends/file.py:        file_prefix = settings.SESSION_COOKIE_NAME\n./django/contrib/sessions/middleware.py:from django.conf import settings\n./django/contrib/sessions/middleware.py:        engine = import_module(settings.SESSION_ENGINE)\n./django/contrib/sessions/middleware.py:        session_key = request.COOKIES.get(settings.SESSION_COOKIE_NAME)\n./django/contrib/sessions/middleware.py:        if settings.SESSION_COOKIE_NAME in request.COOKIES and empty:\n./django/contrib/sessions/middleware.py:                settings.SESSION_COOKIE_NAME,\n./django/contrib/sessions/middleware.py:                path=settings.SESSION_COOKIE_PATH,\n./django/contrib/sessions/middleware.py:                domain=settings.SESSION_COOKIE_DOMAIN,\n./django/contrib/sessions/middleware.py:            if (modified or settings.SESSION_SAVE_EVERY_REQUEST) and not empty:\n./django/contrib/sessions/middleware.py:                        settings.SESSION_COOKIE_NAME,\n./django/contrib/sessions/middleware.py:                        expires=expires, domain=settings.SESSION_COOKIE_DOMAIN,\n./django/contrib/sessions/middleware.py:                        path=settings.SESSION_COOKIE_PATH,\n./django/contrib/sessions/middleware.py:                        secure=settings.SESSION_COOKIE_SECURE or None,\n./django/contrib/sessions/middleware.py:                        httponly=settings.SESSION_COOKIE_HTTPONLY or None,\n./django/contrib/sessions/middleware.py:                        samesite=settings.SESSION_COOKIE_SAMESITE,\n./django/contrib/humanize/templatetags/humanize.py:from django.conf import settings\n./django/contrib/humanize/templatetags/humanize.py:    if settings.USE_L10N and use_l10n:\n./django/contrib/humanize/templatetags/humanize.py:        if settings.USE_L10N:\n./django/contrib/humanize/templatetags/humanize.py:    formatted according to settings.DATE_FORMAT.\n./django/contrib/admin/checks.py:from django.conf import settings\n./django/contrib/admin/checks.py:                _contains_subclass('django.contrib.auth.backends.ModelBackend', settings.AUTHENTICATION_BACKENDS)):\n./django/contrib/admin/checks.py:    if not _contains_subclass('django.contrib.auth.middleware.AuthenticationMiddleware', settings.MIDDLEWARE):\n./django/contrib/admin/checks.py:    if not _contains_subclass('django.contrib.messages.middleware.MessageMiddleware', settings.MIDDLEWARE):\n./django/contrib/admin/checks.py:    if not _contains_subclass('django.contrib.sessions.middleware.SessionMiddleware', settings.MIDDLEWARE):\n./django/contrib/admin/widgets.py:from django.conf import settings\n./django/contrib/admin/widgets.py:        extra = '' if settings.DEBUG else '.min'\n./django/contrib/admin/widgets.py:        extra = '' if settings.DEBUG else '.min'\n./django/contrib/admin/helpers.py:from django.conf import settings\n./django/contrib/admin/helpers.py:            extra = '' if settings.DEBUG else '.min'\n./django/contrib/admin/views/main.py:from django.conf import settings\n./django/contrib/admin/views/main.py:# Changelist settings\n./django/contrib/admin/views/main.py:                if settings.USE_TZ:\n./django/contrib/admin/migrations/0001_initial.py:from django.conf import settings\n./django/contrib/admin/migrations/0001_initial.py:        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n./django/contrib/admin/migrations/0001_initial.py:                    to=settings.AUTH_USER_MODEL,\n./django/contrib/admin/models.py:from django.conf import settings\n./django/contrib/admin/models.py:        settings.AUTH_USER_MODEL,\n./django/contrib/admin/tests.py:from django.test import modify_settings\n./django/contrib/admin/tests.py:@modify_settings(MIDDLEWARE={'append': 'django.contrib.admin.tests.CSPMiddleware'})\n./django/contrib/admin/options.py:from django.conf import settings\n./django/contrib/admin/options.py:        extra = '' if settings.DEBUG else '.min'\n./django/contrib/admin/options.py:        extra = '' if settings.DEBUG else '.min'\n./django/contrib/redirects/middleware.py:from django.conf import settings\n./django/contrib/redirects/middleware.py:        if r is None and settings.APPEND_SLASH and not request.path.endswith('/'):\n./django/contrib/flatpages/views.py:from django.conf import settings\n./django/contrib/flatpages/views.py:        if not url.endswith('/') and settings.APPEND_SLASH:\n./django/contrib/flatpages/forms.py:from django.conf import settings\n./django/contrib/flatpages/forms.py:            settings.APPEND_SLASH and\n./django/contrib/flatpages/forms.py:            'django.middleware.common.CommonMiddleware' in settings.MIDDLEWARE\n./django/contrib/flatpages/templatetags/flatpages.py:from django.conf import settings\n./django/contrib/flatpages/templatetags/flatpages.py:            site_pk = settings.SITE_ID\n./django/contrib/flatpages/middleware.py:from django.conf import settings\n./django/contrib/flatpages/middleware.py:            if settings.DEBUG:\n./django/contrib/admindocs/views.py:from django.conf import settings\n./django/contrib/admindocs/views.py:            # Non-trivial TEMPLATES settings aren't supported (#24125).\n./django/contrib/admindocs/views.py:            # Non-trivial TEMPLATES settings aren't supported (#24125).\n./django/contrib/admindocs/views.py:        urlconf = import_module(settings.ROOT_URLCONF)\n./django/contrib/admindocs/views.py:            # Non-trivial TEMPLATES settings aren't supported (#24125).\n./django/contrib/admindocs/utils.py:        writer_name='html', settings_overrides=overrides,\n./django/contrib/admindocs/utils.py:                inliner.document.settings.link_base,\n./django/contrib/admindocs/utils.py:    context = inliner.document.settings.default_reference_context\n./django/contrib/admindocs/utils.py:            inliner.document.settings.link_base,\n./django/contrib/admindocs/middleware.py:from django.conf import settings\n./django/contrib/admindocs/middleware.py:                \"_CLASSES\" if settings.MIDDLEWARE is None else \"\"\n./django/contrib/admindocs/middleware.py:        if request.method == 'HEAD' and (request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS or\n./django/contrib/sites/managers.py:from django.conf import settings\n./django/contrib/sites/managers.py:        return super().get_queryset().filter(**{self._get_field_name() + '__id': settings.SITE_ID})\n./django/contrib/sites/management.py:from django.conf import settings\n./django/contrib/sites/management.py:        # The default settings set SITE_ID = 1, and some tests in Django's test\n./django/contrib/sites/management.py:        Site(pk=getattr(settings, 'SITE_ID', 1), domain=\"example.com\", name=\"example.com\").save(using=using)\n./django/contrib/sites/models.py:        Return the current Site based on the SITE_ID in the project's settings.\n./django/contrib/sites/models.py:        from django.conf import settings\n./django/contrib/sites/models.py:        if getattr(settings, 'SITE_ID', ''):\n./django/contrib/sites/models.py:            site_id = settings.SITE_ID\n./django/forms/renderers.py:from django.conf import settings\n./django/forms/renderers.py:    renderer_class = import_string(settings.FORM_RENDERER)\n./django/forms/renderers.py:    based on settings.TEMPLATES.\n./django/forms/utils.py:from django.conf import settings\n./django/forms/utils.py:    if settings.USE_TZ and value is not None and timezone.is_naive(value):\n./django/forms/utils.py:    if settings.USE_TZ and value is not None and timezone.is_aware(value):\n./django/forms/widgets.py:from django.conf import settings\n./django/forms/widgets.py:            elif settings.USE_L10N:\n./django/dispatch/dispatcher.py:        from django.conf import settings\n./django/dispatch/dispatcher.py:        if settings.configured and settings.DEBUG:\n./django/template/context.py:        # Set context processors according to the template engine's settings.\n./django/template/utils.py:from django.conf import settings\n./django/template/utils.py:        (structured like settings.TEMPLATES).\n./django/template/utils.py:            self._templates = settings.TEMPLATES\n./django/template/utils.py:                \"Set a unique NAME for each engine in settings.TEMPLATES.\"\n./django/template/utils.py:                    \"in settings.TEMPLATES\".format(alias))\n./django/template/defaulttags.py:from django.conf import settings\n./django/template/defaulttags.py:            if settings.DEBUG:\n./django/template/defaulttags.py:        tzinfo = timezone.get_current_timezone() if settings.USE_TZ else None\n./django/template/backends/dummy.py:from django.conf import settings\n./django/template/backends/dummy.py:                with open(template_file, encoding=settings.FILE_CHARSET) as fp:\n./django/template/backends/base.py:        `params` is a dict of configuration settings.\n./django/template/backends/jinja2.py:from django.conf import settings\n./django/template/backends/jinja2.py:        options.setdefault('auto_reload', settings.DEBUG)\n./django/template/backends/jinja2.py:                           jinja2.DebugUndefined if settings.DEBUG else jinja2.Undefined)\n./django/template/backends/django.py:from django.conf import settings\n./django/template/backends/django.py:        options.setdefault('debug', settings.DEBUG)\n./django/template/backends/django.py:        options.setdefault('file_charset', settings.FILE_CHARSET)\n./django/template/context_processors.py:from django.conf import settings\n./django/template/context_processors.py:    if settings.DEBUG and request.META.get('REMOTE_ADDR') in settings.INTERNAL_IPS:\n./django/template/context_processors.py:        'LANGUAGES': settings.LANGUAGES,\n./django/template/context_processors.py:    return {'STATIC_URL': settings.STATIC_URL}\n./django/template/context_processors.py:    return {'MEDIA_URL': settings.MEDIA_URL}\n./django/views/debug.py:from django.conf import settings\n./django/views/debug.py:    Object to wrap callable appearing in settings.\n./django/views/debug.py:def get_safe_settings():\n./django/views/debug.py:    Return a dictionary of the settings module with values of sensitive\n./django/views/debug.py:    settings replaced with stars (*********).\n./django/views/debug.py:    settings_dict = {}\n./django/views/debug.py:    for k in dir(settings):\n./django/views/debug.py:            settings_dict[k] = cleanse_setting(k, getattr(settings, k))\n./django/views/debug.py:    return settings_dict\n./django/views/debug.py:    return import_string(settings.DEFAULT_EXCEPTION_REPORTER_FILTER)()\n./django/views/debug.py:        return settings.DEBUG is False\n./django/views/debug.py:            'settings': get_safe_settings(),\n./django/views/debug.py:    urlconf = getattr(request, 'urlconf', settings.ROOT_URLCONF)\n./django/views/debug.py:        'root_urlconf': settings.ROOT_URLCONF,\n./django/views/debug.py:        'settings': get_safe_settings(),\n./django/views/csrf.py:from django.conf import settings\n./django/views/csrf.py:# other way of making it available independent of what is in the settings file.\n./django/views/csrf.py:  True</code> in your Django settings file. Change that to <code>False</code>,\n./django/views/csrf.py:        'DEBUG': settings.DEBUG,\n./django/views/generic/dates.py:from django.conf import settings\n./django/views/generic/dates.py:            if settings.USE_TZ:\n./django/views/generic/dates.py:            if settings.USE_TZ:\n./django/views/generic/dates.py:    if settings.USE_TZ:\n./django/views/i18n.py:from django.conf import settings\n./django/views/i18n.py:                settings.LANGUAGE_COOKIE_NAME, lang_code,\n./django/views/i18n.py:                max_age=settings.LANGUAGE_COOKIE_AGE,\n./django/views/i18n.py:                path=settings.LANGUAGE_COOKIE_PATH,\n./django/views/i18n.py:                domain=settings.LANGUAGE_COOKIE_DOMAIN,\n./django/views/i18n.py:                secure=settings.LANGUAGE_COOKIE_SECURE,\n./django/views/i18n.py:                httponly=settings.LANGUAGE_COOKIE_HTTPONLY,\n./django/views/i18n.py:                samesite=settings.LANGUAGE_COOKIE_SAMESITE,\n./django/templatetags/static.py:            from django.conf import settings\n./django/templatetags/static.py:            prefix = iri_to_uri(getattr(settings, name, ''))\n./django/templatetags/static.py:    ``settings.STATIC_URL``.\n./django/templatetags/static.py:    ``settings.MEDIA_URL``.\n./django/templatetags/tz.py:    regardless of the value of ``settings.USE_TZ``.\n./django/templatetags/l10n.py:    regardless of the value of ``settings.USE_L10N``.\n./django/templatetags/l10n.py:    regardless of the value of ``settings.USE_L10N``.\n./django/templatetags/l10n.py:    `settings.USE_L10N`.\n./django/templatetags/i18n.py:from django.conf import settings\n./django/templatetags/i18n.py:        context[self.variable] = [(k, translation.gettext(v)) for k, v in settings.LANGUAGES]\n./django/templatetags/i18n.py:    This puts settings.LANGUAGES into the named variable.\n./django/templatetags/i18n.py:    a list of strings or a settings.LANGUAGES style list (or any sequence of\n./django/http/multipartparser.py:from django.conf import settings\n./django/http/multipartparser.py:        self._encoding = encoding or settings.DEFAULT_CHARSET\n./django/http/multipartparser.py:                    if (settings.DATA_UPLOAD_MAX_NUMBER_FIELDS is not None and\n./django/http/multipartparser.py:                            settings.DATA_UPLOAD_MAX_NUMBER_FIELDS < num_post_keys):\n./django/http/multipartparser.py:                            'settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.'\n./django/http/multipartparser.py:                    if settings.DATA_UPLOAD_MAX_MEMORY_SIZE is not None:\n./django/http/multipartparser.py:                        read_size = settings.DATA_UPLOAD_MAX_MEMORY_SIZE - num_bytes_read\n./django/http/multipartparser.py:                    if (settings.DATA_UPLOAD_MAX_MEMORY_SIZE is not None and\n./django/http/multipartparser.py:                            num_bytes_read > settings.DATA_UPLOAD_MAX_MEMORY_SIZE):\n./django/http/multipartparser.py:                        raise RequestDataTooBig('Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.')\n./django/http/response.py:from django.conf import settings\n./django/http/response.py:        return settings.DEFAULT_CHARSET\n./django/http/request.py:from django.conf import settings\n./django/http/request.py:        if settings.USE_X_FORWARDED_HOST and (\n./django/http/request.py:        allowed_hosts = settings.ALLOWED_HOSTS\n./django/http/request.py:        if settings.DEBUG and not allowed_hosts:\n./django/http/request.py:        if settings.USE_X_FORWARDED_PORT and 'HTTP_X_FORWARDED_PORT' in self.META:\n./django/http/request.py:        if settings.SECURE_PROXY_SSL_HEADER:\n./django/http/request.py:                header, secure_value = settings.SECURE_PROXY_SSL_HEADER\n./django/http/request.py:                                 for handler in settings.FILE_UPLOAD_HANDLERS]\n./django/http/request.py:            # If there are no upload handlers defined, initialize them from settings.\n./django/http/request.py:            if (settings.DATA_UPLOAD_MAX_MEMORY_SIZE is not None and\n./django/http/request.py:                    int(self.META.get('CONTENT_LENGTH') or 0) > settings.DATA_UPLOAD_MAX_MEMORY_SIZE):\n./django/http/request.py:                raise RequestDataTooBig('Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.')\n./django/http/request.py:        self.encoding = encoding or settings.DEFAULT_CHARSET\n./django/http/request.py:            'fields_limit': settings.DATA_UPLOAD_MAX_NUMBER_FIELDS,\n./django/http/request.py:            self._encoding = settings.DEFAULT_CHARSET\n./django/urls/base.py:    settings). If urlconf_name is None, revert back to the default.\n./django/urls/resolvers.py:from django.conf import settings\n./django/urls/resolvers.py:        urlconf = settings.ROOT_URLCONF\n./django/urls/resolvers.py:        if not settings.APPEND_SLASH:\n./django/urls/resolvers.py:        language_code = get_language() or settings.LANGUAGE_CODE\n./django/urls/resolvers.py:        if language_code == settings.LANGUAGE_CODE and not self.prefix_default_language:\n./django/test/signals.py:# Settings that may not work well when using 'override_settings' (#19031)\n./django/test/signals.py:def localize_settings_changed(**kwargs):\n./django/test/signals.py:        # this stacklevel shows the line containing the override_settings call.\n./django/test/__init__.py:    ignore_warnings, modify_settings, override_settings,\n./django/test/__init__.py:    'modify_settings', 'override_settings', 'override_system_checks', 'tag',\n./django/test/client.py:from django.conf import settings\n./django/test/client.py:        # settings weren't available.\n./django/test/client.py:        return force_bytes(s, settings.DEFAULT_CHARSET)\n./django/test/client.py:        return force_bytes(s, settings.DEFAULT_CHARSET)\n./django/test/client.py:                charset = settings.DEFAULT_CHARSET\n./django/test/client.py:        data = force_bytes(data, settings.DEFAULT_CHARSET)\n./django/test/client.py:        engine = import_module(settings.SESSION_ENGINE)\n./django/test/client.py:        cookie = self.cookies.get(settings.SESSION_COOKIE_NAME)\n./django/test/client.py:        self.cookies[settings.SESSION_COOKIE_NAME] = session.session_key\n./django/test/client.py:            for backend_path in settings.AUTHENTICATION_BACKENDS:\n./django/test/client.py:        engine = import_module(settings.SESSION_ENGINE)\n./django/test/client.py:        session_cookie = settings.SESSION_COOKIE_NAME\n./django/test/client.py:            'domain': settings.SESSION_COOKIE_DOMAIN,\n./django/test/client.py:            'secure': settings.SESSION_COOKIE_SECURE or None,\n./django/test/client.py:        engine = import_module(settings.SESSION_ENGINE)\n./django/test/runner.py:        settings_dict = connection.creation.get_test_db_clone_settings(str(_worker_id))\n./django/test/runner.py:        # connection.settings_dict must be updated in place for changes to be\n./django/test/runner.py:        # connection.settings_dict = settings_dict, new threads would connect\n./django/test/runner.py:        connection.settings_dict.update(settings_dict)\n./django/test/runner.py:            help='Sets settings.DEBUG to True.',\n./django/test/utils.py:from django.conf import UserSettingsHolder, settings\n./django/test/utils.py:    'modify_settings', 'override_settings',\n./django/test/utils.py:        debug = settings.DEBUG\n./django/test/utils.py:    saved_data.allowed_hosts = settings.ALLOWED_HOSTS\n./django/test/utils.py:    settings.ALLOWED_HOSTS = [*settings.ALLOWED_HOSTS, 'testserver']\n./django/test/utils.py:    saved_data.debug = settings.DEBUG\n./django/test/utils.py:    settings.DEBUG = debug\n./django/test/utils.py:    saved_data.email_backend = settings.EMAIL_BACKEND\n./django/test/utils.py:    settings.EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend'\n./django/test/utils.py:    settings.ALLOWED_HOSTS = saved_data.allowed_hosts\n./django/test/utils.py:    settings.DEBUG = saved_data.debug\n./django/test/utils.py:    settings.EMAIL_BACKEND = saved_data.email_backend\n./django/test/utils.py:                    serialize=connection.settings_dict.get('TEST', {}).get('SERIALIZE', True),\n./django/test/utils.py:                connections[alias].creation.set_as_test_mirror(connections[first_alias].settings_dict)\n./django/test/utils.py:            connections[mirror_alias].settings_dict)\n./django/test/utils.py:        test_settings = connection.settings_dict['TEST']\n./django/test/utils.py:        if test_settings['MIRROR']:\n./django/test/utils.py:            mirrored_aliases[alias] = test_settings['MIRROR']\n./django/test/utils.py:                (connection.settings_dict['NAME'], set())\n./django/test/utils.py:            if 'DEPENDENCIES' in test_settings:\n./django/test/utils.py:                dependencies[alias] = test_settings['DEPENDENCIES']\n./django/test/utils.py:                    dependencies[alias] = test_settings.get('DEPENDENCIES', [DEFAULT_DB_ALIAS])\n./django/test/utils.py:def get_runner(settings, test_runner_class=None):\n./django/test/utils.py:    test_runner_class = test_runner_class or settings.TEST_RUNNER\n./django/test/utils.py:class override_settings(TestContextDecorator):\n./django/test/utils.py:        # Keep this code at the beginning to leave the settings unchanged\n./django/test/utils.py:        override = UserSettingsHolder(settings._wrapped)\n./django/test/utils.py:        self.wrapped = settings._wrapped\n./django/test/utils.py:        settings._wrapped = override\n./django/test/utils.py:                    sender=settings._wrapped.__class__,\n./django/test/utils.py:        settings._wrapped = self.wrapped\n./django/test/utils.py:            new_value = getattr(settings, key, None)\n./django/test/utils.py:                sender=settings._wrapped.__class__,\n./django/test/utils.py:        if test_func._overridden_settings is None:\n./django/test/utils.py:            test_func._overridden_settings = self.options\n./django/test/utils.py:            test_func._overridden_settings = {\n./django/test/utils.py:                **test_func._overridden_settings,\n./django/test/utils.py:                \"with override_settings\")\n./django/test/utils.py:class modify_settings(override_settings):\n./django/test/utils.py:    Like override_settings, but makes it possible to append, prepend, or remove\n./django/test/utils.py:        super(override_settings, self).__init__()\n./django/test/utils.py:        if test_func._modified_settings is None:\n./django/test/utils.py:            test_func._modified_settings = self.operations\n./django/test/utils.py:            test_func._modified_settings = list(\n./django/test/utils.py:                test_func._modified_settings) + self.operations\n./django/test/utils.py:                value = list(getattr(settings, name, []))\n./django/test/utils.py:    return override_settings(TEMPLATES=[{\n./django/test/testcases.py:from django.conf import settings\n./django/test/testcases.py:    CaptureQueriesContext, ContextList, compare_xml, modify_settings,\n./django/test/testcases.py:    override_settings,\n./django/test/testcases.py:    _overridden_settings = None\n./django/test/testcases.py:    _modified_settings = None\n./django/test/testcases.py:        if cls._overridden_settings:\n./django/test/testcases.py:            cls._cls_overridden_context = override_settings(**cls._overridden_settings)\n./django/test/testcases.py:        if cls._modified_settings:\n./django/test/testcases.py:            cls._cls_modified_context = modify_settings(cls._modified_settings)\n./django/test/testcases.py:                message = '%s.%s.databases refers to %r which is not defined in settings.DATABASES.' % (\n./django/test/testcases.py:    def settings(self, **kwargs):\n./django/test/testcases.py:        return override_settings(**kwargs)\n./django/test/testcases.py:    def modify_settings(self, **kwargs):\n./django/test/testcases.py:        return modify_settings(**kwargs)\n./django/test/testcases.py:                if domain and not validate_host(domain, settings.ALLOWED_HOSTS):\n./django/test/testcases.py:                sender=settings._wrapped.__class__,\n./django/test/testcases.py:                    sender=settings._wrapped.__class__,\n./django/test/testcases.py:                    value=settings.INSTALLED_APPS,\n./django/test/testcases.py:                include_mirrors or not connections[alias].settings_dict['TEST']['MIRROR']\n./django/test/testcases.py:                setting_changed.send(sender=settings._wrapped.__class__,\n./django/test/testcases.py:                                     value=settings.INSTALLED_APPS,\n./django/test/testcases.py:    the *_ROOT settings, and serves those files, publishing them under *_URL.\n./django/test/testcases.py:        return settings.STATIC_ROOT\n./django/test/testcases.py:        return settings.STATIC_URL\n./django/test/testcases.py:        return settings.MEDIA_ROOT\n./django/test/testcases.py:        return settings.MEDIA_URL\n./django/test/testcases.py:        cls._live_server_modified_settings = modify_settings(\n./django/test/testcases.py:        cls._live_server_modified_settings.enable()\n./django/test/testcases.py:        cls._live_server_modified_settings.disable()\n./django/apps/registry.py:            from django.conf import settings\n./django/apps/registry.py:            # If \"not ready\" is due to unconfigured settings, accessing\n./django/apps/registry.py:            settings.INSTALLED_APPS\n./django/apps/registry.py:    def get_swappable_settings_name(self, to_string):\n./django/apps/registry.py:        corresponding settings name if it refers to a swappable model. If the\n./django/apps/registry.py:        critical when it comes to migrations. Since the swappable settings don't\n./django/apps/registry.py:        change after Django has loaded the settings, there is no reason to get\n./django/apps/registry.py:        the respective settings attribute over and over again.\n./tests/check_framework/test_model_checks.py:    isolate_apps, modify_settings, override_settings, override_system_checks,\n./tests/check_framework/test_model_checks.py:    @override_settings(DATABASE_ROUTERS=['check_framework.test_model_checks.EmptyRouter'])\n./tests/check_framework/test_model_checks.py:                    'You have configured settings.DATABASE_ROUTERS. Verify '\n./tests/check_framework/test_model_checks.py:    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n./tests/check_framework/test_model_checks.py:    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n./tests/check_framework/test_model_checks.py:    @override_settings(DATABASE_ROUTERS=['check_framework.test_model_checks.EmptyRouter'])\n./tests/check_framework/test_model_checks.py:                    'You have configured settings.DATABASE_ROUTERS. Verify '\n./tests/check_framework/test_model_checks.py:    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n./tests/check_framework/test_model_checks.py:    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n./tests/check_framework/test_model_checks.py:    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n./tests/check_framework/test_model_checks.py:    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n./tests/check_framework/test_security.py:from django.conf import settings\n./tests/check_framework/test_security.py:from django.test.utils import override_settings\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[])\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=['django.middleware.csrf.CsrfViewMiddleware'])\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[], CSRF_COOKIE_SECURE=False)\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[])\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=['django.middleware.security.SecurityMiddleware'])\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[], SECURE_HSTS_SECONDS=0)\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[], SECURE_HSTS_PRELOAD=False, SECURE_HSTS_SECONDS=3600)\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[])\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[\"django.middleware.clickjacking.XFrameOptionsMiddleware\"])\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[], X_FRAME_OPTIONS='SAMEORIGIN')\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[], SECURE_CONTENT_TYPE_NOSNIFF=False)\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(MIDDLEWARE=[], SECURE_SSL_REDIRECT=False)\n./tests/check_framework/test_security.py:    @override_settings(\n./tests/check_framework/test_security.py:    @override_settings(SECRET_KEY=('abcdefghijklmnopqrstuvwx' * 2) + 'ab')\n./tests/check_framework/test_security.py:        self.assertEqual(len(settings.SECRET_KEY), base.SECRET_KEY_MIN_LENGTH)\n./tests/check_framework/test_security.py:        self.assertGreater(len(set(settings.SECRET_KEY)), base.SECRET_KEY_MIN_UNIQUE_CHARACTERS)\n./tests/check_framework/test_security.py:    @override_settings(SECRET_KEY='')\n./tests/check_framework/test_security.py:    @override_settings(SECRET_KEY=None)\n./tests/check_framework/test_security.py:        del settings.SECRET_KEY\n./tests/check_framework/test_security.py:    @override_settings(SECRET_KEY=None)\n./tests/check_framework/test_security.py:    @override_settings(SECRET_KEY=('abcdefghijklmnopqrstuvwx' * 2) + 'a')\n./tests/check_framework/test_security.py:        self.assertEqual(len(settings.SECRET_KEY), base.SECRET_KEY_MIN_LENGTH - 1)\n./tests/check_framework/test_security.py:    @override_settings(SECRET_KEY='abcd' * 20)\n./tests/check_framework/test_security.py:        self.assertGreater(len(settings.SECRET_KEY), base.SECRET_KEY_MIN_LENGTH)\n./tests/check_framework/test_security.py:        self.assertLess(len(set(settings.SECRET_KEY)), base.SECRET_KEY_MIN_UNIQUE_CHARACTERS)\n./tests/check_framework/test_security.py:    @override_settings(DEBUG=True)\n./tests/check_framework/test_security.py:    @override_settings(DEBUG=False)\n./tests/check_framework/test_security.py:    @override_settings(ALLOWED_HOSTS=[])\n./tests/check_framework/test_security.py:    @override_settings(ALLOWED_HOSTS=['.example.com'])\n./tests/check_framework/test_caches.py:from django.test.utils import override_settings\n./tests/check_framework/test_caches.py:    @override_settings(CACHES=VALID_CACHES_CONFIGURATION)\n./tests/check_framework/test_caches.py:    @override_settings(CACHES=INVALID_CACHES_CONFIGURATION)\n./tests/check_framework/test_multi_db.py:from django.test.utils import isolate_apps, override_settings\n./tests/check_framework/test_multi_db.py:@override_settings(DATABASE_ROUTERS=[TestRouter()])\n./tests/check_framework/test_templates.py:from django.test.utils import override_settings\n./tests/check_framework/test_templates.py:    @override_settings(TEMPLATES=TEMPLATES_APP_DIRS_AND_LOADERS)\n./tests/check_framework/test_templates.py:        with self.settings(TEMPLATES=TEMPLATES):\n./tests/check_framework/test_templates.py:        with self.settings(TEMPLATES=TEMPLATES):\n./tests/check_framework/test_templates.py:    @override_settings(TEMPLATES=TEMPLATES_STRING_IF_INVALID)\n./tests/check_framework/test_templates.py:        with self.settings(TEMPLATES=TEMPLATES):\n./tests/check_framework/test_templates.py:        with self.settings(TEMPLATES=TEMPLATES):\n./tests/check_framework/test_templates.py:        with self.settings(TEMPLATES=TEMPLATES):\n./tests/check_framework/test_urls.py:from django.conf import settings\n./tests/check_framework/test_urls.py:    E006, check_url_config, check_url_namespaces_unique, check_url_settings,\n./tests/check_framework/test_urls.py:from django.test.utils import override_settings\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.no_warnings')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.no_warnings_i18n')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.warning_in_include')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.include_with_dollar')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.contains_tuple')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.include_contains_tuple')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.beginning_with_slash')\n./tests/check_framework/test_urls.py:    @override_settings(\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.name_with_colon')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF=None)\n./tests/check_framework/test_urls.py:    def test_no_root_urlconf_in_settings(self):\n./tests/check_framework/test_urls.py:        delattr(settings, 'ROOT_URLCONF')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.non_unique_namespaces')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.unique_namespaces')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.path_compatibility.contains_re_named_group')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.path_compatibility.beginning_with_caret')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.path_compatibility.ending_with_dollar')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.bad_error_handlers')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.bad_error_handlers_invalid_path')\n./tests/check_framework/test_urls.py:    @override_settings(ROOT_URLCONF='check_framework.urls.good_error_handlers')\n./tests/check_framework/test_urls.py:    @override_settings(STATIC_URL='a/', MEDIA_URL='b/')\n./tests/check_framework/test_urls.py:        self.assertEqual(check_url_settings(None), [])\n./tests/check_framework/test_urls.py:    @override_settings(STATIC_URL='', MEDIA_URL='')\n./tests/check_framework/test_urls.py:        self.assertEqual(check_url_settings(None), [])\n./tests/check_framework/test_urls.py:    @override_settings(STATIC_URL='noslash')\n./tests/check_framework/test_urls.py:        self.assertEqual(check_url_settings(None), [E006('STATIC_URL')])\n./tests/check_framework/test_urls.py:    @override_settings(STATIC_URL='slashes//')\n./tests/check_framework/test_urls.py:        self.assertEqual(check_url_settings(None), [])\n./tests/check_framework/test_urls.py:    @override_settings(MEDIA_URL='noslash')\n./tests/check_framework/test_urls.py:        self.assertEqual(check_url_settings(None), [E006('MEDIA_URL')])\n./tests/check_framework/tests.py:    isolate_apps, override_settings, override_system_checks,\n./tests/check_framework/tests.py:    @override_settings(SILENCED_SYSTEM_CHECKS=['myerrorcheck.E001'])\n./tests/check_framework/tests.py:    @override_settings(SILENCED_SYSTEM_CHECKS=['mywarningcheck.E001'])\n./tests/check_framework/test_translation.py:    check_language_settings_consistent, check_setting_language_code,\n./tests/check_framework/test_translation.py:            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n./tests/check_framework/test_translation.py:            with self.subTest(tag), self.settings(LANGUAGE_CODE=tag):\n./tests/check_framework/test_translation.py:            with self.subTest(tag), self.settings(LANGUAGES=[(tag, tag)]):\n./tests/check_framework/test_translation.py:            with self.subTest(tag), self.settings(LANGUAGES=[(tag, tag)]):\n./tests/check_framework/test_translation.py:            with self.subTest(tag), self.settings(LANGUAGES_BIDI=[tag]):\n./tests/check_framework/test_translation.py:            with self.subTest(tag), self.settings(LANGUAGES_BIDI=[tag]):\n./tests/check_framework/test_translation.py:    def test_inconsistent_language_settings(self):\n./tests/check_framework/test_translation.py:        with self.settings(LANGUAGE_CODE='fr', LANGUAGES=[('en', 'English')]):\n./tests/check_framework/test_translation.py:            self.assertEqual(check_language_settings_consistent(None), [\n./tests/postgres_tests/__init__.py:from django.test import SimpleTestCase, TestCase, modify_settings\n./tests/postgres_tests/__init__.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_search.py:from django.test import SimpleTestCase, modify_settings, skipUnlessDBFeature\n./tests/postgres_tests/test_search.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_search.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_search.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_search.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_integration.py:            [sys.executable, '-m', 'django', 'check', '--settings', 'integration_settings'],\n./tests/postgres_tests/test_unaccent.py:from django.test import modify_settings\n./tests/postgres_tests/test_unaccent.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_citext.py:from django.test.utils import modify_settings\n./tests/postgres_tests/test_citext.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_array.py:from django.test import TransactionTestCase, modify_settings, override_settings\n./tests/postgres_tests/test_array.py:    @override_settings(MIGRATION_MODULES={\n./tests/postgres_tests/test_array.py:    @override_settings(MIGRATION_MODULES={\n./tests/postgres_tests/test_array.py:    @modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_apps.py:from django.test.utils import modify_settings\n./tests/postgres_tests/test_apps.py:        with modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'}):\n./tests/postgres_tests/test_apps.py:        with self.modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'}):\n./tests/postgres_tests/test_ranges.py:from django.test import ignore_warnings, override_settings\n./tests/postgres_tests/test_ranges.py:    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Johannesburg')\n./tests/postgres_tests/test_introspection.py:from django.test.utils import modify_settings\n./tests/postgres_tests/test_introspection.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/postgres_tests/test_trigram.py:from django.test import modify_settings\n./tests/postgres_tests/test_trigram.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\n./tests/invalid_models_tests/test_ordinary_fields.py:from django.test.utils import isolate_apps, override_settings\n./tests/invalid_models_tests/test_ordinary_fields.py:    @override_settings(USE_TZ=True)\n./tests/invalid_models_tests/test_ordinary_fields.py:    @override_settings(USE_TZ=True)\n./tests/invalid_models_tests/test_ordinary_fields.py:    @override_settings(USE_TZ=True)\n./tests/invalid_models_tests/test_models.py:from django.conf import settings\n./tests/invalid_models_tests/test_models.py:from django.test.utils import isolate_apps, override_settings, register_lookup\n./tests/invalid_models_tests/test_models.py:    for db in settings.DATABASES:\n./tests/invalid_models_tests/test_models.py:    @override_settings(TEST_SWAPPED_MODEL_BAD_VALUE='not-a-model')\n./tests/invalid_models_tests/test_models.py:    @override_settings(TEST_SWAPPED_MODEL_BAD_MODEL='not_an_app.Target')\n./tests/invalid_models_tests/test_relative_fields.py:from django.test.utils import isolate_apps, override_settings\n./tests/invalid_models_tests/test_relative_fields.py:    @override_settings(TEST_SWAPPED_MODEL='invalid_models_tests.Replacement')\n./tests/invalid_models_tests/test_relative_fields.py:            hint=\"Update the relation to point at 'settings.TEST_SWAPPED_MODEL'.\",\n./tests/sitemaps_tests/test_http.py:from django.conf import settings\n./tests/sitemaps_tests/test_http.py:from django.test import modify_settings, override_settings\n./tests/sitemaps_tests/test_http.py:    @override_settings(TEMPLATES=[{\n./tests/sitemaps_tests/test_http.py:    @override_settings(TEMPLATES=[{\n./tests/sitemaps_tests/test_http.py:    @skipUnless(settings.USE_I18N, \"Internationalization is not enabled\")\n./tests/sitemaps_tests/test_http.py:    @override_settings(USE_L10N=True)\n./tests/sitemaps_tests/test_http.py:    @modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'})\n./tests/sitemaps_tests/test_http.py:    @modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'})\n./tests/sitemaps_tests/test_http.py:    @override_settings(LANGUAGES=(('en', 'English'), ('pt', 'Portuguese')))\n./tests/sitemaps_tests/test_utils.py:from django.test import modify_settings, override_settings\n./tests/sitemaps_tests/test_utils.py:    @override_settings(ROOT_URLCONF='sitemaps_tests.urls.index_only')\n./tests/sitemaps_tests/test_utils.py:    @override_settings(ROOT_URLCONF='sitemaps_tests.urls.empty')\n./tests/sitemaps_tests/test_utils.py:    @modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'})\n./tests/sitemaps_tests/base.py:from django.test import TestCase, modify_settings, override_settings\n./tests/sitemaps_tests/base.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.sitemaps'})\n./tests/sitemaps_tests/base.py:@override_settings(ROOT_URLCONF='sitemaps_tests.urls.http')\n./tests/sitemaps_tests/test_generic.py:from django.test import override_settings\n./tests/sitemaps_tests/test_generic.py:@override_settings(ABSOLUTE_URL_OVERRIDES={})\n./tests/sitemaps_tests/test_https.py:from django.test import override_settings\n./tests/sitemaps_tests/test_https.py:@override_settings(ROOT_URLCONF='sitemaps_tests.urls.https')\n./tests/sitemaps_tests/test_https.py:@override_settings(SECURE_PROXY_SSL_HEADER=False)\n./tests/app_loading/tests.py:            with self.settings(INSTALLED_APPS=['app_with_models']):\n./tests/app_loading/tests.py:            with self.settings(INSTALLED_APPS=['app_no_models']):\n./tests/app_loading/tests.py:            with self.settings(INSTALLED_APPS=['omelet.app_with_models']):\n./tests/app_loading/tests.py:            with self.settings(INSTALLED_APPS=['omelet.app_no_models']):\n./tests/app_loading/tests.py:                with self.settings(INSTALLED_APPS=['broken_app']):\n./tests/admin_widgets/test_autocomplete_widget.py:from django.test import TestCase, override_settings\n./tests/admin_widgets/test_autocomplete_widget.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:from django.conf import settings\n./tests/admin_widgets/tests.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/admin_widgets/tests.py:        # Override any settings on the model admin\n./tests/admin_widgets/tests.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:        with self.settings(USE_L10N=True), translation.override('de-at'):\n./tests/admin_widgets/tests.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:@override_settings(ROOT_URLCONF='admin_widgets.urls')\n./tests/admin_widgets/tests.py:        for language_code, language_name in settings.LANGUAGES:\n./tests/admin_widgets/tests.py:            with override_settings(LANGUAGE_CODE=language_code, USE_L10N=True):\n./tests/admin_widgets/tests.py:@override_settings(TIME_ZONE='Asia/Singapore')\n./tests/admin_widgets/tests.py:        in the default time zone \"America/Chicago\" despite `override_settings` changing\n./tests/admin_widgets/tests.py:        # settings has the same UTC offset as \"Asia/Singapore\" because the\n./tests/admin_widgets/tests.py:@override_settings(TIME_ZONE='US/Eastern')\n./tests/view_tests/tests/test_defaults.py:from django.test.utils import override_settings\n./tests/view_tests/tests/test_defaults.py:@override_settings(ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_defaults.py:    @override_settings(TEMPLATES=[{\n./tests/view_tests/tests/test_defaults.py:    @override_settings(TEMPLATES=[{\n./tests/view_tests/tests/test_specials.py:from django.test import SimpleTestCase, override_settings\n./tests/view_tests/tests/test_specials.py:@override_settings(ROOT_URLCONF='view_tests.generic_urls')\n./tests/view_tests/tests/test_i18n.py:from django.conf import settings\n./tests/view_tests/tests/test_i18n.py:    RequestFactory, SimpleTestCase, TestCase, ignore_warnings, modify_settings,\n./tests/view_tests/tests/test_i18n.py:    override_settings,\n./tests/view_tests/tests/test_i18n.py:@override_settings(ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_i18n.py:        return [code for code, name in settings.LANGUAGES if not code == current_language][0]\n./tests/view_tests/tests/test_i18n.py:        language_cookie = self.client.cookies[settings.LANGUAGE_COOKIE_NAME]\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:            'request.COOKIES[settings.LANGUAGE_COOKIE_NAME] instead.'\n./tests/view_tests/tests/test_i18n.py:        test_settings = {\n./tests/view_tests/tests/test_i18n.py:        with self.settings(**test_settings):\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, lang_code)\n./tests/view_tests/tests/test_i18n.py:    @modify_settings(MIDDLEWARE={\n./tests/view_tests/tests/test_i18n.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, 'nl')\n./tests/view_tests/tests/test_i18n.py:@override_settings(ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_i18n.py:    @override_settings(LANGUAGE_CODE='de')\n./tests/view_tests/tests/test_i18n.py:        \"\"\"The javascript_catalog can be deployed with language settings\"\"\"\n./tests/view_tests/tests/test_i18n.py:    @override_settings(USE_I18N=False)\n./tests/view_tests/tests/test_i18n.py:        The json_catalog returns the language catalog and settings as JSON.\n./tests/view_tests/tests/test_i18n.py:        languages and you've set settings.LANGUAGE_CODE to some other language\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='es'), override('en-us'):\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='es'), override('en-us'):\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='fr'), override('fi'):\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='pt'), override('ru'):\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='ru'), override('pt'):\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='fr'), override('en-us'):\n./tests/view_tests/tests/test_i18n.py:    @modify_settings(INSTALLED_APPS={'append': 'view_tests.app0'})\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='fr'), override('en-us'):\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='fr'), override('none'):\n./tests/view_tests/tests/test_i18n.py:    @modify_settings(INSTALLED_APPS={'append': ['view_tests.app5']})\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='en-us'), override('fr'):\n./tests/view_tests/tests/test_i18n.py:    @modify_settings(INSTALLED_APPS={'append': ['view_tests.app1', 'view_tests.app2']})\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='en-us'), override('fr'):\n./tests/view_tests/tests/test_i18n.py:    @modify_settings(INSTALLED_APPS={'append': ['view_tests.app3', 'view_tests.app4']})\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='fr'), override('es-ar'):\n./tests/view_tests/tests/test_i18n.py:        extended_locale_paths = settings.LOCALE_PATHS + [\n./tests/view_tests/tests/test_i18n.py:        with self.settings(LANGUAGE_CODE='es-ar', LOCALE_PATHS=extended_locale_paths):\n./tests/view_tests/tests/test_i18n.py:@override_settings(ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_i18n.py:    @override_settings(LANGUAGE_CODE='de')\n./tests/view_tests/tests/test_i18n.py:    @modify_settings(INSTALLED_APPS={'append': ['view_tests.app1', 'view_tests.app2']})\n./tests/view_tests/tests/test_i18n.py:    @override_settings(LANGUAGE_CODE='fr')\n./tests/view_tests/tests/test_debug.py:from django.test import RequestFactory, SimpleTestCase, override_settings\n./tests/view_tests/tests/test_debug.py:@override_settings(DEBUG=True, ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_debug.py:    @override_settings(TEMPLATES=[{\n./tests/view_tests/tests/test_debug.py:    @override_settings(TEMPLATES=[{\n./tests/view_tests/tests/test_debug.py:    @override_settings(ROOT_URLCONF=WithoutEmptyPathUrls)\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True, USE_L10N=True):\n./tests/view_tests/tests/test_debug.py:            with override_settings(TEMPLATES=[{\n./tests/view_tests/tests/test_debug.py:    @override_settings(ROOT_URLCONF='view_tests.default_urls')\n./tests/view_tests/tests/test_debug.py:    @override_settings(ROOT_URLCONF='view_tests.regression_21530_urls')\n./tests/view_tests/tests/test_debug.py:@override_settings(\n./tests/view_tests/tests/test_debug.py:    @override_settings(ALLOWED_HOSTS='example.com')\n./tests/view_tests/tests/test_debug.py:    @override_settings(DEBUG=True)\n./tests/view_tests/tests/test_debug.py:    @override_settings(ALLOWED_HOSTS='example.com')\n./tests/view_tests/tests/test_debug.py:        with self.settings(ADMINS=[('Admin', 'admin@fattie-breakie.com')]):\n./tests/view_tests/tests/test_debug.py:        with self.settings(ADMINS=[('Admin', 'admin@fattie-breakie.com')]):\n./tests/view_tests/tests/test_debug.py:        with self.settings(ADMINS=[('Admin', 'admin@fattie-breakie.com')]):\n./tests/view_tests/tests/test_debug.py:@override_settings(ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:    def test_callable_settings(self):\n./tests/view_tests/tests/test_debug.py:        Callable settings should not be evaluated in the debug page (#21345).\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True, FOOBAR=callable_setting):\n./tests/view_tests/tests/test_debug.py:    def test_callable_settings_forbidding_to_set_attributes(self):\n./tests/view_tests/tests/test_debug.py:        Callable settings which forbid to set attributes should not break\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True, WITH_SLOTS=CallableSettingWithSlots()):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True, FOOBAR={42: None}):\n./tests/view_tests/tests/test_debug.py:    def test_sensitive_settings(self):\n./tests/view_tests/tests/test_debug.py:        The debug page should not show some sensitive settings\n./tests/view_tests/tests/test_debug.py:        sensitive_settings = [\n./tests/view_tests/tests/test_debug.py:        for setting in sensitive_settings:\n./tests/view_tests/tests/test_debug.py:            with self.settings(DEBUG=True, **{setting: \"should not be displayed\"}):\n./tests/view_tests/tests/test_debug.py:    def test_settings_with_sensitive_keys(self):\n./tests/view_tests/tests/test_debug.py:        dict settings.\n./tests/view_tests/tests/test_debug.py:        sensitive_settings = [\n./tests/view_tests/tests/test_debug.py:        for setting in sensitive_settings:\n./tests/view_tests/tests/test_debug.py:            with self.settings(DEBUG=True, FOOBAR=FOOBAR):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=True):\n./tests/view_tests/tests/test_debug.py:        with self.settings(DEBUG=False):\n./tests/view_tests/tests/test_debug.py:    @override_settings(DEBUG=True, ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_static.py:from django.test import SimpleTestCase, override_settings\n./tests/view_tests/tests/test_static.py:@override_settings(DEBUG=True, ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_static.py:    @override_settings(TEMPLATES=[{\n./tests/view_tests/tests/test_static.py:    @override_settings(DEBUG=False)\n./tests/view_tests/tests/test_csrf.py:    Client, RequestFactory, SimpleTestCase, override_settings,\n./tests/view_tests/tests/test_csrf.py:@override_settings(ROOT_URLCONF='view_tests.urls')\n./tests/view_tests/tests/test_csrf.py:    @override_settings(\n./tests/view_tests/tests/test_csrf.py:        with self.settings(LANGUAGE_CODE='nl'), override('en-us'):\n./tests/view_tests/tests/test_csrf.py:    @override_settings(\n./tests/view_tests/tests/test_csrf.py:    @override_settings(TEMPLATES=[])\n./tests/view_tests/tests/test_csrf.py:    @override_settings(TEMPLATES=[{\n./tests/view_tests/tests/test_json.py:from django.test import SimpleTestCase, override_settings\n./tests/view_tests/tests/test_json.py:@override_settings(ROOT_URLCONF='view_tests.generic_urls')\n./tests/context_processors/tests.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/context_processors/tests.py:@override_settings(\n./tests/context_processors/tests.py:@override_settings(\n./tests/context_processors/tests.py:        with override_settings(DEBUG=False):\n./tests/fixtures_regress/tests.py:    TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n./tests/fixtures_regress/tests.py:    @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, 'fixtures_1')])\n./tests/fixtures_regress/tests.py:    @override_settings(SERIALIZATION_MODULES={'unkn': 'unexistent.path'})\n./tests/fixtures_regress/tests.py:    @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, 'fixtures_1'),\n./tests/fixtures_regress/tests.py:    @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, 'fixtures_1'),\n./tests/fixtures_regress/tests.py:        settings.FIXTURE_DIRS cannot contain duplicates in order to avoid\n./tests/fixtures_regress/tests.py:        with self.assertRaisesMessage(ImproperlyConfigured, \"settings.FIXTURE_DIRS contains duplicates.\"):\n./tests/fixtures_regress/tests.py:    @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, 'fixtures')])\n./tests/fixtures_regress/tests.py:        settings.FIXTURE_DIRS cannot contain a default fixtures directory\n./tests/fixtures_regress/tests.py:            \"and cannot be listed in settings.FIXTURE_DIRS.\"\n./tests/fixtures_regress/tests.py:    @override_settings(FIXTURE_DIRS=[os.path.join(_cur_dir, 'fixtures_1'),\n./tests/syndication_tests/feeds.py:        # settings.TIME_ZONE.\n./tests/syndication_tests/tests.py:from django.test import TestCase, override_settings\n./tests/syndication_tests/tests.py:@override_settings(ROOT_URLCONF='syndication_tests.urls')\n./tests/db_utils/tests.py:        Empty DATABASES and empty 'default' settings default to the dummy\n./tests/db_utils/tests.py:        self.assertEqual(conns[DEFAULT_DB_ALIAS].settings_dict['ENGINE'], 'django.db.backends.dummy')\n./tests/db_utils/tests.py:            'settings.DATABASES is improperly configured. Please supply the '\n./tests/db_utils/tests.py:            'ENGINE value. Check settings documentation for more details.'\n./tests/csrf_tests/tests.py:from django.conf import settings\n./tests/csrf_tests/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/csrf_tests/tests.py:        csrf_cookie = resp2.cookies.get(settings.CSRF_COOKIE_NAME, False)\n./tests/csrf_tests/tests.py:    @override_settings(CSRF_HEADER_NAME='HTTP_X_CSRFTOKEN_CUSTOMIZED')\n./tests/csrf_tests/tests.py:        settings.CSRF_HEADER_NAME can be used to customize the CSRF header name\n./tests/csrf_tests/tests.py:        req.COOKIES[settings.CSRF_COOKIE_NAME] = \"\"\n./tests/csrf_tests/tests.py:        csrf_cookie = resp2.cookies[settings.CSRF_COOKIE_NAME]\n./tests/csrf_tests/tests.py:        csrf_cookie = resp.cookies.get(settings.CSRF_COOKIE_NAME, None)\n./tests/csrf_tests/tests.py:    @override_settings(DEBUG=True, ALLOWED_HOSTS=['www.example.com'])\n./tests/csrf_tests/tests.py:    @override_settings(DEBUG=True)\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'])\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'])\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'], CSRF_TRUSTED_ORIGINS=['dashboard.example.com'])\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'], CSRF_TRUSTED_ORIGINS=['.example.com'])\n./tests/csrf_tests/tests.py:                self.COOKIES[settings.CSRF_COOKIE_NAME] = token\n./tests/csrf_tests/tests.py:        req.COOKIES[settings.CSRF_COOKIE_NAME] = self._csrf_id_cookie\n./tests/csrf_tests/tests.py:        req.COOKIES[settings.CSRF_COOKIE_NAME] = self._csrf_id_cookie[:32]\n./tests/csrf_tests/tests.py:        self.assertTrue(resp.cookies.get(settings.CSRF_COOKIE_NAME, False))\n./tests/csrf_tests/tests.py:        self.assertTrue(resp2.cookies.get(settings.CSRF_COOKIE_NAME, False))\n./tests/csrf_tests/tests.py:        CSRF cookie age can be set using settings.CSRF_COOKIE_AGE.\n./tests/csrf_tests/tests.py:        with self.settings(CSRF_COOKIE_NAME='csrfcookie',\n./tests/csrf_tests/tests.py:        with self.settings(CSRF_COOKIE_NAME='csrfcookie',\n./tests/csrf_tests/tests.py:        with self.settings(CSRF_COOKIE_NAME='csrfcookie', CSRF_COOKIE_SAMESITE='Strict'):\n./tests/csrf_tests/tests.py:        req.COOKIES[settings.CSRF_COOKIE_NAME] = 'x' * 100000\n./tests/csrf_tests/tests.py:        csrf_cookie = resp2.cookies.get(settings.CSRF_COOKIE_NAME, False)\n./tests/csrf_tests/tests.py:        req.COOKIES[settings.CSRF_COOKIE_NAME] = token\n./tests/csrf_tests/tests.py:        csrf_cookie = resp2.cookies.get(settings.CSRF_COOKIE_NAME, False)\n./tests/csrf_tests/tests.py:        self.assertIn(settings.CSRF_COOKIE_NAME, resp.cookies, \"Cookie was not reset from bare secret\")\n./tests/csrf_tests/tests.py:        csrf_cookie = resp.cookies[settings.CSRF_COOKIE_NAME]\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'], CSRF_COOKIE_DOMAIN='.example.com', USE_X_FORWARDED_PORT=True)\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'], CSRF_COOKIE_DOMAIN='.example.com')\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'], CSRF_COOKIE_DOMAIN='.example.com')\n./tests/csrf_tests/tests.py:    @override_settings(CSRF_COOKIE_DOMAIN='.example.com', DEBUG=True)\n./tests/csrf_tests/tests.py:@override_settings(CSRF_USE_SESSIONS=True, CSRF_COOKIE_DOMAIN=None)\n./tests/csrf_tests/tests.py:    @override_settings(\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'], SESSION_COOKIE_DOMAIN='.example.com')\n./tests/csrf_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['www.example.com'], SESSION_COOKIE_DOMAIN='.example.com')\n./tests/csrf_tests/tests.py:    @override_settings(SESSION_COOKIE_DOMAIN='.example.com', DEBUG=True)\n./tests/csrf_tests/tests.py:@override_settings(ROOT_URLCONF='csrf_tests.csrf_token_error_handler_urls', DEBUG=False)\n./tests/test_runner/test_discover_runner.py:        with self.modify_settings(INSTALLED_APPS={'append': sub_app}):\n./tests/test_runner/tests.py:from django.conf import settings\n./tests/test_runner/tests.py:    through a settings file.\n./tests/test_runner/tests.py:        settings = {\n./tests/test_runner/tests.py:        self.write_settings('settings.py', sdict=settings)\n./tests/test_runner/tests.py:        args = ['test', '--settings=test_project.settings']\n./tests/test_runner/tests.py:        args = ['test', '--settings=test_project.settings', '--option_b=foo']\n./tests/test_runner/tests.py:        args = ['test', '--settings=test_project.settings', '--option_b', 'foo']\n./tests/test_runner/tests.py:        args = ['test', '--settings=test_project.settings', '--option_a=bar',\n./tests/test_runner/tests.py:        self.write_settings('settings.py')\n./tests/test_runner/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/test_runner/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/test_runner/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/test_runner/tests.py:        self.write_settings('settings.py')\n./tests/test_runner/tests.py:                'ENGINE': settings.DATABASES[db.DEFAULT_DB_ALIAS][\"ENGINE\"],\n./tests/test_runner/tests.py:        old_name = settings.DATABASES[db.DEFAULT_DB_ALIAS][\"NAME\"]\n./tests/test_runner/tests.py:            self.assertEqual(tested_connections['default'].settings_dict[\"NAME\"], old_name)\n./tests/test_runner/tests.py:        An empty default database in settings does not raise an ImproperlyConfigured\n./tests/test_runner/tests.py:        self.assertEqual(connection.settings_dict['ENGINE'], 'django.db.backends.dummy')\n./tests/sites_framework/tests.py:from django.conf import settings\n./tests/sites_framework/tests.py:        Site.objects.get_or_create(id=settings.SITE_ID, domain=\"example.com\", name=\"example.com\")\n./tests/sites_framework/tests.py:        Site.objects.create(id=settings.SITE_ID + 1, domain=\"example2.com\", name=\"example2.com\")\n./tests/sites_framework/tests.py:        article = ExclusiveArticle.objects.create(title=\"Breaking News!\", site_id=settings.SITE_ID)\n./tests/sites_framework/tests.py:        article.sites.add(Site.objects.get(id=settings.SITE_ID))\n./tests/sites_framework/tests.py:        article.sites.add(Site.objects.get(id=settings.SITE_ID + 1))\n./tests/sites_framework/tests.py:        article2.sites.add(Site.objects.get(id=settings.SITE_ID + 1))\n./tests/sites_framework/tests.py:            places_this_article_should_appear_id=settings.SITE_ID,\n./tests/signed_cookies_tests/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/signed_cookies_tests/tests.py:    @override_settings(SECRET_KEY=b'\\xe7')\n./tests/admin_utils/test_logentry.py:from django.test import TestCase, override_settings\n./tests/admin_utils/test_logentry.py:@override_settings(ROOT_URLCONF='admin_utils.urls')\n./tests/admin_utils/test_logentry.py:    @override_settings(USE_L10N=True)\n./tests/admin_utils/tests.py:from django.conf import settings\n./tests/admin_utils/tests.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/admin_utils/tests.py:        expected = '<img src=\"%sadmin/img/icon-unknown.svg\" alt=\"None\">' % settings.STATIC_URL\n./tests/admin_utils/tests.py:        expected = '<img src=\"%sadmin/img/icon-unknown.svg\" alt=\"None\" />' % settings.STATIC_URL\n./tests/admin_utils/tests.py:    @override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True)\n./tests/admin_utils/tests.py:    @override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True)\n./tests/swappable_models/tests.py:from django.test import TestCase, override_settings\n./tests/swappable_models/tests.py:    @override_settings(TEST_ARTICLE_MODEL='swappable_models.AlternateArticle')\n./tests/swappable_models/tests.py:    @override_settings(TEST_ARTICLE_MODEL='swappable_models.article')\n./tests/timezones/tests.py:    SimpleTestCase, TestCase, TransactionTestCase, override_settings,\n./tests/timezones/tests.py:# settings.TIME_ZONE is forced to EAT. Most tests use a variant of\n./tests/timezones/tests.py:        orig_timezone = connection.settings_dict['TIME_ZONE']\n./tests/timezones/tests.py:        connection.settings_dict['TIME_ZONE'] = timezone\n./tests/timezones/tests.py:        connection.settings_dict['TIME_ZONE'] = orig_timezone\n./tests/timezones/tests.py:@override_settings(TIME_ZONE='Africa/Nairobi', USE_TZ=False)\n./tests/timezones/tests.py:@override_settings(TIME_ZONE='Africa/Nairobi', USE_TZ=True)\n./tests/timezones/tests.py:@override_settings(TIME_ZONE='Africa/Nairobi', USE_TZ=True)\n./tests/timezones/tests.py:@override_settings(TIME_ZONE='Africa/Nairobi', USE_TZ=True)\n./tests/timezones/tests.py:@override_settings(TIME_ZONE='Africa/Nairobi')\n./tests/timezones/tests.py:@override_settings(DATETIME_FORMAT='c', TIME_ZONE='Africa/Nairobi', USE_L10N=False, USE_TZ=True)\n./tests/timezones/tests.py:        with self.settings(USE_TZ=False):\n./tests/timezones/tests.py:        with self.settings(TIME_ZONE='Europe/Paris'):\n./tests/timezones/tests.py:        with self.settings(USE_TZ=True):\n./tests/timezones/tests.py:@override_settings(DATETIME_FORMAT='c', TIME_ZONE='Africa/Nairobi', USE_L10N=False, USE_TZ=False)\n./tests/timezones/tests.py:@override_settings(DATETIME_FORMAT='c', TIME_ZONE='Africa/Nairobi', USE_L10N=False, USE_TZ=True)\n./tests/timezones/tests.py:@override_settings(\n./tests/auth_tests/test_decorators.py:from django.conf import settings\n./tests/auth_tests/test_decorators.py:from django.test import TestCase, override_settings\n./tests/auth_tests/test_decorators.py:@override_settings(ROOT_URLCONF='auth_tests.urls')\n./tests/auth_tests/test_decorators.py:            login_url = settings.LOGIN_URL\n./tests/auth_tests/test_signals.py:from django.test import TestCase, override_settings\n./tests/auth_tests/test_signals.py:@override_settings(ROOT_URLCONF='auth_tests.urls')\n./tests/auth_tests/test_signals.py:            with self.settings(AUTH_USER_MODEL='auth_tests.MinimalUser'):\n./tests/auth_tests/test_signals.py:            with self.settings(AUTH_USER_MODEL='auth_tests.UserWithDisabledLastLoginField'):\n./tests/auth_tests/test_signals.py:            with self.settings(AUTH_USER_MODEL='auth.User'):\n./tests/auth_tests/test_handlers.py:from django.test import TransactionTestCase, override_settings\n./tests/auth_tests/test_handlers.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUser')\n./tests/auth_tests/test_admin_multidb.py:from django.test import TestCase, override_settings\n./tests/auth_tests/test_admin_multidb.py:@override_settings(ROOT_URLCONF=__name__, DATABASE_ROUTERS=['%s.Router' % __name__])\n./tests/auth_tests/test_forms.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/auth_tests/test_forms.py:from .settings import AUTH_TEMPLATES\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_PASSWORD_VALIDATORS=[\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_PASSWORD_VALIDATORS=[\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_PASSWORD_VALIDATORS=[\n./tests/auth_tests/test_forms.py:@override_settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.AllowAllUsersModelBackend'])\n./tests/auth_tests/test_forms.py:    @override_settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.ModelBackend'])\n./tests/auth_tests/test_forms.py:        with self.settings(USE_I18N=True), translation.override('pt-br', deactivate=True):\n./tests/auth_tests/test_forms.py:    @override_settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.AllowAllUsersModelBackend'])\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomEmailField')\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_USER_MODEL='auth_tests.IntegerUsernameUser')\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_PASSWORD_VALIDATORS=[\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_PASSWORD_VALIDATORS=[\n./tests/auth_tests/test_forms.py:@override_settings(TEMPLATES=AUTH_TEMPLATES)\n./tests/auth_tests/test_forms.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomEmailField')\n./tests/auth_tests/test_forms.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.PBKDF2PasswordHasher'])\n./tests/auth_tests/test_tokens.py:from django.conf import settings\n./tests/auth_tests/test_tokens.py:        p1 = Mocked(date.today() + timedelta(settings.PASSWORD_RESET_TIMEOUT_DAYS))\n./tests/auth_tests/test_tokens.py:        p2 = Mocked(date.today() + timedelta(settings.PASSWORD_RESET_TIMEOUT_DAYS + 1))\n./tests/auth_tests/test_tokens.py:        self.assertEqual(p1.secret, settings.SECRET_KEY)\n./tests/auth_tests/test_views.py:from django.conf import settings\n./tests/auth_tests/test_views.py:from django.test import Client, TestCase, override_settings\n./tests/auth_tests/test_views.py:from .settings import AUTH_TEMPLATES\n./tests/auth_tests/test_views.py:@override_settings(\n./tests/auth_tests/test_views.py:@override_settings(ROOT_URLCONF='django.contrib.auth.urls')\n./tests/auth_tests/test_views.py:        self.assertEqual(settings.DEFAULT_FROM_EMAIL, mail.outbox[0].from_email)\n./tests/auth_tests/test_views.py:    @override_settings(DEBUG_PROPAGATE_EXCEPTIONS=True)\n./tests/auth_tests/test_views.py:    @override_settings(DEBUG_PROPAGATE_EXCEPTIONS=True)\n./tests/auth_tests/test_views.py:    @override_settings(\n./tests/auth_tests/test_views.py:@override_settings(AUTH_USER_MODEL='auth_tests.CustomUser')\n./tests/auth_tests/test_views.py:@override_settings(AUTH_USER_MODEL='auth_tests.UUIDUser')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL='/login/')\n./tests/auth_tests/test_views.py:        self.assertEqual(response.url, settings.LOGIN_REDIRECT_URL)\n./tests/auth_tests/test_views.py:        self.assertRedirects(response, settings.LOGIN_REDIRECT_URL, fetch_redirect_response=False)\n./tests/auth_tests/test_views.py:        csrf_cookie = resp2.cookies.get(settings.CSRF_COOKIE_NAME, None)\n./tests/auth_tests/test_views.py:        req.COOKIES[settings.CSRF_COOKIE_NAME] = token1\n./tests/auth_tests/test_views.py:        csrf_cookie = resp2.cookies.get(settings.CSRF_COOKIE_NAME, None)\n./tests/auth_tests/test_views.py:        engine = import_module(settings.SESSION_ENGINE)\n./tests/auth_tests/test_views.py:        self.client.cookies[settings.SESSION_COOKIE_NAME] = original_session_key\n./tests/auth_tests/test_views.py:    \"\"\"Tests for settings.LOGIN_URL.\"\"\"\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL='/login/')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL='login')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL='http://remote.example.com/login')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL='https:///login/')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL='/login/?pretty=1')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL='http://remote.example.com/login/?next=/default/')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL=reverse_lazy('login'))\n./tests/auth_tests/test_views.py:    \"\"\"Tests for settings.LOGIN_REDIRECT_URL.\"\"\"\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_REDIRECT_URL='/custom/')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_REDIRECT_URL='password_reset')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_REDIRECT_URL='http://remote.example.com/welcome/')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL=reverse_lazy('login'))\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL=reverse_lazy('login'))\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_URL='/login/')\n./tests/auth_tests/test_views.py:    @override_settings(LOGIN_REDIRECT_URL='/custom/')\n./tests/auth_tests/test_views.py:        with self.settings(LOGIN_REDIRECT_URL=self.do_redirect_url):\n./tests/auth_tests/test_views.py:        with self.settings(LOGIN_URL=self.do_redirect_url):\n./tests/auth_tests/test_views.py:        with self.settings(LOGIN_URL=self.do_redirect_url):\n./tests/auth_tests/test_views.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, 'pl')\n./tests/auth_tests/test_views.py:        self.assertEqual(self.client.cookies[settings.LANGUAGE_COOKIE_NAME].value, 'pl')\n./tests/auth_tests/test_views.py:    @override_settings(LOGOUT_REDIRECT_URL='/custom/')\n./tests/auth_tests/test_views.py:    @override_settings(LOGOUT_REDIRECT_URL='logout')\n./tests/auth_tests/test_views.py:@override_settings(ROOT_URLCONF='auth_tests.urls_admin')\n./tests/auth_tests/test_views.py:@override_settings(\n./tests/auth_tests/test_management.py:from django.test import TestCase, override_settings\n./tests/auth_tests/test_management.py:@override_settings(AUTH_PASSWORD_VALIDATORS=[\n./tests/auth_tests/test_management.py:@override_settings(\n./tests/auth_tests/test_management.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUser')\n./tests/auth_tests/test_management.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUser')\n./tests/auth_tests/test_management.py:    @override_settings(\n./tests/auth_tests/test_management.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithFK')\n./tests/auth_tests/test_management.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithFK')\n./tests/auth_tests/test_management.py:    @override_settings(AUTH_PASSWORD_VALIDATORS=[\n./tests/auth_tests/test_management.py:    @override_settings(\n./tests/auth_tests/test_management.py:    @override_settings(AUTH_USER_MODEL='auth_tests.NoPasswordUser')\n./tests/auth_tests/test_management.py:    @override_settings(AUTH_USER_MODEL='auth_tests.NoPasswordUser')\n./tests/auth_tests/test_auth_backends.py:    SimpleTestCase, TestCase, modify_settings, override_settings,\n./tests/auth_tests/test_auth_backends.py:@override_settings(AUTHENTICATION_BACKENDS=['auth_tests.test_auth_backends.SimpleBackend'])\n./tests/auth_tests/test_auth_backends.py:        self.patched_settings = modify_settings(\n./tests/auth_tests/test_auth_backends.py:        self.patched_settings.enable()\n./tests/auth_tests/test_auth_backends.py:        self.patched_settings.disable()\n./tests/auth_tests/test_auth_backends.py:    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n./tests/auth_tests/test_auth_backends.py:    @override_settings(PASSWORD_HASHERS=['auth_tests.test_auth_backends.CountingMD5PasswordHasher'])\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserWithoutIsActiveField')\n./tests/auth_tests/test_auth_backends.py:@override_settings(AUTH_USER_MODEL='auth_tests.ExtensionUser')\n./tests/auth_tests/test_auth_backends.py:@override_settings(AUTH_USER_MODEL='auth_tests.CustomPermissionsUser')\n./tests/auth_tests/test_auth_backends.py:@override_settings(AUTH_USER_MODEL='auth_tests.CustomUser')\n./tests/auth_tests/test_auth_backends.py:@override_settings(AUTH_USER_MODEL='auth_tests.UUIDUser')\n./tests/auth_tests/test_auth_backends.py:@modify_settings(AUTHENTICATION_BACKENDS={\n./tests/auth_tests/test_auth_backends.py:@override_settings(\n./tests/auth_tests/test_auth_backends.py:@override_settings(AUTHENTICATION_BACKENDS=[])\n./tests/auth_tests/test_auth_backends.py:@override_settings(AUTHENTICATION_BACKENDS=['auth_tests.test_auth_backends.SimpleRowlevelBackend'])\n./tests/auth_tests/test_auth_backends.py:    @modify_settings(AUTHENTICATION_BACKENDS={'prepend': backend})\n./tests/auth_tests/test_auth_backends.py:    @modify_settings(AUTHENTICATION_BACKENDS={'append': backend})\n./tests/auth_tests/test_auth_backends.py:    @modify_settings(AUTHENTICATION_BACKENDS={'prepend': backend})\n./tests/auth_tests/test_auth_backends.py:    @modify_settings(AUTHENTICATION_BACKENDS={'append': backend})\n./tests/auth_tests/test_auth_backends.py:    Tests for changes in the settings.AUTHENTICATION_BACKENDS\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTHENTICATION_BACKENDS=[backend])\n./tests/auth_tests/test_auth_backends.py:    def test_changed_backend_settings(self):\n./tests/auth_tests/test_auth_backends.py:        with self.settings(AUTHENTICATION_BACKENDS=[\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTHENTICATION_BACKENDS=['auth_tests.test_auth_backends.TypeErrorBackend'])\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTHENTICATION_BACKENDS=(\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTH_USER_MODEL='thismodel.doesntexist')\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTHENTICATION_BACKENDS=[backend])\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTHENTICATION_BACKENDS=[backend])\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTHENTICATION_BACKENDS=[backend, other_backend])\n./tests/auth_tests/test_auth_backends.py:    @override_settings(AUTHENTICATION_BACKENDS=[backend, other_backend])\n./tests/auth_tests/test_auth_backends.py:@override_settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.AllowAllUsersModelBackend'])\n./tests/auth_tests/test_hashers.py:from django.conf.global_settings import PASSWORD_HASHERS\n./tests/auth_tests/test_hashers.py:from django.test.utils import override_settings\n./tests/auth_tests/test_hashers.py:@override_settings(PASSWORD_HASHERS=PASSWORD_HASHERS)\n./tests/auth_tests/test_hashers.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.SHA1PasswordHasher'])\n./tests/auth_tests/test_hashers.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.MD5PasswordHasher'])\n./tests/auth_tests/test_hashers.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.UnsaltedMD5PasswordHasher'])\n./tests/auth_tests/test_hashers.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher'])\n./tests/auth_tests/test_hashers.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.CryptPasswordHasher'])\n./tests/auth_tests/test_hashers.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.BCryptPasswordHasher'])\n./tests/auth_tests/test_hashers.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.BCryptPasswordHasher'])\n./tests/auth_tests/test_hashers.py:    @override_settings(PASSWORD_HASHERS=['django.contrib.auth.hashers.BCryptPasswordHasher'])\n./tests/auth_tests/test_hashers.py:    @override_settings(\n./tests/auth_tests/test_hashers.py:    @override_settings(\n./tests/auth_tests/test_hashers.py:        with self.settings(PASSWORD_HASHERS=[\n./tests/auth_tests/test_hashers.py:        with self.settings(PASSWORD_HASHERS=[\n./tests/auth_tests/test_hashers.py:@override_settings(PASSWORD_HASHERS=PASSWORD_HASHERS)\n./tests/auth_tests/test_remote_user.py:from django.conf import settings\n./tests/auth_tests/test_remote_user.py:from django.test import TestCase, modify_settings, override_settings\n./tests/auth_tests/test_remote_user.py:@override_settings(ROOT_URLCONF='auth_tests.urls')\n./tests/auth_tests/test_remote_user.py:        self.patched_settings = modify_settings(\n./tests/auth_tests/test_remote_user.py:        self.patched_settings.enable()\n./tests/auth_tests/test_remote_user.py:        self.patched_settings.disable()\n./tests/auth_tests/test_remote_user.py:        if settings.USE_TZ:\n./tests/auth_tests/test_context_processors.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/auth_tests/test_context_processors.py:from .settings import AUTH_MIDDLEWARE, AUTH_TEMPLATES\n./tests/auth_tests/test_context_processors.py:@override_settings(ROOT_URLCONF='auth_tests.urls', TEMPLATES=AUTH_TEMPLATES)\n./tests/auth_tests/test_context_processors.py:    @override_settings(MIDDLEWARE=AUTH_MIDDLEWARE)\n./tests/auth_tests/test_context_processors.py:    @override_settings(MIDDLEWARE=AUTH_MIDDLEWARE)\n./tests/auth_tests/test_checks.py:    SimpleTestCase, override_settings, override_system_checks,\n./tests/auth_tests/test_checks.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserNonListRequiredFields')\n./tests/auth_tests/test_checks.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserBadRequiredFields')\n./tests/auth_tests/test_checks.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUserNonUniqueUsername')\n./tests/auth_tests/test_checks.py:        with self.settings(AUTHENTICATION_BACKENDS=['my.custom.backend']):\n./tests/auth_tests/test_checks.py:    @override_settings(AUTH_USER_MODEL='auth_tests.BadUser')\n./tests/auth_tests/test_templates.py:from django.test import RequestFactory, TestCase, override_settings\n./tests/auth_tests/test_templates.py:@override_settings(ROOT_URLCONF='auth_tests.urls')\n./tests/auth_tests/test_models.py:from django.conf.global_settings import PASSWORD_HASHERS\n./tests/auth_tests/test_models.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/auth_tests/test_models.py:        settings.PASSWORD_HASHERS.\n./tests/auth_tests/test_models.py:            with self.subTest(model=model), self.settings(AUTH_USER_MODEL=model):\n./tests/auth_tests/test_models.py:    @override_settings(PASSWORD_HASHERS=PASSWORD_HASHERS)\n./tests/auth_tests/test_models.py:    @override_settings(AUTH_USER_MODEL='auth_tests.IsActiveTestUser1')\n./tests/auth_tests/test_basic.py:from django.test import TestCase, override_settings\n./tests/auth_tests/test_basic.py:    @override_settings(AUTH_USER_MODEL='auth_tests.CustomUser')\n./tests/auth_tests/test_basic.py:    @override_settings(AUTH_USER_MODEL='badsetting')\n./tests/auth_tests/test_basic.py:    @override_settings(AUTH_USER_MODEL='thismodel.doesntexist')\n./tests/auth_tests/test_remote_user_deprecation.py:from django.test import TestCase, modify_settings, override_settings\n./tests/auth_tests/test_remote_user_deprecation.py:@override_settings(ROOT_URLCONF='auth_tests.urls')\n./tests/auth_tests/test_remote_user_deprecation.py:        self.patched_settings = modify_settings(\n./tests/auth_tests/test_remote_user_deprecation.py:        self.patched_settings.enable()\n./tests/auth_tests/test_remote_user_deprecation.py:        self.patched_settings.disable()\n./tests/auth_tests/test_validators.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/auth_tests/test_validators.py:@override_settings(AUTH_PASSWORD_VALIDATORS=[\n./tests/auth_tests/test_validators.py:    @override_settings(AUTH_PASSWORD_VALIDATORS=[])\n./tests/admin_custom_urls/tests.py:from django.test import TestCase, override_settings\n./tests/admin_custom_urls/tests.py:@override_settings(ROOT_URLCONF='admin_custom_urls.urls',)\n./tests/file_storage/tests.py:    LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n./tests/file_storage/tests.py:    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Algiers')\n./tests/file_storage/tests.py:    @override_settings(USE_TZ=False, TIME_ZONE='Africa/Algiers')\n./tests/file_storage/tests.py:    @override_settings(\n./tests/file_storage/tests.py:        Properties using settings values as defaults should be updated on\n./tests/file_storage/tests.py:        referenced settings change while specified values should be unchanged.\n./tests/file_storage/tests.py:        settings = {\n./tests/file_storage/tests.py:        with self.settings(**settings):\n./tests/file_storage/tests.py:            self.assertEqual(defaults_storage.base_location, settings['MEDIA_ROOT'])\n./tests/file_storage/tests.py:            self.assertIn(settings['MEDIA_ROOT'], defaults_storage.location)\n./tests/file_storage/tests.py:            self.assertEqual(defaults_storage.base_url, settings['MEDIA_URL'])\n./tests/file_storage/tests.py:            self.assertEqual(defaults_storage.file_permissions_mode, settings['FILE_UPLOAD_PERMISSIONS'])\n./tests/file_storage/tests.py:                defaults_storage.directory_permissions_mode, settings['FILE_UPLOAD_DIRECTORY_PERMISSIONS']\n./tests/file_storage/tests.py:    @override_settings(FILE_UPLOAD_PERMISSIONS=0o654)\n./tests/file_storage/tests.py:    @override_settings(FILE_UPLOAD_PERMISSIONS=None)\n./tests/file_storage/tests.py:    @override_settings(FILE_UPLOAD_DIRECTORY_PERMISSIONS=0o765)\n./tests/file_storage/tests.py:    @override_settings(FILE_UPLOAD_DIRECTORY_PERMISSIONS=None)\n./tests/file_storage/tests.py:@override_settings(ROOT_URLCONF='file_storage.urls')\n./tests/middleware/test_security.py:from django.test.utils import override_settings\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=3600)\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=3600)\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=3600)\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=0)\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=600, SECURE_HSTS_INCLUDE_SUBDOMAINS=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=600, SECURE_HSTS_INCLUDE_SUBDOMAINS=False)\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=10886400, SECURE_HSTS_PRELOAD=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=10886400, SECURE_HSTS_INCLUDE_SUBDOMAINS=True, SECURE_HSTS_PRELOAD=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_HSTS_SECONDS=10886400, SECURE_HSTS_PRELOAD=False)\n./tests/middleware/test_security.py:    @override_settings(SECURE_CONTENT_TYPE_NOSNIFF=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_CONTENT_TYPE_NOSNIFF=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_CONTENT_TYPE_NOSNIFF=False)\n./tests/middleware/test_security.py:    @override_settings(SECURE_BROWSER_XSS_FILTER=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_BROWSER_XSS_FILTER=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_BROWSER_XSS_FILTER=False)\n./tests/middleware/test_security.py:    @override_settings(SECURE_SSL_REDIRECT=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_SSL_REDIRECT=True)\n./tests/middleware/test_security.py:    @override_settings(SECURE_SSL_REDIRECT=True, SECURE_REDIRECT_EXEMPT=[\"^insecure/\"])\n./tests/middleware/test_security.py:    @override_settings(SECURE_SSL_REDIRECT=True, SECURE_SSL_HOST=\"secure.example.com\")\n./tests/middleware/test_security.py:    @override_settings(SECURE_SSL_REDIRECT=False)\n./tests/middleware/tests.py:from django.conf import settings\n./tests/middleware/tests.py:from django.test import RequestFactory, SimpleTestCase, override_settings\n./tests/middleware/tests.py:@override_settings(ROOT_URLCONF='middleware.urls')\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True, DEBUG=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=False)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=False, PREPEND_WWW=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True, PREPEND_WWW=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True, PREPEND_WWW=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True, DEBUG=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=False)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=False, PREPEND_WWW=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True, PREPEND_WWW=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True, PREPEND_WWW=True)\n./tests/middleware/tests.py:    @override_settings(DISALLOWED_USER_AGENTS=[re.compile(r'foo')])\n./tests/middleware/tests.py:@override_settings(\n./tests/middleware/tests.py:        with self.settings(SECURE_PROXY_SSL_HEADER=('HTTP_X_PROTO', 'https')):\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/middleware/tests.py:    @override_settings(APPEND_SLASH=False)\n./tests/middleware/tests.py:@override_settings(ROOT_URLCONF='middleware.cond_get_urls')\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='SAMEORIGIN'):\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='sameorigin'):\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='DENY'):\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='deny'):\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS=None):\n./tests/middleware/tests.py:            del settings.X_FRAME_OPTIONS    # restored by override_settings\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='DENY'):\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='SAMEORIGIN'):\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='SAMEORIGIN'):\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='DENY'):\n./tests/middleware/tests.py:        with override_settings(X_FRAME_OPTIONS='SAMEORIGIN'):\n./tests/urlpatterns_reverse/test_localeregexdescriptor.py:from django.test import SimpleTestCase, override_settings\n./tests/urlpatterns_reverse/test_localeregexdescriptor.py:@override_settings(LOCALE_PATHS=[os.path.join(here, 'translations', 'locale')])\n./tests/urlpatterns_reverse/tests.py:from django.conf import settings\n./tests/urlpatterns_reverse/tests.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.no_urls')\n./tests/urlpatterns_reverse/tests.py:        resolver = URLResolver(RegexPattern(r'^$'), settings.ROOT_URLCONF)\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.reverse_lazy_urls')\n./tests/urlpatterns_reverse/tests.py:    reverse_lazy can be used in settings without causing a circular\n./tests/urlpatterns_reverse/tests.py:        self.write_settings(\n./tests/urlpatterns_reverse/tests.py:            'settings.py',\n./tests/urlpatterns_reverse/tests.py:    def test_lazy_in_settings(self):\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.namespace_urls')\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF=urlconf_outer.__name__)\n./tests/urlpatterns_reverse/tests.py:    @override_settings(\n./tests/urlpatterns_reverse/tests.py:    @override_settings(\n./tests/urlpatterns_reverse/tests.py:    @override_settings(\n./tests/urlpatterns_reverse/tests.py:    @override_settings(\n./tests/urlpatterns_reverse/tests.py:    @override_settings(\n./tests/urlpatterns_reverse/tests.py:    @override_settings(\n./tests/urlpatterns_reverse/tests.py:        with override_settings(MIDDLEWARE=['%s.ChangeURLconfMiddleware' % middleware.__name__]):\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.urls_without_handlers')\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF=None)\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.namespace_urls')\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.erroneous_urls')\n./tests/urlpatterns_reverse/tests.py:@override_settings(ROOT_URLCONF='urlpatterns_reverse.urls')\n./tests/admin_views/test_history_view.py:from django.test import TestCase, override_settings\n./tests/admin_views/test_history_view.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/test_forms.py:from django.test import TestCase, override_settings\n./tests/admin_views/test_forms.py:@override_settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.AllowAllUsersModelBackend'])\n./tests/admin_views/test_multidb.py:from django.test import TestCase, override_settings\n./tests/admin_views/test_multidb.py:@override_settings(ROOT_URLCONF=__name__, DATABASE_ROUTERS=['%s.Router' % __name__])\n./tests/admin_views/test_autocomplete_view.py:from django.test import RequestFactory, override_settings\n./tests/admin_views/test_autocomplete_view.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:    TestCase, modify_settings, override_settings, skipUnlessDBFeature,\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls', USE_I18N=True, USE_L10N=False, LANGUAGE_CODE='en')\n./tests/admin_views/tests.py:        with self.settings(LANGUAGE_CODE='fr'), translation.override('en-us'):\n./tests/admin_views/tests.py:        with self.settings(LANGUAGE_CODE='fr'), translation.override('none'):\n./tests/admin_views/tests.py:        with self.settings(LANGUAGE_CODE='ru', USE_L10N=False), translation.override('none'):\n./tests/admin_views/tests.py:    @override_settings(TIME_ZONE='America/Sao_Paulo', USE_TZ=True)\n./tests/admin_views/tests.py:@override_settings(TEMPLATES=[{\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:        with override_settings(DEBUG=False):\n./tests/admin_views/tests.py:        with override_settings(DEBUG=True):\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(\n./tests/admin_views/tests.py:@override_settings(\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:    @override_settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:        with self.settings(LANGUAGE_CODE='fr'):\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@modify_settings(INSTALLED_APPS={'append': ['django.contrib.admindocs', 'django.contrib.flatpages']})\n./tests/admin_views/tests.py:@override_settings(\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls', USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:    @override_settings(MESSAGE_LEVEL=10)  # Set to DEBUG for this request\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/tests.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/test_actions.py:from django.test import TestCase, override_settings\n./tests/admin_views/test_actions.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/test_actions.py:    @override_settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=True, NUMBER_GROUPING=3)\n./tests/admin_views/test_actions.py:@override_settings(ROOT_URLCONF='admin_views.urls')\n./tests/admin_views/test_adminsite.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/admin_views/test_adminsite.py:@override_settings(ROOT_URLCONF='admin_views.test_adminsite')\n./tests/forms_tests/widget_tests/test_select.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_select.py:    @override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True)\n./tests/forms_tests/widget_tests/test_dateinput.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_dateinput.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/widget_tests/test_splithiddendatetimewidget.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_splithiddendatetimewidget.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/widget_tests/test_radioselect.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_radioselect.py:    @override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True)\n./tests/forms_tests/widget_tests/test_checkboxselectmultiple.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_checkboxselectmultiple.py:    @override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True)\n./tests/forms_tests/widget_tests/test_timeinput.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_timeinput.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/widget_tests/test_datetimeinput.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_datetimeinput.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/widget_tests/test_datetimeinput.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/widget_tests/test_datetimeinput.py:        with self.settings(USE_L10N=False):\n./tests/forms_tests/widget_tests/test_numberinput.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_numberinput.py:    @override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True)\n./tests/forms_tests/widget_tests/test_nullbooleanselect.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_nullbooleanselect.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/widget_tests/test_selectdatewidget.py:from django.test import override_settings\n./tests/forms_tests/widget_tests/test_selectdatewidget.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/widget_tests/test_selectdatewidget.py:    @override_settings(USE_L10N=False, DATE_INPUT_FORMATS=['%d.%m.%Y'])\n./tests/forms_tests/widget_tests/test_selectdatewidget.py:    @override_settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=True)\n./tests/forms_tests/field_tests/test_datefield.py:from django.test import SimpleTestCase, override_settings\n./tests/forms_tests/field_tests/test_datefield.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/field_tests/test_datefield.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/field_tests/test_datefield.py:    @override_settings(USE_L10N=True)\n./tests/forms_tests/field_tests/test_floatfield.py:from django.test.utils import override_settings\n./tests/forms_tests/field_tests/test_floatfield.py:        with translation.override('fr'), self.settings(USE_L10N=True):\n./tests/forms_tests/field_tests/test_floatfield.py:    @override_settings(USE_L10N=False, DECIMAL_SEPARATOR=',')\n./tests/forms_tests/field_tests/test_floatfield.py:    @override_settings(USE_L10N=False, DECIMAL_SEPARATOR=',', USE_THOUSAND_SEPARATOR=True,\n./tests/forms_tests/field_tests/test_decimalfield.py:from django.test import SimpleTestCase, override_settings\n./tests/forms_tests/field_tests/test_decimalfield.py:        with translation.override('fr'), self.settings(USE_L10N=True):\n./tests/forms_tests/field_tests/test_decimalfield.py:    @override_settings(USE_L10N=False, DECIMAL_SEPARATOR=',')\n./tests/forms_tests/field_tests/test_decimalfield.py:    @override_settings(USE_L10N=False, DECIMAL_SEPARATOR=',', USE_THOUSAND_SEPARATOR=True,\n./tests/forms_tests/tests/test_widgets.py:from django.test import override_settings\n./tests/forms_tests/tests/test_widgets.py:@override_settings(ROOT_URLCONF='forms_tests.urls')\n./tests/forms_tests/tests/test_media.py:from django.test import SimpleTestCase, override_settings\n./tests/forms_tests/tests/test_media.py:@override_settings(\n./tests/forms_tests/tests/test_media.py:        # with the value of settings.MEDIA_URL\n./tests/forms_tests/tests/test_input_formats.py:from django.test import SimpleTestCase, override_settings\n./tests/forms_tests/tests/test_input_formats.py:@override_settings(TIME_INPUT_FORMATS=[\"%I:%M:%S %p\", \"%I:%M %p\"], USE_L10N=True)\n./tests/forms_tests/tests/test_input_formats.py:@override_settings(TIME_INPUT_FORMATS=[\"%I:%M:%S %p\", \"%I:%M %p\"])\n./tests/forms_tests/tests/test_input_formats.py:@override_settings(DATE_INPUT_FORMATS=[\"%d/%m/%Y\", \"%d-%m-%Y\"], USE_L10N=True)\n./tests/forms_tests/tests/test_input_formats.py:@override_settings(DATE_INPUT_FORMATS=[\"%d.%m.%Y\", \"%d-%m-%Y\"])\n./tests/forms_tests/tests/test_input_formats.py:@override_settings(DATETIME_INPUT_FORMATS=[\"%I:%M:%S %p %d/%m/%Y\", \"%I:%M %p %d-%m-%Y\"], USE_L10N=True)\n./tests/forms_tests/tests/test_input_formats.py:@override_settings(DATETIME_INPUT_FORMATS=[\"%I:%M:%S %p %d/%m/%Y\", \"%I:%M %p %d-%m-%Y\"])\n./tests/custom_lookups/tests.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/custom_lookups/tests.py:@override_settings(USE_TZ=True)\n./tests/template_backends/test_django.py:from django.test import RequestFactory, override_settings\n./tests/template_backends/test_django.py:    @override_settings(INSTALLED_APPS=['template_backends.apps.good'])\n./tests/template_backends/test_django.py:    @override_settings(INSTALLED_APPS=['template_backends.apps.importerror'])\n./tests/template_backends/test_django.py:    @override_settings(DEBUG=False)\n./tests/template_backends/test_django.py:    @override_settings(DEBUG=True)\n./tests/template_backends/test_utils.py:from django.test import SimpleTestCase, override_settings\n./tests/template_backends/test_utils.py:    @override_settings(TEMPLATES=[{'BACKEND': 'raise.import.error'}])\n./tests/template_backends/test_utils.py:    @override_settings(TEMPLATES=[{\n./tests/template_backends/test_utils.py:    @override_settings(TEMPLATES=[{\n./tests/template_backends/test_utils.py:            \"a unique NAME for each engine in settings.TEMPLATES.\"\n./tests/template_backends/test_jinja2.py:        with self.settings(STATIC_URL='/s/'):\n./tests/admin_docs/test_views.py:from django.conf import settings\n./tests/admin_docs/test_views.py:from django.test import SimpleTestCase, modify_settings, override_settings\n./tests/admin_docs/test_views.py:    @override_settings(ROOT_URLCONF='admin_docs.namespace_urls')\n./tests/admin_docs/test_views.py:    @modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'})\n./tests/admin_docs/test_views.py:    @override_settings(SITE_ID=None)    # will restore SITE_ID after the test\n./tests/admin_docs/test_views.py:        objects. Deleting settings is fine here as UserSettingsHolder is used.\n./tests/admin_docs/test_views.py:        del settings.SITE_ID\n./tests/admin_docs/test_views.py:@override_settings(TEMPLATES=[{\n./tests/admin_docs/test_views.py:        # Overridden because non-trivial TEMPLATES settings aren't supported\n./tests/admin_docs/test_views.py:        # Overridden because non-trivial TEMPLATES settings aren't supported\n./tests/admin_docs/tests.py:    SimpleTestCase, TestCase, modify_settings, override_settings,\n./tests/admin_docs/tests.py:@override_settings(ROOT_URLCONF='admin_docs.urls')\n./tests/admin_docs/tests.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.admindocs'})\n./tests/admin_docs/tests.py:@override_settings(ROOT_URLCONF='admin_docs.urls')\n./tests/admin_docs/tests.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.admindocs'})\n./tests/staticfiles_tests/test_finders.py:from django.conf import settings\n./tests/staticfiles_tests/test_finders.py:from django.test import SimpleTestCase, override_settings\n./tests/staticfiles_tests/test_finders.py:from .settings import TEST_ROOT\n./tests/staticfiles_tests/test_finders.py:            storage=storage.StaticFilesStorage(location=settings.MEDIA_ROOT))\n./tests/staticfiles_tests/test_finders.py:        test_file_path = os.path.join(settings.MEDIA_ROOT, 'media-file.txt')\n./tests/staticfiles_tests/test_finders.py:@override_settings(\n./tests/staticfiles_tests/test_finders.py:    @override_settings(MEDIA_ROOT='')\n./tests/staticfiles_tests/test_forms.py:from django.test import SimpleTestCase, override_settings\n./tests/staticfiles_tests/test_forms.py:@override_settings(\n./tests/staticfiles_tests/test_templatetags.py:from django.test import override_settings\n./tests/staticfiles_tests/test_templatetags.py:    @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.QueryStringStorage')\n./tests/staticfiles_tests/test_views.py:from django.conf import settings\n./tests/staticfiles_tests/test_views.py:from django.test import override_settings\n./tests/staticfiles_tests/test_views.py:@override_settings(ROOT_URLCONF='staticfiles_tests.urls.default')\n./tests/staticfiles_tests/test_views.py:        return self.client.get(quote(posixpath.join(settings.STATIC_URL, filepath)))\n./tests/staticfiles_tests/test_views.py:@override_settings(DEBUG=False)\n./tests/staticfiles_tests/test_views.py:@override_settings(DEBUG=True)\n./tests/staticfiles_tests/test_views.py:@override_settings(DEBUG=True, ROOT_URLCONF='staticfiles_tests.urls.helper')\n./tests/staticfiles_tests/cases.py:from django.conf import settings\n./tests/staticfiles_tests/cases.py:from django.test import SimpleTestCase, override_settings\n./tests/staticfiles_tests/cases.py:from .settings import TEST_SETTINGS\n./tests/staticfiles_tests/cases.py:@override_settings(**TEST_SETTINGS)\n./tests/staticfiles_tests/cases.py:@override_settings(**TEST_SETTINGS)\n./tests/staticfiles_tests/cases.py:        self.patched_settings = self.settings(STATIC_ROOT=temp_dir)\n./tests/staticfiles_tests/cases.py:        self.patched_settings.enable()\n./tests/staticfiles_tests/cases.py:        self.patched_settings.disable()\n./tests/staticfiles_tests/cases.py:        filepath = os.path.join(settings.STATIC_ROOT, filepath)\n./tests/staticfiles_tests/test_management.py:from django.conf import settings\n./tests/staticfiles_tests/test_management.py:from django.test import RequestFactory, override_settings\n./tests/staticfiles_tests/test_management.py:from .settings import TEST_ROOT, TEST_SETTINGS\n./tests/staticfiles_tests/test_management.py:        self.assertEqual(os.listdir(settings.STATIC_ROOT), [])\n./tests/staticfiles_tests/test_management.py:    @override_settings(MIDDLEWARE=['django.middleware.common.CommonMiddleware'])\n./tests/staticfiles_tests/test_management.py:        missing_static_file = os.path.join(settings.STATIC_URL, 'unknown.css')\n./tests/staticfiles_tests/test_management.py:        with override_settings(DEBUG=False):\n./tests/staticfiles_tests/test_management.py:        with override_settings(DEBUG=True):\n./tests/staticfiles_tests/test_management.py:            with override_settings(STATIC_ROOT=root):\n./tests/staticfiles_tests/test_management.py:            with self.settings(STATICFILES_STORAGE='django.contrib.staticfiles.storage.StaticFilesStorage'):\n./tests/staticfiles_tests/test_management.py:            with self.settings(STATICFILES_STORAGE='staticfiles_tests.storage.DummyStorage'):\n./tests/staticfiles_tests/test_management.py:    @override_settings(STATIC_ROOT=None)\n./tests/staticfiles_tests/test_management.py:    def test_missing_settings_dont_prevent_help(self):\n./tests/staticfiles_tests/test_management.py:        self.write_settings('settings.py', apps=['django.contrib.staticfiles'])\n./tests/staticfiles_tests/test_management.py:    @override_settings(STATICFILES_STORAGE='django.contrib.staticfiles.storage.ManifestStaticFilesStorage')\n./tests/staticfiles_tests/test_management.py:    @override_settings(STATICFILES_STORAGE='django.contrib.staticfiles.storage.ManifestStaticFilesStorage')\n./tests/staticfiles_tests/test_management.py:        clear_filepath = os.path.join(settings.STATIC_ROOT, 'cleared.txt')\n./tests/staticfiles_tests/test_management.py:        shutil.rmtree(settings.STATIC_ROOT)\n./tests/staticfiles_tests/test_management.py:    @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.PathNotImplementedStorage')\n./tests/staticfiles_tests/test_management.py:        shutil.rmtree(settings.STATIC_ROOT)\n./tests/staticfiles_tests/test_management.py:            with override_settings(STATIC_ROOT=static_dir):\n./tests/staticfiles_tests/test_management.py:@override_settings(INSTALLED_APPS=[\n./tests/staticfiles_tests/test_management.py:        self.settings_with_test_app = self.modify_settings(\n./tests/staticfiles_tests/test_management.py:            self.settings_with_test_app.enable()\n./tests/staticfiles_tests/test_management.py:        self.settings_with_test_app.disable()\n./tests/staticfiles_tests/test_management.py:@override_settings(STATICFILES_DIRS=[])\n./tests/staticfiles_tests/test_management.py:            with self.settings(STATICFILES_DIRS=[static_dir]):\n./tests/staticfiles_tests/test_management.py:            with self.settings(STATICFILES_DIRS=[static_dir]):\n./tests/staticfiles_tests/test_management.py:@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.DummyStorage')\n./tests/staticfiles_tests/test_management.py:    @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.NeverCopyRemoteStorage')\n./tests/staticfiles_tests/test_management.py:        self.assertTrue(os.path.islink(os.path.join(settings.STATIC_ROOT, 'test.txt')))\n./tests/staticfiles_tests/test_management.py:        path = os.path.join(settings.STATIC_ROOT, 'test.txt')\n./tests/staticfiles_tests/test_management.py:        path = os.path.join(settings.STATIC_ROOT, 'test.txt')\n./tests/staticfiles_tests/test_management.py:        nonexistent_file_path = os.path.join(settings.STATIC_ROOT, 'nonexistent.txt')\n./tests/staticfiles_tests/test_management.py:        broken_symlink_path = os.path.join(settings.STATIC_ROOT, 'symlink.txt')\n./tests/staticfiles_tests/test_management.py:    @override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.PathNotImplementedStorage')\n./tests/staticfiles_tests/test_checks.py:from django.conf import settings\n./tests/staticfiles_tests/test_checks.py:from django.test import SimpleTestCase, override_settings\n./tests/staticfiles_tests/test_checks.py:    def test_no_errors_with_test_settings(self):\n./tests/staticfiles_tests/test_checks.py:    @override_settings(STATICFILES_DIRS='a string')\n./tests/staticfiles_tests/test_checks.py:    @override_settings(STATICFILES_DIRS=['/fake/path', settings.STATIC_ROOT])\n./tests/staticfiles_tests/test_checks.py:    @override_settings(STATICFILES_DIRS=[('prefix', settings.STATIC_ROOT)])\n./tests/staticfiles_tests/test_checks.py:    @override_settings(STATICFILES_DIRS=[('prefix/', '/fake/path')])\n./tests/staticfiles_tests/test_utils.py:from django.contrib.staticfiles.utils import check_settings\n./tests/staticfiles_tests/test_utils.py:from django.test import SimpleTestCase, override_settings\n./tests/staticfiles_tests/test_utils.py:    @override_settings(DEBUG=True, MEDIA_URL='/static/media/', STATIC_URL='/static/',)\n./tests/staticfiles_tests/test_utils.py:            check_settings()\n./tests/staticfiles_tests/test_utils.py:        with self.settings(DEBUG=False):  # Check disabled if DEBUG=False.\n./tests/staticfiles_tests/test_utils.py:            check_settings()\n./tests/staticfiles_tests/storage.py:from django.conf import settings\n./tests/staticfiles_tests/storage.py:        return os.path.join(settings.STATIC_ROOT, name)\n./tests/staticfiles_tests/test_storage.py:from django.conf import settings\n./tests/staticfiles_tests/test_storage.py:from django.test import SimpleTestCase, ignore_warnings, override_settings\n./tests/staticfiles_tests/test_storage.py:from .settings import TEST_ROOT\n./tests/staticfiles_tests/test_storage.py:    return fullpath.replace(settings.STATIC_URL, '')\n./tests/staticfiles_tests/test_storage.py:    @override_settings(\n./tests/staticfiles_tests/test_storage.py:    @override_settings(\n./tests/staticfiles_tests/test_storage.py:@override_settings(\n./tests/staticfiles_tests/test_storage.py:@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.ExtraPatternsStorage')\n./tests/staticfiles_tests/test_storage.py:        return fullpath.replace(settings.STATIC_URL, '')\n./tests/staticfiles_tests/test_storage.py:@override_settings(\n./tests/staticfiles_tests/test_storage.py:        self.patched_settings = self.settings(\n./tests/staticfiles_tests/test_storage.py:            STATICFILES_DIRS=settings.STATICFILES_DIRS + [temp_dir],\n./tests/staticfiles_tests/test_storage.py:        self.patched_settings.enable()\n./tests/staticfiles_tests/test_storage.py:        self.patched_settings.disable()\n./tests/staticfiles_tests/test_storage.py:        cached_files = os.listdir(os.path.join(settings.STATIC_ROOT, 'cached'))\n./tests/staticfiles_tests/test_storage.py:@override_settings(STATICFILES_STORAGE='staticfiles_tests.storage.SimpleStorage')\n./tests/staticfiles_tests/test_storage.py:    @override_settings(\n./tests/staticfiles_tests/test_storage.py:        test_file = os.path.join(settings.STATIC_ROOT, \"test.txt\")\n./tests/staticfiles_tests/test_storage.py:        test_dir = os.path.join(settings.STATIC_ROOT, \"subdir\")\n./tests/staticfiles_tests/test_storage.py:    @override_settings(\n./tests/staticfiles_tests/test_storage.py:        test_file = os.path.join(settings.STATIC_ROOT, \"test.txt\")\n./tests/staticfiles_tests/test_storage.py:        test_dir = os.path.join(settings.STATIC_ROOT, \"subdir\")\n./tests/staticfiles_tests/test_storage.py:    @override_settings(\n./tests/staticfiles_tests/test_storage.py:        test_file = os.path.join(settings.STATIC_ROOT, \"test.txt\")\n./tests/staticfiles_tests/test_storage.py:        test_dir = os.path.join(settings.STATIC_ROOT, \"subdir\")\n./tests/staticfiles_tests/test_storage.py:@override_settings(\n./tests/staticfiles_tests/test_storage.py:        with self.modify_settings(STATICFILES_DIRS={'append': self._temp_dir}):\n./tests/staticfiles_tests/test_liveserver.py:from django.test import modify_settings, override_settings\n./tests/staticfiles_tests/test_liveserver.py:        # Override settings\n./tests/staticfiles_tests/test_liveserver.py:        cls.settings_override = override_settings(**TEST_SETTINGS)\n./tests/staticfiles_tests/test_liveserver.py:        cls.settings_override.enable()\n./tests/staticfiles_tests/test_liveserver.py:        # Restore original settings\n./tests/staticfiles_tests/test_liveserver.py:        cls.settings_override.disable()\n./tests/staticfiles_tests/test_liveserver.py:    @modify_settings(INSTALLED_APPS={'append': 'staticfiles_tests.apps.test'})\n./tests/template_tests/syntax_tests/test_cache.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/syntax_tests/test_cache.py:    @override_settings(CACHES={\n./tests/template_tests/syntax_tests/test_url.py:from django.test import RequestFactory, SimpleTestCase, override_settings\n./tests/template_tests/syntax_tests/test_url.py:@override_settings(ROOT_URLCONF='template_tests.urls')\n./tests/template_tests/syntax_tests/test_static.py:from django.conf import settings\n./tests/template_tests/syntax_tests/test_static.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/syntax_tests/test_static.py:@override_settings(INSTALLED_APPS=[], MEDIA_URL='/media/', STATIC_URL='/static/')\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, settings.STATIC_URL)\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, settings.STATIC_URL)\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, settings.MEDIA_URL)\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, settings.MEDIA_URL)\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, urljoin(settings.STATIC_URL, 'admin/base.css'))\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, urljoin(settings.STATIC_URL, 'admin/base.css'))\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, urljoin(settings.STATIC_URL, 'admin/base.css'))\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, urljoin(settings.STATIC_URL, 'admin/base.css'))\n./tests/template_tests/syntax_tests/test_static.py:        self.assertEqual(output, urljoin(settings.STATIC_URL, '/static/special%3Fchars%26quoted.html'))\n./tests/template_tests/syntax_tests/i18n/test_blocktrans.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/syntax_tests/i18n/test_blocktrans.py:    @override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/template_tests/syntax_tests/i18n/test_blocktrans.py:    @override_settings(LOCALE_PATHS=[os.path.join(here, 'other', 'locale')])\n./tests/template_tests/syntax_tests/i18n/test_blocktrans.py:    @override_settings(LOCALE_PATHS=[os.path.join(here, 'other', 'locale')])\n./tests/template_tests/syntax_tests/i18n/test_blocktrans.py:    @override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/template_tests/syntax_tests/i18n/test_blocktrans.py:    @override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/template_tests/syntax_tests/i18n/base.py:from django.conf import settings\n./tests/template_tests/syntax_tests/i18n/base.py:extended_locale_paths = settings.LOCALE_PATHS + [\n./tests/template_tests/syntax_tests/i18n/test_trans.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/syntax_tests/i18n/test_trans.py:    @override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/template_tests/utils.py:from django.test.utils import override_settings\n./tests/template_tests/utils.py:        # are properly isolated from Django's global settings.\n./tests/template_tests/utils.py:        @override_settings(TEMPLATES=None)\n./tests/template_tests/test_loaders.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/test_loaders.py:    @override_settings(INSTALLED_APPS=['template_tests'])\n./tests/template_tests/test_loaders.py:    @override_settings(INSTALLED_APPS=[])\n./tests/template_tests/filter_tests/test_time.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/filter_tests/test_time.py:    @override_settings(USE_L10N=True)\n./tests/template_tests/filter_tests/test_filesizeformat.py:        with self.settings(USE_L10N=True), translation.override('de'):\n./tests/template_tests/filter_tests/test_date.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/filter_tests/test_date.py:    @override_settings(USE_L10N=True)\n./tests/template_tests/test_response.py:    RequestFactory, SimpleTestCase, modify_settings, override_settings,\n./tests/template_tests/test_response.py:@override_settings(TEMPLATES=[{\n./tests/template_tests/test_response.py:@modify_settings(MIDDLEWARE={'append': ['template_tests.test_response.CustomURLConfMiddleware']})\n./tests/template_tests/test_response.py:@override_settings(ROOT_URLCONF='template_tests.urls')\n./tests/template_tests/test_response.py:@modify_settings(\n./tests/template_tests/test_response.py:@override_settings(CACHE_MIDDLEWARE_SECONDS=2.0, ROOT_URLCONF='template_tests.alternate_urls')\n./tests/template_tests/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/tests.py:    @override_settings(SETTINGS_MODULE=None)\n./tests/template_tests/tests.py:    def test_url_reverse_no_settings_module(self):\n./tests/template_tests/tests.py:        #9005 -- url tag shouldn't require settings.SETTINGS_MODULE to\n./tests/template_tests/tests.py:        with self.settings(USE_I18N=True), translation.override('de'):\n./tests/template_tests/test_engine.py:from django.test import SimpleTestCase, override_settings\n./tests/template_tests/test_engine.py:    @override_settings(TEMPLATES=[])\n./tests/template_tests/test_engine.py:    @override_settings(TEMPLATES=[{\n./tests/template_tests/test_engine.py:    @override_settings(TEMPLATES=[{\n./tests/test_client_regress/views.py:from django.conf import settings\n./tests/test_client_regress/views.py:        charset = settings.DEFAULT_CHARSET\n./tests/test_client_regress/tests.py:    Client, SimpleTestCase, TestCase, modify_settings, override_settings,\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:    @modify_settings(ALLOWED_HOSTS={'append': 'otherserver'})\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls',)\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:    @override_settings(TEMPLATES=[{\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:        with self.settings(TEMPLATES=[{\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:    @override_settings(AUTH_USER_MODEL='test_client_regress.CustomUser')\n./tests/test_client_regress/tests.py:    @override_settings(AUTHENTICATION_BACKENDS=(\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls',)\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls',)\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/test_client_regress/tests.py:@override_settings(ROOT_URLCONF='test_client_regress.urls')\n./tests/conditional_processing/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/conditional_processing/tests.py:@override_settings(ROOT_URLCONF='conditional_processing.urls')\n./tests/resolve_url/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/resolve_url/tests.py:@override_settings(ROOT_URLCONF='resolve_url.urls')\n./tests/test_utils/tests.py:from django.conf import settings\n./tests/test_utils/tests.py:    override_settings, setup_test_environment,\n./tests/test_utils/tests.py:@override_settings(ROOT_URLCONF='test_utils.urls')\n./tests/test_utils/tests.py:@override_settings(ROOT_URLCONF='test_utils.urls')\n./tests/test_utils/tests.py:@override_settings(ROOT_URLCONF='test_utils.urls')\n./tests/test_utils/tests.py:@override_settings(ROOT_URLCONF='test_utils.urls')\n./tests/test_utils/tests.py:@override_settings(ROOT_URLCONF='test_utils.urls')\n./tests/test_utils/tests.py:                    with self.settings(ALLOWED_HOSTS=allowed_hosts):\n./tests/test_utils/tests.py:                        self.assertEqual(settings.ALLOWED_HOSTS, ['*', 'testserver'])\n./tests/test_utils/tests.py:    # #21518 -- If neither override_settings nor a setting_changed receiver\n./tests/test_utils/tests.py:    @override_settings(ROOT_URLCONF=FirstUrls)\n./tests/test_utils/tests.py:    @override_settings(ROOT_URLCONF=SecondUrls)\n./tests/test_utils/tests.py:        with override_settings(ROOT_URLCONF=FirstUrls):\n./tests/test_utils/tests.py:            with override_settings(ROOT_URLCONF=SecondUrls):\n./tests/test_utils/tests.py:        with self.settings(MEDIA_ROOT='test_value'):\n./tests/test_utils/tests.py:        with self.settings(MEDIA_URL='/test_value/'):\n./tests/test_utils/tests.py:        with self.settings(FILE_UPLOAD_PERMISSIONS=0o777):\n./tests/test_utils/tests.py:        with self.settings(FILE_UPLOAD_DIRECTORY_PERMISSIONS=0o777):\n./tests/test_utils/tests.py:        with self.settings(DATABASE_ROUTERS=test_routers):\n./tests/test_utils/tests.py:        with self.settings(STATIC_URL='/test/'):\n./tests/test_utils/tests.py:        with self.settings(STATIC_ROOT='/tmp/test'):\n./tests/test_utils/tests.py:        with self.settings(STATICFILES_STORAGE=new_storage):\n./tests/test_utils/tests.py:        with self.settings(STATICFILES_FINDERS=finders):\n./tests/test_utils/tests.py:        with self.settings(STATICFILES_DIRS=[test_path]):\n./tests/test_utils/tests.py:            \"in settings.DATABASES.\"\n./tests/test_utils/tests.py:            \"in settings.DATABASES. Did you mean 'default'?\"\n./tests/test_utils/test_transactiontestcase.py:from django.test import TestCase, TransactionTestCase, override_settings\n./tests/test_utils/test_transactiontestcase.py:@override_settings(DEBUG=True)  # Enable query logging for test_queries_cleared\n./tests/migrate_signals/tests.py:from django.test import TransactionTestCase, override_settings\n./tests/migrate_signals/tests.py:    @override_settings(MIGRATION_MODULES={'migrate_signals': 'migrate_signals.custom_migrations'})\n./tests/model_fields/test_filefield.py:from django.test import TestCase, override_settings\n./tests/model_fields/test_filefield.py:    @override_settings(MEDIA_ROOT=temp.gettempdir())\n./tests/model_fields/test_datetimefield.py:    SimpleTestCase, TestCase, override_settings, skipUnlessDBFeature,\n./tests/model_fields/test_datetimefield.py:    @override_settings(USE_TZ=False)\n./tests/model_fields/test_datetimefield.py:    @override_settings(USE_TZ=True, TIME_ZONE='America/Vancouver')\n./tests/model_fields/test_datetimefield.py:        with self.settings(TIME_ZONE='UTC'):\n./tests/cache/tests.py:# Uses whatever cache backend is set in the test settings file.\n./tests/cache/tests.py:from django.conf import settings\n./tests/cache/tests.py:    override_settings,\n./tests/cache/tests.py:@override_settings(CACHES={\n./tests/cache/tests.py:    # `base` is used to pull in the memcached config from the original settings,\n./tests/cache/tests.py:    # `params` are test specific overrides and `_caches_settings_base` is the\n./tests/cache/tests.py:        with mock.patch('%s.%s' % (settings.CACHES['default']['BACKEND'], 'add')) as cache_add:\n./tests/cache/tests.py:@override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:        # The super calls needs to happen first for the settings override.\n./tests/cache/tests.py:        self.assertEqual(out.getvalue(), \"Cache table 'test cache table' already exists.\\n\" * len(settings.CACHES))\n./tests/cache/tests.py:    @override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:@override_settings(USE_TZ=True)\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:    @override_settings(DATABASE_ROUTERS=[DBCacheRouter()])\n./tests/cache/tests.py:limit_locmem_entries = override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:@override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:    @override_settings(CACHES={\n./tests/cache/tests.py:# To check the memcached backend, the test settings file will\n./tests/cache/tests.py:for _cache_params in settings.CACHES.values():\n./tests/cache/tests.py:                with self.settings(CACHES={'default': params}):\n./tests/cache/tests.py:        with self.settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:        with self.settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:@override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:        for cache_key in settings.CACHES:\n./tests/cache/tests.py:    @override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:@override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:    @override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:@override_settings(CACHES=caches_setting_for_tests(\n./tests/cache/tests.py:        # Caches location cannot be modified through override_settings / modify_settings,\n./tests/cache/tests.py:        # hence settings are manipulated directly here and the setting_changed signal\n./tests/cache/tests.py:        for cache_params in settings.CACHES.values():\n./tests/cache/tests.py:@override_settings(CACHES={\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:        settings will use the default 5 minute timeout.\n./tests/cache/tests.py:    @override_settings(CACHES=NEVER_EXPIRING_CACHES_SETTINGS)\n./tests/cache/tests.py:        default settings with have `None` as the default timeout.\n./tests/cache/tests.py:    @override_settings(CACHES=DEFAULT_MEMORY_CACHES_SETTINGS)\n./tests/cache/tests.py:    @override_settings(CACHES=NEVER_EXPIRING_CACHES_SETTINGS)\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:    CACHE_MIDDLEWARE_KEY_PREFIX='settingsprefix',\n./tests/cache/tests.py:            'views.decorators.cache.cache_page.settingsprefix.GET.'\n./tests/cache/tests.py:            'views.decorators.cache.cache_page.settingsprefix.GET.'\n./tests/cache/tests.py:            'views.decorators.cache.cache_page.settingsprefix.GET.'\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:    CACHE_MIDDLEWARE_KEY_PREFIX='settingsprefix',\n./tests/cache/tests.py:    @override_settings(USE_I18N=True, USE_L10N=False, USE_TZ=False)\n./tests/cache/tests.py:    @override_settings(USE_I18N=True, USE_L10N=False, USE_TZ=False)\n./tests/cache/tests.py:    @override_settings(USE_I18N=False, USE_L10N=True, USE_TZ=False)\n./tests/cache/tests.py:    @override_settings(USE_I18N=False, USE_L10N=False, USE_TZ=True)\n./tests/cache/tests.py:    @override_settings(USE_I18N=False, USE_L10N=False)\n./tests/cache/tests.py:    @override_settings(\n./tests/cache/tests.py:    @override_settings(\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:@override_settings(\n./tests/cache/tests.py:    CACHE_MIDDLEWARE_KEY_PREFIX='settingsprefix',\n./tests/cache/tests.py:            'views.decorators.cache.cache_page.settingsprefix.GET.'\n./tests/cache/tests.py:            'views.decorators.cache.cache_page.settingsprefix.GET.'\n./tests/dispatch/tests.py:from django.test.utils import override_settings\n./tests/dispatch/tests.py:    @override_settings(DEBUG=True)\n./tests/dispatch/tests.py:    @override_settings(DEBUG=True)\n./tests/dbshell/test_mysql.py:    def test_basic_params_specified_in_settings(self):\n./tests/dbshell/test_mysql.py:    def test_options_override_settings_proper_values(self):\n./tests/dbshell/test_mysql.py:        settings_port = 444\n./tests/dbshell/test_mysql.py:        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n./tests/dbshell/test_mysql.py:                'PORT': settings_port,\n./tests/dbshell/test_mysql.py:    def get_command_line_arguments(self, connection_settings):\n./tests/dbshell/test_mysql.py:        return DatabaseClient.settings_to_cmd_args(connection_settings)\n./tests/contenttypes_tests/test_operations.py:from django.conf import settings\n./tests/contenttypes_tests/test_operations.py:from django.test import TransactionTestCase, override_settings\n./tests/contenttypes_tests/test_operations.py:@override_settings(\n./tests/contenttypes_tests/test_operations.py:        settings.MIGRATION_MODULES,\n./tests/contenttypes_tests/test_operations.py:    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n./tests/contenttypes_tests/test_views.py:from django.test import TestCase, override_settings\n./tests/contenttypes_tests/test_views.py:@override_settings(ROOT_URLCONF='contenttypes_tests.urls')\n./tests/contenttypes_tests/test_views.py:@override_settings(ROOT_URLCONF='contenttypes_tests.urls')\n./tests/contenttypes_tests/test_views.py:        with self.settings(SITE_ID=self.site_2.pk):\n./tests/contenttypes_tests/test_views.py:        with self.settings(SITE_ID=self.site_2.pk):\n./tests/contenttypes_tests/test_views.py:        with self.settings(SITE_ID=None, ALLOWED_HOSTS=[self.site_2.domain]):\n./tests/contenttypes_tests/test_views.py:    @override_settings(ALLOWED_HOSTS=['example.com'])\n./tests/contenttypes_tests/test_views.py:        with self.modify_settings(INSTALLED_APPS={'append': 'django.contrib.sites'}):\n./tests/contenttypes_tests/test_views.py:        with self.modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'}):\n./tests/contenttypes_tests/test_management.py:from django.test import TestCase, modify_settings\n./tests/contenttypes_tests/test_management.py:@modify_settings(INSTALLED_APPS={'append': ['no_models']})\n./tests/contenttypes_tests/test_checks.py:from django.test import SimpleTestCase, override_settings\n./tests/contenttypes_tests/test_checks.py:    @override_settings(INSTALLED_APPS=['django.contrib.auth', 'django.contrib.contenttypes', 'contenttypes_tests'])\n./tests/contenttypes_tests/test_checks.py:    @override_settings(TEST_SWAPPED_MODEL='contenttypes_tests.Replacement')\n./tests/contenttypes_tests/test_checks.py:                hint=\"Update the relation to point at 'settings.TEST_SWAPPED_MODEL'.\",\n./tests/contenttypes_tests/test_models.py:from django.test import TestCase, override_settings\n./tests/contenttypes_tests/test_models.py:@override_settings(DATABASE_ROUTERS=[TestRouter()])\n./tests/redirects_tests/tests.py:from django.conf import settings\n./tests/redirects_tests/tests.py:from django.test import TestCase, modify_settings, override_settings\n./tests/redirects_tests/tests.py:@modify_settings(MIDDLEWARE={'append': 'django.contrib.redirects.middleware.RedirectFallbackMiddleware'})\n./tests/redirects_tests/tests.py:@override_settings(APPEND_SLASH=False, ROOT_URLCONF='redirects_tests.urls', SITE_ID=1)\n./tests/redirects_tests/tests.py:        cls.site = Site.objects.get(pk=settings.SITE_ID)\n./tests/redirects_tests/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/redirects_tests/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/redirects_tests/tests.py:    @override_settings(APPEND_SLASH=True)\n./tests/redirects_tests/tests.py:    @modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'})\n./tests/redirects_tests/tests.py:@modify_settings(MIDDLEWARE={'append': 'redirects_tests.tests.OverriddenRedirectFallbackMiddleware'})\n./tests/redirects_tests/tests.py:@override_settings(SITE_ID=1)\n./tests/redirects_tests/tests.py:        cls.site = Site.objects.get(pk=settings.SITE_ID)\n./tests/admin_scripts/custom_templates/project_template/project_name/settings.py:# Django settings for {{ project_name }} test project.\n./tests/admin_scripts/tests.py:DJANGO_SETTINGS_MODULE and default settings.py files.\n./tests/admin_scripts/tests.py:from django.conf import settings\n./tests/admin_scripts/tests.py:    LiveServerTestCase, SimpleTestCase, TestCase, override_settings,\n./tests/admin_scripts/tests.py:    def write_settings(self, filename, apps=None, is_dir=False, sdict=None, extra=None):\n./tests/admin_scripts/tests.py:            settings_dir = os.path.join(self.test_dir, filename)\n./tests/admin_scripts/tests.py:            os.mkdir(settings_dir)\n./tests/admin_scripts/tests.py:            settings_file_path = os.path.join(settings_dir, '__init__.py')\n./tests/admin_scripts/tests.py:            settings_file_path = os.path.join(self.test_dir, filename)\n./tests/admin_scripts/tests.py:        with open(settings_file_path, 'w') as settings_file:\n./tests/admin_scripts/tests.py:            settings_file.write('# Settings file automatically generated by admin_scripts test case\\n')\n./tests/admin_scripts/tests.py:                settings_file.write(\"%s\\n\" % extra)\n./tests/admin_scripts/tests.py:                if hasattr(settings, s):\n./tests/admin_scripts/tests.py:                    o = getattr(settings, s)\n./tests/admin_scripts/tests.py:                    settings_file.write(\"%s = %s\\n\" % (s, o))\n./tests/admin_scripts/tests.py:            settings_file.write(\"INSTALLED_APPS = %s\\n\" % apps)\n./tests/admin_scripts/tests.py:                    settings_file.write(\"%s = %s\\n\" % (k, v))\n./tests/admin_scripts/tests.py:        for backend in settings.DATABASES.values():\n./tests/admin_scripts/tests.py:    def run_test(self, script, args, settings_file=None, apps=None):\n./tests/admin_scripts/tests.py:        if settings_file:\n./tests/admin_scripts/tests.py:            test_environ['DJANGO_SETTINGS_MODULE'] = settings_file\n./tests/admin_scripts/tests.py:    def run_django_admin(self, args, settings_file=None):\n./tests/admin_scripts/tests.py:        return self.run_test(os.path.join(script_dir, 'django-admin.py'), args, settings_file)\n./tests/admin_scripts/tests.py:    def run_manage(self, args, settings_file=None, manage_py=None):\n./tests/admin_scripts/tests.py:        return self.run_test('./manage.py', args, settings_file)\n./tests/admin_scripts/tests.py:    \"A series of tests for django-admin.py when there is no settings.py file.\"\n./tests/admin_scripts/tests.py:        \"no settings: django-admin builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, 'settings are not configured')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"no settings: django-admin builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"no settings: django-admin builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:    def test_commands_with_invalid_settings(self):\n./tests/admin_scripts/tests.py:        Commands that don't require settings succeed if the settings file\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, settings_file='bad_settings')\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for django-admin.py when using a settings.py file that\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py')\n./tests/admin_scripts/tests.py:        \"default: django-admin builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, 'settings are not configured')\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"default: django-admin builtin commands succeed if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"default: django-admin builtin commands succeed if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"default: django-admin builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"default: django-admin builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"default: django-admin can't execute user commands if it isn't provided settings\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No Django settings specified\")\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"default: django-admin can execute user commands if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=test_project.settings']\n./tests/admin_scripts/tests.py:        \"default: django-admin can execute user commands if settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for django-admin.py when using a settings.py file that\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', ['django.contrib.auth', 'django.contrib.contenttypes',\n./tests/admin_scripts/tests.py:        \"fulldefault: django-admin builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, 'settings are not configured')\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"fulldefault: django-admin builtin commands succeed if a settings file is provided\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"fulldefault: django-admin builtin commands succeed if the environment contains settings\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"fulldefault: django-admin builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"fulldefault: django-admin builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"fulldefault: django-admin can't execute user commands unless settings are provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No Django settings specified\")\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"fulldefault: django-admin can execute user commands if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=test_project.settings']\n./tests/admin_scripts/tests.py:        \"fulldefault: django-admin can execute user commands if settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for django-admin.py when using a settings.py file that\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', apps=['django.contrib.auth', 'django.contrib.contenttypes'])\n./tests/admin_scripts/tests.py:        \"minimal: django-admin builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, 'settings are not configured')\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"minimal: django-admin builtin commands fail if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"minimal: django-admin builtin commands fail if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"minimal: django-admin builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"minimal: django-admin builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"minimal: django-admin can't execute user commands unless settings are provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No Django settings specified\")\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"minimal: django-admin can't execute user commands, even if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=test_project.settings']\n./tests/admin_scripts/tests.py:        \"minimal: django-admin can't execute user commands, even if settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for django-admin.py when using a settings file\n./tests/admin_scripts/tests.py:    with a name other than 'settings.py'.\n./tests/admin_scripts/tests.py:        self.write_settings('alternate_settings.py')\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, 'settings are not configured')\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands succeed if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.alternate_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands succeed if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.alternate_settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"alternate: django-admin can't execute user commands unless settings are provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No Django settings specified\")\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: django-admin can execute user commands if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=test_project.alternate_settings']\n./tests/admin_scripts/tests.py:        \"alternate: django-admin can execute user commands if settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.alternate_settings')\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for django-admin.py when multiple settings files\n./tests/admin_scripts/tests.py:    (including the default 'settings.py') are available. The default settings\n./tests/admin_scripts/tests.py:    alternate settings must be used by the running script.\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', apps=['django.contrib.auth', 'django.contrib.contenttypes'])\n./tests/admin_scripts/tests.py:        self.write_settings('alternate_settings.py')\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, 'settings are not configured')\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands succeed if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.alternate_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands succeed if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.alternate_settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"alternate: django-admin builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"alternate: django-admin can't execute user commands unless settings are provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No Django settings specified\")\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: django-admin can execute user commands if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=test_project.alternate_settings']\n./tests/admin_scripts/tests.py:        \"alternate: django-admin can execute user commands if settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.alternate_settings')\n./tests/admin_scripts/tests.py:    A series of tests for django-admin.py when the settings file is in a\n./tests/admin_scripts/tests.py:        self.write_settings('settings', is_dir=True)\n./tests/admin_scripts/tests.py:        args = ['startapp', 'settings_test']\n./tests/admin_scripts/tests.py:        app_path = os.path.join(self.test_dir, 'settings_test')\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:            self.assertIn(\"name = 'settings_test'\", content)\n./tests/admin_scripts/tests.py:        args = ['startapp', '--template', template_path, 'custom_settings_test']\n./tests/admin_scripts/tests.py:        app_path = os.path.join(self.test_dir, 'custom_settings_test')\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:        \"directory: django-admin builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, 'settings are not configured')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"directory: django-admin builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"directory: django-admin builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"directory: django-admin can't execute user commands unless settings are provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No Django settings specified\")\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"directory: django-admin builtin commands succeed if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"directory: django-admin builtin commands succeed if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_django_admin(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    \"A series of tests for manage.py when there is no settings.py file.\"\n./tests/admin_scripts/tests.py:        \"no settings: manage.py builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, r\"No module named '?(test_project\\.)?settings'?\", regex=True)\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"no settings: manage.py builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"no settings: manage.py builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for manage.py when using a settings.py file that\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py')\n./tests/admin_scripts/tests.py:        \"default: manage.py builtin commands succeed when default settings are appropriate\"\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"default: manage.py builtin commands succeed if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"default: manage.py builtin commands succeed if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"default: manage.py builtin commands succeed if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"default: manage.py builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"default: manage.py can execute user commands when default settings are appropriate\"\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"default: manage.py can execute user commands when settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=test_project.settings']\n./tests/admin_scripts/tests.py:        \"default: manage.py can execute user commands when settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for manage.py when using a settings.py file that\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', ['django.contrib.auth', 'django.contrib.contenttypes', 'admin_scripts'])\n./tests/admin_scripts/tests.py:        \"fulldefault: manage.py builtin commands succeed when default settings are appropriate\"\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"fulldefault: manage.py builtin commands succeed if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"fulldefault: manage.py builtin commands succeed if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"fulldefault: manage.py builtin commands succeed if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"fulldefault: manage.py builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"fulldefault: manage.py can execute user commands when default settings are appropriate\"\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"fulldefault: manage.py can execute user commands when settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=test_project.settings']\n./tests/admin_scripts/tests.py:        \"fulldefault: manage.py can execute user commands when settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for manage.py when using a settings.py file that\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', apps=['django.contrib.auth', 'django.contrib.contenttypes'])\n./tests/admin_scripts/tests.py:        \"minimal: manage.py builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"minimal: manage.py builtin commands fail if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=test_project.settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"minimal: manage.py builtin commands fail if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"minimal: manage.py builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"minimal: manage.py builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"minimal: manage.py can't execute user commands without appropriate settings\"\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"minimal: manage.py can't execute user commands, even if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=test_project.settings']\n./tests/admin_scripts/tests.py:        \"minimal: manage.py can't execute user commands, even if settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'test_project.settings')\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for manage.py when using a settings file\n./tests/admin_scripts/tests.py:    with a name other than 'settings.py'.\n./tests/admin_scripts/tests.py:        self.write_settings('alternate_settings.py')\n./tests/admin_scripts/tests.py:        \"alternate: manage.py builtin commands fail with an error when no default settings provided\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, r\"No module named '?(test_project\\.)?settings'?\", regex=True)\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: manage.py builtin commands work with settings provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=alternate_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"alternate: manage.py builtin commands work if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'alternate_settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: manage.py builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"alternate: manage.py builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"alternate: manage.py can't execute user commands without settings\"\n./tests/admin_scripts/tests.py:        self.assertOutput(err, r\"No module named '?(test_project\\.)?settings'?\", regex=True)\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"alternate: manage.py can execute user commands if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=alternate_settings']\n./tests/admin_scripts/tests.py:            \"('no_color', False), ('pythonpath', None), ('settings', \"\n./tests/admin_scripts/tests.py:            \"'alternate_settings'), ('traceback', False), ('verbosity', 1)]\"\n./tests/admin_scripts/tests.py:        \"alternate: manage.py can execute user commands if settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'alternate_settings')\n./tests/admin_scripts/tests.py:            \"('no_color', False), ('pythonpath', None), ('settings', None), \"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--no-color', '--settings=alternate_settings']\n./tests/admin_scripts/tests.py:            \"('no_color', True), ('pythonpath', None), ('settings', \"\n./tests/admin_scripts/tests.py:            \"'alternate_settings'), ('traceback', False), ('verbosity', 1)]\"\n./tests/admin_scripts/tests.py:    \"\"\"A series of tests for manage.py when multiple settings files\n./tests/admin_scripts/tests.py:    (including the default 'settings.py') are available. The default settings\n./tests/admin_scripts/tests.py:    alternate settings must be used by the running script.\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', apps=['django.contrib.auth', 'django.contrib.contenttypes'])\n./tests/admin_scripts/tests.py:        self.write_settings('alternate_settings.py')\n./tests/admin_scripts/tests.py:        \"multiple: manage.py builtin commands fail with an error when no settings provided\"\n./tests/admin_scripts/tests.py:    def test_builtin_with_settings(self):\n./tests/admin_scripts/tests.py:        \"multiple: manage.py builtin commands succeed if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=alternate_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        \"multiple: manage.py can execute builtin commands if settings are provided in the environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'alternate_settings')\n./tests/admin_scripts/tests.py:    def test_builtin_with_bad_settings(self):\n./tests/admin_scripts/tests.py:        \"multiple: manage.py builtin commands fail if settings file (from argument) doesn't exist\"\n./tests/admin_scripts/tests.py:        args = ['check', '--settings=bad_settings', 'admin_scripts']\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"multiple: manage.py builtin commands fail if settings file (from environment) doesn't exist\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'bad_settings')\n./tests/admin_scripts/tests.py:        self.assertOutput(err, \"No module named '?bad_settings'?\", regex=True)\n./tests/admin_scripts/tests.py:        \"multiple: manage.py can't execute user commands using default settings\"\n./tests/admin_scripts/tests.py:    def test_custom_command_with_settings(self):\n./tests/admin_scripts/tests.py:        \"multiple: manage.py can execute user commands if settings are provided as argument\"\n./tests/admin_scripts/tests.py:        args = ['noargs_command', '--settings=alternate_settings']\n./tests/admin_scripts/tests.py:        \"multiple: manage.py can execute user commands if settings are provided in environment\"\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(args, 'alternate_settings')\n./tests/admin_scripts/tests.py:    Tests for manage.py when using the default settings.py file containing\n./tests/admin_scripts/tests.py:    def write_settings_with_import_error(self, filename):\n./tests/admin_scripts/tests.py:        settings_file_path = os.path.join(self.test_dir, filename)\n./tests/admin_scripts/tests.py:        with open(settings_file_path, 'w') as settings_file:\n./tests/admin_scripts/tests.py:            settings_file.write('# Settings file automatically generated by admin_scripts test case\\n')\n./tests/admin_scripts/tests.py:            settings_file.write('# The next line will cause an import error:\\nimport foo42bar\\n')\n./tests/admin_scripts/tests.py:        when settings with import errors is provided (#14130).\n./tests/admin_scripts/tests.py:        self.write_settings_with_import_error('settings.py')\n./tests/admin_scripts/tests.py:        settings (#18845).\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', sdict={'BAD_VAR': 'INSTALLED_APPS.crash'})\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', sdict={'BAD_VAR': 'DATABASES[\"blah\"]'})\n./tests/admin_scripts/tests.py:        self.write_settings(\n./tests/admin_scripts/tests.py:            'settings.py',\n./tests/admin_scripts/tests.py:        self.write_settings(\n./tests/admin_scripts/tests.py:            'settings.py',\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', apps=['admin_scripts.broken_app'])\n./tests/admin_scripts/tests.py:        self.write_settings(\n./tests/admin_scripts/tests.py:            'settings.py',\n./tests/admin_scripts/tests.py:        self.write_settings(\n./tests/admin_scripts/tests.py:            'settings.py',\n./tests/admin_scripts/tests.py:        self.write_settings(\n./tests/admin_scripts/tests.py:            'settings.py',\n./tests/admin_scripts/tests.py:        self.write_settings(\n./tests/admin_scripts/tests.py:            'settings.py',\n./tests/admin_scripts/tests.py:    @override_settings(INSTALLED_APPS=[\"admin_scripts.app_waiting_migration\"])\n./tests/admin_scripts/tests.py:    @override_settings(\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', sdict={\n./tests/admin_scripts/tests.py:        self.assertOutput(err, 'CommandError: You must set settings.ALLOWED_HOSTS if DEBUG is False.')\n./tests/admin_scripts/tests.py:            stdout=out, settings=None, pythonpath=None, verbosity=1,\n./tests/admin_scripts/tests.py:            settings=None,\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py')\n./tests/admin_scripts/tests.py:            \"('pythonpath', None), ('settings', None), ('traceback', False), \"\n./tests/admin_scripts/tests.py:            \"('no_color', False), ('pythonpath', None), ('settings', None), \"\n./tests/admin_scripts/tests.py:            \"('pythonpath', None), ('settings', None), ('traceback', False), \"\n./tests/admin_scripts/tests.py:            \"('pythonpath', None), ('settings', None), ('traceback', False), \"\n./tests/admin_scripts/tests.py:            \"('pythonpath', None), ('settings', None), ('traceback', False), \"\n./tests/admin_scripts/tests.py:            \"False), ('no_color', False), ('pythonpath', None), ('settings', \"\n./tests/admin_scripts/tests.py:            \"('settings', None), ('traceback', False), ('verbosity', 1)]\"\n./tests/admin_scripts/tests.py:            \"('settings', None), ('traceback', False), ('verbosity', 1)]\"\n./tests/admin_scripts/tests.py:        with self.settings(INSTALLED_APPS=['admin_scripts.complex_app',\n./tests/admin_scripts/tests.py:        with self.settings(INSTALLED_APPS=['admin_scripts.simple_app',\n./tests/admin_scripts/tests.py:    (--settings, --traceback and --pythonpath) are parsed using a basic parser,\n./tests/admin_scripts/tests.py:    ignoring any unknown options. Then the full settings are\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py', apps=['django.contrib.auth', 'django.contrib.contenttypes'])\n./tests/admin_scripts/tests.py:        self.write_settings('alternate_settings.py')\n./tests/admin_scripts/tests.py:        \"\"\" Options passed after settings are correctly handled. \"\"\"\n./tests/admin_scripts/tests.py:        args = ['base_command', 'testlabel', '--settings=alternate_settings', '--option_a=x']\n./tests/admin_scripts/tests.py:        \"\"\" Short options passed after settings are correctly handled. \"\"\"\n./tests/admin_scripts/tests.py:        args = ['base_command', 'testlabel', '--settings=alternate_settings', '-a', 'x']\n./tests/admin_scripts/tests.py:        \"\"\" Options passed before settings are correctly handled. \"\"\"\n./tests/admin_scripts/tests.py:        args = ['base_command', 'testlabel', '--option_a=x', '--settings=alternate_settings']\n./tests/admin_scripts/tests.py:        \"\"\" Short options passed before settings are correctly handled. \"\"\"\n./tests/admin_scripts/tests.py:        args = ['base_command', 'testlabel', '-a', 'x', '--settings=alternate_settings']\n./tests/admin_scripts/tests.py:        args = ['base_command', 'testlabel', '--option_a=x', '--settings=alternate_settings', '--option_b=y']\n./tests/admin_scripts/tests.py:            \"('settings', 'alternate_settings'), ('traceback', False), \"\n./tests/admin_scripts/tests.py:@override_settings(ROOT_URLCONF='admin_scripts.urls')\n./tests/admin_scripts/tests.py:        # We're using a custom command so we need the alternate settings\n./tests/admin_scripts/tests.py:        self.write_settings('alternate_settings.py')\n./tests/admin_scripts/tests.py:            '--settings=alternate_settings',\n./tests/admin_scripts/tests.py:    \"\"\"Tests for diffsettings management command.\"\"\"\n./tests/admin_scripts/tests.py:        \"\"\"Runs without error and emits settings diff.\"\"\"\n./tests/admin_scripts/tests.py:        self.write_settings('settings_to_diff.py', sdict={'FOO': '\"bar\"'})\n./tests/admin_scripts/tests.py:        args = ['diffsettings', '--settings=settings_to_diff']\n./tests/admin_scripts/tests.py:    def test_settings_configured(self):\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(['diffsettings'], manage_py='configured_settings_manage.py')\n./tests/admin_scripts/tests.py:        self.assertNotInOutput(out, 'default_settings = ')\n./tests/admin_scripts/tests.py:    def test_dynamic_settings_configured(self):\n./tests/admin_scripts/tests.py:        # Custom default settings appear.\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(['diffsettings'], manage_py='configured_dynamic_settings_manage.py')\n./tests/admin_scripts/tests.py:        \"\"\"The all option also shows settings with the default value.\"\"\"\n./tests/admin_scripts/tests.py:        self.write_settings('settings_to_diff.py', sdict={'STATIC_URL': 'None'})\n./tests/admin_scripts/tests.py:        args = ['diffsettings', '--settings=settings_to_diff', '--all']\n./tests/admin_scripts/tests.py:        The --default option specifies an alternate settings module for\n./tests/admin_scripts/tests.py:        self.write_settings('settings_default.py', sdict={'FOO': '\"foo\"', 'BAR': '\"bar1\"'})\n./tests/admin_scripts/tests.py:        self.write_settings('settings_to_diff.py', sdict={'FOO': '\"foo\"', 'BAR': '\"bar2\"'})\n./tests/admin_scripts/tests.py:        out, err = self.run_manage(['diffsettings', '--settings=settings_to_diff', '--default=settings_default'])\n./tests/admin_scripts/tests.py:        \"\"\"--output=unified emits settings diff in unified mode.\"\"\"\n./tests/admin_scripts/tests.py:        self.write_settings('settings_to_diff.py', sdict={'FOO': '\"bar\"'})\n./tests/admin_scripts/tests.py:        args = ['diffsettings', '--settings=settings_to_diff', '--output=unified']\n./tests/admin_scripts/tests.py:        --output=unified --all emits settings diff in unified mode and includes\n./tests/admin_scripts/tests.py:        settings with the default value.\n./tests/admin_scripts/tests.py:        self.write_settings('settings_to_diff.py', sdict={'FOO': '\"bar\"'})\n./tests/admin_scripts/tests.py:        args = ['diffsettings', '--settings=settings_to_diff', '--output=unified', '--all']\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py')\n./tests/admin_scripts/tests.py:        self.write_settings('settings.py')\n./tests/admin_scripts/tests.py:        args = ['rnserver', '--settings=test_project.settings']\n./tests/admin_scripts/tests.py:        args = ['abcdef', '--settings=test_project.settings']\n./tests/admin_scripts/configured_dynamic_settings_manage.py:from django.conf import global_settings, settings\n./tests/admin_scripts/configured_dynamic_settings_manage.py:        return getattr(global_settings, name)\n./tests/admin_scripts/configured_dynamic_settings_manage.py:        return super().__dir__() + dir(global_settings) + ['FOO']\n./tests/admin_scripts/configured_dynamic_settings_manage.py:    settings.configure(Settings())\n./tests/admin_scripts/configured_settings_manage.py:from django.conf import settings\n./tests/admin_scripts/configured_settings_manage.py:    settings.configure(DEBUG=True, CUSTOM=1)\n./tests/logging_tests/logconfig.py:from django.conf import settings\n./tests/logging_tests/logconfig.py:        self.config = settings.LOGGING\n./tests/logging_tests/tests.py:from django.conf import settings\n./tests/logging_tests/tests.py:from django.test import RequestFactory, SimpleTestCase, override_settings\n./tests/logging_tests/tests.py:        with self.settings(DEBUG=True):\n./tests/logging_tests/tests.py:        with self.settings(DEBUG=False):\n./tests/logging_tests/tests.py:        with self.settings(DEBUG=True):\n./tests/logging_tests/tests.py:        with self.settings(DEBUG=False):\n./tests/logging_tests/tests.py:        cls._logging = settings.LOGGING\n./tests/logging_tests/tests.py:        with self.settings(DEBUG=True):\n./tests/logging_tests/tests.py:    @override_settings(DEBUG=True)\n./tests/logging_tests/tests.py:    @override_settings(DEBUG=True)\n./tests/logging_tests/tests.py:    @override_settings(DEBUG=True)\n./tests/logging_tests/tests.py:@override_settings(DEBUG=True, ROOT_URLCONF='logging_tests.urls')\n./tests/logging_tests/tests.py:@override_settings(\n./tests/logging_tests/tests.py:    @override_settings(\n./tests/logging_tests/tests.py:    @override_settings(\n./tests/logging_tests/tests.py:    @override_settings(\n./tests/logging_tests/tests.py:    @override_settings(\n./tests/logging_tests/tests.py:    @override_settings(\n./tests/logging_tests/tests.py:    @override_settings(\n./tests/logging_tests/tests.py:    @override_settings(ALLOWED_HOSTS='example.com')\n./tests/logging_tests/tests.py:    Accessing settings in a custom logging handler does not trigger\n./tests/logging_tests/tests.py:        self.write_settings('settings.py', sdict={'LOGGING': log_config})\n./tests/logging_tests/tests.py:        # validate is just an example command to trigger settings configuration\n./tests/logging_tests/tests.py:    @override_settings(\n./tests/logging_tests/tests.py:@override_settings(DEBUG=True, ROOT_URLCONF='logging_tests.urls')\n./tests/logging_tests/tests.py:    @override_settings(\n./tests/logging_tests/tests.py:        self.write_settings('settings.py', sdict={\n./tests/sessions_tests/tests.py:from django.conf import settings\n./tests/sessions_tests/tests.py:    RequestFactory, TestCase, ignore_warnings, override_settings,\n./tests/sessions_tests/tests.py:        # A normal session has a max age equal to settings\n./tests/sessions_tests/tests.py:        self.assertEqual(self.session.get_expiry_age(), settings.SESSION_COOKIE_AGE)\n./tests/sessions_tests/tests.py:        self.assertEqual(self.session.get_expiry_age(), settings.SESSION_COOKIE_AGE)\n./tests/sessions_tests/tests.py:        self.assertEqual(self.session.get_expiry_age(), settings.SESSION_COOKIE_AGE)\n./tests/sessions_tests/tests.py:        # Tests get_expire_at_browser_close with different settings and different\n./tests/sessions_tests/tests.py:        with override_settings(SESSION_EXPIRE_AT_BROWSER_CLOSE=False):\n./tests/sessions_tests/tests.py:        with override_settings(SESSION_EXPIRE_AT_BROWSER_CLOSE=True):\n./tests/sessions_tests/tests.py:        with override_settings(SESSION_SERIALIZER='django.contrib.sessions.serializers.PickleSerializer'):\n./tests/sessions_tests/tests.py:            self.session = self.backend()  # reinitialize after overriding settings\n./tests/sessions_tests/tests.py:        with override_settings(SESSION_ENGINE=self.session_engine):\n./tests/sessions_tests/tests.py:@override_settings(USE_TZ=True)\n./tests/sessions_tests/tests.py:    @override_settings(SESSION_CACHE_ALIAS='sessions')\n./tests/sessions_tests/tests.py:@override_settings(USE_TZ=True)\n./tests/sessions_tests/tests.py:        self.original_session_file_path = settings.SESSION_FILE_PATH\n./tests/sessions_tests/tests.py:        self.temp_session_store = settings.SESSION_FILE_PATH = tempfile.mkdtemp()\n./tests/sessions_tests/tests.py:        settings.SESSION_FILE_PATH = self.original_session_file_path\n./tests/sessions_tests/tests.py:    @override_settings(\n./tests/sessions_tests/tests.py:    @override_settings(\n./tests/sessions_tests/tests.py:        file_prefix = settings.SESSION_COOKIE_NAME\n./tests/sessions_tests/tests.py:    @override_settings(CACHES={\n./tests/sessions_tests/tests.py:        # Re-initialize the session backend to make use of overridden settings.\n./tests/sessions_tests/tests.py:    @override_settings(SESSION_COOKIE_SECURE=True)\n./tests/sessions_tests/tests.py:        self.assertIs(response.cookies[settings.SESSION_COOKIE_NAME]['secure'], True)\n./tests/sessions_tests/tests.py:    @override_settings(SESSION_COOKIE_HTTPONLY=True)\n./tests/sessions_tests/tests.py:        self.assertIs(response.cookies[settings.SESSION_COOKIE_NAME]['httponly'], True)\n./tests/sessions_tests/tests.py:            str(response.cookies[settings.SESSION_COOKIE_NAME])\n./tests/sessions_tests/tests.py:    @override_settings(SESSION_COOKIE_SAMESITE='Strict')\n./tests/sessions_tests/tests.py:        self.assertEqual(response.cookies[settings.SESSION_COOKIE_NAME]['samesite'], 'Strict')\n./tests/sessions_tests/tests.py:    @override_settings(SESSION_COOKIE_HTTPONLY=False)\n./tests/sessions_tests/tests.py:        self.assertEqual(response.cookies[settings.SESSION_COOKIE_NAME]['httponly'], '')\n./tests/sessions_tests/tests.py:            str(response.cookies[settings.SESSION_COOKIE_NAME])\n./tests/sessions_tests/tests.py:        request.COOKIES[settings.SESSION_COOKIE_NAME] = 'abc'\n./tests/sessions_tests/tests.py:                settings.SESSION_COOKIE_NAME,\n./tests/sessions_tests/tests.py:            str(response.cookies[settings.SESSION_COOKIE_NAME])\n./tests/sessions_tests/tests.py:    @override_settings(SESSION_COOKIE_DOMAIN='.example.local', SESSION_COOKIE_PATH='/example/')\n./tests/sessions_tests/tests.py:        request.COOKIES[settings.SESSION_COOKIE_NAME] = 'abc'\n./tests/sessions_tests/tests.py:                settings.SESSION_COOKIE_NAME,\n./tests/sessions_tests/tests.py:            str(response.cookies[settings.SESSION_COOKIE_NAME])\n./tests/asgi/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/asgi/tests.py:@override_settings(ROOT_URLCONF='asgi.urls')\n./tests/absolute_url_overrides/tests.py:        with self.settings(\n./tests/absolute_url_overrides/tests.py:        with self.settings(\n./tests/model_options/test_tablespaces.py:from django.conf import settings\n./tests/model_options/test_tablespaces.py:# We can't test the DEFAULT_TABLESPACE and DEFAULT_INDEX_TABLESPACE settings\n./tests/model_options/test_tablespaces.py:# @override_settings doesn't work, and the tests depend\n./tests/model_options/test_tablespaces.py:        if settings.DEFAULT_INDEX_TABLESPACE:\n./tests/model_options/test_tablespaces.py:            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 1)\n./tests/model_options/test_tablespaces.py:        if settings.DEFAULT_INDEX_TABLESPACE:\n./tests/model_options/test_tablespaces.py:            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 2)\n./tests/model_options/test_tablespaces.py:        if settings.DEFAULT_INDEX_TABLESPACE:\n./tests/model_options/test_tablespaces.py:            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 1)\n./tests/model_options/test_tablespaces.py:        if settings.DEFAULT_INDEX_TABLESPACE:\n./tests/model_options/test_tablespaces.py:            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 2)\n./tests/model_options/test_tablespaces.py:        if settings.DEFAULT_INDEX_TABLESPACE:\n./tests/model_options/test_tablespaces.py:            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 1)\n./tests/defer_regress/tests.py:from django.test import TestCase, override_settings\n./tests/defer_regress/tests.py:    @override_settings(SESSION_SERIALIZER='django.contrib.sessions.serializers.PickleSerializer')\n./tests/admin_checks/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/admin_checks/tests.py:@override_settings(\n./tests/admin_checks/tests.py:    @override_settings(INSTALLED_APPS=['django.contrib.admin'])\n./tests/admin_checks/tests.py:    @override_settings(TEMPLATES=[])\n./tests/admin_checks/tests.py:    @override_settings(\n./tests/admin_checks/tests.py:        with self.settings(AUTHENTICATION_BACKENDS=[]):\n./tests/admin_checks/tests.py:    @override_settings(\n./tests/admin_checks/tests.py:    @override_settings(\n./tests/admin_checks/tests.py:    @override_settings(MIDDLEWARE=[])\n./tests/admin_checks/tests.py:    @override_settings(MIDDLEWARE=[\n./tests/admin_checks/tests.py:    @override_settings(MIDDLEWARE=[\n./tests/admin_inlines/tests.py:from django.test import RequestFactory, TestCase, override_settings\n./tests/admin_inlines/tests.py:@override_settings(ROOT_URLCONF='admin_inlines.urls')\n./tests/admin_inlines/tests.py:    @override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True)\n./tests/admin_inlines/tests.py:@override_settings(ROOT_URLCONF='admin_inlines.urls')\n./tests/admin_inlines/tests.py:@override_settings(ROOT_URLCONF='admin_inlines.urls')\n./tests/admin_inlines/tests.py:@override_settings(ROOT_URLCONF='admin_inlines.urls')\n./tests/admin_inlines/tests.py:@override_settings(ROOT_URLCONF='admin_inlines.urls')\n./tests/admin_inlines/tests.py:@override_settings(ROOT_URLCONF='admin_inlines.urls')\n./tests/shortcuts/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/shortcuts/tests.py:@override_settings(ROOT_URLCONF='shortcuts.urls')\n./tests/field_deconstruction/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/field_deconstruction/tests.py:        with self.settings(DEFAULT_DB_TABLESPACE='foo'):\n./tests/field_deconstruction/tests.py:        with self.settings(DEFAULT_DB_TABLESPACE='foo'):\n./tests/field_deconstruction/tests.py:    @override_settings(AUTH_USER_MODEL=\"auth.Permission\")\n./tests/field_deconstruction/tests.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/field_deconstruction/tests.py:    @override_settings(AUTH_USER_MODEL=\"auth.Permission\")\n./tests/field_deconstruction/tests.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/user_commands/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/user_commands/tests.py:@override_settings(\n./tests/user_commands/tests.py:            with self.settings(INSTALLED_APPS=['commandegg']):\n./tests/user_commands/tests.py:            'option3, pythonpath, settings, skip_checks, stderr, stdout, '\n./tests/user_commands/tests.py:            'opt_3, option3, pythonpath, settings, skip_checks, stderr, '\n./tests/user_commands/tests.py:                'pythonpath, settings, skip_checks, stderr, stdout, '\n./tests/user_commands/tests.py:        self.write_settings('settings.py', apps=['user_commands'], sdict={\n./tests/user_commands/tests.py:        self.write_settings('settings.py', apps=['user_commands'])\n./tests/user_commands/tests.py:        self.write_settings('settings.py', apps=['django.contrib.staticfiles', 'user_commands'], sdict={\n./tests/test_client/tests.py:    Client, RequestFactory, SimpleTestCase, TestCase, override_settings,\n./tests/test_client/tests.py:@override_settings(ROOT_URLCONF='test_client.urls')\n./tests/test_client/tests.py:    @override_settings(\n./tests/test_client/tests.py:        with self.settings(AUTHENTICATION_BACKENDS=['django.contrib.auth.backends.AllowAllUsersModelBackend']):\n./tests/test_client/tests.py:    @override_settings(\n./tests/test_client/tests.py:    @override_settings(\n./tests/test_client/tests.py:    @override_settings(\n./tests/test_client/tests.py:    @override_settings(AUTHENTICATION_BACKENDS=[\n./tests/test_client/tests.py:    @override_settings(SESSION_ENGINE=\"django.contrib.sessions.backends.signed_cookies\")\n./tests/test_client/tests.py:    @override_settings(\n./tests/test_client/tests.py:    @override_settings(\n./tests/test_client/tests.py:@override_settings(\n./tests/test_client/tests.py:@override_settings(ROOT_URLCONF='test_client.urls')\n./tests/test_sqlite.py:# This is an example test settings file for use with the Django test suite.\n./tests/test_sqlite.py:# database backends as possible.  You may want to create a separate settings\n./tests/flatpages_tests/test_forms.py:from django.conf import settings\n./tests/flatpages_tests/test_forms.py:from django.test import TestCase, modify_settings, override_settings\n./tests/flatpages_tests/test_forms.py:@modify_settings(INSTALLED_APPS={'append': ['django.contrib.flatpages']})\n./tests/flatpages_tests/test_forms.py:@override_settings(SITE_ID=1)\n./tests/flatpages_tests/test_forms.py:            'sites': [settings.SITE_ID],\n./tests/flatpages_tests/test_forms.py:    @override_settings(APPEND_SLASH=True, MIDDLEWARE=['django.middleware.common.CommonMiddleware'])\n./tests/flatpages_tests/test_forms.py:    @override_settings(APPEND_SLASH=False, MIDDLEWARE=['django.middleware.common.CommonMiddleware'])\n./tests/flatpages_tests/test_forms.py:        existing.sites.add(settings.SITE_ID)\n./tests/flatpages_tests/test_views.py:from django.conf import settings\n./tests/flatpages_tests/test_views.py:from django.test import TestCase, modify_settings, override_settings\n./tests/flatpages_tests/test_views.py:from .settings import FLATPAGES_TEMPLATES\n./tests/flatpages_tests/test_views.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.flatpages'})\n./tests/flatpages_tests/test_views.py:@override_settings(\n./tests/flatpages_tests/test_views.py:        fp.sites.add(settings.SITE_ID)\n./tests/flatpages_tests/test_views.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.flatpages'})\n./tests/flatpages_tests/test_views.py:@override_settings(\n./tests/flatpages_tests/test_views.py:        fp.sites.add(settings.SITE_ID)\n./tests/flatpages_tests/test_middleware.py:from django.conf import settings\n./tests/flatpages_tests/test_middleware.py:from django.test import TestCase, modify_settings, override_settings\n./tests/flatpages_tests/test_middleware.py:from .settings import FLATPAGES_TEMPLATES\n./tests/flatpages_tests/test_middleware.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.flatpages'})\n./tests/flatpages_tests/test_middleware.py:@override_settings(\n./tests/flatpages_tests/test_middleware.py:        fp.sites.add(settings.SITE_ID)\n./tests/flatpages_tests/test_middleware.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.flatpages'})\n./tests/flatpages_tests/test_middleware.py:@override_settings(\n./tests/flatpages_tests/test_middleware.py:        fp.sites.add(settings.SITE_ID)\n./tests/flatpages_tests/test_middleware.py:        fp.sites.add(settings.SITE_ID)\n./tests/flatpages_tests/test_sitemaps.py:from django.test.utils import modify_settings, override_settings\n./tests/flatpages_tests/test_sitemaps.py:@override_settings(\n./tests/flatpages_tests/test_sitemaps.py:@modify_settings(\n./tests/flatpages_tests/test_csrf.py:from django.test import Client, TestCase, modify_settings, override_settings\n./tests/flatpages_tests/test_csrf.py:from .settings import FLATPAGES_TEMPLATES\n./tests/flatpages_tests/test_csrf.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.flatpages'})\n./tests/flatpages_tests/test_csrf.py:@override_settings(\n./tests/utils_tests/test_module_loading.py:from django.test import SimpleTestCase, modify_settings\n./tests/utils_tests/test_module_loading.py:@modify_settings(INSTALLED_APPS={'append': 'utils_tests.test_module'})\n./tests/utils_tests/test_timezone.py:from django.test import SimpleTestCase, ignore_warnings, override_settings\n./tests/utils_tests/test_timezone.py:        with override_settings(USE_TZ=True):\n./tests/utils_tests/test_timezone.py:        with override_settings(USE_TZ=False):\n./tests/utils_tests/test_timezone.py:        with override_settings(USE_TZ=True, TIME_ZONE='UTC'):\n./tests/utils_tests/test_dateformat.py:from django.test import SimpleTestCase, override_settings\n./tests/utils_tests/test_dateformat.py:@override_settings(TIME_ZONE='Europe/Copenhagen')\n./tests/utils_tests/test_feedgenerator.py:            with self.settings(USE_TZ=use_tz):\n./tests/utils_tests/test_numberformat.py:        with self.settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=True):\n./tests/utils_tests/test_numberformat.py:        with self.settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=False):\n./tests/admin_default_site/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/admin_default_site/tests.py:@override_settings(INSTALLED_APPS=[\n./tests/mail/test_sendtestemail.py:from django.test import SimpleTestCase, override_settings\n./tests/mail/test_sendtestemail.py:@override_settings(\n./tests/mail/test_sendtestemail.py:        settings.MANAGERS.\n./tests/mail/test_sendtestemail.py:        settings.ADMIN.\n./tests/mail/test_sendtestemail.py:        settings.MANAGERS and settings.ADMINS.\n./tests/mail/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/mail/tests.py:    @override_settings(\n./tests/mail/tests.py:    @override_settings(EMAIL_USE_LOCALTIME=False, USE_TZ=True, TIME_ZONE='Africa/Algiers')\n./tests/mail/tests.py:    @override_settings(EMAIL_USE_LOCALTIME=True, USE_TZ=True, TIME_ZONE='Africa/Algiers')\n./tests/mail/tests.py:        self.settings_override = override_settings(EMAIL_BACKEND=self.email_backend)\n./tests/mail/tests.py:        self.settings_override.enable()\n./tests/mail/tests.py:        self.settings_override.disable()\n./tests/mail/tests.py:    @override_settings(MANAGERS=[('nobody', 'nobody@example.com')])\n./tests/mail/tests.py:    @override_settings(ADMINS=[('nobody', 'nobody@example.com')])\n./tests/mail/tests.py:    @override_settings(\n./tests/mail/tests.py:    @override_settings(ADMINS=[], MANAGERS=[])\n./tests/mail/tests.py:                with self.subTest(setting=setting, value=value), self.settings(**{setting: value}):\n./tests/mail/tests.py:        self._settings_override = override_settings(EMAIL_FILE_PATH=self.tmp_dir)\n./tests/mail/tests.py:        self._settings_override.enable()\n./tests/mail/tests.py:        self._settings_override.disable()\n./tests/mail/tests.py:        cls._settings_override = override_settings(\n./tests/mail/tests.py:        cls._settings_override.enable()\n./tests/mail/tests.py:        cls._settings_override.disable()\n./tests/mail/tests.py:    @override_settings(\n./tests/mail/tests.py:    def test_email_authentication_use_settings(self):\n./tests/mail/tests.py:    @override_settings(\n./tests/mail/tests.py:    def test_email_authentication_override_settings(self):\n./tests/mail/tests.py:    @override_settings(\n./tests/mail/tests.py:    @override_settings(EMAIL_USE_TLS=True)\n./tests/mail/tests.py:    def test_email_tls_use_settings(self):\n./tests/mail/tests.py:    @override_settings(EMAIL_USE_TLS=True)\n./tests/mail/tests.py:    def test_email_tls_override_settings(self):\n./tests/mail/tests.py:            'one of those settings to True.'\n./tests/mail/tests.py:    @override_settings(EMAIL_USE_SSL=True)\n./tests/mail/tests.py:    def test_email_ssl_use_settings(self):\n./tests/mail/tests.py:    @override_settings(EMAIL_USE_SSL=True)\n./tests/mail/tests.py:    def test_email_ssl_override_settings(self):\n./tests/mail/tests.py:    @override_settings(EMAIL_SSL_CERTFILE='foo')\n./tests/mail/tests.py:    def test_email_ssl_certfile_use_settings(self):\n./tests/mail/tests.py:    @override_settings(EMAIL_SSL_CERTFILE='foo')\n./tests/mail/tests.py:    def test_email_ssl_certfile_override_settings(self):\n./tests/mail/tests.py:    @override_settings(EMAIL_SSL_KEYFILE='foo')\n./tests/mail/tests.py:    def test_email_ssl_keyfile_use_settings(self):\n./tests/mail/tests.py:    @override_settings(EMAIL_SSL_KEYFILE='foo')\n./tests/mail/tests.py:    def test_email_ssl_keyfile_override_settings(self):\n./tests/mail/tests.py:    @override_settings(EMAIL_USE_TLS=True)\n./tests/mail/tests.py:    @override_settings(EMAIL_USE_SSL=True)\n./tests/mail/tests.py:    @override_settings(EMAIL_TIMEOUT=10)\n./tests/mail/tests.py:    def test_email_timeout_override_settings(self):\n./tests/file_uploads/tests.py:from django.test import SimpleTestCase, TestCase, client, override_settings\n./tests/file_uploads/tests.py:@override_settings(MEDIA_ROOT=MEDIA_ROOT, ROOT_URLCONF='file_uploads.urls', MIDDLEWARE=[])\n./tests/file_uploads/tests.py:@override_settings(MEDIA_ROOT=MEDIA_ROOT)\n./tests/middleware_exceptions/tests.py:from django.conf import settings\n./tests/middleware_exceptions/tests.py:from django.test import RequestFactory, SimpleTestCase, override_settings\n./tests/middleware_exceptions/tests.py:@override_settings(ROOT_URLCONF='middleware_exceptions.urls')\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.ProcessViewNoneMiddleware'])\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.ProcessViewMiddleware'])\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=[\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=[\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.TemplateResponseMiddleware'])\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.NoTemplateResponseMiddleware'])\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.LogMiddleware'])\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.ProcessExceptionMiddleware'])\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=[\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=[\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.middleware.ProcessExceptionMiddleware'])\n./tests/middleware_exceptions/tests.py:@override_settings(ROOT_URLCONF='middleware_exceptions.urls')\n./tests/middleware_exceptions/tests.py:    @override_settings(ROOT_URLCONF=None)\n./tests/middleware_exceptions/tests.py:        # Removing ROOT_URLCONF is safe, as override_settings will restore\n./tests/middleware_exceptions/tests.py:        # the previously defined settings.\n./tests/middleware_exceptions/tests.py:        del settings.ROOT_URLCONF\n./tests/middleware_exceptions/tests.py:@override_settings(\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.tests.MyMiddleware'])\n./tests/middleware_exceptions/tests.py:    @override_settings(MIDDLEWARE=['middleware_exceptions.tests.MyMiddlewareWithExceptionMessage'])\n./tests/middleware_exceptions/tests.py:    @override_settings(DEBUG=False)\n./tests/template_loader/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/template_loader/tests.py:@override_settings(TEMPLATES=[{\n./tests/i18n/test_extraction.py:from django.test import SimpleTestCase, override_settings\n./tests/i18n/test_extraction.py:    @override_settings(USE_I18N=False)\n./tests/i18n/test_extraction.py:        with override_settings(STATIC_ROOT=os.path.join(self.test_dir, 'static/'),\n./tests/i18n/test_extraction.py:    @override_settings(STATIC_ROOT=None, MEDIA_ROOT='')\n./tests/i18n/test_extraction.py:    def test_default_root_settings(self):\n./tests/i18n/test_extraction.py:        with override_settings(STATIC_ROOT=os.path.join(self.test_dir, 'static/'),\n./tests/i18n/test_extraction.py:        with override_settings(LOCALE_PATHS=[os.path.join(self.test_dir, 'project_locale')]):\n./tests/i18n/test_extraction.py:    def test_makemessages_no_settings(self):\n./tests/i18n/test_percents.py:from django.test import SimpleTestCase, override_settings\n./tests/i18n/test_percents.py:@override_settings(LOCALE_PATHS=[SAMPLEPROJECT_LOCALE])\n./tests/i18n/sampleproject/manage.py:    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"sampleproject.settings\")\n./tests/i18n/patterns/tests.py:from django.conf import settings\n./tests/i18n/patterns/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/i18n/patterns/tests.py:@override_settings(\n./tests/i18n/patterns/tests.py:            self.assertEqual(reverse('prefixed'), '/%s/prefixed/' % settings.LANGUAGE_CODE)\n./tests/i18n/patterns/tests.py:    @override_settings(ROOT_URLCONF='i18n.patterns.urls.wrong')\n./tests/i18n/patterns/tests.py:@override_settings(ROOT_URLCONF='i18n.patterns.urls.disabled')\n./tests/i18n/patterns/tests.py:    @override_settings(USE_I18N=False)\n./tests/i18n/patterns/tests.py:    @override_settings(ROOT_URLCONF='i18n.patterns.urls.path_unused')\n./tests/i18n/patterns/tests.py:@override_settings(ROOT_URLCONF='i18n.patterns.urls.path_unused')\n./tests/i18n/patterns/tests.py:    @override_settings(\n./tests/i18n/patterns/tests.py:    (`settings.APPEND_SLASH=True`).\n./tests/i18n/patterns/tests.py:    (`settings.APPEND_SLASH=False`).\n./tests/i18n/patterns/tests.py:    @override_settings(APPEND_SLASH=False)\n./tests/i18n/patterns/tests.py:    @override_settings(APPEND_SLASH=False)\n./tests/i18n/tests.py:from django.conf import settings\n./tests/i18n/tests.py:    RequestFactory, SimpleTestCase, TestCase, override_settings,\n./tests/i18n/tests.py:extended_locale_paths = settings.LOCALE_PATHS + [\n./tests/i18n/tests.py:def patch_formats(lang, **settings):\n./tests/i18n/tests.py:    for key, value in settings.items():\n./tests/i18n/tests.py:    @override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/i18n/tests.py:    @override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/i18n/tests.py:    @override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/i18n/tests.py:    @override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/i18n/tests.py:        with override_settings(LANGUAGE_CODE='he'):\n./tests/i18n/tests.py:@override_settings(USE_L10N=True)\n./tests/i18n/tests.py:        with self.settings(USE_THOUSAND_SEPARATOR=False):\n./tests/i18n/tests.py:        with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:    @override_settings(USE_L10N=False)\n./tests/i18n/tests.py:            # THOUSAND_SEPARATOR settings are specified\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True, NUMBER_GROUPING=1, THOUSAND_SEPARATOR='!'):\n./tests/i18n/tests.py:        The active locale's formats take precedence over the default settings\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True, THOUSAND_SEPARATOR='!'):\n./tests/i18n/tests.py:            with self.settings(FIRST_DAY_OF_WEEK=0):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=False):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=False):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=False):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=False):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=False):\n./tests/i18n/tests.py:        with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:        with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_THOUSAND_SEPARATOR=True, USE_L10N=False):\n./tests/i18n/tests.py:        with self.settings(USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:        with self.settings(USE_L10N=False, DECIMAL_SEPARATOR=','):\n./tests/i18n/tests.py:        with self.settings(\n./tests/i18n/tests.py:        with self.settings(FORMAT_MODULE_PATH='i18n.other.locale'):\n./tests/i18n/tests.py:            with self.settings(USE_L10N=False, USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:            with self.settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True):\n./tests/i18n/tests.py:    def test_format_arbitrary_settings(self):\n./tests/i18n/tests.py:        with self.settings(FORMAT_MODULE_PATH='i18n.other.locale'):\n./tests/i18n/tests.py:        for language_code, language_name in settings.LANGUAGES:\n./tests/i18n/tests.py:    @override_settings(LANGUAGE_CODE='de')\n./tests/i18n/tests.py:    @override_settings(\n./tests/i18n/tests.py:        r.COOKIES = {settings.LANGUAGE_COOKIE_NAME: 'pt-br'}\n./tests/i18n/tests.py:        r.COOKIES = {settings.LANGUAGE_COOKIE_NAME: 'pt'}\n./tests/i18n/tests.py:        r.COOKIES = {settings.LANGUAGE_COOKIE_NAME: 'es'}\n./tests/i18n/tests.py:        r.COOKIES = {settings.LANGUAGE_COOKIE_NAME: 'es-us'}\n./tests/i18n/tests.py:        r.COOKIES = {settings.LANGUAGE_COOKIE_NAME: 'zh-hans'}\n./tests/i18n/tests.py:    @override_settings(\n./tests/i18n/tests.py:        self.assertEqual(g(settings.LANGUAGE_CODE), settings.LANGUAGE_CODE)\n./tests/i18n/tests.py:    @override_settings(\n./tests/i18n/tests.py:        with self.settings(LANGUAGES=[('en', 'English')]):\n./tests/i18n/tests.py:        with override_settings(USE_I18N=False):\n./tests/i18n/tests.py:        with override_settings(USE_I18N=True):\n./tests/i18n/tests.py:    @override_settings(LANGUAGE_CODE='de')\n./tests/i18n/tests.py:        with self.modify_settings(INSTALLED_APPS={'append': 'i18n.resolution'}):\n./tests/i18n/tests.py:            with self.modify_settings(INSTALLED_APPS={'remove': 'django.contrib.admin.apps.SimpleAdminConfig'}):\n./tests/i18n/tests.py:@override_settings(LOCALE_PATHS=extended_locale_paths)\n./tests/i18n/tests.py:        with self.settings(INSTALLED_APPS=['i18n.resolution']):\n./tests/i18n/tests.py:@override_settings(INSTALLED_APPS=['i18n.territorial_fallback'])\n./tests/i18n/tests.py:@override_settings(\n./tests/i18n/tests.py:    @override_settings(\n./tests/i18n/tests.py:@override_settings(\n./tests/i18n/tests.py:        language (settings.LANGUAGE_CODE) should be accessible without a prefix.\n./tests/i18n/tests.py:@override_settings(\n./tests/i18n/tests.py:        with override_settings(LANGUAGE_CODE='de'):\n./tests/i18n/tests.py:    @override_settings(\n./tests/i18n/tests.py:    @override_settings(USE_I18N=True)\n./tests/i18n/tests.py:    @override_settings(\n./tests/i18n/tests.py:@override_settings(USE_I18N=True)\n./tests/i18n/tests.py:    @override_settings(USE_I18N=False)\n./tests/i18n/tests.py:            with self.settings(LOCALE_PATHS=[app_dir]):\n./tests/i18n/tests.py:        with self.settings(INSTALLED_APPS=['tests.i18n.sampleproject']):\n./tests/i18n/test_compilation.py:from django.test import SimpleTestCase, override_settings\n./tests/i18n/test_compilation.py:        with override_settings(LOCALE_PATHS=[os.path.join(self.test_dir, 'locale')]):\n./tests/i18n/test_compilation.py:        with override_settings(LOCALE_PATHS=[os.path.join(self.test_dir, 'locale')]):\n./tests/i18n/test_compilation.py:        with override_settings(LOCALE_PATHS=[os.path.join(self.test_dir, 'locale')]):\n./tests/i18n/test_compilation.py:        with override_settings(LOCALE_PATHS=[os.path.join(self.test_dir, 'locale')]):\n./tests/i18n/contenttypes/tests.py:from django.test import TestCase, override_settings\n./tests/i18n/contenttypes/tests.py:@override_settings(\n./tests/migrations/test_writer.py:from django.conf import SettingsReference, settings\n./tests/migrations/test_writer.py:    def test_serialize_settings(self):\n./tests/migrations/test_writer.py:        self.assertSerializedEqual(SettingsReference(settings.AUTH_USER_MODEL, \"AUTH_USER_MODEL\"))\n./tests/migrations/test_writer.py:            (\"settings.AUTH_USER_MODEL\", {\"from django.conf import settings\"})\n./tests/migrations/test_writer.py:            with self.modify_settings(INSTALLED_APPS={'append': app}):\n./tests/migrations/test_operations.py:from django.test import SimpleTestCase, override_settings, skipUnlessDBFeature\n./tests/migrations/test_operations.py:    @override_settings(TEST_SWAP_MODEL=\"migrations.SomeFakeModel\")\n./tests/migrations/test_operations.py:    @override_settings(TEST_SWAP_MODEL=\"migrations.SomeFakeModel\")\n./tests/migrations/test_operations.py:    @override_settings(TEST_SWAP_MODEL=\"migrations.SomeFakeModel\")\n./tests/migrations/test_operations.py:    @override_settings(TEST_SWAP_MODEL='migrations.SomeFakeModel')\n./tests/migrations/test_deprecated_fields.py:from django.test import override_settings\n./tests/migrations/test_deprecated_fields.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.deprecated_field_migrations\"})\n./tests/migrations/test_base.py:                with self.settings(MIGRATION_MODULES={app_label: new_module}):\n./tests/migrations/test_migrations_custom_user/0001_initial.py:from django.conf import settings\n./tests/migrations/test_migrations_custom_user/0001_initial.py:        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n./tests/migrations/test_migrations_custom_user/0001_initial.py:                (\"author\", models.ForeignKey(settings.AUTH_USER_MODEL, models.CASCADE, to_field=\"id\")),\n./tests/migrations/test_multidb.py:from django.test import override_settings\n./tests/migrations/test_multidb.py:        CreateModel honors multi-db settings.\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[AgnosticRouter()])\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[MigrateNothingRouter()])\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[MigrateEverythingRouter()])\n./tests/migrations/test_multidb.py:        with override_settings(DATABASE_ROUTERS=[AgnosticRouter(), AgnosticRouter()]):\n./tests/migrations/test_multidb.py:        with override_settings(DATABASE_ROUTERS=[MigrateNothingRouter(), MigrateEverythingRouter()]):\n./tests/migrations/test_multidb.py:        with override_settings(DATABASE_ROUTERS=[MigrateEverythingRouter(), MigrateNothingRouter()]):\n./tests/migrations/test_multidb.py:        with override_settings(DATABASE_ROUTERS=[MigrateEverythingRouter()]):\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[MigrateNothingRouter()])\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[MigrateWhenFooRouter()])\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[MigrateWhenFooRouter()])\n./tests/migrations/test_multidb.py:        with override_settings(DATABASE_ROUTERS=[MigrateEverythingRouter()]):\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[MigrateNothingRouter()])\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[MigrateWhenFooRouter()])\n./tests/migrations/test_multidb.py:    @override_settings(DATABASE_ROUTERS=[MigrateWhenFooRouter()])\n./tests/migrations/test_executor.py:    SimpleTestCase, modify_settings, override_settings, skipUnlessDBFeature,\n./tests/migrations/test_executor.py:@modify_settings(INSTALLED_APPS={'append': 'migrations2'})\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_non_atomic\"})\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_atomic_operation\"})\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_executor.py:    @override_settings(\n./tests/migrations/test_executor.py:    @override_settings(\n./tests/migrations/test_executor.py:    @override_settings(\n./tests/migrations/test_executor.py:    @override_settings(\n./tests/migrations/test_executor.py:    @override_settings(\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_executor.py:    @override_settings(\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n./tests/migrations/test_executor.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n./tests/migrations/test_autodetector.py:from django.conf import settings\n./tests/migrations/test_autodetector.py:from django.test import TestCase, override_settings\n./tests/migrations/test_autodetector.py:    @override_settings(AUTH_USER_MODEL=\"thirdapp.CustomUser\")\n./tests/migrations/test_autodetector.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/migrations/test_autodetector.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/migrations/test_autodetector.py:            with override_settings(AUTH_USER_MODEL=\"thirdapp.CustomUser\"):\n./tests/migrations/test_autodetector.py:    @override_settings(AUTH_USER_MODEL=\"thirdapp.CustomUser\")\n./tests/migrations/test_autodetector.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/migrations/test_autodetector.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_autodetector.py:    @override_settings(AUTH_USER_MODEL=\"a.Tenant\")\n./tests/migrations/test_autodetector.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/migrations/test_autodetector.py:                (\"tenant\", models.ForeignKey(settings.AUTH_USER_MODEL, models.CASCADE)),\n./tests/migrations/test_autodetector.py:    @override_settings(AUTH_USER_MODEL=\"b.Tenant\")\n./tests/migrations/test_autodetector.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/migrations/test_autodetector.py:                (\"tenant\", models.ForeignKey(settings.AUTH_USER_MODEL, models.CASCADE)),\n./tests/migrations/test_autodetector.py:    @override_settings(AUTH_USER_MODEL=\"a.Person\")\n./tests/migrations/test_autodetector.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/migrations/test_autodetector.py:                (\"parent1\", models.ForeignKey(settings.AUTH_USER_MODEL, models.CASCADE, related_name='children'))\n./tests/migrations/test_autodetector.py:    @override_settings(AUTH_USER_MODEL='a.User')\n./tests/migrations/test_autodetector.py:        with isolate_lru_cache(apps.get_swappable_settings_name):\n./tests/migrations/test_autodetector.py:                ('user', models.ForeignKey(settings.AUTH_USER_MODEL, models.CASCADE))\n./tests/migrations/test_questioner.py:from django.test.utils import captured_stdout, override_settings\n./tests/migrations/test_questioner.py:    @override_settings(\n./tests/migrations/test_commands.py:from django.test import TestCase, override_settings\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=[\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=['migrations', 'migrations.migrations_test_apps.unmigrated_app_syncdb'])\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_clashing_prefix'})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_initial_false\"})\n./tests/migrations/test_commands.py:    @override_settings(\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_fake_split_initial\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_conflict\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_run_before\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_plan'})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_empty'})\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_empty\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed_complex\"})\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=[\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=[\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app'])\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_non_atomic\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_no_operations'})\n./tests/migrations/test_commands.py:    @override_settings(\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=['migrations.migrations_test_apps.unmigrated_app_syncdb'])\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=[\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations'})\n./tests/migrations/test_commands.py:    @override_settings(INSTALLED_APPS=['migrations', 'migrations2'])\n./tests/migrations/test_commands.py:        settings.DATABASE_ROUTERS.\n./tests/migrations/test_commands.py:                with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n./tests/migrations/test_commands.py:                with self.settings(DATABASE_ROUTERS=['migrations.routers.EmptyRouter']):\n./tests/migrations/test_commands.py:                with self.settings(DATABASE_ROUTERS=['migrations.routers.TestRouter']):\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={\"migrations\": None})\n./tests/migrations/test_commands.py:    @override_settings(MIGRATION_MODULES={'migrations': 'some.nonexistent.path'})\n./tests/migrations/test_commands.py:    @override_settings(\n./tests/migrations/test_commands.py:    @override_settings(\n./tests/migrations/test_commands.py:    @override_settings(\n./tests/migrations/test_state.py:from django.test import SimpleTestCase, override_settings\n./tests/migrations/test_state.py:    @override_settings(TEST_SWAPPABLE_MODEL='migrations.SomeFakeModel')\n./tests/migrations/test_state.py:    @override_settings(TEST_SWAPPABLE_MODEL='migrations.SomeFakeModel')\n./tests/migrations/test_state.py:    @override_settings(TEST_SWAPPABLE_MODEL='migrations.SomeFakeModel')\n./tests/migrations/test_loader.py:from django.test import TestCase, modify_settings, override_settings\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_loader.py:    @modify_settings(INSTALLED_APPS={'append': 'basic'})\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\n./tests/migrations/test_loader.py:    @modify_settings(INSTALLED_APPS={'append': 'migrations2'})\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_unmigdep\"})\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_run_before\"})\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\n./tests/migrations/test_loader.py:    @modify_settings(INSTALLED_APPS={'append': 'migrations2'})\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations\"})\n./tests/migrations/test_loader.py:        with override_settings(MIGRATION_MODULES={\"migrations\": \"import_error_package\"}):\n./tests/migrations/test_loader.py:        with override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.faulty_migrations.file\"}):\n./tests/migrations/test_loader.py:        with override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.faulty_migrations.namespace\"}):\n./tests/migrations/test_loader.py:    @override_settings(\n./tests/migrations/test_loader.py:    @override_settings(\n./tests/migrations/test_loader.py:    @override_settings(\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed\"})\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed_complex\"})\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\n./tests/migrations/test_loader.py:    @modify_settings(INSTALLED_APPS={'append': [\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\n./tests/migrations/test_loader.py:    @modify_settings(INSTALLED_APPS={'append': [\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\"migrations\": \"migrations.test_migrations_squashed_erroneous\"})\n./tests/migrations/test_loader.py:    @override_settings(\n./tests/migrations/test_loader.py:    @override_settings(\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={\n./tests/migrations/test_loader.py:    @modify_settings(INSTALLED_APPS={'append': [\n./tests/migrations/test_loader.py:    @override_settings(MIGRATION_MODULES={'migrations': 'migrations.test_migrations_private'})\n./tests/wsgi/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/wsgi/tests.py:@override_settings(ROOT_URLCONF='wsgi.urls')\n./tests/wsgi/tests.py:    @override_settings(WSGI_APPLICATION=\"wsgi.wsgi.application\")\n./tests/wsgi/tests.py:    @override_settings(WSGI_APPLICATION=None)\n./tests/wsgi/tests.py:    @override_settings(WSGI_APPLICATION=\"wsgi.noexist.app\")\n./tests/wsgi/tests.py:    @override_settings(WSGI_APPLICATION=\"wsgi.wsgi.noexist\")\n./tests/proxy_models/tests.py:from django.test import TestCase, override_settings\n./tests/proxy_models/tests.py:    @override_settings(TEST_SWAPPABLE_MODEL='proxy_models.AlternateModel')\n./tests/proxy_models/tests.py:@override_settings(ROOT_URLCONF='proxy_models.urls')\n./tests/prefetch_related/tests.py:from django.test import TestCase, override_settings\n./tests/prefetch_related/tests.py:    @override_settings(DEBUG=True)\n./tests/servers/tests.py:from django.test import LiveServerTestCase, override_settings\n./tests/servers/tests.py:@override_settings(ROOT_URLCONF='servers.urls', **TEST_SETTINGS)\n./tests/servers/tests.py:@override_settings(ROOT_URLCONF='servers.urls')\n./tests/select_for_update/tests.py:    TransactionTestCase, override_settings, skipIfDBFeature,\n./tests/select_for_update/tests.py:    @override_settings(DATABASE_ROUTERS=[TestRouter()])\n./tests/urlpatterns/tests.py:from django.test.utils import override_settings\n./tests/urlpatterns/tests.py:@override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n./tests/urlpatterns/tests.py:    @override_settings(ROOT_URLCONF='urlpatterns.path_base64_urls')\n./tests/urlpatterns/tests.py:    @override_settings(ROOT_URLCONF='urlpatterns.path_base64_urls')\n./tests/urlpatterns/tests.py:    @override_settings(ROOT_URLCONF='urlpatterns.path_base64_urls')\n./tests/urlpatterns/tests.py:@override_settings(ROOT_URLCONF='urlpatterns.converter_urls')\n./tests/urlpatterns/tests.py:@override_settings(ROOT_URLCONF='urlpatterns.path_dynamic_urls')\n./tests/urlpatterns/test_resolvers.py:from django.test.utils import override_settings\n./tests/urlpatterns/test_resolvers.py:    @override_settings(ROOT_URLCONF='urlpatterns.path_urls')\n./tests/urlpatterns/test_resolvers.py:        # settings.ROOT_URLCONF is the same cached object.\n./tests/proxy_model_inheritance/tests.py:            with self.modify_settings(INSTALLED_APPS={'append': ['app1', 'app2']}):\n./tests/multiple_database/tests.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/multiple_database/tests.py:        with self.settings(DATABASE_ROUTERS=[router]):\n./tests/multiple_database/tests.py:    @override_settings(DATABASE_ROUTERS=[AuthRouter()])\n./tests/multiple_database/tests.py:    @override_settings(DATABASE_ROUTERS=[\n./tests/multiple_database/tests.py:@override_settings(DATABASE_ROUTERS=[TestRouter()])\n./tests/multiple_database/tests.py:        with override_settings(DATABASE_ROUTERS=[TestRouter(), AuthRouter()]):\n./tests/multiple_database/tests.py:        with override_settings(DATABASE_ROUTERS=[AuthRouter(), TestRouter()]):\n./tests/multiple_database/tests.py:        with override_settings(DATABASE_ROUTERS=[WriteRouter(), AuthRouter(), TestRouter()]):\n./tests/multiple_database/tests.py:@override_settings(DATABASE_ROUTERS=[AuthRouter()])\n./tests/multiple_database/tests.py:    @override_settings(DATABASE_ROUTERS=[AntiPetRouter()])\n./tests/multiple_database/tests.py:    @override_settings(DATABASE_ROUTERS=[AntiPetRouter()])\n./tests/multiple_database/tests.py:        return override_settings(DATABASE_ROUTERS=[WriteToOtherRouter()])\n./tests/multiple_database/tests.py:        return override_settings(DATABASE_ROUTERS=[AttributeErrorRouter()])\n./tests/multiple_database/tests.py:@override_settings(DATABASE_ROUTERS=[ModelMetaRouter()])\n./tests/multiple_database/tests.py:        with override_settings(DATABASE_ROUTERS=[SyncOnlyDefaultDatabaseRouter()]):\n./tests/multiple_database/tests.py:        return override_settings(DATABASE_ROUTERS=[RouteForWriteTestCase.WriteCheckRouter()])\n./tests/multiple_database/tests.py:@override_settings(DATABASE_ROUTERS=[NoRelationRouter()])\n./tests/model_indexes/tests.py:from django.conf import settings\n./tests/model_indexes/tests.py:                # consequence, @override_settings doesn't work.\n./tests/model_indexes/tests.py:                if settings.DEFAULT_INDEX_TABLESPACE:\n./tests/model_indexes/tests.py:                        '\"%s\"' % settings.DEFAULT_INDEX_TABLESPACE,\n./tests/datetimes/tests.py:from django.test import TestCase, override_settings\n./tests/datetimes/tests.py:    @override_settings(USE_TZ=True)\n./tests/humanize_tests/tests.py:from django.test import SimpleTestCase, modify_settings, override_settings\n./tests/humanize_tests/tests.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.humanize'})\n./tests/humanize_tests/tests.py:        with self.settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=False):\n./tests/humanize_tests/tests.py:        with translation.override('ja'), self.settings(USE_L10N=True):\n./tests/humanize_tests/tests.py:        with self.settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True):\n./tests/humanize_tests/tests.py:        with self.settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True):\n./tests/humanize_tests/tests.py:            with override_settings(TIME_ZONE=\"America/Chicago\", USE_TZ=True):\n./tests/humanize_tests/tests.py:                with override_settings(USE_TZ=True):\n./tests/humanize_tests/tests.py:            with translation.override('cs'), self.settings(USE_L10N=True):\n./tests/requests/tests.py:from django.test import RequestFactory, SimpleTestCase, override_settings\n./tests/requests/tests.py:        with override_settings(FORCE_SCRIPT_NAME='/FORCED_PREFIX/'):\n./tests/requests/tests.py:        with override_settings(FORCE_SCRIPT_NAME='/FORCED_PREFIX/'):\n./tests/requests/tests.py:        with override_settings(FORCE_SCRIPT_NAME='/FORCED_PREFIX'):\n./tests/requests/tests.py:    @override_settings(ALLOWED_HOSTS=['example.com'])\n./tests/requests/tests.py:    @override_settings(\n./tests/requests/tests.py:    @override_settings(USE_X_FORWARDED_HOST=True, ALLOWED_HOSTS=['*'])\n./tests/requests/tests.py:    @override_settings(USE_X_FORWARDED_PORT=False)\n./tests/requests/tests.py:    @override_settings(USE_X_FORWARDED_PORT=True)\n./tests/requests/tests.py:    @override_settings(DEBUG=True, ALLOWED_HOSTS=[])\n./tests/requests/tests.py:    @override_settings(ALLOWED_HOSTS=[])\n./tests/requests/test_data_upload_settings.py:TOO_MANY_FIELDS_MSG = 'The number of GET/POST parameters exceeded settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.'\n./tests/requests/test_data_upload_settings.py:TOO_MUCH_DATA_MSG = 'Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.'\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=12):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=13):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=None):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=10):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=11):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=None):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=1):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=2):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=3):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_MEMORY_SIZE=None):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=1):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=3):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=1):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=2):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=None):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=2):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=3):\n./tests/requests/test_data_upload_settings.py:        with self.settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=None):\n./tests/sites_tests/tests.py:from django.conf import settings\n./tests/sites_tests/tests.py:    SimpleTestCase, TestCase, modify_settings, override_settings,\n./tests/sites_tests/tests.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.sites'})\n./tests/sites_tests/tests.py:        cls.site = Site(id=settings.SITE_ID, domain='example.com', name='example.com')\n./tests/sites_tests/tests.py:        s2 = Site.objects.get(id=settings.SITE_ID)\n./tests/sites_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['example.com'])\n./tests/sites_tests/tests.py:        self.assertEqual(site.id, settings.SITE_ID)\n./tests/sites_tests/tests.py:        with self.modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'}):\n./tests/sites_tests/tests.py:    @override_settings(SITE_ID='', ALLOWED_HOSTS=['example.com'])\n./tests/sites_tests/tests.py:        del settings.SITE_ID\n./tests/sites_tests/tests.py:    @override_settings(SITE_ID='', ALLOWED_HOSTS=['example.com'])\n./tests/sites_tests/tests.py:    @override_settings(SITE_ID='', ALLOWED_HOSTS=['example.com', 'example.net'])\n./tests/sites_tests/tests.py:        with self.modify_settings(INSTALLED_APPS={'remove': 'django.contrib.sites'}):\n./tests/sites_tests/tests.py:    @override_settings(ALLOWED_HOSTS=['example.com'])\n./tests/sites_tests/tests.py:        with self.settings(SITE_ID=''):\n./tests/sites_tests/tests.py:    @override_settings(SITE_ID='', ALLOWED_HOSTS=['example2.com'])\n./tests/sites_tests/tests.py:@override_settings(ALLOWED_HOSTS=['example.com'])\n./tests/sites_tests/tests.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.sites'})\n./tests/sites_tests/tests.py:    @override_settings(DATABASE_ROUTERS=[JustOtherRouter()])\n./tests/sites_tests/tests.py:    @override_settings(SITE_ID=35696)\n./tests/sites_tests/tests.py:    @override_settings()  # Restore original ``SITE_ID`` afterwards.\n./tests/sites_tests/tests.py:        del settings.SITE_ID\n./tests/sites_tests/tests.py:        self.assertEqual(request.site.id, settings.SITE_ID)\n./tests/sites_tests/tests.py:        self.assertContains(response, settings.SITE_ID)\n./tests/messages_tests/test_cookie.py:from django.test import SimpleTestCase, override_settings\n./tests/messages_tests/test_cookie.py:@override_settings(SESSION_COOKIE_DOMAIN='.example.com', SESSION_COOKIE_SECURE=True, SESSION_COOKIE_HTTPONLY=True)\n./tests/messages_tests/test_cookie.py:    @override_settings(SESSION_COOKIE_SAMESITE='Strict')\n./tests/messages_tests/test_mixins.py:from django.test import SimpleTestCase, override_settings\n./tests/messages_tests/test_mixins.py:@override_settings(ROOT_URLCONF='messages_tests.urls')\n./tests/messages_tests/base.py:from django.test import modify_settings, override_settings\n./tests/messages_tests/base.py:class override_settings_tags(override_settings):\n./tests/messages_tests/base.py:        # settings.MESSAGE_TAGS, update that constant also.\n./tests/messages_tests/base.py:        self.settings_override = override_settings_tags(\n./tests/messages_tests/base.py:        self.settings_override.enable()\n./tests/messages_tests/base.py:        self.settings_override.disable()\n./tests/messages_tests/base.py:    @override_settings(MESSAGE_LEVEL=constants.DEBUG)\n./tests/messages_tests/base.py:    @override_settings(MESSAGE_LEVEL=constants.DEBUG)\n./tests/messages_tests/base.py:    @override_settings(MESSAGE_LEVEL=constants.DEBUG)\n./tests/messages_tests/base.py:    @modify_settings(\n./tests/messages_tests/base.py:    @override_settings(\n./tests/messages_tests/base.py:    @modify_settings(\n./tests/messages_tests/base.py:    @override_settings(\n./tests/messages_tests/base.py:    @override_settings(MESSAGE_LEVEL=29)\n./tests/messages_tests/base.py:    def test_settings_level(self):\n./tests/messages_tests/base.py:    @override_settings_tags(MESSAGE_TAGS={\n./tests/generic_inline_admin/tests.py:    RequestFactory, SimpleTestCase, TestCase, override_settings,\n./tests/generic_inline_admin/tests.py:@override_settings(ROOT_URLCONF='generic_inline_admin.urls')\n./tests/generic_inline_admin/tests.py:@override_settings(ROOT_URLCONF='generic_inline_admin.urls')\n./tests/generic_inline_admin/tests.py:@override_settings(ROOT_URLCONF='generic_inline_admin.urls')\n./tests/generic_inline_admin/tests.py:@override_settings(ROOT_URLCONF='generic_inline_admin.urls')\n./tests/generic_inline_admin/tests.py:@override_settings(ROOT_URLCONF='generic_inline_admin.urls')\n./tests/gis_tests/test_geoip2.py:from django.conf import settings\n./tests/gis_tests/test_geoip2.py:    HAS_GEOIP2 and getattr(settings, \"GEOIP_PATH\", None),\n./tests/gis_tests/test_geoip2.py:        path = settings.GEOIP_PATH\n./tests/gis_tests/test_geoip2.py:        path = settings.GEOIP_PATH\n./tests/gis_tests/layermap/tests.py:from django.conf import settings\n./tests/gis_tests/layermap/tests.py:from django.test import TestCase, override_settings\n./tests/gis_tests/layermap/tests.py:@override_settings(DATABASE_ROUTERS=[OtherRouter()])\n./tests/gis_tests/layermap/tests.py:    @unittest.skipUnless(len(settings.DATABASES) > 1, 'multiple databases required')\n./tests/gis_tests/utils.py:from django.conf import settings\n./tests/gis_tests/utils.py:    if settings.DATABASES[DEFAULT_DB_ALIAS]['ENGINE'].rsplit('.')[-1] == backend:\n./tests/gis_tests/utils.py:_default_db = settings.DATABASES[DEFAULT_DB_ALIAS]['ENGINE'].rsplit('.')[-1]\n./tests/gis_tests/utils.py:if oracle and 'gis' in settings.DATABASES[DEFAULT_DB_ALIAS]['ENGINE']:\n./tests/gis_tests/geoadmin/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/gis_tests/geoadmin/tests.py:@override_settings(ROOT_URLCONF='django.contrib.gis.tests.geoadmin.urls')\n./tests/gis_tests/inspectapp/tests.py:from django.test.utils import modify_settings\n./tests/gis_tests/inspectapp/tests.py:@modify_settings(\n./tests/gis_tests/inspectapp/tests.py:    connection settings from the Django test.\n./tests/gis_tests/inspectapp/tests.py:        # Don't add the parameter if it is not in django's settings\n./tests/gis_tests/tests.py:            self.settings_dict = {\n./tests/gis_tests/geoapp/test_feeds.py:from django.conf import settings\n./tests/gis_tests/geoapp/test_feeds.py:from django.test import TestCase, modify_settings, override_settings\n./tests/gis_tests/geoapp/test_feeds.py:@modify_settings(INSTALLED_APPS={'append': 'django.contrib.sites'})\n./tests/gis_tests/geoapp/test_feeds.py:@override_settings(ROOT_URLCONF='gis_tests.geoapp.urls')\n./tests/gis_tests/geoapp/test_feeds.py:        Site(id=settings.SITE_ID, domain=\"example.com\", name=\"example.com\").save()\n./tests/gis_tests/geoapp/test_sitemaps.py:from django.conf import settings\n./tests/gis_tests/geoapp/test_sitemaps.py:from django.test import TestCase, modify_settings, override_settings\n./tests/gis_tests/geoapp/test_sitemaps.py:@modify_settings(INSTALLED_APPS={'append': ['django.contrib.sites', 'django.contrib.sitemaps']})\n./tests/gis_tests/geoapp/test_sitemaps.py:@override_settings(ROOT_URLCONF='gis_tests.geoapp.urls')\n./tests/gis_tests/geoapp/test_sitemaps.py:        Site(id=settings.SITE_ID, domain=\"example.com\", name=\"example.com\").save()\n./tests/gis_tests/test_geoforms.py:from django.test import SimpleTestCase, override_settings\n./tests/gis_tests/test_geoforms.py:    @override_settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True)\n./tests/gis_tests/relatedapp/tests.py:from django.test.utils import override_settings\n./tests/gis_tests/relatedapp/tests.py:    @override_settings(USE_TZ=True)\n./tests/handlers/test_exception.py:from django.test import SimpleTestCase, override_settings\n./tests/handlers/test_exception.py:    @override_settings(DATA_UPLOAD_MAX_MEMORY_SIZE=12)\n./tests/handlers/test_exception.py:    @override_settings(DATA_UPLOAD_MAX_NUMBER_FIELDS=2)\n./tests/handlers/tests_custom_error_handlers.py:from django.test import SimpleTestCase, modify_settings, override_settings\n./tests/handlers/tests_custom_error_handlers.py:@override_settings(ROOT_URLCONF='handlers.tests_custom_error_handlers')\n./tests/handlers/tests_custom_error_handlers.py:@modify_settings(MIDDLEWARE={'append': 'handlers.tests_custom_error_handlers.MiddlewareAccessingContent'})\n./tests/handlers/tests.py:    RequestFactory, SimpleTestCase, TransactionTestCase, override_settings,\n./tests/handlers/tests.py:    @override_settings(ROOT_URLCONF='handlers.urls')\n./tests/handlers/tests.py:@override_settings(ROOT_URLCONF='handlers.urls', MIDDLEWARE=[])\n./tests/handlers/tests.py:        old_atomic_requests = connection.settings_dict['ATOMIC_REQUESTS']\n./tests/handlers/tests.py:            connection.settings_dict['ATOMIC_REQUESTS'] = True\n./tests/handlers/tests.py:            connection.settings_dict['ATOMIC_REQUESTS'] = old_atomic_requests\n./tests/handlers/tests.py:        old_atomic_requests = connection.settings_dict['ATOMIC_REQUESTS']\n./tests/handlers/tests.py:            connection.settings_dict['ATOMIC_REQUESTS'] = True\n./tests/handlers/tests.py:            connection.settings_dict['ATOMIC_REQUESTS'] = old_atomic_requests\n./tests/handlers/tests.py:@override_settings(ROOT_URLCONF='handlers.urls')\n./tests/handlers/tests.py:@override_settings(ROOT_URLCONF='handlers.urls')\n./tests/handlers/tests.py:    @override_settings(MIDDLEWARE=['handlers.tests.empty_middleware'])\n./tests/indexes/tests.py:from django.test.utils import override_settings\n./tests/indexes/tests.py:@override_settings(USE_TZ=True)\n./tests/backends/base/test_operations.py:    SimpleTestCase, TestCase, override_settings, skipIfDBFeature,\n./tests/backends/base/test_operations.py:    @override_settings(USE_TZ=False)\n./tests/backends/base/test_creation.py:        test_connection.settings_dict = copy.copy(connections[DEFAULT_DB_ALIAS].settings_dict)\n./tests/backends/base/test_creation.py:        test_connection.settings_dict['NAME'] = prod_name\n./tests/backends/base/test_creation.py:        test_connection.settings_dict['TEST'] = {'NAME': None}\n./tests/backends/base/test_creation.py:        test_connection.settings_dict['TEST'] = {'NAME': test_name}\n./tests/backends/base/test_creation.py:        test_connection.settings_dict['TEST'] = {'NAME': test_name}\n./tests/backends/sqlite/tests.py:    TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n./tests/backends/sqlite/tests.py:        settings_dict = {\n./tests/backends/sqlite/tests.py:        creation = DatabaseWrapper(settings_dict).creation\n./tests/backends/sqlite/tests.py:        self.assertEqual(creation._get_test_db_name(), creation.connection.settings_dict['TEST']['NAME'])\n./tests/backends/sqlite/tests.py:@override_settings(DEBUG=True)\n./tests/backends/sqlite/tests.py:    All tests in this test case are also run with settings.DEBUG=True in\n./tests/backends/sqlite/tests.py:@override_settings(DEBUG=True)\n./tests/backends/oracle/test_creation.py:        return connection.settings_dict['SAVED_PASSWORD']\n./tests/backends/oracle/tests.py:        old_password = connection.settings_dict['PASSWORD']\n./tests/backends/oracle/tests.py:        connection.settings_dict['PASSWORD'] = 'p@ssword'\n./tests/backends/oracle/tests.py:            connection.settings_dict['PASSWORD'] = old_password\n./tests/backends/tests.py:    TestCase, TransactionTestCase, override_settings, skipIfDBFeature,\n./tests/backends/tests.py:@override_settings(DEBUG=True)\n./tests/backends/tests.py:    All tests in this test case are also run with settings.DEBUG=True in\n./tests/backends/tests.py:@override_settings(DEBUG=True)\n./tests/backends/tests.py:        with override_settings(DEBUG=True):\n./tests/backends/tests.py:        with override_settings(DEBUG=True):\n./tests/backends/tests.py:        old_password = connection.settings_dict['PASSWORD']\n./tests/backends/tests.py:        connection.settings_dict['PASSWORD'] = \"fran\u00e7ois\"\n./tests/backends/tests.py:            connection.settings_dict['PASSWORD'] = old_password\n./tests/backends/tests.py:    @override_settings(DEBUG=True)\n./tests/backends/tests.py:    @override_settings(DEBUG=True)\n./tests/backends/tests.py:        with self.settings(TIME_ZONE=None, USE_TZ=False):\n./tests/backends/postgresql/test_creation.py:    def changed_test_settings(self, **kwargs):\n./tests/backends/postgresql/test_creation.py:        settings = connection.settings_dict['TEST']\n./tests/backends/postgresql/test_creation.py:            if name in settings:\n./tests/backends/postgresql/test_creation.py:                saved_values[name] = settings[name]\n./tests/backends/postgresql/test_creation.py:            settings[name] = value\n./tests/backends/postgresql/test_creation.py:                    settings[name] = saved_values[name]\n./tests/backends/postgresql/test_creation.py:                    del settings[name]\n./tests/backends/postgresql/test_creation.py:    def check_sql_table_creation_suffix(self, settings, expected):\n./tests/backends/postgresql/test_creation.py:        with self.changed_test_settings(**settings):\n./tests/backends/postgresql/test_creation.py:    def test_sql_table_creation_suffix_with_none_settings(self):\n./tests/backends/postgresql/test_creation.py:        settings = {'CHARSET': None, 'TEMPLATE': None}\n./tests/backends/postgresql/test_creation.py:        self.check_sql_table_creation_suffix(settings, \"\")\n./tests/backends/postgresql/test_creation.py:        settings = {'CHARSET': 'UTF8'}\n./tests/backends/postgresql/test_creation.py:        self.check_sql_table_creation_suffix(settings, \"WITH ENCODING 'UTF8'\")\n./tests/backends/postgresql/test_creation.py:        settings = {'TEMPLATE': 'template0'}\n./tests/backends/postgresql/test_creation.py:        self.check_sql_table_creation_suffix(settings, 'WITH TEMPLATE \"template0\"')\n./tests/backends/postgresql/test_creation.py:        settings = {'CHARSET': 'UTF8', 'TEMPLATE': 'template0'}\n./tests/backends/postgresql/test_creation.py:        self.check_sql_table_creation_suffix(settings, '''WITH ENCODING 'UTF8' TEMPLATE \"template0\"''')\n./tests/backends/postgresql/test_server_side_cursors.py:            original_value = connection.settings_dict.get(setting)\n./tests/backends/postgresql/test_server_side_cursors.py:            if setting in connection.settings_dict:\n./tests/backends/postgresql/test_server_side_cursors.py:                self.addCleanup(operator.setitem, connection.settings_dict, setting, original_value)\n./tests/backends/postgresql/test_server_side_cursors.py:                self.addCleanup(operator.delitem, connection.settings_dict, setting)\n./tests/backends/postgresql/test_server_side_cursors.py:            connection.settings_dict[setting] = kwargs[setting]\n./tests/backends/postgresql/tests.py:from django.test import TestCase, override_settings\n./tests/backends/postgresql/tests.py:            if self.settings_dict['NAME'] is None:\n./tests/backends/postgresql/tests.py:        self.assertIsNone(nodb_conn.settings_dict['NAME'])\n./tests/backends/postgresql/tests.py:                    'settings_dict',\n./tests/backends/postgresql/tests.py:                    {**connection.settings_dict, 'NAME': 'postgres'},\n./tests/backends/postgresql/tests.py:        self.assertIsNotNone(nodb_conn.settings_dict['NAME'])\n./tests/backends/postgresql/tests.py:        self.assertEqual(nodb_conn.settings_dict['NAME'], connections['other'].settings_dict['NAME'])\n./tests/backends/postgresql/tests.py:        settings = connection.settings_dict.copy()\n./tests/backends/postgresql/tests.py:        settings['NAME'] = 'a' + (max_name_length * 'a')\n./tests/backends/postgresql/tests.py:            \"settings.DATABASES.\"\n./tests/backends/postgresql/tests.py:        ) % (settings['NAME'], max_name_length + 1, max_name_length)\n./tests/backends/postgresql/tests.py:            DatabaseWrapper(settings).get_connection_params()\n./tests/backends/postgresql/tests.py:            # the time zone in new_connection.settings_dict. We can\n./tests/backends/postgresql/tests.py:            with self.settings(TIME_ZONE=new_tz):\n./tests/backends/postgresql/tests.py:        new_connection.settings_dict['AUTOCOMMIT'] = False\n./tests/backends/postgresql/tests.py:        new_connection.settings_dict['OPTIONS']['isolation_level'] = serializable\n./tests/backends/postgresql/tests.py:    @override_settings(DEBUG=True)\n./tests/backends/mysql/test_creation.py:            saved_settings = connection.settings_dict\n./tests/backends/mysql/test_creation.py:            connection.settings_dict = {\n./tests/backends/mysql/test_creation.py:            connection.settings_dict = saved_settings\n./tests/backends/mysql/tests.py:from django.test import TestCase, override_settings\n./tests/backends/mysql/tests.py:@override_settings(DEBUG=True)\n./tests/backends/mysql/tests.py:            new_connection.settings_dict['OPTIONS']['isolation_level'] = self.other_isolation_level\n./tests/backends/mysql/tests.py:            new_connection.settings_dict['OPTIONS']['isolation_level'] = self.other_isolation_level.upper()\n./tests/backends/mysql/tests.py:        # If not specified in settings, the default is read committed.\n./tests/backends/mysql/tests.py:            new_connection.settings_dict['OPTIONS'].pop('isolation_level', None)\n./tests/backends/mysql/tests.py:        new_connection.settings_dict['OPTIONS']['isolation_level'] = 'xxx'\n./tests/db_functions/comparison/test_cast.py:    TestCase, ignore_warnings, override_settings, skipUnlessDBFeature,\n./tests/db_functions/comparison/test_cast.py:    @override_settings(DEBUG=True)\n./tests/db_functions/datetime/test_extract_trunc.py:from django.conf import settings\n./tests/db_functions/datetime/test_extract_trunc.py:    TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n./tests/db_functions/datetime/test_extract_trunc.py:@override_settings(USE_TZ=False)\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        if settings.USE_TZ:\n./tests/db_functions/datetime/test_extract_trunc.py:        tz = pytz.UTC if settings.USE_TZ else None\n./tests/db_functions/datetime/test_extract_trunc.py:@override_settings(USE_TZ=True, TIME_ZONE='UTC')\n./tests/managers_regress/tests.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/managers_regress/tests.py:    @override_settings(TEST_SWAPPABLE_MODEL='managers_regress.Parent')\n./tests/managers_regress/tests.py:    @override_settings(TEST_SWAPPABLE_MODEL='managers_regress.Parent')\n./tests/managers_regress/tests.py:    @override_settings(TEST_SWAPPABLE_MODEL='managers_regress.Parent')\n./tests/admin_changelist/test_date_hierarchy.py:        with self.settings(USE_TZ=True, TIME_ZONE='Asia/Jerusalem'):\n./tests/admin_changelist/tests.py:from django.test import TestCase, override_settings\n./tests/admin_changelist/tests.py:@override_settings(ROOT_URLCONF=\"admin_changelist.urls\")\n./tests/admin_changelist/tests.py:        ModelAdmin settings.\n./tests/admin_changelist/tests.py:@override_settings(ROOT_URLCONF='admin_changelist.urls')\n./tests/runtests.py:    from django.conf import settings\n./tests/runtests.py:        'INSTALLED_APPS': settings.INSTALLED_APPS,\n./tests/runtests.py:        'ROOT_URLCONF': getattr(settings, \"ROOT_URLCONF\", \"\"),\n./tests/runtests.py:        'TEMPLATES': settings.TEMPLATES,\n./tests/runtests.py:        'LANGUAGE_CODE': settings.LANGUAGE_CODE,\n./tests/runtests.py:        'STATIC_URL': settings.STATIC_URL,\n./tests/runtests.py:        'STATIC_ROOT': settings.STATIC_ROOT,\n./tests/runtests.py:        'MIDDLEWARE': settings.MIDDLEWARE,\n./tests/runtests.py:    # Redirect some settings for the duration of these tests.\n./tests/runtests.py:    settings.INSTALLED_APPS = ALWAYS_INSTALLED_APPS\n./tests/runtests.py:    settings.ROOT_URLCONF = 'urls'\n./tests/runtests.py:    settings.STATIC_URL = '/static/'\n./tests/runtests.py:    settings.STATIC_ROOT = os.path.join(TMPDIR, 'static')\n./tests/runtests.py:    settings.TEMPLATES = [{\n./tests/runtests.py:    settings.LANGUAGE_CODE = 'en'\n./tests/runtests.py:    settings.SITE_ID = 1\n./tests/runtests.py:    settings.MIDDLEWARE = ALWAYS_MIDDLEWARE\n./tests/runtests.py:    settings.MIGRATION_MODULES = {\n./tests/runtests.py:    settings.LOGGING = log_config\n./tests/runtests.py:    settings.SILENCED_SYSTEM_CHECKS = [\n./tests/runtests.py:            settings.INSTALLED_APPS.append(CONTRIB_TESTS_TO_APPS[module_name])\n./tests/runtests.py:            settings.INSTALLED_APPS.append(module_label)\n./tests/runtests.py:    # @override_settings(INSTALLED_APPS=...) on all test cases.\n./tests/runtests.py:    if connection.features.gis_enabled and gis not in settings.INSTALLED_APPS:\n./tests/runtests.py:        settings.INSTALLED_APPS.append(gis)\n./tests/runtests.py:    apps.set_installed_apps(settings.INSTALLED_APPS)\n./tests/runtests.py:    # Restore the old settings.\n./tests/runtests.py:        setattr(settings, key, value)\n./tests/runtests.py:    if not hasattr(settings, 'TEST_RUNNER'):\n./tests/runtests.py:        settings.TEST_RUNNER = 'django.test.runner.DiscoverRunner'\n./tests/runtests.py:    TestRunner = get_runner(settings)\n./tests/runtests.py:        sys.executable, __file__, '--settings=%s' % options.settings\n./tests/runtests.py:        '--settings',\n./tests/runtests.py:        help='Python path to settings module, e.g. \"myproject.settings\". If '\n./tests/runtests.py:    if options.settings:\n./tests/runtests.py:        os.environ['DJANGO_SETTINGS_MODULE'] = options.settings\n./tests/runtests.py:        options.settings = os.environ['DJANGO_SETTINGS_MODULE']\n./tests/dates/tests.py:from django.test import TestCase, override_settings\n./tests/dates/tests.py:    @override_settings(USE_TZ=False)\n./tests/settings_tests/tests.py:from django.conf import ENVIRONMENT_VARIABLE, LazySettings, Settings, settings\n./tests/settings_tests/tests.py:    SimpleTestCase, TestCase, TransactionTestCase, modify_settings,\n./tests/settings_tests/tests.py:    override_settings, signals,\n./tests/settings_tests/tests.py:@modify_settings(ITEMS={\n./tests/settings_tests/tests.py:@override_settings(ITEMS=['a', 'c', 'e'], ITEMS_OUTER=[1, 2, 3], TEST='override', TEST_OUTER='outer')\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS, ['b', 'c', 'd'])\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS_OUTER, [1, 2, 3])\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST, 'override')\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST_OUTER, 'outer')\n./tests/settings_tests/tests.py:    @modify_settings(ITEMS={\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS, ['a', 'b', 'e', 'f'])\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS_OUTER, [1, 2, 3])\n./tests/settings_tests/tests.py:    @modify_settings(ITEMS={\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS, ['b', 'd'])\n./tests/settings_tests/tests.py:    @modify_settings(ITEMS={\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS, ['a', 'b', 'd', 'e'])\n./tests/settings_tests/tests.py:    @modify_settings(ITEMS={'remove': ['b', 'd']})\n./tests/settings_tests/tests.py:    @modify_settings(ITEMS={'append': ['b'], 'prepend': ['d']})\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS, ['d', 'c', 'b'])\n./tests/settings_tests/tests.py:    @override_settings(TEST='override2')\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST, 'override2')\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST_OUTER, 'outer')\n./tests/settings_tests/tests.py:@modify_settings(ITEMS={\n./tests/settings_tests/tests.py:@override_settings(ITEMS=['a', 'c', 'e'], TEST='override')\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS, ['b', 'c', 'd'])\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST, 'override')\n./tests/settings_tests/tests.py:    @modify_settings(ITEMS={\n./tests/settings_tests/tests.py:    @override_settings(TEST='override2')\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS, ['a', 'b', 'd', 'e'])\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST, 'override2')\n./tests/settings_tests/tests.py:@override_settings(TEST='override')\n./tests/settings_tests/tests.py:        cls.foo = getattr(settings, 'TEST', 'BUG')\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST, 'override')\n./tests/settings_tests/tests.py:    @override_settings(TEST='override2')\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST, 'override2')\n./tests/settings_tests/tests.py:@modify_settings(ITEMS={'append': 'mother'})\n./tests/settings_tests/tests.py:@override_settings(ITEMS=['father'], TEST='override-parent')\n./tests/settings_tests/tests.py:@modify_settings(ITEMS={'append': ['child']})\n./tests/settings_tests/tests.py:@override_settings(TEST='override-child')\n./tests/settings_tests/tests.py:    def test_override_settings_inheritance(self):\n./tests/settings_tests/tests.py:        self.assertEqual(settings.ITEMS, ['father', 'mother', 'child'])\n./tests/settings_tests/tests.py:        self.assertEqual(settings.TEST, 'override-child')\n./tests/settings_tests/tests.py:        settings.TEST = 'test'\n./tests/settings_tests/tests.py:        self.assertEqual('test', settings.TEST)\n./tests/settings_tests/tests.py:        with self.settings(TEST='override'):\n./tests/settings_tests/tests.py:            self.assertEqual('override', settings.TEST)\n./tests/settings_tests/tests.py:        self.assertEqual('test', settings.TEST)\n./tests/settings_tests/tests.py:        del settings.TEST\n./tests/settings_tests/tests.py:        settings.TEST = 'test'\n./tests/settings_tests/tests.py:        self.assertEqual('test', settings.TEST)\n./tests/settings_tests/tests.py:        with self.settings(TEST='override'):\n./tests/settings_tests/tests.py:            self.assertEqual('override', settings.TEST)\n./tests/settings_tests/tests.py:            settings.TEST = 'test2'\n./tests/settings_tests/tests.py:        self.assertEqual('test', settings.TEST)\n./tests/settings_tests/tests.py:        del settings.TEST\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:        with self.settings(TEST='override'):\n./tests/settings_tests/tests.py:            self.assertEqual('override', settings.TEST)\n./tests/settings_tests/tests.py:            settings.TEST = 'test'\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:    @override_settings(TEST='override')\n./tests/settings_tests/tests.py:        self.assertEqual('override', settings.TEST)\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:        override = override_settings(TEST='override')\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:        self.assertEqual('override', settings.TEST)\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:        # SimpleTestCase can be decorated by override_settings, but not ut.TestCase\n./tests/settings_tests/tests.py:        decorated = override_settings(TEST='override')(SimpleTestCaseSubclass)\n./tests/settings_tests/tests.py:            decorated = override_settings(TEST='override')(UnittestTestCaseSubclass)\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:        with self.settings(TEST='override'):\n./tests/settings_tests/tests.py:    @override_settings(TEST='override')\n./tests/settings_tests/tests.py:    # Regression tests for #10130: deleting settings.\n./tests/settings_tests/tests.py:    def test_settings_delete(self):\n./tests/settings_tests/tests.py:        settings.TEST = 'test'\n./tests/settings_tests/tests.py:        self.assertEqual('test', settings.TEST)\n./tests/settings_tests/tests.py:        del settings.TEST\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:    def test_settings_delete_wrapped(self):\n./tests/settings_tests/tests.py:            delattr(settings, '_wrapped')\n./tests/settings_tests/tests.py:    def test_override_settings_delete(self):\n./tests/settings_tests/tests.py:        Allow deletion of a setting in an overridden settings set (#18824)\n./tests/settings_tests/tests.py:        previous_i18n = settings.USE_I18N\n./tests/settings_tests/tests.py:        previous_l10n = settings.USE_L10N\n./tests/settings_tests/tests.py:        with self.settings(USE_I18N=False):\n./tests/settings_tests/tests.py:            del settings.USE_I18N\n./tests/settings_tests/tests.py:                getattr(settings, 'USE_I18N')\n./tests/settings_tests/tests.py:            del settings.USE_L10N\n./tests/settings_tests/tests.py:                getattr(settings, 'USE_L10N')\n./tests/settings_tests/tests.py:            self.assertNotIn('USE_I18N', dir(settings))\n./tests/settings_tests/tests.py:            self.assertNotIn('USE_L10N', dir(settings))\n./tests/settings_tests/tests.py:        self.assertEqual(settings.USE_I18N, previous_i18n)\n./tests/settings_tests/tests.py:        self.assertEqual(settings.USE_L10N, previous_l10n)\n./tests/settings_tests/tests.py:    def test_override_settings_nested(self):\n./tests/settings_tests/tests.py:        override_settings uses the actual _wrapped attribute at\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST2')\n./tests/settings_tests/tests.py:        inner = override_settings(TEST2='override')\n./tests/settings_tests/tests.py:        with override_settings(TEST='override'):\n./tests/settings_tests/tests.py:            self.assertEqual('override', settings.TEST)\n./tests/settings_tests/tests.py:                self.assertEqual('override', settings.TEST)\n./tests/settings_tests/tests.py:                self.assertEqual('override', settings.TEST2)\n./tests/settings_tests/tests.py:            # inner's __exit__ should have restored the settings of the outer\n./tests/settings_tests/tests.py:            self.assertEqual('override', settings.TEST)\n./tests/settings_tests/tests.py:                getattr(settings, 'TEST2')\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST')\n./tests/settings_tests/tests.py:            getattr(settings, 'TEST2')\n./tests/settings_tests/tests.py:        settings_module = ModuleType('fake_settings_module')\n./tests/settings_tests/tests.py:        sys.modules['fake_settings_module'] = settings_module\n./tests/settings_tests/tests.py:                Settings('fake_settings_module')\n./tests/settings_tests/tests.py:            del sys.modules['fake_settings_module']\n./tests/settings_tests/tests.py:    def test_no_settings_module(self):\n./tests/settings_tests/tests.py:            'Requested setting%s, but settings are not configured. You '\n./tests/settings_tests/tests.py:            'or call settings.configure() before accessing settings.'\n./tests/settings_tests/tests.py:        orig_settings = os.environ[ENVIRONMENT_VARIABLE]\n./tests/settings_tests/tests.py:                settings._setup()\n./tests/settings_tests/tests.py:                settings._setup('TEST')\n./tests/settings_tests/tests.py:            os.environ[ENVIRONMENT_VARIABLE] = orig_settings\n./tests/settings_tests/tests.py:            settings.configure()\n./tests/settings_tests/tests.py:    def test_nonupper_settings_prohibited_in_configure(self):\n./tests/settings_tests/tests.py:    def test_nonupper_settings_ignored_in_default_settings(self):\n./tests/settings_tests/tests.py:    @mock.patch('django.conf.global_settings.TIME_ZONE', 'test')\n./tests/settings_tests/tests.py:            settings._setup()\n./tests/settings_tests/tests.py:        self.old_warn_override_settings = signals.COMPLEX_OVERRIDE_SETTINGS.copy()\n./tests/settings_tests/tests.py:        signals.COMPLEX_OVERRIDE_SETTINGS = self.old_warn_override_settings\n./tests/settings_tests/tests.py:            with override_settings(TEST_WARN='override'):\n./tests/settings_tests/tests.py:                self.assertEqual(settings.TEST_WARN, 'override')\n./tests/settings_tests/tests.py:    @override_settings(SECURE_PROXY_SSL_HEADER=None)\n./tests/settings_tests/tests.py:    @override_settings(SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTOCOL', 'https'))\n./tests/settings_tests/tests.py:    @override_settings(SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTOCOL', 'https'))\n./tests/settings_tests/tests.py:    @override_settings(SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTOCOL', 'https'))\n./tests/settings_tests/tests.py:    @override_settings(SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTOCOL', 'https'))\n./tests/settings_tests/tests.py:        settings_module = ModuleType('fake_settings_module')\n./tests/settings_tests/tests.py:        settings_module.SECRET_KEY = 'foo'\n./tests/settings_tests/tests.py:        sys.modules['fake_settings_module'] = settings_module\n./tests/settings_tests/tests.py:            s = Settings('fake_settings_module')\n./tests/settings_tests/tests.py:            del sys.modules['fake_settings_module']\n./tests/settings_tests/tests.py:        self.assertFalse(settings.is_overridden('ALLOWED_HOSTS'))\n./tests/settings_tests/tests.py:        with override_settings(ALLOWED_HOSTS=[]):\n./tests/settings_tests/tests.py:            self.assertTrue(settings.is_overridden('ALLOWED_HOSTS'))\n./tests/settings_tests/tests.py:    def test_unevaluated_lazysettings_repr(self):\n./tests/settings_tests/tests.py:        lazy_settings = LazySettings()\n./tests/settings_tests/tests.py:        self.assertEqual(repr(lazy_settings), expected)\n./tests/settings_tests/tests.py:    def test_evaluated_lazysettings_repr(self):\n./tests/settings_tests/tests.py:        lazy_settings = LazySettings()\n./tests/settings_tests/tests.py:        lazy_settings.APPEND_SLASH\n./tests/settings_tests/tests.py:        self.assertEqual(repr(lazy_settings), expected)\n./tests/settings_tests/tests.py:    def test_usersettingsholder_repr(self):\n./tests/settings_tests/tests.py:        lazy_settings = LazySettings()\n./tests/settings_tests/tests.py:        lazy_settings.configure(APPEND_SLASH=False)\n./tests/settings_tests/tests.py:        self.assertEqual(repr(lazy_settings._wrapped), expected)\n./tests/settings_tests/tests.py:    def test_settings_repr(self):\n./tests/settings_tests/tests.py:        lazy_settings = Settings(module)\n./tests/settings_tests/tests.py:        self.assertEqual(repr(lazy_settings), expected)\n./tests/settings_tests/tests.py:    Make sure settings that should be lists or tuples throw\n./tests/settings_tests/tests.py:    list_or_tuple_settings = (\n./tests/settings_tests/tests.py:    def test_tuple_settings(self):\n./tests/settings_tests/tests.py:        settings_module = ModuleType('fake_settings_module')\n./tests/settings_tests/tests.py:        settings_module.SECRET_KEY = 'foo'\n./tests/settings_tests/tests.py:        for setting in self.list_or_tuple_settings:\n./tests/settings_tests/tests.py:            setattr(settings_module, setting, ('non_list_or_tuple_value'))\n./tests/settings_tests/tests.py:            sys.modules['fake_settings_module'] = settings_module\n./tests/settings_tests/tests.py:                    Settings('fake_settings_module')\n./tests/settings_tests/tests.py:                del sys.modules['fake_settings_module']\n./tests/settings_tests/tests.py:                delattr(settings_module, setting)\n./tests/settings_tests/tests.py:    The override_settings context manager restore settings if one of the\n./tests/settings_tests/tests.py:        A receiver that fails while certain settings are being changed.\n./tests/settings_tests/tests.py:    def check_settings(self):\n./tests/settings_tests/tests.py:        \"\"\"Assert that settings for these tests aren't present.\"\"\"\n./tests/settings_tests/tests.py:        self.assertFalse(hasattr(settings, 'SETTING_BOTH'))\n./tests/settings_tests/tests.py:        self.assertFalse(hasattr(settings, 'SETTING_ENTER'))\n./tests/settings_tests/tests.py:        self.assertFalse(hasattr(settings, 'SETTING_EXIT'))\n./tests/settings_tests/tests.py:        self.assertFalse(hasattr(settings, 'SETTING_PASS'))\n./tests/settings_tests/tests.py:    def test_override_settings_both(self):\n./tests/settings_tests/tests.py:            with override_settings(SETTING_PASS='BOTH', SETTING_BOTH='BOTH'):\n./tests/settings_tests/tests.py:        self.check_settings()\n./tests/settings_tests/tests.py:        # Two settings were touched, so expect two calls of `spy_receiver`.\n./tests/settings_tests/tests.py:    def test_override_settings_enter(self):\n./tests/settings_tests/tests.py:            with override_settings(SETTING_PASS='ENTER', SETTING_ENTER='ENTER'):\n./tests/settings_tests/tests.py:        self.check_settings()\n./tests/settings_tests/tests.py:        # Two settings were touched, so expect two calls of `spy_receiver`.\n./tests/settings_tests/tests.py:    def test_override_settings_exit(self):\n./tests/settings_tests/tests.py:            with override_settings(SETTING_PASS='EXIT', SETTING_EXIT='EXIT'):\n./tests/settings_tests/tests.py:        self.check_settings()\n./tests/settings_tests/tests.py:        # Two settings were touched, so expect two calls of `spy_receiver`.\n./tests/settings_tests/tests.py:    def test_override_settings_reusable_on_enter(self):\n./tests/settings_tests/tests.py:        Error is raised correctly when reusing the same override_settings\n./tests/settings_tests/tests.py:        @override_settings(SETTING_ENTER='ENTER')\n./tests/settings_tests/test_file_charset.py:from django.conf import FILE_CHARSET_DEPRECATED_MSG, Settings, settings\n./tests/settings_tests/test_file_charset.py:    def test_override_settings_warning(self):\n./tests/settings_tests/test_file_charset.py:            with self.settings(FILE_CHARSET='latin1'):\n./tests/settings_tests/test_file_charset.py:    def test_settings_init_warning(self):\n./tests/settings_tests/test_file_charset.py:        settings_module = ModuleType('fake_settings_module')\n./tests/settings_tests/test_file_charset.py:        settings_module.FILE_CHARSET = 'latin1'\n./tests/settings_tests/test_file_charset.py:        settings_module.SECRET_KEY = 'ABC'\n./tests/settings_tests/test_file_charset.py:        sys.modules['fake_settings_module'] = settings_module\n./tests/settings_tests/test_file_charset.py:                Settings('fake_settings_module')\n./tests/settings_tests/test_file_charset.py:            del sys.modules['fake_settings_module']\n./tests/settings_tests/test_file_charset.py:            settings.FILE_CHARSET\n./tests/settings_tests/test_file_charset.py:            settings.FILE_CHARSET\n./tests/settings_tests/test_file_charset.py:        with self.settings(FILE_CHARSET='latin1'):\n./tests/settings_tests/test_file_charset.py:            self.assertEqual(settings.FILE_CHARSET, 'latin1')\n./tests/settings_tests/test_file_charset.py:            self.assertEqual(settings.FILE_CHARSET, 'latin1')\n./tests/responses/tests.py:from django.conf import settings\n./tests/responses/tests.py:        self.assertEqual(response.charset, settings.DEFAULT_CHARSET)\n./tests/responses/tests.py:        self.assertEqual(response.charset, settings.DEFAULT_CHARSET)\n./tests/responses/tests.py:        self.assertEqual(response.charset, settings.DEFAULT_CHARSET)\n./tests/serializers/tests.py:from django.test import SimpleTestCase, override_settings, skipUnlessDBFeature\n./tests/serializers/tests.py:@override_settings(\n./tests/admin_filters/tests.py:from django.test import RequestFactory, TestCase, override_settings\n./tests/admin_filters/tests.py:    @override_settings(USE_TZ=True)\n./tests/generic_views/test_detail.py:from django.test import TestCase, override_settings\n./tests/generic_views/test_detail.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_base.py:from django.test import RequestFactory, SimpleTestCase, override_settings\n./tests/generic_views/test_base.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_base.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_dates.py:from django.test import TestCase, override_settings, skipUnlessDBFeature\n./tests/generic_views/test_dates.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_dates.py:    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Nairobi')\n./tests/generic_views/test_dates.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_dates.py:    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Nairobi')\n./tests/generic_views/test_dates.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_dates.py:    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Nairobi')\n./tests/generic_views/test_dates.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_dates.py:    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Nairobi')\n./tests/generic_views/test_dates.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_dates.py:    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Nairobi')\n./tests/generic_views/test_dates.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_dates.py:    @override_settings(USE_TZ=True, TIME_ZONE='Africa/Nairobi')\n./tests/generic_views/test_edit.py:from django.test import SimpleTestCase, TestCase, override_settings\n./tests/generic_views/test_edit.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_edit.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_edit.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_edit.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_list.py:from django.test import TestCase, override_settings\n./tests/generic_views/test_list.py:@override_settings(ROOT_URLCONF='generic_views.urls')\n./tests/generic_views/test_list.py:    @override_settings(DEBUG=True)\n./tests/bulk_create/tests.py:    TestCase, override_settings, skipIfDBFeature, skipUnlessDBFeature,\n./tests/bulk_create/tests.py:        with override_settings(DEBUG=True):\n./tests/bulk_create/tests.py:        with override_settings(DEBUG=True):\n./tests/project_template/test_settings.py:        template_settings_py = os.path.join(\n./tests/project_template/test_settings.py:            'settings.py-tpl',\n./tests/project_template/test_settings.py:        test_settings_py = os.path.join(self.temp_dir.name, 'test_settings.py')\n./tests/project_template/test_settings.py:        shutil.copyfile(template_settings_py, test_settings_py)\n./tests/project_template/test_settings.py:            from test_settings import MIDDLEWARE\n./tests/project_template/test_settings.py:        with self.settings(\n./tests/apps/tests.py:from django.test import SimpleTestCase, override_settings\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['apps.apps.BadConfig']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['apps.apps.NotAConfig']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['there is no such app']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['apps.apps.NoSuchApp']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['apps.NoSuchConfig']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['apps.apps.NoSuchConfig']):\n./tests/apps/tests.py:        with self.settings(INSTALLED_APPS=['apps.default_config_app']):\n./tests/apps/tests.py:    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n./tests/apps/tests.py:    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n./tests/apps/tests.py:    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n./tests/apps/tests.py:    @override_settings(INSTALLED_APPS=SOME_INSTALLED_APPS)\n./tests/apps/tests.py:    @override_settings(INSTALLED_APPS=['apps.apps.RelabeledAppsConfig'])\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['apps.apps.PlainAppsConfig', 'apps']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['apps.apps.RelabeledAppsConfig', 'apps']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['import_error_package']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['nsapp']):\n./tests/apps/tests.py:                with self.settings(INSTALLED_APPS=['nsapp']):\n./tests/apps/tests.py:            with self.settings(INSTALLED_APPS=['nsapp.apps.NSAppConfig']):\n./scripts/manage_translations.py:from django.conf import settings\n./scripts/manage_translations.py:    settings.configure()\n\n(Open file: n/a)\n(Current directory: /django__django)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "It looks like the issue is related to raising Http404 in a path converter's to_python() method. To reproduce this, we'll need to:\n\n1. Create a custom path converter that raises Http404 in its to_python() method\n2. Configure a URL pattern that uses this converter \n3. Make a request to a URL that will trigger the Http404\n4. Check that we get the unhelpful error message\n\nLet's start by creating a new file to define the custom path converter:\n\n<command>\ncreate tests/path_converter_tests.py\n</command>",
      "thought": "It looks like the issue is related to raising Http404 in a path converter's to_python() method. To reproduce this, we'll need to:\n\n1. Create a custom path converter that raises Http404 in its to_python() method\n2. Configure a URL pattern that uses this converter \n3. Make a request to a URL that will trigger the Http404\n4. Check that we get the unhelpful error message\n\nLet's start by creating a new file to define the custom path converter:",
      "action": "create tests/path_converter_tests.py",
      "agent": "primary"
    },
    {
      "role": "user",
      "content": "[File: /django__django/tests/path_converter_tests.py (1 lines total)]\n1:\n\n(Open file: /django__django/tests/path_converter_tests.py)\n(Current directory: /django__django)\nbash-$",
      "agent": "primary"
    },
    {
      "role": "assistant",
      "content": "Exit due to cost limit",
      "thought": "Exit due to cost limit",
      "action": "exit_cost",
      "agent": "primary"
    }
  ],
  "info": {
    "exit_status": "submitted (exit_cost)",
    "submission": "\ndiff --git a/tests/path_converter_tests.py b/tests/path_converter_tests.py\nnew file mode 100644\nindex 0000000000..8b13789179\n--- /dev/null\n+++ b/tests/path_converter_tests.py\n@@ -0,0 +1 @@\n+\n",
    "model_stats": {
      "total_cost": 360.5222549999992,
      "instance_cost": 4.754895,
      "tokens_sent": 312188,
      "tokens_received": 961,
      "api_calls": 9
    }
  }
}