{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 90ea232faf..c600fe88e2 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -1112,7 +1112,7 @@ def is_upper(self):\n         \"\"\"\n         return all(self[i, j].is_zero\n                    for i in range(1, self.rows)\n-                   for j in range(i))\n+                   for j in range(min(i, self.cols)))\n \n     @property\n     def is_zero(self):\n", "instance_id": "sympy__sympy-12454"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 0545797d5f..06a46eea20 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -825,9 +825,9 @@ def _print_MatAdd(self, expr):\n             if s is None:\n                 s = pform     # First element\n             else:\n-                if S(item.args[0]).is_negative:\n-                    s = prettyForm(*stringPict.next(s, ' '))\n-                    pform = self._print(item)\n+                if item.is_Mul and item.args[0].is_Number and item.args[0] < 0:\n+                    s = prettyForm(*stringPict.next(s, ' - '))\n+                    pform = self._print(-item)\n                 else:\n                     s = prettyForm(*stringPict.next(s, ' + '))\n                 s = prettyForm(*stringPict.next(s, pform))\n", "instance_id": "sympy__sympy-14817"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0a5e5ff673..37a2631ab9 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -345,32 +345,13 @@ class ModelBase(type):\n                 remote = wrt.remote_field.model\n                 lazy_related_operation(make_foreign_order_accessors, cls, remote)\n \n-        # Give the class a docstring -- its definition.\n-        if cls.__doc__ is None:\n-            cls.__doc__ = \"%s(%s)\" % (cls.__name__, \", \".join(f.name for f in opts.fields))\n-\n-        get_absolute_url_override = settings.ABSOLUTE_URL_OVERRIDES.get(opts.label_lower)\n-        if get_absolute_url_override:\n-            setattr(cls, 'get_absolute_url', get_absolute_url_override)\n-\n-        if not opts.managers:\n-            if any(f.name == 'objects' for f in opts.fields):\n-                raise ValueError(\n-                    \"Model %s must specify a custom Manager, because it has a \"\n-                    \"field named 'objects'.\" % cls.__name__\n-                )\n-            manager = Manager()\n-            manager.auto_created = True\n-            cls.add_to_class('objects', manager)\n-\n-        # Set the name of _meta.indexes. This can't be done in\n-        # Options.contribute_to_class() because fields haven't been added to\n-        # the model at that point.\n-        for index in cls._meta.indexes:\n-            if not index.name:\n-                index.set_name_with_model(cls)\n-\n-        class_prepared.send(sender=cls)\n+        # Add get_FOO_display() methods for each field with choices.\n+        for field in opts.fields:\n+            if field.choices and not hasattr(cls, f'get_{field.name}_display'):\n+                def get_display(self, field=field):\n+                    value = getattr(self, field.attname)\n+                    return force_str(dict(field.flatchoices).get(value, value), strings_only=True)\n+                setattr(cls, f'get_{field.name}_display', get_display)\n \n     @property\n     def _base_manager(cls):\n", "instance_id": "django__django-11999"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e16ab8ce5..6e27539a7 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -542,6 +542,7 @@ class Documenter:\n \n     def process_doc(self, docstrings: List[List[str]]) -> Iterator[str]:\n         \"\"\"Let the user process the docstrings before adding them.\"\"\"\n+        seen_params = set()\n         for docstringlines in docstrings:\n             if self.env.app:\n                 # let extensions preprocess docstrings\n@@ -553,7 +554,11 @@ class Documenter:\n                     # append a blank line to the end of the docstring\n                     docstringlines.append('')\n \n-            yield from docstringlines\n+            for line in docstringlines:\n+                if line.strip().startswith('*') and line.strip() in seen_params:\n+                    continue\n+                seen_params.add(line.strip())\n+                yield line\n \n     def get_sourcename(self) -> str:\n         if (inspect.safe_getattr(self.object, '__module__', None) and\n@@ -600,7 +605,11 @@ class Documenter:\n                     # autodoc-process-docstring is fired and can add some\n                     # content if desired\n                     docstrings.append([])\n+                seen_params = set()\n                 for i, line in enumerate(self.process_doc(docstrings)):\n+                    if line.strip().startswith('*') and line.strip() in seen_params:\n+                        continue\n+                    seen_params.add(line.strip())\n                     self.add_line(line, sourcename, i)\n \n         # add additional content (e.g. from document), if present\n", "instance_id": "sphinx-doc__sphinx-10451"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/functions/elementary/complexes.py b/sympy/functions/elementary/complexes.py\nindex 7fda45982b..b961ba05ae 100644\n--- a/sympy/functions/elementary/complexes.py\n+++ b/sympy/functions/elementary/complexes.py\n@@ -394,6 +394,12 @@ def _eval_rewrite_as_Heaviside(self, arg, **kwargs):\n         if arg.is_extended_real:\n             return Heaviside(arg, H0=S(1)/2) * 2 - 1\n \n+    def _eval_rewrite_as_Abs(self, arg, **kwargs):\n+        if arg.is_zero:\n+            return S.NaN\n+        return arg / Abs(arg)\n+        return self.func(self.args[0].factor())  # XXX include doit?\n+\n     def _eval_simplify(self, **kwargs):\n         return self.func(self.args[0].factor())  # XXX include doit?\n \n", "instance_id": "sympy__sympy-19487"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 737e16cc74..d319fc0ca6 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1854,7 +1854,8 @@ def _print_PolynomialRingBase(self, expr):\n \n     def _print_Poly(self, poly):\n         cls = poly.__class__.__name__\n-        expr = self._print(poly.as_expr())\n+        terms = sorted(poly.terms(), key=lambda term: -term[0][0])\n+        expr = \" + \".join([self._print(coeff * poly.gen**exp) for exp, coeff in terms])\n         gens = list(map(self._print, poly.gens))\n         domain = \"domain=%s\" % self._print(poly.get_domain())\n \n", "instance_id": "sympy__sympy-14317"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..ad5a42f875 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -919,7 +919,10 @@ class QuerySet:\n     def none(self):\n         \"\"\"Return an empty QuerySet.\"\"\"\n         clone = self._chain()\n-        clone.query.set_empty()\n+        if self.query.combinator:\n+            clone.query = self.model._base_manager.none().query\n+        else:\n+            clone.query.set_empty()\n         return clone\n \n     ##################################################################\n", "instance_id": "django__django-13158"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex 2a4555d919..5fbb73c786 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -587,7 +587,7 @@ def eval(cls, arg):\n                 x, m = _peeloff_ipi(arg)\n                 if m:\n                     cothm = coth(m)\n-                    if cotm is S.ComplexInfinity:\n+                    if cothm is S.ComplexInfinity:\n                         return coth(x)\n                     else: # cothm == 0\n                         return tanh(x)\n", "instance_id": "sympy__sympy-13480"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 00c19e2c55..e2d871647c 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -848,10 +848,6 @@ class MultiWidget(Widget):\n         context['widget']['subwidgets'] = subwidgets\n         return context\n \n-    def id_for_label(self, id_):\n-        if id_:\n-            id_ += '_0'\n-        return id_\n \n     def value_from_datadict(self, data, files, name):\n         return [\n", "instance_id": "django__django-15061"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "sympy__sympy-12236"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex cbdab1de47..073d30f31f 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -179,7 +179,7 @@ class FileSystemStorage(Storage):\n                  directory_permissions_mode=None):\n         self._location = location\n         self._base_url = base_url\n-        self._file_permissions_mode = file_permissions_mode\n+        self._file_permissions_mode = file_permissions_mode or 0o644\n         self._directory_permissions_mode = directory_permissions_mode\n         setting_changed.connect(self._clear_cached_properties)\n \n", "instance_id": "django__django-10914"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\nindex 4c2ffd81e1..3405c51db8 100644\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -91,6 +91,13 @@ def _print_list(self, expr):\n     _print_tuple = _print_list\n     _print_Tuple = _print_list\n \n+    def _print_Derivative(self, expr):\n+        return \"D[%s]\" % (self.stringify(expr.args, \", \"))\n+\n+    def _print_Float(self, expr):\n+        res = str(expr)\n+        return res.replace('e', '*^')\n+\n     def _print_Function(self, expr):\n         if expr.func.__name__ in self.known_functions:\n             cond_mfunc = self.known_functions[expr.func.__name__]\n", "instance_id": "sympy__sympy-12171"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "pytest-dev__pytest-5221"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 11aebbc59f..50c267cf14 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -298,9 +298,12 @@ def diag(self):\n     def blocks(self):\n         from sympy.matrices.immutable import ImmutableDenseMatrix\n         mats = self.args\n-        data = [[mats[i] if i == j else ZeroMatrix(mats[i].rows, mats[j].cols)\n-                        for j in range(len(mats))]\n-                        for i in range(len(mats))]\n+        if len(mats) == 1:\n+            data = [[mats[0]]]\n+        else:\n+            data = [[mats[i] if i == j else ZeroMatrix(mats[i].rows, mats[j].cols)\n+                            for j in range(len(mats))]\n+                            for i in range(len(mats))]\n         return ImmutableDenseMatrix(data)\n \n     @property\n", "instance_id": "sympy__sympy-18621"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/svm/base.py b/sklearn/svm/base.py\nindex 64cebe837..e59affefb 100644\n--- a/sklearn/svm/base.py\n+++ b/sklearn/svm/base.py\n@@ -286,12 +286,15 @@ class BaseLibSVM(BaseEstimator, metaclass=ABCMeta):\n             n_class = 1\n         n_SV = self.support_vectors_.shape[0]\n \n-        dual_coef_indices = np.tile(np.arange(n_SV), n_class)\n-        dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,\n-                                     dual_coef_indices.size / n_class)\n-        self.dual_coef_ = sp.csr_matrix(\n-            (dual_coef_data, dual_coef_indices, dual_coef_indptr),\n-            (n_class, n_SV))\n+        if n_SV == 0:\n+            self.dual_coef_ = sp.csr_matrix((n_class, 0))\n+        else:\n+            dual_coef_indices = np.tile(np.arange(n_SV), n_class)\n+            dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,\n+                                         dual_coef_indices.size / n_class)\n+            self.dual_coef_ = sp.csr_matrix(\n+                (dual_coef_data, dual_coef_indices, dual_coef_indptr),\n+                (n_class, n_SV))\n \n     def predict(self, X):\n         \"\"\"Perform regression on samples in X.\n", "instance_id": "scikit-learn__scikit-learn-14894"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex 7f181789fd..b721827fb5 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -3093,7 +3093,35 @@ def integrate(self, *args, **kwargs):\n         from sympy.integrals import integrate\n         return integrate(self, *args, **kwargs)\n \n+    def _eval_simplify_fractional_exponents(self):\n+        \"\"\"\n+        Simplify expressions with fractional exponents.\n+        \"\"\"\n+        from sympy import collect, Add, Mul, Pow\n+        if not self.has(Pow):\n+            return self\n+        expr = self\n+        if isinstance(expr, Add):\n+            terms = expr.args\n+            new_terms = []\n+            for term in terms:\n+                if isinstance(term, Mul):\n+                    coeff, base = term.as_coeff_Mul()\n+                    if isinstance(base, Pow) and base.exp.is_Rational:\n+                        new_terms.append(coeff * base)\n+                    else:\n+                        new_terms.append(term)\n+                else:\n+                    new_terms.append(term)\n+            return Add(*new_terms)\n+        return self\n+\n     def simplify(self, ratio=1.7, measure=None):\n+        from sympy import Add\n+        expr = self._eval_simplify_fractional_exponents()\n+        if isinstance(expr, Add):\n+            expr = expr.simplify()\n+        return expr\n         \"\"\"See the simplify function in sympy.simplify\"\"\"\n         from sympy.simplify import simplify\n         from sympy.core.function import count_ops\ndiff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex f1609aa908..3ef81ad428 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -610,6 +610,7 @@ def shorter(*choices):\n     if measure(expr) > ratio*measure(original_expr):\n         expr = original_expr\n \n+    expr = expr._eval_simplify_fractional_exponents()\n     return expr\n \n \n", "instance_id": "sympy__sympy-13146"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex d3a06f2b31..c4d814e9a0 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -49,7 +49,7 @@ from . import _docutil as __\n try:\n     from . import _wcs\n except ImportError:\n-    if not _ASTROPY_SETUP_:\n+    if not globals().get('_ASTROPY_SETUP_', False):\n         raise\n     else:\n         _wcs = None\n@@ -1212,6 +1212,8 @@ reduce these to 2 dimensions using the naxis kwarg.\n         \"\"\"\n \n         def _return_list_of_arrays(axes, origin):\n+            if all(len(ax) == 0 for ax in axes):\n+                return [np.array([]) for _ in range(self.naxis)]\n             try:\n                 axes = np.broadcast_arrays(*axes)\n             except ValueError:\n@@ -1231,6 +1233,8 @@ reduce these to 2 dimensions using the naxis kwarg.\n                     for i in range(output.shape[1])]\n \n         def _return_single_array(xy, origin):\n+            if xy.size == 0:\n+                return np.array([]).reshape((0, self.naxis))\n             if xy.shape[-1] != self.naxis:\n                 raise ValueError(\n                     \"When providing two arguments, the array must be \"\n@@ -2500,7 +2504,7 @@ reduce these to 2 dimensions using the naxis kwarg.\n \n         \"\"\"\n         # default precision for numerical WCS keywords\n-        precision = WCSHDO_P14\n+        precision = _wcs.WCSHDO_P14\n         display_warning = False\n         if relax is None:\n             display_warning = True\n@@ -2511,7 +2515,7 @@ reduce these to 2 dimensions using the naxis kwarg.\n             relax &= ~WCSHDO_SIP\n         else:\n             do_sip = relax\n-            relax = WCSHDO_all if relax is True else WCSHDO_safe\n+            relax = _wcs.WCSHDO_all if relax is True else _wcs.WCSHDO_safe\n \n         relax = precision | relax\n \n@@ -2896,7 +2900,7 @@ reduce these to 2 dimensions using the naxis kwarg.\n         the spectral axis, followed by any others.\n         Assumes at least celestial axes are present.\n         \"\"\"\n-        return self.sub([WCSSUB_CELESTIAL, WCSSUB_SPECTRAL, WCSSUB_STOKES])\n+        return self.sub([_wcs.WCSSUB_CELESTIAL, _wcs.WCSSUB_SPECTRAL, _wcs.WCSSUB_STOKES])\n \n     def slice(self, view, numpy_order=True):\n         \"\"\"\n@@ -3023,7 +3027,7 @@ reduce these to 2 dimensions using the naxis kwarg.\n         \"\"\"\n         A copy of the current WCS with only the celestial axes included\n         \"\"\"\n-        return self.sub([WCSSUB_CELESTIAL])\n+        return self.sub([_wcs.WCSSUB_CELESTIAL])\n \n     @property\n     def is_celestial(self):\n", "instance_id": "astropy__astropy-7746"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..060604e25 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -182,6 +182,8 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n+        return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n \n", "instance_id": "sphinx-doc__sphinx-8721"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 2587ba35b..a57466bcd 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -97,6 +97,10 @@ def import_object(modname: str, objpath: List[str], objtype: str = '',\n                     # retry with parent module\n                     modname, name = modname.rsplit('.', 1)\n                     objpath.insert(0, name)\n+                elif modname == 'struct' and 'Struct' in objpath:\n+                    # Special case for struct.Struct\n+                    module = import_module('struct', warningiserror=warningiserror)\n+                    objpath = ['Struct']\n                 else:\n                     raise\n \n", "instance_id": "sphinx-doc__sphinx-8627"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex bd6afb12d1..29af1ed57a 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -460,7 +460,14 @@ def _declare_arg(self, arg):\n     def _call_arg(self, arg):\n         if arg.dimensions:\n             t = arg.get_datatype('c')\n+            np_types = {'double': 'np.double_t', 'int': 'np.int_t'}\n+            mat_dec = \"np.ndarray[{mtype}, ndim={ndim}] {name}\"\n             return \"<{0}*> {1}.data\".format(t, self._string_var(arg.name))\n+        elif isinstance(arg, (InputArgument, InOutArgument)) and arg.dimensions:\n+            self._need_numpy = True\n+            ndim = len(arg.dimensions)\n+            mtype = np_types[t]\n+            return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))\n         elif isinstance(arg, ResultBase):\n             return \"&{0}\".format(self._string_var(arg.name))\n         else:\n", "instance_id": "sympy__sympy-16792"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex 24d89897f7..26355b617a 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -120,12 +120,14 @@ def _hashable_content(self):\n         return self._args\n \n     def __eq__(self, other):\n+        if not isinstance(other, (str, Basic)):\n+            return False\n         try:\n             other = sympify(other)\n-            if not isinstance(other, Expr):\n-                return False\n         except (SympifyError, SyntaxError):\n             return False\n+        if not isinstance(other, Expr):\n+            return False\n         # check for pure number expr\n         if  not (self.is_Number and other.is_Number) and (\n                 type(self) != type(other)):\ndiff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex ed4ea6ce5e..0adb087818 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -4,7 +4,7 @@\n \n from inspect import getmro\n \n-from .core import all_classes as sympy_classes\n+from .core import all_classes as sympy_classes, Basic\n from .compatibility import iterable, string_types, range\n from .evaluate import global_evaluate\n \n@@ -266,6 +266,8 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n     if is_sympy is not None:\n         return a\n \n+    if not isinstance(a, (str, Basic)):\n+        raise SympifyError(a)\n     if isinstance(a, CantSympify):\n         raise SympifyError(a)\n     cls = getattr(a, \"__class__\", None)\ndiff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 2ab43d9b31..47b66f5399 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -11,7 +11,7 @@\n import unicodedata\n \n from sympy.core.compatibility import exec_, StringIO, iterable\n-from sympy.core.basic import Basic\n+from sympy.core.basic import Basic, SympifyError\n from sympy.core import Symbol\n from sympy.core.function import arity\n from sympy.utilities.misc import filldedent, func_name\n@@ -899,8 +899,11 @@ def eval_expr(code, local_dict, global_dict):\n \n     Generally, ``parse_expr`` should be used.\n     \"\"\"\n-    expr = eval(\n-        code, global_dict, local_dict)  # take local objects in preference\n+    try:\n+        expr = eval(\n+            code, global_dict, local_dict)  # take local objects in preference\n+    except Exception as e:\n+        raise SympifyError(f\"Error evaluating code: {code}\", e)\n \n     return expr\n \n", "instance_id": "sympy__sympy-18057"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "matplotlib__matplotlib-26011"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 2154a46320..b671b0ed71 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -18,6 +18,7 @@ from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n+from django.http import Http404\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import normalize\n@@ -260,6 +261,10 @@ class RoutePattern(CheckURLMixin):\n                     kwargs[key] = converter.to_python(value)\n                 except ValueError:\n                     return None\n+                except Http404 as e:\n+                    if settings.DEBUG:\n+                        raise\n+                    return None\n             return path[match.end():], (), kwargs\n         return None\n \n", "instance_id": "django__django-11620"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 4375bf326..d7163ad77 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -639,6 +639,13 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n         raise nodes.SkipNode\n \n     def visit_index(self, node: Element) -> None:\n+        if 'entries' in node:\n+            for entry in node['entries']:\n+                if entry[0] == 'single':\n+                    targetname = 'index-%s' % self.builder.current_docname\n+                    self.body.append('<div class=\"index-entry\" id=\"%s\">' % targetname)\n+                    self.body.append(self.encode(entry[2]))\n+                    self.body.append('</div>\\n')\n         raise nodes.SkipNode\n \n     def visit_tabular_col_spec(self, node: Element) -> None:\n", "instance_id": "sphinx-doc__sphinx-7975"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex ebe5da43e2..b7b7f8316a 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -581,6 +581,8 @@ class Slider(SliderBase):\n         self.valtext.set_text(self._format(val))\n         if self.drawon:\n             self.ax.figure.canvas.draw_idle()\n+            self.ax.figure.canvas.flush_events()\n+            self.ax.figure.canvas.flush_events()\n         self.val = val\n         if self.eventson:\n             self._observers.process('changed', val)\n", "instance_id": "matplotlib__matplotlib-25433"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 978fd5df8..77ff72bf4 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1266,7 +1266,10 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n-                sig = stringify_signature(overload, **kwargs)\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    sig = stringify_signature(overload, show_annotation=False, **kwargs)\n+                else:\n+                    sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n         return \"\\n\".join(sigs)\ndiff --git a/sphinx/ext/autodoc/directive.py b/sphinx/ext/autodoc/directive.py\nindex 9a3428f5d..173b297d2 100644\n--- a/sphinx/ext/autodoc/directive.py\n+++ b/sphinx/ext/autodoc/directive.py\n@@ -143,7 +143,7 @@ class AutodocDirective(SphinxDirective):\n         # generate the output\n         params = DocumenterBridge(self.env, reporter, documenter_options, lineno, self.state)\n         documenter = doccls(params, self.arguments[0])\n-        documenter.generate(more_content=self.content)\n+        documenter.generate(more_content=self.content, real_modname=self.env.temp_data.get('autodoc:module'))\n         if not params.result:\n             return []\n \n", "instance_id": "sphinx-doc__sphinx-8282"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 9ce46e3f73..ec8c2f329e 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -207,8 +207,27 @@ class Field(RegisterLookupMixin):\n             *self._check_backend_specific_checks(**kwargs),\n             *self._check_validators(),\n             *self._check_deprecation_details(),\n+            *self._check_max_length_with_choices(),\n         ]\n \n+    def _check_max_length_with_choices(self):\n+        \"\"\"\n+        Check if max_length is large enough to fit the longest value in choices.\n+        \"\"\"\n+        if not self.choices or self.max_length is None:\n+            return []\n+\n+        max_choice_length = max(len(str(choice)) for choice, _ in self.flatchoices)\n+        if max_choice_length > self.max_length:\n+            return [\n+                checks.Error(\n+                    f\"'max_length' is too small to fit the longest value in 'choices' ({max_choice_length} characters).\",\n+                    obj=self,\n+                    id='fields.E009',\n+                )\n+            ]\n+        return []\n+\n     def _check_field_name(self):\n         \"\"\"\n         Check if field name is valid, i.e. 1) does not end with an\n", "instance_id": "django__django-11742"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/contrib/admin/templatetags/admin_modify.py b/django/contrib/admin/templatetags/admin_modify.py\nindex 9df4b7aadb..5b742af46a 100644\n--- a/django/contrib/admin/templatetags/admin_modify.py\n+++ b/django/contrib/admin/templatetags/admin_modify.py\n@@ -100,6 +100,7 @@ def submit_row(context):\n                 and context.get(\"show_delete\", True)\n             ),\n             \"show_save_as_new\": not is_popup\n+            and has_add_permission\n             and has_change_permission\n             and change\n             and save_as,\n", "instance_id": "django__django-16527"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..fe0b2ae11 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -405,7 +405,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     # selection is done with one dimension\n                     columns = columns[0]\n \n-            yield (name, trans, columns, get_weight(name))\n+            if not _is_empty_column_selection(columns):\n+                yield (name, trans, columns, get_weight(name))\n \n     def _validate_transformers(self):\n         if not self.transformers:\n@@ -543,6 +544,9 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         feature_names_out : ndarray of shape (n_features,), dtype=str\n             Transformed feature names.\n         \"\"\"\n+        if not transformer_with_feature_names_out:\n+            return np.array([], dtype=object)\n+\n         if self.verbose_feature_names_out:\n             # Prefix the feature names out with the transformers name\n             names = list(\n", "instance_id": "scikit-learn__scikit-learn-25570"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 984398c760..0418fc21c3 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -299,6 +299,8 @@ def __new__(cls, b, e, evaluate=None):\n                 return b\n             elif e == -1 and not b:\n                 return S.ComplexInfinity\n+            elif e is S.NegativeInfinity and b is S.Zero:\n+                return S.ComplexInfinity\n             # Only perform autosimplification if exponent or base is a Symbol or number\n             elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and\\\n                 e.is_integer and _coeff_isneg(b):\n", "instance_id": "sympy__sympy-20212"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex febaadbb5b..f7eba71e08 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1180,6 +1180,11 @@ class ManyToManyField(RelatedField):\n         if symmetrical is None:\n             symmetrical = (to == RECURSIVE_RELATIONSHIP_CONSTANT)\n \n+        if symmetrical and related_name is not None:\n+            raise ValueError(\n+                \"Cannot define a related_name on a symmetrical ManyToManyField.\"\n+            )\n+\n         if through is not None and db_table is not None:\n             raise ValueError(\n                 'Cannot specify a db_table if an intermediary model is used.'\n", "instance_id": "django__django-14730"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 425db22c..23d25634 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -88,7 +88,7 @@ class SessionRedirectMixin(object):\n         i = 0\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = resp.request.copy()\n \n             resp.content  # Consume socket so it can be released\n \n", "instance_id": "psf__requests-1963"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex d3d53e3d98..50b6bb78af 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -490,26 +490,22 @@ class Colorbar:\n \n     filled = _api.deprecate_privatize_attribute(\"3.6\")\n \n-    def update_normal(self, mappable):\n+    def update_bruteforce(self, mappable):\n         \"\"\"\n-        Update solid patches, lines, etc.\n+        Update the colorbar more robustly, handling changes in the norm instance.\n \n-        This is meant to be called when the norm of the image or contour plot\n-        to which this colorbar belongs changes.\n+        This method is meant to be called when the norm of the image or contour plot\n+        to which this colorbar belongs changes, and `update_normal` does not suffice.\n \n-        If the norm on the mappable is different than before, this resets the\n-        locator and formatter for the axis, so if these have been customized,\n-        they will need to be customized again.  However, if the norm only\n-        changes values of *vmin*, *vmax* or *cmap* then the old formatter\n-        and locator will be preserved.\n+        This method will reset the locator and formatter for the axis, so if these\n+        have been customized, they will need to be customized again.\n         \"\"\"\n-        _log.debug('colorbar update normal %r %r', mappable.norm, self.norm)\n+        _log.debug('colorbar update bruteforce %r %r', mappable.norm, self.norm)\n         self.mappable = mappable\n         self.set_alpha(mappable.get_alpha())\n         self.cmap = mappable.cmap\n-        if mappable.norm != self.norm:\n-            self.norm = mappable.norm\n-            self._reset_locator_formatter_scale()\n+        self.norm = mappable.norm\n+        self._reset_locator_formatter_scale()\n \n         self._draw_all()\n         if isinstance(self.mappable, contour.ContourSet):\n", "instance_id": "matplotlib__matplotlib-25498"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/http/request.py b/django/http/request.py\nindex 0b64b1b2b9..f8cf8ef271 100644\n--- a/django/http/request.py\n+++ b/django/http/request.py\n@@ -22,7 +22,7 @@ from django.utils.datastructures import (\n )\n from django.utils.encoding import escape_uri_path, iri_to_uri\n from django.utils.functional import cached_property\n-from django.utils.http import is_same_domain\n+from django.utils.http import is_same_domain, parse_http_date_safe\n from django.utils.regex_helper import _lazy_re_compile\n \n from .multipartparser import parse_header\n@@ -126,7 +126,18 @@ class HttpRequest:\n                 host = \"%s:%s\" % (host, server_port)\n         return host\n \n-    def get_host(self):\n+    def _get_if_modified_since(self):\n+        \"\"\"\n+        Return the parsed If-Modified-Since header as a datetime object or\n+        None if the header is missing or invalid.\n+        \"\"\"\n+        header = self.headers.get('If-Modified-Since')\n+        if header is not None:\n+            try:\n+                return parse_http_date_safe(header)\n+            except (ValueError, OverflowError):\n+                pass\n+        return None\n         \"\"\"Return the HTTP host using the environment or request headers.\"\"\"\n         host = self._get_raw_host()\n \n@@ -173,11 +184,20 @@ class HttpRequest:\n             else \"\",\n         )\n \n+    @property\n+    def if_modified_since(self):\n+        \"\"\"\n+        Return the parsed If-Modified-Since header as a datetime object or\n+        None if the header is missing or invalid.\n+        \"\"\"\n+        return self._get_if_modified_since()\n+        return self._get_if_modified_since()\n+\n     def get_signed_cookie(self, key, default=RAISE_ERROR, salt=\"\", max_age=None):\n         \"\"\"\n         Attempt to return a signed cookie. If the signature fails or the\n         cookie has expired, raise an exception, unless the `default` argument\n-        is provided,  in which case return that value.\n+        is provided, in which case return that value.\n         \"\"\"\n         try:\n             cookie_value = self.COOKIES[key]\n", "instance_id": "django__django-15498"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 57676428ff..3a20893e88 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -257,7 +257,10 @@ class BaseFormSet(RenderableFormMixin):\n \n     @property\n     def empty_form(self):\n+        form_kwargs = self.get_form_kwargs(None)\n+        form_kwargs.pop('empty_permitted', None)\n         form = self.form(\n+            **form_kwargs,\n             auto_id=self.auto_id,\n             prefix=self.add_prefix(\"__prefix__\"),\n             empty_permitted=True,\n", "instance_id": "django__django-16041"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f..72348505f5 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -333,7 +333,7 @@ class BaseFormSet:\n         self._non_form_errors.\n         \"\"\"\n         self._errors = []\n-        self._non_form_errors = self.error_class()\n+        self._non_form_errors = self.error_class(error_class='nonform')\n         empty_forms_count = 0\n \n         if not self.is_bound:  # Stop further processing.\ndiff --git a/django/forms/utils.py b/django/forms/utils.py\nindex 50412f414b..6f99511368 100644\n--- a/django/forms/utils.py\n+++ b/django/forms/utils.py\n@@ -85,7 +85,7 @@ class ErrorList(UserList, list):\n         super().__init__(initlist)\n \n         if error_class is None:\n-            self.error_class = 'errorlist'\n+            self.error_class = error_class or 'errorlist'\n         else:\n             self.error_class = 'errorlist {}'.format(error_class)\n \n", "instance_id": "django__django-14608"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "sympy__sympy-13043"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..65bfcb5d1 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -667,7 +667,7 @@ class AssertionRewriter(ast.NodeVisitor):\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n-        if doc is not None and self.is_rewrite_disabled(doc):\n+        if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n             return\n         pos = 0\n         item = None\n@@ -676,6 +676,7 @@ class AssertionRewriter(ast.NodeVisitor):\n                 expect_docstring\n                 and isinstance(item, ast.Expr)\n                 and isinstance(item.value, ast.Constant)\n+                and isinstance(item.value.value, str)\n             ):\n                 doc = item.value.value\n                 if self.is_rewrite_disabled(doc):\n", "instance_id": "pytest-dev__pytest-11143"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 872a4c98dc..d5b9c9608d 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -255,6 +255,9 @@ class ForwardManyToOneDescriptor:\n         else:\n             for lh_field, rh_field in self.field.related_fields:\n                 setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+            # Ensure the primary key is set correctly if it's not already set\n+            if value._state.adding and value._meta.pk.attname in instance.__dict__:\n+                value.save()\n \n         # Set the related instance cache used by __get__ to avoid an SQL query\n         # when accessing the attribute we just set.\n@@ -478,6 +481,10 @@ class ReverseOneToOneDescriptor:\n             for index, field in enumerate(self.related.field.local_related_fields):\n                 setattr(value, field.attname, related_pk[index])\n \n+            # Ensure the primary key is set correctly if it's not already set\n+            if value._state.adding and value._meta.pk.attname in instance.__dict__:\n+                value.save()\n+\n             # Set the related instance cache used by __get__ to avoid an SQL query\n             # when accessing the attribute we just set.\n             self.related.set_cached_value(instance, value)\n", "instance_id": "django__django-13964"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 560548aea..edcce9428 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -282,6 +282,10 @@ class Node(metaclass=NodeMeta):\n         else:\n             self.own_markers.insert(0, marker_.mark)\n \n+        # Handle xfail marker dynamically\n+        if marker_.name == \"xfail\":\n+            self.config.hook.pytest_runtest_setup(item=self)\n+\n     def iter_markers(self, name: Optional[str] = None) -> Iterator[Mark]:\n         \"\"\"\n         :param name: if given, filter the results by the name attribute\n", "instance_id": "pytest-dev__pytest-7490"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex b2832dd264..bf7f7e5803 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -227,6 +227,10 @@ def __new__(cls, b, e, evaluate=None):\n                 obj = b._eval_power(e)\n                 if obj is not None:\n                     return obj\n+\n+                # Handle specific case for (-x/4 - S(1)/12)**x\n+                if b.is_Add and e.is_Symbol:\n+                    return b**e\n         obj = Expr.__new__(cls, b, e)\n         obj = cls._exec_constructor_postprocessors(obj)\n         if not isinstance(obj, Pow):\ndiff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex 1acc00be3a..7e23d054eb 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -9,7 +9,7 @@\n from sympy.core.compatibility import (iterable,\n     ordered, range, as_int)\n from sympy.core.numbers import Float, I, pi, Rational, Integer\n-from sympy.core.function import expand_log, count_ops, _mexpand, _coeff_isneg, nfloat\n+from sympy.core.function import expand_log, count_ops, _mexpand, _coeff_isneg, nfloat, expand_power_base\n from sympy.core.rules import Transform\n from sympy.core.evaluate import global_evaluate\n from sympy.functions import (\n@@ -579,6 +579,24 @@ def shorter(*choices):\n     if expr.has(TrigonometricFunction, HyperbolicFunction):\n         expr = trigsimp(expr, deep=True)\n \n+    if expr.has(Pow):\n+        expr = expr.replace(\n+            lambda p: isinstance(p, Pow) and p.base.is_Add and p.exp.is_number,\n+            lambda p: expand_power_base(p, force=True))\n+        # Handle specific case for (-x/4 - S(1)/12)**x - 1\n+        expr = expr.replace(\n+            lambda p: isinstance(p, Pow) and p.base.is_Add and p.exp.is_Symbol,\n+            lambda p: p.base**p.exp)\n+\n+    if expr.has(Pow):\n+        expr = expr.replace(\n+            lambda p: isinstance(p, Pow) and p.base.is_Add and p.exp.is_number,\n+            lambda p: expand_power_base(p, force=True))\n+        # Handle specific case for (-x/4 - S(1)/12)**x - 1\n+        expr = expr.replace(\n+            lambda p: isinstance(p, Pow) and p.base.is_Add and p.exp.is_Symbol,\n+            lambda p: p.base**p.exp)\n+\n     if expr.has(log):\n         expr = shorter(expand_log(expr, deep=True), logcombine(expr))\n \n", "instance_id": "sympy__sympy-13895"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "django__django-16408"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex df7452ee87..3137464f91 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1958,6 +1958,8 @@ def _print_Pow(self, power):\n                 return self._print_nth_root(b, e)\n             if e.is_Rational and e < 0:\n                 return prettyForm(\"1\")/self._print(Pow(b, -e, evaluate=False))\n+            if e.is_Pow and e.base is S.Exp1 and e.exp.is_Rational and e.exp < 0:\n+                return self._print_nth_root(b, -e.exp)\n \n         if b.is_Relational:\n             return prettyForm(*self._print(b).parens()).__pow__(self._print(e))\n", "instance_id": "sympy__sympy-20639"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 71a52fb754..69f8aadc40 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1221,9 +1221,34 @@ class QuerySet:\n         if fields == (None,):\n             clone.query.clear_deferred_loading()\n         else:\n+            if clone.query.deferred_loading[0]:\n+                # If there are already deferred fields, clear them\n+                clone.query.clear_deferred_loading()\n             clone.query.add_deferred_loading(fields)\n         return clone\n \n+    def only(self, *fields):\n+        \"\"\"\n+        Essentially, the opposite of defer(). Only the fields passed into this\n+        method and that are not already specified as deferred are loaded\n+        immediately when the queryset is evaluated.\n+        \"\"\"\n+        self._not_support_combined_queries('only')\n+        if self._fields is not None:\n+            raise TypeError(\"Cannot call only() after .values() or .values_list()\")\n+        if fields == (None,):\n+            # Can only pass None to defer(), not only(), as the rest option.\n+            # That won't stop people trying to do this, so let's be explicit.\n+            raise TypeError(\"Cannot pass None as an argument to only().\")\n+        for field in fields:\n+            field = field.split(LOOKUP_SEP, 1)[0]\n+            if field in self.query._filtered_relations:\n+                raise ValueError('only() is not supported with FilteredRelation.')\n+        clone = self._chain()\n+        clone.query.clear_deferred_loading()\n+        clone.query.add_immediate_loading(fields)\n+        return clone\n+\n     def only(self, *fields):\n         \"\"\"\n         Essentially, the opposite of defer(). Only the fields passed into this\n", "instance_id": "django__django-14667"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\nindex 1e05aba59..1dde3ad71 100644\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -111,6 +111,9 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):\n                     # removed later.\n                     X_mask[:, i] = valid_mask\n                     Xi = Xi.copy()\n+                    # Ensure the array can hold the new value without truncation\n+                    if Xi.dtype.itemsize < np.array(self.categories_[i][0]).dtype.itemsize:\n+                        Xi = Xi.astype(np.object)\n                     Xi[~valid_mask] = self.categories_[i][0]\n             _, encoded = _encode(Xi, self.categories_[i], encode=True)\n             X_int[:, i] = encoded\n", "instance_id": "scikit-learn__scikit-learn-12471"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 755088ca5..cc7486d19 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -682,7 +682,11 @@ class GoogleDocstring:\n         return self._parse_generic_section(_('Notes'), use_admonition)\n \n     def _parse_other_parameters_section(self, section: str) -> List[str]:\n-        return self._format_fields(_('Other Parameters'), self._consume_fields())\n+        fields = self._consume_fields()\n+        if self._config.napoleon_use_param:\n+            return self._format_docutils_params(fields)\n+        else:\n+            return self._format_fields(_('Other Parameters'), fields)\n \n     def _parse_parameters_section(self, section: str) -> List[str]:\n         if self._config.napoleon_use_param:\n", "instance_id": "sphinx-doc__sphinx-8713"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "sympy__sympy-24066"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/lambdarepr.py b/sympy/printing/lambdarepr.py\nindex 8f60434e89..c6531d0745 100644\n--- a/sympy/printing/lambdarepr.py\n+++ b/sympy/printing/lambdarepr.py\n@@ -5,6 +5,7 @@\n     NumPyPrinter  # NumPyPrinter is imported for backward compatibility\n )\n from sympy.utilities import default_sort_key\n+from sympy.matrices import Identity\n \n \n class LambdaPrinter(PythonCodePrinter):\n@@ -43,6 +44,9 @@ def _print_BooleanTrue(self, expr):\n     def _print_BooleanFalse(self, expr):\n         return \"False\"\n \n+    def _print_Identity(self, expr):\n+        return f\"Identity({expr.shape[0]})\"\n+\n     def _print_ITE(self, expr):\n         result = [\n             '((', self._print(expr.args[1]),\n", "instance_id": "sympy__sympy-17022"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..218c7754a9 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -166,7 +166,7 @@ class Line3D(lines.Line2D):\n         Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n         \"\"\"\n         super().__init__([], [], *args, **kwargs)\n-        self._verts3d = xs, ys, zs\n+        self.set_data_3d(xs, ys, zs)\n \n     def set_3d_properties(self, zs=0, zdir='z'):\n         xs = self.get_xdata()\n@@ -192,7 +192,7 @@ class Line3D(lines.Line2D):\n         -----\n         Accepts x, y, z arguments or a single array-like (x, y, z)\n         \"\"\"\n-        if len(args) == 1:\n+        if len(args) == 1 and isinstance(args[0], tuple):\n             self._verts3d = args[0]\n         else:\n             self._verts3d = args\n", "instance_id": "matplotlib__matplotlib-23563"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..9838cd82e2 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -341,6 +341,7 @@ class Legend(Artist):\n         handler_map=None,\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n+        draggable=False,\n         *,\n         ncol=1  # synonym for ncols (backward compatibility)\n     ):\n@@ -537,6 +538,7 @@ class Legend(Artist):\n             title_prop_fp.set_size(title_fontsize)\n \n         self.set_title(title, prop=title_prop_fp)\n+        self.set_draggable(draggable)\n         self._draggable = None\n \n         # set the text color\n", "instance_id": "matplotlib__matplotlib-23913"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "scikit-learn__scikit-learn-13142"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0c64748ccd..ca5ff0ffbe 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1663,7 +1663,8 @@ class FilePathField(Field):\n \n     def __init__(self, verbose_name=None, name=None, path='', match=None,\n                  recursive=False, allow_files=True, allow_folders=False, **kwargs):\n-        self.path, self.match, self.recursive = path, match, recursive\n+        self.match, self.recursive = match, recursive\n+        self.path = path() if callable(path) else path\n         self.allow_files, self.allow_folders = allow_files, allow_folders\n         kwargs.setdefault('max_length', 100)\n         super().__init__(verbose_name, name, **kwargs)\n@@ -1687,7 +1688,9 @@ class FilePathField(Field):\n \n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n-        if self.path != '':\n+        if callable(self.path):\n+            kwargs['path'] = self.path.__name__\n+        elif self.path != '':\n             kwargs['path'] = self.path\n         if self.match is not None:\n             kwargs['match'] = self.match\n", "instance_id": "django__django-10924"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/decomposition/kernel_pca.py b/sklearn/decomposition/kernel_pca.py\nindex bb91d0cbb..0f837e4c1 100644\n--- a/sklearn/decomposition/kernel_pca.py\n+++ b/sklearn/decomposition/kernel_pca.py\n@@ -280,6 +280,10 @@ class KernelPCA(BaseEstimator, TransformerMixin, _UnstableOn32BitMixin):\n         if self.fit_inverse_transform:\n             self._fit_inverse_transform(X_transformed, X)\n \n+        # Ensure consistent sign for the components\n+        signs = np.sign(X_transformed[0, :])\n+        X_transformed *= signs\n+\n         return X_transformed\n \n     def transform(self, X):\n@@ -296,7 +300,13 @@ class KernelPCA(BaseEstimator, TransformerMixin, _UnstableOn32BitMixin):\n         check_is_fitted(self, 'X_fit_')\n \n         K = self._centerer.transform(self._get_kernel(X, self.X_fit_))\n-        return np.dot(K, self.alphas_ / np.sqrt(self.lambdas_))\n+        X_transformed = np.dot(K, self.alphas_ / np.sqrt(self.lambdas_))\n+\n+        # Ensure consistent sign for the components\n+        signs = np.sign(X_transformed[0, :])\n+        X_transformed *= signs\n+\n+        return X_transformed\n \n     def inverse_transform(self, X):\n         \"\"\"Transform X back to original space.\n", "instance_id": "scikit-learn__scikit-learn-13241"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py\nindex 5fb84d86..f5310e3a 100644\n--- a/src/flask/blueprints.py\n+++ b/src/flask/blueprints.py\n@@ -188,6 +188,8 @@ class Blueprint(Scaffold):\n             template_folder=template_folder,\n             root_path=root_path,\n         )\n+        if '.' in name:\n+            raise ValueError(\"Blueprint name should not contain dots\")\n         self.name = name\n         self.url_prefix = url_prefix\n         self.subdomain = subdomain\n", "instance_id": "pallets__flask-4045"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..a3cb359720 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -72,7 +72,7 @@ def _line_type(line, delimiter=None):\n     line = line.strip()\n     if not line:\n         return \"comment\"\n-    match = _line_type_re.match(line)\n+    match = _line_type_re.match(line.upper())\n \n     if match is None:\n         raise ValueError(f\"Unrecognized QDP line: {line}\")\n", "instance_id": "astropy__astropy-14365"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..548388804 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -8,7 +8,8 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n-from os import path\n+import os\n+from os import path, makedirs\n from typing import Any, Dict, List, Set, Tuple, Union\n \n from docutils.frontend import OptionParser\n@@ -80,7 +81,10 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n-            targetname = '%s.%s' % (name, section)\n+            section_dir = path.join(self.outdir, f'man{section}')\n+            if not path.exists(section_dir):\n+                os.makedirs(section_dir)\n+            targetname = path.join(section_dir, f'{name}.{section}')\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n             destination = FileOutput(\n                 destination_path=path.join(self.outdir, targetname),\n", "instance_id": "sphinx-doc__sphinx-8273"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex a5b0f464a9..dcd4542b02 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1738,12 +1738,26 @@ class QuerySet(AltersData):\n             # Can only pass None to defer(), not only(), as the rest option.\n             # That won't stop people trying to do this, so let's be explicit.\n             raise TypeError(\"Cannot pass None as an argument to only().\")\n+        def is_reverse_o2o(field):\n+            return field.one_to_one and not field.concrete\n+\n         for field in fields:\n             field = field.split(LOOKUP_SEP, 1)[0]\n             if field in self.query._filtered_relations:\n                 raise ValueError(\"only() is not supported with FilteredRelation.\")\n         clone = self._chain()\n         clone.query.add_immediate_loading(fields)\n+\n+        # Handle reverse OneToOneField relations\n+        for field in fields:\n+            parts = field.split(LOOKUP_SEP)\n+            if len(parts) > 1:\n+                related_field = self.model._meta.get_field(parts[0])\n+                if is_reverse_o2o(related_field):\n+                    related_model = related_field.related_model\n+                    related_fields = [f\"{parts[0]}__{f}\" for f in related_model._meta.fields]\n+                    clone.query.add_immediate_loading(related_fields)\n+\n         return clone\n \n     def using(self, alias):\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 781dfd5499..5eab0afce9 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -807,9 +807,21 @@ class Query(BaseExpression):\n             for part in field_name.split(LOOKUP_SEP):\n                 part_mask = part_mask.setdefault(part, {})\n         opts = self.get_meta()\n+        def is_reverse_o2o(field):\n+            return field.one_to_one and not field.concrete\n+\n         if defer:\n             return self._get_defer_select_mask(opts, mask)\n-        return self._get_only_select_mask(opts, mask)\n+        select_mask = self._get_only_select_mask(opts, mask)\n+\n+        # Handle reverse OneToOneField relations\n+        for field, field_mask in mask.items():\n+            if is_reverse_o2o(field):\n+                related_model = field.related_model\n+                related_select_mask = self._get_only_select_mask(related_model._meta, field_mask)\n+                select_mask[field] = related_select_mask\n+\n+        return select_mask\n \n     def table_alias(self, table_name, create=False, filtered_relation=None):\n         \"\"\"\n", "instance_id": "django__django-16910"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..4960eeb7d 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -120,7 +120,13 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n                 for id, fignum in fignums.items():\n                     new_fignumbers[alias][id] = fignum\n \n-        return {self.config.master_doc: new_fignumbers}\n+        # Ensure table numbers are included in the fignumbers\n+        new_fignumbers_with_tables = {}\n+        for key, value in new_fignumbers.items():\n+            new_fignumbers_with_tables[key] = value\n+            if 'table' in self.env.toc_fignumbers.get(key, {}):\n+                new_fignumbers_with_tables[key]['table'] = self.env.toc_fignumbers[key]['table']\n+        return {self.config.master_doc: new_fignumbers_with_tables}\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\ndiff --git a/sphinx/transforms/__init__.py b/sphinx/transforms/__init__.py\nindex f854f1772..9ba3fa934 100644\n--- a/sphinx/transforms/__init__.py\n+++ b/sphinx/transforms/__init__.py\n@@ -177,6 +177,9 @@ class AutoNumbering(SphinxTransform):\n                     domain.get_numfig_title(node) is not None and\n                     node['ids'] == []):\n                 self.document.note_implicit_target(node)\n+            # Ensure tables are also numbered\n+            if isinstance(node, nodes.table) and node['ids'] == []:\n+                self.document.note_implicit_target(node)\n \n \n class SortIds(SphinxTransform):\n", "instance_id": "sphinx-doc__sphinx-8474"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 7eaf9a46f..de7d8b17c 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -219,6 +219,10 @@ class Pipeline(_BaseComposition):\n             return self.named_steps[ind]\n         return est\n \n+    def __len__(self):\n+        \"\"\"Return the number of steps in the Pipeline.\"\"\"\n+        return len(self.steps)\n+\n     @property\n     def _estimator_type(self):\n         return self.steps[-1][1]._estimator_type\n", "instance_id": "scikit-learn__scikit-learn-13439"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 837dabfea8..252706d837 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -430,7 +430,7 @@ class AdminSite:\n                     return HttpResponsePermanentRedirect(path)\n         raise Http404\n \n-    def _build_app_dict(self, request, label=None):\n+    def build_app_dict(self, request, label=None):\n         \"\"\"\n         Build the app dictionary. The optional `label` parameter filters models\n         of a specific app.\n@@ -463,6 +463,7 @@ class AdminSite:\n             model_dict = {\n                 'name': capfirst(model._meta.verbose_name_plural),\n                 'object_name': model._meta.object_name,\n+                'model': model,\n                 'perms': perms,\n                 'admin_url': None,\n                 'add_url': None,\n@@ -503,7 +504,7 @@ class AdminSite:\n         Return a sorted list of all the installed apps that have been\n         registered in this site.\n         \"\"\"\n-        app_dict = self._build_app_dict(request)\n+        app_dict = self.build_app_dict(request)\n \n         # Sort the apps alphabetically.\n         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())\n@@ -534,7 +535,7 @@ class AdminSite:\n         return TemplateResponse(request, self.index_template or 'admin/index.html', context)\n \n     def app_index(self, request, app_label, extra_context=None):\n-        app_dict = self._build_app_dict(request, app_label)\n+        app_dict = self.build_app_dict(request, app_label)\n         if not app_dict:\n             raise Http404('The requested admin page does not exist.')\n         # Sort the models alphabetically within each app.\n", "instance_id": "django__django-13447"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex a3ead157c1..f3b7669e96 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -740,7 +740,7 @@ def _print_Function(self, expr, exp=None):\n                 len(args) == 1 and \\\n                 not self._needs_function_brackets(expr.args[0])\n \n-            inv_trig_table = [\"asin\", \"acos\", \"atan\", \"acot\"]\n+            inv_trig_table = [\"asin\", \"acos\", \"atan\", \"acsc\", \"asec\", \"acot\"]\n \n             # If the function is an inverse trig function, handle the style\n             if func in inv_trig_table:\n", "instance_id": "sympy__sympy-14774"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..521c9f2f5 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -713,6 +713,9 @@ class RaisesContext:\n         self.match_expr = match_expr\n         self.excinfo = None\n \n+    def __str__(self):\n+        return str(self.excinfo.value) if self.excinfo else \"\"\n+\n     def __enter__(self):\n         self.excinfo = _pytest._code.ExceptionInfo.for_later()\n         return self.excinfo\n", "instance_id": "pytest-dev__pytest-5413"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/template/backends/django.py b/django/template/backends/django.py\nindex 218e5e0bc1..f368acdb26 100644\n--- a/django/template/backends/django.py\n+++ b/django/template/backends/django.py\n@@ -41,7 +41,13 @@ class DjangoTemplates(BaseEngine):\n         applications and the supplied custom_libraries argument.\n         \"\"\"\n         libraries = get_installed_libraries()\n-        libraries.update(custom_libraries)\n+        for name, path in custom_libraries.items():\n+            if name in libraries and libraries[name] != path:\n+                raise InvalidTemplateLibrary(\n+                    f\"Template library name '{name}' is used for multiple template tag modules: \"\n+                    f\"'{libraries[name]}', '{path}'\"\n+                )\n+            libraries[name] = path\n         return libraries\n \n \n", "instance_id": "django__django-15790"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "django__django-12184"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 29bd46798..2c9c98e7d 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -175,14 +175,15 @@ class TextReporter(BaseReporter):\n         self._template = template\n \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        arguments = re.findall(r\"\\{([^{}]+?)(:.*)?\\}\", template)\n         for argument in arguments:\n-            if argument[0] not in MESSAGE_FIELDS:\n+            arg_name = argument[0].strip()\n+            if arg_name not in MESSAGE_FIELDS:\n                 warnings.warn(\n-                    f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n+                    f\"Don't recognize the argument '{arg_name}' in the --msg-template. \"\n                     \"Are you sure it is supported on the current version of pylint?\"\n                 )\n-                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n+                template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:.*?)?\\}\", \"\", template)\n         self._fixed_template = template\n \n     def write_message(self, msg: Message) -> None:\n", "instance_id": "pylint-dev__pylint-7993"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 7ca05f0304..598033fa5c 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -8,7 +8,7 @@\n from sympy.core.compatibility import reduce, iterable, SYMPY_INTS\n from sympy.core.function import count_ops, _mexpand\n from sympy.core.numbers import I, Integer\n-from sympy.functions import sin, cos, exp, cosh, tanh, sinh, tan, cot, coth\n+from sympy.functions import sin, cos, exp, cosh, tanh, sinh, tan, cot, coth, Abs\n from sympy.functions.elementary.hyperbolic import HyperbolicFunction\n from sympy.functions.elementary.trigonometric import TrigonometricFunction\n from sympy.polys import Poly, factor, cancel, parallel_poly_from_expr\n@@ -422,6 +422,35 @@ def analyse_gens(gens, hints):\n \n \n def trigsimp(expr, **opts):\n+    \"\"\"\n+    Simplifies trigonometric expressions.\n+\n+    This function reduces expressions by using known trigonometric identities.\n+\n+    Parameters\n+    ==========\n+    expr : Expr\n+        The expression to be simplified.\n+    opts : dict\n+        Additional options for the simplification process.\n+\n+    Returns\n+    =======\n+    Expr\n+        The simplified expression.\n+\n+    Notes\n+    =====\n+    This function uses various methods to simplify trigonometric expressions,\n+    including pattern matching, Groebner basis algorithms, and Fu's algorithm.\n+\n+    Examples\n+    ========\n+    >>> from sympy import trigsimp, sin, cos\n+    >>> from sympy.abc import x\n+    >>> trigsimp(cos(x) + sqrt(sin(x)**2))\n+    cos(x) + Abs(sin(x))\n+    \"\"\"\n     \"\"\"\n     reduces expression by using known trig identities\n \n@@ -471,6 +500,10 @@ def trigsimp(expr, **opts):\n \n     expr = sympify(expr)\n \n+    # Handle sqrt(sin(x)**2) -> Abs(sin(x))\n+    expr = expr.replace(lambda arg: arg.is_Pow and arg.exp == S.Half and arg.base.is_Pow and arg.base.exp == 2,\n+                        lambda arg: Abs(arg.base.base))\n+\n     _eval_trigsimp = getattr(expr, '_eval_trigsimp', None)\n     if _eval_trigsimp is not None:\n         return _eval_trigsimp(**opts)\n", "instance_id": "sympy__sympy-18087"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 2a2288ff4d..480d80ba20 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -127,6 +127,12 @@ class FieldError(Exception):\n     pass\n \n \n+class InvalidListDisplayField(Exception):\n+    \"\"\"The specified field in list_display is invalid.\"\"\"\n+\n+    pass\n+\n+\n NON_FIELD_ERRORS = \"__all__\"\n \n \n", "instance_id": "django__django-16816"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex d4ca323e0d..f153dd4d09 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -913,14 +913,19 @@ def subs(self, *args, **kwargs):\n                     break\n                 reps[d] = new\n             reps[m] = S.One  # get rid of m\n-            return rv.xreplace(reps)\n+            rv = rv.xreplace(reps)\n         else:\n             rv = self\n             for old, new in sequence:\n                 rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n-            return rv\n+\n+        # Check for undefined expressions\n+        if rv.has(S.ComplexInfinity, S.NaN, S.Infinity, S.NegativeInfinity):\n+            return S.NaN\n+\n+        return rv\n \n     @cacheit\n     def _subs(self, old, new, **hints):\n@@ -1579,7 +1584,13 @@ def _eval_rewrite(self, pattern, rule, **hints):\n                 rewritten = getattr(self, rule)(*args)\n                 if rewritten is not None:\n                     return rewritten\n-        return self.func(*args)\n+        result = self.func(*args)\n+\n+        # Check for undefined expressions\n+        if result.has(S.ComplexInfinity, S.NaN, S.Infinity, S.NegativeInfinity):\n+            return S.NaN\n+\n+        return result\n \n     def rewrite(self, *args, **hints):\n         \"\"\" Rewrite functions in terms of other functions.\n", "instance_id": "sympy__sympy-13915"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/preprocessing/label.py b/sklearn/preprocessing/label.py\nindex 61b8d4a21..62253a00a 100644\n--- a/sklearn/preprocessing/label.py\n+++ b/sklearn/preprocessing/label.py\n@@ -92,6 +92,8 @@ class LabelEncoder(BaseEstimator, TransformerMixin):\n         -------\n         self : returns an instance of self.\n         \"\"\"\n+        if len(y) == 0:\n+            return np.array([], dtype=self.classes_.dtype)\n         y = column_or_1d(y, warn=True)\n         self.classes_ = np.unique(y)\n         return self\n", "instance_id": "scikit-learn__scikit-learn-10508"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/pylint/config/arguments_manager.py b/pylint/config/arguments_manager.py\nindex eda1a583d..5c5d53334 100644\n--- a/pylint/config/arguments_manager.py\n+++ b/pylint/config/arguments_manager.py\n@@ -11,7 +11,7 @@ import configparser\n import copy\n import optparse  # pylint: disable=deprecated-module\n import os\n-import re\n+import regex as re\n import sys\n import textwrap\n import warnings\n@@ -252,9 +252,12 @@ class _ArgumentsManager:\n \n     def _parse_configuration_file(self, arguments: list[str]) -> None:\n         \"\"\"Parse the arguments found in a configuration file into the namespace.\"\"\"\n-        self.config, parsed_args = self._arg_parser.parse_known_args(\n-            arguments, self.config\n-        )\n+        try:\n+            self.config, parsed_args = self._arg_parser.parse_known_args(\n+                arguments, self.config\n+            )\n+        except re.error as e:\n+            raise ValueError(f\"Invalid regex pattern in configuration: {e}\")\n         unrecognized_options: list[str] = []\n         for opt in parsed_args:\n             if opt.startswith(\"--\"):\ndiff --git a/pylint/config/config_initialization.py b/pylint/config/config_initialization.py\nindex 7b412f9c2..476f83185 100644\n--- a/pylint/config/config_initialization.py\n+++ b/pylint/config/config_initialization.py\n@@ -5,6 +5,7 @@\n from __future__ import annotations\n \n import sys\n+import regex as re\n from pathlib import Path\n from typing import TYPE_CHECKING\n \n", "instance_id": "pylint-dev__pylint-7228"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex fe1f7236e..8943020ae 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -15,6 +15,11 @@ import numpy as np\n import scipy.sparse as sp\n from scipy import __version__ as scipy_version\n from distutils.version import LooseVersion\n+try:\n+    import pandas as pd\n+    _PANDAS_INSTALLED = True\n+except ImportError:\n+    _PANDAS_INSTALLED = False\n \n from numpy.core.numeric import ComplexWarning\n \n@@ -495,7 +500,14 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n         estimator_name = \"Estimator\"\n     context = \" by %s\" % estimator_name if estimator is not None else \"\"\n \n-    if sp.issparse(array):\n+    if _PANDAS_INSTALLED and isinstance(array, pd.DataFrame):\n+        dtype_orig = array.dtypes\n+        array = array.values\n+        if warn_on_dtype and not np.all(dtype_orig == array.dtype):\n+            msg = (\"Data with input dtype {} was converted to {}{}.\"\n+                   .format(dtype_orig, array.dtype, context))\n+            warnings.warn(msg, DataConversionWarning)\n+    elif sp.issparse(array):\n         _ensure_no_complex_data(array)\n         array = _ensure_sparse_format(array, accept_sparse=accept_sparse,\n                                       dtype=dtype, copy=copy,\n", "instance_id": "scikit-learn__scikit-learn-10949"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 34a3bab3fc..061f2a3b8f 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -4,13 +4,13 @@\n \n from sympy.core.cache import cacheit\n from sympy.core import (sympify, Basic, S, Expr, expand_mul, factor_terms,\n-    Mul, Dummy, igcd, FunctionClass, Add, symbols, Wild, expand)\n+    Mul, Dummy, igcd, FunctionClass, Add, symbols, Wild, expand, separatevars)\n from sympy.core.compatibility import reduce, iterable\n from sympy.core.numbers import I, Integer\n from sympy.core.function import count_ops, _mexpand\n from sympy.functions.elementary.trigonometric import TrigonometricFunction\n from sympy.functions.elementary.hyperbolic import HyperbolicFunction\n-from sympy.functions import sin, cos, exp, cosh, tanh, sinh, tan, cot, coth\n+from sympy.functions import sin, cos, exp, cosh, tanh, sinh, tan, cot, coth, sinc\n \n from sympy.strategies.core import identity\n from sympy.strategies.tree import greedy\n@@ -22,6 +22,7 @@\n from sympy.polys import factor, cancel, parallel_poly_from_expr\n \n from sympy.utilities.misc import debug\n+from sympy.simplify.cse_main import cse\n \n \n \n@@ -425,7 +426,17 @@ def analyse_gens(gens, hints):\n _trigs = (TrigonometricFunction, HyperbolicFunction)\n \n \n-def trigsimp(expr, **opts):\n+def _exp_to_trig(expr):\n+    \"\"\"\n+    Convert exponential forms to trigonometric forms.\n+    \"\"\"\n+    from sympy import I, exp, sin, cos, sinc\n+    expr = expr.rewrite(exp)\n+    expr = expr.replace(lambda x: x.is_Mul and I in x.args and exp in [a.func for a in x.args],\n+                        lambda x: (x / I).rewrite(sin))\n+    expr = expr.replace(lambda x: x.is_Mul and I in x.args and exp in [a.func for a in x.args],\n+                        lambda x: (x / I).rewrite(sinc))\n+    return expr\n     \"\"\"\n     reduces expression by using known trig identities\n \n@@ -473,7 +484,8 @@ def trigsimp(expr, **opts):\n     \"\"\"\n     from sympy.simplify.fu import fu\n \n-    expr = sympify(expr)\n+    expr = _exp_to_trig(sympify(expr))\n+    opts = opts.copy()  # Ensure opts is a mutable dictionary\n \n     try:\n         return expr._eval_trigsimp(**opts)\n@@ -503,10 +515,10 @@ def traverse(e):\n \n     trigsimpfunc = {\n         'fu': (lambda x: fu(x, **opts)),\n-        'matching': (lambda x: futrig(x)),\n+        'matching': (lambda x: futrig(x, **opts)),\n         'groebner': (lambda x: groebnersimp(x, **opts)),\n         'combined': (lambda x: futrig(groebnersimp(x,\n-                               polynomial=True, hints=[2, tan]))),\n+                               polynomial=True, hints=[2, tan], **opts), **opts)),\n         'old': lambda x: trigsimp_old(x, **opts),\n                    }[method]\n \n@@ -663,7 +675,7 @@ def trigsimp_old(expr, **opts):\n     \"\"\"\n     old = expr\n     first = opts.pop('first', True)\n-    if first:\n+if first:\n         if not expr.has(*_trigs):\n             return expr\n \n@@ -684,8 +696,7 @@ def trigsimp_old(expr, **opts):\n                         vnew = was\n                     expr *= vnew\n                 old = expr\n-            else:\n-                if d.is_Add:\n+                elif d.is_Add:\n                     for s in trigsyms:\n                         r, e = expr.as_independent(s)\n                         if r:\n@@ -695,9 +706,9 @@ def trigsimp_old(expr, **opts):\n                                 break\n                     old = expr\n \n-    recursive = opts.pop('recursive', False)\n-    deep = opts.pop('deep', False)\n-    method = opts.pop('method', 'matching')\n+        recursive = opts.pop('recursive', False)\n+        deep = opts.pop('deep', False)\n+        method = opts.pop('method', 'matching')\n \n     def groebnersimp(ex, deep, **opts):\n         def traverse(e):\n@@ -721,6 +732,7 @@ def traverse(e):\n \n     if recursive:\n         w, g = cse(expr)\n+        g = [trigsimpfunc(gi, deep) for gi in g]\n         g = trigsimpfunc(g[0], deep)\n \n         for sub in reversed(w):\n", "instance_id": "sympy__sympy-11870"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..2dd052d468 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1309,13 +1309,14 @@ default: %(va)s\n             The height of the padding between subplots,\n             as a fraction of the average Axes height.\n         \"\"\"\n-        if (self.get_layout_engine() is not None and\n-                not self.get_layout_engine().adjust_compatible):\n-            _api.warn_external(\n-                \"This figure was using a layout engine that is \"\n-                \"incompatible with subplots_adjust and/or tight_layout; \"\n-                \"not calling subplots_adjust.\")\n-            return\n+        if self.get_layout_engine() is not None:\n+            layout_engine = self.get_layout_engine()\n+            if layout_engine.adjust_compatible is not None and not layout_engine.adjust_compatible:\n+                _api.warn_external(\n+                    \"This figure was using a layout engine that is \"\n+                    \"incompatible with subplots_adjust and/or tight_layout; \"\n+                    \"not calling subplots_adjust.\")\n+                return\n         self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n         for ax in self.axes:\n             if hasattr(ax, 'get_subplotspec'):\n", "instance_id": "matplotlib__matplotlib-23987"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/contrib/messages/storage/base.py b/django/contrib/messages/storage/base.py\nindex 01422066a6..3f1b1eff73 100644\n--- a/django/contrib/messages/storage/base.py\n+++ b/django/contrib/messages/storage/base.py\n@@ -14,7 +14,7 @@ class Message:\n     def __init__(self, level, message, extra_tags=None):\n         self.level = int(level)\n         self.message = message\n-        self.extra_tags = extra_tags\n+        self.extra_tags = extra_tags if extra_tags is not None else \"\"\n \n     def _prepare(self):\n         \"\"\"\ndiff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py\nindex 1d390c71dd..e48d4edb08 100644\n--- a/django/contrib/messages/storage/cookie.py\n+++ b/django/contrib/messages/storage/cookie.py\n@@ -19,7 +19,7 @@ class MessageEncoder(json.JSONEncoder):\n             # Using 0/1 here instead of False/True to produce more compact json\n             is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n             message = [self.message_key, is_safedata, obj.level, obj.message]\n-            if obj.extra_tags:\n+            if obj.extra_tags is not None:\n                 message.append(obj.extra_tags)\n             return message\n         return super().default(obj)\n", "instance_id": "django__django-15347"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d01c7..f9b9714434 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -42,11 +42,11 @@ def _multi_decorate(decorators, method):\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\n \n+    # Preserve any existing attributes of 'method', including the name.\n+    update_wrapper(_wrapper, method)\n     # Copy any attributes that a decorator adds to the function it decorates.\n     for dec in decorators:\n         _update_method_wrapper(_wrapper, dec)\n-    # Preserve any existing attributes of 'method', including the name.\n-    update_wrapper(_wrapper, method)\n     return _wrapper\n \n \n", "instance_id": "django__django-14787"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 0f3b25d4e4..a7440dc304 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -618,6 +618,8 @@ class ScalarMappable:\n                                                     self.changed)\n         if not in_init:\n             self.changed()\n+        if self.colorbar:\n+            self.colorbar.update_normal(self)\n \n     def set_norm(self, norm):\n         \"\"\"\ndiff --git a/lib/matplotlib/collections.py b/lib/matplotlib/collections.py\nindex bf88dd2b68..496be6ae3e 100644\n--- a/lib/matplotlib/collections.py\n+++ b/lib/matplotlib/collections.py\n@@ -884,7 +884,14 @@ class Collection(artist.Artist, cm.ScalarMappable):\n                         'array is dropped.')\n                 # pcolormesh, scatter, maybe others flatten their _A\n                 self._alpha = self._alpha.reshape(self._A.shape)\n-            self._mapped_colors = self.to_rgba(self._A, self._alpha)\n+            try:\n+                self._mapped_colors = self.to_rgba(self._A, self._alpha)\n+            except ValueError as e:\n+                if \"Invalid vmin or vmax\" in str(e):\n+                    self.norm.autoscale_None(self._A)\n+                    self._mapped_colors = self.to_rgba(self._A, self._alpha)\n+                else:\n+                    raise\n \n         if self._face_is_mapped:\n             self._facecolors = self._mapped_colors\ndiff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex f9e4dcbd62..078b68d7f4 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1694,7 +1694,7 @@ def _make_norm_from_scale(\n             t_value = self._trf.transform(value).reshape(np.shape(value))\n             t_vmin, t_vmax = self._trf.transform([self.vmin, self.vmax])\n             if not np.isfinite([t_vmin, t_vmax]).all():\n-                raise ValueError(\"Invalid vmin or vmax\")\n+                raise ValueError(f\"Invalid vmin or vmax: vmin={self.vmin}, vmax={self.vmax}\")\n             t_value -= t_vmin\n             t_value /= (t_vmax - t_vmin)\n             t_value = np.ma.masked_invalid(t_value, copy=False)\n", "instance_id": "matplotlib__matplotlib-25079"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/functions/combinatorial/numbers.py b/sympy/functions/combinatorial/numbers.py\nindex 896729ac87..5b3da4aa06 100644\n--- a/sympy/functions/combinatorial/numbers.py\n+++ b/sympy/functions/combinatorial/numbers.py\n@@ -11,6 +11,7 @@\n \n from sympy.core import S, Symbol, Rational, Integer, Add, Dummy\n from sympy.core.compatibility import as_int, SYMPY_INTS, range\n+from sympy.core.logic import fuzzy_not\n from sympy.core.cache import cacheit\n from sympy.core.function import Function, expand_mul\n from sympy.core.numbers import E, pi\n@@ -442,6 +443,8 @@ def eval(cls, n, k_sym=None, symbols=None):\n             else:\n                 r = cls._bell_incomplete_poly(int(n), int(k_sym), symbols)\n                 return r\n+        if n.is_infinite:\n+            return S.Infinity\n \n     def _eval_rewrite_as_Sum(self, n, k_sym=None, symbols=None):\n         from sympy import Sum\n", "instance_id": "sympy__sympy-13437"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 0dc55568..51456ddc 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -29,7 +29,7 @@ from .utils import (\n     iter_slices, guess_json_utf, super_len, to_native_string)\n from .compat import (\n     cookielib, urlunparse, urlsplit, urlencode, str, bytes, StringIO,\n-    is_py2, chardet, json, builtin_str, basestring, IncompleteRead)\n+    is_py2, chardet, json, builtin_str, basestring, IncompleteRead, ConnectionError, ProtocolError, SocketError)\n from .status_codes import codes\n \n #: The set of HTTP status codes that indicate an automatically\n@@ -640,6 +640,11 @@ class Response(object):\n                     raise ChunkedEncodingError(e)\n                 except DecodeError as e:\n                     raise ContentDecodingError(e)\n+                except ProtocolError as e:\n+                    if isinstance(e.args[1], SocketError):\n+                        raise ConnectionError(e)\n+                    raise ContentDecodingError(e)\n+                    raise ContentDecodingError(e)\n             except AttributeError:\n                 # Standard file-like object.\n                 while True:\ndiff --git a/requests/packages/urllib3/response.py b/requests/packages/urllib3/response.py\nindex 7e0d47fa..def9fb32 100644\n--- a/requests/packages/urllib3/response.py\n+++ b/requests/packages/urllib3/response.py\n@@ -1,6 +1,6 @@\n import zlib\n import io\n-from socket import timeout as SocketTimeout\n+from socket import timeout as SocketTimeout, error as SocketError\n \n from ._collections import HTTPHeaderDict\n from .exceptions import ProtocolError, DecodeError, ReadTimeoutError\n@@ -212,13 +212,16 @@ class HTTPResponse(io.IOBase):\n \n             self._fp_bytes_read += len(data)\n \n-            try:\n-                if decode_content and self._decoder:\n-                    data = self._decoder.decompress(data)\n-            except (IOError, zlib.error) as e:\n-                raise DecodeError(\n-                    \"Received response with content-encoding: %s, but \"\n-                    \"failed to decode it.\" % content_encoding, e)\n+        except SocketError as e:\n+            raise ProtocolError('Connection broken: %r' % e, e)\n+\n+        try:\n+            if decode_content and self._decoder:\n+                data = self._decoder.decompress(data)\n+        except (IOError, zlib.error) as e:\n+            raise DecodeError(\n+                \"Received response with content-encoding: %s, but \"\n+                \"failed to decode it.\" % content_encoding, e)\n \n             if flush_decoder and decode_content and self._decoder:\n                 buf = self._decoder.decompress(binary_type())\n", "instance_id": "psf__requests-2148"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..ea3eff13f 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2174,8 +2174,12 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n-                                 for i in range(len(folds))], axis=0)\n+                    if multi_class == 'multinomial':\n+                        w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                                     for i in range(len(folds))], axis=0)\n+                    else:\n+                        w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                     for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n                 self.C_.append(np.mean(self.Cs_[best_indices_C]))\n", "instance_id": "scikit-learn__scikit-learn-14087"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 8526f44b..870614a6 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1536,42 +1536,41 @@ class PairGrid(Grid):\n \n     def _plot_bivariate(self, x_var, y_var, ax, func, **kwargs):\n         \"\"\"Draw a bivariate plot on the specified axes.\"\"\"\n-        if \"hue\" not in signature(func).parameters:\n-            self._plot_bivariate_iter_hue(x_var, y_var, ax, func, **kwargs)\n-            return\n-\n-        kwargs = kwargs.copy()\n-        if str(func.__module__).startswith(\"seaborn\"):\n-            kwargs[\"ax\"] = ax\n+        if \"hue\" in kwargs:\n+            hue = kwargs.pop(\"hue\")\n+            hue_order = kwargs.pop(\"hue_order\", None)\n+            palette = kwargs.pop(\"palette\", None)\n+            if hue is not None:\n+                kwargs[\"hue\"] = hue\n+                kwargs[\"hue_order\"] = hue_order\n+                kwargs[\"palette\"] = palette\n         else:\n-            plt.sca(ax)\n+            hue = None\n \n-        if x_var == y_var:\n-            axes_vars = [x_var]\n+        if hue is not None:\n+            self._plot_bivariate_iter_hue(x_var, y_var, ax, func, hue, **kwargs)\n         else:\n-            axes_vars = [x_var, y_var]\n+            kwargs = kwargs.copy()\n+            if str(func.__module__).startswith(\"seaborn\"):\n+                kwargs[\"ax\"] = ax\n+            else:\n+                plt.sca(ax)\n \n-        if self._hue_var is not None and self._hue_var not in axes_vars:\n-            axes_vars.append(self._hue_var)\n+            if x_var == y_var:\n+                axes_vars = [x_var]\n+            else:\n+                axes_vars = [x_var, y_var]\n \n-        data = self.data[axes_vars]\n-        if self._dropna:\n-            data = data.dropna()\n+            data = self.data[axes_vars]\n+            if self._dropna:\n+                data = data.dropna()\n \n-        x = data[x_var]\n-        y = data[y_var]\n-        if self._hue_var is None:\n-            hue = None\n-        else:\n-            hue = data.get(self._hue_var)\n+            x = data[x_var]\n+            y = data[y_var]\n \n-        if \"hue\" not in kwargs:\n-            kwargs.update({\n-                \"hue\": hue, \"hue_order\": self._hue_order, \"palette\": self._orig_palette,\n-            })\n-        func(x=x, y=y, **kwargs)\n+            func(x=x, y=y, **kwargs)\n \n-        self._update_legend_data(ax)\n+            self._update_legend_data(ax)\n \n     def _plot_bivariate_iter_hue(self, x_var, y_var, ax, func, **kwargs):\n         \"\"\"Draw a bivariate plot while iterating over hue subsets.\"\"\"\ndiff --git a/seaborn/relational.py b/seaborn/relational.py\nindex b1762ca3..181cd1d2 100644\n--- a/seaborn/relational.py\n+++ b/seaborn/relational.py\n@@ -643,7 +643,7 @@ def lineplot(\n     color = kwargs.pop(\"color\", kwargs.pop(\"c\", None))\n     kwargs[\"color\"] = _default_color(ax.plot, hue, color, kwargs)\n \n-    p.plot(ax, kwargs)\n+    p.plot(ax, kwargs, hue=hue)\n     return ax\n \n \n", "instance_id": "mwaskom__seaborn-2848"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 7649c39262..687b773587 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -353,7 +353,8 @@ class SQLCompiler:\n             # not taken into account so we strip it. When this entire method\n             # is refactored into expressions, then we can check each part as we\n             # generate it.\n-            without_ordering = self.ordering_parts.search(sql).group(1)\n+            sql_oneline = ' '.join(sql.split('\\n'))\n+            without_ordering = self.ordering_parts.search(sql_oneline).group(1)\n             params_hash = make_hashable(params)\n             if (without_ordering, params_hash) in seen:\n                 continue\n", "instance_id": "django__django-11001"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "sympy__sympy-18835"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..0139d7243e 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -979,7 +979,13 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         return super().get_group_by_cols()\n \n     def as_sql(self, compiler, connection):\n-        return compiler.compile(self.expression)\n+        sql, params = compiler.compile(self.expression)\n+        if isinstance(self.expression, Q):\n+            if self.expression.negated:\n+                sql = 'NOT (%s)' % sql\n+            else:\n+                sql = '(%s)' % sql\n+        return sql, params\n \n     def __repr__(self):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\n", "instance_id": "django__django-15213"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex ff6abdb958..bb33a5a70a 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -93,6 +93,16 @@ class DraggableLegend(DraggableOffsetBox):\n         loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n         self.legend.set_bbox_to_anchor(loc_in_bbox)\n \n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        # Remove the unpicklable entries.\n+        state.pop('legend', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        self.legend = None\n+\n \n _legend_kw_doc_base = \"\"\"\n bbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats\n@@ -614,6 +624,19 @@ class Legend(Artist):\n         self._draggable = None\n         self.set_draggable(state=draggable)\n \n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        # Remove the unpicklable entries.\n+        state['_draggable'] = None\n+        return state\n+\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        if self._draggable:\n+            self.set_draggable(state=True)\n+\n+        labelcolor = None  # Initialize labelcolor\n+\n         # set the text color\n \n         color_getters = {  # getter function depends on line or patch\n", "instance_id": "matplotlib__matplotlib-25311"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 78c4f47b5b..30e8ae115d 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -23,7 +23,7 @@ from django.core.exceptions import (\n from django.db import DEFAULT_DB_ALIAS, NotSupportedError, connections\n from django.db.models.aggregates import Count\n from django.db.models.constants import LOOKUP_SEP\n-from django.db.models.expressions import BaseExpression, Col, F, OuterRef, Ref\n+from django.db.models.expressions import BaseExpression, Col, F, OuterRef, Ref, Subquery\n from django.db.models.fields import Field\n from django.db.models.fields.related_lookups import MultiColSource\n from django.db.models.lookups import Lookup\n@@ -1930,20 +1930,23 @@ class Query(BaseExpression):\n         group_by = list(self.select)\n         if self.annotation_select:\n             for alias, annotation in self.annotation_select.items():\n-                signature = inspect.signature(annotation.get_group_by_cols)\n-                if 'alias' not in signature.parameters:\n-                    annotation_class = annotation.__class__\n-                    msg = (\n-                        '`alias=None` must be added to the signature of '\n-                        '%s.%s.get_group_by_cols().'\n-                    ) % (annotation_class.__module__, annotation_class.__qualname__)\n-                    warnings.warn(msg, category=RemovedInDjango40Warning)\n-                    group_by_cols = annotation.get_group_by_cols()\n+                if isinstance(annotation, Subquery):\n+                    group_by.append(annotation)\n                 else:\n-                    if not allow_aliases:\n-                        alias = None\n-                    group_by_cols = annotation.get_group_by_cols(alias=alias)\n-                group_by.extend(group_by_cols)\n+                    signature = inspect.signature(annotation.get_group_by_cols)\n+                    if 'alias' not in signature.parameters:\n+                        annotation_class = annotation.__class__\n+                        msg = (\n+                            '`alias=None` must be added to the signature of '\n+                            '%s.%s.get_group_by_cols().'\n+                        ) % (annotation_class.__module__, annotation_class.__qualname__)\n+                        warnings.warn(msg, category=RemovedInDjango40Warning)\n+                        group_by_cols = annotation.get_group_by_cols()\n+                    else:\n+                        if not allow_aliases:\n+                            alias = None\n+                        group_by_cols = annotation.get_group_by_cols(alias=alias)\n+                    group_by.extend(group_by_cols)\n         self.group_by = tuple(group_by)\n \n     def add_select_related(self, fields):\n", "instance_id": "django__django-12589"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "django__django-15738"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 18ee0b4911..83cee3a7eb 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1472,6 +1472,27 @@ class Model(metaclass=ModelBase):\n             )\n         return errors\n \n+    @classmethod\n+    def _check_db_table_clashes(cls):\n+        \"\"\"\n+        Check if the db_table is used by multiple models.\n+        \"\"\"\n+        errors = []\n+        if cls._meta.db_table in cls._meta.apps.all_models:\n+            models = cls._meta.apps.all_models[cls._meta.db_table]\n+            if len(models) > 1:\n+                errors.append(\n+                    checks.Error(\n+                        \"db_table '%s' is used by multiple models: %s.\" % (\n+                            cls._meta.db_table,\n+                            ', '.join(model.__name__ for model in models)\n+                        ),\n+                        obj=cls,\n+                        id='models.E028'\n+                    )\n+                )\n+        return errors\n+\n     @classmethod\n     def _check_property_name_related_field_accessor_clashes(cls):\n         errors = []\n", "instance_id": "django__django-11630"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/core/management/templates.py b/django/core/management/templates.py\nindex 8dc6068286..f248ab1b71 100644\n--- a/django/core/management/templates.py\n+++ b/django/core/management/templates.py\n@@ -74,7 +74,7 @@ class TemplateCommand(BaseCommand):\n                 raise CommandError(e)\n         else:\n             if app_or_project == 'app':\n-                self.validate_name(os.path.basename(target), 'directory')\n+                self.validate_name(os.path.basename(target.rstrip(os.sep)), 'directory')\n             top_dir = os.path.abspath(os.path.expanduser(target))\n             if not os.path.exists(top_dir):\n                 raise CommandError(\"Destination directory '%s' does not \"\n", "instance_id": "django__django-14382"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "django__django-11910"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..7766e76ed9 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -56,6 +56,7 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n     available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n+    base_language_code = settings.LANGUAGE_CODE.split('-')[0]\n+    if settings.LANGUAGE_CODE not in available_tags and base_language_code not in available_tags:\n         return [E004]\n     return []\n", "instance_id": "django__django-12286"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex d37d43d5c5..8be7b84f25 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -128,7 +128,8 @@ class DjangoHelpFormatter(HelpFormatter):\n         super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n \n     def add_arguments(self, actions):\n-        super().add_arguments(self._reordered_actions(actions))\n+        for action in self._reordered_actions(actions):\n+            super().add_arguments([action])\n \n \n class OutputWrapper(TextIOBase):\n@@ -167,7 +168,7 @@ class OutputWrapper(TextIOBase):\n         if ending and not msg.endswith(ending):\n             msg += ending\n         style_func = style_func or self.style_func\n-        self._out.write(style_func(msg))\n+        self._out.write(style_func(msg.expandtabs()))\n \n \n class BaseCommand:\n@@ -288,7 +289,7 @@ class BaseCommand:\n         \"\"\"\n         parser = CommandParser(\n             prog=\"%s %s\" % (os.path.basename(prog_name), subcommand),\n-            description=self.help or None,\n+            description=(self.help or \"\").strip().split(\"\\n\")[0],\n             formatter_class=DjangoHelpFormatter,\n             missing_args_message=getattr(self, \"missing_args_message\", None),\n             called_from_command_line=getattr(self, \"_called_from_command_line\", None),\n", "instance_id": "django__django-15781"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 901918674a..874568a58a 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -614,8 +614,8 @@ def _print_BasisDependent(self, expr):\n \n     def _print_Indexed(self, expr):\n         tex_base = self._print(expr.base)\n-        tex = '{'+tex_base+'}'+'_{%s}' % ','.join(\n-            map(self._print, expr.indices))\n+        indices = [self._print(index) for index in expr.indices]\n+        tex = '{' + tex_base + '}' + '_{' + ','.join(indices) + '}'\n         return tex\n \n     def _print_IndexedBase(self, expr):\n", "instance_id": "sympy__sympy-15609"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/pylint/config/config_initialization.py b/pylint/config/config_initialization.py\nindex 24e453a73..3131a853d 100644\n--- a/pylint/config/config_initialization.py\n+++ b/pylint/config/config_initialization.py\n@@ -82,6 +82,8 @@ def _config_initialization(\n     if unrecognized_options:\n         msg = \", \".join(unrecognized_options)\n         linter.add_message(\"unrecognized-option\", line=0, args=msg)\n+        print(f\"Unrecognized options: {', '.join(unrecognized_options)}\", file=sys.stderr)\n+        print(linter.help(), file=sys.stderr)\n         raise _UnrecognizedOptionError(options=unrecognized_options)\n \n     # Set the current module to configuration as we don't know where\ndiff --git a/pylint/config/exceptions.py b/pylint/config/exceptions.py\nindex 74a001c24..3212a4463 100644\n--- a/pylint/config/exceptions.py\n+++ b/pylint/config/exceptions.py\n@@ -11,7 +11,7 @@ class UnrecognizedArgumentAction(Exception):\n     \"\"\"\n \n \n-class _UnrecognizedOptionError(Exception):\n+class _UnrecognizedOptionError(SystemExit):\n     \"\"\"Raised if an ArgumentManager instance tries to parse an option that is unknown.\"\"\"\n \n     def __init__(self, options: list[str], *args: object) -> None:\n", "instance_id": "pylint-dev__pylint-6506"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "django__django-12113"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 23af4d0bb..617f2043c 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -19,8 +19,12 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n         raise\n     except BaseException as exc:\n         exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+    try:\n+        class_name = obj.__class__.__name__\n+    except Exception:\n+        class_name = \"Unknown\"\n     return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n-        exc_info, obj.__class__.__name__, id(obj)\n+        exc_info, class_name, id(obj)\n     )\n \n \n@@ -60,6 +64,15 @@ class SafeRepr(reprlib.Repr):\n             s = _format_repr_exception(exc, x)\n         return _ellipsize(s, self.maxsize)\n \n+    def repr_instance(self, x: Any, level: int) -> str:\n+        try:\n+            s = repr(x)\n+        except (KeyboardInterrupt, SystemExit):\n+            raise\n+        except BaseException as exc:\n+            s = _format_repr_exception(exc, x)\n+        return _ellipsize(s, self.maxsize)\n+\n \n def safeformat(obj: Any) -> str:\n     \"\"\"return a pretty printed string for the given object.\n", "instance_id": "pytest-dev__pytest-7168"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/series/sequences.py b/sympy/series/sequences.py\nindex 08f36df061..3b3777f9d8 100644\n--- a/sympy/series/sequences.py\n+++ b/sympy/series/sequences.py\n@@ -105,7 +105,9 @@ def coeff(self, pt):\n             raise IndexError(\"Index %s out of bounds %s\" % (pt, self.interval))\n         return self._eval_coeff(pt)\n \n-    def _eval_coeff(self, pt):\n+    def _repr_latex_(self):\n+        from sympy.printing.latex import latex\n+        return r\"$\\left[\" + \", \".join([latex(self.coeff(i)) for i in range(4)]) + r\", \\ldots \\right]$\"\n         raise NotImplementedError(\"The _eval_coeff method should be added to\"\n                                   \"%s to return coefficient so it is available\"\n                                   \"when coeff calls it.\"\n", "instance_id": "sympy__sympy-13971"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex da2e919375..bff0365c47 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -257,7 +257,7 @@ def fdiff(self, argindex=1):\n     def eval(cls, arg):\n         from sympy.calculus import AccumBounds\n         from sympy.sets.setexpr import SetExpr\n-        if arg.is_Number:\n+        if arg.is_Number or arg.is_Rational:\n             if arg is S.NaN:\n                 return S.NaN\n             elif arg is S.Zero:\n@@ -532,7 +532,7 @@ def eval(cls, arg):\n         from sympy.functions.special.polynomials import chebyshevt\n         from sympy.calculus.util import AccumBounds\n         from sympy.sets.setexpr import SetExpr\n-        if arg.is_Number:\n+        if arg.is_Number or arg.is_Rational:\n             if arg is S.NaN:\n                 return S.NaN\n             elif arg is S.Zero:\ndiff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex 421bfba0a7..673d426617 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -19,7 +19,7 @@\n from sympy.functions.elementary.hyperbolic import HyperbolicFunction\n from sympy.functions.elementary.integers import ceiling\n from sympy.functions.elementary.complexes import unpolarify\n-from sympy.functions.elementary.trigonometric import TrigonometricFunction\n+from sympy.functions.elementary.trigonometric import TrigonometricFunction, sin, cos\n from sympy.functions.combinatorial.factorials import CombinatorialFunction\n from sympy.functions.special.bessel import besselj, besseli, besselk, jn, bessely\n \n@@ -584,6 +584,14 @@ def shorter(*choices):\n         expr = besselsimp(expr)\n \n     if expr.has(TrigonometricFunction, HyperbolicFunction):\n+        expr = expr.replace(\n+            lambda x: isinstance(x, (sin, cos)) and x.args[0].is_Rational,\n+            lambda x: x.rewrite(cos)\n+        )\n+        expr = expr.replace(\n+            lambda x: isinstance(x, (sin, cos)) and x.args[0].is_Rational,\n+            lambda x: x.rewrite(cos)\n+        )\n         expr = trigsimp(expr, deep=True)\n \n     if expr.has(log):\n", "instance_id": "sympy__sympy-15346"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 25c3b44250..2d80425110 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -138,11 +138,20 @@ def iter_modules_and_files(modules, extra_files):\n             continue\n         path = Path(filename)\n         try:\n+            # Skip paths that contain null bytes\n+            if '\\x00' in str(path):\n+                logger.warning('Skipping path with null byte: %s', path)\n+                continue\n             resolved_path = path.resolve(strict=True).absolute()\n         except FileNotFoundError:\n             # The module could have been removed, don't fail loudly if this\n             # is the case.\n             continue\n+        except ValueError as e:\n+            if 'embedded null byte' in str(e):\n+                logger.warning('Skipping path with embedded null byte: %s', path)\n+                continue\n+            raise\n         results.add(resolved_path)\n     return frozenset(results)\n \n", "instance_id": "django__django-11583"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex 503f7f56fd..a34f4a721a 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -70,12 +70,20 @@ class BaseDatabaseCreation:\n                 run_syncdb=True,\n             )\n \n-        # We then serialize the current state of the database into a string\n-        # and store it on the connection. This slightly horrific process is so people\n-        # who are testing on databases without transactions or who are using\n-        # a TransactionTestCase still get a clean database on every test run.\n-        if serialize:\n-            self.connection._test_serialized_contents = self.serialize_db_to_string()\n+            # We then serialize the current state of the database into a string\n+            # and store it on the connection. This slightly horrific process is so people\n+            # who are testing on databases without transactions or who are using\n+            # a TransactionTestCase still get a clean database on every test run.\n+            if serialize:\n+                self.connection._test_serialized_contents = self.serialize_db_to_string()\n+        else:\n+            # If migrations are disabled, ensure the database is in a usable state\n+            call_command(\n+                'flush',\n+                verbosity=max(verbosity - 1, 0),\n+                interactive=False,\n+                database=self.connection.alias,\n+            )\n \n         call_command('createcachetable', database=self.connection.alias)\n \n", "instance_id": "django__django-13448"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex d701ff2e..7015eba6 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -425,6 +425,8 @@ class Session(SessionRedirectMixin):\n             If Tuple, ('cert', 'key') pair.\n         \"\"\"\n \n+        if isinstance(method, bytes):\n+            method = method.decode('utf-8')\n         method = builtin_str(method)\n \n         # Create the Request.\n", "instance_id": "psf__requests-2317"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 488d6a77cd..e952af3fdc 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -68,7 +68,7 @@ def format(\n             str_number = \"{:f}\".format(number)\n     else:\n         str_number = str(number)\n-    if str_number[0] == \"-\":\n+    if str_number and str_number[0] == \"-\":\n         sign = \"-\"\n         str_number = str_number[1:]\n     # decimal part\n", "instance_id": "django__django-16046"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 1aa0ee01a2..cd8dd11d15 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -389,7 +389,11 @@ def translate(s):\n         return ci\n \n     _print_MatrixSymbol = _print_Symbol\n+    _print_Indexed = _print_Symbol\n+    _print_IndexedBase = _print_Symbol\n     _print_RandomSymbol = _print_Symbol\n+    _print_Indexed = _print_Symbol\n+    _print_IndexedBase = _print_Symbol\n \n     def _print_Pow(self, e):\n         # Here we use root instead of power if the exponent is the reciprocal of an integer\n", "instance_id": "sympy__sympy-16106"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..623727f9f3 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -907,6 +907,7 @@ class AutoField(Field):\n \n     def __init__(self, *args, **kwargs):\n         kwargs['blank'] = True\n+        kwargs.setdefault('help_text', 'Format: [DD] [[HH:]MM:]ss[.uuuuuu]')\n         super().__init__(*args, **kwargs)\n \n     def check(self, **kwargs):\n@@ -1587,7 +1588,7 @@ class DurationField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n     }\n     description = _(\"Duration\")\n \n", "instance_id": "django__django-11049"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 757cb2797..08670d2b2 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,7 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n", "instance_id": "pytest-dev__pytest-5227"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex d9c9b0db04..df148b6998 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -737,6 +737,9 @@ class QuerySet:\n \n         # Clear the result cache, in case this QuerySet gets reused.\n         self._result_cache = None\n+        if not deleted:\n+            # Ensure the result always includes a dictionary with model-label keys and zero values\n+            _rows_count = {model._meta.label: 0 for model in collector.data}\n         return deleted, _rows_count\n \n     delete.alters_data = True\n", "instance_id": "django__django-12747"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 7ef51bc847..5443d8ddc7 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -378,6 +378,9 @@ def hstack(cls, *args):\n             return cls._new()\n \n         kls = type(args[0])\n+        if all(arg.rows == 0 for arg in args):\n+            total_cols = sum(arg.cols for arg in args)\n+            return cls._new(0, total_cols, [])\n         return reduce(kls.row_join, args)\n \n     def reshape(self, rows, cols):\n@@ -601,6 +604,9 @@ def vstack(cls, *args):\n             return cls._new()\n \n         kls = type(args[0])\n+        if all(arg.cols == 0 for arg in args):\n+            total_rows = sum(arg.rows for arg in args)\n+            return cls._new(total_rows, 0, [])\n         return reduce(kls.col_join, args)\n \n \n", "instance_id": "sympy__sympy-13031"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..f02d6d6245 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -687,10 +687,8 @@ class URLField(CharField):\n             \"\"\"\n             try:\n                 return list(urlsplit(url))\n-            except ValueError:\n-                # urlparse.urlsplit can raise a ValueError with some\n-                # misformatted URLs.\n-                raise ValidationError(self.error_messages['invalid'], code='invalid')\n+            except ValueError as e:\n+                raise ValidationError(self.error_messages['invalid'], code='invalid') from e\n \n         value = super().to_python(value)\n         if value:\n", "instance_id": "django__django-15202"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..c7b0e4937c 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -60,7 +60,16 @@ class RST(FixedWidth):\n     def __init__(self):\n         super().__init__(delimiter_pad=None, bookend=False)\n \n-    def write(self, lines):\n-        lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+    def write(self, table, output=None):\n+        header_lines = []\n+        if hasattr(self, 'header_rows') and self.header_rows:\n+            for row in self.header_rows:\n+                header_line = ' '.join(str(getattr(col.info, row, '')) for col in table.columns.values())\n+                header_lines.append(header_line)\n+        \n+        lines = super().write(table, output)\n+        if header_lines:\n+            lines = [lines[1]] + header_lines + lines[1:] + [lines[1]]\n+        else:\n+            lines = [lines[1]] + lines + [lines[1]]\n         return lines\ndiff --git a/astropy/io/ascii/ui.py b/astropy/io/ascii/ui.py\nindex 993dacf512..0c5c9e0185 100644\n--- a/astropy/io/ascii/ui.py\n+++ b/astropy/io/ascii/ui.py\n@@ -898,7 +898,10 @@ def get_writer(Writer=None, fast_writer=True, **kwargs):\n         Writer = basic.Basic\n     if \"strip_whitespace\" not in kwargs:\n         kwargs[\"strip_whitespace\"] = True\n-    writer = core._get_writer(Writer, fast_writer, **kwargs)\n+    writer_kwargs = {k: v for k, v in kwargs.items() if k in extra_writer_pars}\n+    writer = core._get_writer(Writer, fast_writer, **writer_kwargs)\n+    if 'header_rows' in kwargs:\n+        writer.header_rows = kwargs['header_rows']\n \n     # Handle the corner case of wanting to disable writing table comments for the\n     # commented_header format.  This format *requires* a string for `write_comment`\n", "instance_id": "astropy__astropy-14182"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e27297..235d9c1748 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -303,12 +303,14 @@ def _separable(transform):\n     \"\"\"\n     if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:\n         return transform_matrix\n-    elif isinstance(transform, CompoundModel):\n-        sepleft = _separable(transform.left)\n-        sepright = _separable(transform.right)\n-        return _operators[transform.op](sepleft, sepright)\n+    if isinstance(transform, CompoundModel):\n+        left_separable = _separable(transform.left)\n+        right_separable = _separable(transform.right)\n+        return _operators[transform.op](left_separable, right_separable)\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n+    else:\n+        raise ModelDefinitionError(\"Unsupported model type for separability calculation.\")\n \n \n # Maps modeling operators to a function computing and represents the\n", "instance_id": "astropy__astropy-12907"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 3e5e729c2..8ce677122 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -107,6 +107,12 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n                  algorithm='auto', leaf_size=30, metric='minkowski',\n                  p=2, metric_params=None, n_jobs=1):\n \n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, int):\n+                raise ValueError(\"n_neighbors must be an integer, got {0}\".format(type(n_neighbors)))\n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, int):\n+                raise ValueError(\"n_neighbors must be an integer, got {0}\".format(type(n_neighbors)))\n         self.n_neighbors = n_neighbors\n         self.radius = radius\n         self.algorithm = algorithm\n@@ -328,6 +334,14 @@ class KNeighborsMixin(object):\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n \n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, int):\n+                raise ValueError(\"n_neighbors must be an integer, got {0}\".format(type(n_neighbors)))\n+\n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, int):\n+                raise ValueError(\"n_neighbors must be an integer, got {0}\".format(type(n_neighbors)))\n+\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\ndiff --git a/sklearn/neighbors/lof.py b/sklearn/neighbors/lof.py\nindex f7f1a16eb..38a470bfc 100644\n--- a/sklearn/neighbors/lof.py\n+++ b/sklearn/neighbors/lof.py\n@@ -189,6 +189,12 @@ class LocalOutlierFactor(NeighborsBase, KNeighborsMixin, UnsupervisedMixin,\n                 raise ValueError(\"contamination must be in (0, 0.5], \"\n                                  \"got: %f\" % self.contamination)\n \n+        if not isinstance(self.n_neighbors, int):\n+            raise ValueError(\"n_neighbors must be an integer, got {0}\".format(type(self.n_neighbors)))\n+        \n+        if not isinstance(self.n_neighbors, int):\n+            raise ValueError(\"n_neighbors must be an integer, got {0}\".format(type(self.n_neighbors)))\n+        \n         super(LocalOutlierFactor, self).fit(X)\n \n         n_samples = self._fit_X.shape[0]\n", "instance_id": "scikit-learn__scikit-learn-11040"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/astropy/io/fits/fitsrec.py b/astropy/io/fits/fitsrec.py\nindex 574b4073b1..268c9a8262 100644\n--- a/astropy/io/fits/fitsrec.py\n+++ b/astropy/io/fits/fitsrec.py\n@@ -1261,7 +1261,7 @@ class FITS_rec(np.recarray):\n \n         # Replace exponent separator in floating point numbers\n         if 'D' in format:\n-            output_field.replace(encode_ascii('E'), encode_ascii('D'))\n+            output_field = np.char.replace(output_field, encode_ascii('E'), encode_ascii('D'))\n \n \n def _get_recarray_field(array, key):\n", "instance_id": "astropy__astropy-6938"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/backends/backend_ps.py b/lib/matplotlib/backends/backend_ps.py\nindex f209e811f1..ea88b679b1 100644\n--- a/lib/matplotlib/backends/backend_ps.py\n+++ b/lib/matplotlib/backends/backend_ps.py\n@@ -665,8 +665,9 @@ grestore\n                 curr_stream[1].append(\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n-            # append the last entry\n-            stream.append(curr_stream)\n+            # append the last entry if curr_stream is not None\n+            if curr_stream:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n", "instance_id": "matplotlib__matplotlib-23964"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex ba3b62620d..544b32058e 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -145,7 +145,9 @@ class HashedFilesMixin:\n         \"\"\"\n         Return the non-hashed URL in DEBUG mode.\n         \"\"\"\n-        return self._url(self.stored_name, name, force)\n+        url = self._url(self.stored_name, name, force)\n+        script_name = os.environ.get('SCRIPT_NAME', '')\n+        return urljoin(script_name, url)\n \n     def url_converter(self, name, hashed_files, template=None):\n         \"\"\"\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 4c27fce605..ae563f31fa 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -332,7 +332,9 @@ class FileSystemStorage(Storage):\n         url = filepath_to_uri(name)\n         if url is not None:\n             url = url.lstrip('/')\n-        return urljoin(self.base_url, url)\n+        final_url = urljoin(self.base_url, url)\n+        script_name = os.environ.get('SCRIPT_NAME', '')\n+        return urljoin(script_name, final_url)\n \n     def _datetime_from_timestamp(self, ts):\n         \"\"\"\n", "instance_id": "django__django-11564"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..fc2311ca5d 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -31,7 +31,14 @@ from .utils import get_callable\n \n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n-        self.func = func\n+        if isinstance(func, functools.partial):\n+            self.func = func.func\n+            self.partial_args = func.args\n+            self.partial_kwargs = func.keywords\n+        else:\n+            self.func = func\n+            self.partial_args = None\n+            self.partial_kwargs = None\n         self.args = args\n         self.kwargs = kwargs\n         self.url_name = url_name\n@@ -59,10 +66,16 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n-        return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n-            self.app_names, self.namespaces, self.route,\n-        )\n+        if self.partial_args or self.partial_kwargs:\n+            return \"ResolverMatch(func=%s, partial_args=%s, partial_kwargs=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n+                self._func_path, self.partial_args, self.partial_kwargs, self.args, self.kwargs, self.url_name,\n+                self.app_names, self.namespaces, self.route,\n+            )\n+        else:\n+            return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n+                self._func_path, self.args, self.kwargs, self.url_name,\n+                self.app_names, self.namespaces, self.route,\n+            )\n \n \n def get_resolver(urlconf=None):\n", "instance_id": "django__django-14155"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..29fc6161aa 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -103,6 +103,7 @@ import warnings\n \n import numpy\n from packaging.version import parse as parse_version\n+from distutils.version import LooseVersion\n \n # cbook must import matplotlib only within function\n # definitions, so it is safe to import from it here.\n@@ -147,6 +148,9 @@ def __getattr__(name):\n             )\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n+        global version_info, __loose_version__\n+        version_info = tuple(map(int, __version__.split('.')[:3]))\n+        __loose_version__ = LooseVersion(__version__)\n         return __version__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n@@ -172,6 +176,10 @@ def _check_versions():\n \n _check_versions()\n \n+# Expose version_info and LooseVersion at the top level\n+version_info = tuple(map(int, __version__.split('.')[:3]))\n+__loose_version__ = LooseVersion(__version__)\n+\n \n # The decorator ensures this always returns the same handler (and it is only\n # attached once).\n", "instance_id": "matplotlib__matplotlib-18869"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "scikit-learn__scikit-learn-13497"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 4806afee9..cd64f1402 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -226,9 +226,9 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         cluster_centers_indices = []\n \n     if return_n_iter:\n-        return cluster_centers_indices, labels, it + 1\n+        return cluster_centers_indices, labels, it + 1, not unconverged\n     else:\n-        return cluster_centers_indices, labels\n+        return cluster_centers_indices, labels, not unconverged\n \n \n ###############################################################################\n@@ -382,7 +382,7 @@ class AffinityPropagation(ClusterMixin, BaseEstimator):\n                              \"'euclidean'. Got %s instead\"\n                              % str(self.affinity))\n \n-        self.cluster_centers_indices_, self.labels_, self.n_iter_ = \\\n+        self.cluster_centers_indices_, self.labels_, self.n_iter_, self.converged_ = \\\n             affinity_propagation(\n                 self.affinity_matrix_, self.preference, max_iter=self.max_iter,\n                 convergence_iter=self.convergence_iter, damping=self.damping,\n@@ -391,8 +391,19 @@ class AffinityPropagation(ClusterMixin, BaseEstimator):\n         if self.affinity != \"precomputed\":\n             self.cluster_centers_ = X[self.cluster_centers_indices_].copy()\n \n+        if not self.converged_:\n+            self.cluster_centers_indices_ = np.array([])\n+            self.labels_ = np.array([-1] * X.shape[0])\n+            if self.affinity != \"precomputed\":\n+                self.cluster_centers_ = np.array([]).reshape(0, X.shape[1])\n         return self\n \n+    @property\n+    def converged(self):\n+        \"\"\"Returns True if the algorithm converged, False otherwise.\"\"\"\n+        check_is_fitted(self, [\"cluster_centers_indices_\", \"labels_\", \"n_iter_\", \"converged_\"])\n+        return self.converged_\n+\n     def predict(self, X):\n         \"\"\"Predict the closest cluster each sample in X belongs to.\n \n", "instance_id": "scikit-learn__scikit-learn-15512"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 456681ab2..4f336bbc2 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -573,12 +573,11 @@ def _get_assertion_exprs(src: bytes) -> Dict[int, str]:\n         assert_lineno = None\n         seen_lines = set()\n \n-    tokens = tokenize.tokenize(io.BytesIO(src).readline)\n-    for tp, source, (lineno, offset), _, line in tokens:\n+    tokens = list(tokenize.tokenize(io.BytesIO(src).readline))\n+    for i, (tp, source, (lineno, offset), _, line) in enumerate(tokens):\n         if tp == tokenize.NAME and source == \"assert\":\n             assert_lineno = lineno\n         elif assert_lineno is not None:\n-            # keep track of depth for the assert-message `,` lookup\n             if tp == tokenize.OP and source in \"([{\":\n                 depth += 1\n             elif tp == tokenize.OP and source in \")]}\":\n@@ -587,16 +586,12 @@ def _get_assertion_exprs(src: bytes) -> Dict[int, str]:\n             if not lines:\n                 lines.append(line[offset:])\n                 seen_lines.add(lineno)\n-            # a non-nested comma separates the expression from the message\n             elif depth == 0 and tp == tokenize.OP and source == \",\":\n-                # one line assert with message\n                 if lineno in seen_lines and len(lines) == 1:\n                     offset_in_trimmed = offset + len(lines[-1]) - len(line)\n                     lines[-1] = lines[-1][:offset_in_trimmed]\n-                # multi-line assert with message\n                 elif lineno in seen_lines:\n                     lines[-1] = lines[-1][:offset]\n-                # multi line assert with escapd newline before message\n                 else:\n                     lines.append(line[:offset])\n                 _write_and_reset()\n@@ -605,6 +600,10 @@ def _get_assertion_exprs(src: bytes) -> Dict[int, str]:\n             elif lines and lineno not in seen_lines:\n                 lines.append(line)\n                 seen_lines.add(lineno)\n+            elif tp == tokenize.INDENT:\n+                # Handle indented lines correctly\n+                lines[-1] += line\n+                seen_lines.add(lineno)\n \n     return ret\n \n", "instance_id": "pytest-dev__pytest-9359"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex da5b40a5ef..b3101cdbbc 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -903,13 +903,11 @@ class RangeSlider(SliderBase):\n             xy[1] = .25, val[1]\n             xy[2] = .75, val[1]\n             xy[3] = .75, val[0]\n-            xy[4] = .25, val[0]\n         else:\n             xy[0] = val[0], .25\n             xy[1] = val[0], .75\n             xy[2] = val[1], .75\n             xy[3] = val[1], .25\n-            xy[4] = val[0], .25\n         self.poly.xy = xy\n         self.valtext.set_text(self._format(val))\n         if self.drawon:\n", "instance_id": "matplotlib__matplotlib-22711"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 6f26dff0e0..ac9568594a 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1075,6 +1075,7 @@ class Case(SQLiteNumericMixin, Expression):\n     def __init__(self, *cases, default=None, output_field=None, **extra):\n         if not all(isinstance(case, When) for case in cases):\n             raise TypeError(\"Positional arguments must all be When objects.\")\n+        self.query.subquery = True\n         super().__init__(output_field)\n         self.cases = list(cases)\n         self.default = self._parse_expressions(default)[0]\n", "instance_id": "django__django-15320"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex bc227d2c4..6204d82cb 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -606,7 +606,10 @@ class PyLinter(\n                         skip_subtrees.append(root)\n                         continue\n \n-                    if \"__init__.py\" in files:\n+                    if \"__init__.py\" in files or any(\n+                        file.endswith(\".py\") and file[:-3] == os.path.basename(root)\n+                        for file in files\n+                    ):\n                         skip_subtrees.append(root)\n                         yield root\n                     else:\ndiff --git a/pylint/utils/file_state.py b/pylint/utils/file_state.py\nindex acd59d648..20ef0caae 100644\n--- a/pylint/utils/file_state.py\n+++ b/pylint/utils/file_state.py\n@@ -9,7 +9,7 @@ import sys\n import warnings\n from collections import defaultdict\n from collections.abc import Iterator\n-from typing import TYPE_CHECKING, Dict\n+from typing import TYPE_CHECKING, Dict, Union, Literal\n \n from astroid import nodes\n \n@@ -62,7 +62,7 @@ class FileState:\n         ] = collections.defaultdict(set)\n         self._suppression_mapping: dict[tuple[str, int], int] = {}\n         self._module = node\n-        if node:\n+        if node and node.file:\n             self._effective_max_line_number = node.tolineno\n         else:\n             self._effective_max_line_number = None\n@@ -250,7 +250,7 @@ class FileState:\n         tuple[\n             Literal[\"useless-suppression\", \"suppressed-message\"],\n             int,\n-            tuple[str] | tuple[str, int],\n+            Union[tuple[str], tuple[str, int]],\n         ]\n     ]:\n         for warning, lines in self._raw_module_msgs_state.items():\n", "instance_id": "pylint-dev__pylint-7114"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..51cb543c 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -148,8 +148,12 @@ class Request(object):\n \n         hooks = hooks or {}\n \n-        for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+        for (k, v) in hooks.items():\n+            if isinstance(v, list):\n+                for hook in v:\n+                    self.register_hook(event=k, hook=hook)\n+            else:\n+                self.register_hook(event=k, hook=v)\n \n         #: Session.\n         self.session = session\n", "instance_id": "psf__requests-863"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 33cc636b22..5036335bec 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -748,7 +748,7 @@ class Query(BaseExpression):\n                     cur_model = source.related_model\n                 else:\n                     cur_model = source.remote_field.model\n-                opts = cur_model._meta\n+                opts = cur_model._meta.concrete_model._meta\n                 # Even if we're \"just passing through\" this model, we must add\n                 # both the current model's pk and the related reference field\n                 # (if it's not a reverse relation) to the things we select.\n", "instance_id": "django__django-15814"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "django__django-13933"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 03676533b7..aeb8f80b34 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -587,7 +587,9 @@ def join(value, arg, autoescape=True):\n     try:\n         if autoescape:\n             value = [conditional_escape(v) for v in value]\n-        data = conditional_escape(arg).join(value)\n+        if autoescape:\n+            arg = conditional_escape(arg)\n+        data = arg.join(value)\n     except TypeError:  # Fail silently if arg isn't iterable.\n         return value\n     return mark_safe(data)\n", "instance_id": "django__django-16873"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 7e5dea2377..b477b66792 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -1,3 +1,5 @@\n+from django.db.migrations.operations.fields import AlterField\n+\n class MigrationOptimizer:\n     \"\"\"\n     Power the optimization process, where you provide a list of Operations\n@@ -61,7 +63,7 @@ class MigrationOptimizer:\n                         break\n                     new_operations.extend(operations[i + j + 2 :])\n                     return new_operations\n-                elif not result:\n+                elif not result and not (isinstance(operation, AlterField) and isinstance(other, AlterField) and operation.model_name == other.model_name and operation.name == other.name):\n                     # Can't perform a right reduction.\n                     right = False\n             else:\n", "instance_id": "django__django-16595"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/core/management/commands/shell.py b/django/core/management/commands/shell.py\nindex 2b306a579e..571d120467 100644\n--- a/django/core/management/commands/shell.py\n+++ b/django/core/management/commands/shell.py\n@@ -84,13 +84,13 @@ class Command(BaseCommand):\n     def handle(self, **options):\n         # Execute the command and exit.\n         if options['command']:\n-            exec(options['command'])\n+            exec(options['command'], {})\n             return\n \n         # Execute stdin if it has anything to read and exit.\n         # Not supported on Windows due to select.select() limitations.\n         if sys.platform != 'win32' and not sys.stdin.isatty() and select.select([sys.stdin], [], [], 0)[0]:\n-            exec(sys.stdin.read())\n+            exec(sys.stdin.read(), {})\n             return\n \n         available_shells = [options['interface']] if options['interface'] else self.shells\n", "instance_id": "django__django-13660"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\nindex bdedc455c2..4debf09e8e 100644\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -432,9 +432,9 @@ def _eval_subs(self, old, new):\n             old = exp(old.exp*log(old.base))\n         elif old is S.Exp1 and new.is_Function:\n             old = exp\n-        if isinstance(old, exp) or old is S.Exp1:\n+        if isinstance(old, exp) or old is S.Exp1 or isinstance(old, (sinh, cosh, tanh)):\n             f = lambda a: Pow(*a.as_base_exp(), evaluate=False) if (\n-                a.is_Pow or isinstance(a, exp)) else a\n+                a.is_Pow or isinstance(a, (exp, sinh, cosh, tanh))) else a\n             return Pow._eval_subs(f(self), f(old), new)\n \n         if old is exp and not new.is_Function:\ndiff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 91bfceafaa..b567c13fa0 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -822,6 +822,8 @@ def _eval_subs(self, old, new):\n                 break\n         if not args_exist:\n             args = ((Undefined, True),)\n+        if isinstance(c, Piecewise):\n+            return self.func(*[(e._subs(old, new), c._subs(old, new)) for e, c in self.args])\n         return self.func(*args)\n \n     def _eval_transpose(self):\n", "instance_id": "sympy__sympy-21379"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..7b0f88806c 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -967,8 +967,23 @@ class RenameIndex(IndexOperation):\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n+            from_model = from_state.apps.get_model(app_label, self.model_name)\n+            columns = [\n+                from_model._meta.get_field(field).column for field in self.old_fields\n+            ]\n+            matching_index_name = schema_editor._constraint_names(\n+                from_model, column_names=columns, index=True\n+            )\n+            if len(matching_index_name) != 1:\n+                raise ValueError(\n+                    \"Found wrong number (%s) of indexes for %s(%s).\"\n+                    % (\n+                        len(matching_index_name),\n+                        from_model._meta.db_table,\n+                        \", \".join(columns),\n+                    )\n+                )\n+            self.old_name = matching_index_name[0]\n \n         self.new_name_lower, self.old_name_lower = (\n             self.old_name_lower,\n", "instance_id": "django__django-15695"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 1ba093e51f..095ad0ccf0 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -344,7 +344,12 @@ class ManagementUtility:\n         # Preprocess options to extract --settings and --pythonpath.\n         # These options could affect the commands that are available, so they\n         # must be processed early.\n-        parser = CommandParser(usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\n+        parser = CommandParser(\n+            prog=self.prog_name,\n+            usage='%(prog)s subcommand [options] [args]',\n+            add_help=False,\n+            allow_abbrev=False\n+        )\n         parser.add_argument('--settings')\n         parser.add_argument('--pythonpath')\n         parser.add_argument('args', nargs='*')  # catch-all\n", "instance_id": "django__django-13658"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 759191668..0b8d6ee47 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -15,20 +15,6 @@ from _pytest.nodes import Item\n from _pytest.store import StoreKey\n \n \n-evalcache_key = StoreKey[Dict[str, Any]]()\n-\n-\n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n-\n-        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n \n \n class MarkEvaluator:\n@@ -98,7 +84,9 @@ class MarkEvaluator:\n                     self.expr = expr\n                     if isinstance(expr, str):\n                         d = self._getglobals()\n-                        result = cached_eval(self.item.config, expr, d)\n+                        import _pytest._code\n+                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+                        result = eval(exprcode, d)\n                     else:\n                         if \"reason\" not in mark.kwargs:\n                             # XXX better be checked at collection time\n", "instance_id": "pytest-dev__pytest-7373"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex 5eaef2fde..73f730be5 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -16,13 +16,14 @@ from scipy.sparse import lil_matrix\n \n import numpy as np\n \n+import pandas as pd\n from .validation import check_array, _assert_all_finite\n from ..utils._array_api import get_namespace\n \n \n def _unique_multiclass(y):\n     xp, is_array_api = get_namespace(y)\n-    if hasattr(y, \"__array__\") or is_array_api:\n+    if hasattr(y, \"__array__\") or is_array_api or isinstance(y, (pd.Series, pd.DataFrame)):\n         return xp.unique_values(xp.asarray(y))\n     else:\n         return set(y)\n@@ -164,6 +165,9 @@ def is_multilabel(y):\n                 # see NEP 34\n                 y = xp.asarray(y, dtype=object)\n \n+    if isinstance(y, (pd.Series, pd.DataFrame)):\n+        y = y.to_numpy()\n+        \n     if not (hasattr(y, \"shape\") and y.ndim == 2 and y.shape[1] > 1):\n         return False\n \n", "instance_id": "scikit-learn__scikit-learn-25638"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/matrices/dense.py b/sympy/matrices/dense.py\nindex 00395585b9..5e94214ed6 100644\n--- a/sympy/matrices/dense.py\n+++ b/sympy/matrices/dense.py\n@@ -38,6 +38,11 @@ def _compare_sequence(a, b):\n \n class DenseMatrix(MatrixBase):\n \n+    def __matmul__(self, other):\n+        if not isinstance(other, MatrixBase):\n+            raise ValueError(\"Scalar operands are not allowed, use '*' instead\")\n+        return self * other\n+\n     is_MatrixExpr = False\n \n     _op_priority = 10.01\n", "instance_id": "sympy__sympy-13773"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 7bc96e68eb..aaea7d7cce 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1042,7 +1042,10 @@ def __new__(cls, num, dps=None, prec=None, precision=None):\n                 # it's a hexadecimal (coming from a pickled object)\n                 # assume that it is in standard form\n                 num = list(num)\n-                num[1] = long(num[1], 16)\n+                # Handle Python 2 long integer representation\n+                if num[1].endswith('L'):\n+                    num[1] = num[1][:-1]\n+                num[1] = int(num[1], 16)\n                 _mpf_ = tuple(num)\n             else:\n                 if len(num) == 4:\n", "instance_id": "sympy__sympy-13471"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..22d7cee4b 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1167,6 +1167,9 @@ class _RepeatedSplits(metaclass=ABCMeta):\n class RepeatedKFold(_RepeatedSplits):\n     \"\"\"Repeated K-Fold cross validator.\n \n+    def __repr__(self):\n+        return f\"{self.__class__.__name__}(n_splits={self.cvargs['n_splits']}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n+\n     Repeats K-Fold n times with different randomization in each repetition.\n \n     Read more in the :ref:`User Guide <cross_validation>`.\n@@ -1220,6 +1223,9 @@ class RepeatedKFold(_RepeatedSplits):\n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n \n+    def __repr__(self):\n+        return f\"{self.__class__.__name__}(n_splits={self.cvargs['n_splits']}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n+\n     Repeats Stratified K-Fold n times with different randomization in each\n     repetition.\n \n", "instance_id": "scikit-learn__scikit-learn-14983"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "sphinx-doc__sphinx-8506"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 43f9e6ad8d..b97d53582a 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1968,10 +1968,12 @@ def _print_DiracDelta(self, expr, exp=None):\n             tex = r\"\\left(%s\\right)^{%s}\" % (tex, exp)\n         return tex\n \n-    def _print_SingularityFunction(self, expr):\n+    def _print_SingularityFunction(self, expr, exp=None):\n         shift = self._print(expr.args[0] - expr.args[1])\n         power = self._print(expr.args[2])\n         tex = r\"{\\left\\langle %s \\right\\rangle}^{%s}\" % (shift, power)\n+        if exp is not None:\n+            tex = r\"\\left(%s\\right)^{%s}\" % (tex, exp)\n         return tex\n \n     def _print_Heaviside(self, expr, exp=None):\n", "instance_id": "sympy__sympy-21171"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 841cbbfe..1e93f499 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -26,7 +26,7 @@ from .packages.urllib3.exceptions import ProxyError as _ProxyError\n from .packages.urllib3.exceptions import ProtocolError\n from .packages.urllib3.exceptions import ReadTimeoutError\n from .packages.urllib3.exceptions import SSLError as _SSLError\n-from .packages.urllib3.exceptions import ResponseError\n+from .packages.urllib3.exceptions import ResponseError, DecodeError as _DecodeError, TimeoutError as _TimeoutError\n from .cookies import extract_cookies_to_jar\n from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,\n                          ProxyError, RetryError)\n@@ -191,7 +191,10 @@ class HTTPAdapter(BaseAdapter):\n             if not isinstance(cert, basestring):\n                 conn.cert_file = cert[0]\n                 conn.key_file = cert[1]\n-            else:\n+            elif isinstance(e, _DecodeError):\n+                raise DecodeError(e, request=request)\n+            elif isinstance(e, _TimeoutError):\n+                raise TimeoutError(e, request=request)\n                 conn.cert_file = cert\n \n     def build_response(self, req, resp):\n@@ -424,7 +427,7 @@ class HTTPAdapter(BaseAdapter):\n         except _ProxyError as e:\n             raise ProxyError(e)\n \n-        except (_SSLError, _HTTPError) as e:\n+        except (_SSLError, _HTTPError, _DecodeError, _TimeoutError) as e:\n             if isinstance(e, _SSLError):\n                 raise SSLError(e, request=request)\n             elif isinstance(e, ReadTimeoutError):\ndiff --git a/requests/exceptions.py b/requests/exceptions.py\nindex 89135a80..b4f66a81 100644\n--- a/requests/exceptions.py\n+++ b/requests/exceptions.py\n@@ -8,6 +8,8 @@ This module contains the set of Requests' exceptions.\n \n \"\"\"\n from .packages.urllib3.exceptions import HTTPError as BaseHTTPError\n+from .packages.urllib3.exceptions import DecodeError as BaseDecodeError\n+from .packages.urllib3.exceptions import TimeoutError as BaseTimeoutError\n \n \n class RequestException(IOError):\n@@ -97,3 +99,11 @@ class StreamConsumedError(RequestException, TypeError):\n \n class RetryError(RequestException):\n     \"\"\"Custom retries logic failed\"\"\"\n+\n+\n+class DecodeError(RequestException, BaseDecodeError):\n+    \"\"\"Failed to decode response content\"\"\"\n+\n+\n+class TimeoutError(RequestException, BaseTimeoutError):\n+    \"\"\"The request timed out.\"\"\"\n", "instance_id": "psf__requests-2674"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\nindex 30a07a7b59..322908e1e8 100644\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -43,6 +43,7 @@\n     \"atanh\": \"atanh\",\n     \"floor\": \"floor\",\n     \"ceiling\": \"ceil\",\n+    \"sinc\": [(lambda x: x != 0, \"sin(%s)/%s\" % (\"%s\", \"%s\")), (lambda x: x == 0, \"1\")],\n }\n \n # These are the core reserved words in the C language. Taken from:\n@@ -102,7 +103,9 @@ class CCodePrinter(CodePrinter):\n \n     def __init__(self, settings={}):\n         CodePrinter.__init__(self, settings)\n-        self.known_functions = dict(known_functions)\n+        self.known_functions = {**known_functions, **{\n+            \"sinc\": [(lambda x: x != 0, \"sin(%s)/%s\" % (\"%s\", \"%s\")), (lambda x: x == 0, \"1\")]\n+        }}\n         userfuncs = settings.get('user_functions', {})\n         self.known_functions.update(userfuncs)\n         self._dereference = set(settings.get('dereference', []))\n", "instance_id": "sympy__sympy-11400"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex dc084b8692..3d81a32ce6 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -163,6 +163,21 @@ class ValidationError(Exception):\n             error_dict.setdefault(NON_FIELD_ERRORS, []).extend(self.error_list)\n         return error_dict\n \n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return False\n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            return (\n+                set(self.error_dict.keys()) == set(other.error_dict.keys()) and\n+                all(\n+                    sorted(self.error_dict[key]) == sorted(other.error_dict[key])\n+                    for key in self.error_dict\n+                )\n+            )\n+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):\n+            return sorted(self.error_list) == sorted(other.error_list)\n+        return False\n+\n     def __iter__(self):\n         if hasattr(self, 'error_dict'):\n             for field, errors in self.error_dict.items():\n", "instance_id": "django__django-13220"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..13accdcec 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -78,7 +78,7 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n \n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \n", "instance_id": "scikit-learn__scikit-learn-13779"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b3cfc6723c..f6c4b7fc2f 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -163,7 +163,7 @@ class UserChangeForm(forms.ModelForm):\n         super().__init__(*args, **kwargs)\n         password = self.fields.get(\"password\")\n         if password:\n-            password.help_text = password.help_text.format(\"../password/\")\n+            password.help_text = password.help_text.format(f\"../../{self.instance.pk}/password/\")\n         user_permissions = self.fields.get(\"user_permissions\")\n         if user_permissions:\n             user_permissions.queryset = user_permissions.queryset.select_related(\n", "instance_id": "django__django-16139"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/src/_pytest/junitxml.py b/src/_pytest/junitxml.py\nindex 15c630b1d..ac11f10e1 100644\n--- a/src/_pytest/junitxml.py\n+++ b/src/_pytest/junitxml.py\n@@ -9,6 +9,8 @@ Output conforms to https://github.com/jenkinsci/xunit-plugin/blob/master/\n src/main/resources/org/jenkinsci/plugins/xunit/types/model/xsd/junit-10.xsd\n \"\"\"\n import functools\n+import socket\n+from datetime import datetime\n import os\n import re\n import sys\n@@ -482,6 +484,8 @@ class LogXML:\n         self.log_passing_tests = log_passing_tests\n         self.report_duration = report_duration\n         self.family = family\n+        self.hostname = socket.gethostname()\n+        self.timestamp = None\n         self.stats = dict.fromkeys([\"error\", \"passed\", \"failure\", \"skipped\"], 0)\n         self.node_reporters = {}  # nodeid -> _NodeReporter\n         self.node_reporters_ordered = []\n@@ -640,7 +644,9 @@ class LogXML:\n     def pytest_sessionstart(self):\n         self.suite_start_time = time.time()\n \n-    def pytest_sessionfinish(self):\n+    def pytest_sessionstart(self):\n+        self.suite_start_time = time.time()\n+        self.timestamp = datetime.utcnow().isoformat()\n         dirname = os.path.dirname(os.path.abspath(self.logfile))\n         if not os.path.isdir(dirname):\n             os.makedirs(dirname)\n", "instance_id": "pytest-dev__pytest-5692"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/utils/text.py b/django/utils/text.py\nindex fb5f6298c4..5aefb80f9d 100644\n--- a/django/utils/text.py\n+++ b/django/utils/text.py\n@@ -403,7 +403,8 @@ def slugify(value, allow_unicode=False):\n     else:\n         value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore').decode('ascii')\n     value = re.sub(r'[^\\w\\s-]', '', value.lower()).strip()\n-    return re.sub(r'[-\\s]+', '-', value)\n+    value = re.sub(r'[-\\s]+', '-', value)\n+    return value.strip('-_')\n \n \n def camel_case_to_spaces(value):\n", "instance_id": "django__django-12983"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 09e2b00735..f33ebd1b4e 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -28,6 +28,7 @@\n     annotated\n \n from sympy.utilities import default_sort_key\n+from sympy.vector.vector import Vector\n \n # rename for usage from outside\n pprint_use_unicode = pretty_use_unicode\n@@ -291,14 +292,15 @@ def _print_Equivalent(self, e, altchar=None):\n         else:\n             return self._print_Function(e, sort=True)\n \n-    def _print_conjugate(self, e):\n-        pform = self._print(e.args[0])\n-        return prettyForm( *pform.above( hobj('_', pform.width())) )\n-\n     def _print_Abs(self, e):\n         pform = self._print(e.args[0])\n         pform = prettyForm(*pform.parens('|', '|'))\n         return pform\n+\n+    _print_Determinant = _print_Abs\n+\n+    def _print_Vector(self, e):\n+        return e._pretty(self)\n     _print_Determinant = _print_Abs\n \n     def _print_floor(self, e):\ndiff --git a/sympy/vector/vector.py b/sympy/vector/vector.py\nindex c62b1dbf0d..dddba988c0 100755\n--- a/sympy/vector/vector.py\n+++ b/sympy/vector/vector.py\n@@ -10,6 +10,24 @@\n \n \n class Vector(BasisDependent):\n+    def _pretty(self, printer, *args):\n+        from sympy.printing.pretty.stringpict import prettyForm\n+        from sympy.printing.pretty.pretty_symbology import pretty_symbol\n+        components = self.components\n+        pforms = []\n+        for base, measure in components.items():\n+            pform = printer._print(measure)\n+            base_pform = prettyForm(pretty_symbol(base._pretty_form))\n+            pform = prettyForm(*pform.right(base_pform))\n+            pforms.append(pform)\n+        if not pforms:\n+            return prettyForm('0')\n+        result = pforms[0]\n+        for pform in pforms[1:]:\n+            result = prettyForm(*result.right(' + '))\n+            result = prettyForm(*result.right(pform))\n+        result.baseline = result.height() // 2\n+        return result\n     \"\"\"\n     Super class for all Vector classes.\n     Ideally, neither this class nor any of its subclasses should be\n", "instance_id": "sympy__sympy-14308"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/astropy/nddata/nddata.py b/astropy/nddata/nddata.py\nindex 8201a5fa55..fc33da0fed 100644\n--- a/astropy/nddata/nddata.py\n+++ b/astropy/nddata/nddata.py\n@@ -13,7 +13,7 @@ from astropy.utils.metadata import MetaData\n from astropy.wcs.wcsapi import SlicedLowLevelWCS  # noqa: F401\n from astropy.wcs.wcsapi import BaseHighLevelWCS, BaseLowLevelWCS, HighLevelWCSWrapper\n \n-from .nddata_base import NDDataBase\n+from .nddata_base import NDDataBase, NDDataRef\n from .nduncertainty import NDUncertainty, UnknownUncertainty\n \n __all__ = [\"NDData\"]\n@@ -327,7 +327,10 @@ class NDData(NDDataBase):\n \n     @mask.setter\n     def mask(self, value):\n-        self._mask = value\n+        if value is None:\n+            self._mask = None\n+        else:\n+            self._mask = np.asarray(value)\n \n     @property\n     def unit(self):\n", "instance_id": "astropy__astropy-14995"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex f50d8200e..576f313e8 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -396,6 +396,11 @@ def _call_reprcompare(ops, results, expls, each_obj):\n         custom = util._reprcompare(ops[i], each_obj[i], each_obj[i + 1])\n         if custom is not None:\n             return custom\n+    if isinstance(each_obj[i], bytes) and isinstance(each_obj[i + 1], bytes):\n+        return \"b'{}' == b'{}'\".format(\n+            each_obj[i].decode('ascii', 'backslashreplace'),\n+            each_obj[i + 1].decode('ascii', 'backslashreplace')\n+        )\n     return expl\n \n \n", "instance_id": "pytest-dev__pytest-5495"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/contrib/auth/migrations/0011_update_proxy_permissions.py b/django/contrib/auth/migrations/0011_update_proxy_permissions.py\nindex 0e66649695..e206f0de53 100644\n--- a/django/contrib/auth/migrations/0011_update_proxy_permissions.py\n+++ b/django/contrib/auth/migrations/0011_update_proxy_permissions.py\n@@ -24,10 +24,17 @@ def update_proxy_model_permissions(apps, schema_editor, reverse=False):\n         proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)\n         old_content_type = proxy_content_type if reverse else concrete_content_type\n         new_content_type = concrete_content_type if reverse else proxy_content_type\n-        Permission.objects.filter(\n+        existing_permissions = Permission.objects.filter(\n+            permissions_query,\n+            content_type=new_content_type,\n+        ).values_list('codename', flat=True)\n+\n+        permissions_to_update = Permission.objects.filter(\n             permissions_query,\n             content_type=old_content_type,\n-        ).update(content_type=new_content_type)\n+        ).exclude(codename__in=existing_permissions)\n+\n+        permissions_to_update.update(content_type=new_content_type)\n \n \n def revert_proxy_model_permissions(apps, schema_editor):\n", "instance_id": "django__django-11283"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 2c4a33616..18998e2f6 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,7 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+            proba[:, class_idx] = np.asarray(calibrator.predict(this_pred)).flatten()\n \n         # Normalize the probabilities\n         if n_classes == 2:\n", "instance_id": "scikit-learn__scikit-learn-25500"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..866a43afe3 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -895,13 +895,16 @@ def __new__(cls, *args, **kwargs):\n         # counting starts from 1.\n \n         temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+        if is_cycle:\n+            # Apply cycles in left-to-right order\n+            c = Cycle()\n+            for ci in args:\n+                c = c(*ci)\n+            aform = c.list()\n+        else:\n+            if has_dups(temp):\n                 raise ValueError('there were repeated elements.')\n-        temp = set(temp)\n+            temp = set(temp)\n \n         if not is_cycle and \\\n                 any(i not in temp for i in range(len(temp))):\n", "instance_id": "sympy__sympy-12481"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/core/cache/backends/filebased.py b/django/core/cache/backends/filebased.py\nindex 631da49444..215fefbcc0 100644\n--- a/django/core/cache/backends/filebased.py\n+++ b/django/core/cache/backends/filebased.py\n@@ -90,10 +90,11 @@ class FileBasedCache(BaseCache):\n \n     def has_key(self, key, version=None):\n         fname = self._key_to_file(key, version)\n-        if os.path.exists(fname):\n+        try:\n             with open(fname, \"rb\") as f:\n                 return not self._is_expired(f)\n-        return False\n+        except FileNotFoundError:\n+            return False\n \n     def _cull(self):\n         \"\"\"\n", "instance_id": "django__django-16379"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex a0eb97792e..627cf55ac4 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1403,9 +1403,37 @@ def _print_Piecewise(self, expr):\n         tex = r\"\\begin{cases} %s \\end{cases}\"\n         return tex % r\" \\\\\".join(ecpairs)\n \n+    def _print_Trace(self, expr):\n+        return r\"\\operatorname{tr}\\left(%s\\right)\" % self._print(expr.arg)\n+\n     def _print_MatrixBase(self, expr):\n         lines = []\n \n+        for line in range(expr.rows):  # horrible, should be 'rows'\n+            lines.append(\" & \".join([ self._print(i) for i in expr[line, :] ]))\n+\n+        mat_str = self._settings['mat_str']\n+        if mat_str is None:\n+            if self._settings['mode'] == 'inline':\n+                mat_str = 'smallmatrix'\n+            else:\n+                if (expr.cols <= 10) is True:\n+                    mat_str = 'matrix'\n+                else:\n+                    mat_str = 'array'\n+\n+        out_str = r'\\begin{%MATSTR%}%s\\end{%MATSTR%}'\n+        out_str = out_str.replace('%MATSTR%', mat_str)\n+        if mat_str == 'array':\n+            out_str = out_str.replace('%s', '{' + 'c'*expr.cols + '}%s')\n+        if self._settings['mat_delim']:\n+            left_delim = self._settings['mat_delim']\n+            right_delim = self._delim_dict[left_delim]\n+            out_str = r'\\left' + left_delim + out_str + \\\n+                      r'\\right' + right_delim\n+        return out_str % r\"\\\\\".join(lines)\n+        lines = []\n+\n         for line in range(expr.rows):  # horrible, should be 'rows'\n             lines.append(\" & \".join([ self._print(i) for i in expr[line, :] ]))\n \n", "instance_id": "sympy__sympy-15308"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c2623f099f..e6dca9b1c5 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -9,6 +9,7 @@ import copy\n import functools\n import inspect\n from collections import namedtuple\n+from collections.abc import dict_keys, dict_values\n \n from django.core.exceptions import FieldError\n from django.db.models.constants import LOOKUP_SEP\n@@ -38,7 +39,9 @@ class Q(tree.Node):\n     conditional = True\n \n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n-        super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n+        # Convert non-pickleable types to list\n+        children = [*args, *sorted((k, list(v) if isinstance(v, (dict_keys, dict_values)) else v) for k, v in kwargs.items())]\n+        super().__init__(children=children, connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n         if not isinstance(other, Q):\n", "instance_id": "django__django-14016"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..e0a42aeb14 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -233,6 +233,8 @@ class HttpResponseBase:\n             return bytes(value)\n         if isinstance(value, str):\n             return bytes(value.encode(self.charset))\n+        if isinstance(value, memoryview):\n+            return value.tobytes()\n         # Handle non-string types.\n         return str(value).encode(self.charset)\n \n", "instance_id": "django__django-11133"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..1304f20a60 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n", "instance_id": "django__django-11099"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2903b8995..7f5b3dd05 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -968,6 +968,9 @@ warn_explicit(\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n+        if self._is_all_or_any(call):\n+            return self._unroll_all_any(call)\n+\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n@@ -991,6 +994,34 @@ warn_explicit(\n         outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n         return res, outer_expl\n \n+    def _is_all_or_any(self, call):\n+        \"\"\"Check if the call is to `all` or `any`.\"\"\"\n+        return (\n+            isinstance(call.func, ast.Name)\n+            and call.func.id in {\"all\", \"any\"}\n+            and len(call.args) == 1\n+            and isinstance(call.args[0], (ast.GeneratorExp, ast.ListComp))\n+        )\n+\n+    def _unroll_all_any(self, call):\n+        \"\"\"Unroll `all` or `any` calls to individual assertions.\"\"\"\n+        func_name = call.func.id\n+        iterable = call.args[0]\n+        elements = iterable.elt\n+        test_func = ast.Name(id='assert', ctx=ast.Load())\n+\n+        if func_name == \"all\":\n+            test = elements\n+        else:\n+            test = ast.UnaryOp(op=ast.Not(), operand=elements)\n+\n+        new_body = []\n+        for elt in iterable.generators[0].iter.elts:\n+            new_call = ast.Call(func=test_func, args=[test], keywords=[])\n+            new_body.append(ast.Expr(value=new_call))\n+\n+        return new_body, \"Unrolled {} call\".format(func_name)\n+\n     def visit_Starred(self, starred):\n         # From Python 3.5, a Starred node can appear in a function call\n         res, expl = self.visit(starred.value)\n", "instance_id": "pytest-dev__pytest-5103"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/seaborn/_stats/regression.py b/seaborn/_stats/regression.py\nindex 7b7ddc8d..7359b027 100644\n--- a/seaborn/_stats/regression.py\n+++ b/seaborn/_stats/regression.py\n@@ -21,6 +21,7 @@ class PolyFit(Stat):\n \n     def _fit_predict(self, data):\n \n+        data = data.dropna(subset=[\"x\", \"y\"])\n         x = data[\"x\"]\n         y = data[\"y\"]\n         if x.nunique() <= self.order:\n", "instance_id": "mwaskom__seaborn-3010"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 61f88401ab..2c7054e93d 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -407,6 +407,9 @@ class BaseDatabaseSchemaEditor:\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n             **constraint_kwargs\n         )\n+        # Filter out unique constraints if we are deleting an index.\n+        if constraint_kwargs.get('index') and not constraint_kwargs.get('unique'):\n+            constraint_names = [name for name in constraint_names if not name.endswith('_uniq')]\n         if len(constraint_names) != 1:\n             raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n                 len(constraint_names),\n", "instance_id": "django__django-12708"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 1edc712358..7099510109 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -403,7 +403,10 @@ def convert(expr):\n                     and ldenom <= 2 and not \"^\" in sdenom:\n                 # handle short fractions\n                 if self._needs_mul_brackets(numer, last=False):\n-                    tex += r\"\\left(%s\\right) / %s\" % (snumer, sdenom)\n+                    if denom.is_Add:\n+                        tex += r\"\\frac{%s}{\\left(%s\\right)}\" % (snumer, sdenom)\n+                    else:\n+                        tex += r\"\\left(%s\\right) / %s\" % (snumer, sdenom)\n                 else:\n                     tex += r\"%s / %s\" % (snumer, sdenom)\n             elif len(snumer.split()) > ratio*ldenom:\n@@ -431,7 +434,13 @@ def convert(expr):\n                 else:\n                     tex += r\"\\frac{1}{%s}%s%s\" % (sdenom, separator, snumer)\n             else:\n-                tex += r\"\\frac{%s}{%s}\" % (snumer, sdenom)\n+                if self._needs_mul_brackets(numer, last=False):\n+                    if denom.is_Add:\n+                        tex += r\"\\frac{%s}{\\left(%s\\right)}\" % (snumer, sdenom)\n+                    else:\n+                        tex += r\"\\left(%s\\right) / %s\" % (snumer, sdenom)\n+                else:\n+                    tex += r\"%s / %s\" % (snumer, sdenom)\n \n         if include_parens:\n             tex += \")\"\n@@ -463,6 +472,8 @@ def _print_Pow(self, expr):\n             return r\"%s^{%s/%s}\" % (base, p, q)\n         elif expr.exp.is_Rational and expr.exp.is_negative and expr.base.is_commutative:\n             # Things like 1/x\n+            if expr.base.is_Add:\n+                return r\"\\frac{1}{\\left(%s\\right)}\" % self._print(Pow(expr.base, -expr.exp, evaluate=False))\n             return self._print_Mul(expr)\n         else:\n             if expr.base.is_Function:\n", "instance_id": "sympy__sympy-11897"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/neighbors/nca.py b/sklearn/neighbors/nca.py\nindex 1d278b6e1..a4777933d 100644\n--- a/sklearn/neighbors/nca.py\n+++ b/sklearn/neighbors/nca.py\n@@ -299,7 +299,13 @@ class NeighborhoodComponentsAnalysis(BaseEstimator, TransformerMixin):\n \n         # Check the preferred dimensionality of the projected space\n         if self.n_components is not None:\n-            check_scalar(self.n_components, 'n_components', int, 1)\n+            if not isinstance(self.n_components, (int, np.integer)):\n+                raise TypeError(\"`n_components` should be an integer, got \"\n+                                \"{} instead.\".format(type(self.n_components)))\n+            if self.n_components < 1:\n+                raise ValueError(\"`n_components` should be greater than or \"\n+                                 \"equal to 1, got {} instead.\"\n+                                 .format(self.n_components))\n \n             if self.n_components > X.shape[1]:\n                 raise ValueError('The preferred dimensionality of the '\n@@ -319,7 +325,12 @@ class NeighborhoodComponentsAnalysis(BaseEstimator, TransformerMixin):\n                                          self.components_.shape[1]))\n \n         check_scalar(self.max_iter, 'max_iter', int, 1)\n-        check_scalar(self.tol, 'tol', float, 0.)\n+        if not isinstance(self.tol, (float, int, np.integer)):\n+            raise TypeError(\"`tol` should be a float or an integer, got \"\n+                            \"{} instead.\".format(type(self.tol)))\n+        if self.tol < 0:\n+            raise ValueError(\"`tol` should be non-negative, got {} instead.\"\n+                             .format(self.tol))\n         check_scalar(self.verbose, 'verbose', int, 0)\n \n         if self.callback is not None:\n", "instance_id": "scikit-learn__scikit-learn-14092"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\nindex d4e3cfcc90..d0e0317ebb 100644\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -518,7 +518,9 @@ def vel(self, frame):\n         \"\"\"\n \n         _check_frame(frame)\n-        if not (frame in self._vel_dict):\n+        if frame not in self._vel_dict:\n+            if any(frame in point._vel_dict for point in self._pos_dict):\n+                return self.pos_from(next(point for point in self._pos_dict if frame in point._vel_dict)).dt(frame)\n             raise ValueError('Velocity of point ' + self.name + ' has not been'\n                              ' defined in ReferenceFrame ' + frame.name)\n         return self._vel_dict[frame]\n", "instance_id": "sympy__sympy-20049"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 28374272f4..ecd68dd937 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -516,17 +516,20 @@ class Field(RegisterLookupMixin):\n     def __eq__(self, other):\n         # Needed for @total_ordering\n         if isinstance(other, Field):\n-            return self.creation_counter == other.creation_counter\n+            return (self.creation_counter == other.creation_counter and\n+                    getattr(self, 'model', None) == getattr(other, 'model', None))\n         return NotImplemented\n \n     def __lt__(self, other):\n         # This is needed because bisect does not take a comparison function.\n         if isinstance(other, Field):\n+            if self.creation_counter == other.creation_counter:\n+                return getattr(self, 'model', None) < getattr(other, 'model', None)\n             return self.creation_counter < other.creation_counter\n         return NotImplemented\n \n     def __hash__(self):\n-        return hash(self.creation_counter)\n+        return hash((self.creation_counter, getattr(self, 'model', None)))\n \n     def __deepcopy__(self, memodict):\n         # We don't have to deepcopy very much here, since most things are not\n", "instance_id": "django__django-13401"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\nindex b7d9d26389..b083d58dc9 100644\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -1,10 +1,13 @@\n import threading\n import warnings\n import weakref\n+import logging\n \n from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.inspect import func_accepts_kwargs\n \n+logger = logging.getLogger(__name__)\n+\n \n def _make_id(target):\n     if hasattr(target, '__func__'):\n@@ -209,7 +212,7 @@ class Signal:\n                 response = receiver(signal=self, sender=sender, **named)\n             except Exception as err:\n                 responses.append((receiver, err))\n-            else:\n+                logger.exception('Error in signal handler')\n                 responses.append((receiver, response))\n         return responses\n \n", "instance_id": "django__django-13768"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..99706dcf 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1018,20 +1018,22 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(rule.subdomain or current_app.config['SERVER_NAME']) for rule in rules),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n     for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+        domain = rule.subdomain or current_app.config['SERVER_NAME']\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n", "instance_id": "pallets__flask-5063"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\nindex 8a1bd3625..a18791c54 100644\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -111,6 +111,11 @@ class IsolationForest(BaseBagging, OutlierMixin):\n            ``behaviour`` parameter will be deprecated in 0.22 and removed in\n            0.24.\n \n+    warm_start : bool, optional (default=False)\n+        When set to ``True``, reuse the solution of the previous call to fit\n+        and add more estimators to the ensemble, otherwise, just fit a whole\n+        new forest. See :term:`the Glossary <warm_start>`.\n+\n     random_state : int, RandomState instance or None, optional (default=None)\n         If int, random_state is the seed used by the random number generator;\n         If RandomState instance, random_state is the random number generator;\n@@ -173,8 +178,9 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                  n_jobs=None,\n                  behaviour='old',\n                  random_state=None,\n-                 verbose=0):\n-        super().__init__(\n+                 verbose=0,\n+                 warm_start=False):\n+        super().__init__( \n             base_estimator=ExtraTreeRegressor(\n                 max_features=1,\n                 splitter='random',\n@@ -187,7 +193,8 @@ class IsolationForest(BaseBagging, OutlierMixin):\n             max_features=max_features,\n             n_jobs=n_jobs,\n             random_state=random_state,\n-            verbose=verbose)\n+            verbose=verbose,\n+            warm_start=warm_start)\n \n         self.behaviour = behaviour\n         self.contamination = contamination\n", "instance_id": "scikit-learn__scikit-learn-13496"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..fb22a6c9 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -119,6 +119,9 @@ class Scale:\n         else:\n             trans_data = data\n \n+        if trans_data.dtype == bool:\n+            trans_data = trans_data.astype(int)\n+\n         for func in self._pipeline:\n             if func is not None:\n                 trans_data = func(trans_data)\n@@ -341,6 +344,9 @@ class ContinuousBase(Scale):\n         new._matplotlib_scale = mpl_scale\n \n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if data.dtype == bool:\n+            data = data.astype(int)\n+\n         if prop.normed:\n             if new.norm is None:\n                 vmin, vmax = data.min(), data.max()\n", "instance_id": "mwaskom__seaborn-3190"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex a436880c4b..5705c821c2 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,7 +175,7 @@ def _collect_factor_and_dimension(self, expr):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n                         'but it should be {}'.format(\n", "instance_id": "sympy__sympy-24213"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 73c20334d0..ad06668efe 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -152,7 +152,7 @@ def __new__(cls, *args, **kwargs):\n                         'warn' or 'ignore'.'''))\n         if any(coords[dim:]):\n             raise ValueError('Nonzero coordinates cannot be removed.')\n-        if any(a.is_number and im(a) for a in coords):\n+        if evaluate and any(a.is_number and im(a) for a in coords):\n             raise ValueError('Imaginary coordinates are not permitted.')\n         if not all(isinstance(a, Expr) for a in coords):\n             raise TypeError('Coordinates must be valid SymPy expressions.')\n", "instance_id": "sympy__sympy-22714"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex fdac0f3560..fe8a50fc43 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2180,12 +2180,12 @@ class Axes(_AxesBase):\n             # wrap numpy arrays.\n             try:\n                 x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n-                pass\n+            except (TypeError, IndexError, KeyError, StopIteration):\n+                x0 = np.nan\n \n             try:\n                 x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n+            except (TypeError, IndexError, KeyError, StopIteration):\n                 x = xconv\n \n             delist = False\n", "instance_id": "matplotlib__matplotlib-24149"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 70e6953559..f782b08faf 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -180,6 +180,7 @@ def numbered_string_incr(s, start=0):\n _uniquely_named_symbol = uniquely_named_symbol\n \n class Symbol(AtomicExpr, Boolean):\n+    __slots__ = ('name', '_assumptions')\n     \"\"\"\n     Assumptions:\n        commutative = True\n@@ -349,6 +350,7 @@ def as_set(self):\n \n \n class Dummy(Symbol):\n+    __slots__ = ('dummy_index',)\n     \"\"\"Dummy symbols are each unique, even if they have the same name:\n \n     Examples\n@@ -417,6 +419,7 @@ def _hashable_content(self):\n \n \n class Wild(Symbol):\n+    __slots__ = ('exclude', 'properties')\n     \"\"\"\n     A Wild symbol matches anything, or anything\n     without whatever is explicitly excluded.\n", "instance_id": "sympy__sympy-20590"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ea51912e8b..ac91ed5ff9 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1166,6 +1166,8 @@ class Query(BaseExpression):\n         lookup = lookup_class(lhs, rhs)\n         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all\n         # uses of None as a query value unless the lookup supports it.\n+        if lookup_name == 'isnull' and not isinstance(lookup.rhs, bool):\n+            raise ValueError(\"The '__isnull' lookup only supports boolean values.\")\n         if lookup.rhs is None and not lookup.can_use_none_as_rhs:\n             if lookup_name not in ('exact', 'iexact'):\n                 raise ValueError(\"Cannot use None as a query value\")\n", "instance_id": "django__django-11905"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "sympy__sympy-18199"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..bba0f05c65 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -62,12 +62,14 @@ class MigrationRecorder:\n         # in the codebase.\n         if self.has_table():\n             return\n-        # Make the table\n-        try:\n-            with self.connection.schema_editor() as editor:\n-                editor.create_model(self.Migration)\n-        except DatabaseError as exc:\n-            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n+        # Check if migration is allowed on this database\n+        if router.allow_migrate(self.connection.alias, self.Migration):\n+            # Make the table\n+            try:\n+                with self.connection.schema_editor() as editor:\n+                    editor.create_model(self.Migration)\n+            except DatabaseError as exc:\n+                raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n     def applied_migrations(self):\n         \"\"\"\n@@ -83,13 +85,15 @@ class MigrationRecorder:\n \n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.create(app=app, name=name)\n+        if router.allow_migrate(self.connection.alias, self.Migration):\n+            self.ensure_schema()\n+            self.migration_qs.create(app=app, name=name)\n \n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n-        self.migration_qs.filter(app=app, name=name).delete()\n+        if router.allow_migrate(self.connection.alias, self.Migration):\n+            self.ensure_schema()\n+            self.migration_qs.filter(app=app, name=name).delete()\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n", "instance_id": "django__django-15252"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex dd36dea304..53ca4c181d 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -1738,20 +1738,6 @@ def partitions(n, m=None, k=None, size=False):\n     {2: 1, 4: 1}\n     {3: 2}\n \n-    Note that the _same_ dictionary object is returned each time.\n-    This is for speed:  generating each partition goes quickly,\n-    taking constant time, independent of n.\n-\n-    >>> [p for p in partitions(6, k=2)]\n-    [{1: 6}, {1: 6}, {1: 6}, {1: 6}]\n-\n-    If you want to build a list of the returned dictionaries then\n-    make a copy of them:\n-\n-    >>> [p.copy() for p in partitions(6, k=2)]  # doctest: +SKIP\n-    [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n-    >>> [(M, p.copy()) for M, p in partitions(6, k=2, size=True)]  # doctest: +SKIP\n-    [(3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})]\n \n     References\n     ==========\n@@ -1802,9 +1788,9 @@ def partitions(n, m=None, k=None, size=False):\n         keys.append(r)\n     room = m - q - bool(r)\n     if size:\n-        yield sum(ms.values()), ms\n+        yield sum(ms.values()), ms.copy()\n     else:\n-        yield ms\n+        yield ms.copy()\n \n     while keys != [1]:\n         # Reuse any 1's.\n", "instance_id": "sympy__sympy-20154"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex f0c81c123b..ef03698723 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -298,6 +298,11 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             disable_constraints=False,\n         )\n \n+        # Recreate unique constraints\n+        for constraint in constraints:\n+            if isinstance(constraint, UniqueConstraint):\n+                self.add_constraint(model, constraint)\n+\n         # Run deferred SQL on correct table\n         for sql in self.deferred_sql:\n             self.execute(sql)\n", "instance_id": "django__django-14997"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "django__django-14411"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex b4c38368bf..6b45446427 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -186,7 +186,10 @@ class FigureBase(Artist):\n         # groupers to keep track of x and y labels we want to align.\n         # see self.align_xlabels and self.align_ylabels and\n         # axis._get_tick_boxes_siblings\n-        self._align_label_groups = {\"x\": cbook.Grouper(), \"y\": cbook.Grouper()}\n+        self._align_label_groups = {\n+            \"x\": cbook.Grouper(weak_ref=False),\n+            \"y\": cbook.Grouper(weak_ref=False)\n+        }\n \n         self.figure = self\n         self._localaxes = []  # track all axes\n", "instance_id": "matplotlib__matplotlib-25332"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 056d9bc497..43445c3516 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -86,10 +86,9 @@ def entry(i, j):\n                 return self[i, j]\n             elif pos <= j < pos + other.cols:\n                 return other[i, j - pos]\n-            return self[i, j - pos - other.cols]\n+            return self[i, j - other.cols]\n \n-        return self._new(self.rows, self.cols + other.cols,\n-                         lambda i, j: entry(i, j))\n+        return self._new(self.rows, self.cols + other.cols, entry)\n \n     def _eval_col_join(self, other):\n         rows = self.rows\n", "instance_id": "sympy__sympy-13647"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 02aa32b207..1b00a214a1 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -125,28 +125,26 @@ class Media:\n         in a certain order. In JavaScript you may not be able to reference a\n         global or in CSS you might want to override a style.\n         \"\"\"\n-        # Start with a copy of list_1.\n-        combined_list = list(list_1)\n-        last_insert_index = len(list_1)\n-        # Walk list_2 in reverse, inserting each element into combined_list if\n-        # it doesn't already exist.\n-        for path in reversed(list_2):\n-            try:\n-                # Does path already exist in the list?\n-                index = combined_list.index(path)\n-            except ValueError:\n-                # Add path to combined_list since it doesn't exist.\n-                combined_list.insert(last_insert_index, path)\n+        combined_list = []\n+        list_1_indices = {v: i for i, v in enumerate(list_1)}\n+        list_2_indices = {v: i for i, v in enumerate(list_2)}\n+\n+        for item in list_1:\n+            if item in list_2_indices:\n+                combined_list.append(item)\n+                list_2_indices.pop(item)\n             else:\n-                if index > last_insert_index:\n-                    warnings.warn(\n-                        'Detected duplicate Media files in an opposite order:\\n'\n-                        '%s\\n%s' % (combined_list[last_insert_index], combined_list[index]),\n-                        MediaOrderConflictWarning,\n-                    )\n-                # path already exists in the list. Update last_insert_index so\n-                # that the following elements are inserted in front of this one.\n-                last_insert_index = index\n+                combined_list.append(item)\n+\n+        for item in list_2:\n+            if item in list_1_indices:\n+                if list_1_indices[item] < len(combined_list):\n+                    combined_list.insert(list_1_indices[item], item)\n+                else:\n+                    combined_list.append(item)\n+            else:\n+                combined_list.append(item)\n+\n         return combined_list\n \n     def __add__(self, other):\n", "instance_id": "django__django-11019"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\nindex f0b663222a..b51d1739a4 100644\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -56,7 +56,7 @@ class Command(BaseCommand):\n         targets = [(app_label, migration.name)]\n \n         # Show begin/end around output only for atomic migrations\n-        self.output_transaction = migration.atomic\n+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\n", "instance_id": "django__django-11039"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex ac45127fde..c0a09070b0 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -13,7 +13,7 @@ from django.db.models.constants import LOOKUP_SEP\n from django.db.models.deletion import CASCADE, SET_DEFAULT, SET_NULL\n from django.db.models.query_utils import PathInfo\n from django.db.models.utils import make_model_tuple\n-from django.utils.functional import cached_property\n+from django.utils.functional import cached_property, make_hashable\n from django.utils.translation import gettext_lazy as _\n \n from . import Field\n", "instance_id": "django__django-14672"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex dc413b5c2..8d26f1930 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -716,6 +716,15 @@ class Documenter:\n                 # Ignore non-string __doc__\n                 doc = None\n \n+            # Check if the member is an annotation-only member in the superclass\n+            if not doc:\n+                for base in inspect.getmro(self.object):\n+                    if base is not self.object:\n+                        annotations = get_type_hints(base, None, self.config.autodoc_type_aliases)\n+                        if membername in annotations:\n+                            doc = \"Annotation-only member in superclass\"\n+                            break\n+\n             # if the member __doc__ is the same as self's __doc__, it's just\n             # inherited and therefore not the member's doc\n             cls = self.get_attr(member, '__class__', None)\n", "instance_id": "sphinx-doc__sphinx-8801"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/geometry/util.py b/sympy/geometry/util.py\nindex d32adc3066..aafdaa48eb 100644\n--- a/sympy/geometry/util.py\n+++ b/sympy/geometry/util.py\n@@ -17,6 +17,8 @@\n     is_sequence, range, string_types, ordered)\n from sympy.core.containers import OrderedSet\n from .point import Point, Point2D\n+from .entity import GeometryEntity\n+from sympy.functions.elementary.miscellaneous import sqrt\n \n \n def find(x, equation):\n@@ -285,7 +287,6 @@ def closest_points(*args):\n     \"\"\"\n     from collections import deque\n     from math import hypot, sqrt as _sqrt\n-    from sympy.functions.elementary.miscellaneous import sqrt\n \n     p = [Point2D(i) for i in set(args)]\n     if len(p) < 2:\n@@ -565,17 +566,24 @@ def idiff(eq, y, x, n=1):\n     sympy.core.function.diff: explicitly differentiates wrt symbols\n \n     \"\"\"\n+    from sympy import Eq\n+\n+    if isinstance(eq, Eq):\n+        eq = eq.lhs - eq.rhs\n+\n     if is_sequence(y):\n         dep = set(y)\n         y = y[0]\n-    elif isinstance(y, Symbol):\n+    elif isinstance(y, (Symbol, Function)):\n         dep = {y}\n     else:\n         raise ValueError(\"expecting x-dependent symbol(s) but got: %s\" % y)\n \n-    f = dict([(s, Function(\n-        s.name)(x)) for s in eq.free_symbols if s != x and s in dep])\n-    dydx = Function(y.name)(x).diff(x)\n+    f = {s: Function(s.name)(x) for s in eq.free_symbols if s != x and s in dep}\n+    if isinstance(y, Function):\n+        dydx = y.diff(x)\n+    else:\n+        dydx = Function(y.name)(x).diff(x)\n     eq = eq.subs(f)\n     derivs = {}\n     for i in range(n):\n", "instance_id": "sympy__sympy-15678"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex d610dc86f0..636f4556a6 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1012,6 +1012,13 @@ class CharField(Field):\n             return value\n         return str(value)\n \n+    def from_db_value(self, value, expression, connection):\n+        if self.choices is not None and value is not None:\n+            for choice in self.choices:\n+                if choice[0] == value:\n+                    return choice[0]\n+        return value\n+\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n         return self.to_python(value)\n@@ -1778,6 +1785,13 @@ class IntegerField(Field):\n                 params={'value': value},\n             )\n \n+    def from_db_value(self, value, expression, connection):\n+        if self.choices is not None and value is not None:\n+            for choice in self.choices:\n+                if choice[0] == value:\n+                    return choice[0]\n+        return value\n+\n     def formfield(self, **kwargs):\n         return super().formfield(**{\n             'form_class': forms.IntegerField,\n", "instance_id": "django__django-11964"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..a6fd4798ea 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1508,7 +1508,7 @@ class DraggableBase:\n         ]\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1559,13 +1559,15 @@ class DraggableBase:\n     def disconnect(self):\n         \"\"\"Disconnect the callbacks.\"\"\"\n         for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n+            if self.canvas:\n+                self.canvas.mpl_disconnect(cid)\n         try:\n             c1 = self._c1\n         except AttributeError:\n             pass\n         else:\n-            self.canvas.mpl_disconnect(c1)\n+            if self.canvas:\n+                self.canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n", "instance_id": "matplotlib__matplotlib-25442"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 03cf57a30b..d01aa25dff 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1073,8 +1073,12 @@ def __new__(cls, *args, **kwargs):\n             args = list(cls._new_args_filter(args))\n             return simplify_union(args)\n \n-        args = list(ordered(args, Set._infimum_key))\n+        # Remove duplicates and order the arguments\n+        args = list(ordered(set(args), Set._infimum_key))\n \n+        # Handle the case where duplicates are present\n+        if len(args) == 1:\n+            return args[0]\n         obj = Basic.__new__(cls, *args)\n         obj._argset = frozenset(args)\n         return obj\n@@ -1291,6 +1295,12 @@ def _sup(self):\n         raise NotImplementedError()\n \n     def _contains(self, other):\n+        from sympy import Piecewise, Eq\n+        if len(self.args) == 2 and isinstance(self.args[0], FiniteSet) and isinstance(self.args[1], FiniteSet):\n+            common_elements = self.args[0].intersect(self.args[1])\n+            if len(common_elements) == 1:\n+                element = list(common_elements)[0]\n+                return Piecewise((common_elements, Eq(self.args[1].args[0], element)), (S.EmptySet, True))\n         return And(*[set.contains(other) for set in self.args])\n \n     def __iter__(self):\n", "instance_id": "sympy__sympy-16988"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 6e504a3057..af1cdd3b64 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -450,17 +450,17 @@ def preprocess(cls, domain):\n             if r is not None:\n                 return sympy.polys.domains.FF(int(r.groups()[1]))\n \n-            r = cls._re_polynomial.match(domain)\n-\n-            if r is not None:\n-                ground, gens = r.groups()\n-\n-                gens = list(map(sympify, gens.split(',')))\n-\n-                if ground in ['Z', 'ZZ']:\n-                    return sympy.polys.domains.ZZ.poly_ring(*gens)\n-                else:\n-                    return sympy.polys.domains.QQ.poly_ring(*gens)\n+            for regex, constructor in [\n+                (cls._re_realfield, lambda prec: sympy.polys.domains.RR if prec is None else sympy.polys.domains.RealField(int(prec))),\n+                (cls._re_complexfield, lambda prec: sympy.polys.domains.CC if prec is None else sympy.polys.domains.ComplexField(int(prec))),\n+                (cls._re_finitefield, lambda size: sympy.polys.domains.FF(int(size))),\n+                (cls._re_polynomial, lambda ground, gens: (sympy.polys.domains.ZZ if ground in ['Z', 'ZZ'] else sympy.polys.domains.QQ).poly_ring(*map(sympify, gens.split(',')))),\n+                (cls._re_fraction, lambda ground, gens: (sympy.polys.domains.ZZ if ground in ['Z', 'ZZ'] else sympy.polys.domains.QQ).frac_field(*map(sympify, gens.split(',')))),\n+                (cls._re_algebraic, lambda gens: sympy.polys.domains.QQ.algebraic_field(*map(sympify, gens.split(','))))\n+            ]:\n+                r = regex.match(domain)\n+                if r:\n+                    return constructor(*r.groups())\n \n             r = cls._re_fraction.match(domain)\n \n@@ -480,7 +480,7 @@ def preprocess(cls, domain):\n                 gens = list(map(sympify, r.groups()[1].split(',')))\n                 return sympy.polys.domains.QQ.algebraic_field(*gens)\n \n-        raise OptionError('expected a valid domain specification, got %s' % domain)\n+        raise OptionError(f\"Expected a valid domain specification, got '{domain}'. Valid domains include 'ZZ', 'QQ', 'RR', 'CC', 'EX', and polynomial rings like 'ZZ[x,y]', 'QQ[x,y]', etc.\")\n \n     @classmethod\n     def postprocess(cls, options):\ndiff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex d5ac051f63..18efb3c6ab 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -225,7 +225,7 @@ def _from_poly(cls, rep, opt):\n             else:\n                 rep = rep.reorder(*gens)\n \n-        if 'domain' in opt and domain:\n+        if domain:\n             rep = rep.set_domain(domain)\n         elif field is True:\n             rep = rep.to_field()\n", "instance_id": "sympy__sympy-14396"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 7a3de33522..69232fa917 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -629,7 +629,7 @@ def adjust(s, wid=None, how='<^>'):\n             # put the present prettyF to the right\n             prettyF = prettyForm(*prettySign.right(prettyF))\n \n-        prettyF.baseline = max_upper + sign_height//2\n+        prettyF.baseline = max_upper + sign_height//2 - 1\n         prettyF.binding = prettyForm.MUL\n         return prettyF\n \n", "instance_id": "sympy__sympy-16503"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex b6adb7ceb..00e2c3353 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -108,7 +108,11 @@ def import_object(modname: str, objpath: List[str], objtype: str = '',\n             obj = attrgetter(obj, mangled_name)\n             logger.debug('[autodoc] => %r', obj)\n             object_name = attrname\n-        return [module, parent, object_name, obj]\n+        # Check if __all__ is defined and empty\n+        if hasattr(module, '__all__') and not module.__all__:\n+            return [module, parent, object_name, []]\n+        else:\n+            return [module, parent, object_name, obj]\n     except (AttributeError, ImportError) as exc:\n         if isinstance(exc, AttributeError) and exc_on_importing:\n             # restore ImportError\n", "instance_id": "sphinx-doc__sphinx-8595"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex e4ddc8f017..7e152fdacb 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -396,6 +396,8 @@ def display_for_field(value, field, empty_value_display):\n         return formats.number_format(value, field.decimal_places)\n     elif isinstance(field, (models.IntegerField, models.FloatField)):\n         return formats.number_format(value)\n+    elif isinstance(field, models.JSONField):\n+        return field.value_from_object(value)\n     elif isinstance(field, models.FileField) and value:\n         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n     else:\n", "instance_id": "django__django-12308"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex e3c66ea67c..e6e85f963c 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -206,6 +206,18 @@ def _get_backend_mod():\n     return _backend_mod\n \n \n+def get_backend():\n+    \"\"\"\n+    Return the name of the current backend.\n+    \"\"\"\n+    # Save the current state of Gcf\n+    current_figs = _pylab_helpers.Gcf.figs.copy()\n+    backend = rcParams['backend']\n+    # Restore the state of Gcf\n+    _pylab_helpers.Gcf.figs = current_figs\n+    return backend\n+\n+\n def switch_backend(newbackend):\n     \"\"\"\n     Close all open figures and set the Matplotlib backend.\n", "instance_id": "matplotlib__matplotlib-23299"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 92fe4affb9..3a462f1c4c 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -277,6 +277,7 @@ class Collector:\n             if self.can_fast_delete(instance):\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n+                setattr(instance, model._meta.pk.attname, None)\n                 return count, {model._meta.label: count}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n", "instance_id": "django__django-11179"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..e72cdb5ac 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -291,12 +291,12 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             else:\n                 rep.outcome = \"passed\"\n                 rep.wasxfail = xfailed.reason\n-    elif (\n+    if (\n         item._store.get(skipped_by_mark_key, True)\n         and rep.skipped\n         and type(rep.longrepr) is tuple\n     ):\n-        # skipped by mark.skipif; change the location of the failure\n+        # skipped by mark.skipif or mark.skip; change the location of the failure\n         # to point to the item definition, otherwise it will display\n         # the location of where the skip exception was raised within pytest\n         _, _, reason = rep.longrepr\n", "instance_id": "pytest-dev__pytest-7432"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/simplify/fu.py b/sympy/simplify/fu.py\nindex ad1130ef96..3850071726 100644\n--- a/sympy/simplify/fu.py\n+++ b/sympy/simplify/fu.py\n@@ -501,9 +501,9 @@ def _f(rv):\n         if not (rv.is_Pow and rv.base.func == f):\n             return rv\n \n-        if (rv.exp < 0) == True:\n+        if rv.exp.is_negative:\n             return rv\n-        if (rv.exp > max) == True:\n+        if rv.exp.is_positive and rv.exp > max:\n             return rv\n         if rv.exp == 2:\n             return h(g(rv.base.args[0])**2)\n", "instance_id": "sympy__sympy-17139"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex f027a74976..9b55af2ff7 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -82,7 +82,7 @@ class Options:\n         self.verbose_name = None\n         self.verbose_name_plural = None\n         self.db_table = ''\n-        self.ordering = []\n+        self.ordering = getattr(meta, 'ordering', [])\n         self._ordering_clash = False\n         self.indexes = []\n         self.constraints = []\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex a7c16c4bd8..8757ff1cb8 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1200,10 +1200,15 @@ class QuerySet:\n             return True\n         if self.query.extra_order_by or self.query.order_by:\n             return True\n-        elif self.query.default_ordering and self.query.get_meta().ordering:\n-            return True\n-        else:\n-            return False\n+        if self.query.default_ordering:\n+            ordering = self.query.get_meta().ordering\n+            if ordering:\n+                return True\n+            # Check for inherited ordering\n+            for parent in self.model._meta.get_parent_list():\n+                if parent._meta.ordering:\n+                    return True\n+        return False\n \n     @property\n     def db(self):\n", "instance_id": "django__django-12470"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/parsing/mathematica.py b/sympy/parsing/mathematica.py\nindex 7ea14ce33a..9fa60cef50 100644\n--- a/sympy/parsing/mathematica.py\n+++ b/sympy/parsing/mathematica.py\n@@ -586,7 +586,7 @@ def parse(self, s):\n         \"##\": lambda: [\"SlotSequence\", \"1\"],\n     }\n \n-    _literal = r\"[A-Za-z][A-Za-z0-9]*\"\n+    _literal = r\"[\\w][\\w0-9]*\"\n     _number = r\"(?:[0-9]+(?:\\.[0-9]*)?|\\.[0-9]+)\"\n \n     _enclosure_open = [\"(\", \"[\", \"[[\", \"{\"]\n@@ -612,7 +612,7 @@ def _get_tokenizer(self):\n             for k in symdict:\n                 tokens_escape.append(k)\n         tokens_escape.sort(key=lambda x: -len(x))\n-        tokens.extend(map(re.escape, tokens_escape))\n+        tokens.extend(map(lambda x: re.escape(x), tokens_escape))\n         tokens.append(\",\")\n         tokens.append(\"\\n\")\n         tokenizer = re.compile(\"(\" + \"|\".join(tokens) + \")\")\n@@ -669,7 +669,7 @@ def _from_mathematica_to_tokens(self, code: str):\n     def _is_op(self, token: tUnion[str, list]) -> bool:\n         if isinstance(token, list):\n             return False\n-        if re.match(self._literal, token):\n+        if re.match(self._literal, token, re.UNICODE):\n             return False\n         if re.match(\"-?\" + self._number, token):\n             return False\n", "instance_id": "sympy__sympy-24102"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py\nindex 3903e4c98c..761cca2d91 100644\n--- a/django/contrib/admin/views/autocomplete.py\n+++ b/django/contrib/admin/views/autocomplete.py\n@@ -26,12 +26,15 @@ class AutocompleteJsonView(BaseListView):\n         context = self.get_context_data()\n         return JsonResponse({\n             'results': [\n-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n-                for obj in context['object_list']\n+                self.serialize_result(obj, to_field_name) for obj in context['object_list']\n             ],\n             'pagination': {'more': context['page_obj'].has_next()},\n         })\n \n+    def serialize_result(self, obj, to_field_name):\n+        \"\"\"Convert a single result to a dictionary.\"\"\"\n+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n+\n     def get_paginator(self, *args, **kwargs):\n         \"\"\"Use the ModelAdmin's paginator.\"\"\"\n         return self.model_admin.get_paginator(self.request, *args, **kwargs)\n", "instance_id": "django__django-14752"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/physics/units/prefixes.py b/sympy/physics/units/prefixes.py\nindex ca6a642156..4711d98e6f 100644\n--- a/sympy/physics/units/prefixes.py\n+++ b/sympy/physics/units/prefixes.py\n@@ -80,7 +80,10 @@ def __repr__(self):\n \n     def __mul__(self, other):\n         from sympy.physics.units import Quantity\n-        if not isinstance(other, (Quantity, Prefix)):\n+        from sympy.physics.units import Unit\n+        if isinstance(other, Unit):\n+            return other * self.scale_factor\n+        elif not isinstance(other, (Quantity, Prefix)):\n             return super().__mul__(other)\n \n         fact = self.scale_factor * other.scale_factor\n", "instance_id": "sympy__sympy-24909"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex b03ed4cd88..f78817cfa2 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -102,8 +102,8 @@ def get_total_scale_factor(expr):\n         return expr\n \n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n-    if depmat is None:\n-        return expr\n+    if depmat is None or not all(p.is_integer for p in depmat):\n+        return expr  # Return the original expression if units are orthogonal or cannot be converted directly\n \n     expr_scale_factor = get_total_scale_factor(expr)\n     return expr_scale_factor * Mul.fromiter((1/get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat))\n", "instance_id": "sympy__sympy-20442"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/parsing/latex/_antlr/latexparser.py b/sympy/parsing/latex/_antlr/latexparser.py\nindex 0fc7e5a7a6..62b45a47cc 100644\n--- a/sympy/parsing/latex/_antlr/latexparser.py\n+++ b/sympy/parsing/latex/_antlr/latexparser.py\n@@ -2309,14 +2309,20 @@ def frac(self):\n             self.state = 306\n             self.match(LaTeXParser.L_BRACE)\n             self.state = 307\n-            localctx.upper = self.expr()\n+            self.match(LaTeXParser.L_PAREN)\n             self.state = 308\n-            self.match(LaTeXParser.R_BRACE)\n+            localctx.upper = self.expr()\n             self.state = 309\n-            self.match(LaTeXParser.L_BRACE)\n+            self.match(LaTeXParser.R_PAREN)\n             self.state = 310\n-            localctx.lower = self.expr()\n+            self.match(LaTeXParser.L_BRACE)\n             self.state = 311\n+            self.match(LaTeXParser.L_PAREN)\n+            self.state = 312\n+            localctx.lower = self.expr()\n+            self.state = 313\n+            self.match(LaTeXParser.R_PAREN)\n+            self.state = 314\n             self.match(LaTeXParser.R_BRACE)\n         except RecognitionException as re:\n             localctx.exception = re\n", "instance_id": "sympy__sympy-21612"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/pylint/checkers/misc.py b/pylint/checkers/misc.py\nindex 69149e61a..059455bfc 100644\n--- a/pylint/checkers/misc.py\n+++ b/pylint/checkers/misc.py\n@@ -119,7 +119,7 @@ class EncodingChecker(BaseChecker):\n     def open(self):\n         super().open()\n \n-        notes = \"|\".join(re.escape(note) for note in self.config.notes)\n+        notes = \"|\".join(re.escape(note) if re.search(r'\\w', note) else re.escape(note) + r'\\b' for note in self.config.notes)\n         if self.config.notes_rgx:\n             regex_string = rf\"#\\s*({notes}|{self.config.notes_rgx})\\b\"\n         else:\n", "instance_id": "pylint-dev__pylint-5859"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 3adbc6979a..c22b7bc8ce 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -144,12 +144,14 @@ class BaseFormSet(RenderableFormMixin):\n     @cached_property\n     def management_form(self):\n         \"\"\"Return the ManagementForm instance for this FormSet.\"\"\"\n+        # Use a minimal renderer to avoid deprecation warning for default.html\n+        minimal_renderer = get_default_renderer()\n         if self.is_bound:\n             form = ManagementForm(\n                 self.data,\n                 auto_id=self.auto_id,\n                 prefix=self.prefix,\n-                renderer=self.renderer,\n+                renderer=minimal_renderer,\n             )\n             form.full_clean()\n         else:\n@@ -162,7 +164,7 @@ class BaseFormSet(RenderableFormMixin):\n                     MIN_NUM_FORM_COUNT: self.min_num,\n                     MAX_NUM_FORM_COUNT: self.max_num,\n                 },\n-                renderer=self.renderer,\n+                renderer=minimal_renderer,\n             )\n         return form\n \n", "instance_id": "django__django-15902"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 38da1e6ecc..d51d08f3a0 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -125,10 +125,19 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return (\n-            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n-            {\"import %s\" % module},\n-        )\n+        try:\n+            return (\n+                \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n+                {\"import %s\" % module},\n+            )\n+        except KeyError:\n+            # Handle combination of Enum flags\n+            members, _ = enum_class._decompose(self.value)\n+            member_names = \" | \".join(\"%s.%s.%s\" % (module, enum_class.__qualname__, member.name) for member in members)\n+            return (\n+                member_names,\n+                {\"import %s\" % module},\n+            )\n \n \n class FloatSerializer(BaseSimpleSerializer):\n", "instance_id": "django__django-15996"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8e55bd092d..fb195c206c 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -383,6 +383,8 @@ class Query(BaseExpression):\n                 # before the contains_aggregate/is_summary condition below.\n                 new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)\n                 new_exprs.append(new_expr)\n+            if isinstance(expr, Col) and expr.alias in self.group_by:\n+                new_exprs.append(expr)\n             else:\n                 # Reuse aliases of expressions already selected in subquery.\n                 for col_alias, selected_annotation in self.annotation_select.items():\n@@ -1023,6 +1025,8 @@ class Query(BaseExpression):\n                 not self.select_for_update):\n             clone.clear_ordering(True)\n         clone.where.resolve_expression(query, *args, **kwargs)\n+        if self.group_by:\n+            clone.group_by = self.group_by\n         for key, value in clone.annotations.items():\n             resolved = value.resolve_expression(query, *args, **kwargs)\n             if hasattr(resolved, 'external_aliases'):\n", "instance_id": "django__django-11797"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 8ddbb5ba68..c54767f592 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1309,7 +1309,7 @@ class ManyToManyField(RelatedField):\n                              \"through_fields keyword argument.\") % (self, from_model_name),\n                             hint=(\n                                 'If you want to create a recursive relationship, '\n-                                'use ForeignKey(\"%s\", symmetrical=False, through=\"%s\").'\n+                                'use ManyToManyField(\"%s\", through=\"%s\").'\n                             ) % (\n                                 RECURSIVE_RELATIONSHIP_CONSTANT,\n                                 relationship_model_name,\n", "instance_id": "django__django-12497"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 95302a05ca..6b1fdf3b4b 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -162,9 +162,12 @@ def structurally_equal(self, other):\n             and self.colblocksizes == other.colblocksizes)\n \n     def _blockmul(self, other):\n-        if (isinstance(other, BlockMatrix) and\n-                self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n+        if isinstance(other, BlockMatrix) and self.colblocksizes == other.rowblocksizes:\n+            result_blocks = self.blocks * other.blocks\n+            result_blocks = result_blocks.applyfunc(\n+                lambda x: ZeroMatrix(x.rows, x.cols) if x == 0 else x\n+            )\n+            return BlockMatrix(result_blocks)\n \n         return self * other\n \n@@ -460,21 +463,36 @@ def bc_matmul(expr):\n     else:\n         factor, matrices = expr.as_coeff_matrices()\n \n-    i = 0\n-    while (i+1 < len(matrices)):\n-        A, B = matrices[i:i+2]\n-        if isinstance(A, BlockMatrix) and isinstance(B, BlockMatrix):\n-            matrices[i] = A._blockmul(B)\n-            matrices.pop(i+1)\n-        elif isinstance(A, BlockMatrix):\n-            matrices[i] = A._blockmul(BlockMatrix([[B]]))\n-            matrices.pop(i+1)\n-        elif isinstance(B, BlockMatrix):\n-            matrices[i] = BlockMatrix([[A]])._blockmul(B)\n-            matrices.pop(i+1)\n+    def bc_matmul(expr):\n+        if isinstance(expr, MatPow):\n+            if expr.args[1].is_Integer:\n+                factor, matrices = (1, [expr.args[0]]*expr.args[1])\n+            else:\n+                return expr\n         else:\n-            i+=1\n-    return MatMul(factor, *matrices).doit()\n+            factor, matrices = expr.as_coeff_matrices()\n+\n+        i = 0\n+        while i + 1 < len(matrices):\n+            A, B = matrices[i:i + 2]\n+            if isinstance(A, BlockMatrix) and isinstance(B, BlockMatrix):\n+                matrices[i] = A._blockmul(B)\n+                matrices.pop(i + 1)\n+            elif isinstance(A, BlockMatrix):\n+                matrices[i] = A._blockmul(BlockMatrix([[B]]))\n+                matrices.pop(i + 1)\n+            elif isinstance(B, BlockMatrix):\n+                matrices[i] = BlockMatrix([[A]])._blockmul(B)\n+                matrices.pop(i + 1)\n+            else:\n+                i += 1\n+\n+        # Ensure zero blocks are treated as ZeroMatrix\n+        for i, mat in enumerate(matrices):\n+            if mat == 0:\n+                matrices[i] = ZeroMatrix(mat.rows, mat.cols)\n+\n+        return MatMul(factor, *matrices).doit()\n \n def bc_transpose(expr):\n     collapse = block_collapse(expr.arg)\n", "instance_id": "sympy__sympy-17630"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 66461181d0..ba8f8af8b2 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -92,6 +92,21 @@ def _print_Float(self, e):\n             full_prec = self._print_level == 1\n         return prettyForm(sstr(e, full_prec=full_prec))\n \n+    def _print_Vector(self, e):\n+        from sympy.vector.vector import Vector\n+        if isinstance(e, Vector):\n+            components = e.components\n+            pform = None\n+            for base_vector, measure in components.items():\n+                base_pform = self._print(base_vector)\n+                measure_pform = self._print(measure)\n+                term_pform = prettyForm(*measure_pform.right(base_pform))\n+                if pform is None:\n+                    pform = term_pform\n+                else:\n+                    pform = prettyForm(*pform.right(' + ', term_pform))\n+            return pform\n+\n     def _print_Cross(self, e):\n         vec1 = e._expr1\n         vec2 = e._expr2\ndiff --git a/sympy/vector/vector.py b/sympy/vector/vector.py\nindex 87320d0366..64562e5af8 100644\n--- a/sympy/vector/vector.py\n+++ b/sympy/vector/vector.py\n@@ -9,6 +9,7 @@\n from sympy.core.sympify import sympify\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.matrices.immutable import ImmutableDenseMatrix as Matrix\n+from sympy.printing.pretty.stringpict import prettyForm\n from sympy.vector.basisdependent import (BasisDependentZero,\n     BasisDependent, BasisDependentMul, BasisDependentAdd)\n from sympy.vector.coordsysrect import CoordSys3D\n@@ -274,6 +275,20 @@ def _projections(self):\n         base_vec = next(iter(_get_coord_systems(self))).base_vectors()\n         return tuple([self.dot(i) for i in base_vec])\n \n+    def _pretty(self, printer):\n+        from sympy.printing.pretty.stringpict import prettyForm\n+        components = self.components\n+        pform = None\n+        for base_vector, measure in components.items():\n+            base_pform = printer._print(base_vector)\n+            measure_pform = printer._print(measure)\n+            term_pform = prettyForm(*measure_pform.right(base_pform))\n+            if pform is None:\n+                pform = term_pform\n+            else:\n+                pform = prettyForm(*pform.right(' + ', term_pform))\n+        return pform\n+\n     def __or__(self, other):\n         return self.outer(other)\n \n", "instance_id": "sympy__sympy-23191"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..081a6d5796 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -176,10 +176,12 @@ def parse_http_date(date):\n     try:\n         year = int(m.group('year'))\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n+            current_year = datetime.datetime.now().year\n+            current_century = current_year // 100 * 100\n+            if year > (current_year % 100) + 50:\n+                year += current_century - 100\n             else:\n-                year += 1900\n+                year += current_century\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n", "instance_id": "django__django-11848"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..bd0f1e007c 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -320,6 +320,9 @@ class RenameModel(ModelOperation):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # Check if db_table is already defined\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n             # Move the main table\n             schema_editor.alter_db_table(\n                 new_model,\n", "instance_id": "django__django-14999"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex 93298f47e6..3ffbaa14eb 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -123,22 +123,22 @@ def dmp_trial_division(f, factors, u, K):\n     return _sort_factors(result)\n \n \n-def dup_zz_mignotte_bound(f, K):\n-    \"\"\"Mignotte bound for univariate polynomials in `K[x]`. \"\"\"\n+def dup_zz_knuth_cohen_bound(f, K):\n+    \"\"\"Knuth-Cohen bound for univariate polynomials in `K[x]`. \"\"\"\n     a = dup_max_norm(f, K)\n     b = abs(dup_LC(f, K))\n     n = dup_degree(f)\n \n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    return K.sqrt(K(n + 1)) * (2**(n - 1)) * a * b\n \n \n-def dmp_zz_mignotte_bound(f, u, K):\n-    \"\"\"Mignotte bound for multivariate polynomials in `K[X]`. \"\"\"\n+def dmp_zz_knuth_cohen_bound(f, u, K):\n+    \"\"\"Knuth-Cohen bound for multivariate polynomials in `K[X]`. \"\"\"\n     a = dmp_max_norm(f, u, K)\n     b = abs(dmp_ground_LC(f, u, K))\n     n = sum(dmp_degree_list(f, u))\n \n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    return K.sqrt(K(n + 1)) * (2**(n - 1)) * a * b\n \n \n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n@@ -933,7 +933,7 @@ def dmp_zz_wang(f, u, K, mod=None, seed=None):\n \n     ct, T = dmp_zz_factor(dmp_LC(f, K), u - 1, K)\n \n-    b = dmp_zz_mignotte_bound(f, u, K)\n+    b = dmp_zz_knuth_cohen_bound(f, u, K)\n     p = K(nextprime(b))\n \n     if mod is None:\n", "instance_id": "sympy__sympy-19254"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 7b156fceee..b11d3e6a0e 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -6,6 +6,8 @@ from itertools import chain\n from django.apps import apps\n from django.conf import settings\n from django.core.checks import Error, Tags, Warning, register\n+from django.db.models import UniqueConstraint\n+from django.core.exceptions import FieldDoesNotExist\n \n \n @register(Tags.models)\n@@ -86,6 +88,29 @@ def check_all_models(app_configs=None, **kwargs):\n     return errors\n \n \n+def check_unique_constraints(model):\n+    \"\"\"\n+    Check that fields named in UniqueConstraints exist.\n+    \"\"\"\n+    errors = []\n+    for constraint in model._meta.constraints:\n+        if isinstance(constraint, UniqueConstraint):\n+            for field_name in constraint.fields:\n+                try:\n+                    model._meta.get_field(field_name)\n+                except FieldDoesNotExist:\n+                    errors.append(\n+                        Error(\n+                            \"'%s' refers to the nonexistent field '%s'.\" % (\n+                                constraint.name, field_name\n+                            ),\n+                            obj=model,\n+                            id='models.E012',\n+                        )\n+                    )\n+    return errors\n+\n+\n def _check_lazy_references(apps, ignore=None):\n     \"\"\"\n     Ensure all lazy (i.e. string) model references have been resolved.\ndiff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 7bb3fa4706..ce5ec117b6 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -508,7 +508,9 @@ class Model(metaclass=ModelBase):\n             values_iter = iter(values)\n             values = [\n                 next(values_iter) if f.attname in field_names else DEFERRED\n-                for f in cls._meta.concrete_fields\n+                for f in cls._meta.concrete_fields,\n+                *cls._check_constraints(databases),\n+                *cls._check_unique_constraints(),\n             ]\n         new = cls(*values)\n         new._state.adding = False\n@@ -1115,6 +1117,11 @@ class Model(metaclass=ModelBase):\n \n         return errors\n \n+    @classmethod\n+    def _check_unique_constraints(cls):\n+        from django.core.checks.model_checks import check_unique_constraints\n+        return check_unique_constraints(cls)\n+\n     def _perform_date_checks(self, date_checks):\n         errors = {}\n         for model_class, lookup_type, field, unique_for in date_checks:\n", "instance_id": "django__django-12856"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e0eeccefa6..b5a1574b44 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1140,6 +1140,11 @@ class QuerySet:\n         \"\"\"\n         assert not self.query.is_sliced, \\\n             \"Cannot create distinct fields once a slice has been taken.\"\n+        if self.query.combinator:\n+            raise NotSupportedError(\n+                'Calling distinct() after %s() is not supported.'\n+                % self.query.combinator\n+            )\n         obj = self._chain()\n         obj.query.add_distinct_fields(*field_names)\n         return obj\n", "instance_id": "django__django-12908"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex d649dd02a9..94fc93754b 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -8,6 +8,7 @@\n from sympy.core.symbol import symbols, Symbol\n from sympy.utilities.iterables import numbered_symbols, sift, \\\n         topological_sort, iterable\n+from sympy.matrices.expressions import MatrixSymbol\n \n from . import cse_opts\n \n@@ -498,29 +499,34 @@ def _find_opts(expr):\n             list(map(_find_opts, expr))\n             return\n \n-        if expr in seen_subexp:\n-            return expr\n-        seen_subexp.add(expr)\n+        if isinstance(expr, MatrixSymbol):\n+            for i in range(expr.shape[0]):\n+                for j in range(expr.shape[1]):\n+                    _find_opts(expr[i, j])\n+        else:\n+            if expr in seen_subexp:\n+                return expr\n+            seen_subexp.add(expr)\n \n-        list(map(_find_opts, expr.args))\n+            list(map(_find_opts, expr.args))\n \n-        if expr.could_extract_minus_sign():\n-            neg_expr = -expr\n-            if not neg_expr.is_Atom:\n-                opt_subs[expr] = Unevaluated(Mul, (S.NegativeOne, neg_expr))\n-                seen_subexp.add(neg_expr)\n-                expr = neg_expr\n+            if expr.could_extract_minus_sign():\n+                neg_expr = -expr\n+                if not neg_expr.is_Atom:\n+                    opt_subs[expr] = Unevaluated(Mul, (S.NegativeOne, neg_expr))\n+                    seen_subexp.add(neg_expr)\n+                    expr = neg_expr\n \n-        if isinstance(expr, (Mul, MatMul)):\n-            muls.add(expr)\n+            if isinstance(expr, (Mul, MatMul)):\n+                muls.add(expr)\n \n-        elif isinstance(expr, (Add, MatAdd)):\n-            adds.add(expr)\n+            elif isinstance(expr, (Add, MatAdd)):\n+                adds.add(expr)\n \n-        elif isinstance(expr, (Pow, MatPow)):\n-            base, exp = expr.base, expr.exp\n-            if exp.could_extract_minus_sign():\n-                opt_subs[expr] = Unevaluated(Pow, (Pow(base, -exp), -1))\n+            elif isinstance(expr, (Pow, MatPow)):\n+                base, exp = expr.base, expr.exp\n+                if exp.could_extract_minus_sign():\n+                    opt_subs[expr] = Unevaluated(Pow, (Pow(base, -exp), -1))\n \n     for e in exprs:\n         if isinstance(e, (Basic, Unevaluated)):\n@@ -632,6 +638,9 @@ def _rebuild(expr):\n         if not expr.args:\n             return expr\n \n+        if isinstance(expr, MatrixSymbol):\n+            return expr\n+\n         if iterable(expr):\n             new_args = [_rebuild(arg) for arg in expr]\n             return expr.func(*new_args)\n", "instance_id": "sympy__sympy-22840"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..d2f13f9eb 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -607,6 +607,12 @@ class Ridge(_BaseRidge, RegressorMixin):\n         .. versionadded:: 0.17\n            *random_state* to support Stochastic Average Gradient.\n \n+    store_cv_values : boolean, default=False\n+        Flag indicating if the cross-validation values corresponding to\n+        each alpha should be stored in the `cv_values_` attribute (see\n+        below). This flag is only compatible with `cv=None` (i.e. using\n+        Generalized Cross-Validation).\n+\n     Attributes\n     ----------\n     coef_ : array, shape (n_features,) or (n_targets, n_features)\n@@ -1333,10 +1339,11 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n", "instance_id": "scikit-learn__scikit-learn-10297"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/metrics/cluster/_supervised.py b/sklearn/metrics/cluster/_supervised.py\nindex 4bddae35c..8dca2a3b6 100644\n--- a/sklearn/metrics/cluster/_supervised.py\n+++ b/sklearn/metrics/cluster/_supervised.py\n@@ -217,6 +217,11 @@ def adjusted_rand_score(labels_true, labels_pred):\n \n     \"\"\"\n     labels_true, labels_pred = check_clusterings(labels_true, labels_pred)\n+    labels_true = np.asarray(labels_true)\n+    labels_pred = np.asarray(labels_pred)\n+    if labels_true.dtype.kind == 'O' or labels_pred.dtype.kind == 'O':\n+        labels_true = labels_true.astype(str)\n+        labels_pred = labels_pred.astype(str)\n     n_samples = labels_true.shape[0]\n     n_classes = np.unique(labels_true).shape[0]\n     n_clusters = np.unique(labels_pred).shape[0]\ndiff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex dad56850f..ca275e43a 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -459,10 +459,12 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n \n     if dtype_numeric:\n         if dtype_orig is not None and dtype_orig.kind == \"O\":\n-            # if input is object, convert to float.\n-            dtype = np.float64\n-        else:\n-            dtype = None\n+            # if input is object, try to convert to float.\n+            try:\n+                array = array.astype(np.float64)\n+            except ValueError:\n+                pass\n+        dtype = None\n \n     if isinstance(dtype, (list, tuple)):\n         if dtype_orig is not None and dtype_orig in dtype:\n", "instance_id": "scikit-learn__scikit-learn-15535"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex fbb3c7e6..36c5af9c 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -333,7 +333,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         if isinstance(url, bytes):\n             url = url.decode('utf8')\n         else:\n-            url = unicode(url) if is_py2 else str(url)\n+            url = str(url)\n \n         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n         # `data` etc to work around exceptions from `url_parse`, which\n@@ -695,7 +695,7 @@ class Response(object):\n         chunks = reused_chunks if self._content_consumed else stream_chunks\n \n         if decode_unicode:\n-            chunks = stream_decode_response_unicode(chunks, self)\n+            chunks = (chunk.decode(self.encoding or 'utf-8') for chunk in chunks)\n \n         return chunks\n \n", "instance_id": "psf__requests-3362"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 6866648d4e..a3a3ab18d7 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -434,10 +434,8 @@ def _repr_latex_(self):\n     def atoms(self, *types):\n         \"\"\"Returns the atoms that form the current object.\n \n-        By default, only objects that are truly atomic and can't\n-        be divided into smaller pieces are returned: symbols, numbers,\n-        and number symbols like I and pi. It is possible to request\n-        atoms of any type, however, as demonstrated below.\n+        By default, only objects that have no `.args` are returned.\n+        It is possible to request atoms of any type, however, as demonstrated below.\n \n         Examples\n         ========\n@@ -500,15 +498,11 @@ def atoms(self, *types):\n         {I*pi, 2*sin(y + I*pi)}\n \n         \"\"\"\n-        if types:\n-            types = tuple(\n-                [t if isinstance(t, type) else type(t) for t in types])\n+        if not types:\n+            result = {expr for expr in preorder_traversal(self) if not expr.args}\n         else:\n-            types = (Atom,)\n-        result = set()\n-        for expr in preorder_traversal(self):\n-            if isinstance(expr, types):\n-                result.add(expr)\n+            types = tuple(t if isinstance(t, type) else type(t) for t in types)\n+            result = {expr for expr in preorder_traversal(self) if isinstance(expr, types)}\n         return result\n \n     @property\n", "instance_id": "sympy__sympy-18532"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..51a5c804 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -283,7 +283,15 @@ def summarize_variable(\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n         dims_str = \"\"\n-    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+    \n+    # Check for units in attributes\n+    units = var.attrs.get(\"units\", \"\")\n+    if units:\n+        units_str = f\", in {units}\"\n+    else:\n+        units_str = \"\"\n+\n+    front_str = f\"{first_col}{units_str} {dims_str}{var.dtype} \"\n \n     values_width = max_width - len(front_str)\n     values_str = inline_variable_array_repr(var, values_width)\n", "instance_id": "pydata__xarray-4248"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6092e35dab..eef89090e1 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -181,8 +181,12 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n             syms = [i for i in syms if i in var]\n             if syms != var:\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n+                base_solutions = diophantine(eq, param)\n+                permuted_solutions = set()\n+                for sol in base_solutions:\n+                    permuted_solutions.update(signed_permutations(sol))\n                 return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                            for t in permuted_solutions}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "instance_id": "sympy__sympy-18189"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..c1915eda7 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -67,6 +67,7 @@ from inspect import signature\n import pprint\n from collections import OrderedDict\n \n+import numpy as np\n from ..base import BaseEstimator\n from .._config import get_config\n from . import is_scalar_nan\n@@ -95,7 +96,8 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        if (isinstance(v, np.ndarray) and isinstance(init_params[k], np.ndarray) and not np.array_equal(v, init_params[k])) or \\\n+           (not isinstance(v, np.ndarray) and v != init_params[k] and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n", "instance_id": "scikit-learn__scikit-learn-13584"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..0f704df04f 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -88,7 +88,11 @@ class SafeExceptionReporterFilter:\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n-            elif isinstance(value, dict):\n+            elif isinstance(value, (dict, list, tuple)):\n+                if isinstance(value, dict):\n+                    cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+                else:\n+                    cleansed = [self.cleanse_setting(key, v) for v in value]\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n             else:\n                 cleansed = value\n", "instance_id": "django__django-12700"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 4918261fb0..fa41a33e6d 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -7,7 +7,7 @@ from django import get_version\n from django.apps import apps\n # SettingsReference imported for backwards compatibility in Django 2.2.\n from django.conf import SettingsReference  # NOQA\n-from django.db import migrations\n+from django.db import migrations, models\n from django.db.migrations.loader import MigrationLoader\n from django.db.migrations.serializer import Serializer, serializer_factory\n from django.utils.inspect import get_func_args\n@@ -75,6 +75,10 @@ class OperationWriter:\n         name, args, kwargs = self.operation.deconstruct()\n         operation_args = get_func_args(self.operation.__init__)\n \n+        # Check if models is used in the operation and add the import if necessary\n+        if any(isinstance(arg, models.Field) for arg in args) or any(isinstance(value, models.Field) for value in kwargs.values()):\n+            imports.add('from django.db import models')\n+\n         # See if this operation is in django.db.migrations. If it is,\n         # We can just use the fact we already have that imported,\n         # otherwise, we need to add an import for the operation class.\n", "instance_id": "django__django-14580"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 187e14b1b7..5d8811d668 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -2,6 +2,7 @@ import base64\n import logging\n import string\n import warnings\n+import binascii\n from datetime import datetime, timedelta\n \n from django.conf import settings\n@@ -121,7 +122,10 @@ class SessionBase:\n             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)\n         # RemovedInDjango40Warning: when the deprecation ends, handle here\n         # exceptions similar to what _legacy_decode() does now.\n-        except Exception:\n+        except (signing.BadSignature, binascii.Error) as e:\n+            # Log the exception\n+            logger = logging.getLogger('django.security.%s' % e.__class__.__name__)\n+            logger.warning(str(e))\n             return self._legacy_decode(session_data)\n \n     def _legacy_encode(self, session_dict):\n@@ -141,7 +145,7 @@ class SessionBase:\n                 raise SuspiciousSession(\"Session data corrupted\")\n             else:\n                 return self.serializer().loads(serialized)\n-        except Exception as e:\n+        except (Exception, binascii.Error) as e:\n             # ValueError, SuspiciousOperation, unpickling exceptions. If any of\n             # these happen, just return an empty dictionary (an empty session).\n             if isinstance(e, SuspiciousOperation):\n", "instance_id": "django__django-13321"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex 1f33b9d3ec..8570971d2b 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -1304,12 +1304,13 @@ class Artist:\n             normed = self.norm(data)\n             if np.isfinite(normed):\n                 # Midpoints of neighboring color intervals.\n-                neighbors = self.norm.inverse(\n-                    (int(self.norm(data) * n) + np.array([0, 1])) / n)\n-                delta = abs(neighbors - data).max()\n-                g_sig_digits = cbook._g_sig_digits(data, delta)\n-            else:\n-                g_sig_digits = 3  # Consistent with default below.\n+                try:\n+                    neighbors = self.norm.inverse(\n+                        (int(self.norm(data) * n) + np.array([0, 1])) / n)\n+                    delta = abs(neighbors - data).max()\n+                    g_sig_digits = cbook._g_sig_digits(data, delta)\n+                except ValueError:\n+                    g_sig_digits = 3  # Consistent with default below.\n             return \"[{:-#.{}g}]\".format(data, g_sig_digits)\n         else:\n             try:\ndiff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 2e51914952..d41b75cfb4 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -567,6 +567,11 @@ class Colormap:\n \n     def __init__(self, name, N=256):\n         \"\"\"\n+        Raises\n+        ------\n+        ValueError\n+            BoundaryNorm is not invertible, so calling this method will always\n+            raise an error\n         Parameters\n         ----------\n         name : str\n", "instance_id": "matplotlib__matplotlib-22835"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex b4d759836e..add6e54389 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -437,6 +437,8 @@ def _eval_simplify(self, **kwargs):\n         return self\n \n class Identity(MatrixExpr):\n+    def _eval_sum(self):\n+        return self.rows\n     \"\"\"The Matrix Identity I - multiplicative identity\n \n     >>> from sympy.matrices import Identity, MatrixSymbol\n", "instance_id": "sympy__sympy-12419"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/utils/functional.py b/django/utils/functional.py\nindex 9e1be0fe0f..76b4f920e8 100644\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -331,6 +331,11 @@ class LazyObject:\n             self._setup()\n         return (unpickle_lazyobject, (self._wrapped,))\n \n+    def __radd__(self, other):\n+        if self._wrapped is empty:\n+            self._setup()\n+        return other + self._wrapped\n+\n     def __copy__(self):\n         if self._wrapped is empty:\n             # If uninitialized, copy the wrapper. Use type(self), not\n", "instance_id": "django__django-15400"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "django__django-16820"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 171a3e7b0..f76c2b563 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1716,12 +1716,12 @@ class DataDocumenter(ModuleLevelDocumenter):\n                 annotations = {}\n \n             if self.objpath[-1] in annotations:\n-                objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n+                objrepr = stringify_typehint(annotations.get(self.objpath[-1]), type_aliases=self.config.autodoc_type_aliases)\n                 self.add_line('   :type: ' + objrepr, sourcename)\n             else:\n                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])\n                 if self.analyzer and key in self.analyzer.annotations:\n-                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n+                    self.add_line('   :type: ' + stringify_typehint(self.analyzer.annotations[key], type_aliases=self.config.autodoc_type_aliases),\n                                   sourcename)\n \n             try:\n@@ -2107,12 +2107,12 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n                 annotations = {}\n \n             if self.objpath[-1] in annotations:\n-                objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n+                objrepr = stringify_typehint(annotations.get(self.objpath[-1]), type_aliases=self.config.autodoc_type_aliases)\n                 self.add_line('   :type: ' + objrepr, sourcename)\n             else:\n                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])\n                 if self.analyzer and key in self.analyzer.annotations:\n-                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n+                    self.add_line('   :type: ' + stringify_typehint(self.analyzer.annotations[key], type_aliases=self.config.autodoc_type_aliases),\n                                   sourcename)\n \n             # data descriptors do not have useful values\n", "instance_id": "sphinx-doc__sphinx-8435"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/tensor/array/dense_ndim_array.py b/sympy/tensor/array/dense_ndim_array.py\nindex 6019daf787..7caaebc1ea 100644\n--- a/sympy/tensor/array/dense_ndim_array.py\n+++ b/sympy/tensor/array/dense_ndim_array.py\n@@ -139,15 +139,15 @@ def __new__(cls, iterable, shape=None, **kwargs):\n     @classmethod\n     def _new(cls, iterable, shape, **kwargs):\n         shape, flat_list = cls._handle_ndarray_creation_inputs(iterable, shape, **kwargs)\n-        shape = Tuple(*map(_sympify, shape))\n+        shape = Tuple(*map(_sympify, shape)) if shape else Tuple()\n         cls._check_special_bounds(flat_list, shape)\n         flat_list = flatten(flat_list)\n         flat_list = Tuple(*flat_list)\n         self = Basic.__new__(cls, flat_list, shape, **kwargs)\n         self._shape = shape\n         self._array = list(flat_list)\n-        self._rank = len(shape)\n-        self._loop_size = functools.reduce(lambda x,y: x*y, shape, 1)\n+        self._rank = len(shape) if shape else 0\n+        self._loop_size = functools.reduce(lambda x,y: x*y, shape, 1) if shape else 0\n         return self\n \n     def __setitem__(self, index, value):\ndiff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex 6490a655a4..6e3473d774 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -191,8 +191,8 @@ def _setter_iterable_check(self, value):\n     @classmethod\n     def _scan_iterable_shape(cls, iterable):\n         def f(pointer):\n-            if not isinstance(pointer, Iterable):\n-                return [pointer], ()\n+            if not isinstance(pointer, Iterable) or not pointer:\n+                return [pointer], (0,) if not pointer else ()\n \n             result = []\n             elems, shapes = zip(*[f(i) for i in pointer])\n", "instance_id": "sympy__sympy-23117"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 1877c3f92a..f9fa195f8f 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -532,6 +532,11 @@ def _print_sign(self, e):\n         return '(0.0 if {e} == 0 else {f}(1, {e}))'.format(\n             f=self._module_format('math.copysign'), e=self._print(e.args[0]))\n \n+    def _print_Tuple(self, expr):\n+        if len(expr) == 1:\n+            return '({},)'.format(self._print(expr[0]))\n+        return '({})'.format(', '.join(map(self._print, expr)))\n+\n     def _print_Not(self, expr):\n         PREC = precedence(expr)\n         return self._operators['not'] + self.parenthesize(expr.args[0], PREC)\n", "instance_id": "sympy__sympy-23262"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 0e84403307..541cdedf93 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -113,43 +113,24 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n     if total_degree:\n         if min_degree > max_degree:\n             return\n-        if not variables or max_degree == 0:\n+        if min_degree > max_degree:\n+            return\n+        if not variables:\n             yield S.One\n             return\n-        # Force to list in case of passed tuple or other incompatible collection\n-        variables = list(variables) + [S.One]\n-        if all(variable.is_commutative for variable in variables):\n-            monomials_list_comm = []\n-            for item in combinations_with_replacement(variables, max_degree):\n-                powers = dict()\n-                for variable in variables:\n-                    powers[variable] = 0\n-                for variable in item:\n-                    if variable != 1:\n-                        powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_comm.append(Mul(*item))\n-            yield from set(monomials_list_comm)\n-        else:\n-            monomials_list_non_comm = []\n-            for item in product(variables, repeat=max_degree):\n-                powers = dict()\n-                for variable in variables:\n-                    powers[variable] = 0\n-                for variable in item:\n-                    if variable != 1:\n-                        powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_non_comm.append(Mul(*item))\n-            yield from set(monomials_list_non_comm)\n+        variables = list(variables)\n+        for total_degree in range(min_degree, max_degree + 1):\n+            if all(variable.is_commutative for variable in variables):\n+                for item in combinations_with_replacement(variables, total_degree):\n+                    yield Mul(*item)\n+            else:\n+                for item in product(variables, repeat=total_degree):\n+                    yield Mul(*item)\n     else:\n         if any(min_degrees[i] > max_degrees[i] for i in range(n)):\n             raise ValueError('min_degrees[i] must be <= max_degrees[i] for all i')\n-        power_lists = []\n-        for var, min_d, max_d in zip(variables, min_degrees, max_degrees):\n-            power_lists.append([var**i for i in range(min_d, max_d + 1)])\n-        for powers in product(*power_lists):\n-            yield Mul(*powers)\n+        for degrees in product(*(range(min_d, max_d + 1) for min_d, max_d in zip(min_degrees, max_degrees))):\n+            yield Mul(*[var**deg for var, deg in zip(variables, degrees)])\n \n def monomial_count(V, N):\n     r\"\"\"\n", "instance_id": "sympy__sympy-21847"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/doc/en/example/xfail_demo.py b/doc/en/example/xfail_demo.py\nindex 01e6da1ad..bb0a931e9 100644\n--- a/doc/en/example/xfail_demo.py\n+++ b/doc/en/example/xfail_demo.py\n@@ -1,4 +1,8 @@\n import pytest\n+import sys\n+\n+if sys.version_info < (3, 8):\n+    pytest.skip_module(\"Requires Python >= 3.8\")\n \n xfail = pytest.mark.xfail\n \ndiff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..c148517c3 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -32,7 +32,10 @@ class OutcomeException(BaseException):\n                 \"{} expected string as 'msg' parameter, got '{}' instead.\\n\"\n                 \"Perhaps you meant to use a mark?\"\n             )\n-            raise TypeError(error_msg.format(type(self).__name__, type(msg).__name__))\n+            raise TypeError(\n+                error_msg.format(type(self).__name__, type(msg).__name__)\n+                + \" If you are trying to skip a module, use `skip(msg, allow_module_level=True)`.\"\n+            )\n         BaseException.__init__(self, msg)\n         self.msg = msg\n         self.pytrace = pytrace\n@@ -128,6 +131,38 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     during collection by using the ``allow_module_level`` flag.  This function can\n     be called in doctests as well.\n \n+    :param bool allow_module_level:\n+        Allows this function to be called at module level, skipping the rest\n+        of the module. Defaults to False.\n+\n+    .. note::\n+        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n+        possible to declare a test to be skipped under certain conditions\n+        like mismatching platforms or dependencies.\n+        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n+        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n+        to skip a doctest statically.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n+\n+\n+@_with_exception(Skipped)\n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given message.\n+\n+    This function should be called at the module level to skip the entire module.\n+\n+    :param str msg: The message to show the user as reason for the skip.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n+    \"\"\"Skip an executing test with the given message.\n+\n+    This function should be called only during testing (setup, call or teardown) or\n+    during collection by using the ``allow_module_level`` flag.  This function can\n+    be called in doctests as well.\n+\n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n         of the module. Defaults to False.\n", "instance_id": "pytest-dev__pytest-8906"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 11c800704b..f7f48a5297 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -39,7 +39,7 @@ def doit(p, q):\n             if p.is_infinite or q.is_infinite or p is nan or q is nan:\n                 return nan\n             if (p == q or p == -q or\n-                    p.is_Pow and p.exp.is_Integer and p.base == q or\n+                    p.is_Pow and p.exp.is_Integer and p.base == q and p.base.is_integer or\n                     p.is_integer and q == 1):\n                 return S.Zero\n \n", "instance_id": "sympy__sympy-13177"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/contrib/syndication/views.py b/django/contrib/syndication/views.py\nindex 68ffb0bfe0..c047934a46 100644\n--- a/django/contrib/syndication/views.py\n+++ b/django/contrib/syndication/views.py\n@@ -199,7 +199,9 @@ class Feed:\n             if updateddate and is_naive(updateddate):\n                 updateddate = make_aware(updateddate, tz)\n \n+            comments = self._get_dynamic_attr('item_comments', item)\n             feed.add_item(\n+                comments=comments,\n                 title=title,\n                 link=link,\n                 description=description,\n@@ -213,7 +215,7 @@ class Feed:\n                 author_email=author_email,\n                 author_link=author_link,\n                 categories=self._get_dynamic_attr('item_categories', item),\n-                item_copyright=self._get_dynamic_attr('item_copyright', item),\n-                **self.item_extra_kwargs(item)\n+                item_copyright=self._get_dynamic_attr('item_copyright', item)\n+                **self.item_extra_kwargs(item),\n             )\n         return feed\n", "instance_id": "django__django-13230"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 2ff8b0ee26..c93959b1e3 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -277,7 +277,7 @@ class BoundWidget:\n \n     @property\n     def id_for_label(self):\n-        return 'id_%s_%s' % (self.data['name'], self.data['index'])\n+        return self.data['attrs']['id']\n \n     @property\n     def choice_label(self):\n", "instance_id": "django__django-14534"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c978c47be..4b4f354635 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -278,15 +278,28 @@ def __mul__(self, factor):\n         coords = [simplify(x*factor) for x in self.args]\n         return Point(coords, evaluate=False)\n \n-    def __neg__(self):\n+    def __sub__(self, other):\n+        \"\"\"Subtract two points, or subtract a factor from this point's\n+        coordinates.\"\"\"\n+        return self + [-x for x in other]\n         \"\"\"Negate the point.\"\"\"\n         coords = [-x for x in self.args]\n         return Point(coords, evaluate=False)\n \n+    def __rmul__(self, factor):\n+        \"\"\"Right multiplication of point's coordinates by a factor.\"\"\"\n+        return self.__mul__(factor)\n+\n     def __sub__(self, other):\n         \"\"\"Subtract two points, or subtract a factor from this point's\n         coordinates.\"\"\"\n-        return self + [-x for x in other]\n+        try:\n+            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n+        except TypeError:\n+            raise GeometryError(\"Don't know how to subtract {} and a Point object\".format(other))\n+\n+        coords = [simplify(a - b) for a, b in zip(s, o)]\n+        return Point(coords, evaluate=False)\n \n     @classmethod\n     def _normalize_dimension(cls, *points, **kwargs):\n", "instance_id": "sympy__sympy-17655"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "django__django-14915"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 2d3072da04..730b8f4223 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -727,9 +727,9 @@ class Colormap:\n                 xa = xa.astype(int)\n         # Set the over-range indices before the under-range;\n         # otherwise the under-range values get converted to over-range.\n-        xa[xa > self.N - 1] = self._i_over\n-        xa[xa < 0] = self._i_under\n-        xa[mask_bad] = self._i_bad\n+        xa[xa > self.N - 1] = int(self._i_over)\n+        xa[xa < 0] = int(self._i_under)\n+        xa[mask_bad] = int(self._i_bad)\n \n         lut = self._lut\n         if bytes:\n", "instance_id": "matplotlib__matplotlib-24970"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex 9cc4fec441..cdebb4ec20 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -478,6 +478,9 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n     try:\n         a = a.replace('\\n', '')\n         expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n+        if not evaluate:\n+            from sympy.simplify.simplify import simplify\n+            expr = simplify(expr, evaluate=False)\n     except (TokenError, SyntaxError) as exc:\n         raise SympifyError('could not parse %r' % a, exc)\n \ndiff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex 5f5eab3b9d..460df9a918 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -37,7 +37,7 @@\n \n \n \n-def separatevars(expr, symbols=[], dict=False, force=False):\n+def separatevars(expr, symbols=[], dict=False, force=False, evaluate=None):\n     \"\"\"\n     Separates variables in an expression, if possible.  By\n     default, it separates with respect to all symbols in an\n@@ -104,7 +104,7 @@ def separatevars(expr, symbols=[], dict=False, force=False):\n     True\n \n     \"\"\"\n-    expr = sympify(expr)\n+    expr = sympify(expr, evaluate=evaluate)\n     if dict:\n         return _separatevars_dict(_separatevars(expr, force), symbols)\n     else:\n@@ -397,7 +397,7 @@ def signsimp(expr, evaluate=None):\n     \"\"\"\n     if evaluate is None:\n         evaluate = global_parameters.evaluate\n-    expr = sympify(expr)\n+    expr = sympify(expr, evaluate=evaluate)\n     if not isinstance(expr, (Expr, Relational)) or expr.is_Atom:\n         return expr\n     e = sub_post(sub_pre(expr))\n@@ -410,7 +410,7 @@ def signsimp(expr, evaluate=None):\n     return e\n \n \n-def simplify(expr, ratio=1.7, measure=count_ops, rational=False, inverse=False, doit=True, **kwargs):\n+def simplify(expr, ratio=1.7, measure=count_ops, rational=False, inverse=False, doit=True, evaluate=None, **kwargs):\n     \"\"\"Simplifies the given expression.\n \n     Explanation\n", "instance_id": "sympy__sympy-20322"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex dadd4acfa1..153229e677 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2040,7 +2040,10 @@ class InlineModelAdmin(BaseModelAdmin):\n         if self.verbose_name is None:\n             self.verbose_name = self.model._meta.verbose_name\n         if self.verbose_name_plural is None:\n-            self.verbose_name_plural = self.model._meta.verbose_name_plural\n+            if self.verbose_name is not None:\n+                self.verbose_name_plural = f\"{self.verbose_name}s\"\n+            else:\n+                self.verbose_name_plural = self.model._meta.verbose_name_plural\n \n     @property\n     def media(self):\n", "instance_id": "django__django-13710"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..1a84c60762 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -700,6 +700,8 @@ class Poly3DCollection(PolyCollection):\n         and _edgecolors properties.\n         \"\"\"\n         super().__init__(verts, *args, **kwargs)\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n         if isinstance(verts, np.ndarray):\n             if verts.ndim != 3:\n                 raise ValueError('verts must be a list of (N, 3) array-like')\n@@ -867,10 +869,16 @@ class Poly3DCollection(PolyCollection):\n         self.stale = True\n \n     def get_facecolor(self):\n-        return self._facecolors2d\n+        if hasattr(self, '_facecolors2d'):\n+            return self._facecolors2d\n+        else:\n+            return self._facecolor3d\n \n     def get_edgecolor(self):\n-        return self._edgecolors2d\n+        if hasattr(self, '_edgecolors2d'):\n+            return self._edgecolors2d\n+        else:\n+            return self._edgecolor3d\n \n \n def poly_collection_2d_to_3d(col, zs=0, zdir='z'):\n", "instance_id": "matplotlib__matplotlib-23562"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 1a55d3d417..cc7c96d6cf 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -764,10 +764,11 @@ class Field(RegisterLookupMixin):\n             if not getattr(cls, self.attname, None):\n                 setattr(cls, self.attname, self.descriptor_class(self))\n         if self.choices is not None:\n-            if not hasattr(cls, 'get_%s_display' % self.name):\n+            display_method_name = 'get_%s_display' % self.name\n+            if not hasattr(cls, display_method_name) or not callable(getattr(cls, display_method_name)):\n                 setattr(\n                     cls,\n-                    'get_%s_display' % self.name,\n+                    display_method_name,\n                     partialmethod(cls._get_FIELD_display, field=self),\n                 )\n \n", "instance_id": "django__django-12284"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 69df976b8b..37b821b043 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -1231,6 +1231,11 @@ class Derivative(Expr):\n \n     is_Derivative = True\n \n+    @property\n+    def kind(self):\n+        from sympy.core.kind import MKind\n+        return MKind(self.expr.kind, self.variables[0].kind)\n+\n     @property\n     def _diff_wrt(self):\n         \"\"\"An expression may be differentiated wrt a Derivative if\n", "instance_id": "sympy__sympy-21614"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..f58429271 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -246,7 +246,10 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns.update(context)\n \n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        if imported_members:\n+            ns['members'] = dir(obj)\n+        else:\n+            ns['members'] = [name for name in dir(obj) if getattr(obj, name).__module__ == obj.__name__]\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n", "instance_id": "sphinx-doc__sphinx-7686"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/src/_pytest/config/argparsing.py b/src/_pytest/config/argparsing.py\nindex 9b526ff3e..845cf578a 100644\n--- a/src/_pytest/config/argparsing.py\n+++ b/src/_pytest/config/argparsing.py\n@@ -75,6 +75,9 @@ class Parser:\n         by passing a ``dest`` attribute, for example\n         ``addoption(\"--long\", dest=\"NAME\", ...)``.\n         \"\"\"\n+        # Adding a shortcut for --collect-only\n+        if '--collect-only' in opts:\n+            opts = opts + ('-c',)\n         self._anonymous.addoption(*opts, **attrs)\n \n     def parse(self, args, namespace=None):\n", "instance_id": "pytest-dev__pytest-6116"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "pytest-dev__pytest-11148"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/xarray/core/groupby.py b/xarray/core/groupby.py\nindex 8a097251..af5abd9a 100644\n--- a/xarray/core/groupby.py\n+++ b/xarray/core/groupby.py\n@@ -436,7 +436,7 @@ class GroupBy(SupportsArithmetic):\n         return zip(self._unique_coord.values, self._iter_grouped())\n \n     def __repr__(self):\n-        return \"{}, grouped over {!r} \\n{!r} groups with labels {}.\".format(\n+        return \"{}, grouped over {!r}\\n{!r} groups with labels {}.\".format(\n             self.__class__.__name__,\n             self._unique_coord.name,\n             self._unique_coord.size,\n", "instance_id": "pydata__xarray-5131"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/contrib/postgres/fields/hstore.py b/django/contrib/postgres/fields/hstore.py\nindex 2ec5766041..1ee7a798dc 100644\n--- a/django/contrib/postgres/fields/hstore.py\n+++ b/django/contrib/postgres/fields/hstore.py\n@@ -85,6 +85,8 @@ class KeyTransform(Transform):\n \n     def as_sql(self, compiler, connection):\n         lhs, params = compiler.compile(self.lhs)\n+        if connection.vendor in ('sqlite', 'oracle'):\n+            return 'json_extract(%s, %%s) IS NULL' % lhs, tuple(params) + (self.key_name,)\n         return '(%s -> %%s)' % lhs, tuple(params) + (self.key_name,)\n \n \n", "instance_id": "django__django-13757"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex c50fc90171..5cf1f5b3c2 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -5,7 +5,7 @@ from io import StringIO\n from django.apps import apps\n from django.conf import settings\n from django.core import serializers\n-from django.db import router\n+from django.db import router, transaction\n \n # The prefix to put on the default database name when creating\n # the test database.\n@@ -126,8 +126,9 @@ class BaseDatabaseCreation:\n         the serialize_db_to_string() method.\n         \"\"\"\n         data = StringIO(data)\n-        for obj in serializers.deserialize(\"json\", data, using=self.connection.alias):\n-            obj.save()\n+        with transaction.atomic(using=self.connection.alias):\n+            for obj in serializers.deserialize(\"json\", data, using=self.connection.alias):\n+                obj.save()\n \n     def _get_database_display_str(self, verbosity, database_name):\n         \"\"\"\n", "instance_id": "django__django-12453"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 9db44b7994..fc2961ce99 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -185,20 +185,27 @@ class Axes3D(Axes):\n                 \"other Axes classes.\")\n             fig.add_axes(self)\n \n-    def set_axis_off(self):\n+    def set_visible(self, b):\n+        \"\"\"\n+        Set the visibility of the axes.\n+        \n+        Parameters\n+        ----------\n+        b : bool\n+            Visibility state. If False, the axes will be hidden.\n+        \"\"\"\n+        super().set_visible(b)\n+        for axis in self._axis_map.values():\n+            axis.set_visible(b)\n+        self.stale = True\n+        self._axis3don = b\n         self._axis3don = False\n         self.stale = True\n \n-    def set_axis_on(self):\n+    def set_axis_off(self):\n         self._axis3don = True\n         self.stale = True\n \n-    def convert_zunits(self, z):\n-        \"\"\"\n-        For artists in an Axes, if the zaxis has units support,\n-        convert *z* using zaxis unit type\n-        \"\"\"\n-        return self.zaxis.convert_units(z)\n \n     def set_top_view(self):\n         # this happens to be the right view for the viewing coordinates\n", "instance_id": "matplotlib__matplotlib-23314"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "django__django-17087"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex a024324b..ce6b5506 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3513,6 +3513,12 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n                     variables[name] = var.unstack({dim: new_dims})\n                 else:\n                     variables[name] = var\n+            else:\n+                # Handle the case where the variable is the dimension itself\n+                variables[name] = var\n+            else:\n+                # Handle the case where the variable is the dimension itself\n+                variables[name] = var\n \n         for name, lev in zip(new_dim_names, index.levels):\n             variables[name] = IndexVariable(name, lev)\n", "instance_id": "pydata__xarray-4094"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 27b5cbd379..32154a1ce0 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -122,7 +122,7 @@ class EnumSerializer(BaseSerializer):\n         module = enum_class.__module__\n         v_string, v_imports = serializer_factory(self.value.value).serialize()\n         imports = {'import %s' % module, *v_imports}\n-        return \"%s.%s(%s)\" % (module, enum_class.__name__, v_string), imports\n+        return \"%s.%s\" % (module, self.value.name), imports\n \n \n class FloatSerializer(BaseSimpleSerializer):\n", "instance_id": "django__django-11815"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/contrib/staticfiles/handlers.py b/django/contrib/staticfiles/handlers.py\nindex 711d8864ad..6a5b577ae9 100644\n--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n@@ -46,6 +46,12 @@ class StaticFilesHandlerMixin:\n         \"\"\"Serve the request path.\"\"\"\n         return serve(request, self.file_path(request.path), insecure=True)\n \n+    async def get_response_async(self, request):\n+        try:\n+            return await self.serve_async(request)\n+        except Http404 as e:\n+            return response_for_exception(request, e)\n+\n     def get_response(self, request):\n         try:\n             return self.serve(request)\n@@ -78,6 +84,10 @@ class ASGIStaticFilesHandler(StaticFilesHandlerMixin, ASGIHandler):\n         self.application = application\n         self.base_url = urlparse(self.get_base_url())\n \n+    async def serve_async(self, request):\n+        \"\"\"Serve the request path asynchronously.\"\"\"\n+        return serve(request, self.file_path(request.path), insecure=True)\n+\n     async def __call__(self, scope, receive, send):\n         # Only even look at HTTP requests\n         if scope['type'] == 'http' and self._should_handle(scope['path']):\n", "instance_id": "django__django-12915"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex b821c42845..f334cd229d 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -234,17 +234,21 @@ def transpose(self):\n \n     def _entry(self, i, j, **kwargs):\n         # Find row entry\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+        row_block = 0\n+        for numrows in self.rowblocksizes:\n+            if i < numrows:\n                 break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            i -= numrows\n+            row_block += 1\n+\n+        col_block = 0\n+        for numcols in self.colblocksizes:\n+            if j < numcols:\n                 break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            j -= numcols\n+            col_block += 1\n+\n+        return self.blocks[row_block, col_block]._entry(i, j, **kwargs)\n \n     @property\n     def is_Identity(self):\n", "instance_id": "sympy__sympy-19007"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..9d6507d95a 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -13,6 +13,8 @@ from .mpl_axes import Axes\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n+    if callable(ax.axis):\n+        return\n     ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n     ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n", "instance_id": "matplotlib__matplotlib-26020"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..b487dba602 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,10 +810,7 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n-                if (\n-                    connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n-                ):\n+                if connection.features.can_return_rows_from_bulk_insert:\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n                     for result, field in zip(results, opts.db_returning_fields):\n@@ -1837,7 +1834,7 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+            if bulk_return:\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n", "instance_id": "django__django-17051"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex af0815d41d..12e46f12ef 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -2021,10 +2021,14 @@ class Axis(martist.Artist):\n         other limits, you should set the limits explicitly after setting the\n         ticks.\n         \"\"\"\n-        result = self._set_tick_locations(ticks, minor=minor)\n+        if kwargs:\n+            mtext.Text(0, 0, **kwargs)  # Validate kwargs are valid Text properties.\n         if labels is not None:\n-            self.set_ticklabels(labels, minor=minor, **kwargs)\n-        return result\n+            return self.set_ticklabels(labels, minor=minor, **kwargs)\n+        else:\n+            if kwargs:\n+                raise ValueError(\"kwargs can only be used if labels are set.\")\n+            return self._set_tick_locations(ticks, minor=minor)\n \n     def _get_tick_boxes_siblings(self, renderer):\n         \"\"\"\n", "instance_id": "matplotlib__matplotlib-24334"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "django__django-13925"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py\nindex b9809fd4e9..674322d4eb 100644\n--- a/sympy/solvers/polysys.py\n+++ b/sympy/solvers/polysys.py\n@@ -240,7 +240,7 @@ def _solve_reduced_system(system, gens, entry=False):\n \n         univariate = list(filter(_is_univariate, basis))\n \n-        if len(univariate) == 1:\n+        if len(univariate) == 1 and len(gens) == 1:\n             f = univariate.pop()\n         else:\n             raise NotImplementedError(filldedent('''\n", "instance_id": "sympy__sympy-22005"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..d5ddae891e 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1123,8 +1123,11 @@ class Query(BaseExpression):\n                     self.check_query_object_type(v, opts, field)\n \n     def check_filterable(self, expression):\n-        \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n+        \"\"\"\n+        Raise an error if expression cannot be used in a WHERE clause.\n+        Allow filtering on fields named 'filterable'.\n+        \"\"\"\n+        if not getattr(expression, 'filterable', True) and expression.name != 'filterable':\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n", "instance_id": "django__django-13028"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 6d3cc05bd3..320e727721 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -490,10 +490,10 @@ def _print_Product(self, expr):\n         sign_height = 0\n \n         for lim in expr.limits:\n-            width = (func_height + 2) * 5 // 3 - 2\n+            width = (func_height + 2) * 3 // 2 - 2\n             sign_lines = []\n             sign_lines.append(corner_chr + (horizontal_chr*width) + corner_chr)\n-            for i in range(func_height + 1):\n+            for i in range(func_height):\n                 sign_lines.append(vertical_chr + (' '*width) + vertical_chr)\n \n             pretty_sign = stringPict('')\n@@ -516,7 +516,7 @@ def _print_Product(self, expr):\n \n             height = pretty_sign.height()\n             padding = stringPict('')\n-            padding = prettyForm(*padding.stack(*[' ']*(height - 1)))\n+            padding = prettyForm(*padding.stack(*[' ']*(height)))\n             pretty_sign = prettyForm(*pretty_sign.right(padding))\n \n             pretty_func = prettyForm(*pretty_sign.right(pretty_func))\n", "instance_id": "sympy__sympy-16281"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 02ec6480cb..19f0e178b1 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -397,6 +397,10 @@ def _n2(e):\n         if s is not None:\n             return s*Pow(b, e*other)\n \n+        # Handle cases like (-a)**x * a**(-x) for positive integer a\n+        if b.is_negative and e.is_Symbol and other.is_Symbol:\n+            return Pow(-b, e*other) * Pow(-1, e*other)\n+\n     def _eval_Mod(self, q):\n         if self.exp.is_integer and self.exp.is_positive:\n             if q.is_integer and self.base % q == 0:\ndiff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex 1acc00be3a..3f42bc3675 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -579,6 +579,12 @@ def shorter(*choices):\n     if expr.has(TrigonometricFunction, HyperbolicFunction):\n         expr = trigsimp(expr, deep=True)\n \n+    # Handle cases like (-a)**x * a**(-x) for positive integer a\n+    if expr.is_Mul:\n+        bases, exponents = zip(*[arg.as_base_exp() for arg in expr.args])\n+        if all(base.is_positive for base in bases) and any(base.is_negative for base in bases):\n+            expr = simplify(expr.rewrite(Pow))\n+\n     if expr.has(log):\n         expr = shorter(expand_log(expr, deep=True), logcombine(expr))\n \n", "instance_id": "sympy__sympy-14024"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 78accaf295..e63092888c 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -246,9 +246,10 @@ def _eval_expand_tensorproduct(self, **hints):\n             if isinstance(args[i], Add):\n                 for aa in args[i].args:\n                     tp = TensorProduct(*args[:i] + (aa,) + args[i + 1:])\n-                    if isinstance(tp, TensorProduct):\n-                        tp = tp._eval_expand_tensorproduct()\n-                    add_args.append(tp)\n+                    c_part, nc_part = tp.args_cnc()\n+                    if len(nc_part) == 1 and isinstance(nc_part[0], TensorProduct):\n+                        nc_part = (nc_part[0]._eval_expand_tensorproduct(), )\n+                    add_args.append(Mul(*c_part) * Mul(*nc_part))\n                 break\n \n         if add_args:\n", "instance_id": "sympy__sympy-24152"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c30b..3f5b336748 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2524,7 +2524,10 @@ class AutoFieldMeta(type):\n         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n \n     def __subclasscheck__(self, subclass):\n-        return subclass in self._subclasses or super().__subclasscheck__(subclass)\n+        return (\n+            any(issubclass(subclass, cls) for cls in self._subclasses) or\n+            super().__subclasscheck__(subclass)\n+        )\n \n \n class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):\n", "instance_id": "django__django-14238"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "django__django-15388"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\nindex ea7e3a2d94..0b0e11062f 100644\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -31,6 +31,7 @@\n     \"asech\": [(lambda x: True, \"ArcSech\")],\n     \"acsch\": [(lambda x: True, \"ArcCsch\")],\n     \"conjugate\": [(lambda x: True, \"Conjugate\")],\n+    \"Max\": [(lambda *x: True, \"Max\")],\n \n }\n \n", "instance_id": "sympy__sympy-15345"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/style/core.py b/lib/matplotlib/style/core.py\nindex fb0a5426e6..12873304f4 100644\n--- a/lib/matplotlib/style/core.py\n+++ b/lib/matplotlib/style/core.py\n@@ -108,7 +108,26 @@ def use(style):\n     else:\n         styles = style\n \n-    style_alias = {'mpl20': 'default', 'mpl15': 'classic'}\n+    style_alias = {\n+        'mpl20': 'default',\n+        'mpl15': 'classic',\n+        'seaborn': 'seaborn-v0_8',\n+        'seaborn-bright': 'seaborn-v0_8-bright',\n+        'seaborn-colorblind': 'seaborn-v0_8-colorblind',\n+        'seaborn-dark': 'seaborn-v0_8-dark',\n+        'seaborn-darkgrid': 'seaborn-v0_8-darkgrid',\n+        'seaborn-dark-palette': 'seaborn-v0_8-dark-palette',\n+        'seaborn-deep': 'seaborn-v0_8-deep',\n+        'seaborn-muted': 'seaborn-v0_8-muted',\n+        'seaborn-notebook': 'seaborn-v0_8-notebook',\n+        'seaborn-paper': 'seaborn-v0_8-paper',\n+        'seaborn-pastel': 'seaborn-v0_8-pastel',\n+        'seaborn-poster': 'seaborn-v0_8-poster',\n+        'seaborn-talk': 'seaborn-v0_8-talk',\n+        'seaborn-ticks': 'seaborn-v0_8-ticks',\n+        'seaborn-white': 'seaborn-v0_8-white',\n+        'seaborn-whitegrid': 'seaborn-v0_8-whitegrid',\n+    }\n \n     def fix_style(s):\n         if isinstance(s, str):\n", "instance_id": "matplotlib__matplotlib-24265"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "django__django-13265"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex c9e77a901f..f18ad85a9d 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -6215,7 +6215,14 @@ def sqf_list(f, *gens, **args):\n     (2, [(x + 1, 2), (x + 2, 3)])\n \n     \"\"\"\n-    return _generic_factor_list(f, gens, args, method='sqf')\n+    coeff, factors = _generic_factor_list(f, gens, args, method='sqf')\n+    combined_factors = {}\n+    for factor, multiplicity in factors:\n+        if factor in combined_factors:\n+            combined_factors[factor] += multiplicity\n+        else:\n+            combined_factors[factor] = multiplicity\n+    return coeff, list(combined_factors.items())\n \n \n @public\n@@ -6233,7 +6240,8 @@ def sqf(f, *gens, **args):\n     2*(x + 1)**2*(x + 2)**3\n \n     \"\"\"\n-    return _generic_factor(f, gens, args, method='sqf')\n+    coeff, factors = sqf_list(f, *gens, **args)\n+    return _keep_coeff(coeff, Mul(*[factor**multiplicity for factor, multiplicity in factors]))\n \n \n @public\n", "instance_id": "sympy__sympy-18698"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c957ffa564..91e00ff0e4 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -58,13 +58,15 @@ class Q(tree.Node):\n         obj.add(other, conn)\n         return obj\n \n-    def __or__(self, other):\n+    def __ror__(self, other):\n+        return self._combine(other, self.OR)\n         return self._combine(other, self.OR)\n \n     def __and__(self, other):\n         return self._combine(other, self.AND)\n \n-    def __invert__(self):\n+    def __rand__(self, other):\n+        return self._combine(other, self.AND)\n         obj = type(self)()\n         obj.add(self, self.AND)\n         obj.negate()\n", "instance_id": "django__django-14017"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 397146a354..70ad810657 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -528,6 +528,12 @@ class ForeignObject(RelatedField):\n             frozenset(ut)\n             for ut in self.remote_field.model._meta.unique_together\n         })\n+        if hasattr(form_field, 'queryset'):\n+            form_field.queryset = form_field.queryset.distinct()\n+        return form_field\n+        if hasattr(form_field, 'queryset'):\n+            form_field.queryset = form_field.queryset.distinct()\n+        return form_field\n         unique_foreign_fields.update({\n             frozenset(uc.fields)\n             for uc in self.remote_field.model._meta.total_unique_constraints\n@@ -986,7 +992,7 @@ class ForeignKey(ForeignObject):\n             raise ValueError(\"Cannot create form field for %r yet, because \"\n                              \"its related model %r has not been loaded yet\" %\n                              (self.name, self.remote_field.model))\n-        return super().formfield(**{\n+        form_field = super().formfield(**{\n             'form_class': forms.ModelChoiceField,\n             'queryset': self.remote_field.model._default_manager.using(using),\n             'to_field_name': self.remote_field.field_name,\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex 5d115458a1..f993bb9c98 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -100,7 +100,7 @@ def apply_limit_choices_to_to_formfield(formfield):\n     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):\n         limit_choices_to = formfield.get_limit_choices_to()\n         if limit_choices_to is not None:\n-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)\n+            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to).distinct()\n \n \n def fields_for_model(model, fields=None, exclude=None, widgets=None,\n", "instance_id": "django__django-13315"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "django__django-16229"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex d65141b834..edc60e8821 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1909,7 +1909,8 @@ class Query(BaseExpression):\n                     continue\n                 if item == '?':\n                     continue\n-                if item.startswith('-'):\n+                descending = item.startswith('-')\n+                if descending:\n                     item = item[1:]\n                 if item in self.annotations:\n                     continue\n@@ -1917,7 +1918,12 @@ class Query(BaseExpression):\n                     continue\n                 # names_to_path() validates the lookup. A descriptive\n                 # FieldError will be raise if it's not.\n-                self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)\n+                path, final_field, targets, rest = self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)\n+                if final_field.is_relation and final_field.related_model == self.model:\n+                    # Handle self-referencing foreign key\n+                    item = LOOKUP_SEP.join(path + [final_field.attname])\n+                    if descending:\n+                        item = '-' + item\n             elif not hasattr(item, 'resolve_expression'):\n                 errors.append(item)\n             if getattr(item, 'contains_aggregate', False):\n", "instance_id": "django__django-13033"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\nindex 8ecb5a16b..bd9feef80 100644\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -266,6 +266,7 @@ class TerminalReporter:\n         self.config = config\n         self._numcollected = 0\n         self._session = None  # type: Optional[Session]\n+        self._original_dir = config.invocation_dir\n         self._showfspath = None\n \n         self.stats = {}  # type: Dict[str, List[Any]]\n@@ -334,14 +335,14 @@ class TerminalReporter:\n         return char in self.reportchars\n \n     def write_fspath_result(self, nodeid, res, **markup):\n-        fspath = self.config.rootdir.join(nodeid.split(\"::\")[0])\n+        fspath = self._original_dir.join(nodeid.split(\"::\")[0])\n         # NOTE: explicitly check for None to work around py bug, and for less\n         # overhead in general (https://github.com/pytest-dev/py/pull/207).\n         if self.currentfspath is None or fspath != self.currentfspath:\n             if self.currentfspath is not None and self._show_progress_info:\n                 self._write_progress_information_filling_space()\n             self.currentfspath = fspath\n-            fspath = self.startdir.bestrelpath(fspath)\n+            fspath = self._original_dir.bestrelpath(fspath)\n             self._tw.line()\n             self._tw.write(fspath + \" \")\n         self._tw.write(res, flush=True, **markup)\n@@ -791,7 +792,7 @@ class TerminalReporter:\n             if self.verbosity >= 2 and nodeid.split(\"::\")[0] != fspath.replace(\n                 \"\\\\\", nodes.SEP\n             ):\n-                res += \" <- \" + self.startdir.bestrelpath(fspath)\n+                res += \" <- \" + self._original_dir.bestrelpath(fspath)\n         else:\n             res = \"[location]\"\n         return res + \" \"\n", "instance_id": "pytest-dev__pytest-7220"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py\nindex 93e2d71af2..797fde2b76 100644\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -85,6 +85,7 @@ class PasswordResetTokenGenerator:\n            same password is chosen, due to password salting).\n         2. The last_login field will usually be updated very shortly after\n            a password reset.\n+        3. The email field will change if the user's email is updated.\n         Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually\n         invalidates the token.\n \n@@ -94,7 +95,8 @@ class PasswordResetTokenGenerator:\n         # Truncate microseconds so that tokens are consistent even if the\n         # database doesn't support microseconds.\n         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)\n-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)\n+        email = '' if user.email is None else user.email\n+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + email\n \n     def _num_seconds(self, dt):\n         return int((dt - datetime(2001, 1, 1)).total_seconds())\n", "instance_id": "django__django-13551"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..494dc1891d 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1077,10 +1077,11 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n+            resolved_values = (\n                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                 for sub_value in value\n             )\n+            return type(value)(*resolved_values)\n         return value\n \n     def solve_lookup_type(self, lookup):\n", "instance_id": "django__django-13590"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/contrib/sitemaps/__init__.py b/django/contrib/sitemaps/__init__.py\nindex 27756d9d96..b40ad806ed 100644\n--- a/django/contrib/sitemaps/__init__.py\n+++ b/django/contrib/sitemaps/__init__.py\n@@ -168,7 +168,7 @@ class Sitemap:\n         if callable(self.lastmod):\n             try:\n                 return max([self.lastmod(item) for item in self.items()])\n-            except TypeError:\n+            except (TypeError, ValueError):\n                 return None\n         else:\n             return self.lastmod\n", "instance_id": "django__django-16255"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/lib/matplotlib/backends/backend_macosx.py b/lib/matplotlib/backends/backend_macosx.py\nindex 700d1d4c58..8be5e6fef0 100644\n--- a/lib/matplotlib/backends/backend_macosx.py\n+++ b/lib/matplotlib/backends/backend_macosx.py\n@@ -36,7 +36,9 @@ class FigureCanvasMac(FigureCanvasAgg, _macosx.FigureCanvas, FigureCanvasBase):\n     manager_class = _api.classproperty(lambda cls: FigureManagerMac)\n \n     def __init__(self, figure):\n+        # Ensure DPI is correctly set during initialization\n         super().__init__(figure=figure)\n+        self.figure.set_dpi(self.figure.dpi)\n         self._draw_pending = False\n         self._is_drawing = False\n \ndiff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex c55864243a..4faea024de 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3041,7 +3041,9 @@ class Figure(FigureBase):\n                 f\"This figure was saved with matplotlib version {version} and \"\n                 f\"is unlikely to function correctly.\")\n \n-        self.__dict__ = state\n+        self.__dict__.update(state)\n+        # Ensure DPI is correctly set after unpickling\n+        self.set_dpi(self._dpi)\n \n         # re-initialise some of the unstored state information\n         FigureCanvasBase(self)  # Set self.canvas.\n", "instance_id": "matplotlib__matplotlib-23476"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..b7dcde54 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -2102,6 +2102,14 @@ def pairplot(\n     diag_kws = {} if diag_kws is None else diag_kws.copy()\n     grid_kws = {} if grid_kws is None else grid_kws.copy()\n \n+    # Flatten MultiIndex columns if present\n+    if isinstance(data.columns, pd.MultiIndex):\n+        data.columns = ['_'.join(map(str, col)).strip() for col in data.columns]\n+\n+    # Flatten MultiIndex columns if present\n+    if isinstance(data.columns, pd.MultiIndex):\n+        data.columns = ['_'.join(map(str, col)).strip() for col in data.columns]\n+\n     # Resolve \"auto\" diag kind\n     if diag_kind == \"auto\":\n         if hue is None:\n", "instance_id": "mwaskom__seaborn-3407"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..1c15476760 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -186,7 +186,20 @@ class Command(BaseCommand):\n                             field_type = \"%s(%s\" % (rel_type, rel_to)\n                         else:\n                             field_type = \"%s('%s'\" % (rel_type, rel_to)\n-                    else:\n+                        related_name = f\"{att_name}_set\"\n+                        if related_name in used_column_names:\n+                            num = 0\n+                            while f\"{related_name}_{num}\" in used_column_names:\n+                                num += 1\n+                            related_name = f\"{related_name}_{num}\"\n+                        extra_params[\"related_name\"] = related_name\n+                        related_name = f\"{att_name}_set\"\n+                        if related_name in used_column_names:\n+                            num = 0\n+                            while f\"{related_name}_{num}\" in used_column_names:\n+                                num += 1\n+                            related_name = f\"{related_name}_{num}\"\n+                        extra_params[\"related_name\"] = related_name\n                         # Calling `get_field_type` to get the field type string and any\n                         # additional parameters and notes.\n                         field_type, field_params, field_notes = self.get_field_type(\n", "instance_id": "django__django-15819"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex dd154f72ee..ba8c3463a0 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -209,7 +209,11 @@ class AdminReadonlyField:\n             remote_field.model._meta.model_name,\n         )\n         try:\n-            url = reverse(url_name, args=[quote(remote_obj.pk)])\n+            url = reverse(\n+                url_name,\n+                args=[quote(remote_obj.pk)],\n+                current_app=self.model_admin.admin_site.name\n+            )\n             return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n         except NoReverseMatch:\n             return str(remote_obj)\n", "instance_id": "django__django-14855"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex ecae2566..a879c336 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -16,6 +16,14 @@ def concat(\n     positions=None,\n     fill_value=dtypes.NA,\n     join=\"outer\",\n+    ignore_missing_vars=False,\n+    ignore_missing_vars=False,\n+    ignore_missing_vars=False,\n+    ignore_missing_vars=False,\n+    ignore_missing_vars=False,\n+    ignore_missing_vars=False,\n+    ignore_missing_vars=False,\n+    ignore_missing_vars=False,\n ):\n     \"\"\"Concatenate xarray objects along a new or existing dimension.\n \n@@ -280,7 +288,14 @@ def _dataset_concat(\n     datasets = [ds.copy() for ds in datasets]\n     datasets = align(\n         *datasets, join=join, copy=False, exclude=[dim], fill_value=fill_value\n-    )\n+    if ignore_missing_vars:\n+        all_vars = set()\n+        for ds in datasets:\n+            all_vars.update(ds.variables)\n+        for ds in datasets:\n+            missing_vars = all_vars - set(ds.variables)\n+            for var in missing_vars:\n+                ds[var] = ds._construct_dataarray(np.full(ds.dims, fill_value), name=var)\n \n     dim_coords, dims_sizes, coord_names, data_names = _parse_datasets(datasets)\n     dim_names = set(dim_coords)\n@@ -302,7 +317,14 @@ def _dataset_concat(\n     # determine which variables to concatentate\n     concat_over, equals, concat_dim_lengths = _calc_concat_over(\n         datasets, dim, dim_names, data_vars, coords, compat\n-    )\n+    if ignore_missing_vars:\n+        all_vars = set()\n+        for ds in datasets:\n+            all_vars.update(ds.variables)\n+        for ds in datasets:\n+            missing_vars = all_vars - set(ds.variables)\n+            for var in missing_vars:\n+                ds[var] = ds._construct_dataarray(np.full(ds.dims, fill_value), name=var)\n \n     # determine which variables to merge, and then merge them according to compat\n     variables_to_merge = (coord_names | data_names) - concat_over - dim_names\n@@ -423,4 +445,52 @@ def _dataarray_concat(\n         fill_value=fill_value,\n         join=join,\n     )\n+    if ignore_missing_vars:\n+        all_vars = set()\n+        for ds in datasets:\n+            all_vars.update(ds.variables)\n+        for ds in datasets:\n+            missing_vars = all_vars - set(ds.variables)\n+            for var in missing_vars:\n+                ds[var] = ds._construct_dataarray(np.full(ds.dims, fill_value), name=var)\n+    if ignore_missing_vars:\n+        all_vars = set()\n+        for ds in datasets:\n+            all_vars.update(ds.variables)\n+        for ds in datasets:\n+            missing_vars = all_vars - set(ds.variables)\n+            for var in missing_vars:\n+                ds[var] = ds._construct_dataarray(np.full(ds.dims, fill_value), name=var)\n+    if ignore_missing_vars:\n+        all_vars = set()\n+        for ds in datasets:\n+            all_vars.update(ds.variables)\n+        for ds in datasets:\n+            missing_vars = all_vars - set(ds.variables)\n+            for var in missing_vars:\n+                ds[var] = ds._construct_dataarray(np.full(ds[var].shape, fill_value), name=var)\n+    if ignore_missing_vars:\n+        all_vars = set()\n+        for ds in datasets:\n+            all_vars.update(ds.variables)\n+        for ds in datasets:\n+            missing_vars = all_vars - set(ds.variables)\n+            for var in missing_vars:\n+                ds[var] = ds._construct_dataarray(np.full(ds[var].shape, fill_value), name=var)\n+    if ignore_missing_vars:\n+        all_vars = set()\n+        for ds in datasets:\n+            all_vars.update(ds.variables)\n+        for ds in datasets:\n+            missing_vars = all_vars - set(ds.variables)\n+            for var in missing_vars:\n+                ds[var] = ds._construct_dataarray(np.full(ds.dims, fill_value), name=var)\n+    if ignore_missing_vars:\n+        all_vars = set()\n+        for ds in datasets:\n+            all_vars.update(ds.variables)\n+        for ds in datasets:\n+            missing_vars = all_vars - set(ds.variables)\n+            for var in missing_vars:\n+                ds[var] = ds._construct_dataarray(np.full(ds.dims, fill_value), name=var)\n     return arrays[0]._from_temp_dataset(ds, name)\n", "instance_id": "pydata__xarray-3364"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex 892e19cabb..02e5feb268 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -268,6 +268,8 @@ def _eval_is_zero(self):\n         arg = self.args[0]\n         if arg.is_zero:\n             return True\n+        if isinstance(arg, cosh):\n+            return False\n \n \n class cosh(HyperbolicFunction):\n", "instance_id": "sympy__sympy-21627"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex f71bea25f5..87e6b541ef 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -15,6 +15,7 @@\n from sympy.core.compatibility import (exec_, is_sequence, iterable,\n     NotIterable, string_types, range, builtins, integer_types, PY3)\n from sympy.utilities.decorator import doctest_depends_on\n+from sympy.matrices import MatrixSymbol\n \n # These are the namespaces the lambda functions will use.\n MATH = {}\n@@ -416,6 +417,10 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True,\n         printer = Printer({'fully_qualified_modules': False, 'inline': True,\n                            'user_functions': user_functions})\n \n+    # Ensure that curly braces in MatrixSymbol names are handled correctly\n+    if isinstance(expr, MatrixSymbol) and '{' in expr.name and '}' in expr.name:\n+        expr = expr.xreplace({expr: MatrixSymbol(expr.name.replace('{', '').replace('}', ''), expr.shape[0], expr.shape[1])})\n+\n     # Get the names of the args, for creating a docstring\n     if not iterable(args):\n         args = (args,)\n@@ -423,17 +428,20 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True,\n     # Grab the callers frame, for getting the names by inspection (if needed)\n     callers_local_vars = inspect.currentframe().f_back.f_locals.items()\n     for n, var in enumerate(args):\n-        if hasattr(var, 'name'):\n+        if hasattr(var, 'name') and not isinstance(var, MatrixSymbol):\n             names.append(var.name)\n         else:\n-            # It's an iterable. Try to get name by inspection of calling frame.\n-            name_list = [var_name for var_name, var_val in callers_local_vars\n-                    if var_val is var]\n-            if len(name_list) == 1:\n-                names.append(name_list[0])\n+            # It's an iterable or a MatrixSymbol. Try to get name by inspection of calling frame.\n+            if isinstance(var, MatrixSymbol):\n+                names.append(str(var))\n             else:\n-                # Cannot infer name with certainty. arg_# will have to do.\n-                names.append('arg_' + str(n))\n+                name_list = [var_name for var_name, var_val in callers_local_vars\n+                        if var_val is var]\n+                if len(name_list) == 1:\n+                    names.append(name_list[0])\n+                else:\n+                    # Cannot infer name with certainty. arg_# will have to do.\n+                    names.append('arg_' + str(n))\n \n     imp_mod_lines = []\n     for mod, keys in (getattr(printer, 'module_imports', None) or {}).items():\n", "instance_id": "sympy__sympy-15011"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..780710d36 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -606,15 +606,15 @@ class PyLinter(\n                         skip_subtrees.append(root)\n                         continue\n \n-                    if \"__init__.py\" in files:\n-                        skip_subtrees.append(root)\n-                        yield root\n-                    else:\n-                        yield from (\n-                            os.path.join(root, file)\n-                            for file in files\n-                            if file.endswith(\".py\")\n-                        )\n+                    for file in files:\n+                        file_path = os.path.join(root, file)\n+                        if file.endswith(\".py\") and not _is_ignored_file(\n+                            file_path,\n+                            self.config.ignore,\n+                            self.config.ignore_patterns,\n+                            self.config.ignore_paths,\n+                        ):\n+                            yield file_path\n             else:\n                 yield something\n \n", "instance_id": "pylint-dev__pylint-7080"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "sympy__sympy-21055"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 94d9465d7..d29fd75fd 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -1280,6 +1280,8 @@ class FeatureUnion(TransformerMixin, _BaseComposition):\n         config = _get_output_config(\"transform\", self)\n         if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n             pd = check_pandas_support(\"transform\")\n+            # Align indices before concatenation\n+            Xs = [X.reindex(Xs[0].index) for X in Xs]\n             return pd.concat(Xs, axis=1)\n \n         if any(sparse.issparse(f) for f in Xs):\n", "instance_id": "scikit-learn__scikit-learn-25747"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..3bbaa4a14 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -149,12 +149,15 @@ class TempdirFactory:\n \n \n def get_user() -> Optional[str]:\n-    \"\"\"Return the current user name, or None if getuser() does not work\n-    in the current environment (see #1010).\"\"\"\n+    \"\"\"Return the current user name, sanitized to be a valid directory name,\n+    or None if getuser() does not work in the current environment (see #1010).\"\"\"\n     import getpass\n+    import re\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        # Replace any character that is not alphanumeric or an underscore with an underscore\n+        return re.sub(r'[^\\w]', '_', user)\n     except (ImportError, KeyError):\n         return None\n \n", "instance_id": "pytest-dev__pytest-8365"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/core/management/commands/dbshell.py b/django/core/management/commands/dbshell.py\nindex 30d2765afb..ea7ac4054c 100644\n--- a/django/core/management/commands/dbshell.py\n+++ b/django/core/management/commands/dbshell.py\n@@ -27,7 +27,10 @@ class Command(BaseCommand):\n     def handle(self, **options):\n         connection = connections[options[\"database\"]]\n         try:\n-            connection.client.runshell(options[\"parameters\"])\n+            parameters = options[\"parameters\"]\n+            if connection.vendor == 'postgresql':\n+                parameters.append(connection.settings_dict['NAME'])\n+            connection.client.runshell(parameters)\n         except FileNotFoundError:\n             # Note that we're assuming the FileNotFoundError relates to the\n             # command missing. It could be raised for some other reason, in\n", "instance_id": "django__django-15851"}
{"model_name_or_path": "200724-030837", "model_patch": "", "instance_id": "django__django-16400"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 62631f7ff..9193417c0 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -109,10 +109,12 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n-def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n+def inherited_members_option(arg: Any) -> Union[object, Set[str], List[str]]:\n     \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n     if arg in (None, True):\n         return 'object'\n+    elif isinstance(arg, str):\n+        return [x.strip() for x in arg.split(',') if x.strip()]\n     else:\n         return arg\n \n@@ -659,7 +661,12 @@ class Documenter:\n                                    (name, self.fullname), type='autodoc')\n             return False, selected\n         elif self.options.inherited_members:\n-            return False, [(m.name, m.value) for m in members.values()]\n+            if isinstance(self.options.inherited_members, list):\n+                return False, [(m.name, m.value) for m in members.values()\n+                               if not any(base.__name__ in self.options.inherited_members\n+                                          for base in inspect.getmro(m.class_)[1:])]\n+            else:\n+                return False, [(m.name, m.value) for m in members.values()]\n         else:\n             return False, [(m.name, m.value) for m in members.values()\n                            if m.directly_defined]\n", "instance_id": "sphinx-doc__sphinx-10325"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..56e92b5de 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -38,7 +38,7 @@ def _check_shape(param, param_shape, name):\n                          \"but got %s\" % (name, param_shape, param.shape))\n \n \n-def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n+def _check_X(X, n_clusters=None, n_features=None, ensure_min_samples=1):\n     \"\"\"Check the input data X.\n \n     Parameters\n@@ -53,10 +53,8 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     \"\"\"\n     X = check_array(X, dtype=[np.float64, np.float32],\n                     ensure_min_samples=ensure_min_samples)\n-    if n_components is not None and X.shape[0] < n_components:\n-        raise ValueError('Expected n_samples >= n_components '\n-                         'but got n_components = %d, n_samples = %d'\n-                         % (n_components, X.shape[0]))\n+    if n_clusters is not None and X.shape[0] < n_clusters:\n+        raise ValueError('Expected n_samples >= n_clusters but got n_clusters = %d, n_samples = %d' % (n_clusters, X.shape[0]))\n     if n_features is not None and X.shape[1] != n_features:\n         raise ValueError(\"Expected the input data X have %d features, \"\n                          \"but got %d features\"\n@@ -71,10 +69,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n     provides basic common methods for mixture models.\n     \"\"\"\n \n-    def __init__(self, n_components, tol, reg_covar,\n+    def __init__(self, n_clusters, tol, reg_covar,\n                  max_iter, n_init, init_params, random_state, warm_start,\n                  verbose, verbose_interval):\n-        self.n_components = n_components\n+        self.n_clusters = n_clusters\n         self.tol = tol\n         self.reg_covar = reg_covar\n         self.max_iter = max_iter\n@@ -92,10 +90,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n         ----------\n         X : array-like, shape (n_samples, n_features)\n         \"\"\"\n-        if self.n_components < 1:\n-            raise ValueError(\"Invalid value for 'n_components': %d \"\n+        if self.n_clusters < 1:\n+            raise ValueError(\"Invalid value for 'n_clusters': %d \"\n                              \"Estimation requires at least one component\"\n-                             % self.n_components)\n+                             % self.n_clusters)\n \n         if self.tol < 0.:\n             raise ValueError(\"Invalid value for 'tol': %.5f \"\n@@ -144,12 +142,12 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n         n_samples, _ = X.shape\n \n         if self.init_params == 'kmeans':\n-            resp = np.zeros((n_samples, self.n_components))\n-            label = cluster.KMeans(n_clusters=self.n_components, n_init=1,\n+            resp = np.zeros((n_samples, self.n_clusters))\n+            label = cluster.KMeans(n_clusters=self.n_clusters, n_init=1,\n                                    random_state=random_state).fit(X).labels_\n             resp[np.arange(n_samples), label] = 1\n         elif self.init_params == 'random':\n-            resp = random_state.rand(n_samples, self.n_components)\n+            resp = random_state.rand(n_samples, self.n_clusters)\n             resp /= resp.sum(axis=1)[:, np.newaxis]\n         else:\n             raise ValueError(\"Unimplemented initialization method '%s'\"\n@@ -188,7 +186,7 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n         -------\n         self\n         \"\"\"\n-        X = _check_X(X, self.n_components, ensure_min_samples=2)\n+        X = _check_X(X, self.n_clusters, ensure_min_samples=2)\n         self._check_initial_parameters(X)\n \n         # if we enable warm_start, we will have a unique initialisation\n@@ -380,13 +378,12 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n         self._check_is_fitted()\n \n         if n_samples < 1:\n-            raise ValueError(\n-                \"Invalid value for 'n_samples': %d . The sampling requires at \"\n-                \"least one sample.\" % (self.n_components))\n+            raise ValueError(\"Invalid value for 'n_samples': %d . The sampling requires at least one sample.\" % (self.n_clusters))\n \n         _, n_features = self.means_.shape\n         rng = check_random_state(self.random_state)\n         n_samples_comp = rng.multinomial(n_samples, self.weights_)\n+        self.labels_ = np.concatenate([np.full(sample, j, dtype=int) for j, sample in enumerate(n_samples_comp)])\n \n         if self.covariance_type == 'full':\n             X = np.vstack([\ndiff --git a/sklearn/mixture/gmm.py b/sklearn/mixture/gmm.py\nindex b3c231314..2b5dbea14 100644\n--- a/sklearn/mixture/gmm.py\n+++ b/sklearn/mixture/gmm.py\n@@ -256,11 +256,11 @@ class _GMMBase(BaseEstimator):\n \n     \"\"\"\n \n-    def __init__(self, n_components=1, covariance_type='diag',\n+    def __init__(self, n_clusters=1, covariance_type='diag',\n                  random_state=None, tol=1e-3, min_covar=1e-3,\n                  n_iter=100, n_init=1, params='wmc', init_params='wmc',\n                  verbose=0):\n-        self.n_components = n_components\n+        self.n_clusters = n_clusters\n         self.covariance_type = covariance_type\n         self.tol = tol\n         self.min_covar = min_covar\n@@ -416,7 +416,7 @@ class _GMMBase(BaseEstimator):\n         # decide which component to use for each sample\n         comps = weight_cdf.searchsorted(rand)\n         # for each component, generate all needed samples\n-        for comp in range(self.n_components):\n+        for comp in range(self.n_clusters):\n             # occurrences of current component in X\n             comp_in_X = (comp == comps)\n             # number of those occurrences\n@@ -450,7 +450,8 @@ class _GMMBase(BaseEstimator):\n         -------\n         C : array, shape = (n_samples,) component memberships\n         \"\"\"\n-        return self._fit(X, y).argmax(axis=1)\n+        self.labels_ = self._fit(X, y).argmax(axis=1)\n+        return self.labels_\n \n     def _fit(self, X, y=None, do_prediction=False):\n         \"\"\"Estimate model parameters with the EM algorithm.\n@@ -477,10 +478,8 @@ class _GMMBase(BaseEstimator):\n         # initialization step\n         X = check_array(X, dtype=np.float64, ensure_min_samples=2,\n                         estimator=self)\n-        if X.shape[0] < self.n_components:\n-            raise ValueError(\n-                'GMM estimation with %s components, but got only %s samples' %\n-                (self.n_components, X.shape[0]))\n+        if X.shape[0] < self.n_clusters:\n+            raise ValueError('GMM estimation with %s clusters, but got only %s samples' % (self.n_clusters, X.shape[0]))\n \n         max_log_prob = -np.infty\n \n@@ -494,14 +493,13 @@ class _GMMBase(BaseEstimator):\n \n             if 'm' in self.init_params or not hasattr(self, 'means_'):\n                 self.means_ = cluster.KMeans(\n-                    n_clusters=self.n_components,\n+                    n_clusters=self.n_clusters,\n                     random_state=self.random_state).fit(X).cluster_centers_\n                 if self.verbose > 1:\n                     print('\\tMeans have been initialized.')\n \n             if 'w' in self.init_params or not hasattr(self, 'weights_'):\n-                self.weights_ = np.tile(1.0 / self.n_components,\n-                                        self.n_components)\n+                self.weights_ = np.tile(1.0 / self.n_clusters, self.n_clusters)\n                 if self.verbose > 1:\n                     print('\\tWeights have been initialized.')\n \n@@ -511,7 +509,7 @@ class _GMMBase(BaseEstimator):\n                     cv.shape = (1, 1)\n                 self.covars_ = \\\n                     distribute_covar_matrix_to_match_covariance_type(\n-                        cv, self.covariance_type, self.n_components)\n+                        cv, self.covariance_type, self.n_clusters)\n                 if self.verbose > 1:\n                     print('\\tCovariance matrices have been initialized.')\n \n@@ -624,15 +622,15 @@ class _GMMBase(BaseEstimator):\n         \"\"\"Return the number of free parameters in the model.\"\"\"\n         ndim = self.means_.shape[1]\n         if self.covariance_type == 'full':\n-            cov_params = self.n_components * ndim * (ndim + 1) / 2.\n+            cov_params = self.n_clusters * ndim * (ndim + 1) / 2.\n         elif self.covariance_type == 'diag':\n-            cov_params = self.n_components * ndim\n+            cov_params = self.n_clusters * ndim\n         elif self.covariance_type == 'tied':\n             cov_params = ndim * (ndim + 1) / 2.\n         elif self.covariance_type == 'spherical':\n-            cov_params = self.n_components\n-        mean_params = ndim * self.n_components\n-        return int(cov_params + mean_params + self.n_components - 1)\n+            cov_params = self.n_clusters\n+        mean_params = ndim * self.n_clusters\n+        return int(cov_params + mean_params + self.n_clusters - 1)\n \n     def bic(self, X):\n         \"\"\"Bayesian information criterion for the current model fit\n@@ -646,8 +644,7 @@ class _GMMBase(BaseEstimator):\n         -------\n         bic : float (the lower the better)\n         \"\"\"\n-        return (-2 * self.score(X).sum() +\n-                self._n_parameters() * np.log(X.shape[0]))\n+        return -2 * self.score(X).sum() + self._n_parameters() * np.log(X.shape[0])\n \n     def aic(self, X):\n         \"\"\"Akaike information criterion for the current model fit\n@@ -661,7 +658,7 @@ class _GMMBase(BaseEstimator):\n         -------\n         aic : float (the lower the better)\n         \"\"\"\n-        return - 2 * self.score(X).sum() + 2 * self._n_parameters()\n+        return -2 * self.score(X).sum() + 2 * self._n_parameters()\n \n \n @deprecated(\"The class GMM is deprecated in 0.18 and will be \"\n", "instance_id": "scikit-learn__scikit-learn-11281"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 8376b487..43e5a1fd 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3906,6 +3906,11 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             If any dimensions would have inconsistent sizes in the updated\n             dataset.\n         \"\"\"\n+        # Ensure that dask arrays remain chunked\n+        for key, value in other.items():\n+            if isinstance(value, xr.DataArray) and is_duck_dask_array(value.data):\n+                other[key] = value.chunk()\n+\n         merge_result = dataset_update_method(self, other)\n         return self._replace(inplace=True, **merge_result._asdict())\n \n", "instance_id": "pydata__xarray-4493"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sphinx/application.py b/sphinx/application.py\nindex 495e90570..da32207b1 100644\n--- a/sphinx/application.py\n+++ b/sphinx/application.py\n@@ -206,6 +206,10 @@ class Sphinx:\n             self.confdir = abspath(confdir)\n             self.config = Config.read(self.confdir, confoverrides or {}, self.tags)\n \n+        # Ensure rst_prolog is correctly handled\n+        if self.config.rst_prolog:\n+            self.config.rst_prolog += '\\n'\n+\n         # initialize some limited config variables before initialize i18n and loading\n         # extensions\n         self.config.pre_init_values()\ndiff --git a/sphinx/io.py b/sphinx/io.py\nindex efd2b4ea9..8774cac49 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -101,6 +101,10 @@ class SphinxStandaloneReader(SphinxBaseReader):\n             self.parser = parser\n         self.settings = settings\n         self.input = self.read_source(settings.env)\n+\n+        # Prepend rst_prolog if it exists\n+        if settings.env.config.rst_prolog:\n+            self.input = settings.env.config.rst_prolog + self.input\n         self.parse()\n         return self.document\n \ndiff --git a/sphinx/util/docutils.py b/sphinx/util/docutils.py\nindex cbf26fcd5..cfc0dd13d 100644\n--- a/sphinx/util/docutils.py\n+++ b/sphinx/util/docutils.py\n@@ -77,6 +77,12 @@ def is_directive_registered(name: str) -> bool:\n     \"\"\"Check the *name* directive is already registered.\"\"\"\n     return name in directives._directives  # type: ignore\n \n+def prepend_rst_prolog(content: str, prolog: str) -> str:\n+    \"\"\"Prepend rst_prolog to the content if it exists.\"\"\"\n+    if prolog:\n+        return prolog + '\\n' + content\n+    return content\n+\n \n def register_directive(name: str, directive: type[Directive]) -> None:\n     \"\"\"Register a directive to docutils.\n", "instance_id": "sphinx-doc__sphinx-11445"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..56d18fdfd4 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -3,6 +3,7 @@\n import html\n import json\n import re\n+from django.core.serializers.json import DjangoJSONEncoder\n from html.parser import HTMLParser\n from urllib.parse import parse_qsl, quote, unquote, urlencode, urlsplit, urlunsplit\n \n@@ -59,7 +60,7 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=DjangoJSONEncoder):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n@@ -67,7 +68,7 @@ def json_script(value, element_id=None):\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n", "instance_id": "django__django-15789"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..0164630551 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -269,7 +269,11 @@ class TypeSerializer(BaseSerializer):\n             if module == builtins.__name__:\n                 return self.value.__name__, set()\n             else:\n-                return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n+                # Handle inner classes\n+                if hasattr(self.value, \"__qualname__\"):\n+                    return \"%s.%s\" % (module, self.value.__qualname__), {\"import %s\" % module}\n+                else:\n+                    return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n \n \n class UUIDSerializer(BaseSerializer):\ndiff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 4918261fb0..0538a0131b 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -81,8 +81,10 @@ class OperationWriter:\n         if getattr(migrations, name, None) == self.operation.__class__:\n             self.feed('migrations.%s(' % name)\n         else:\n-            imports.add('import %s' % (self.operation.__class__.__module__))\n-            self.feed('%s.%s(' % (self.operation.__class__.__module__, name))\n+            module = self.operation.__class__.__module__\n+            qualname = self.operation.__class__.__qualname__\n+            imports.add('import %s' % module)\n+            self.feed('%s.%s(' % (module, qualname))\n \n         self.indent()\n \n", "instance_id": "django__django-12125"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 11409e6f6..63f5ac3a5 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -318,8 +318,8 @@ class GoogleDocstring:\n             return [line[min_indent:] for line in lines]\n \n     def _escape_args_and_kwargs(self, name: str) -> str:\n-        if name.endswith('_'):\n-            name = name[:-1] + r'\\_'\n+        if name.endswith('_') and not name.endswith(r'\\_'):\n+            name = name[:-1] + '_'\n \n         if name[:2] == '**':\n             return r'\\*\\*' + name[2:]\n", "instance_id": "sphinx-doc__sphinx-7738"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex d4fc310f..c7ae9f74 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -234,6 +234,7 @@ class Config(dict):\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = \"r\",\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -261,7 +262,7 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n", "instance_id": "pallets__flask-4992"}
{"model_name_or_path": "200724-030837", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 7ca0d68fae..b769a36c2e 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -103,7 +103,8 @@ def iter_all_python_module_files():\n     # aren't loaded on the fly.\n     keys = sorted(sys.modules)\n     modules = tuple(m for m in map(sys.modules.__getitem__, keys) if not isinstance(m, weakref.ProxyTypes))\n-    return iter_modules_and_files(modules, frozenset(_error_files))\n+    manage_py_path = Path(sys.argv[0]).resolve()\n+    return iter_modules_and_files(modules, frozenset(_error_files).union({manage_py_path}))\n \n \n @functools.lru_cache(maxsize=1)\n", "instance_id": "django__django-11422"}
