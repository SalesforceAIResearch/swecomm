{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 1edc712358..9f4de5b472 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -397,41 +397,7 @@ def convert(expr):\n         else:\n             snumer = convert(numer)\n             sdenom = convert(denom)\n-            ldenom = len(sdenom.split())\n-            ratio = self._settings['long_frac_ratio']\n-            if self._settings['fold_short_frac'] \\\n-                    and ldenom <= 2 and not \"^\" in sdenom:\n-                # handle short fractions\n-                if self._needs_mul_brackets(numer, last=False):\n-                    tex += r\"\\left(%s\\right) / %s\" % (snumer, sdenom)\n-                else:\n-                    tex += r\"%s / %s\" % (snumer, sdenom)\n-            elif len(snumer.split()) > ratio*ldenom:\n-                # handle long fractions\n-                if self._needs_mul_brackets(numer, last=True):\n-                    tex += r\"\\frac{1}{%s}%s\\left(%s\\right)\" \\\n-                        % (sdenom, separator, snumer)\n-                elif numer.is_Mul:\n-                    # split a long numerator\n-                    a = S.One\n-                    b = S.One\n-                    for x in numer.args:\n-                        if self._needs_mul_brackets(x, last=False) or \\\n-                                len(convert(a*x).split()) > ratio*ldenom or \\\n-                                (b.is_commutative is x.is_commutative is False):\n-                            b *= x\n-                        else:\n-                            a *= x\n-                    if self._needs_mul_brackets(b, last=True):\n-                        tex += r\"\\frac{%s}{%s}%s\\left(%s\\right)\" \\\n-                            % (convert(a), sdenom, separator, convert(b))\n-                    else:\n-                        tex += r\"\\frac{%s}{%s}%s%s\" \\\n-                            % (convert(a), sdenom, separator, convert(b))\n-                else:\n-                    tex += r\"\\frac{1}{%s}%s%s\" % (sdenom, separator, snumer)\n-            else:\n-                tex += r\"\\frac{%s}{%s}\" % (snumer, sdenom)\n+            tex += r\"\\frac{%s}{%s}\" % (snumer, sdenom)\n \n         if include_parens:\n             tex += \")\"\n@@ -2148,6 +2114,8 @@ def latex(expr, **settings):\n \n     \"\"\"\n \n+    # Ignore assumptions for printing\n+    expr = expr.xreplace({s: s.copy(assumptions={}) for s in expr.free_symbols})\n     return LatexPrinter(settings).doprint(expr)\n \n \n", "instance_id": "sympy__sympy-11897"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex d4fc310f..c7ae9f74 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -234,6 +234,7 @@ class Config(dict):\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = \"r\",\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -261,7 +262,7 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n", "instance_id": "pallets__flask-4992"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/simplify/fu.py b/sympy/simplify/fu.py\nindex ad1130ef96..dfb991abc0 100644\n--- a/sympy/simplify/fu.py\n+++ b/sympy/simplify/fu.py\n@@ -311,7 +311,7 @@ def TR2i(rv, half=False):\n \n     def f(rv):\n         if not rv.is_Mul:\n-            return rv\n+                return rv\n \n         n, d = rv.as_numer_denom()\n         if n.is_Atom or d.is_Atom:\n@@ -501,25 +501,26 @@ def _f(rv):\n         if not (rv.is_Pow and rv.base.func == f):\n             return rv\n \n-        if (rv.exp < 0) == True:\n-            return rv\n-        if (rv.exp > max) == True:\n-            return rv\n-        if rv.exp == 2:\n-            return h(g(rv.base.args[0])**2)\n-        else:\n-            if rv.exp == 4:\n-                e = 2\n-            elif not pow:\n-                if rv.exp % 2:\n-                    return rv\n-                e = rv.exp//2\n+        if rv.exp.is_real:\n+            if (rv.exp < 0) == True:\n+                return rv\n+            if (rv.exp > max) == True:\n+                return rv\n+            if rv.exp == 2:\n+                return h(g(rv.base.args[0])**2)\n             else:\n-                p = perfect_power(rv.exp)\n-                if not p:\n-                    return rv\n-                e = rv.exp//2\n-            return h(g(rv.base.args[0])**2)**e\n+                if rv.exp == 4:\n+                    e = 2\n+                elif not pow:\n+                    if rv.exp % 2:\n+                        return rv\n+                    e = rv.exp//2\n+                else:\n+                    p = perfect_power(rv.exp)\n+                    if not p:\n+                        return rv\n+                    e = rv.exp//2\n+                return h(g(rv.base.args[0])**2)**e\n \n     return bottom_up(rv, _f)\n \n", "instance_id": "sympy__sympy-17139"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/src/_pytest/junitxml.py b/src/_pytest/junitxml.py\nindex 15c630b1d..d2121f0ae 100644\n--- a/src/_pytest/junitxml.py\n+++ b/src/_pytest/junitxml.py\n@@ -9,6 +9,8 @@ Output conforms to https://github.com/jenkinsci/xunit-plugin/blob/master/\n src/main/resources/org/jenkinsci/plugins/xunit/types/model/xsd/junit-10.xsd\n \"\"\"\n import functools\n+import socket\n+from datetime import datetime\n import os\n import re\n import sys\n@@ -657,15 +659,23 @@ class LogXML:\n         )\n         logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n \n+        hostname = socket.gethostname()\n+        timestamp = datetime.utcnow().isoformat() + \"Z\"\n+        \n+        properties_node = self._get_global_properties_node()\n+        testcases = [x.to_xml() for x in self.node_reporters_ordered]\n+        \n         suite_node = Junit.testsuite(\n-            self._get_global_properties_node(),\n-            [x.to_xml() for x in self.node_reporters_ordered],\n+            properties_node,\n+            *testcases,\n             name=self.suite_name,\n             errors=self.stats[\"error\"],\n             failures=self.stats[\"failure\"],\n             skipped=self.stats[\"skipped\"],\n             tests=numtests,\n             time=\"%.3f\" % suite_time_delta,\n+            hostname=hostname,\n+            timestamp=timestamp,\n         )\n         logfile.write(Junit.testsuites([suite_node]).unicode(indent=0))\n         logfile.close()\n", "instance_id": "pytest-dev__pytest-5692"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/http/request.py b/django/http/request.py\nindex 0b64b1b2b9..f8ade0443d 100644\n--- a/django/http/request.py\n+++ b/django/http/request.py\n@@ -4,6 +4,7 @@ import copy\n from io import BytesIO\n from itertools import chain\n from urllib.parse import parse_qsl, quote, urlencode, urljoin, urlsplit\n+from email.utils import parsedate_to_datetime\n \n from django.conf import settings\n from django.core import signing\n@@ -148,6 +149,15 @@ class HttpRequest:\n                 )\n             raise DisallowedHost(msg)\n \n+    def get(self, key, default=None, version=None):\n+        \"\"\"\n+        Return the value for the given key. If the key doesn't exist, return\n+        default.\n+        \"\"\"\n+        if key == 'HTTP_IF_MODIFIED_SINCE' and self.META.get(key) == '':\n+            return default\n+        return self._cache.get(self.make_key(key, version), default)\n+\n     def get_port(self):\n         \"\"\"Return the port number for the request as a string.\"\"\"\n         if settings.USE_X_FORWARDED_PORT and \"HTTP_X_FORWARDED_PORT\" in self.META:\n", "instance_id": "django__django-15498"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/core/cache/backends/filebased.py b/django/core/cache/backends/filebased.py\nindex 631da49444..215fefbcc0 100644\n--- a/django/core/cache/backends/filebased.py\n+++ b/django/core/cache/backends/filebased.py\n@@ -90,10 +90,11 @@ class FileBasedCache(BaseCache):\n \n     def has_key(self, key, version=None):\n         fname = self._key_to_file(key, version)\n-        if os.path.exists(fname):\n+        try:\n             with open(fname, \"rb\") as f:\n                 return not self._is_expired(f)\n-        return False\n+        except FileNotFoundError:\n+            return False\n \n     def _cull(self):\n         \"\"\"\n", "instance_id": "django__django-16379"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex dadd4acfa1..ca35a4bb9b 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2040,7 +2040,7 @@ class InlineModelAdmin(BaseModelAdmin):\n         if self.verbose_name is None:\n             self.verbose_name = self.model._meta.verbose_name\n         if self.verbose_name_plural is None:\n-            self.verbose_name_plural = self.model._meta.verbose_name_plural\n+            self.verbose_name_plural = self.verbose_name + 's' if self.verbose_name else self.model._meta.verbose_name_plural\n \n     @property\n     def media(self):\n", "instance_id": "django__django-13710"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "django__django-15738"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex d3d53e3d98..741d443f48 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -490,27 +490,24 @@ class Colorbar:\n \n     filled = _api.deprecate_privatize_attribute(\"3.6\")\n \n-    def update_normal(self, mappable):\n+    def update_bruteforce(self, mappable):\n         \"\"\"\n-        Update solid patches, lines, etc.\n+        Update the colorbar by recalculating all parameters and redrawing.\n \n-        This is meant to be called when the norm of the image or contour plot\n-        to which this colorbar belongs changes.\n+        This method is more robust and should be used when `update_normal`\n+        does not produce the desired effect.\n \n-        If the norm on the mappable is different than before, this resets the\n-        locator and formatter for the axis, so if these have been customized,\n-        they will need to be customized again.  However, if the norm only\n-        changes values of *vmin*, *vmax* or *cmap* then the old formatter\n-        and locator will be preserved.\n+        Parameters\n+        ----------\n+        mappable : `.ScalarMappable`\n+            The mappable whose colormap and norm will be used.\n         \"\"\"\n-        _log.debug('colorbar update normal %r %r', mappable.norm, self.norm)\n+        _log.debug('colorbar update bruteforce %r %r', mappable.norm, self.norm)\n         self.mappable = mappable\n         self.set_alpha(mappable.get_alpha())\n         self.cmap = mappable.cmap\n-        if mappable.norm != self.norm:\n-            self.norm = mappable.norm\n-            self._reset_locator_formatter_scale()\n-\n+        self.norm = mappable.norm\n+        self._reset_locator_formatter_scale()\n         self._draw_all()\n         if isinstance(self.mappable, contour.ContourSet):\n             CS = self.mappable\n", "instance_id": "matplotlib__matplotlib-25498"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..a9f5c6dcb0 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -166,6 +166,7 @@ class Line3D(lines.Line2D):\n         Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n         \"\"\"\n         super().__init__([], [], *args, **kwargs)\n+        self._verts3d = (xs, ys, zs)\n         self._verts3d = xs, ys, zs\n \n     def set_3d_properties(self, zs=0, zdir='z'):\n", "instance_id": "matplotlib__matplotlib-23563"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e27297..235d9c1748 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -303,12 +303,14 @@ def _separable(transform):\n     \"\"\"\n     if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:\n         return transform_matrix\n-    elif isinstance(transform, CompoundModel):\n-        sepleft = _separable(transform.left)\n-        sepright = _separable(transform.right)\n-        return _operators[transform.op](sepleft, sepright)\n+    if isinstance(transform, CompoundModel):\n+        left_separable = _separable(transform.left)\n+        right_separable = _separable(transform.right)\n+        return _operators[transform.op](left_separable, right_separable)\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n+    else:\n+        raise ModelDefinitionError(\"Unsupported model type for separability calculation.\")\n \n \n # Maps modeling operators to a function computing and represents the\n", "instance_id": "astropy__astropy-12907"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "pytest-dev__pytest-5221"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..a6fd4798ea 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1508,7 +1508,7 @@ class DraggableBase:\n         ]\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+    canvas = property(lambda self: self.ref_artist.figure.canvas if self.ref_artist.figure else None)\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1559,13 +1559,15 @@ class DraggableBase:\n     def disconnect(self):\n         \"\"\"Disconnect the callbacks.\"\"\"\n         for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n+            if self.canvas:\n+                self.canvas.mpl_disconnect(cid)\n         try:\n             c1 = self._c1\n         except AttributeError:\n             pass\n         else:\n-            self.canvas.mpl_disconnect(c1)\n+            if self.canvas:\n+                self.canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n", "instance_id": "matplotlib__matplotlib-25442"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..73765e7f0 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -405,7 +405,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     # selection is done with one dimension\n                     columns = columns[0]\n \n-            yield (name, trans, columns, get_weight(name))\n+            if not _is_empty_column_selection(columns):\n+                yield (name, trans, columns, get_weight(name))\n \n     def _validate_transformers(self):\n         if not self.transformers:\n@@ -543,40 +544,46 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         feature_names_out : ndarray of shape (n_features,), dtype=str\n             Transformed feature names.\n         \"\"\"\n-        if self.verbose_feature_names_out:\n-            # Prefix the feature names out with the transformers name\n-            names = list(\n-                chain.from_iterable(\n-                    (f\"{name}__{i}\" for i in feature_names_out)\n-                    for name, feature_names_out in transformer_with_feature_names_out\n+        if transformer_with_feature_names_out:\n+            if transformer_with_feature_names_out:\n+                if self.verbose_feature_names_out:\n+                    # Prefix the feature names out with the transformers name\n+                    names = list(\n+                        chain.from_iterable(\n+                            (f\"{name}__{i}\" for i in feature_names_out)\n+                            for name, feature_names_out in transformer_with_feature_names_out\n+                        )\n+                    )\n+                    return np.asarray(names, dtype=object)\n+\n+                # verbose_feature_names_out is False\n+                # Check that names are all unique without a prefix\n+                feature_names_count = Counter(\n+                    chain.from_iterable(s for _, s in transformer_with_feature_names_out)\n+                )\n+                top_6_overlap = [\n+                    name for name, count in feature_names_count.most_common(6) if count > 1\n+                ]\n+                top_6_overlap.sort()\n+                if top_6_overlap:\n+                    if len(top_6_overlap) == 6:\n+                        # There are more than 5 overlapping names, we only show the 5\n+                        # of the feature names\n+                        names_repr = str(top_6_overlap[:5])[:-1] + \", ...]\"\n+                    else:\n+                        names_repr = str(top_6_overlap)\n+                    raise ValueError(\n+                        f\"Output feature names: {names_repr} are not unique. Please set \"\n+                        \"verbose_feature_names_out=True to add prefixes to feature names\"\n+                    )\n+\n+                return np.concatenate(\n+                    [name for _, name in transformer_with_feature_names_out],\n                 )\n-            )\n-            return np.asarray(names, dtype=object)\n-\n-        # verbose_feature_names_out is False\n-        # Check that names are all unique without a prefix\n-        feature_names_count = Counter(\n-            chain.from_iterable(s for _, s in transformer_with_feature_names_out)\n-        )\n-        top_6_overlap = [\n-            name for name, count in feature_names_count.most_common(6) if count > 1\n-        ]\n-        top_6_overlap.sort()\n-        if top_6_overlap:\n-            if len(top_6_overlap) == 6:\n-                # There are more than 5 overlapping names, we only show the 5\n-                # of the feature names\n-                names_repr = str(top_6_overlap[:5])[:-1] + \", ...]\"\n             else:\n-                names_repr = str(top_6_overlap)\n-            raise ValueError(\n-                f\"Output feature names: {names_repr} are not unique. Please set \"\n-                \"verbose_feature_names_out=True to add prefixes to feature names\"\n-            )\n-\n-        return np.concatenate(\n-            [name for _, name in transformer_with_feature_names_out],\n-        )\n+                return np.array([], dtype=object)\n+        else:\n+            return np.array([], dtype=object)\n \n     def _update_fitted_transformers(self, transformers):\n         # transformers are fitted; excludes 'drop' cases\n", "instance_id": "scikit-learn__scikit-learn-25570"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex ba3b62620d..c9d65db16f 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -3,7 +3,7 @@ import json\n import os\n import posixpath\n import re\n-from urllib.parse import unquote, urldefrag, urlsplit, urlunsplit\n+from urllib.parse import unquote, urldefrag, urlsplit, urlunsplit, urlparse\n \n from django.conf import settings\n from django.contrib.staticfiles.utils import check_settings, matches_patterns\n@@ -139,7 +139,8 @@ class HashedFilesMixin:\n                 urlparts[2] += '?'\n             final_url = urlunsplit(urlparts)\n \n-        return unquote(final_url)\n+        script_name = urlparse(settings.SCRIPT_NAME).path if hasattr(settings, 'SCRIPT_NAME') else ''\n+        return unquote(script_name + final_url)\n \n     def url(self, name, force=False):\n         \"\"\"\ndiff --git a/django/core/files/storage.py b/django/core/files/storage.py\nindex 4c27fce605..fa738240cb 100644\n--- a/django/core/files/storage.py\n+++ b/django/core/files/storage.py\n@@ -1,6 +1,6 @@\n import os\n from datetime import datetime\n-from urllib.parse import urljoin\n+from urllib.parse import urljoin, urlparse\n \n from django.conf import settings\n from django.core.exceptions import SuspiciousFileOperation\n@@ -332,7 +332,8 @@ class FileSystemStorage(Storage):\n         url = filepath_to_uri(name)\n         if url is not None:\n             url = url.lstrip('/')\n-        return urljoin(self.base_url, url)\n+        script_name = urlparse(settings.SCRIPT_NAME).path if hasattr(settings, 'SCRIPT_NAME') else ''\n+        return urljoin(script_name + self.base_url, url)\n \n     def _datetime_from_timestamp(self, ts):\n         \"\"\"\ndiff --git a/django/template/defaulttags.py b/django/template/defaulttags.py\nindex 602e8b2a15..f69259191a 100644\n--- a/django/template/defaulttags.py\n+++ b/django/template/defaulttags.py\n@@ -11,6 +11,7 @@ from django.utils import timezone\n from django.utils.html import conditional_escape, format_html\n from django.utils.lorem_ipsum import paragraphs, words\n from django.utils.safestring import mark_safe\n+from urllib.parse import urlparse\n \n from .base import (\n     BLOCK_TAG_END, BLOCK_TAG_START, COMMENT_TAG_END, COMMENT_TAG_START,\n@@ -452,7 +453,8 @@ class URLNode(Node):\n         else:\n             if context.autoescape:\n                 url = conditional_escape(url)\n-            return url\n+            script_name = context.request.META.get('SCRIPT_NAME', '')\n+            return script_name + url\n \n \n class VerbatimNode(Node):\n", "instance_id": "django__django-11564"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "scikit-learn__scikit-learn-13497"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex d4ca323e0d..bd6587f2bf 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -1,6 +1,8 @@\n \"\"\"Base class for all the objects in SymPy\"\"\"\n from __future__ import print_function, division\n-from collections import Mapping, defaultdict\n+from collections.abc import Mapping\n+from collections import defaultdict\n+from sympy.core.singleton import S\n from itertools import chain\n \n from .assumptions import BasicMeta, ManagedProperties\n@@ -912,6 +914,7 @@ def subs(self, *args, **kwargs):\n                 if not isinstance(rv, Basic):\n                     break\n                 reps[d] = new\n+            from sympy import S\n             reps[m] = S.One  # get rid of m\n             return rv.xreplace(reps)\n         else:\n@@ -920,7 +923,23 @@ def subs(self, *args, **kwargs):\n                 rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n-            return rv\n+            from sympy import S\n+            if rv.has(S.ComplexInfinity, S.NaN, S.Infinity, S.NegativeInfinity):\n+                return S.NaN\n+            else:\n+                from sympy import S\n+                if rv.has(S.ComplexInfinity, S.NaN, S.Infinity, S.NegativeInfinity):\n+                    return S.NaN\n+                else:\n+                    from sympy import S\n+                    if rv.has(S.ComplexInfinity, S.NaN, S.Infinity, S.NegativeInfinity):\n+                        return S.NaN\n+                    else:\n+                        from sympy import S\n+                        if rv.has(S.ComplexInfinity, S.NaN, S.Infinity, S.NegativeInfinity):\n+                            return S.NaN\n+                        else:\n+                            return rv\n \n     @cacheit\n     def _subs(self, old, new, **hints):\n@@ -1419,7 +1438,11 @@ def rec_replace(expr):\n                 rv = rv.xreplace(r)\n \n         if not map:\n-            return rv\n+            from sympy import S\n+            if rv.has(S.ComplexInfinity, S.NaN, S.Infinity, S.NegativeInfinity):\n+                return S.NaN\n+            else:\n+                return rv\n         else:\n             if simultaneous:\n                 # restore subexpressions in mapping\ndiff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex c36d6f271d..f6c51206a2 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -10,6 +10,7 @@\n from mpmath.libmp import mpf_log, prec_to_dps\n \n from collections import defaultdict\n+from sympy.core.singleton import S\n \n class Expr(Basic, EvalfMixin):\n     \"\"\"\n", "instance_id": "sympy__sympy-13915"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "pytest-dev__pytest-6116"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 7a3de33522..5ebcebf0a3 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -618,8 +618,7 @@ def adjust(s, wid=None, how='<^>'):\n \n             if first:\n                 # change F baseline so it centers on the sign\n-                prettyF.baseline -= d - (prettyF.height()//2 -\n-                                         prettyF.baseline) - adjustment\n+                prettyF.baseline = prettySign.baseline\n                 first = False\n \n             # put padding to the right\n@@ -629,7 +628,7 @@ def adjust(s, wid=None, how='<^>'):\n             # put the present prettyF to the right\n             prettyF = prettyForm(*prettySign.right(prettyF))\n \n-        prettyF.baseline = max_upper + sign_height//2\n+        prettyF.baseline = max_upper + sign_height//2 - (prettyF.height() - prettyF.baseline)\n         prettyF.binding = prettyForm.MUL\n         return prettyF\n \n", "instance_id": "sympy__sympy-16503"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 00c19e2c55..b853e65a58 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -848,10 +848,6 @@ class MultiWidget(Widget):\n         context['widget']['subwidgets'] = subwidgets\n         return context\n \n-    def id_for_label(self, id_):\n-        if id_:\n-            id_ += '_0'\n-        return id_\n \n     def value_from_datadict(self, data, files, name):\n         return [\n@@ -1086,3 +1082,11 @@ class SelectDateWidget(Widget):\n             ('{}_{}'.format(name, interval) in data)\n             for interval in ('year', 'month', 'day')\n         )\n+    def id_for_label(self, id_, index='0'):\n+        \"\"\"\n+        Use an incremented id for each subwidget where the main widget\n+        references the zero index.\n+        \"\"\"\n+        if id_:\n+            id_ = '%s_%s' % (id_, index)\n+        return id_\n", "instance_id": "django__django-15061"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 92627132e9..045de14cae 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -11,6 +11,7 @@\n from sympy.functions.special.tensor_functions import KroneckerDelta\n from sympy.matrices import ShapeError\n from sympy.simplify import simplify\n+from sympy.core import S, Symbol, Tuple, Integer, Basic, Expr, Eq, Sum\n from sympy.utilities.misc import filldedent\n \n \n@@ -112,6 +113,8 @@ def __mul__(self, other):\n     @_sympifyit('other', NotImplemented)\n     @call_highest_priority('__rmul__')\n     def __matmul__(self, other):\n+        if not isinstance(other, MatrixExpr):\n+            raise ValueError(\"Scalar operands are not allowed, use '*' instead\")\n         return MatMul(self, other).doit()\n \n     @_sympifyit('other', NotImplemented)\n", "instance_id": "sympy__sympy-13773"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 90ea232faf..c600fe88e2 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -1112,7 +1112,7 @@ def is_upper(self):\n         \"\"\"\n         return all(self[i, j].is_zero\n                    for i in range(1, self.rows)\n-                   for j in range(i))\n+                   for j in range(min(i, self.cols)))\n \n     @property\n     def is_zero(self):\n", "instance_id": "sympy__sympy-12454"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/polys/compatibility.py b/sympy/polys/compatibility.py\nindex 217a481b46..cf142053e7 100644\n--- a/sympy/polys/compatibility.py\n+++ b/sympy/polys/compatibility.py\n@@ -156,8 +156,8 @@\n from sympy.polys.euclidtools import dmp_cancel\n from sympy.polys.factortools import dup_trial_division\n from sympy.polys.factortools import dmp_trial_division\n-from sympy.polys.factortools import dup_zz_mignotte_bound\n-from sympy.polys.factortools import dmp_zz_mignotte_bound\n+from sympy.polys.factortools import dup_zz_knuth_cohen_bound\n+from sympy.polys.factortools import dmp_zz_knuth_cohen_bound\n from sympy.polys.factortools import dup_zz_hensel_step\n from sympy.polys.factortools import dup_zz_hensel_lift\n from sympy.polys.factortools import dup_zz_zassenhaus\ndiff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex 93298f47e6..3ffbaa14eb 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -123,22 +123,22 @@ def dmp_trial_division(f, factors, u, K):\n     return _sort_factors(result)\n \n \n-def dup_zz_mignotte_bound(f, K):\n-    \"\"\"Mignotte bound for univariate polynomials in `K[x]`. \"\"\"\n+def dup_zz_knuth_cohen_bound(f, K):\n+    \"\"\"Knuth-Cohen bound for univariate polynomials in `K[x]`. \"\"\"\n     a = dup_max_norm(f, K)\n     b = abs(dup_LC(f, K))\n     n = dup_degree(f)\n \n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    return K.sqrt(K(n + 1)) * (2**(n - 1)) * a * b\n \n \n-def dmp_zz_mignotte_bound(f, u, K):\n-    \"\"\"Mignotte bound for multivariate polynomials in `K[X]`. \"\"\"\n+def dmp_zz_knuth_cohen_bound(f, u, K):\n+    \"\"\"Knuth-Cohen bound for multivariate polynomials in `K[X]`. \"\"\"\n     a = dmp_max_norm(f, u, K)\n     b = abs(dmp_ground_LC(f, u, K))\n     n = sum(dmp_degree_list(f, u))\n \n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    return K.sqrt(K(n + 1)) * (2**(n - 1)) * a * b\n \n \n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n@@ -933,7 +933,7 @@ def dmp_zz_wang(f, u, K, mod=None, seed=None):\n \n     ct, T = dmp_zz_factor(dmp_LC(f, K), u - 1, K)\n \n-    b = dmp_zz_mignotte_bound(f, u, K)\n+    b = dmp_zz_knuth_cohen_bound(f, u, K)\n     p = K(nextprime(b))\n \n     if mod is None:\n", "instance_id": "sympy__sympy-19254"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/tensor/array/dense_ndim_array.py b/sympy/tensor/array/dense_ndim_array.py\nindex 6019daf787..fdb28ca74a 100644\n--- a/sympy/tensor/array/dense_ndim_array.py\n+++ b/sympy/tensor/array/dense_ndim_array.py\n@@ -141,7 +141,7 @@ def _new(cls, iterable, shape, **kwargs):\n         shape, flat_list = cls._handle_ndarray_creation_inputs(iterable, shape, **kwargs)\n         shape = Tuple(*map(_sympify, shape))\n         cls._check_special_bounds(flat_list, shape)\n-        flat_list = flatten(flat_list)\n+        flat_list = flatten(flat_list) if flat_list else []\n         flat_list = Tuple(*flat_list)\n         self = Basic.__new__(cls, flat_list, shape, **kwargs)\n         self._shape = shape\n@@ -173,7 +173,7 @@ def _new(cls, iterable, shape, **kwargs):\n         self._shape = shape\n         self._array = list(flat_list)\n         self._rank = len(shape)\n-        self._loop_size = functools.reduce(lambda x,y: x*y, shape) if shape else len(flat_list)\n+        self._loop_size = functools.reduce(lambda x,y: x*y, shape, 1) if shape else len(flat_list)\n         return self\n \n     def __setitem__(self, index, value):\ndiff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex 6490a655a4..d22119d1f5 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -193,6 +193,8 @@ def _scan_iterable_shape(cls, iterable):\n         def f(pointer):\n             if not isinstance(pointer, Iterable):\n                 return [pointer], ()\n+            if isinstance(pointer, Iterable) and not pointer:\n+                return [], (0,)\n \n             result = []\n             elems, shapes = zip(*[f(i) for i in pointer])\n", "instance_id": "sympy__sympy-23117"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex b821c42845..fb241d6ab9 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -234,17 +234,29 @@ def transpose(self):\n \n     def _entry(self, i, j, **kwargs):\n         # Find row entry\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n+        row_block, row_offset = self._find_block_index(i, self.rowblocksizes)\n+        col_block, col_offset = self._find_block_index(j, self.colblocksizes)\n+        return self.blocks[row_block, col_block][row_offset, col_offset]\n+\n+    def _find_block_index(self, index, blocksizes):\n+        from sympy.core.relational import Relational\n+        from sympy.core.symbol import Symbol\n+\n+        from sympy.core.relational import Relational\n+        from sympy.core.symbol import Symbol\n+\n+        from sympy.core.relational import Relational\n+        from sympy.core.symbol import Symbol\n+\n+        for block, size in enumerate(blocksizes):\n+            if isinstance(index, (Relational, Symbol)):\n+                if index < size:\n+                    return block, index\n             else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+                if index < size:\n+                    return block, index\n+                index -= size\n+        raise IndexError(\"Index out of bounds\")\n \n     @property\n     def is_Identity(self):\n", "instance_id": "sympy__sympy-19007"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/utils/functional.py b/django/utils/functional.py\nindex 9e1be0fe0f..76b4f920e8 100644\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -331,6 +331,11 @@ class LazyObject:\n             self._setup()\n         return (unpickle_lazyobject, (self._wrapped,))\n \n+    def __radd__(self, other):\n+        if self._wrapped is empty:\n+            self._setup()\n+        return other + self._wrapped\n+\n     def __copy__(self):\n         if self._wrapped is empty:\n             # If uninitialized, copy the wrapper. Use type(self), not\n", "instance_id": "django__django-15400"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 03cf57a30b..1a0673865c 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1065,8 +1065,8 @@ def zero(self):\n     def __new__(cls, *args, **kwargs):\n         evaluate = kwargs.get('evaluate', global_evaluate[0])\n \n-        # flatten inputs to merge intersections and iterables\n-        args = _sympify(args)\n+        # flatten inputs to merge intersections and iterables, and remove duplicates\n+        args = list(ordered(set(_sympify(args))))\n \n         # Reduce sets using known rules\n         if evaluate:\n@@ -1259,8 +1259,8 @@ def zero(self):\n     def __new__(cls, *args, **kwargs):\n         evaluate = kwargs.get('evaluate', global_evaluate[0])\n \n-        # flatten inputs to merge intersections and iterables\n-        args = _sympify(args)\n+        # flatten inputs to merge intersections and iterables, and remove duplicates\n+        args = list(ordered(set(_sympify(args))))\n \n         # Reduce sets using known rules\n         if evaluate:\n@@ -1291,6 +1291,42 @@ def _sup(self):\n         raise NotImplementedError()\n \n     def _contains(self, other):\n+        from sympy import Piecewise, Eq\n+        if len(self.args) == 2 and all(isinstance(arg, FiniteSet) for arg in self.args):\n+            common_elements = self.args[0].intersect(self.args[1])\n+            if len(common_elements) == 1:\n+                element = list(common_elements)[0]\n+                return Piecewise((FiniteSet(element), Eq(self.args[1].args[0], element)), (S.EmptySet, True))\n+        from sympy import Piecewise, Eq\n+        if len(self.args) > 1 and all(isinstance(arg, FiniteSet) for arg in self.args):\n+            common_elements = self.args[0]\n+            for arg in self.args[1:]:\n+                common_elements = common_elements.intersect(arg)\n+                if not common_elements:\n+                    return S.EmptySet\n+            if len(common_elements) == 1:\n+                element = list(common_elements)[0]\n+                return Piecewise((FiniteSet(element), Eq(self.args[1].args[0], element)), (S.EmptySet, True))\n+        from sympy import Piecewise, Eq\n+        if len(self.args) > 1 and all(isinstance(arg, FiniteSet) for arg in self.args):\n+            common_elements = self.args[0]\n+            for arg in self.args[1:]:\n+                common_elements = common_elements.intersect(arg)\n+                if not common_elements:\n+                    return S.EmptySet\n+            if len(common_elements) == 1:\n+                element = list(common_elements)[0]\n+                return Piecewise((FiniteSet(element), Eq(self.args[1].args[0], element)), (S.EmptySet, True))\n+        from sympy import Piecewise, Eq\n+        if len(self.args) > 1 and all(isinstance(arg, FiniteSet) for arg in self.args):\n+            common_elements = self.args[0]\n+            for arg in self.args[1:]:\n+                common_elements = common_elements.intersect(arg)\n+                if not common_elements:\n+                    return S.EmptySet\n+            if len(common_elements) == 1:\n+                element = list(common_elements)[0]\n+                return Piecewise((FiniteSet(element), Eq(self.args[1].args[0], element)), (S.EmptySet, True))\n         return And(*[set.contains(other) for set in self.args])\n \n     def __iter__(self):\n", "instance_id": "sympy__sympy-16988"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e0eeccefa6..dce9b98bf6 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1137,9 +1137,12 @@ class QuerySet:\n     def distinct(self, *field_names):\n         \"\"\"\n         Return a new QuerySet instance that will select only distinct results.\n+        Raise an error if called on a union queryset.\n         \"\"\"\n         assert not self.query.is_sliced, \\\n             \"Cannot create distinct fields once a slice has been taken.\"\n+        if self.query.combinator:\n+            raise NotSupportedError(\"Calling distinct() after union() is not supported.\")\n         obj = self._chain()\n         obj.query.add_distinct_fields(*field_names)\n         return obj\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex bb230647eb..683a5a2d41 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -184,6 +184,9 @@ class Query(BaseExpression):\n         self.order_by = ()\n         self.low_mark, self.high_mark = 0, None  # Used for offset/limit\n         self.distinct = False\n+        self.combinator = None\n+        self.combinator_all = False\n+        self.combined_queries = ()\n         self.distinct_fields = ()\n         self.select_for_update = False\n         self.select_for_update_nowait = False\n", "instance_id": "django__django-12908"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "django__django-17087"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 397146a354..82ea4b0514 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -528,6 +528,9 @@ class ForeignObject(RelatedField):\n             frozenset(ut)\n             for ut in self.remote_field.model._meta.unique_together\n         })\n+        if self.remote_field.limit_choices_to:\n+            form_field.queryset = form_field.queryset.filter(self.remote_field.limit_choices_to).distinct()\n+        return form_field\n         unique_foreign_fields.update({\n             frozenset(uc.fields)\n             for uc in self.remote_field.model._meta.total_unique_constraints\n@@ -986,7 +989,7 @@ class ForeignKey(ForeignObject):\n             raise ValueError(\"Cannot create form field for %r yet, because \"\n                              \"its related model %r has not been loaded yet\" %\n                              (self.name, self.remote_field.model))\n-        return super().formfield(**{\n+        form_field = super().formfield(**{\n             'form_class': forms.ModelChoiceField,\n             'queryset': self.remote_field.model._default_manager.using(using),\n             'to_field_name': self.remote_field.field_name,\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex 5d115458a1..f993bb9c98 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -100,7 +100,7 @@ def apply_limit_choices_to_to_formfield(formfield):\n     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):\n         limit_choices_to = formfield.get_limit_choices_to()\n         if limit_choices_to is not None:\n-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)\n+            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to).distinct()\n \n \n def fields_for_model(model, fields=None, exclude=None, widgets=None,\n", "instance_id": "django__django-13315"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 7bc96e68eb..553c7c4c31 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1038,11 +1038,14 @@ def __new__(cls, num, dps=None, prec=None, precision=None):\n             else:\n                 raise ValueError(\"unexpected decimal value %s\" % str(num))\n         elif isinstance(num, tuple) and len(num) in (3, 4):\n-            if type(num[1]) is str:\n+            if isinstance(num[1], str):\n                 # it's a hexadecimal (coming from a pickled object)\n                 # assume that it is in standard form\n                 num = list(num)\n-                num[1] = long(num[1], 16)\n+                if num[1].endswith('L'):\n+                    num[1] = int(num[1][:-1], 16)\n+                else:\n+                    num[1] = int(num[1], 16)\n                 _mpf_ = tuple(num)\n             else:\n                 if len(num) == 4:\n", "instance_id": "sympy__sympy-13471"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex 5eaef2fde..26cffe992 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -16,13 +16,14 @@ from scipy.sparse import lil_matrix\n \n import numpy as np\n \n+import pandas as pd\n from .validation import check_array, _assert_all_finite\n from ..utils._array_api import get_namespace\n \n \n def _unique_multiclass(y):\n     xp, is_array_api = get_namespace(y)\n-    if hasattr(y, \"__array__\") or is_array_api:\n+    if hasattr(y, \"__array__\") or is_array_api or isinstance(y, (pd.Series, pd.DataFrame)):\n         return xp.unique_values(xp.asarray(y))\n     else:\n         return set(y)\n@@ -73,12 +74,12 @@ def unique_labels(*ys):\n     >>> unique_labels([1, 2, 10], [5, 11])\n     array([ 1,  2,  5, 10, 11])\n     \"\"\"\n-    xp, is_array_api = get_namespace(*ys)\n+    xp, is_array_api = get_namespace(*[y.to_numpy() if isinstance(y, (pd.Series, pd.DataFrame)) else y for y in ys])\n     if not ys:\n         raise ValueError(\"No argument has been passed.\")\n     # Check that we don't mix label format\n \n-    ys_types = set(type_of_target(x) for x in ys)\n+    ys_types = set(type_of_target(x.to_numpy() if isinstance(x, (pd.Series, pd.DataFrame)) else x) for x in ys)\n     if ys_types == {\"binary\", \"multiclass\"}:\n         ys_types = {\"multiclass\"}\n \n@@ -111,7 +112,7 @@ def unique_labels(*ys):\n         unique_ys = xp.concat([_unique_labels(y) for y in ys])\n         return xp.unique_values(unique_ys)\n \n-    ys_labels = set(chain.from_iterable((i for i in _unique_labels(y)) for y in ys))\n+    ys_labels = set(chain.from_iterable((i for i in _unique_labels(y.to_numpy() if isinstance(y, (pd.Series, pd.DataFrame)) else y)) for y in ys))\n     # Check that we don't mix string type with number type\n     if len(set(isinstance(label, str) for label in ys_labels)) > 1:\n         raise ValueError(\"Mix of label input types (string and number)\")\n", "instance_id": "scikit-learn__scikit-learn-25638"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\nindex 8a1bd3625..776b8f5f6 100644\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -111,6 +111,11 @@ class IsolationForest(BaseBagging, OutlierMixin):\n            ``behaviour`` parameter will be deprecated in 0.22 and removed in\n            0.24.\n \n+    warm_start : bool, optional (default=False)\n+        When set to ``True``, reuse the solution of the previous call to fit\n+        and add more estimators to the ensemble, otherwise, just fit a whole\n+        new forest. See :term:`the Glossary <warm_start>`.\n+\n     random_state : int, RandomState instance or None, optional (default=None)\n         If int, random_state is the seed used by the random number generator;\n         If RandomState instance, random_state is the random number generator;\n@@ -172,6 +177,7 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                  bootstrap=False,\n                  n_jobs=None,\n                  behaviour='old',\n+                 warm_start=False,\n                  random_state=None,\n                  verbose=0):\n         super().__init__(\n@@ -179,6 +185,7 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                 max_features=1,\n                 splitter='random',\n                 random_state=random_state),\n+                warm_start=warm_start,\n             # here above max_features has no links with self.max_features\n             bootstrap=bootstrap,\n             bootstrap_features=False,\n", "instance_id": "scikit-learn__scikit-learn-13496"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004aa..135f3744b4 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -66,13 +66,13 @@ def _line_type(line, delimiter=None):\n     if delimiter is None:\n         sep = r\"\\s+\"\n     _new_re = rf\"NO({sep}NO)+\"\n-    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n-    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n+    _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*\"\n+    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re}))?\\s*(\\!(?P<comment>.*))?\\s*$\"\n     _line_type_re = re.compile(_type_re)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n-    match = _line_type_re.match(line)\n+    match = _line_type_re.match(line.upper())\n \n     if match is None:\n         raise ValueError(f\"Unrecognized QDP line: {line}\")\n", "instance_id": "astropy__astropy-14365"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 1ba093e51f..095ad0ccf0 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -344,7 +344,12 @@ class ManagementUtility:\n         # Preprocess options to extract --settings and --pythonpath.\n         # These options could affect the commands that are available, so they\n         # must be processed early.\n-        parser = CommandParser(usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\n+        parser = CommandParser(\n+            prog=self.prog_name,\n+            usage='%(prog)s subcommand [options] [args]',\n+            add_help=False,\n+            allow_abbrev=False\n+        )\n         parser.add_argument('--settings')\n         parser.add_argument('--pythonpath')\n         parser.add_argument('args', nargs='*')  # catch-all\n", "instance_id": "django__django-13658"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..c9bdfee89 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -291,7 +291,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             else:\n                 rep.outcome = \"passed\"\n                 rep.wasxfail = xfailed.reason\n-    elif (\n+    if (\n         item._store.get(skipped_by_mark_key, True)\n         and rep.skipped\n         and type(rep.longrepr) is tuple\n", "instance_id": "pytest-dev__pytest-7432"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/astropy/io/fits/fitsrec.py b/astropy/io/fits/fitsrec.py\nindex 574b4073b1..de5f93ebda 100644\n--- a/astropy/io/fits/fitsrec.py\n+++ b/astropy/io/fits/fitsrec.py\n@@ -1261,7 +1261,7 @@ class FITS_rec(np.recarray):\n \n         # Replace exponent separator in floating point numbers\n         if 'D' in format:\n-            output_field.replace(encode_ascii('E'), encode_ascii('D'))\n+            output_field[:] = np.char.replace(output_field, encode_ascii('E'), encode_ascii('D'))\n \n \n def _get_recarray_field(array, key):\n", "instance_id": "astropy__astropy-6938"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 7ca0d68fae..310515f7e6 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -280,6 +280,9 @@ class BaseReloader:\n             pass\n         logger.debug('Apps ready_event triggered. Sending autoreload_started signal.')\n         autoreload_started.send(sender=self)\n+        # Ensure manage.py is watched\n+        manage_py_path = Path(sys.argv[0]).resolve()\n+        self.watch_file(manage_py_path)\n         self.run_loop()\n \n     def run_loop(self):\n", "instance_id": "django__django-11422"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 57676428ff..0b9ea8cece 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -257,13 +257,15 @@ class BaseFormSet(RenderableFormMixin):\n \n     @property\n     def empty_form(self):\n+        form_kwargs = self.get_form_kwargs(None)\n+        form_kwargs.pop('empty_permitted', None)\n         form = self.form(\n             auto_id=self.auto_id,\n             prefix=self.add_prefix(\"__prefix__\"),\n             empty_permitted=True,\n             use_required_attribute=False,\n-            **self.get_form_kwargs(None),\n             renderer=self.renderer,\n+            **form_kwargs,\n         )\n         self.add_fields(form, None)\n         return form\n", "instance_id": "django__django-16041"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/decomposition/kernel_pca.py b/sklearn/decomposition/kernel_pca.py\nindex bb91d0cbb..a700c7a35 100644\n--- a/sklearn/decomposition/kernel_pca.py\n+++ b/sklearn/decomposition/kernel_pca.py\n@@ -277,6 +277,24 @@ class KernelPCA(BaseEstimator, TransformerMixin, _UnstableOn32BitMixin):\n \n         X_transformed = self.alphas_ * np.sqrt(self.lambdas_)\n \n+        if self.fit_inverse_transform:\n+            self._fit_inverse_transform(X_transformed, X)\n+\n+        # Standardize the signs of the principal components\n+        X_transformed = self.alphas_ * np.sqrt(self.lambdas_)\n+        for i in range(X_transformed.shape[1]):\n+            if X_transformed[0, i] < 0:\n+                X_transformed[:, i] = -X_transformed[:, i]\n+\n+        if self.fit_inverse_transform:\n+            self._fit_inverse_transform(X_transformed, X)\n+\n+        # Standardize the signs of the principal components\n+        X_transformed = self.alphas_ * np.sqrt(self.lambdas_)\n+        for i in range(X_transformed.shape[1]):\n+            if X_transformed[0, i] < 0:\n+                X_transformed[:, i] = -X_transformed[:, i]\n+\n         if self.fit_inverse_transform:\n             self._fit_inverse_transform(X_transformed, X)\n \n", "instance_id": "scikit-learn__scikit-learn-13241"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/messages/storage/base.py b/django/contrib/messages/storage/base.py\nindex 01422066a6..3f1b1eff73 100644\n--- a/django/contrib/messages/storage/base.py\n+++ b/django/contrib/messages/storage/base.py\n@@ -14,7 +14,7 @@ class Message:\n     def __init__(self, level, message, extra_tags=None):\n         self.level = int(level)\n         self.message = message\n-        self.extra_tags = extra_tags\n+        self.extra_tags = extra_tags if extra_tags is not None else \"\"\n \n     def _prepare(self):\n         \"\"\"\ndiff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py\nindex 1d390c71dd..e48d4edb08 100644\n--- a/django/contrib/messages/storage/cookie.py\n+++ b/django/contrib/messages/storage/cookie.py\n@@ -19,7 +19,7 @@ class MessageEncoder(json.JSONEncoder):\n             # Using 0/1 here instead of False/True to produce more compact json\n             is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n             message = [self.message_key, is_safedata, obj.level, obj.message]\n-            if obj.extra_tags:\n+            if obj.extra_tags is not None:\n                 message.append(obj.extra_tags)\n             return message\n         return super().default(obj)\n", "instance_id": "django__django-15347"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 0f3b25d4e4..452cd4ca47 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -633,7 +633,7 @@ class ScalarMappable:\n         the norm of the mappable will reset the norm, locator, and formatters\n         on the colorbar to default.\n         \"\"\"\n-        self.norm = norm\n+        self.set_norm(norm)\n \n     def autoscale(self):\n         \"\"\"\ndiff --git a/lib/matplotlib/collections.py b/lib/matplotlib/collections.py\nindex bf88dd2b68..55107df16b 100644\n--- a/lib/matplotlib/collections.py\n+++ b/lib/matplotlib/collections.py\n@@ -920,7 +920,7 @@ class Collection(artist.Artist, cm.ScalarMappable):\n \n         # update_from for scalarmappable\n         self._A = other._A\n-        self.norm = other.norm\n+        self.set_norm(other.norm)\n         self.cmap = other.cmap\n         self.stale = True\n \n", "instance_id": "matplotlib__matplotlib-25079"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex fdac0f3560..7a3dd546b8 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2180,13 +2180,13 @@ class Axes(_AxesBase):\n             # wrap numpy arrays.\n             try:\n                 x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n-                pass\n+            except (TypeError, IndexError, KeyError, StopIteration):\n+                x0 = np.nan\n \n             try:\n                 x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n-                x = xconv\n+            except (TypeError, IndexError, KeyError, StopIteration):\n+                x = np.nan\n \n             delist = False\n             if not np.iterable(dx):\n", "instance_id": "matplotlib__matplotlib-24149"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\nindex d4e3cfcc90..57da55d208 100644\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -518,10 +518,14 @@ def vel(self, frame):\n         \"\"\"\n \n         _check_frame(frame)\n-        if not (frame in self._vel_dict):\n-            raise ValueError('Velocity of point ' + self.name + ' has not been'\n-                             ' defined in ReferenceFrame ' + frame.name)\n-        return self._vel_dict[frame]\n+        if frame not in self._vel_dict:\n+            if frame in self._pos_dict:\n+                return self._pos_dict[frame].dt(frame)\n+            else:\n+                raise ValueError('Velocity of point ' + self.name + ' has not been'\n+                                 ' defined in ReferenceFrame ' + frame.name)\n+        else:\n+            return self._vel_dict[frame]\n \n     def partial_velocity(self, frame, *gen_speeds):\n         \"\"\"Returns the partial velocities of the linear velocity vector of this\n", "instance_id": "sympy__sympy-20049"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py\nindex 93e2d71af2..45aeaa24fc 100644\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -94,7 +94,8 @@ class PasswordResetTokenGenerator:\n         # Truncate microseconds so that tokens are consistent even if the\n         # database doesn't support microseconds.\n         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)\n-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)\n+        email_field = '' if user.email is None else user.email\n+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + email_field\n \n     def _num_seconds(self, dt):\n         return int((dt - datetime(2001, 1, 1)).total_seconds())\n", "instance_id": "django__django-13551"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 0dc55568..80a84625 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -20,7 +20,10 @@ from .packages.urllib3.fields import RequestField\n from .packages.urllib3.filepost import encode_multipart_formdata\n from .packages.urllib3.util import parse_url\n from .packages.urllib3.exceptions import DecodeError\n+from socket import error as SocketError\n+from socket import error as SocketError\n from .exceptions import (\n+    ConnectionError,\n     HTTPError, RequestException, MissingSchema, InvalidURL,\n     ChunkedEncodingError, ContentDecodingError)\n from .utils import (\n@@ -162,7 +165,7 @@ class RequestHooksMixin(object):\n         if event not in self.hooks:\n             raise ValueError('Unsupported event specified, with event name \"%s\"' % (event))\n \n-        if isinstance(hook, collections.Callable):\n+        if isinstance(hook, collections.abc.Callable):\n             self.hooks[event].append(hook)\n         elif hasattr(hook, '__iter__'):\n             self.hooks[event].extend(h for h in hook if isinstance(h, collections.Callable))\n@@ -642,6 +645,15 @@ class Response(object):\n                     raise ContentDecodingError(e)\n             except AttributeError:\n                 # Standard file-like object.\n+                while True:\n+                    try:\n+                        chunk = self.raw.read(chunk_size)\n+                        if not chunk:\n+                            break\n+                        yield chunk\n+                    except SocketError as e:\n+                        raise ConnectionError(f\"Socket error occurred: {e}\")\n+                # Standard file-like object.\n                 while True:\n                     chunk = self.raw.read(chunk_size)\n                     if not chunk:\n@@ -752,7 +764,7 @@ class Response(object):\n     def json(self, **kwargs):\n         \"\"\"Returns the json-encoded content of a response, if any.\n \n-        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n+        :param **kwargs: Optional arguments that ``json.loads`` takes.\n         \"\"\"\n \n         if not self.encoding and len(self.content) > 3:\ndiff --git a/requests/packages/urllib3/_collections.py b/requests/packages/urllib3/_collections.py\nindex d77ebb8d..b82d9c59 100644\n--- a/requests/packages/urllib3/_collections.py\n+++ b/requests/packages/urllib3/_collections.py\n@@ -1,4 +1,4 @@\n-from collections import Mapping, MutableMapping\n+from collections.abc import Mapping, MutableMapping\n try:\n     from threading import RLock\n except ImportError: # Platform-specific: No threads available\ndiff --git a/requests/packages/urllib3/response.py b/requests/packages/urllib3/response.py\nindex 7e0d47fa..5537346d 100644\n--- a/requests/packages/urllib3/response.py\n+++ b/requests/packages/urllib3/response.py\n@@ -1,6 +1,6 @@\n import zlib\n import io\n-from socket import timeout as SocketTimeout\n+from socket import timeout as SocketTimeout, error as SocketError\n \n from ._collections import HTTPHeaderDict\n from .exceptions import ProtocolError, DecodeError, ReadTimeoutError\n@@ -210,6 +210,9 @@ class HTTPResponse(io.IOBase):\n                 # This includes IncompleteRead.\n                 raise ProtocolError('Connection broken: %r' % e, e)\n \n+            except SocketError as e:\n+                raise ConnectionError(f\"Socket error occurred: {e}\")\n+\n             self._fp_bytes_read += len(data)\n \n             try:\n@@ -250,7 +253,10 @@ class HTTPResponse(io.IOBase):\n             'content-encoding' header.\n         \"\"\"\n         while not is_fp_closed(self._fp):\n-            data = self.read(amt=amt, decode_content=decode_content)\n+            try:\n+                data = self.read(amt=amt, decode_content=decode_content)\n+            except SocketError as e:\n+                raise ConnectionError(f\"Socket error occurred: {e}\")\n \n             if data:\n                 yield data\n", "instance_id": "psf__requests-2148"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 61f88401ab..04ba57a67e 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -407,6 +407,9 @@ class BaseDatabaseSchemaEditor:\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n             **constraint_kwargs\n         )\n+        if len(constraint_names) > 1:\n+            # If there are multiple constraints, prefer the index constraint.\n+            constraint_names = [name for name in constraint_names if name not in meta_constraint_names]\n         if len(constraint_names) != 1:\n             raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n                 len(constraint_names),\n", "instance_id": "django__django-12708"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/src/_pytest/config/__init__.py b/src/_pytest/config/__init__.py\nindex bb5034ab1..5f0011588 100644\n--- a/src/_pytest/config/__init__.py\n+++ b/src/_pytest/config/__init__.py\n@@ -755,6 +755,12 @@ def _iter_rewritable_modules(package_files):\n \n \n class Config:\n+    def __init__(self, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.original_working_dir = os.getcwd()\n+    def __init__(self, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.original_working_dir = os.getcwd()\n     \"\"\"\n     Access to configuration values, pluginmanager and plugin hooks.\n \ndiff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 4a79bc861..4cd828b43 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -602,6 +602,6 @@ class Item(Node):\n             fspath = location[0]\n         else:\n             fspath = py.path.local(location[0])\n-        relfspath = self.session._node_location_to_relpath(fspath)\n+        relfspath = fspath.relto(py.path.local(self.config.original_working_dir))\n         assert type(location[2]) is str\n         return (relfspath, location[1], location[2])\ndiff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\nindex 8ecb5a16b..fd57c5f8a 100644\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -271,7 +271,7 @@ class TerminalReporter:\n         self.stats = {}  # type: Dict[str, List[Any]]\n         self._main_color = None  # type: Optional[str]\n         self._known_types = None  # type: Optional[List]\n-        self.startdir = config.invocation_dir\n+        self.startdir = py.path.local(config.original_working_dir)\n         if file is None:\n             file = sys.stdout\n         self._tw = _pytest.config.create_terminal_writer(config, file)\n", "instance_id": "pytest-dev__pytest-7220"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 2d3072da04..aecc73feca 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -727,6 +727,10 @@ class Colormap:\n                 xa = xa.astype(int)\n         # Set the over-range indices before the under-range;\n         # otherwise the under-range values get converted to over-range.\n+        xa = np.clip(xa, 0, self.N - 1)\n+        xa = np.clip(xa, -1, self.N)\n+        xa = np.clip(xa, -1, self.N)\n+        xa = np.clip(xa, -1, self.N)\n         xa[xa > self.N - 1] = self._i_over\n         xa[xa < 0] = self._i_under\n         xa[mask_bad] = self._i_bad\n@@ -1101,9 +1105,8 @@ class LinearSegmentedColormap(Colormap):\n                   for key, data in self._segmentdata.items()}\n \n         new_cmap = LinearSegmentedColormap(name, data_r, self.N, self._gamma)\n-        # Reverse the over/under values too\n-        new_cmap._rgba_over = self._rgba_under\n-        new_cmap._rgba_under = self._rgba_over\n+        new_cmap._rgba_over = self._rgba_over\n+        new_cmap._rgba_under = self._rgba_under\n         new_cmap._rgba_bad = self._rgba_bad\n         return new_cmap\n \n@@ -1196,9 +1199,8 @@ class ListedColormap(Colormap):\n \n         colors_r = list(reversed(self.colors))\n         new_cmap = ListedColormap(colors_r, name=name, N=self.N)\n-        # Reverse the over/under values too\n-        new_cmap._rgba_over = self._rgba_under\n-        new_cmap._rgba_under = self._rgba_over\n+        new_cmap._rgba_over = self._rgba_over\n+        new_cmap._rgba_under = self._rgba_under\n         new_cmap._rgba_bad = self._rgba_bad\n         return new_cmap\n \n", "instance_id": "matplotlib__matplotlib-24970"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex 20d8922799..8e828a16a0 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -48,6 +48,12 @@ class ReadOnlyPasswordHashWidget(forms.Widget):\n                 for key, value_ in hasher.safe_summary(value).items():\n                     summary.append({'label': gettext(key), 'value': value_})\n         context['summary'] = summary\n+        # Remove 'id' from attrs to prevent the label from having a 'for' attribute\n+        if 'id' in context['widget']['attrs']:\n+            del context['widget']['attrs']['id']\n+        # Remove 'id' from the context to prevent it from being added to the div\n+        if 'id' in context:\n+            del context['id']\n         return context\n \n \n", "instance_id": "django__django-14411"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..a6da57299 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -78,7 +78,7 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n \n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \n@@ -93,7 +93,7 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n         self.estimators_ = Parallel(n_jobs=self.n_jobs)(\n                 delayed(_parallel_fit_estimator)(clone(clf), X, y,\n                                                  sample_weight=sample_weight)\n-                for clf in clfs if clf is not None)\n+            for clf in clfs if clf is not None)\n \n         self.named_estimators_ = Bunch()\n         for k, e in zip(self.estimators, self.estimators_):\n", "instance_id": "scikit-learn__scikit-learn-13779"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2903b8995..e9259f415 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -968,6 +968,9 @@ warn_explicit(\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n+        if isinstance(call.func, ast.Name) and call.func.id in {\"all\", \"any\"}:\n+            return self._handle_all_any(call)\n+\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n@@ -991,6 +994,54 @@ warn_explicit(\n         outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n         return res, outer_expl\n \n+    def _handle_all_any(self, call):\n+        \"\"\"Handle `all` and `any` calls to unroll the iterable for better reports.\"\"\"\n+        func_name = call.func.id\n+        arg = call.args[0]\n+\n+        # Create a variable to store the result of the iterable\n+        iter_var = self.variable()\n+        self.statements.append(ast.Assign([ast.Name(iter_var, ast.Store())], arg))\n+\n+        # Create a loop to iterate over the elements\n+        loop_var = self.variable()\n+        loop = ast.For(\n+            target=ast.Name(loop_var, ast.Store()),\n+            iter=ast.Name(iter_var, ast.Load()),\n+            body=[],\n+            orelse=[],\n+        )\n+\n+        # Create the condition for the loop\n+        if func_name == \"all\":\n+            condition = ast.UnaryOp(ast.Not(), ast.Name(loop_var, ast.Load()))\n+        else:  # func_name == \"any\"\n+            condition = ast.Name(loop_var, ast.Load())\n+\n+        # Create the failure message\n+        fail_msg = ast.Str(f\"{func_name}({arg}) failed for element: \")\n+        fail_msg_var = self.explanation_param(fail_msg)\n+        fail_msg_expr = ast.BinOp(fail_msg_var, ast.Add(), self.display(ast.Name(loop_var, ast.Load())))\n+\n+        # Create the raise statement\n+        fmt = self.helper(\"_format_explanation\", fail_msg_expr)\n+        err_name = ast.Name(\"AssertionError\", ast.Load())\n+        exc = ast_Call(err_name, [fmt], [])\n+        if sys.version_info[0] >= 3:\n+            raise_ = ast.Raise(exc, None)\n+        else:\n+            raise_ = ast.Raise(exc, None, None)\n+\n+        # Add the raise statement to the loop body\n+        loop.body.append(ast.If(condition, [raise_], []))\n+\n+        # Add the loop to the statements\n+        self.statements.append(loop)\n+\n+        # Return the result of the original call\n+        res = self.assign(ast_Call(ast.Name(func_name, ast.Load()), [ast.Name(iter_var, ast.Load())], []))\n+        return res, self.explanation_param(self.display(res))\n+\n     def visit_Starred(self, starred):\n         # From Python 3.5, a Starred node can appear in a function call\n         res, expl = self.visit(starred.value)\n", "instance_id": "pytest-dev__pytest-5103"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 70e6953559..f782b08faf 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -180,6 +180,7 @@ def numbered_string_incr(s, start=0):\n _uniquely_named_symbol = uniquely_named_symbol\n \n class Symbol(AtomicExpr, Boolean):\n+    __slots__ = ('name', '_assumptions')\n     \"\"\"\n     Assumptions:\n        commutative = True\n@@ -349,6 +350,7 @@ def as_set(self):\n \n \n class Dummy(Symbol):\n+    __slots__ = ('dummy_index',)\n     \"\"\"Dummy symbols are each unique, even if they have the same name:\n \n     Examples\n@@ -417,6 +419,7 @@ def _hashable_content(self):\n \n \n class Wild(Symbol):\n+    __slots__ = ('exclude', 'properties')\n     \"\"\"\n     A Wild symbol matches anything, or anything\n     without whatever is explicitly excluded.\n", "instance_id": "sympy__sympy-20590"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 92fe4affb9..11c9baa58e 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -277,6 +277,8 @@ class Collector:\n             if self.can_fast_delete(instance):\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n+                for obj in instances:\n+                    setattr(obj, model._meta.pk.attname, None)\n                 return count, {model._meta.label: count}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n", "instance_id": "django__django-11179"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..d4bdd0dab2 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -112,6 +112,8 @@ class Lookup:\n         return cols\n \n     def as_sql(self, compiler, connection):\n+        if not isinstance(self.rhs, bool):\n+            raise ValueError('The value for __isnull must be a boolean.')\n         raise NotImplementedError\n \n     def as_oracle(self, compiler, connection):\n", "instance_id": "django__django-11905"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 27b5cbd379..2d92109d36 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -120,9 +120,10 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        v_string, v_imports = serializer_factory(self.value.value).serialize()\n-        imports = {'import %s' % module, *v_imports}\n-        return \"%s.%s(%s)\" % (module, enum_class.__name__, v_string), imports\n+        imports = {'import %s' % module}\n+        if isinstance(self.value.value, bytes):\n+            return \"%s.%s(%r)\" % (module, enum_class.__name__, self.value.value), imports\n+        return \"%s.%s(%s)\" % (module, enum_class.__name__, repr(self.value.value)), imports\n \n \n class FloatSerializer(BaseSimpleSerializer):\n@@ -222,11 +223,10 @@ class RegexSerializer(BaseSerializer):\n         # Turn off default implicit flags (e.g. re.U) because regexes with the\n         # same implicit and explicit flags aren't equal.\n         flags = self.value.flags ^ re.compile('').flags\n-        regex_flags, flag_imports = serializer_factory(flags).serialize()\n-        imports = {'import re', *pattern_imports, *flag_imports}\n+        imports = {'import re', *pattern_imports}\n         args = [regex_pattern]\n         if flags:\n-            args.append(regex_flags)\n+            args.append(\"re.RegexFlag(%d)\" % flags)\n         return \"re.compile(%s)\" % ', '.join(args), imports\n \n \n", "instance_id": "django__django-11815"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex dc413b5c2..201081fbb 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -730,6 +730,13 @@ class Documenter:\n \n             has_doc = bool(doc)\n \n+            # Check if the member is an annotation-only member in the superclass\n+            if not has_doc and self.options.inherited_members:\n+                for base in self.object.__bases__:\n+                    if hasattr(base, '__annotations__') and membername in base.__annotations__:\n+                        has_doc = True\n+                        break\n+\n             metadata = extract_metadata(doc)\n             if 'private' in metadata:\n                 # consider a member private if docstring has \"private\" metadata\n", "instance_id": "sphinx-doc__sphinx-8801"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/astropy/io/ascii/core.py b/astropy/io/ascii/core.py\nindex 381b5b13db..e1ca81b7a8 100644\n--- a/astropy/io/ascii/core.py\n+++ b/astropy/io/ascii/core.py\n@@ -1532,7 +1532,7 @@ class BaseReader(metaclass=MetaBaseReader):\n         self.header.write_comments(lines, meta)\n         self.header.write(lines)\n \n-    def write(self, table):\n+    def write(self, table, header_rows=None):\n         \"\"\"\n         Write ``table`` as list of strings.\n \n@@ -1540,6 +1540,8 @@ class BaseReader(metaclass=MetaBaseReader):\n         ----------\n         table : `~astropy.table.Table`\n             Input table data.\n+        header_rows : list of str, optional\n+            List of header row attributes to include in the output.\n \n         Returns\n         -------\n@@ -1813,6 +1815,7 @@ def _get_writer(Writer, fast_writer, **kwargs):\n \n     writer_kwargs = {k: v for k, v in kwargs.items() if k not in extra_writer_pars}\n     writer = Writer(**writer_kwargs)\n+    writer.header_rows = kwargs.get('header_rows')\n \n     if \"delimiter\" in kwargs:\n         writer.header.splitter.delimiter = kwargs[\"delimiter\"]\ndiff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..897bc7a441 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,17 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n-\n-    def write(self, lines):\n+        self.header_rows = header_rows\n+\n+    def write(self, lines, header_rows=None):\n+        if header_rows:\n+            header_lines = []\n+            for row in header_rows:\n+                header_line = self.splitter.join([getattr(col.info, row, '') for col in self.cols])\n+                header_lines.append(header_line)\n+            lines = header_lines + list(lines)\n         lines = super().write(lines)\n         lines = [lines[1]] + lines + [lines[1]]\n         return lines\ndiff --git a/astropy/io/ascii/ui.py b/astropy/io/ascii/ui.py\nindex 993dacf512..aa90f71f95 100644\n--- a/astropy/io/ascii/ui.py\n+++ b/astropy/io/ascii/ui.py\n@@ -926,7 +926,7 @@ def write(\n     fast_writer=True,\n     *,\n     overwrite=False,\n-    **kwargs,\n+    header_rows=None, **kwargs,\n ):\n     # Docstring inserted below\n \n@@ -972,9 +972,9 @@ def write(\n         fast_writer = False\n \n     Writer = _get_format_class(format, Writer, \"Writer\")\n-    writer = get_writer(Writer=Writer, fast_writer=fast_writer, **kwargs)\n+    writer = get_writer(Writer=Writer, fast_writer=fast_writer, header_rows=header_rows, **kwargs)\n     if writer._format_name in core.FAST_CLASSES:\n-        writer.write(table, output)\n+        writer.write(table, output, header_rows=header_rows)\n         return\n \n     lines = writer.write(table)\n", "instance_id": "astropy__astropy-14182"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex c99b0771e2..8d51a956ec 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -304,7 +304,8 @@ class Axes(_AxesBase):\n                 **kwargs)\n         if len(extra_args):\n             raise TypeError('legend only accepts two non-keyword arguments')\n-        self.legend_ = mlegend.Legend(self, handles, labels, **kwargs)\n+        draggable = kwargs.pop('draggable', False)\n+        self.legend_ = mlegend.Legend(self, handles, labels, draggable=draggable, **kwargs)\n         self.legend_._remove_method = self._remove_legend\n         return self.legend_\n \ndiff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..cf69b70985 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -342,7 +342,8 @@ class Legend(Artist):\n         title_fontproperties=None,  # properties for the legend title\n         alignment=\"center\",       # control the alignment within the legend box\n         *,\n-        ncol=1  # synonym for ncols (backward compatibility)\n+        ncol=1,  # synonym for ncols (backward compatibility)\n+        draggable=False  # make legend draggable\n     ):\n         \"\"\"\n         Parameters\n@@ -538,6 +539,8 @@ class Legend(Artist):\n \n         self.set_title(title, prop=title_prop_fp)\n         self._draggable = None\n+        if draggable:\n+            self.set_draggable(True)\n \n         # set the text color\n \n", "instance_id": "matplotlib__matplotlib-23913"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 95302a05ca..b227ba3f13 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -162,9 +162,12 @@ def structurally_equal(self, other):\n             and self.colblocksizes == other.colblocksizes)\n \n     def _blockmul(self, other):\n+        from sympy.matrices.expressions.matexpr import ZeroMatrix\n         if (isinstance(other, BlockMatrix) and\n                 self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n+            result = self.blocks * other.blocks\n+            result = result.applyfunc(lambda x: ZeroMatrix(x.rows, x.cols) if x == 0 else x)\n+            return BlockMatrix(result)\n \n         return self * other\n \n", "instance_id": "sympy__sympy-17630"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 978fd5df8..152033958 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1263,10 +1263,11 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n-                overload = evaluate_signature(overload, __globals__,\n-                                              self.env.config.autodoc_type_aliases)\n-\n-                sig = stringify_signature(overload, **kwargs)\n+                overload = evaluate_signature(overload, __globals__, self.env.config.autodoc_type_aliases)\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    sig = stringify_signature(overload, show_annotation=False, **kwargs)\n+                else:\n+                    sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n         return \"\\n\".join(sigs)\n@@ -1907,14 +1908,14 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n-                overload = evaluate_signature(overload, __globals__,\n-                                              self.env.config.autodoc_type_aliases)\n-\n-                if not inspect.isstaticmethod(self.object, cls=self.parent,\n-                                              name=self.object_name):\n+                overload = evaluate_signature(overload, __globals__, self.env.config.autodoc_type_aliases)\n+                if not inspect.isstaticmethod(self.object, cls=self.parent, name=self.object_name):\n                     parameters = list(overload.parameters.values())\n                     overload = overload.replace(parameters=parameters[1:])\n-                sig = stringify_signature(overload, **kwargs)\n+                if self.env.config.autodoc_typehints in ('none', 'description'):\n+                    sig = stringify_signature(overload, show_annotation=False, **kwargs)\n+                else:\n+                    sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n         return \"\\n\".join(sigs)\n", "instance_id": "sphinx-doc__sphinx-8282"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/functions/elementary/complexes.py b/sympy/functions/elementary/complexes.py\nindex 7fda45982b..bd743a2b91 100644\n--- a/sympy/functions/elementary/complexes.py\n+++ b/sympy/functions/elementary/complexes.py\n@@ -57,7 +57,7 @@ def eval(cls, arg):\n         elif arg.is_extended_real:\n             return arg\n         elif arg.is_imaginary or (S.ImaginaryUnit*arg).is_extended_real:\n-            return S.Zero\n+            return S.NaN\n         elif arg.is_Matrix:\n             return arg.as_real_imag()[0]\n         elif arg.is_Function and isinstance(arg, conjugate):\n@@ -320,7 +320,7 @@ def eval(cls, arg):\n         if arg is S.NaN:\n             return S.NaN\n         if arg.is_zero:  # it may be an Expr that is zero\n-            return S.Zero\n+            return S.NaN\n         if arg.is_extended_positive:\n             return S.One\n         if arg.is_extended_negative:\n@@ -385,7 +385,10 @@ def _sage_(self):\n         import sage.all as sage\n         return sage.sgn(self.args[0]._sage_())\n \n-    def _eval_rewrite_as_Piecewise(self, arg, **kwargs):\n+    def _eval_rewrite_as_Abs(self, arg, **kwargs):\n+        if arg.is_zero:\n+            return S.NaN\n+        return arg / Abs(arg)\n         if arg.is_extended_real:\n             return Piecewise((1, arg > 0), (-1, arg < 0), (0, True))\n \n@@ -527,7 +530,7 @@ def eval(cls, arg):\n             if any(a.is_infinite for a in arg.as_real_imag()):\n                 return S.Infinity\n         if arg.is_zero:\n-            return S.Zero\n+            return S.NaN\n         if arg.is_extended_nonnegative:\n             return arg\n         if arg.is_extended_nonpositive:\n@@ -622,7 +625,10 @@ def _eval_rewrite_as_Heaviside(self, arg, **kwargs):\n         if arg.is_extended_real:\n             return arg*(Heaviside(arg) - Heaviside(-arg))\n \n-    def _eval_rewrite_as_Piecewise(self, arg, **kwargs):\n+    def _eval_rewrite_as_Abs(self, arg, **kwargs):\n+        if arg.is_zero:\n+            return S.NaN\n+        return arg / Abs(arg)\n         if arg.is_extended_real:\n             return Piecewise((arg, arg >= 0), (-arg, True))\n         elif arg.is_imaginary:\n", "instance_id": "sympy__sympy-19487"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sphinx/environment/__init__.py b/sphinx/environment/__init__.py\nindex d2beffdd9..f6b2ca879 100644\n--- a/sphinx/environment/__init__.py\n+++ b/sphinx/environment/__init__.py\n@@ -326,6 +326,7 @@ class BuildEnvironment:\n     def _update_settings(self, config: Config) -> None:\n         \"\"\"Update settings by new config.\"\"\"\n         self.settings['input_encoding'] = config.source_encoding\n+        self.settings['rst_prolog'] = config.rst_prolog\n         self.settings['trim_footnote_reference_space'] = config.trim_footnote_reference_space\n         self.settings['language_code'] = config.language\n \ndiff --git a/sphinx/io.py b/sphinx/io.py\nindex efd2b4ea9..85d5c85b1 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -100,17 +100,23 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         if not self.parser:\n             self.parser = parser\n         self.settings = settings\n-        self.input = self.read_source(settings.env)\n+        self.input = self.apply_rst_prolog(self.read_source(settings.env), settings)\n         self.parse()\n         return self.document\n \n-    def read_source(self, env: BuildEnvironment) -> str:\n+    def apply_rst_prolog(self, content: str, settings: Values) -> str:\n+        \"\"\"Apply rst_prolog to the content if it is set in the settings.\"\"\"\n+        if hasattr(settings, 'rst_prolog') and settings.rst_prolog:\n+            return settings.rst_prolog + '\\n' + content\n+        return content\n         \"\"\"Read content from source and do post-process.\"\"\"\n         content = self.source.read()\n \n         # emit \"source-read\" event\n         arg = [content]\n-        env.events.emit('source-read', env.docname, arg)\n+        # emit \"source-read\" event\n+        arg = [content]\n+        self._env.events.emit('source-read', self._env.docname, arg)\n         return arg[0]\n \n \ndiff --git a/sphinx/transforms/__init__.py b/sphinx/transforms/__init__.py\nindex f36473084..b96709cc9 100644\n--- a/sphinx/transforms/__init__.py\n+++ b/sphinx/transforms/__init__.py\n@@ -60,34 +60,20 @@ class SphinxTransform(Transform):\n         return self.env.config\n \n \n-class SphinxTransformer(Transformer):\n+class HandleRstProlog(SphinxTransform):\n     \"\"\"\n-    A transformer for Sphinx.\n+    Handle rst_prolog by ensuring it does not interfere with domain directives.\n     \"\"\"\n+    default_priority = 200\n \n-    document: nodes.document\n-    env: BuildEnvironment | None = None\n-\n-    def set_environment(self, env: BuildEnvironment) -> None:\n-        self.env = env\n-\n-    def apply_transforms(self) -> None:\n-        if isinstance(self.document, nodes.document):\n-            if not hasattr(self.document.settings, 'env') and self.env:\n-                self.document.settings.env = self.env\n-\n-            super().apply_transforms()\n-        else:\n-            # wrap the target node by document node during transforming\n-            try:\n-                document = new_document('')\n-                if self.env:\n-                    document.settings.env = self.env\n-                document += self.document\n-                self.document = document\n-                super().apply_transforms()\n-            finally:\n-                self.document = self.document[0]\n+    def apply(self, **kwargs: Any) -> None:\n+        if hasattr(self.config, 'rst_prolog') and self.config.rst_prolog:\n+            for node in self.document.findall(nodes.section):\n+                if node.children and isinstance(node.children[0], nodes.title):\n+                    title = node.children[0]\n+                    if title.rawsource.startswith(self.config.rst_prolog):\n+                        title.rawsource = title.rawsource[len(self.config.rst_prolog):].lstrip()\n+                        title.children[0] = nodes.Text(title.rawsource)\n \n \n class DefaultSubstitutions(SphinxTransform):\n@@ -396,6 +382,7 @@ class GlossarySorter(SphinxTransform):\n \n def setup(app: Sphinx) -> dict[str, Any]:\n     app.add_transform(ApplySourceWorkaround)\n+    app.add_transform(HandleRstProlog)\n     app.add_transform(ExtraTranslatableNodes)\n     app.add_transform(DefaultSubstitutions)\n     app.add_transform(MoveModuleTargets)\n", "instance_id": "sphinx-doc__sphinx-11445"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 66461181d0..1ac8c0149f 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -313,6 +313,25 @@ def _print_conjugate(self, e):\n \n     def _print_Abs(self, e):\n         pform = self._print(e.args[0])\n+        return prettyForm(*pform.parens('|', '|'))\n+\n+    _print_Determinant = _print_Abs\n+\n+    def _print_Vector(self, e):\n+        from sympy.vector.vector import BaseVector\n+        from sympy.vector.vector import VectorZero\n+        if isinstance(e, VectorZero):\n+            return prettyForm('0')\n+        else:\n+            components = e.components\n+            result = []\n+            for base_vector, measure in components.items():\n+                if isinstance(base_vector, BaseVector):\n+                    result.append(f\"{measure}*{base_vector._pretty_form}\")\n+                else:\n+                    result.append(f\"{measure}*{base_vector}\")\n+            return prettyForm(\" + \".join(result))\n+        pform = self._print(e.args[0])\n         pform = prettyForm(*pform.parens('|', '|'))\n         return pform\n     _print_Determinant = _print_Abs\ndiff --git a/sympy/vector/vector.py b/sympy/vector/vector.py\nindex 87320d0366..eb31507cfb 100644\n--- a/sympy/vector/vector.py\n+++ b/sympy/vector/vector.py\n@@ -571,7 +571,10 @@ def cross(vect1, vect2):\n         v2, m2 = next(iter(vect2.components.items()))\n         return m2*cross(vect1, v2)\n \n-    return Cross(vect1, vect2)\n+    result = Cross(vect1, vect2)\n+    if isinstance(result, Cross):\n+        return result.doit()\n+    return result\n \n \n def dot(vect1, vect2):\n@@ -613,7 +616,10 @@ def dot(vect1, vect2):\n         v2, m2 = next(iter(vect2.components.items()))\n         return m2*dot(vect1, v2)\n \n-    return Dot(vect1, vect2)\n+    result = Dot(vect1, vect2)\n+    if isinstance(result, Dot):\n+        return result.doit()\n+    return result\n \n \n Vector._expr_type = Vector\n", "instance_id": "sympy__sympy-23191"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py\nindex b9809fd4e9..a3b86ce104 100644\n--- a/sympy/solvers/polysys.py\n+++ b/sympy/solvers/polysys.py\n@@ -51,7 +51,7 @@ def solve_poly_system(seq, *gens, **args):\n     except PolificationFailed as exc:\n         raise ComputationFailed('solve_poly_system', len(seq), exc)\n \n-    if len(polys) == len(opt.gens) == 2:\n+    if len(polys) == len(opt.gens) == 2 and all(p.total_degree() <= 2 for p in polys):\n         f, g = polys\n \n         if all(i <= 2 for i in f.degree_list() + g.degree_list()):\n@@ -240,7 +240,7 @@ def _solve_reduced_system(system, gens, entry=False):\n \n         univariate = list(filter(_is_univariate, basis))\n \n-        if len(univariate) == 1:\n+        if len(univariate) == 1 and len(gens) == 1:\n             f = univariate.pop()\n         else:\n             raise NotImplementedError(filldedent('''\n", "instance_id": "sympy__sympy-22005"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex a436880c4b..5705c821c2 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,7 +175,7 @@ def _collect_factor_and_dimension(self, expr):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n                         'but it should be {}'.format(\n", "instance_id": "sympy__sympy-24213"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..c54af29f39 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1053,7 +1053,7 @@ class Query(BaseExpression):\n             clone.external_aliases[alias] = (\n                 (isinstance(table, Join) and table.join_field.related_model._meta.db_table != alias) or\n                 (isinstance(table, BaseTable) and table.table_name != table.table_alias)\n-            )\n+            ]\n         return clone\n \n     def get_external_cols(self):\n@@ -1077,10 +1077,11 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n+            resolved_values = [\n                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                 for sub_value in value\n             )\n+            return type(value)(*resolved_values)\n         return value\n \n     def solve_lookup_type(self, lookup):\n", "instance_id": "django__django-13590"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/core/management/templates.py b/django/core/management/templates.py\nindex 8dc6068286..f248ab1b71 100644\n--- a/django/core/management/templates.py\n+++ b/django/core/management/templates.py\n@@ -74,7 +74,7 @@ class TemplateCommand(BaseCommand):\n                 raise CommandError(e)\n         else:\n             if app_or_project == 'app':\n-                self.validate_name(os.path.basename(target), 'directory')\n+                self.validate_name(os.path.basename(target.rstrip(os.sep)), 'directory')\n             top_dir = os.path.abspath(os.path.expanduser(target))\n             if not os.path.exists(top_dir):\n                 raise CommandError(\"Destination directory '%s' does not \"\n", "instance_id": "django__django-14382"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 4375bf326..f0eabc986 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -639,6 +639,10 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n         raise nodes.SkipNode\n \n     def visit_index(self, node: Element) -> None:\n+        # Group all symbol entries under a single \"Symbols\" section\n+        for entry in node['entries']:\n+            if entry[0] in {'symbol', 'symbols'}:\n+                entry[0] = 'Symbols'\n         raise nodes.SkipNode\n \n     def visit_tabular_col_spec(self, node: Element) -> None:\n", "instance_id": "sphinx-doc__sphinx-7975"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..320b94735 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -607,6 +607,26 @@ class Ridge(_BaseRidge, RegressorMixin):\n         .. versionadded:: 0.17\n            *random_state* to support Stochastic Average Gradient.\n \n+    store_cv_values : boolean, default=False\n+        Flag indicating if the cross-validation values corresponding to\n+        each alpha should be stored in the `cv_values_` attribute (see\n+        below). This flag is only compatible with `cv=None` (i.e. using\n+        Generalized Cross-Validation).\n+\n+    store_cv_values : boolean, default=False\n+        Flag indicating if the cross-validation values corresponding to\n+        each alpha should be stored in the `cv_values_` attribute (see\n+        below). This flag is only compatible with `cv=None` (i.e. using\n+        Generalized Cross-Validation).\n+\n+    Parameters\n+    ----------\n+    store_cv_values : boolean, default=False\n+        Flag indicating if the cross-validation values corresponding to\n+        each alpha should be stored in the `cv_values_` attribute (see\n+        below). This flag is only compatible with `cv=None` (i.e. using\n+        Generalized Cross-Validation).\n+\n     Attributes\n     ----------\n     coef_ : array, shape (n_features,) or (n_targets, n_features)\n@@ -1333,11 +1353,17 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n+    store_cv_values : boolean, default=False\n+        Flag indicating if the cross-validation values corresponding to\n+        each alpha should be stored in the `cv_values_` attribute (see\n+        below). This flag is only compatible with `cv=None` (i.e. using\n+        Generalized Cross-Validation).\n \n     def fit(self, X, y, sample_weight=None):\n         \"\"\"Fit the ridge classifier.\n", "instance_id": "scikit-learn__scikit-learn-10297"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 7649c39262..687b773587 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -353,7 +353,8 @@ class SQLCompiler:\n             # not taken into account so we strip it. When this entire method\n             # is refactored into expressions, then we can check each part as we\n             # generate it.\n-            without_ordering = self.ordering_parts.search(sql).group(1)\n+            sql_oneline = ' '.join(sql.split('\\n'))\n+            without_ordering = self.ordering_parts.search(sql_oneline).group(1)\n             params_hash = make_hashable(params)\n             if (without_ordering, params_hash) in seen:\n                 continue\n", "instance_id": "django__django-11001"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex dc084b8692..3d81a32ce6 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -163,6 +163,21 @@ class ValidationError(Exception):\n             error_dict.setdefault(NON_FIELD_ERRORS, []).extend(self.error_list)\n         return error_dict\n \n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return False\n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            return (\n+                set(self.error_dict.keys()) == set(other.error_dict.keys()) and\n+                all(\n+                    sorted(self.error_dict[key]) == sorted(other.error_dict[key])\n+                    for key in self.error_dict\n+                )\n+            )\n+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):\n+            return sorted(self.error_list) == sorted(other.error_list)\n+        return False\n+\n     def __iter__(self):\n         if hasattr(self, 'error_dict'):\n             for field, errors in self.error_dict.items():\n", "instance_id": "django__django-13220"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 3adbc6979a..8af62bb6e4 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -26,6 +26,9 @@ DEFAULT_MAX_NUM = 1000\n \n \n class ManagementForm(Form):\n+    def __init__(self, *args, **kwargs):\n+        kwargs.setdefault('renderer', get_default_renderer())\n+        super().__init__(*args, **kwargs)\n     \"\"\"\n     Keep track of how many form instances are displayed on the page. If adding\n     new forms via JavaScript, you should increment the count field of this form\n@@ -166,6 +169,21 @@ class BaseFormSet(RenderableFormMixin):\n             )\n         return form\n \n+    def total_form_count(self):\n+        \"\"\"Return the total number of forms in this FormSet.\"\"\"\n+        if self.is_bound:\n+            return min(\n+                self.management_form.cleaned_data[TOTAL_FORM_COUNT], self.absolute_max\n+            )\n+        else:\n+            initial_forms = self.initial_form_count()\n+            total_forms = max(initial_forms, self.min_num) + self.extra\n+            if initial_forms > self.max_num >= 0:\n+                total_forms = initial_forms\n+            elif total_forms > self.max_num >= 0:\n+                total_forms = self.max_num\n+        return total_forms\n+\n     def total_form_count(self):\n         \"\"\"Return the total number of forms in this FormSet.\"\"\"\n         if self.is_bound:\n", "instance_id": "django__django-15902"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 6866648d4e..2cd7149938 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -434,10 +434,8 @@ def _repr_latex_(self):\n     def atoms(self, *types):\n         \"\"\"Returns the atoms that form the current object.\n \n-        By default, only objects that are truly atomic and can't\n-        be divided into smaller pieces are returned: symbols, numbers,\n-        and number symbols like I and pi. It is possible to request\n-        atoms of any type, however, as demonstrated below.\n+        By default, only objects that have no arguments are returned.\n+        It is possible to request atoms of any type, however, as demonstrated below.\n \n         Examples\n         ========\n@@ -500,16 +498,10 @@ def atoms(self, *types):\n         {I*pi, 2*sin(y + I*pi)}\n \n         \"\"\"\n-        if types:\n-            types = tuple(\n-                [t if isinstance(t, type) else type(t) for t in types])\n-        else:\n-            types = (Atom,)\n-        result = set()\n-        for expr in preorder_traversal(self):\n-            if isinstance(expr, types):\n-                result.add(expr)\n-        return result\n+        if not types:\n+            return {expr for expr in preorder_traversal(self) if not expr.args}\n+        types = tuple(t if isinstance(t, type) else type(t) for t in types)\n+        return {expr for expr in preorder_traversal(self) if isinstance(expr, types)}\n \n     @property\n     def free_symbols(self):\n", "instance_id": "sympy__sympy-18532"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/backends/backend_ps.py b/lib/matplotlib/backends/backend_ps.py\nindex f209e811f1..ea88b679b1 100644\n--- a/lib/matplotlib/backends/backend_ps.py\n+++ b/lib/matplotlib/backends/backend_ps.py\n@@ -665,8 +665,9 @@ grestore\n                 curr_stream[1].append(\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n-            # append the last entry\n-            stream.append(curr_stream)\n+            # append the last entry if curr_stream is not None\n+            if curr_stream:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n", "instance_id": "matplotlib__matplotlib-23964"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "sympy__sympy-21171"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f..72348505f5 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -333,7 +333,7 @@ class BaseFormSet:\n         self._non_form_errors.\n         \"\"\"\n         self._errors = []\n-        self._non_form_errors = self.error_class()\n+        self._non_form_errors = self.error_class(error_class='nonform')\n         empty_forms_count = 0\n \n         if not self.is_bound:  # Stop further processing.\ndiff --git a/django/forms/utils.py b/django/forms/utils.py\nindex 50412f414b..998590d396 100644\n--- a/django/forms/utils.py\n+++ b/django/forms/utils.py\n@@ -86,6 +86,8 @@ class ErrorList(UserList, list):\n \n         if error_class is None:\n             self.error_class = 'errorlist'\n+        elif 'nonform' in error_class:\n+            self.error_class = error_class\n         else:\n             self.error_class = 'errorlist {}'.format(error_class)\n \n", "instance_id": "django__django-14608"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 0545797d5f..ae3d395984 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -825,9 +825,9 @@ def _print_MatAdd(self, expr):\n             if s is None:\n                 s = pform     # First element\n             else:\n-                if S(item.args[0]).is_negative:\n-                    s = prettyForm(*stringPict.next(s, ' '))\n-                    pform = self._print(item)\n+                if not isinstance(item, str) and hasattr(item, 'args') and len(item.args) > 0 and item.args[0].is_number and item.args[0] < 0:\n+                    s = prettyForm(*stringPict.next(s, ' - '))\n+                    pform = self._print(-item)\n                 else:\n                     s = prettyForm(*stringPict.next(s, ' + '))\n                 s = prettyForm(*stringPict.next(s, pform))\n", "instance_id": "sympy__sympy-14817"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sphinx/ext/autodoc/directive.py b/sphinx/ext/autodoc/directive.py\nindex 9a3428f5d..963cec465 100644\n--- a/sphinx/ext/autodoc/directive.py\n+++ b/sphinx/ext/autodoc/directive.py\n@@ -7,6 +7,7 @@\n \"\"\"\n \n import warnings\n+import struct\n from typing import Any, Callable, Dict, List, Set\n \n from docutils import nodes\ndiff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 2587ba35b..20ca7a2ac 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -11,6 +11,7 @@\n import importlib\n import traceback\n import warnings\n+import struct\n from typing import Any, Callable, Dict, List, Mapping, NamedTuple, Optional, Tuple\n \n from sphinx.deprecation import (RemovedInSphinx40Warning, RemovedInSphinx50Warning,\n@@ -110,7 +111,11 @@ def import_object(modname: str, objpath: List[str], objtype: str = '',\n             obj = attrgetter(obj, mangled_name)\n             logger.debug('[autodoc] => %r', obj)\n             object_name = attrname\n-        return [module, parent, object_name, obj]\n+        # Special handling for struct.Struct\n+        if module.__name__ == 'struct' and object_name == 'Struct':\n+            return [module, struct, 'Struct', struct.Struct]\n+        else:\n+            return [module, parent, object_name, obj]\n     except (AttributeError, ImportError) as exc:\n         if isinstance(exc, AttributeError) and exc_on_importing:\n             # restore ImportError\n", "instance_id": "sphinx-doc__sphinx-8627"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex a1bf92bde1..fe1b27687c 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -1,6 +1,7 @@\n \"\"\"Base class for all the objects in SymPy\"\"\"\n from __future__ import print_function, division\n-from collections import Mapping, defaultdict\n+from collections.abc import Mapping\n+from collections import defaultdict\n from itertools import chain\n \n from .assumptions import BasicMeta, ManagedProperties\ndiff --git a/sympy/core/containers.py b/sympy/core/containers.py\nindex 15abd93e3a..ba45daa7df 100644\n--- a/sympy/core/containers.py\n+++ b/sympy/core/containers.py\n@@ -13,7 +13,7 @@\n from sympy.core.sympify import sympify, converter\n from sympy.utilities.iterables import iterable\n \n-import collections\n+import collections.abc as collections\n \n \n class Tuple(Basic):\ndiff --git a/sympy/plotting/plot.py b/sympy/plotting/plot.py\nindex b3b0237d19..0b959a43a4 100644\n--- a/sympy/plotting/plot.py\n+++ b/sympy/plotting/plot.py\n@@ -25,7 +25,7 @@\n from __future__ import print_function, division\n \n import inspect\n-from collections import Callable\n+from collections.abc import Callable\n import warnings\n import sys\n \ndiff --git a/sympy/polys/agca/modules.py b/sympy/polys/agca/modules.py\nindex 4589bc6888..5ece2d6ad4 100644\n--- a/sympy/polys/agca/modules.py\n+++ b/sympy/polys/agca/modules.py\n@@ -348,7 +348,7 @@ def convert(self, elem, M=None):\n             if len(tpl) != self.rank:\n                 raise CoercionFailed\n             return FreeModuleElement(self, tpl)\n-        elif elem is 0:\n+        elif elem == 0:\n             return FreeModuleElement(self, (self.ring.convert(0),)*self.rank)\n         else:\n             raise CoercionFailed\ndiff --git a/sympy/series/sequences.py b/sympy/series/sequences.py\nindex 08f36df061..3b3777f9d8 100644\n--- a/sympy/series/sequences.py\n+++ b/sympy/series/sequences.py\n@@ -105,7 +105,9 @@ def coeff(self, pt):\n             raise IndexError(\"Index %s out of bounds %s\" % (pt, self.interval))\n         return self._eval_coeff(pt)\n \n-    def _eval_coeff(self, pt):\n+    def _repr_latex_(self):\n+        from sympy.printing.latex import latex\n+        return r\"$\\left[\" + \", \".join([latex(self.coeff(i)) for i in range(4)]) + r\", \\ldots \\right]$\"\n         raise NotImplementedError(\"The _eval_coeff method should be added to\"\n                                   \"%s to return coefficient so it is available\"\n                                   \"when coeff calls it.\"\ndiff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6b61b133c9..e0fa2b623b 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -3185,7 +3185,7 @@ def power_representation(n, p, k, zeros=False):\n             '''Todd G. Will, \"When Is n^2 a Sum of k Squares?\", [online].\n                 Available: https://www.maa.org/sites/default/files/Will-MMz-201037918.pdf'''\n             return\n-        if feasible is 1:  # it's prime and k == 2\n+        if feasible == 1:  # it's prime and k == 2\n             yield prime_as_sum_of_two_squares(n)\n             return\n \ndiff --git a/sympy/vector/coordsysrect.py b/sympy/vector/coordsysrect.py\nindex baf290e8ac..acf626a3f0 100644\n--- a/sympy/vector/coordsysrect.py\n+++ b/sympy/vector/coordsysrect.py\n@@ -11,7 +11,7 @@\n import sympy.vector\n from sympy.vector.orienters import (Orienter, AxisOrienter, BodyOrienter,\n                                     SpaceOrienter, QuaternionOrienter)\n-import collections\n+import collections.abc as collections\n \n \n def CoordSysCartesian(*args, **kwargs):\n@@ -168,9 +168,9 @@ def __new__(cls, name, transformation=None, parent=None, location=None,\n             if isinstance(transformation, Lambda):\n                 variable_names = [\"x1\", \"x2\", \"x3\"]\n             elif isinstance(transformation, Symbol):\n-                if transformation.name is 'spherical':\n+                if transformation.name == 'spherical':\n                     variable_names = [\"r\", \"theta\", \"phi\"]\n-                elif transformation.name is 'cylindrical':\n+                elif transformation.name == 'cylindrical':\n                     variable_names = [\"r\", \"theta\", \"z\"]\n                 else:\n                     variable_names = [\"x\", \"y\", \"z\"]\n", "instance_id": "sympy__sympy-13971"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/svm/base.py b/sklearn/svm/base.py\nindex 64cebe837..60c65ecc4 100644\n--- a/sklearn/svm/base.py\n+++ b/sklearn/svm/base.py\n@@ -286,12 +286,15 @@ class BaseLibSVM(BaseEstimator, metaclass=ABCMeta):\n             n_class = 1\n         n_SV = self.support_vectors_.shape[0]\n \n-        dual_coef_indices = np.tile(np.arange(n_SV), n_class)\n-        dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,\n-                                     dual_coef_indices.size / n_class)\n-        self.dual_coef_ = sp.csr_matrix(\n-            (dual_coef_data, dual_coef_indices, dual_coef_indptr),\n-            (n_class, n_SV))\n+        if n_class == 0:\n+            self.dual_coef_ = sp.csr_matrix((0, n_SV))\n+        else:\n+            dual_coef_indices = np.tile(np.arange(n_SV), n_class)\n+            dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,\n+                                         dual_coef_indices.size / n_class)\n+            self.dual_coef_ = sp.csr_matrix(\n+                (dual_coef_data, dual_coef_indices, dual_coef_indptr),\n+                (n_class, n_SV))\n \n     def predict(self, X):\n         \"\"\"Perform regression on samples in X.\n", "instance_id": "scikit-learn__scikit-learn-14894"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/physics/units/systems/si.py b/sympy/physics/units/systems/si.py\nindex 700495ad9d..277fce0e40 100644\n--- a/sympy/physics/units/systems/si.py\n+++ b/sympy/physics/units/systems/si.py\n@@ -8,6 +8,10 @@\n from typing import List\n \n from sympy.physics.units import DimensionSystem, Dimension, dHg0\n+from sympy.core.singleton import S\n+\n+Dimensionless = Dimension(S.One)\n+from sympy.core.mul import Mul\n \n from sympy.physics.units.quantities import Quantity\n \n@@ -72,6 +76,51 @@\n     [information],\n )\n \n+def _collect_factor_and_dimension(self, expr):\n+    \"\"\"\n+    Collect the factor and dimension of an expression.\n+\n+    Parameters\n+    ==========\n+\n+    expr : Expr\n+        The expression to analyze.\n+\n+    Returns\n+    =======\n+\n+    factor : Expr\n+        The factor of the expression.\n+    dimension : Dimension\n+        The dimension of the expression.\n+\n+    \"\"\"\n+    from sympy.physics.units.dimensions import Dimension\n+    from sympy.physics.units.quantities import Quantity\n+\n+    if isinstance(expr, Quantity):\n+        return expr.scale_factor, expr.dimension\n+\n+    if isinstance(expr, Dimension):\n+        return S.One, expr\n+\n+    if expr.is_Number:\n+        return expr, Dimensionless\n+\n+    factor, dim = S.One, Dimensionless\n+    for term in Mul.make_args(expr):\n+        if isinstance(term, Quantity):\n+            factor *= term.scale_factor\n+            dim *= term.dimension\n+        elif isinstance(term, Dimension):\n+            dim *= term\n+        elif term.is_Number:\n+            factor *= term\n+        else:\n+            raise ValueError(f\"Cannot handle term {term} of type {type(term)}\")\n+\n+    return factor, dim\n+\n SI = MKSA.extend(base=(mol, cd, K), units=all_units, name='SI', dimension_system=dimsys_SI, derived_units={\n     power: watt,\n     magnetic_flux: weber,\n", "instance_id": "sympy__sympy-24066"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 6f26dff0e0..37b43d0531 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1076,6 +1076,7 @@ class Case(SQLiteNumericMixin, Expression):\n         if not all(isinstance(case, When) for case in cases):\n             raise TypeError(\"Positional arguments must all be When objects.\")\n         super().__init__(output_field)\n+        self.query.subquery = True\n         self.cases = list(cases)\n         self.default = self._parse_expressions(default)[0]\n         self.extra = extra\n", "instance_id": "django__django-15320"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/parsing/mathematica.py b/sympy/parsing/mathematica.py\nindex 7ea14ce33a..94760b114b 100644\n--- a/sympy/parsing/mathematica.py\n+++ b/sympy/parsing/mathematica.py\n@@ -586,8 +586,8 @@ def parse(self, s):\n         \"##\": lambda: [\"SlotSequence\", \"1\"],\n     }\n \n-    _literal = r\"[A-Za-z][A-Za-z0-9]*\"\n-    _number = r\"(?:[0-9]+(?:\\.[0-9]*)?|\\.[0-9]+)\"\n+    _literal = r\"[\\w\\u0370-\\u03FF][\\w\\d\\u0370-\\u03FF]*\"\n+    _number = r\"(?:[\\d]+(?:\\.[\\d]*)?|\\.[\\d]+)\"\n \n     _enclosure_open = [\"(\", \"[\", \"[[\", \"{\"]\n     _enclosure_close = [\")\", \"]\", \"]]\", \"}\"]\n@@ -606,7 +606,7 @@ def _get_tokenizer(self):\n         if self._regex_tokenizer is not None:\n             # Check if the regular expression has already been compiled:\n             return self._regex_tokenizer\n-        tokens = [self._literal, self._number]\n+        tokens = [self._literal, self._number, r\"[\\u0370-\\u03FF]+\"]\n         tokens_escape = self._enclosure_open[:] + self._enclosure_close[:]\n         for typ, strat, symdict in self._mathematica_op_precedence:\n             for k in symdict:\n", "instance_id": "sympy__sympy-24102"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/auth/migrations/0011_update_proxy_permissions.py b/django/contrib/auth/migrations/0011_update_proxy_permissions.py\nindex 0e66649695..fc374793da 100644\n--- a/django/contrib/auth/migrations/0011_update_proxy_permissions.py\n+++ b/django/contrib/auth/migrations/0011_update_proxy_permissions.py\n@@ -24,10 +24,16 @@ def update_proxy_model_permissions(apps, schema_editor, reverse=False):\n         proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)\n         old_content_type = proxy_content_type if reverse else concrete_content_type\n         new_content_type = concrete_content_type if reverse else proxy_content_type\n-        Permission.objects.filter(\n+        for permission in Permission.objects.filter(\n             permissions_query,\n             content_type=old_content_type,\n-        ).update(content_type=new_content_type)\n+        ):\n+            if not Permission.objects.filter(\n+                codename=permission.codename,\n+                content_type=new_content_type,\n+            ).exists():\n+                permission.content_type = new_content_type\n+                permission.save()\n \n \n def revert_proxy_model_permissions(apps, schema_editor):\n", "instance_id": "django__django-11283"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 759191668..0b8d6ee47 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -15,20 +15,6 @@ from _pytest.nodes import Item\n from _pytest.store import StoreKey\n \n \n-evalcache_key = StoreKey[Dict[str, Any]]()\n-\n-\n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n-\n-        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n \n \n class MarkEvaluator:\n@@ -98,7 +84,9 @@ class MarkEvaluator:\n                     self.expr = expr\n                     if isinstance(expr, str):\n                         d = self._getglobals()\n-                        result = cached_eval(self.item.config, expr, d)\n+                        import _pytest._code\n+                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+                        result = eval(exprcode, d)\n                     else:\n                         if \"reason\" not in mark.kwargs:\n                             # XXX better be checked at collection time\n", "instance_id": "pytest-dev__pytest-7373"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/seaborn/_oldcore.py b/seaborn/_oldcore.py\nindex c9218c1f..3bf82cb3 100644\n--- a/seaborn/_oldcore.py\n+++ b/seaborn/_oldcore.py\n@@ -1093,13 +1093,12 @@ class VectorPlotter:\n                 parts = []\n                 grouped = self.plot_data[var].groupby(self.converters[var], sort=False)\n                 for converter, orig in grouped:\n-                    with pd.option_context('mode.use_inf_as_null', True):\n-                        orig = orig.dropna()\n-                        if var in self.var_levels:\n-                            # TODO this should happen in some centralized location\n-                            # it is similar to GH2419, but more complicated because\n-                            # supporting `order` in categorical plots is tricky\n-                            orig = orig[orig.isin(self.var_levels[var])]\n+                    orig = orig.replace([np.inf, -np.inf], np.nan).dropna()\n+                    if var in self.var_levels:\n+                        # TODO this should happen in some centralized location\n+                        # it is similar to GH2419, but more complicated because\n+                        # supporting `order` in categorical plots is tricky\n+                        orig = orig[orig.isin(self.var_levels[var])]\n                     comp = pd.to_numeric(converter.convert_units(orig))\n                     if converter.get_scale() == \"log\":\n                         comp = np.log10(comp)\ndiff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 8526f44b..48dc580b 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1522,16 +1522,17 @@ class PairGrid(Grid):\n             self._extract_legend_handles = True\n \n         kws = kwargs.copy()  # Use copy as we insert other kwargs\n+        hue = kws.pop(\"hue\", None)\n         for i, j in indices:\n             x_var = self.x_vars[j]\n             y_var = self.y_vars[i]\n             ax = self.axes[i, j]\n             if ax is None:  # i.e. we are in corner mode\n                 continue\n-            self._plot_bivariate(x_var, y_var, ax, func, **kws)\n+            self._plot_bivariate(x_var, y_var, ax, func, hue=hue, **kws)\n         self._add_axis_labels()\n \n-        if \"hue\" in signature(func).parameters:\n+        if hue is not None:\n             self.hue_names = list(self._legend_data)\n \n     def _plot_bivariate(self, x_var, y_var, ax, func, **kwargs):\n", "instance_id": "mwaskom__seaborn-2848"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 73c20334d0..ad06668efe 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -152,7 +152,7 @@ def __new__(cls, *args, **kwargs):\n                         'warn' or 'ignore'.'''))\n         if any(coords[dim:]):\n             raise ValueError('Nonzero coordinates cannot be removed.')\n-        if any(a.is_number and im(a) for a in coords):\n+        if evaluate and any(a.is_number and im(a) for a in coords):\n             raise ValueError('Imaginary coordinates are not permitted.')\n         if not all(isinstance(a, Expr) for a in coords):\n             raise TypeError('Coordinates must be valid SymPy expressions.')\n", "instance_id": "sympy__sympy-22714"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d01c7..8b9da17e31 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -38,6 +38,7 @@ def _multi_decorate(decorators, method):\n         # 'func'. Also, wrap method.__get__() in a function because new\n         # attributes can't be set on bound method objects, only on functions.\n         bound_method = partial(method.__get__(self, type(self)))\n+        update_wrapper(bound_method, method)\n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\n", "instance_id": "django__django-14787"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/doc/en/example/assertion/failure_demo.py b/doc/en/example/assertion/failure_demo.py\nindex abb9bce50..9649fc771 100644\n--- a/doc/en/example/assertion/failure_demo.py\n+++ b/doc/en/example/assertion/failure_demo.py\n@@ -1,5 +1,5 @@\n import pytest\n-from pytest import raises\n+from pytest import raises, skip_module\n \n \n def otherfunc(a, b):\ndiff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..4f56a210d 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -135,7 +135,9 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     .. note::\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n         possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n+        like mismatching platforms or dependencies. To skip a module, use\n+        `pytest.skip(msg=\"reason\", allow_module_level=True)` or the new\n+        `pytest.skip_module(\"reason\")` function.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n@@ -158,6 +160,17 @@ def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     raise Failed(msg=msg, pytrace=pytrace)\n \n \n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given message.\n+\n+    This function should be called at the module level to skip the entire module.\n+\n+    :param str msg: The message to show the user as reason for the skip.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    skip(msg=msg, allow_module_level=True)\n+\n+\n class XFailed(Failed):\n     \"\"\"Raised from an explicit call to pytest.xfail().\"\"\"\n \n", "instance_id": "pytest-dev__pytest-8906"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 7049e06474..f36189e7c6 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -21,6 +21,7 @@ from django.core.management.base import (\n     CommandError,\n     CommandParser,\n     handle_default_options,\n+    DjangoHelpFormatter,\n )\n from django.core.management.color import color_style\n from django.utils import autoreload\ndiff --git a/django/core/management/base.py b/django/core/management/base.py\nindex d37d43d5c5..74fe95f081 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -289,7 +289,7 @@ class BaseCommand:\n         parser = CommandParser(\n             prog=\"%s %s\" % (os.path.basename(prog_name), subcommand),\n             description=self.help or None,\n-            formatter_class=DjangoHelpFormatter,\n+            formatter_class=self.get_help_formatter(),\n             missing_args_message=getattr(self, \"missing_args_message\", None),\n             called_from_command_line=getattr(self, \"_called_from_command_line\", None),\n             **kwargs,\n@@ -357,6 +357,13 @@ class BaseCommand:\n         self.add_arguments(parser)\n         return parser\n \n+    def get_help_formatter(self):\n+        \"\"\"\n+        Return the help formatter class to be used in the command parser.\n+        Subclasses can override this method to use a custom formatter.\n+        \"\"\"\n+        return DjangoHelpFormatter\n+\n     def add_arguments(self, parser):\n         \"\"\"\n         Entry point for subclassed commands to add custom arguments.\n", "instance_id": "django__django-15781"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex ecae2566..c299ac12 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -16,6 +16,7 @@ def concat(\n     positions=None,\n     fill_value=dtypes.NA,\n     join=\"outer\",\n+    ignore_missing_vars=False,\n ):\n     \"\"\"Concatenate xarray objects along a new or existing dimension.\n \n@@ -128,7 +129,7 @@ def concat(\n             \"can only concatenate xarray Dataset and DataArray \"\n             \"objects, got %s\" % type(first_obj)\n         )\n-    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)\n+    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join, ignore_missing_vars)\n \n \n def _calc_concat_dim_coord(dim):\n@@ -279,7 +280,9 @@ def _dataset_concat(\n     # Make sure we're working on a copy (we'll be loading variables)\n     datasets = [ds.copy() for ds in datasets]\n     datasets = align(\n-        *datasets, join=join, copy=False, exclude=[dim], fill_value=fill_value\n+        *datasets, join=join, copy=False, exclude=[dim], fill_value=fill_value,\n+        ignore_missing_vars=ignore_missing_vars,\n+        ignore_missing_vars=ignore_missing_vars,\n     )\n \n     dim_coords, dims_sizes, coord_names, data_names = _parse_datasets(datasets)\n@@ -312,12 +315,14 @@ def _dataset_concat(\n         to_merge = {var: [] for var in variables_to_merge}\n \n         for ds in datasets:\n-            absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError(\n-                    \"variables %r are present in some datasets but not others. \"\n-                    % absent_merge_vars\n-                )\n+            if not ignore_missing_vars:\n+                if not ignore_missing_vars:\n+                    absent_merge_vars = variables_to_merge - set(ds.variables)\n+                    if absent_merge_vars:\n+                        raise ValueError(\n+                            \"variables %r are present in some datasets but not others. \"\n+                            % absent_merge_vars\n+                        )\n \n             for var in variables_to_merge:\n                 to_merge[var].append(ds.variables[var])\n", "instance_id": "pydata__xarray-3364"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex 503f7f56fd..676342680e 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -74,7 +74,7 @@ class BaseDatabaseCreation:\n         # and store it on the connection. This slightly horrific process is so people\n         # who are testing on databases without transactions or who are using\n         # a TransactionTestCase still get a clean database on every test run.\n-        if serialize:\n+        if serialize and self.connection.settings_dict['TEST'].get('MIGRATE', True):\n             self.connection._test_serialized_contents = self.serialize_db_to_string()\n \n         call_command('createcachetable', database=self.connection.alias)\n", "instance_id": "django__django-13448"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 8ddbb5ba68..c54767f592 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1309,7 +1309,7 @@ class ManyToManyField(RelatedField):\n                              \"through_fields keyword argument.\") % (self, from_model_name),\n                             hint=(\n                                 'If you want to create a recursive relationship, '\n-                                'use ForeignKey(\"%s\", symmetrical=False, through=\"%s\").'\n+                                'use ManyToManyField(\"%s\", through=\"%s\").'\n                             ) % (\n                                 RECURSIVE_RELATIONSHIP_CONSTANT,\n                                 relationship_model_name,\n", "instance_id": "django__django-12497"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 7ef51bc847..5443d8ddc7 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -378,6 +378,9 @@ def hstack(cls, *args):\n             return cls._new()\n \n         kls = type(args[0])\n+        if all(arg.rows == 0 for arg in args):\n+            total_cols = sum(arg.cols for arg in args)\n+            return cls._new(0, total_cols, [])\n         return reduce(kls.row_join, args)\n \n     def reshape(self, rows, cols):\n@@ -601,6 +604,9 @@ def vstack(cls, *args):\n             return cls._new()\n \n         kls = type(args[0])\n+        if all(arg.cols == 0 for arg in args):\n+            total_rows = sum(arg.rows for arg in args)\n+            return cls._new(total_rows, 0, [])\n         return reduce(kls.col_join, args)\n \n \n", "instance_id": "sympy__sympy-13031"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/pylint/config/config_file_parser.py b/pylint/config/config_file_parser.py\nindex 3d7694956..0b5e2d7a6 100644\n--- a/pylint/config/config_file_parser.py\n+++ b/pylint/config/config_file_parser.py\n@@ -8,6 +8,7 @@ from __future__ import annotations\n \n import configparser\n import os\n+import re\n import sys\n import warnings\n from pathlib import Path\n@@ -83,6 +84,11 @@ class _ConfigurationFileParser:\n         except KeyError:\n             return {}, []\n \n+        if \"ignore-paths\" in sections_values:\n+            sections_values[\"ignore-paths\"] = [\n+                re.compile(pattern) for pattern in sections_values[\"ignore-paths\"]\n+            ]\n+\n         config_content: dict[str, str] = {}\n         options: list[str] = []\n         for opt, values in sections_values.items():\ndiff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..5bc60bb60 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -9,6 +9,7 @@ import collections\n import contextlib\n import functools\n import os\n+import re\n import sys\n import tokenize\n import traceback\n@@ -606,6 +607,13 @@ class PyLinter(\n                         skip_subtrees.append(root)\n                         continue\n \n+                    if any(\n+                        re.match(pattern, root)\n+                        for pattern in self.config.ignore_paths\n+                    ):\n+                        skip_subtrees.append(root)\n+                        continue\n+\n                     if \"__init__.py\" in files:\n                         skip_subtrees.append(root)\n                         yield root\n@@ -1010,6 +1018,11 @@ class PyLinter(\n             MANAGER.extension_package_whitelist.update(\n                 self.config.extension_pkg_whitelist\n             )\n+\n+        if self.config.ignore_paths:\n+            self.config.ignore_paths = [\n+                re.compile(pattern) for pattern in self.config.ignore_paths\n+            ]\n         self.stats.reset_message_count()\n         self._ignore_paths = self.linter.config.ignore_paths\n \n", "instance_id": "pylint-dev__pylint-7080"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "sphinx-doc__sphinx-8506"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f33bcbdccf..7539216ec6 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -182,10 +182,11 @@ class Command(BaseCommand):\n                             if ref_db_table == table_name\n                             else table2model(ref_db_table)\n                         )\n+                        related_name = f\"related_{att_name}\"\n                         if rel_to in known_models:\n-                            field_type = \"%s(%s\" % (rel_type, rel_to)\n+                            field_type = \"%s(%s, related_name='%s'\" % (rel_type, rel_to, related_name)\n                         else:\n-                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n+                            field_type = \"%s('%s', related_name='%s'\" % (rel_type, rel_to, related_name)\n                     else:\n                         # Calling `get_field_type` to get the field type string and any\n                         # additional parameters and notes.\n", "instance_id": "django__django-15819"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 7eaf9a46f..226286651 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -199,8 +199,11 @@ class Pipeline(_BaseComposition):\n             if trans is not None and trans != 'passthrough':\n                 yield idx, name, trans\n \n+    def __len__(self):\n+        \"\"\"Return the number of steps in the Pipeline.\"\"\"\n+        return len(self.steps)\n     def __getitem__(self, ind):\n-        \"\"\"Returns a sub-pipeline or a single esimtator in the pipeline\n+        \"\"\"Returns a sub-pipeline or a single estimator in the pipeline\n \n         Indexing with an integer will return an estimator; using a slice\n         returns another Pipeline instance which copies a slice of this\n", "instance_id": "scikit-learn__scikit-learn-13439"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/from sympy/assumptions/sathandlers.py b/from sympy/assumptions/sathandlers.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/from sympy/core/basic.py b/from sympy/core/basic.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/from sympy/core/containers.py b/from sympy/core/containers.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/from sympy/core/function.py b/from sympy/core/function.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/from sympy/plotting/plot.py b/from sympy/plotting/plot.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/sympy/assumptions/sathandlers.py b/sympy/assumptions/sathandlers.py\nindex 61d62d04cf..881a5f9ba8 100644\n--- a/sympy/assumptions/sathandlers.py\n+++ b/sympy/assumptions/sathandlers.py\n@@ -1,6 +1,7 @@\n from __future__ import print_function, division\n \n-from collections import MutableMapping, defaultdict\n+from collections.abc import MutableMapping\n+from collections import defaultdict\n \n from sympy.core import (Add, Mul, Pow, Integer, Number, NumberSymbol,)\n from sympy.core.numbers import ImaginaryUnit\ndiff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex d4ca323e0d..b42fd1d75c 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -1,6 +1,7 @@\n \"\"\"Base class for all the objects in SymPy\"\"\"\n from __future__ import print_function, division\n-from collections import Mapping, defaultdict\n+from collections.abc import Mapping\n+from collections import defaultdict\n from itertools import chain\n \n from .assumptions import BasicMeta, ManagedProperties\ndiff --git a/sympy/core/containers.py b/sympy/core/containers.py\nindex 15abd93e3a..8ac11e7ecd 100644\n--- a/sympy/core/containers.py\n+++ b/sympy/core/containers.py\n@@ -268,7 +268,7 @@ def _sorted_args(self):\n         return tuple(sorted(self.args, key=default_sort_key))\n \n \n-class OrderedSet(collections.MutableSet):\n+class OrderedSet(collections.abc.MutableSet):\n     def __init__(self, iterable=None):\n         if iterable:\n             self.map = collections.OrderedDict((item, None) for item in iterable)\ndiff --git a/sympy/core/function.py b/sympy/core/function.py\nindex e7644f85d0..9a9ba57480 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -1224,7 +1224,7 @@ def __new__(cls, expr, *variables, **assumptions):\n             if unhandled_non_symbol:\n                 obj = None\n             else:\n-                if isinstance(v, (collections.Iterable, Tuple, MatrixCommon, NDimArray)):\n+                if isinstance(v, (collections.abc.Iterable, Tuple, MatrixCommon, NDimArray)):\n                     expr = derive_by_array(expr, v)\n                     nderivs += 1\n                     continue\ndiff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 056d9bc497..4aa75e4d77 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -86,7 +86,7 @@ def entry(i, j):\n                 return self[i, j]\n             elif pos <= j < pos + other.cols:\n                 return other[i, j - pos]\n-            return self[i, j - pos - other.cols]\n+            return self[i, j - other.cols]\n \n         return self._new(self.rows, self.cols + other.cols,\n                          lambda i, j: entry(i, j))\ndiff --git a/sympy/plotting/plot.py b/sympy/plotting/plot.py\nindex b3b0237d19..0b959a43a4 100644\n--- a/sympy/plotting/plot.py\n+++ b/sympy/plotting/plot.py\n@@ -25,7 +25,7 @@\n from __future__ import print_function, division\n \n import inspect\n-from collections import Callable\n+from collections.abc import Callable\n import warnings\n import sys\n \n", "instance_id": "sympy__sympy-13647"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 34a3bab3fc..7a63ecce55 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -4,13 +4,13 @@\n \n from sympy.core.cache import cacheit\n from sympy.core import (sympify, Basic, S, Expr, expand_mul, factor_terms,\n-    Mul, Dummy, igcd, FunctionClass, Add, symbols, Wild, expand)\n+    Mul, Dummy, igcd, FunctionClass, Add, symbols, Wild, expand, separatevars)\n from sympy.core.compatibility import reduce, iterable\n from sympy.core.numbers import I, Integer\n from sympy.core.function import count_ops, _mexpand\n from sympy.functions.elementary.trigonometric import TrigonometricFunction\n from sympy.functions.elementary.hyperbolic import HyperbolicFunction\n-from sympy.functions import sin, cos, exp, cosh, tanh, sinh, tan, cot, coth\n+from sympy.functions import sin, cos, exp, cosh, tanh, sinh, tan, cot, coth, sinc\n \n from sympy.strategies.core import identity\n from sympy.strategies.tree import greedy\n@@ -22,6 +22,7 @@\n from sympy.polys import factor, cancel, parallel_poly_from_expr\n \n from sympy.utilities.misc import debug\n+from sympy.simplify.cse_main import cse\n \n \n \n@@ -425,7 +426,21 @@ def analyse_gens(gens, hints):\n _trigs = (TrigonometricFunction, HyperbolicFunction)\n \n \n-def trigsimp(expr, **opts):\n+def _exp_to_trig(expr):\n+    \"\"\"\n+    Simplify exponential expressions to trigonometric functions.\n+    \"\"\"\n+    from sympy import I, exp, sin, cos, sinc\n+    expr = expr.rewrite(exp)\n+    expr = expr.replace(lambda x: x.is_Mul and I in x.args and exp(I * x.args[1]) in x.args,\n+                        lambda x: sin(x.args[1]) if x.args[0] == -I else -sin(x.args[1]))\n+    expr = expr.replace(lambda x: x.is_Mul and I in x.args and exp(-I * x.args[1]) in x.args,\n+                        lambda x: sin(x.args[1]) if x.args[0] == I else -sin(x.args[1]))\n+    expr = expr.replace(lambda x: x.is_Mul and x.args[0] == 1 / 2 and sin(x.args[1]) in x.args,\n+                        lambda x: sin(x.args[1]))\n+    expr = expr.replace(lambda x: x.is_Mul and x.args[0] == 1 / 2 / x.args[1] and sin(x.args[2]) in x.args,\n+                        lambda x: sinc(x.args[1]))\n+    return expr\n     \"\"\"\n     reduces expression by using known trig identities\n \n@@ -473,7 +488,7 @@ def trigsimp(expr, **opts):\n     \"\"\"\n     from sympy.simplify.fu import fu\n \n-    expr = sympify(expr)\n+    expr = _exp_to_trig(sympify(expr))\n \n     try:\n         return expr._eval_trigsimp(**opts)\n", "instance_id": "sympy__sympy-11870"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 6d3cc05bd3..eed5eb593b 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -490,10 +490,10 @@ def _print_Product(self, expr):\n         sign_height = 0\n \n         for lim in expr.limits:\n-            width = (func_height + 2) * 5 // 3 - 2\n+            width = (func_height + 2) * 3 // 2 - 2\n             sign_lines = []\n             sign_lines.append(corner_chr + (horizontal_chr*width) + corner_chr)\n-            for i in range(func_height + 1):\n+            for i in range(func_height):\n                 sign_lines.append(vertical_chr + (' '*width) + vertical_chr)\n \n             pretty_sign = stringPict('')\n@@ -519,7 +519,7 @@ def _print_Product(self, expr):\n             padding = prettyForm(*padding.stack(*[' ']*(height - 1)))\n             pretty_sign = prettyForm(*pretty_sign.right(padding))\n \n-            pretty_func = prettyForm(*pretty_sign.right(pretty_func))\n+            pretty_func = prettyForm(*pretty_sign.right(pretty_sign))\n \n         pretty_func.baseline = max_upper + sign_height//2\n         pretty_func.binding = prettyForm.MUL\n", "instance_id": "sympy__sympy-16281"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex f027a74976..f74cc9b47a 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -236,6 +236,13 @@ class Options:\n         else:\n             self.order_with_respect_to = None\n \n+        # Ensure ordering is inherited from the parent model if not explicitly set\n+        if not self.ordering and self.parents:\n+            for parent in self.parents:\n+                if parent._meta.ordering:\n+                    self.ordering = parent._meta.ordering\n+                    break\n+\n         if self.pk is None:\n             if self.parents:\n                 # Promote the first parent link in lieu of adding yet another\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 78c4f47b5b..a26094b7de 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -642,6 +642,9 @@ class Query(BaseExpression):\n         # Ordering uses the 'rhs' ordering, unless it has none, in which case\n         # the current ordering is used.\n         self.order_by = rhs.order_by or self.order_by\n+        # Ensure ordering is applied correctly for inherited models\n+        if not self.order_by and self.model._meta.ordering:\n+            self.order_by = self.model._meta.ordering\n         self.extra_order_by = rhs.extra_order_by or self.extra_order_by\n \n     def deferred_to_data(self, target, callback):\n", "instance_id": "django__django-12470"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 03676533b7..db72b45fb6 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -587,7 +587,9 @@ def join(value, arg, autoescape=True):\n     try:\n         if autoescape:\n             value = [conditional_escape(v) for v in value]\n-        data = conditional_escape(arg).join(value)\n+        else:\n+            arg = conditional_escape(arg)\n+        data = arg.join(value)\n     except TypeError:  # Fail silently if arg isn't iterable.\n         return value\n     return mark_safe(data)\n", "instance_id": "django__django-16873"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..b550db96e8 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -897,26 +897,26 @@ def __new__(cls, *args, **kwargs):\n         temp = flatten(args)\n         if has_dups(temp):\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n+                # Apply cycles in left-to-right order\n+                aform = list(range(size or max(flatten(args)) + 1))\n+                for cycle in args:\n+                    for i in range(len(cycle) - 1, 0, -1):\n+                        aform[cycle[i]], aform[cycle[i - 1]] = aform[cycle[i - 1]], aform[cycle[i]]\n             else:\n                 raise ValueError('there were repeated elements.')\n-        temp = set(temp)\n-\n-        if not is_cycle and \\\n-                any(i not in temp for i in range(len(temp))):\n-            raise ValueError(\"Integers 0 through %s must be present.\" %\n-                             max(temp))\n-\n-        if is_cycle:\n-            # it's not necessarily canonical so we won't store\n-            # it -- use the array form instead\n-            c = Cycle()\n-            for ci in args:\n-                c = c(*ci)\n-            aform = c.list()\n         else:\n-            aform = list(args)\n+            if not is_cycle and any(i not in temp for i in range(len(temp))):\n+                raise ValueError(\"Integers 0 through %s must be present.\" % max(temp))\n+            if is_cycle:\n+                # it's not necessarily canonical so we won't store\n+                # it -- use the array form instead\n+                c = Cycle()\n+                for ci in args:\n+                    c = c(*ci)\n+                aform = c.list()\n+            else:\n+                aform = list(args)\n+        \n         if size and size > len(aform):\n             # don't allow for truncation of permutation which\n             # might split a cycle and lead to an invalid aform\n", "instance_id": "sympy__sympy-12481"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 7e5dea2377..c1f7cc4b8a 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -1,3 +1,5 @@\n+from django.db.migrations.operations.fields import AlterField\n+\n class MigrationOptimizer:\n     \"\"\"\n     Power the optimization process, where you provide a list of Operations\n@@ -44,7 +46,10 @@ class MigrationOptimizer:\n             right = True  # Should we reduce on the right or on the left.\n             # Compare it to each operation after it\n             for j, other in enumerate(operations[i + 1 :]):\n-                result = operation.reduce(other, app_label)\n+                if isinstance(operation, AlterField) and isinstance(other, AlterField) and operation.name == other.name and operation.model_name == other.model_name:\n+                    result = [other]\n+                else:\n+                    result = operation.reduce(other, app_label)\n                 if isinstance(result, list):\n                     in_between = operations[i + 1 : i + j + 1]\n                     if right:\n", "instance_id": "django__django-16595"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..2ad3f1f2c6 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -56,6 +56,9 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n     available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n-        return [E004]\n+    language_code = settings.LANGUAGE_CODE\n+    if language_code not in available_tags:\n+        base_language = language_code.split('-')[0]\n+        if base_language not in available_tags:\n+            return [E004]\n     return []\n", "instance_id": "django__django-12286"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0a5e5ff673..e4f5a6a8c2 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -345,6 +345,12 @@ class ModelBase(type):\n                 remote = wrt.remote_field.model\n                 lazy_related_operation(make_foreign_order_accessors, cls, remote)\n \n+        # Add get_FOO_display() methods for each field with choices.\n+        for field in opts.fields:\n+            if field.choices and not hasattr(cls, 'get_%s_display' % field.name):\n+                setattr(cls, 'get_%s_display' % field.name,\n+                        partialmethod(cls._get_FIELD_display, field))\n+\n         # Give the class a docstring -- its definition.\n         if cls.__doc__ is None:\n             cls.__doc__ = \"%s(%s)\" % (cls.__name__, \", \".join(f.name for f in opts.fields))\n", "instance_id": "django__django-11999"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 9ce46e3f73..6dfd38152a 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -207,8 +207,30 @@ class Field(RegisterLookupMixin):\n             *self._check_backend_specific_checks(**kwargs),\n             *self._check_validators(),\n             *self._check_deprecation_details(),\n+            *self._check_max_length_with_choices(),\n         ]\n \n+    def _check_max_length_with_choices(self):\n+        \"\"\"\n+        Check if max_length is large enough to fit the longest value in choices.\n+        \"\"\"\n+        if self.choices is not None and self.max_length is not None:\n+            try:\n+                max_choice_length = max(len(str(choice)) for choice, _ in self.flatchoices)\n+            except ValueError:\n+                # Handle cases where choices are not in the expected format\n+                return []\n+            if max_choice_length > self.max_length:\n+                return [\n+                    checks.Error(\n+                        f\"'max_length' is too small to fit the longest value in 'choices'. \"\n+                        f\"Max length is {self.max_length}, but the longest choice is {max_choice_length}.\",\n+                        obj=self,\n+                        id='fields.E009',\n+                    )\n+                ]\n+        return []\n+\n     def _check_field_name(self):\n         \"\"\"\n         Check if field name is valid, i.e. 1) does not end with an\n", "instance_id": "django__django-11742"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex c268a56724..877204adc8 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -1093,7 +1093,11 @@ def rc_context(rc=None, fname=None):\n             rc_file(fname)\n         if rc:\n             rcParams.update(rc)\n-        yield\n+        original_figs = plt._pylab_helpers.Gcf.figs.copy()\n+        try:\n+            yield\n+        finally:\n+            plt._pylab_helpers.Gcf.figs = original_figs\n     finally:\n         dict.update(rcParams, orig)  # Revert to the original rcs.\n \n@@ -1175,7 +1179,11 @@ def get_backend():\n     --------\n     matplotlib.use\n     \"\"\"\n-    return rcParams['backend']\n+    # Preserve the current figures\n+    current_figures = _pylab_helpers.Gcf.figs.copy()\n+    backend = rcParams['backend']\n+    _pylab_helpers.Gcf.figs = current_figures\n+    return backend\n \n \n def interactive(b):\n", "instance_id": "matplotlib__matplotlib-23299"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex a5b0f464a9..cf4db31990 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1738,12 +1738,19 @@ class QuerySet(AltersData):\n             # Can only pass None to defer(), not only(), as the rest option.\n             # That won't stop people trying to do this, so let's be explicit.\n             raise TypeError(\"Cannot pass None as an argument to only().\")\n+        opts = self.model._meta\n+        related_fields = set()\n         for field in fields:\n-            field = field.split(LOOKUP_SEP, 1)[0]\n+            parts = field.split(LOOKUP_SEP, 1)\n+            if len(parts) > 1:\n+                related_fields.add(parts[0])\n+            field = parts[0]\n             if field in self.query._filtered_relations:\n                 raise ValueError(\"only() is not supported with FilteredRelation.\")\n         clone = self._chain()\n         clone.query.add_immediate_loading(fields)\n+        if related_fields:\n+            clone = clone.select_related(*related_fields)\n         return clone\n \n     def using(self, alias):\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 781dfd5499..2bf817f36e 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1746,7 +1746,17 @@ class Query(BaseExpression):\n                         \" not permitted.\" % (names[pos + 1], name)\n                     )\n                 break\n-        return path, final_field, targets, names[pos + 1 :]\n+            if final_field.is_relation and final_field.many_to_one:\n+                # Ensure that only the specified fields are included in the query.\n+                self.add_deferred_loading(\n+                    {f.attname for f in final_field.related_model._meta.fields if f.attname not in {t.attname for t in targets}}\n+                )\n+            if final_field.is_relation and final_field.many_to_one:\n+                # Ensure that only the specified fields are included in the query.\n+                self.add_deferred_loading(\n+                    {f.attname for f in final_field.related_model._meta.fields if f.attname not in {t.attname for t in targets}}\n+                )\n+            return path, final_field, targets, names[pos + 1 :]\n \n     def setup_joins(\n         self,\n", "instance_id": "django__django-16910"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex df7452ee87..ab51872d47 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1958,6 +1958,8 @@ def _print_Pow(self, power):\n                 return self._print_nth_root(b, e)\n             if e.is_Rational and e < 0:\n                 return prettyForm(\"1\")/self._print(Pow(b, -e, evaluate=False))\n+            if e.is_Mul and e.args[0] is S.One and e.args[1] is S.One/S.Exp1:\n+                return self._print_nth_root(b, S.Exp1)\n \n         if b.is_Relational:\n             return prettyForm(*self._print(b).parens()).__pow__(self._print(e))\n", "instance_id": "sympy__sympy-20639"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..ea3eff13f 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2174,8 +2174,12 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n-                                 for i in range(len(folds))], axis=0)\n+                    if multi_class == 'multinomial':\n+                        w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                                     for i in range(len(folds))], axis=0)\n+                    else:\n+                        w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                     for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n                 self.C_.append(np.mean(self.Cs_[best_indices_C]))\n", "instance_id": "scikit-learn__scikit-learn-14087"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "sympy__sympy-13043"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 425db22c..23d25634 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -88,7 +88,7 @@ class SessionRedirectMixin(object):\n         i = 0\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = resp.request.copy()\n \n             resp.content  # Consume socket so it can be released\n \n", "instance_id": "psf__requests-1963"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "matplotlib__matplotlib-26011"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..0169a4c1b0 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -277,12 +277,12 @@ class SQLCompiler:\n         can add aliases to clauses that do not yet have one, or it can\n         add totally new select clauses).\n         \"\"\"\n-        if self.query.extra_order_by:\n+        if self.query.order_by:\n+            ordering = self.query.order_by\n+        elif self.query.extra_order_by:\n             ordering = self.query.extra_order_by\n         elif not self.query.default_ordering:\n             ordering = self.query.order_by\n-        elif self.query.order_by:\n-            ordering = self.query.order_by\n         elif self.query.get_meta().ordering:\n             ordering = self.query.get_meta().ordering\n             self._meta_ordering = ordering\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex d65141b834..aa7d63a441 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1638,6 +1638,9 @@ class Query(BaseExpression):\n                 break\n             if info.filtered_relation:\n                 break\n+            if info.join_field.model == info.join_field.related_model:\n+                # Avoid unnecessary join for self-referencing foreign key\n+                continue\n             join_targets = {t.column for t in info.join_field.foreign_related_fields}\n             cur_targets = {t.column for t in targets}\n             if not cur_targets.issubset(join_targets):\n", "instance_id": "django__django-13033"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex a0eb97792e..d649e31668 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -289,14 +289,20 @@ def _do_exponent(self, expr, exp):\n         else:\n             return expr\n \n-    def _print_bool(self, e):\n-        return r\"\\mathrm{%s}\" % e\n-\n-    _print_BooleanTrue = _print_bool\n-    _print_BooleanFalse = _print_bool\n-\n-    def _print_NoneType(self, e):\n-        return r\"\\mathrm{%s}\" % e\n+    def _print_MatAdd(self, expr):\n+        terms = list(expr.args)\n+        tex = \"\"\n+        for i, term in enumerate(terms):\n+            if i == 0:\n+                pass\n+            elif _coeff_isneg(term):\n+                tex += \" - \"\n+                term = -term\n+            else:\n+                tex += \" + \"\n+            term_tex = self._print(term)\n+            tex += term_tex\n+        return tex\n \n \n     def _print_Add(self, expr, order=None):\n@@ -1342,15 +1348,8 @@ def _print_Order(self, expr):\n                 s += self._print(expr.point[0])\n         return r\"O\\left(%s\\right)\" % s\n \n-    def _print_Symbol(self, expr):\n-        if expr in self._settings['symbol_names']:\n-            return self._settings['symbol_names'][expr]\n-\n-        return self._deal_with_super_sub(expr.name) if \\\n-            '\\\\' not in expr.name else expr.name\n-\n-    _print_RandomSymbol = _print_Symbol\n-    _print_MatrixSymbol = _print_Symbol\n+    def _print_MatrixSymbol(self, expr):\n+        return self._print_Symbol(expr)\n \n     def _deal_with_super_sub(self, string):\n         if '{' in string:\n@@ -1469,8 +1468,16 @@ def _print_Adjoint(self, expr):\n             return r\"\\left(%s\\right)^\\dagger\" % self._print(mat)\n         else:\n             return r\"%s^\\dagger\" % self._print(mat)\n+        mat = expr.arg\n+        from sympy.matrices import MatrixSymbol\n+        if not isinstance(mat, MatrixSymbol):\n+            return r\"\\left(%s\\right)^\\dagger\" % self._print(mat)\n+        else:\n+            return r\"%s^\\dagger\" % self._print(mat)\n \n-    def _print_MatAdd(self, expr):\n+    def _print_Trace(self, expr):\n+        arg = self._print(expr.arg)\n+        return r\"\\operatorname{Trace}\\left(%s\\right)\" % arg\n         terms = [self._print(t) for t in expr.args]\n         l = []\n         for t in terms:\n@@ -1488,6 +1495,18 @@ def _print_MatAdd(self, expr):\n     def _print_MatMul(self, expr):\n         from sympy import Add, MatAdd, HadamardProduct, MatMul, Mul\n \n+        def parens(x):\n+            if isinstance(x, (Add, MatAdd, HadamardProduct)):\n+                return r\"\\left(%s\\right)\" % self._print(x)\n+            return self._print(x)\n+\n+        if isinstance(expr, MatMul) and expr.args[0].is_Number and expr.args[0] < 0:\n+            expr = Mul(-1 * expr.args[0], MatMul(*expr.args[1:]))\n+            return '-' + ' '.join(map(parens, expr.args))\n+        else:\n+            return ' '.join(map(parens, expr.args))\n+        from sympy import Add, MatAdd, HadamardProduct, MatMul, Mul\n+\n         def parens(x):\n             if isinstance(x, (Add, MatAdd, HadamardProduct)):\n                 return r\"\\left(%s\\right)\" % self._print(x)\n", "instance_id": "sympy__sympy-15308"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "django__django-16400"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/staticfiles/handlers.py b/django/contrib/staticfiles/handlers.py\nindex 711d8864ad..5a89381d2a 100644\n--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n@@ -52,6 +52,16 @@ class StaticFilesHandlerMixin:\n         except Http404 as e:\n             return response_for_exception(request, e)\n \n+    async def get_response_async(self, request):\n+        try:\n+            return self.serve(request)\n+        except Http404 as e:\n+            return response_for_exception(request, e)\n+        try:\n+            return self.serve(request)\n+        except Http404 as e:\n+            return response_for_exception(request, e)\n+\n \n class StaticFilesHandler(StaticFilesHandlerMixin, WSGIHandler):\n     \"\"\"\n@@ -83,6 +93,9 @@ class ASGIStaticFilesHandler(StaticFilesHandlerMixin, ASGIHandler):\n         if scope['type'] == 'http' and self._should_handle(scope['path']):\n             # Serve static content\n             # (the one thing super() doesn't do is __call__, apparently)\n-            return await super().__call__(scope, receive, send)\n+            request = self.request_class(scope, receive)\n+            response = await self.get_response_async(request)\n+            await response(scope, receive, send)\n+            return\n         # Hand off to the main app\n         return await self.application(scope, receive, send)\n", "instance_id": "django__django-12915"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sphinx/application.py b/sphinx/application.py\nindex 5bdccdbb1..0474559e8 100644\n--- a/sphinx/application.py\n+++ b/sphinx/application.py\n@@ -334,6 +334,10 @@ class Sphinx:\n     def _init_builder(self) -> None:\n         self.builder.set_environment(self.env)\n         self.builder.init()\n+        for node in self.env.get_doctree(self.config.master_doc).traverse(nodes.table):\n+            if not node.get('number'):\n+                logger.warning(__('no number is assigned for table: %s'), node['ids'][0],\n+                               location=node)\n         self.events.emit('builder-inited')\n \n     # ---- main \"build\" method -------------------------------------------------\ndiff --git a/sphinx/builders/latex/__init__.py b/sphinx/builders/latex/__init__.py\nindex 77825f0ea..226ccb2fb 100644\n--- a/sphinx/builders/latex/__init__.py\n+++ b/sphinx/builders/latex/__init__.py\n@@ -347,6 +347,10 @@ class LaTeXBuilder(Builder):\n         logger.info('')\n         logger.info(__(\"resolving references...\"))\n         self.env.resolve_references(largetree, indexfile, self)\n+        for node in largetree.traverse(nodes.table):\n+            if not node.get('number'):\n+                logger.warning(__('no number is assigned for table: %s'), node['ids'][0],\n+                               location=node)\n         # resolve :ref:s to distant tex files -- we can't add a cross-reference,\n         # but append the document name\n         for pendingnode in largetree.traverse(addnodes.pending_xref):\ndiff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex d8ab978ed..f905a9bb1 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -80,6 +80,10 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         tree = inline_all_toctrees(self, set(), master, tree, darkgreen, [master])\n         tree['docname'] = master\n         self.env.resolve_references(tree, master, self)\n+        for node in tree.traverse(nodes.table):\n+            if not node.get('number'):\n+                logger.warning(__('no number is assigned for table: %s'), node['ids'][0],\n+                               location=node)\n         self.fix_refuris(tree)\n         return tree\n \ndiff --git a/sphinx/transforms/__init__.py b/sphinx/transforms/__init__.py\nindex f854f1772..1a13315f7 100644\n--- a/sphinx/transforms/__init__.py\n+++ b/sphinx/transforms/__init__.py\n@@ -174,9 +174,12 @@ class AutoNumbering(SphinxTransform):\n \n         for node in self.document.traverse(nodes.Element):\n             if (domain.is_enumerable_node(node) and\n-                    domain.get_numfig_title(node) is not None and\n-                    node['ids'] == []):\n-                self.document.note_implicit_target(node)\n+                    domain.get_numfig_title(node) is not None):\n+                if not node['ids']:\n+                    self.document.note_implicit_target(node)\n+                if 'figtype' in node and node['figtype'] == 'table' and not node.get('number'):\n+                    logger.warning(__('no number is assigned for table: %s'), node['ids'][0],\n+                                   location=node)\n \n \n class SortIds(SphinxTransform):\n", "instance_id": "sphinx-doc__sphinx-8474"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex da5b40a5ef..54d70e39ae 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -903,13 +903,13 @@ class RangeSlider(SliderBase):\n             xy[1] = .25, val[1]\n             xy[2] = .75, val[1]\n             xy[3] = .75, val[0]\n-            xy[4] = .25, val[0]\n+            # xy[4] = .25, val[0]\n         else:\n             xy[0] = val[0], .25\n             xy[1] = val[0], .75\n             xy[2] = val[1], .75\n             xy[3] = val[1], .25\n-            xy[4] = val[0], .25\n+            # xy[4] = val[0], .25\n         self.poly.xy = xy\n         self.valtext.set_text(self._format(val))\n         if self.drawon:\n", "instance_id": "matplotlib__matplotlib-22711"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex bc227d2c4..ca5b4cc8a 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -610,11 +610,14 @@ class PyLinter(\n                         skip_subtrees.append(root)\n                         yield root\n                     else:\n-                        yield from (\n-                            os.path.join(root, file)\n-                            for file in files\n-                            if file.endswith(\".py\")\n-                        )\n+                        # Handle case where a module contains a module of the same name\n+                        for file in files:\n+                            if file.endswith(\".py\"):\n+                                module_path = os.path.join(root, file)\n+                                if not any(\n+                                    module_path.startswith(s) for s in skip_subtrees\n+                                ):\n+                                    yield module_path\n             else:\n                 yield something\n \n", "instance_id": "pylint-dev__pylint-7114"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 737e16cc74..62d44103f8 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -6,7 +6,7 @@\n \n import itertools\n \n-from sympy.core import S, Add, Symbol, Mod\n+from sympy.core import S, Add, Symbol, Mod, Mul\n from sympy.core.function import _coeff_isneg\n from sympy.core.sympify import SympifyError\n from sympy.core.alphabets import greeks\n@@ -1854,7 +1854,8 @@ def _print_PolynomialRingBase(self, expr):\n \n     def _print_Poly(self, poly):\n         cls = poly.__class__.__name__\n-        expr = self._print(poly.as_expr())\n+        monoms, coeffs = zip(*sorted(zip(poly.monoms(), poly.coeffs()), reverse=True))\n+        expr = self._print(Add(*[c * Mul(*[s**e for s, e in zip(poly.gens, monom)]) for monom, c in zip(monoms, coeffs)]))\n         gens = list(map(self._print, poly.gens))\n         domain = \"domain=%s\" % self._print(poly.get_domain())\n \n", "instance_id": "sympy__sympy-14317"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex a024324b..f899e7c8 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3462,11 +3462,12 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             # must be list for .expand_dims\n             expand_dims = list(expand_dims)\n \n-            return (\n-                val.assign_coords(**assign_coords)\n-                .expand_dims(expand_dims)\n-                .stack({new_dim: (variable_dim,) + stacking_dims})\n-            )\n+            stacked = val.assign_coords(**assign_coords).expand_dims(expand_dims)\n+            if stacking_dims:\n+                stacked = stacked.stack({new_dim: (variable_dim,) + stacking_dims})\n+            else:\n+                stacked = stacked.rename({variable_dim: new_dim})\n+            return stacked\n \n         # concatenate the arrays\n         stackable_vars = [ensure_stackable(self[key]) for key in self.data_vars]\n", "instance_id": "pydata__xarray-4094"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex fbb3c7e6..284649f7 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -167,10 +167,10 @@ class RequestHooksMixin(object):\n         if event not in self.hooks:\n             raise ValueError('Unsupported event specified, with event name \"%s\"' % (event))\n \n-        if isinstance(hook, collections.Callable):\n+        if isinstance(hook, collections.abc.Callable):\n             self.hooks[event].append(hook)\n         elif hasattr(hook, '__iter__'):\n-            self.hooks[event].extend(h for h in hook if isinstance(h, collections.Callable))\n+            self.hooks[event].extend(h for h in hook if isinstance(h, collections.abc.Callable))\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n@@ -269,7 +269,6 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n       >>> s = requests.Session()\n       >>> s.send(r)\n       <Response [200]>\n-\n     \"\"\"\n \n     def __init__(self):\n@@ -333,7 +332,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         if isinstance(url, bytes):\n             url = url.decode('utf8')\n         else:\n-            url = unicode(url) if is_py2 else str(url)\n+            url = str(url)\n \n         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n         # `data` etc to work around exceptions from `url_parse`, which\n@@ -695,7 +694,7 @@ class Response(object):\n         chunks = reused_chunks if self._content_consumed else stream_chunks\n \n         if decode_unicode:\n-            chunks = stream_decode_response_unicode(chunks, self)\n+            chunks = (chunk.decode(self.encoding or 'utf-8', errors='replace') for chunk in chunks)\n \n         return chunks\n \n@@ -795,7 +794,7 @@ class Response(object):\n     def json(self, **kwargs):\n         \"\"\"Returns the json-encoded content of a response, if any.\n \n-        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n+        :param **kwargs: Optional arguments that ``json.loads`` takes.\n         \"\"\"\n \n         if not self.encoding and self.content and len(self.content) > 3:\ndiff --git a/requests/utils.py b/requests/utils.py\nindex 8d17b6b2..01a430fd 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -194,7 +194,7 @@ def to_key_val_list(value):\n     if isinstance(value, (str, bytes, bool, int)):\n         raise ValueError('cannot encode objects that are not 2-tuples')\n \n-    if isinstance(value, collections.Mapping):\n+    if isinstance(value, collections.abc.Mapping):\n         value = value.items()\n \n     return list(value)\n", "instance_id": "psf__requests-3362"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex 1f33b9d3ec..65a71f8e48 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -1301,16 +1301,19 @@ class Artist:\n             n = self.cmap.N\n             if np.ma.getmask(data):\n                 return \"[]\"\n-            normed = self.norm(data)\n-            if np.isfinite(normed):\n-                # Midpoints of neighboring color intervals.\n-                neighbors = self.norm.inverse(\n-                    (int(self.norm(data) * n) + np.array([0, 1])) / n)\n-                delta = abs(neighbors - data).max()\n-                g_sig_digits = cbook._g_sig_digits(data, delta)\n-            else:\n-                g_sig_digits = 3  # Consistent with default below.\n-            return \"[{:-#.{}g}]\".format(data, g_sig_digits)\n+            try:\n+                normed = self.norm(data)\n+                if np.isfinite(normed):\n+                    # Midpoints of neighboring color intervals.\n+                    neighbors = self.norm.inverse(\n+                        (int(self.norm(data) * n) + np.array([0, 1])) / n)\n+                    delta = abs(neighbors - data).max()\n+                    g_sig_digits = cbook._g_sig_digits(data, delta)\n+                else:\n+                    g_sig_digits = 3  # Consistent with default below.\n+                return \"[{:-#.{}g}]\".format(data, g_sig_digits)\n+            except ValueError:\n+                return \"[{:-#.{}g}]\".format(data, 3)\n         else:\n             try:\n                 data[0]\n", "instance_id": "matplotlib__matplotlib-22835"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..0e6d615a 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -114,7 +114,9 @@ class Scale:\n         # TODO sometimes we need to handle scalars (e.g. for Line)\n         # but what is the best way to do that?\n         scalar_data = np.isscalar(data)\n-        if scalar_data:\n+        if data.dtype == bool:\n+            data = data.astype(int)\n+        elif scalar_data:\n             trans_data = np.array([data])\n         else:\n             trans_data = data\n@@ -341,6 +343,9 @@ class ContinuousBase(Scale):\n         new._matplotlib_scale = mpl_scale\n \n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n+        if data.dtype == bool:\n+            data = data.astype(int)\n+\n         if prop.normed:\n             if new.norm is None:\n                 vmin, vmax = data.min(), data.max()\n", "instance_id": "mwaskom__seaborn-3190"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 8376b487..39bed38d 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3907,7 +3907,11 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             dataset.\n         \"\"\"\n         merge_result = dataset_update_method(self, other)\n-        return self._replace(inplace=True, **merge_result._asdict())\n+        variables = {\n+            k: v if not is_duck_dask_array(v.data) else v.chunk(v.chunks)\n+            for k, v in merge_result.variables.items()\n+        }\n+        return self._replace(inplace=True, variables=variables, **merge_result._asdict())\n \n     def merge(\n         self,\n", "instance_id": "pydata__xarray-4493"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex af0815d41d..35f177866b 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -2024,6 +2024,9 @@ class Axis(martist.Artist):\n         result = self._set_tick_locations(ticks, minor=minor)\n         if labels is not None:\n             self.set_ticklabels(labels, minor=minor, **kwargs)\n+        else:\n+            # Validate kwargs even if labels are not set\n+            mtext.Text(0, 0, **kwargs)\n         return result\n \n     def _get_tick_boxes_siblings(self, renderer):\n", "instance_id": "matplotlib__matplotlib-24334"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/src/flask/app.py b/src/flask/app.py\nindex f3b2126b..ab25d4c5 100644\n--- a/src/flask/app.py\n+++ b/src/flask/app.py\n@@ -1017,6 +1017,22 @@ class Flask(Scaffold):\n         return self.blueprints.values()\n \n     @setupmethod\n+    def get_domain_for_rule(self, rule: Rule) -> str:\n+        \"\"\"Get the domain or subdomain for a given rule.\"\"\"\n+        if rule.host is not None:\n+            return rule.host\n+        if self.config[\"SERVER_NAME\"] is not None:\n+            return self.config[\"SERVER_NAME\"]\n+        return \"localhost\"\n+\n+    def get_domain_for_rule(self, rule: Rule) -> str:\n+        \"\"\"Get the domain or subdomain for a given rule.\"\"\"\n+        if rule.host is not None:\n+            return rule.host\n+        if self.config[\"SERVER_NAME\"] is not None:\n+            return self.config[\"SERVER_NAME\"]\n+        return \"localhost\"\n+\n     def add_url_rule(\n         self,\n         rule: str,\ndiff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 37a15ff2..d10facbf 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1013,25 +1013,28 @@ def routes_command(sort: str, all_methods: bool) -> None:\n     elif sort == \"methods\":\n         rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n \n+    app = current_app._get_current_object()\n     rule_methods = [\n         \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n         for rule in rules\n     ]\n+    rule_domains = [app.get_domain_for_rule(rule) for rule in rules]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(domain) for domain in rule_domains),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+    for rule, methods, domain in zip(rules, rule_methods, rule_domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n", "instance_id": "pallets__flask-5063"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 3e0cab7d9b..501ec73257 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -994,7 +994,7 @@ def visit_BinOp(self, node):\n                 right = ast.Call(\n                     func=ast.Name(id='Mul', ctx=ast.Load()),\n                     args=[ast.UnaryOp(op=ast.USub(), operand=ast.Num(1)), right],\n-                    keywords=[ast.keyword(arg='evaluate', value=ast.Name(id='False', ctx=ast.Load()))],\n+                    keywords=[ast.keyword(arg='evaluate', value=ast.Constant(value=False))],\n                     starargs=None,\n                     kwargs=None\n                 )\n@@ -1005,7 +1005,7 @@ def visit_BinOp(self, node):\n                     left = ast.Call(\n                     func=ast.Name(id='Pow', ctx=ast.Load()),\n                     args=[left, ast.UnaryOp(op=ast.USub(), operand=ast.Num(1))],\n-                    keywords=[ast.keyword(arg='evaluate', value=ast.Name(id='False', ctx=ast.Load()))],\n+                    keywords=[ast.keyword(arg='evaluate', value=ast.Constant(value=False))],\n                     starargs=None,\n                     kwargs=None\n                 )\n@@ -1013,7 +1013,7 @@ def visit_BinOp(self, node):\n                     right = ast.Call(\n                     func=ast.Name(id='Pow', ctx=ast.Load()),\n                     args=[right, ast.UnaryOp(op=ast.USub(), operand=ast.Num(1))],\n-                    keywords=[ast.keyword(arg='evaluate', value=ast.Name(id='False', ctx=ast.Load()))],\n+                    keywords=[ast.keyword(arg='evaluate', value=ast.Constant(value=False))],\n                     starargs=None,\n                     kwargs=None\n                 )\n@@ -1021,7 +1021,7 @@ def visit_BinOp(self, node):\n             new_node = ast.Call(\n                 func=ast.Name(id=sympy_class, ctx=ast.Load()),\n                 args=[left, right],\n-                keywords=[ast.keyword(arg='evaluate', value=ast.Name(id='False', ctx=ast.Load()))],\n+                keywords=[ast.keyword(arg='evaluate', value=ast.Constant(value=False))],\n                 starargs=None,\n                 kwargs=None\n             )\ndiff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex a3ead157c1..f3b7669e96 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -740,7 +740,7 @@ def _print_Function(self, expr, exp=None):\n                 len(args) == 1 and \\\n                 not self._needs_function_brackets(expr.args[0])\n \n-            inv_trig_table = [\"asin\", \"acos\", \"atan\", \"acot\"]\n+            inv_trig_table = [\"asin\", \"acos\", \"atan\", \"acsc\", \"asec\", \"acot\"]\n \n             # If the function is an inverse trig function, handle the style\n             if func in inv_trig_table:\n", "instance_id": "sympy__sympy-14774"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex 7f181789fd..0f3f40ba88 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -3093,6 +3093,22 @@ def integrate(self, *args, **kwargs):\n         from sympy.integrals import integrate\n         return integrate(self, *args, **kwargs)\n \n+    def _eval_simplify_fractional_exponents(self):\n+        \"\"\"\n+        Simplify expressions with fractional exponents.\n+        \"\"\"\n+        from sympy import collect, Add, Mul, Pow\n+        if not self.has(Pow):\n+            return self\n+        expr = self\n+        if isinstance(expr, Add):\n+            terms = expr.args\n+            collected = collect(expr, [t for t in terms if t.is_Pow and t.exp.is_Rational])\n+            if isinstance(collected, Add):\n+                return collected\n+            return collected.simplify()\n+        return expr\n+\n     def simplify(self, ratio=1.7, measure=None):\n         \"\"\"See the simplify function in sympy.simplify\"\"\"\n         from sympy.simplify import simplify\ndiff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex f1609aa908..99d078b81b 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -527,6 +527,7 @@ def simplify(expr, ratio=1.7, measure=count_ops, fu=False):\n                isinstance(expr.args[0], expr.inverse(argindex=1)):\n                 return simplify(expr.args[0].args[0], ratio=ratio,\n                                 measure=measure, fu=fu)\n+        expr = expr._eval_simplify_fractional_exponents()\n         return expr.func(*[simplify(x, ratio=ratio, measure=measure, fu=fu)\n                          for x in expr.args])\n \n", "instance_id": "sympy__sympy-13146"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0c64748ccd..d4889cd9ad 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1074,7 +1074,10 @@ class CharField(Field):\n     def to_python(self, value):\n         if isinstance(value, str) or value is None:\n             return value\n-        return str(value)\n+        if self._path_callable is not None:\n+            return str(self._path_callable())\n+        else:\n+            return str(value)\n \n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n@@ -1663,7 +1666,12 @@ class FilePathField(Field):\n \n     def __init__(self, verbose_name=None, name=None, path='', match=None,\n                  recursive=False, allow_files=True, allow_folders=False, **kwargs):\n-        self.path, self.match, self.recursive = path, match, recursive\n+        self.match, self.recursive = match, recursive\n+        if callable(path):\n+            self._path_callable = path\n+        else:\n+            self._path_callable = None\n+            self.path = path\n         self.allow_files, self.allow_folders = allow_files, allow_folders\n         kwargs.setdefault('max_length', 100)\n         super().__init__(verbose_name, name, **kwargs)\n@@ -1687,7 +1695,9 @@ class FilePathField(Field):\n \n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n-        if self.path != '':\n+        if self._path_callable is not None:\n+            kwargs['path'] = self._path_callable\n+        elif self.path != '':\n             kwargs['path'] = self.path\n         if self.match is not None:\n             kwargs['match'] = self.match\n", "instance_id": "django__django-10924"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..3cd9d86592 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -90,6 +90,8 @@ class SafeExceptionReporterFilter:\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(k, v) for k, v in enumerate(value))\n             else:\n                 cleansed = value\n         except TypeError:\n", "instance_id": "django__django-12700"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex febaadbb5b..9e94168345 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1180,6 +1180,11 @@ class ManyToManyField(RelatedField):\n         if symmetrical is None:\n             symmetrical = (to == RECURSIVE_RELATIONSHIP_CONSTANT)\n \n+        if symmetrical and related_name is not None:\n+            raise ValueError(\n+                \"Cannot set related_name on symmetrical ManyToManyField.\"\n+            )\n+\n         if through is not None and db_table is not None:\n             raise ValueError(\n                 'Cannot specify a db_table if an intermediary model is used.'\n", "instance_id": "django__django-14730"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 1a55d3d417..cc7c96d6cf 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -764,10 +764,11 @@ class Field(RegisterLookupMixin):\n             if not getattr(cls, self.attname, None):\n                 setattr(cls, self.attname, self.descriptor_class(self))\n         if self.choices is not None:\n-            if not hasattr(cls, 'get_%s_display' % self.name):\n+            display_method_name = 'get_%s_display' % self.name\n+            if not hasattr(cls, display_method_name) or not callable(getattr(cls, display_method_name)):\n                 setattr(\n                     cls,\n-                    'get_%s_display' % self.name,\n+                    display_method_name,\n                     partialmethod(cls._get_FIELD_display, field=self),\n                 )\n \n", "instance_id": "django__django-12284"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..95501cf9d 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -56,8 +56,6 @@ def doctree_read(app: Sphinx, doctree: Node) -> None:\n         env._viewcode_modules = {}  # type: ignore\n     if app.builder.name == \"singlehtml\":\n         return\n-    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n-        return\n \n     def has_tag(modname: str, fullname: str, docname: str, refname: str) -> bool:\n         entry = env._viewcode_modules.get(modname, None)  # type: ignore\n@@ -182,6 +180,9 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    if app.builder.name.startswith(\"epub\") and not env.config.viewcode_enable_epub:\n+        return\n+    highlighter = app.builder.highlighter  # type: ignore\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n \n", "instance_id": "sphinx-doc__sphinx-8721"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 38da1e6ecc..d51d08f3a0 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -125,10 +125,19 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return (\n-            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n-            {\"import %s\" % module},\n-        )\n+        try:\n+            return (\n+                \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n+                {\"import %s\" % module},\n+            )\n+        except KeyError:\n+            # Handle combination of Enum flags\n+            members, _ = enum_class._decompose(self.value)\n+            member_names = \" | \".join(\"%s.%s.%s\" % (module, enum_class.__qualname__, member.name) for member in members)\n+            return (\n+                member_names,\n+                {\"import %s\" % module},\n+            )\n \n \n class FloatSerializer(BaseSimpleSerializer):\n", "instance_id": "django__django-15996"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex d701ff2e..10a326fe 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -425,6 +425,10 @@ class Session(SessionRedirectMixin):\n             If Tuple, ('cert', 'key') pair.\n         \"\"\"\n \n+        if isinstance(method, bytes):\n+            method = method.decode('utf-8')\n+        if isinstance(method, bytes):\n+            method = method.decode('utf-8')\n         method = builtin_str(method)\n \n         # Create the Request.\n", "instance_id": "psf__requests-2317"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex 81cb34bd9f..d88e8ae39f 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -71,13 +71,14 @@ class BaseDatabaseCreation:\n             # We report migrate messages at one level lower than that\n             # requested. This ensures we don't get flooded with messages during\n             # testing (unless you really ask to be flooded).\n-            call_command(\n-                'migrate',\n-                verbosity=max(verbosity - 1, 0),\n-                interactive=False,\n-                database=self.connection.alias,\n-                run_syncdb=True,\n-            )\n+            if router.allow_migrate(self.connection.alias, None):\n+                call_command(\n+                    'migrate',\n+                    verbosity=max(verbosity - 1, 0),\n+                    interactive=False,\n+                    database=self.connection.alias,\n+                    run_syncdb=True,\n+                )\n         finally:\n             if self.connection.settings_dict['TEST']['MIGRATE'] is False:\n                 settings.MIGRATION_MODULES = old_migration_modules\ndiff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..a925b97ef9 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -1,5 +1,5 @@\n from django.apps.registry import Apps\n-from django.db import DatabaseError, models\n+from django.db import DatabaseError, models, router\n from django.utils.functional import classproperty\n from django.utils.timezone import now\n \n@@ -58,16 +58,18 @@ class MigrationRecorder:\n \n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n-        # If the table's there, that's fine - we've never changed its schema\n-        # in the codebase.\n-        if self.has_table():\n-            return\n-        # Make the table\n-        try:\n-            with self.connection.schema_editor() as editor:\n-                editor.create_model(self.Migration)\n-        except DatabaseError as exc:\n-            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n+        # Check if migrations are allowed on this database\n+        if router.allow_migrate(self.connection.alias, self.Migration):\n+            # If the table's there, that's fine - we've never changed its schema\n+            # in the codebase.\n+            if self.has_table():\n+                return\n+            # Make the table\n+            try:\n+                with self.connection.schema_editor() as editor:\n+                    editor.create_model(self.Migration)\n+            except DatabaseError as exc:\n+                raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n     def applied_migrations(self):\n         \"\"\"\n", "instance_id": "django__django-15252"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/printing/lambdarepr.py b/sympy/printing/lambdarepr.py\nindex 8f60434e89..a56571826c 100644\n--- a/sympy/printing/lambdarepr.py\n+++ b/sympy/printing/lambdarepr.py\n@@ -43,6 +43,11 @@ def _print_BooleanTrue(self, expr):\n     def _print_BooleanFalse(self, expr):\n         return \"False\"\n \n+    def _print_Identity(self, expr):\n+        if hasattr(expr, 'shape'):\n+            return \"np.eye(%s)\" % expr.shape[0]\n+        return \"Identity\"\n+\n     def _print_ITE(self, expr):\n         result = [\n             '((', self._print(expr.args[1]),\n@@ -101,6 +106,8 @@ def _print_seq(self, seq, delimiter=', '):\n             return \"\"\n \n     def _print_Function(self, e):\n+        if e.func.__name__ == 'Identity':\n+            return self._print_Identity(e)\n         func_name = e.func.__name__\n \n         nstr = self._numexpr_functions.get(func_name, None)\ndiff --git a/sympy/printing/printer.py b/sympy/printing/printer.py\nindex 2f1a183376..e54a42f74b 100644\n--- a/sympy/printing/printer.py\n+++ b/sympy/printing/printer.py\n@@ -285,6 +285,10 @@ def _print(self, expr, **kwargs):\n                 printmethod = '_print_' + cls.__name__\n                 if hasattr(self, printmethod):\n                     return getattr(self, printmethod)(expr, **kwargs)\n+            # Handle unsupported expressions that might be misinterpreted\n+            if isinstance(expr, Basic) and expr.is_Identity:\n+                return self._print_Identity(expr)\n+\n             # Unknown object, fall back to the emptyPrinter.\n             return self.emptyPrinter(expr)\n         finally:\n", "instance_id": "sympy__sympy-17022"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 2c4a33616..18998e2f6 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,7 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+            proba[:, class_idx] = np.asarray(calibrator.predict(this_pred)).flatten()\n \n         # Normalize the probabilities\n         if n_classes == 2:\n", "instance_id": "scikit-learn__scikit-learn-25500"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\nindex 30a07a7b59..cbd67261f7 100644\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -43,6 +43,7 @@\n     \"atanh\": \"atanh\",\n     \"floor\": \"floor\",\n     \"ceiling\": \"ceil\",\n+    \"sinc\": \"sinc\",\n }\n \n # These are the core reserved words in the C language. Taken from:\n@@ -250,6 +251,11 @@ def _print_For(self, expr):\n \n     def _print_sign(self, func):\n         return '((({0}) > 0) - (({0}) < 0))'.format(self._print(func.args[0]))\n+        from sympy import Piecewise, sin, Ne\n+        x = func.args[0]\n+        piecewise_expr = Piecewise((sin(x)/x, Ne(x, 0)), (1, True))\n+        return self._print(piecewise_expr)\n+        return '((({0}) > 0) - (({0}) < 0))'.format(self._print(func.args[0]))\n \n     def indent_code(self, code):\n         \"\"\"Accepts a string of code or a list of code lines\"\"\"\n", "instance_id": "sympy__sympy-11400"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..b31c893df 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -667,7 +667,7 @@ class AssertionRewriter(ast.NodeVisitor):\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n         expect_docstring = doc is None\n-        if doc is not None and self.is_rewrite_disabled(doc):\n+        if doc is not None and isinstance(doc, str) and self.is_rewrite_disabled(doc):\n             return\n         pos = 0\n         item = None\n", "instance_id": "pytest-dev__pytest-11143"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/requests/exceptions.py b/requests/exceptions.py\nindex 89135a80..312d069b 100644\n--- a/requests/exceptions.py\n+++ b/requests/exceptions.py\n@@ -97,3 +97,10 @@ class StreamConsumedError(RequestException, TypeError):\n \n class RetryError(RequestException):\n     \"\"\"Custom retries logic failed\"\"\"\n+from .packages.urllib3.exceptions import DecodeError as BaseDecodeError, TimeoutError as BaseTimeoutError\n+\n+class DecodeError(RequestException, BaseDecodeError):\n+    \"\"\"Failed to decode response content\"\"\"\n+\n+class TimeoutError(RequestException, BaseTimeoutError):\n+    \"\"\"The request timed out.\"\"\"\n", "instance_id": "psf__requests-2674"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 456681ab2..535c02ca2 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -573,8 +573,8 @@ def _get_assertion_exprs(src: bytes) -> Dict[int, str]:\n         assert_lineno = None\n         seen_lines = set()\n \n-    tokens = tokenize.tokenize(io.BytesIO(src).readline)\n-    for tp, source, (lineno, offset), _, line in tokens:\n+    tokens = list(tokenize.tokenize(io.BytesIO(src).readline))\n+    for i, (tp, source, (lineno, offset), _, line) in enumerate(tokens):\n         if tp == tokenize.NAME and source == \"assert\":\n             assert_lineno = lineno\n         elif assert_lineno is not None:\n@@ -596,11 +596,14 @@ def _get_assertion_exprs(src: bytes) -> Dict[int, str]:\n                 # multi-line assert with message\n                 elif lineno in seen_lines:\n                     lines[-1] = lines[-1][:offset]\n-                # multi line assert with escapd newline before message\n+                # multi line assert with escaped newline before message\n                 else:\n                     lines.append(line[:offset])\n                 _write_and_reset()\n             elif tp in {tokenize.NEWLINE, tokenize.ENDMARKER}:\n+                # Check if the next token is a decorator or function definition\n+                if i + 1 < len(tokens) and tokens[i + 1].type == tokenize.OP and tokens[i +1].string == \"@\":\n+                    continue\n                 _write_and_reset()\n             elif lines and lineno not in seen_lines:\n                 lines.append(line)\n", "instance_id": "pytest-dev__pytest-9359"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/xarray/core/groupby.py b/xarray/core/groupby.py\nindex 8a097251..af5abd9a 100644\n--- a/xarray/core/groupby.py\n+++ b/xarray/core/groupby.py\n@@ -436,7 +436,7 @@ class GroupBy(SupportsArithmetic):\n         return zip(self._unique_coord.values, self._iter_grouped())\n \n     def __repr__(self):\n-        return \"{}, grouped over {!r} \\n{!r} groups with labels {}.\".format(\n+        return \"{}, grouped over {!r}\\n{!r} groups with labels {}.\".format(\n             self.__class__.__name__,\n             self._unique_coord.name,\n             self._unique_coord.size,\n", "instance_id": "pydata__xarray-5131"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "django__django-13933"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\nindex b7d9d26389..147328883a 100644\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -1,10 +1,13 @@\n import threading\n import warnings\n import weakref\n+import logging\n \n from django.utils.deprecation import RemovedInDjango40Warning\n from django.utils.inspect import func_accepts_kwargs\n \n+logger = logging.getLogger(__name__)\n+\n \n def _make_id(target):\n     if hasattr(target, '__func__'):\n@@ -208,9 +211,9 @@ class Signal:\n             try:\n                 response = receiver(signal=self, sender=sender, **named)\n             except Exception as err:\n-                responses.append((receiver, err))\n-            else:\n-                responses.append((receiver, response))\n+                response = err\n+                logger.exception('Error in signal handler')\n+            responses.append((receiver, response))\n         return responses\n \n     def _clear_dead_receivers(self):\n", "instance_id": "django__django-13768"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py\nindex 3903e4c98c..d28ecf6656 100644\n--- a/django/contrib/admin/views/autocomplete.py\n+++ b/django/contrib/admin/views/autocomplete.py\n@@ -26,8 +26,7 @@ class AutocompleteJsonView(BaseListView):\n         context = self.get_context_data()\n         return JsonResponse({\n             'results': [\n-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n-                for obj in context['object_list']\n+                self.serialize_result(obj, to_field_name) for obj in context['object_list']\n             ],\n             'pagination': {'more': context['page_obj'].has_next()},\n         })\n@@ -45,6 +44,9 @@ class AutocompleteJsonView(BaseListView):\n             qs = qs.distinct()\n         return qs\n \n+    def serialize_result(self, obj, to_field_name):\n+        \"\"\"Convert the object to a dictionary representation.\"\"\"\n+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n     def process_request(self, request):\n         \"\"\"\n         Validate request integrity, extract and return request parameters.\n", "instance_id": "django__django-14752"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 11aebbc59f..7ef90e5a54 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -244,7 +244,10 @@ def _entry(self, i, j, **kwargs):\n                 break\n             else:\n                 j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+        if isinstance(self.blocks, Matrix):\n+            return self.blocks[i, j]\n+        else:\n+            return self.blocks[row_block, col_block][i, j]\n \n     @property\n     def is_Identity(self):\n@@ -301,7 +304,10 @@ def blocks(self):\n         data = [[mats[i] if i == j else ZeroMatrix(mats[i].rows, mats[j].cols)\n                         for j in range(len(mats))]\n                         for i in range(len(mats))]\n-        return ImmutableDenseMatrix(data)\n+        if len(mats) == 1:\n+            return mats[0]\n+        else:\n+            return ImmutableDenseMatrix(data)\n \n     @property\n     def shape(self):\n", "instance_id": "sympy__sympy-18621"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "django__django-15695"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c957ffa564..83582d0cea 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -58,6 +58,12 @@ class Q(tree.Node):\n         obj.add(other, conn)\n         return obj\n \n+    def __ror__(self, other):\n+        return self._combine(other, self.OR)\n+\n+    def __rand__(self, other):\n+        return self._combine(other, self.AND)\n+\n     def __or__(self, other):\n         return self._combine(other, self.OR)\n \n", "instance_id": "django__django-14017"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex 6c1fcfefb4..4a58ac76f4 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -3075,7 +3075,10 @@ def together(self, *args, **kwargs):\n     def apart(self, x=None, **args):\n         \"\"\"See the apart function in sympy.polys\"\"\"\n         from sympy.polys import apart\n-        return apart(self, x, **args)\n+        if x is None:\n+            return apart(self, **args)\n+        else:\n+            return apart(self, x, **args)\n \n     def ratsimp(self):\n         \"\"\"See the ratsimp function in sympy.simplify\"\"\"\n", "instance_id": "sympy__sympy-12236"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex e4ddc8f017..f86f2ffbad 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -396,6 +396,8 @@ def display_for_field(value, field, empty_value_display):\n         return formats.number_format(value, field.decimal_places)\n     elif isinstance(field, (models.IntegerField, models.FloatField)):\n         return formats.number_format(value)\n+    elif isinstance(field, models.JSONField):\n+        return field.value_to_string(None, value)\n     elif isinstance(field, models.FileField) and value:\n         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n     else:\n", "instance_id": "django__django-12308"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/template/backends/django.py b/django/template/backends/django.py\nindex 218e5e0bc1..4a3e829475 100644\n--- a/django/template/backends/django.py\n+++ b/django/template/backends/django.py\n@@ -42,8 +42,22 @@ class DjangoTemplates(BaseEngine):\n         \"\"\"\n         libraries = get_installed_libraries()\n         libraries.update(custom_libraries)\n+        self.check_for_template_tags_with_the_same_name(libraries)\n         return libraries\n \n+    def check_for_template_tags_with_the_same_name(self, libraries):\n+        \"\"\"\n+        Check for duplicate template tag library names and raise an error if found.\n+        \"\"\"\n+        seen = {}\n+        for name, path in libraries.items():\n+            if name in seen:\n+                raise InvalidTemplateLibrary(\n+                    f\"'{name}' is used for multiple template tag modules: \"\n+                    f\"'{seen[name]}', '{path}'\"\n+                )\n+            seen[name] = path\n+\n \n class Template:\n     def __init__(self, template, backend):\n", "instance_id": "django__django-15790"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex ccc2223a5f..ebca8b07e9 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -301,7 +301,7 @@ class ManyToManyRel(ForeignObjectRel):\n \n         if through_fields and not through:\n             raise ValueError(\"Cannot specify through_fields without a through model\")\n-        self.through_fields = through_fields\n+        self.through_fields = make_hashable(through_fields)\n \n         self.symmetrical = symmetrical\n         self.db_constraint = db_constraint\n", "instance_id": "django__django-14672"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..d287dd04 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -148,8 +148,11 @@ class Request(object):\n \n         hooks = hooks or {}\n \n-        for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+        for event, hook in list(hooks.items()):\n+            if isinstance(hook, list):\n+                self.hooks[event].extend(hook)\n+            else:\n+                self.register_hook(event=event, hook=hook)\n \n         #: Session.\n         self.session = session\n", "instance_id": "psf__requests-863"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 583c2be647..0d5d6186b8 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -20,6 +20,7 @@ from django.core.signals import request_finished\n from django.dispatch import Signal\n from django.utils.functional import cached_property\n from django.utils.version import get_version_tuple\n+from django.conf import settings\n \n autoreload_started = Signal()\n file_changed = Signal()\n@@ -113,7 +114,8 @@ def iter_all_python_module_files():\n     # aren't loaded on the fly.\n     keys = sorted(sys.modules)\n     modules = tuple(m for m in map(sys.modules.__getitem__, keys) if not isinstance(m, weakref.ProxyTypes))\n-    return iter_modules_and_files(modules, frozenset(_error_files))\n+    template_dirs = [Path(d).resolve() for d in settings.TEMPLATES[0]['DIRS']]\n+    return iter_modules_and_files(modules, frozenset(_error_files).union(template_dirs))\n \n \n @functools.lru_cache(maxsize=1)\n", "instance_id": "django__django-15388"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/geometry/util.py b/sympy/geometry/util.py\nindex d32adc3066..d267cb4868 100644\n--- a/sympy/geometry/util.py\n+++ b/sympy/geometry/util.py\n@@ -17,6 +17,8 @@\n     is_sequence, range, string_types, ordered)\n from sympy.core.containers import OrderedSet\n from .point import Point, Point2D\n+from .entity import GeometryEntity\n+from sympy.functions.elementary.miscellaneous import sqrt\n \n \n def find(x, equation):\n@@ -286,6 +288,7 @@ def closest_points(*args):\n     from collections import deque\n     from math import hypot, sqrt as _sqrt\n     from sympy.functions.elementary.miscellaneous import sqrt\n+    from sympy.functions.elementary.miscellaneous import sqrt\n \n     p = [Point2D(i) for i in set(args)]\n     if len(p) < 2:\n@@ -565,21 +568,29 @@ def idiff(eq, y, x, n=1):\n     sympy.core.function.diff: explicitly differentiates wrt symbols\n \n     \"\"\"\n+    from sympy import Eq\n+\n+    if isinstance(eq, Eq):\n+        eq = eq.lhs - eq.rhs\n+\n     if is_sequence(y):\n         dep = set(y)\n         y = y[0]\n-    elif isinstance(y, Symbol):\n+    elif isinstance(y, (Symbol, Function)):\n         dep = {y}\n     else:\n         raise ValueError(\"expecting x-dependent symbol(s) but got: %s\" % y)\n \n     f = dict([(s, Function(\n         s.name)(x)) for s in eq.free_symbols if s != x and s in dep])\n-    dydx = Function(y.name)(x).diff(x)\n+    dydx = Function(y.name if isinstance(y, Symbol) else y.func.__name__)(x).diff(x)\n     eq = eq.subs(f)\n     derivs = {}\n     for i in range(n):\n-        yp = solve(eq.diff(x), dydx)[0].subs(derivs)\n+        yp = solve(eq.diff(x), dydx)\n+        if not yp:\n+            raise ValueError(\"Could not solve for the derivative.\")\n+        yp = yp[0].subs(derivs)\n         if i == n - 1:\n             return yp.subs([(v, k) for k, v in f.items()])\n         derivs[dydx] = yp\n", "instance_id": "sympy__sympy-15678"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "scikit-learn__scikit-learn-13142"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "django__django-11630"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex da2e919375..ee0a55e8b8 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -364,6 +364,12 @@ def eval(cls, arg):\n             x = arg.args[0]\n             return sqrt(1 - 1 / x**2)\n \n+        if arg.is_Rational:\n+            return sin(arg * pi).simplify()\n+\n+        if arg.is_Rational:\n+            return sin(arg * pi).simplify()\n+\n     @staticmethod\n     @cacheit\n     def taylor_term(n, x, *previous_terms):\ndiff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex 421bfba0a7..b7cc127ead 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -13,7 +13,7 @@\n from sympy.core.rules import Transform\n from sympy.core.evaluate import global_evaluate\n from sympy.functions import (\n-    gamma, exp, sqrt, log, exp_polar, piecewise_fold)\n+    gamma, exp, sqrt, log, exp_polar, piecewise_fold, sin, cos)\n from sympy.core.sympify import _sympify\n from sympy.functions.elementary.exponential import ExpBase\n from sympy.functions.elementary.hyperbolic import HyperbolicFunction\n@@ -536,6 +536,15 @@ def simplify(expr, ratio=1.7, measure=count_ops, rational=False, inverse=False):\n         if not expr.args:  # simplified to atomic\n             return expr\n \n+    if expr.has(sin, cos) and expr.is_Rational:\n+        expr = expr.rewrite(sin, cos).simplify()\n+\n+    if expr.has(sin, cos) and expr.is_Rational:\n+        expr = expr.rewrite(sin, cos).simplify()\n+\n+    if expr.has(sin, cos) and expr.is_Rational:\n+        expr = expr.rewrite(sin, cos).simplify()\n+\n     if not isinstance(expr, (Add, Mul, Pow, ExpBase)):\n         return expr.func(*[simplify(x, ratio=ratio, measure=measure, rational=rational, inverse=inverse)\n                          for x in expr.args])\n", "instance_id": "sympy__sympy-15346"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex fead6497b8..478a43361f 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1010,7 +1010,7 @@ def visit_BinOp(self, node):\n                 right = ast.Call(\n                     func=ast.Name(id='Mul', ctx=ast.Load()),\n                     args=[ast.UnaryOp(op=ast.USub(), operand=ast.Num(1)), right],\n-                    keywords=[ast.keyword(arg='evaluate', value=ast.Name(id='False', ctx=ast.Load()))],\n+                    keywords=[ast.keyword(arg='evaluate', value=ast.Constant(value=False))],\n                     starargs=None,\n                     kwargs=None\n                 )\n@@ -1021,7 +1021,7 @@ def visit_BinOp(self, node):\n                     left = ast.Call(\n                     func=ast.Name(id='Pow', ctx=ast.Load()),\n                     args=[left, ast.UnaryOp(op=ast.USub(), operand=ast.Num(1))],\n-                    keywords=[ast.keyword(arg='evaluate', value=ast.Name(id='False', ctx=ast.Load()))],\n+                    keywords=[ast.keyword(arg='evaluate', value=ast.Constant(value=False))],\n                     starargs=None,\n                     kwargs=None\n                 )\n@@ -1029,7 +1029,7 @@ def visit_BinOp(self, node):\n                     right = ast.Call(\n                     func=ast.Name(id='Pow', ctx=ast.Load()),\n                     args=[right, ast.UnaryOp(op=ast.USub(), operand=ast.Num(1))],\n-                    keywords=[ast.keyword(arg='evaluate', value=ast.Name(id='False', ctx=ast.Load()))],\n+                    keywords=[ast.keyword(arg='evaluate', value=ast.Constant(value=False))],\n                     starargs=None,\n                     kwargs=None\n                 )\n@@ -1037,7 +1037,7 @@ def visit_BinOp(self, node):\n             new_node = ast.Call(\n                 func=ast.Name(id=sympy_class, ctx=ast.Load()),\n                 args=[left, right],\n-                keywords=[ast.keyword(arg='evaluate', value=ast.Name(id='False', ctx=ast.Load()))],\n+                keywords=[ast.keyword(arg='evaluate', value=ast.Constant(value=False))],\n                 starargs=None,\n                 kwargs=None\n             )\ndiff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 901918674a..a96d04302c 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -614,9 +614,9 @@ def _print_BasisDependent(self, expr):\n \n     def _print_Indexed(self, expr):\n         tex_base = self._print(expr.base)\n-        tex = '{'+tex_base+'}'+'_{%s}' % ','.join(\n-            map(self._print, expr.indices))\n-        return tex\n+        indices = [self._print(index) for index in expr.indices]\n+        tex = '{' + tex_base + '}' + '_{' + ','.join(indices) + '}'\n+        return tex.replace('_{_', '_{')\n \n     def _print_IndexedBase(self, expr):\n         return self._print(expr.label)\n", "instance_id": "sympy__sympy-15609"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\nindex 4c2ffd81e1..0fe93861c0 100644\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -65,8 +65,8 @@ def __init__(self, settings={}):\n \n     def _print_Pow(self, expr):\n         PREC = precedence(expr)\n-        return '%s^%s' % (self.parenthesize(expr.base, PREC),\n-                          self.parenthesize(expr.exp, PREC))\n+        return '(%s)^%s' % (self.parenthesize(expr.base, PREC),\n+                            self.parenthesize(expr.exp, PREC))\n \n     def _print_Mul(self, expr):\n         PREC = precedence(expr)\n@@ -91,6 +91,21 @@ def _print_list(self, expr):\n     _print_tuple = _print_list\n     _print_Tuple = _print_list\n \n+    def _print_Derivative(self, expr):\n+        if expr.func.__name__ in self.known_functions:\n+            cond_mfunc = self.known_functions[expr.func.__name__]\n+            for cond, mfunc in cond_mfunc:\n+                if cond(*expr.args):\n+                    return \"%s[%s]\" % (mfunc, self.stringify(expr.args, \", \"))\n+        return expr.func.__name__ + \"[%s]\" % self.stringify(expr.args, \", \")\n+\n+    def _print_Derivative(self, expr):\n+        return \"D[%s]\" % (self.stringify(expr.args, \", \"))\n+\n+    def _print_Float(self, expr):\n+        res = str(expr)\n+        return res.replace('e', '*^')\n+\n     def _print_Function(self, expr):\n         if expr.func.__name__ in self.known_functions:\n             cond_mfunc = self.known_functions[expr.func.__name__]\n", "instance_id": "sympy__sympy-12171"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 63ca817355..12656a0b76 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -6,7 +6,7 @@ from itertools import chain\n from django.core.exceptions import EmptyResultSet, FieldError\n from django.db import DatabaseError, NotSupportedError\n from django.db.models.constants import LOOKUP_SEP\n-from django.db.models.expressions import OrderBy, Random, RawSQL, Ref, Value\n+from django.db.models.expressions import OrderBy, Random, RawSQL, Ref, Value, Subquery\n from django.db.models.functions import Cast\n from django.db.models.query_utils import Q, select_related_descend\n from django.db.models.sql.constants import (\n@@ -117,14 +117,24 @@ class SQLCompiler:\n             # by reference.\n             if expr in ref_sources:\n                 continue\n-            cols = expr.get_group_by_cols()\n-            for col in cols:\n-                expressions.append(col)\n+            if isinstance(expr, Subquery):\n+                # Exclude subquery annotations from GROUP BY if they are not explicitly required\n+                if expr in self.annotation_select.values():\n+                    expressions.append(expr)\n+            else:\n+                cols = expr.get_group_by_cols()\n+                for col in cols:\n+                    expressions.append(col)\n         for expr, (sql, params, is_ref) in order_by:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\n             if not is_ref:\n-                expressions.extend(expr.get_group_by_cols())\n+                if isinstance(expr, Subquery):\n+                    # Exclude subquery annotations from GROUP BY if they are not explicitly required\n+                    if expr in self.query.annotation_select.values():\n+                        expressions.append(expr)\n+                else:\n+                    expressions.extend(expr.get_group_by_cols())\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n             expressions.append(expr)\n", "instance_id": "django__django-12589"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "django__django-10914"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c978c47be..626e67ef36 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -213,16 +213,25 @@ def __add__(self, other):\n         sympy.geometry.point.Point.translate\n \n         \"\"\"\n-        try:\n+        if isinstance(other, Point):\n+            s, o = Point._normalize_dimension(self, other)\n+        elif isinstance(other, (int, float, sympify(0).__class__)):\n+            raise ValueError(\"Cannot add a Point and a number directly.\")\n+        elif isinstance(other, Expr) and other.is_Mul:\n+            scalar, point = other.as_coeff_Mul()\n+            if isinstance(point, Point):\n+                s, o = Point._normalize_dimension(self, Point([scalar * x for x in point.args], evaluate=False))\n+            else:\n+                raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n+        else:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n-        except TypeError:\n-            raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n \n         coords = [simplify(a + b) for a, b in zip(s, o)]\n         return Point(coords, evaluate=False)\n \n-    def __contains__(self, item):\n-        return item in self.args\n+    def __radd__(self, other):\n+        \"\"\"Right-hand addition to handle cases like number + Point.\"\"\"\n+        return self.__add__(other)\n \n     def __div__(self, divisor):\n         \"\"\"Divide point's coordinates by a factor.\"\"\"\n", "instance_id": "sympy__sympy-17655"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 29bd46798..2c9c98e7d 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -175,14 +175,15 @@ class TextReporter(BaseReporter):\n         self._template = template\n \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        arguments = re.findall(r\"\\{([^{}]+?)(:.*)?\\}\", template)\n         for argument in arguments:\n-            if argument[0] not in MESSAGE_FIELDS:\n+            arg_name = argument[0].strip()\n+            if arg_name not in MESSAGE_FIELDS:\n                 warnings.warn(\n-                    f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n+                    f\"Don't recognize the argument '{arg_name}' in the --msg-template. \"\n                     \"Are you sure it is supported on the current version of pylint?\"\n                 )\n-                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n+                template = re.sub(r\"\\{\" + re.escape(argument[0]) + r\"(:.*?)?\\}\", \"\", template)\n         self._fixed_template = template\n \n     def write_message(self, msg: Message) -> None:\n", "instance_id": "pylint-dev__pylint-7993"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..c043070c9a 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -707,6 +707,8 @@ class Poly3DCollection(PolyCollection):\n             if any(len(np.shape(vert)) != 2 for vert in verts):\n                 raise ValueError('verts must be a list of (N, 3) array-like')\n         self.set_zsort(zsort)\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n         self._codes3d = None\n \n     _zsort_functions = {\n@@ -765,6 +767,8 @@ class Poly3DCollection(PolyCollection):\n         self._facecolor3d = PolyCollection.get_facecolor(self)\n         self._edgecolor3d = PolyCollection.get_edgecolor(self)\n         self._alpha3d = PolyCollection.get_alpha(self)\n+        self._facecolors2d = self._facecolor3d\n+        self._edgecolors2d = self._edgecolor3d\n         self.stale = True\n \n     def set_sort_zpos(self, val):\n", "instance_id": "matplotlib__matplotlib-23562"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 69df976b8b..812acde6be 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -1061,6 +1061,19 @@ class Derivative(Expr):\n     >>> from sympy.abc import x, y\n     >>> f, g = symbols('f g', cls=Function)\n \n+    is_Derivative = True\n+\n+    @property\n+    def kind(self):\n+        from sympy.core.kind import UndefinedKind, MatrixKind, NumberKind\n+        expr_kind = self.expr.kind\n+        if expr_kind is UndefinedKind:\n+            return UndefinedKind\n+        for var in self.variables:\n+            if var.kind is UndefinedKind:\n+                return UndefinedKind\n+        return MatrixKind(NumberKind) if expr_kind is MatrixKind else expr_kind\n+\n     >>> Derivative(x**2, x, evaluate=True)\n     2*x\n \n", "instance_id": "sympy__sympy-21614"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 984398c760..d55f4cd112 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -299,6 +299,10 @@ def __new__(cls, b, e, evaluate=None):\n                 return b\n             elif e == -1 and not b:\n                 return S.ComplexInfinity\n+            elif e.is_negative and b.is_zero:\n+                return S.ComplexInfinity\n+            elif e.is_negative and b.is_zero:\n+                return S.ComplexInfinity\n             # Only perform autosimplification if exponent or base is a Symbol or number\n             elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and\\\n                 e.is_integer and _coeff_isneg(b):\n", "instance_id": "sympy__sympy-20212"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 1aa0ee01a2..735dbba529 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -389,7 +389,26 @@ def translate(s):\n         return ci\n \n     _print_MatrixSymbol = _print_Symbol\n+    _print_IndexedBase = _print_Symbol\n+\n+    def _print_Indexed(self, expr):\n+        x = self.dom.createElement('apply')\n+        x.appendChild(self._print(expr.base))\n+        for index in expr.indices:\n+            x.appendChild(self._print(index))\n+        return x\n     _print_RandomSymbol = _print_Symbol\n+    _print_IndexedBase = _print_Symbol\n+\n+    def _print_Indexed(self, expr):\n+        mrow = self.dom.createElement('mrow')\n+        mrow.appendChild(self._print(expr.base))\n+        for index in expr.indices:\n+            sub = self.dom.createElement('msub')\n+            sub.appendChild(self._print(expr.base))\n+            sub.appendChild(self._print(index))\n+            mrow.appendChild(sub)\n+        return mrow\n \n     def _print_Pow(self, e):\n         # Here we use root instead of power if the exponent is the reciprocal of an integer\n@@ -625,12 +644,18 @@ def _print_MatrixBase(self, m):\n                 y.appendChild(self._print(m[i, j]))\n                 x.appendChild(y)\n             table.appendChild(x)\n-        if self._settings[\"mat_delim\"] == '':\n-            return table\n         brac = self.dom.createElement('mfenced')\n-        if self._settings[\"mat_delim\"] == \"[\":\n+        if self._settings[\"mat_delim\"] == '[':\n             brac.setAttribute('open', '[')\n             brac.setAttribute('close', ']')\n+        elif self._settings[\"mat_delim\"] == '(':\n+            brac.setAttribute('open', '(')\n+            brac.setAttribute('close', ')')\n+        elif self._settings[\"mat_delim\"] == '{':\n+            brac.setAttribute('open', '{')\n+            brac.setAttribute('close', '}')\n+        else:\n+            return table\n         brac.appendChild(table)\n         return brac\n \n@@ -1028,23 +1053,17 @@ def _print_Tuple(self, e):\n     def _print_Interval(self, i):\n         mrow = self.dom.createElement('mrow')\n         brac = self.dom.createElement('mfenced')\n-        if i.start == i.end:\n-            # Most often, this type of Interval is converted to a FiniteSet\n-            brac.setAttribute('open', '{')\n-            brac.setAttribute('close', '}')\n-            brac.appendChild(self._print(i.start))\n+        if i.left_open:\n+            brac.setAttribute('open', '(')\n         else:\n-            if i.left_open:\n-                brac.setAttribute('open', '(')\n-            else:\n-                brac.setAttribute('open', '[')\n+            brac.setAttribute('open', '[')\n \n-            if i.right_open:\n-                brac.setAttribute('close', ')')\n-            else:\n-                brac.setAttribute('close', ']')\n-            brac.appendChild( self._print(i.start))\n-            brac.appendChild( self._print(i.end))\n+        if i.right_open:\n+            brac.setAttribute('close', ')')\n+        else:\n+            brac.setAttribute('close', ']')\n+        brac.appendChild(self._print(i.start))\n+        brac.appendChild(self._print(i.end))\n \n         mrow.appendChild(brac)\n         return mrow\n@@ -1058,7 +1077,23 @@ def _print_Abs(self, expr, exp=None):\n         mrow.appendChild(x)\n         return mrow\n \n-    _print_Determinant = _print_Abs\n+    def _print_Abs(self, expr, exp=None):\n+        mrow = self.dom.createElement('mrow')\n+        x = self.dom.createElement('mfenced')\n+        x.setAttribute('open', '|')\n+        x.setAttribute('close', '|')\n+        x.appendChild(self._print(expr.args[0]))\n+        mrow.appendChild(x)\n+        return mrow\n+\n+    def _print_Determinant(self, expr, exp=None):\n+        mrow = self.dom.createElement('mrow')\n+        x = self.dom.createElement('mfenced')\n+        x.setAttribute('open', '|')\n+        x.setAttribute('close', '|')\n+        x.appendChild(self._print(expr.args[0]))\n+        mrow.appendChild(x)\n+        return mrow\n \n     def _print_re_im(self, c, expr):\n         mrow = self.dom.createElement('mrow')\n@@ -1109,6 +1144,21 @@ def _print_Complement(self, expr):\n     def _print_SymmetricDifference(self, expr):\n         return self._print_SetOp(expr, '&#x2206;')\n \n+    def _print_Union(self, expr):\n+        return self._print_SetOp(expr, '&#x222A;')\n+\n+    def _print_Intersection(self, expr):\n+        return self._print_SetOp(expr, '&#x2229;')\n+\n+    def _print_Complement(self, expr):\n+        return self._print_SetOp(expr, '&#x2216;')\n+\n+    def _print_SymmetricDifference(self, expr):\n+        return self._print_SetOp(expr, '&#x2206;')\n+\n+    def _print_FiniteSet(self, s):\n+        return self._print_set(s.args)\n+\n     def _print_FiniteSet(self, s):\n         return self._print_set(s.args)\n \n@@ -1123,6 +1173,8 @@ def _print_set(self, s):\n \n     _print_frozenset = _print_set\n \n+    _print_frozenset = _print_set\n+\n     def _print_LogOp(self, args, symbol):\n         mrow = self.dom.createElement('mrow')\n         if args[0].is_Boolean and not args[0].is_Not:\n@@ -1235,20 +1287,19 @@ def _print_EmptySet(self, e):\n \n \n     def _print_floor(self, e):\n-        mrow =  self.dom.createElement('mrow')\n+        mrow = self.dom.createElement('mrow')\n         x = self.dom.createElement('mfenced')\n-        x.setAttribute('open', u'\\u230A')\n-        x.setAttribute('close', u'\\u230B')\n+        x.setAttribute('open', '&#8970;')\n+        x.setAttribute('close', '&#8971;')\n         x.appendChild(self._print(e.args[0]))\n         mrow.appendChild(x)\n         return mrow\n \n-\n     def _print_ceiling(self, e):\n-        mrow =  self.dom.createElement('mrow')\n+        mrow = self.dom.createElement('mrow')\n         x = self.dom.createElement('mfenced')\n-        x.setAttribute('open', u'\\u2308')\n-        x.setAttribute('close', u'\\u2309')\n+        x.setAttribute('open', '&#8968;')\n+        x.setAttribute('close', '&#8969;')\n         x.appendChild(self._print(e.args[0]))\n         mrow.appendChild(x)\n         return mrow\n", "instance_id": "sympy__sympy-16106"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "django__django-14915"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/pylint/config/config_initialization.py b/pylint/config/config_initialization.py\nindex 24e453a73..dc3bd41f2 100644\n--- a/pylint/config/config_initialization.py\n+++ b/pylint/config/config_initialization.py\n@@ -82,7 +82,9 @@ def _config_initialization(\n     if unrecognized_options:\n         msg = \", \".join(unrecognized_options)\n         linter.add_message(\"unrecognized-option\", line=0, args=msg)\n-        raise _UnrecognizedOptionError(options=unrecognized_options)\n+        print(f\"Error: Unrecognized option(s) found: {', '.join(unrecognized_options)}\", file=sys.stderr)\n+        print(linter.help(), file=sys.stderr)\n+        sys.exit(32)\n \n     # Set the current module to configuration as we don't know where\n     # the --load-plugins key is coming from\ndiff --git a/pylint/config/exceptions.py b/pylint/config/exceptions.py\nindex 74a001c24..ee99103f5 100644\n--- a/pylint/config/exceptions.py\n+++ b/pylint/config/exceptions.py\n@@ -16,7 +16,7 @@ class _UnrecognizedOptionError(Exception):\n \n     def __init__(self, options: list[str], *args: object) -> None:\n         self.options = options\n-        super().__init__(*args)\n+        super().__init__(f\"Unrecognized option(s): {', '.join(options)}\", *args)\n \n \n class ArgumentPreprocessingError(Exception):\n", "instance_id": "pylint-dev__pylint-6506"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..606cb4a156 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -9,6 +9,7 @@ import functools\n import inspect\n import re\n import string\n+from functools import partial\n from importlib import import_module\n from urllib.parse import quote\n \n@@ -31,7 +32,14 @@ from .utils import get_callable\n \n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n-        self.func = func\n+        if isinstance(func, partial):\n+            self.func = func.func\n+            self.partial_args = func.args\n+            self.partial_kwargs = func.keywords\n+        else:\n+            self.func = func\n+            self.partial_args = ()\n+            self.partial_kwargs = {}\n         self.args = args\n         self.kwargs = kwargs\n         self.url_name = url_name\n@@ -59,10 +67,16 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n-        return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n-            self.app_names, self.namespaces, self.route,\n-        )\n+        if self.partial_args or self.partial_kwargs:\n+            return \"ResolverMatch(func=%s, args=%s, kwargs=%s, partial_args=%s, partial_kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n+                self._func_path, self.args, self.kwargs, self.partial_args, self.partial_kwargs, self.url_name,\n+                self.app_names, self.namespaces, self.route,\n+            )\n+        else:\n+            return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n+                self._func_path, self.args, self.kwargs, self.url_name,\n+                self.app_names, self.namespaces, self.route\n+            )\n \n \n def get_resolver(urlconf=None):\n", "instance_id": "django__django-14155"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 180f4a41fc..a12ed329cd 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1299,7 +1299,9 @@ class QuerySet:\n             # values() queryset can only be used as nested queries\n             # if they are set up to select only a single field.\n             raise TypeError('Cannot use multi-field values as a filter value.')\n-        query = self.query.resolve_expression(*args, **kwargs)\n+        query = self.query.resolve_expression(*args, **kwargs).clone()\n+        if query.group_by:\n+            query.group_by = self.query.group_by\n         query._db = self._db\n         return query\n     resolve_expression.queryset_only = True\n", "instance_id": "django__django-11797"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex 892e19cabb..d390cb9c3a 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -5,6 +5,7 @@\n from sympy.core.function import Function, ArgumentIndexError, _coeff_isneg\n from sympy.functions.combinatorial.factorials import factorial, RisingFactorial\n from sympy.functions.elementary.exponential import exp, log, match_real_imag\n+from sympy.functions.elementary.trigonometric import acos\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.functions.elementary.integers import floor\n \n@@ -265,9 +266,22 @@ def _eval_is_finite(self):\n         return arg.is_finite\n \n     def _eval_is_zero(self):\n+        from sympy.functions.elementary.trigonometric import acos\n         arg = self.args[0]\n         if arg.is_zero:\n             return True\n+        if isinstance(arg, acosh):\n+            return arg.args[0] == 1\n+        if isinstance(arg, acos):\n+            return arg.args[0] == 1\n+        if isinstance(arg, acosh):\n+            return arg.args[0] == 1\n+        if isinstance(arg, acos):\n+            return arg.args[0] == 1\n+        if isinstance(arg, acosh):\n+            return arg.args[0] == 1\n+        if isinstance(arg, acos):\n+            return arg.args[0] == 1\n \n \n class cosh(HyperbolicFunction):\n", "instance_id": "sympy__sympy-21627"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex 2a4555d919..5fbb73c786 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -587,7 +587,7 @@ def eval(cls, arg):\n                 x, m = _peeloff_ipi(arg)\n                 if m:\n                     cothm = coth(m)\n-                    if cotm is S.ComplexInfinity:\n+                    if cothm is S.ComplexInfinity:\n                         return coth(x)\n                     else: # cothm == 0\n                         return tanh(x)\n", "instance_id": "sympy__sympy-13480"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..42ada041 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -2109,6 +2109,22 @@ def pairplot(\n         else:\n             diag_kind = \"hist\" if kind == \"hist\" else \"kde\"\n \n+    # Flatten MultiIndex columns if present\n+    if isinstance(data.columns, pd.MultiIndex):\n+        data.columns = ['_'.join(map(str, col)).strip() for col in data.columns]\n+\n+    # Flatten MultiIndex columns if present\n+    if isinstance(data.columns, pd.MultiIndex):\n+        data.columns = ['_'.join(map(str, col)).strip() for col in data.columns]\n+\n+    # Flatten MultiIndex columns if present\n+    if isinstance(data.columns, pd.MultiIndex):\n+        data.columns = ['_'.join(map(str, col)).strip() for col in data.columns]\n+\n+    # Flatten MultiIndex columns if present\n+    if isinstance(data.columns, pd.MultiIndex):\n+        data.columns = ['_'.join(map(str, col)).strip() for col in data.columns]\n+\n     # Set up the PairGrid\n     grid_kws.setdefault(\"diag_sharey\", diag_kind == \"hist\")\n     grid = PairGrid(data, vars=vars, x_vars=x_vars, y_vars=y_vars, hue=hue,\n", "instance_id": "mwaskom__seaborn-3407"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 837dabfea8..e5c9eb9687 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -430,7 +430,7 @@ class AdminSite:\n                     return HttpResponsePermanentRedirect(path)\n         raise Http404\n \n-    def _build_app_dict(self, request, label=None):\n+    def build_app_dict(self, request, label=None):\n         \"\"\"\n         Build the app dictionary. The optional `label` parameter filters models\n         of a specific app.\n@@ -467,6 +467,7 @@ class AdminSite:\n                 'admin_url': None,\n                 'add_url': None,\n             }\n+            model_dict['model'] = model\n             if perms.get('change') or perms.get('view'):\n                 model_dict['view_only'] = not perms.get('change')\n                 try:\n@@ -503,7 +504,7 @@ class AdminSite:\n         Return a sorted list of all the installed apps that have been\n         registered in this site.\n         \"\"\"\n-        app_dict = self._build_app_dict(request)\n+        app_dict = self.build_app_dict(request)\n \n         # Sort the apps alphabetically.\n         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())\n@@ -534,7 +535,7 @@ class AdminSite:\n         return TemplateResponse(request, self.index_template or 'admin/index.html', context)\n \n     def app_index(self, request, app_label, extra_context=None):\n-        app_dict = self._build_app_dict(request, app_label)\n+        app_dict = self.build_app_dict(request, app_label)\n         if not app_dict:\n             raise Http404('The requested admin page does not exist.')\n         # Sort the models alphabetically within each app.\n", "instance_id": "django__django-13447"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..9c71aba87 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -154,7 +154,9 @@ def get_user() -> Optional[str]:\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        username = getpass.getuser()\n+        # Replace any characters that are not allowed in directory names with an underscore\n+        return re.sub(r'[<>:\"/\\\\|?*]', '_', username)\n     except (ImportError, KeyError):\n         return None\n \n", "instance_id": "pytest-dev__pytest-8365"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..1304f20a60 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n", "instance_id": "django__django-11099"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex c50fc90171..5cf1f5b3c2 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -5,7 +5,7 @@ from io import StringIO\n from django.apps import apps\n from django.conf import settings\n from django.core import serializers\n-from django.db import router\n+from django.db import router, transaction\n \n # The prefix to put on the default database name when creating\n # the test database.\n@@ -126,8 +126,9 @@ class BaseDatabaseCreation:\n         the serialize_db_to_string() method.\n         \"\"\"\n         data = StringIO(data)\n-        for obj in serializers.deserialize(\"json\", data, using=self.connection.alias):\n-            obj.save()\n+        with transaction.atomic(using=self.connection.alias):\n+            for obj in serializers.deserialize(\"json\", data, using=self.connection.alias):\n+                obj.save()\n \n     def _get_database_display_str(self, verbosity, database_name):\n         \"\"\"\n", "instance_id": "django__django-12453"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c2623f099f..cc80c7a9fa 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -38,7 +38,12 @@ class Q(tree.Node):\n     conditional = True\n \n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n-        super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n+        children = [*args, *sorted(kwargs.items())]\n+        # Convert non-pickleable types to list\n+        for i, child in enumerate(children):\n+            if isinstance(child, tuple) and isinstance(child[1], (type({}.keys()), type({}.values()))):\n+                children[i] = (child[0], list(child[1]))\n+        super().__init__(children=children, connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n         if not isinstance(other, Q):\n", "instance_id": "django__django-14016"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 62631f7ff..4c49af33b 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -110,11 +110,13 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n \n \n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n     if arg in (None, True):\n-        return 'object'\n+        return {'object'}\n+    elif isinstance(arg, str):\n+        return {x.strip() for x in arg.split(',') if x.strip()}\n     else:\n-        return arg\n+        raise ValueError(__('invalid value for inherited-members option: %s') % arg)\n \n \n def member_order_option(arg: Any) -> Optional[str]:\n@@ -659,7 +661,9 @@ class Documenter:\n                                    (name, self.fullname), type='autodoc')\n             return False, selected\n         elif self.options.inherited_members:\n-            return False, [(m.name, m.value) for m in members.values()]\n+            inherited_classes = self.options.inherited_members\n+            return False, [(m.name, m.value) for m in members.values()\n+                           if any(base.__name__ in inherited_classes for base in inspect.getmro(m.value))]\n         else:\n             return False, [(m.name, m.value) for m in members.values()\n                            if m.directly_defined]\n", "instance_id": "sphinx-doc__sphinx-10325"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex fe1f7236e..fe07f7d02 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -15,6 +15,7 @@ import numpy as np\n import scipy.sparse as sp\n from scipy import __version__ as scipy_version\n from distutils.version import LooseVersion\n+import pandas as pd\n \n from numpy.core.numeric import ComplexWarning\n \n@@ -495,7 +496,14 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n         estimator_name = \"Estimator\"\n     context = \" by %s\" % estimator_name if estimator is not None else \"\"\n \n-    if sp.issparse(array):\n+    if isinstance(array, pd.DataFrame):\n+        dtype_orig = array.dtypes\n+        array = array.to_numpy(dtype=dtype, copy=copy)\n+        if warn_on_dtype and not all(dtype_orig == array.dtypes):\n+            msg = (\"Data with input dtype {} was converted to {}{}.\"\n+                   .format(dtype_orig, array.dtype, context))\n+            warnings.warn(msg, DataConversionWarning)\n+    elif sp.issparse(array):\n         _ensure_no_complex_data(array)\n         array = _ensure_sparse_format(array, accept_sparse=accept_sparse,\n                                       dtype=dtype, copy=copy,\n", "instance_id": "scikit-learn__scikit-learn-10949"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 7ca05f0304..a6c65d5f74 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -8,7 +8,7 @@\n from sympy.core.compatibility import reduce, iterable, SYMPY_INTS\n from sympy.core.function import count_ops, _mexpand\n from sympy.core.numbers import I, Integer\n-from sympy.functions import sin, cos, exp, cosh, tanh, sinh, tan, cot, coth\n+from sympy.functions import sin, cos, exp, cosh, tanh, sinh, tan, cot, coth, Abs\n from sympy.functions.elementary.hyperbolic import HyperbolicFunction\n from sympy.functions.elementary.trigonometric import TrigonometricFunction\n from sympy.polys import Poly, factor, cancel, parallel_poly_from_expr\n@@ -600,6 +600,10 @@ def signlog(expr, sign=1):\n     # can we ever generate an I where there was none previously?\n     if not (newexpr.has(I) and not expr.has(I)):\n         expr = newexpr\n+    # Handle sqrt(sin(x)**2) -> Abs(sin(x))\n+    expr = expr.replace(lambda expr: expr.is_Pow and expr.exp == S.Half and expr.base.is_Pow and expr.base.exp == 2,\n+                        lambda expr: Abs(expr.base.base))\n+\n     return expr\n \n #-------------------- the old trigsimp routines ---------------------\n", "instance_id": "sympy__sympy-18087"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..17a8f79d32 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,7 +1124,7 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n+        if hasattr(expression, 'filterable') and not expression.filterable:\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n", "instance_id": "django__django-13028"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 4918261fb0..85543cf85a 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -164,15 +164,13 @@ class MigrationWriter:\n \n         # django.db.migrations is always used, but models import may not be.\n         # If models import exists, merge it with migrations import.\n-        if \"from django.db import models\" in imports:\n-            imports.discard(\"from django.db import models\")\n-            imports.add(\"from django.db import migrations, models\")\n-        else:\n-            imports.add(\"from django.db import migrations\")\n+        if any('models.' in operation for operation in items[\"operations\"]):\n+            imports.add(\"from django.db import models\")\n+        imports.add(\"from django.db import migrations\")\n \n         # Sort imports by the package / module to be imported (the part after\n         # \"from\" in \"from ... import ...\" or after \"import\" in \"import ...\").\n-        sorted_imports = sorted(imports, key=lambda i: i.split()[1])\n+        sorted_imports = sorted(imports, key=lambda i: i.split()[1] if 'import' in i else i)\n         items[\"imports\"] = \"\\n\".join(sorted_imports) + \"\\n\" if imports else \"\"\n         if migration_imports:\n             items[\"imports\"] += (\n", "instance_id": "django__django-14580"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 2ff8b0ee26..59987ee101 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -277,7 +277,7 @@ class BoundWidget:\n \n     @property\n     def id_for_label(self):\n-        return 'id_%s_%s' % (self.data['name'], self.data['index'])\n+        return self.data['attrs'].get('id', 'id_%s_%s' % (self.data['name'], self.data['index']))\n \n     @property\n     def choice_label(self):\n", "instance_id": "django__django-14534"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex f71bea25f5..8e2bc56b94 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -707,7 +707,7 @@ def _preprocess(self, args, expr):\n \n         Returns string form of args, and updated expr.\n         \"\"\"\n-        from sympy import Dummy, Symbol, Function, flatten\n+        from sympy import Dummy, Symbol, Function, flatten, MatrixSymbol\n         from sympy.matrices import DeferredVector\n \n         dummify = self._dummify\n@@ -725,7 +725,7 @@ def _preprocess(self, args, expr):\n                 argstrs.append(nested_argstrs)\n             elif isinstance(arg, DeferredVector):\n                 argstrs.append(str(arg))\n-            elif isinstance(arg, Symbol):\n+            elif isinstance(arg, (Symbol, MatrixSymbol)):\n                 argrep = self._argrepr(arg)\n \n                 if dummify or not self._is_safe_ident(argrep):\n@@ -734,7 +734,7 @@ def _preprocess(self, args, expr):\n                     expr = self._subexpr(expr, {arg: dummy})\n                 else:\n                     argstrs.append(argrep)\n-            elif isinstance(arg, Function):\n+            elif isinstance(arg, (Function, MatrixSymbol)):\n                 dummy = Dummy()\n                 argstrs.append(self._argrepr(dummy))\n                 expr = self._subexpr(expr, {arg: dummy})\n", "instance_id": "sympy__sympy-15011"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/style/core.py b/lib/matplotlib/style/core.py\nindex fb0a5426e6..e3a47cb339 100644\n--- a/lib/matplotlib/style/core.py\n+++ b/lib/matplotlib/style/core.py\n@@ -108,7 +108,26 @@ def use(style):\n     else:\n         styles = style\n \n-    style_alias = {'mpl20': 'default', 'mpl15': 'classic'}\n+    style_alias = {\n+        'mpl20': 'default',\n+        'mpl15': 'classic',\n+        'seaborn': 'seaborn-v0_8',\n+        'seaborn-bright': 'seaborn-v0_8-bright',\n+        'seaborn-colorblind': 'seaborn-v0_8-colorblind',\n+        'seaborn-dark': 'seaborn-v0_8-dark',\n+        'seaborn-darkgrid': 'seaborn-v0_8-darkgrid',\n+        'seaborn-dark-palette': 'seaborn-v0_8-dark-palette',\n+        'seaborn-deep': 'seaborn-v0_8-deep',\n+        'seaborn-muted': 'seaborn-v0_8-muted',\n+        'seaborn-notebook': 'seaborn-v0_8-notebook',\n+        'seaborn-paper': 'seaborn-v0_8-paper',\n+        'seaborn-pastel': 'seaborn-v0_8-pastel',\n+        'seaborn-poster': 'seaborn-v0_8-poster',\n+        'seaborn-talk': 'seaborn-v0_8-talk',\n+        'seaborn-ticks': 'seaborn-v0_8-ticks',\n+        'seaborn-white': 'seaborn-v0_8-white',\n+        'seaborn-whitegrid': 'seaborn-v0_8-whitegrid',\n+    }\n \n     def fix_style(s):\n         if isinstance(s, str):\n@@ -255,7 +274,12 @@ def reload_library():\n     \"\"\"Reload the style library.\"\"\"\n     global library\n     library = update_user_library(_base_library)\n-    available[:] = sorted(library.keys())\n+    available[:] = sorted(library.keys() | {\n+        'seaborn', 'seaborn-bright', 'seaborn-colorblind', 'seaborn-dark',\n+        'seaborn-darkgrid', 'seaborn-dark-palette', 'seaborn-deep',\n+        'seaborn-muted', 'seaborn-notebook', 'seaborn-paper', 'seaborn-pastel',\n+        'seaborn-poster', 'seaborn-talk', 'seaborn-ticks', 'seaborn-white',\n+        'seaborn-whitegrid'})\n \n \n reload_library()\n", "instance_id": "matplotlib__matplotlib-24265"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 11c800704b..f7f48a5297 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -39,7 +39,7 @@ def doit(p, q):\n             if p.is_infinite or q.is_infinite or p is nan or q is nan:\n                 return nan\n             if (p == q or p == -q or\n-                    p.is_Pow and p.exp.is_Integer and p.base == q or\n+                    p.is_Pow and p.exp.is_Integer and p.base == q and p.base.is_integer or\n                     p.is_integer and q == 1):\n                 return S.Zero\n \n", "instance_id": "sympy__sympy-13177"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..ad5a42f875 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -919,7 +919,10 @@ class QuerySet:\n     def none(self):\n         \"\"\"Return an empty QuerySet.\"\"\"\n         clone = self._chain()\n-        clone.query.set_empty()\n+        if self.query.combinator:\n+            clone.query = self.model._base_manager.none().query\n+        else:\n+            clone.query.set_empty()\n         return clone\n \n     ##################################################################\n", "instance_id": "django__django-13158"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 0e84403307..acd512b945 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -118,30 +118,13 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n             return\n         # Force to list in case of passed tuple or other incompatible collection\n         variables = list(variables) + [S.One]\n-        if all(variable.is_commutative for variable in variables):\n-            monomials_list_comm = []\n-            for item in combinations_with_replacement(variables, max_degree):\n-                powers = dict()\n-                for variable in variables:\n-                    powers[variable] = 0\n-                for variable in item:\n-                    if variable != 1:\n-                        powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_comm.append(Mul(*item))\n-            yield from set(monomials_list_comm)\n-        else:\n-            monomials_list_non_comm = []\n-            for item in product(variables, repeat=max_degree):\n-                powers = dict()\n-                for variable in variables:\n-                    powers[variable] = 0\n-                for variable in item:\n-                    if variable != 1:\n-                        powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_non_comm.append(Mul(*item))\n-            yield from set(monomials_list_non_comm)\n+        for degree in range(min_degree, max_degree + 1):\n+            if all(variable.is_commutative for variable in variables):\n+                for item in combinations_with_replacement(variables, degree):\n+                    yield Mul(*item)\n+            else:\n+                for item in product(variables, repeat=degree):\n+                    yield Mul(*item)\n     else:\n         if any(min_degrees[i] > max_degrees[i] for i in range(n)):\n             raise ValueError('min_degrees[i] must be <= max_degrees[i] for all i')\n", "instance_id": "sympy__sympy-21847"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sphinx/ext/autosummary/__init__.py b/sphinx/ext/autosummary/__init__.py\nindex 0cdd88feb..fbcafd88f 100644\n--- a/sphinx/ext/autosummary/__init__.py\n+++ b/sphinx/ext/autosummary/__init__.py\n@@ -515,7 +515,13 @@ def extract_summary(doc: List[str], document: Any) -> str:\n     state_machine = RSTStateMachine(state_classes, 'Body')\n     node = new_document('', document.settings)\n     node.reporter = NullReporter()\n-    state_machine.run(doc, node)\n+    try:\n+        state_machine.run(doc, node)\n+    except ValueError as e:\n+        if str(e) == \"Empty module name\":\n+            return doc[0].strip()\n+        else:\n+            raise\n \n     if not isinstance(node[0], nodes.paragraph):\n         # document starts with non-paragraph: pick up the first line\n@@ -523,17 +529,7 @@ def extract_summary(doc: List[str], document: Any) -> str:\n     else:\n         # Try to find the \"first sentence\", which may span multiple lines\n         sentences = periods_re.split(\" \".join(doc))\n-        if len(sentences) == 1:\n-            summary = sentences[0].strip()\n-        else:\n-            summary = ''\n-            while sentences:\n-                summary += sentences.pop(0) + '.'\n-                node[:] = []\n-                state_machine.run([summary], node)\n-                if not node.traverse(nodes.system_message):\n-                    # considered as that splitting by period does not break inline markups\n-                    break\n+        summary = sentences[0].strip()\n \n     # strip literal notation mark ``::`` from tail of summary\n     summary = literal_re.sub('.', summary)\n@@ -759,18 +755,21 @@ def process_generate_options(app: Sphinx) -> None:\n def setup(app: Sphinx) -> Dict[str, Any]:\n     # I need autodoc\n     app.setup_extension('sphinx.ext.autodoc')\n-    app.add_node(autosummary_toc,\n-                 html=(autosummary_toc_visit_html, autosummary_noop),\n-                 latex=(autosummary_noop, autosummary_noop),\n-                 text=(autosummary_noop, autosummary_noop),\n-                 man=(autosummary_noop, autosummary_noop),\n-                 texinfo=(autosummary_noop, autosummary_noop))\n-    app.add_node(autosummary_table,\n-                 html=(autosummary_table_visit_html, autosummary_noop),\n-                 latex=(autosummary_noop, autosummary_noop),\n-                 text=(autosummary_noop, autosummary_noop),\n-                 man=(autosummary_noop, autosummary_noop),\n-                 texinfo=(autosummary_noop, autosummary_noop))\n+    if not hasattr(app, 'autosummary_toc_registered'):\n+        if not hasattr(nodes.GenericNodeVisitor, 'meta'):\n+            app.add_node(autosummary_toc,\n+                         html=(autosummary_toc_visit_html, autosummary_noop),\n+                         latex=(autosummary_noop, autosummary_noop),\n+                         text=(autosummary_noop, autosummary_noop),\n+                         man=(autosummary_noop, autosummary_noop),\n+                         texinfo=(autosummary_noop, autosummary_noop))\n+            app.add_node(autosummary_table,\n+                         html=(autosummary_table_visit_html, autosummary_noop),\n+                         latex=(autosummary_noop, autosummary_noop),\n+                         text=(autosummary_noop, autosummary_noop),\n+                         man=(autosummary_noop, autosummary_noop),\n+                         texinfo=(autosummary_noop, autosummary_noop))\n+        app.autosummary_toc_registered = True\n     app.add_directive('autosummary', Autosummary)\n     app.add_role('autolink', AutoLink())\n     app.connect('builder-inited', process_generate_options)\ndiff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex a57c73fb7..388c479a5 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -246,7 +246,10 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns.update(context)\n \n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        if imported_members:\n+            ns['members'] = dir(obj)\n+        else:\n+            ns['members'] = [name for name in dir(obj) if getattr(obj, name, None) and hasattr(getattr(obj, name), '__module__') and getattr(obj, name).__module__ == obj.__name__]\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n", "instance_id": "sphinx-doc__sphinx-7686"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b3cfc6723c..f6c4b7fc2f 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -163,7 +163,7 @@ class UserChangeForm(forms.ModelForm):\n         super().__init__(*args, **kwargs)\n         password = self.fields.get(\"password\")\n         if password:\n-            password.help_text = password.help_text.format(\"../password/\")\n+            password.help_text = password.help_text.format(f\"../../{self.instance.pk}/password/\")\n         user_permissions = self.fields.get(\"user_permissions\")\n         if user_permissions:\n             user_permissions.queryset = user_permissions.queryset.select_related(\n", "instance_id": "django__django-16139"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 33cc636b22..5036335bec 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -748,7 +748,7 @@ class Query(BaseExpression):\n                     cur_model = source.related_model\n                 else:\n                     cur_model = source.remote_field.model\n-                opts = cur_model._meta\n+                opts = cur_model._meta.concrete_model._meta\n                 # Even if we're \"just passing through\" this model, we must add\n                 # both the current model's pk and the related reference field\n                 # (if it's not a reverse relation) to the things we select.\n", "instance_id": "django__django-15814"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/sitemaps/__init__.py b/django/contrib/sitemaps/__init__.py\nindex 27756d9d96..b40ad806ed 100644\n--- a/django/contrib/sitemaps/__init__.py\n+++ b/django/contrib/sitemaps/__init__.py\n@@ -168,7 +168,7 @@ class Sitemap:\n         if callable(self.lastmod):\n             try:\n                 return max([self.lastmod(item) for item in self.items()])\n-            except TypeError:\n+            except (TypeError, ValueError):\n                 return None\n         else:\n             return self.lastmod\n", "instance_id": "django__django-16255"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex 4166dece9..548388804 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -8,7 +8,8 @@\n     :license: BSD, see LICENSE for details.\n \"\"\"\n \n-from os import path\n+import os\n+from os import path, makedirs\n from typing import Any, Dict, List, Set, Tuple, Union\n \n from docutils.frontend import OptionParser\n@@ -80,7 +81,10 @@ class ManualPageBuilder(Builder):\n             docsettings.authors = authors\n             docsettings.section = section\n \n-            targetname = '%s.%s' % (name, section)\n+            section_dir = path.join(self.outdir, f'man{section}')\n+            if not path.exists(section_dir):\n+                os.makedirs(section_dir)\n+            targetname = path.join(section_dir, f'{name}.{section}')\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n             destination = FileOutput(\n                 destination_path=path.join(self.outdir, targetname),\n", "instance_id": "sphinx-doc__sphinx-8273"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex b4d759836e..519a0a0200 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -7,7 +7,7 @@\n from sympy.core.compatibility import range\n from sympy.core.sympify import SympifyError, sympify\n from sympy.functions import conjugate, adjoint\n-from sympy.matrices import ShapeError\n+from sympy.matrices import ShapeError, Matrix\n from sympy.simplify import simplify\n \n \n@@ -484,6 +484,26 @@ def _entry(self, i, j):\n     def _eval_determinant(self):\n         return S.One\n \n+    def _eval_sum(self, axis=None):\n+        if axis is None:\n+            return self.rows\n+        elif axis == 0:\n+            return Matrix([1] * self.rows)\n+        elif axis == 1:\n+            return Matrix([1] * self.cols)\n+        else:\n+            raise ValueError(\"Invalid axis, must be 0, 1, or None\")\n+\n+    def _eval_sum(self, axis=None):\n+        if axis is None:\n+            return self.rows\n+        elif axis == 0:\n+            return Matrix([1] * self.rows)\n+        elif axis == 1:\n+            return Matrix([1] * self.cols)\n+        else:\n+            raise ValueError(\"Invalid axis, must be 0, 1, or None\")\n+\n \n class ZeroMatrix(MatrixExpr):\n     \"\"\"The Matrix Zero 0 - additive identity\n", "instance_id": "sympy__sympy-12419"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex 5a50cded0..87651034c 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -376,6 +376,8 @@ def store_mark(obj, mark: Mark) -> None:\n     # Always reassign name to avoid updating pytestmark in a reference that\n     # was only borrowed.\n     obj.pytestmark = get_unpacked_marks(obj) + [mark]\n+    if mark.name == \"xfail\":\n+        obj._xfail = True\n \n \n # Typing for builtin pytest marks. This is cheating; it gives builtin marks\n@@ -428,7 +430,7 @@ if TYPE_CHECKING:\n             ids: Optional[\n                 Union[\n                     Iterable[Union[None, str, float, int, bool]],\n-                    Callable[[object], Optional[object]],\n+                    Callable[[object], Optional[Union[str, float, int, bool]]],\n                 ]\n             ] = ...,\n             scope: Optional[_Scope] = ...\ndiff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 560548aea..3f483e55f 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -116,8 +116,7 @@ class Node(metaclass=NodeMeta):\n         \"__dict__\",\n     )\n \n-    def __init__(\n-        self,\n+    def __init__(self, \n         name: str,\n         parent: \"Optional[Node]\" = None,\n         config: Optional[Config] = None,\n@@ -159,6 +158,9 @@ class Node(metaclass=NodeMeta):\n         #: allow adding of extra keywords to use for matching\n         self.extra_keyword_matches = set()  # type: Set[str]\n \n+        #: indicates if the node is marked as xfail\n+        self._xfail = False\n+\n         # used for storing artificial fixturedefs for direct parametrization\n         self._name2pseudofixturedef = {}  # type: Dict[str, FixtureDef]\n \ndiff --git a/src/_pytest/runner.py b/src/_pytest/runner.py\nindex 69754ad5e..2b6c8bf3b 100644\n--- a/src/_pytest/runner.py\n+++ b/src/_pytest/runner.py\n@@ -19,6 +19,7 @@ from .reports import BaseReport\n from .reports import CollectErrorRepr\n from .reports import CollectReport\n from .reports import TestReport\n+import pytest\n from _pytest import timing\n from _pytest._code.code import ExceptionChainRepr\n from _pytest._code.code import ExceptionInfo\n@@ -149,16 +150,19 @@ def pytest_runtest_call(item: Item) -> None:\n         del sys.last_traceback\n     except AttributeError:\n         pass\n-    try:\n-        item.runtest()\n-    except Exception as e:\n-        # Store trace info to allow postmortem debugging\n-        sys.last_type = type(e)\n-        sys.last_value = e\n-        assert e.__traceback__ is not None\n-        # Skip *this* frame\n-        sys.last_traceback = e.__traceback__.tb_next\n-        raise e\n+    if getattr(item, \"_xfail\", False):\n+        pytest.xfail(\"xfail\")\n+    else:\n+        try:\n+            item.runtest()\n+        except Exception as e:\n+            # Store trace info to allow postmortem debugging\n+            sys.last_type = type(e)\n+            sys.last_value = e\n+            assert e.__traceback__ is not None\n+            # Skip *this* frame\n+            sys.last_traceback = e.__traceback__.tb_next\n+            raise e\n \n \n def pytest_runtest_teardown(item: Item, nextitem: Optional[Item]) -> None:\n", "instance_id": "pytest-dev__pytest-7490"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/functions/combinatorial/numbers.py b/sympy/functions/combinatorial/numbers.py\nindex 896729ac87..ed8455e68a 100644\n--- a/sympy/functions/combinatorial/numbers.py\n+++ b/sympy/functions/combinatorial/numbers.py\n@@ -21,6 +21,7 @@\n from sympy.functions.elementary.trigonometric import sin, cos, cot\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.utilities.memoization import recurrence_memo\n+from sympy.core.logic import fuzzy_not\n \n from mpmath import bernfrac, workprec\n from mpmath.libmp import ifib as _ifib\n@@ -443,6 +444,10 @@ def eval(cls, n, k_sym=None, symbols=None):\n                 r = cls._bell_incomplete_poly(int(n), int(k_sym), symbols)\n                 return r\n \n+    def _eval_as_leading_term(self, x):\n+        from sympy import oo\n+        return oo\n+\n     def _eval_rewrite_as_Sum(self, n, k_sym=None, symbols=None):\n         from sympy import Sum\n         if (k_sym is not None) or (symbols is not None):\n", "instance_id": "sympy__sympy-13437"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex d610dc86f0..1b882092e8 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -916,7 +916,10 @@ class Field(RegisterLookupMixin):\n \n     def value_from_object(self, obj):\n         \"\"\"Return the value of this field in the given model instance.\"\"\"\n-        return getattr(obj, self.attname)\n+        value = getattr(obj, self.attname)\n+        if isinstance(value, enum.Enum):\n+            return value.value\n+        return value\n \n \n class BooleanField(Field):\ndiff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex f6c5ae2585..3df8e66c22 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1,5 +1,6 @@\n import functools\n import inspect\n+import enum\n from functools import partial\n \n from django import forms\n@@ -632,7 +633,13 @@ class ForeignObject(RelatedField):\n         return tuple(rhs_field for lhs_field, rhs_field in self.related_fields if rhs_field)\n \n     def get_local_related_value(self, instance):\n-        return self.get_instance_value_for_fields(instance, self.local_related_fields)\n+        value = self.get_instance_value_for_fields(instance, self.local_related_fields)\n+        if isinstance(value, enum.Enum):\n+            return value.value\n+        return value\n+        if isinstance(value, enum.Enum):\n+            return value.value\n+        return value\n \n     def get_foreign_related_value(self, instance):\n         return self.get_instance_value_for_fields(instance, self.foreign_related_fields)\n", "instance_id": "django__django-11964"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 28374272f4..a7a021aeef 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -516,16 +516,23 @@ class Field(RegisterLookupMixin):\n     def __eq__(self, other):\n         # Needed for @total_ordering\n         if isinstance(other, Field):\n+            if hasattr(self, 'model') and hasattr(other, 'model'):\n+                return self.model == other.model and self.creation_counter == other.creation_counter\n             return self.creation_counter == other.creation_counter\n         return NotImplemented\n \n     def __lt__(self, other):\n         # This is needed because bisect does not take a comparison function.\n         if isinstance(other, Field):\n+            if hasattr(self, 'model') and hasattr(other, 'model'):\n+                if self.creation_counter == other.creation_counter:\n+                    return self.model < other.model\n             return self.creation_counter < other.creation_counter\n         return NotImplemented\n \n     def __hash__(self):\n+        if hasattr(self, 'model'):\n+            return hash((self.creation_counter, self.model))\n         return hash(self.creation_counter)\n \n     def __deepcopy__(self, memodict):\n", "instance_id": "django__django-13401"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 02ec6480cb..7904946cc5 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -320,6 +320,10 @@ def _eval_power(self, other):\n         if b is S.NaN:\n             return (b**e)**other  # let __new__ handle it\n \n+        # Handle the specific case of (-a)**x * a**(-x) when a is a positive integer\n+        if b.is_integer and b.is_positive and other.is_Rational:\n+            return (-1)**other * Pow(b, e * other)\n+\n         s = None\n         if other.is_integer:\n             s = 1\ndiff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex 1acc00be3a..e6da3d1702 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -573,6 +573,21 @@ def shorter(*choices):\n \n     expr = piecewise_fold(expr)\n \n+    # Handle the specific case of (-a)**x * a**(-x) when a is a positive integer\n+    from sympy import Symbol\n+    if expr.is_Mul:\n+        base = None\n+        exp = None\n+        for arg in expr.args:\n+            if isinstance(arg, Pow):\n+                if arg.base.is_integer and arg.base.is_positive:\n+                    if base is None:\n+                        base = arg.base\n+                        exp = arg.exp\n+                    elif arg.base == -base and arg.exp == -exp:\n+                        expr = (-1)**exp\n+                        break\n+\n     if expr.has(BesselBase):\n         expr = besselsimp(expr)\n \n", "instance_id": "sympy__sympy-14024"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 4806afee9..0d2e9487b 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -200,6 +200,8 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n     else:\n         if verbose:\n             print(\"Did not converge\")\n+        return np.array([]), np.array([-1] * n_samples), it + 1\n+        return np.array([]), np.array([-1] * n_samples), it + 1\n \n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n@@ -382,13 +384,15 @@ class AffinityPropagation(ClusterMixin, BaseEstimator):\n                              \"'euclidean'. Got %s instead\"\n                              % str(self.affinity))\n \n-        self.cluster_centers_indices_, self.labels_, self.n_iter_ = \\\n-            affinity_propagation(\n-                self.affinity_matrix_, self.preference, max_iter=self.max_iter,\n-                convergence_iter=self.convergence_iter, damping=self.damping,\n-                copy=self.copy, verbose=self.verbose, return_n_iter=True)\n+        self.cluster_centers_indices_, self.labels_, self.n_iter_ = affinity_propagation(\n+            self.affinity_matrix_, self.preference, max_iter=self.max_iter,\n+            convergence_iter=self.convergence_iter, damping=self.damping,\n+            copy=self.copy, verbose=self.verbose, return_n_iter=True\n+        )\n+        self.converged_ = len(self.cluster_centers_indices_) > 0\n+        self.converged_ = len(self.cluster_centers_indices_) > 0\n \n-        if self.affinity != \"precomputed\":\n+        if self.affinity != \"precomputed\" and self.converged_:\n             self.cluster_centers_ = X[self.cluster_centers_indices_].copy()\n \n         return self\n@@ -412,7 +416,7 @@ class AffinityPropagation(ClusterMixin, BaseEstimator):\n             raise ValueError(\"Predict method is not supported when \"\n                              \"affinity='precomputed'.\")\n \n-        if self.cluster_centers_.shape[0] > 0:\n+        if self.converged_:\n             return pairwise_distances_argmin(X, self.cluster_centers_)\n         else:\n             warnings.warn(\"This model does not have any cluster centers \"\n@@ -424,6 +428,25 @@ class AffinityPropagation(ClusterMixin, BaseEstimator):\n         \"\"\"Fit the clustering from features or affinity matrix, and return\n         cluster labels.\n \n+        Parameters\n+        ----------\n+        X : array-like or sparse matrix, shape (n_samples, n_features), or \\\n+            array-like, shape (n_samples, n_samples)\n+            Training instances to cluster, or similarities / affinities between\n+            instances if ``affinity='precomputed'``. If a sparse feature matrix\n+            is provided, it will be converted into a sparse ``csr_matrix``.\n+\n+        y : Ignored\n+            Not used, present here for API consistency by convention.\n+\n+        Returns\n+        -------\n+        labels : ndarray, shape (n_samples,)\n+            Cluster labels.\n+        \"\"\"\n+        \"\"\"Fit the clustering from features or affinity matrix, and return\n+        cluster labels.\n+\n         Parameters\n         ----------\n         X : array-like or sparse matrix, shape (n_samples, n_features), or \\\n", "instance_id": "scikit-learn__scikit-learn-15512"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 23af4d0bb..048693ebe 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -19,8 +19,16 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n         raise\n     except BaseException as exc:\n         exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+    try:\n+        class_name = obj.__class__.__name__\n+    except Exception:\n+        class_name = \"Unknown\"\n+    try:\n+        obj_id = id(obj)\n+    except Exception:\n+        obj_id = 0\n     return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n-        exc_info, obj.__class__.__name__, id(obj)\n+        exc_info, class_name, obj_id\n     )\n \n \n", "instance_id": "pytest-dev__pytest-7168"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6092e35dab..eef89090e1 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -181,8 +181,12 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n             syms = [i for i in syms if i in var]\n             if syms != var:\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n+                base_solutions = diophantine(eq, param)\n+                permuted_solutions = set()\n+                for sol in base_solutions:\n+                    permuted_solutions.update(signed_permutations(sol))\n                 return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                            for t in permuted_solutions}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "instance_id": "sympy__sympy-18189"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\nindex f0b663222a..b51d1739a4 100644\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -56,7 +56,7 @@ class Command(BaseCommand):\n         targets = [(app_label, migration.name)]\n \n         # Show begin/end around output only for atomic migrations\n-        self.output_transaction = migration.atomic\n+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\n", "instance_id": "django__django-11039"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex 1acc00be3a..5de6a85a6d 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -593,7 +593,7 @@ def shorter(*choices):\n     if expr.has(Product):\n         expr = product_simplify(expr)\n \n-    short = shorter(powsimp(expr, combine='exp', deep=True), powsimp(expr), expr)\n+    short = shorter(powsimp(expr, combine='exp', deep=True, force=True), powsimp(expr, force=True), expr)\n     short = shorter(short, cancel(short))\n     short = shorter(short, factor_terms(short), expand_power_exp(expand_mul(short)))\n     if short.has(TrigonometricFunction, HyperbolicFunction, ExpBase):\n", "instance_id": "sympy__sympy-13895"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex b4c38368bf..58f724ee7d 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -186,7 +186,11 @@ class FigureBase(Artist):\n         # groupers to keep track of x and y labels we want to align.\n         # see self.align_xlabels and self.align_ylabels and\n         # axis._get_tick_boxes_siblings\n-        self._align_label_groups = {\"x\": cbook.Grouper(), \"y\": cbook.Grouper()}\n+        import weakref\n+        self._align_label_groups = {\n+            \"x\": weakref.WeakKeyDictionary(),\n+            \"y\": weakref.WeakKeyDictionary()\n+        }\n \n         self.figure = self\n         self._localaxes = []  # track all axes\n@@ -1474,6 +1478,11 @@ default: %(va)s\n \n         matplotlib.figure.Figure.align_ylabels\n         \"\"\"\n+        import weakref\n+        self._align_label_groups = {\n+            \"x\": weakref.WeakKeyDictionary(),\n+            \"y\": weakref.WeakKeyDictionary()\n+        }\n         self.align_xlabels(axs=axs)\n         self.align_ylabels(axs=axs)\n \n", "instance_id": "matplotlib__matplotlib-25332"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex d3a06f2b31..ba7dd7af02 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -49,6 +49,11 @@ from . import _docutil as __\n try:\n     from . import _wcs\n except ImportError:\n+    try:\n+        _ASTROPY_SETUP_\n+    except NameError:\n+        _ASTROPY_SETUP_ = False\n+\n     if not _ASTROPY_SETUP_:\n         raise\n     else:\n@@ -57,6 +62,14 @@ except ImportError:\n from ..utils.compat import possible_filename\n from ..utils.exceptions import AstropyWarning, AstropyUserWarning, AstropyDeprecationWarning\n \n+# Define missing constants\n+WCSHDO_P14 = 0x1000\n+WCSHDO_all = 0xFFFF\n+WCSHDO_safe = 0x0000\n+WCSSUB_CELESTIAL = 0x0001\n+WCSSUB_SPECTRAL = 0x0002\n+WCSSUB_STOKES = 0x0004\n+\n __all__ = ['FITSFixedWarning', 'WCS', 'find_all_wcs',\n            'DistortionLookupTable', 'Sip', 'Tabprm', 'Wcsprm',\n            'WCSBase', 'validate', 'WcsError', 'SingularMatrixError',\n@@ -1212,6 +1225,8 @@ reduce these to 2 dimensions using the naxis kwarg.\n         \"\"\"\n \n         def _return_list_of_arrays(axes, origin):\n+            if any(isinstance(ax, (list, np.ndarray)) and len(ax) == 0 for ax in axes):\n+                return [np.array([]) for _ in range(self.naxis)]\n             try:\n                 axes = np.broadcast_arrays(*axes)\n             except ValueError:\n@@ -1231,6 +1246,8 @@ reduce these to 2 dimensions using the naxis kwarg.\n                     for i in range(output.shape[1])]\n \n         def _return_single_array(xy, origin):\n+            if isinstance(xy, (list, np.ndarray)) and xy.size == 0:\n+                return np.array([]).reshape((0, self.naxis))\n             if xy.shape[-1] != self.naxis:\n                 raise ValueError(\n                     \"When providing two arguments, the array must be \"\n", "instance_id": "astropy__astropy-7746"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex c9e77a901f..5ca29c97ef 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -6215,7 +6215,15 @@ def sqf_list(f, *gens, **args):\n     (2, [(x + 1, 2), (x + 2, 3)])\n \n     \"\"\"\n-    return _generic_factor_list(f, gens, args, method='sqf')\n+    coeff, factors = _generic_factor_list(f, gens, args, method='sqf')\n+    # Group factors by their multiplicity\n+    grouped_factors = {}\n+    for factor, multiplicity in factors:\n+        if factor in grouped_factors:\n+            grouped_factors[factor] += multiplicity\n+        else:\n+            grouped_factors[factor] = multiplicity\n+    return coeff, list(grouped_factors.items())\n \n \n @public\n@@ -6233,7 +6241,14 @@ def sqf(f, *gens, **args):\n     2*(x + 1)**2*(x + 2)**3\n \n     \"\"\"\n-    return _generic_factor(f, gens, args, method='sqf')\n+    from sympy import together\n+    f = together(f)\n+    from sympy import together\n+    f = together(f)\n+    from sympy import together\n+    f = together(f)\n+    coeff, factors = sqf_list(f, *gens, **args)\n+    return _keep_coeff(coeff, Mul(*[factor**multiplicity for factor, multiplicity in factors]))\n \n \n @public\n", "instance_id": "sympy__sympy-18698"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/seaborn/_stats/regression.py b/seaborn/_stats/regression.py\nindex 7b7ddc8d..7359b027 100644\n--- a/seaborn/_stats/regression.py\n+++ b/seaborn/_stats/regression.py\n@@ -21,6 +21,7 @@ class PolyFit(Stat):\n \n     def _fit_predict(self, data):\n \n+        data = data.dropna(subset=[\"x\", \"y\"])\n         x = data[\"x\"]\n         y = data[\"y\"]\n         if x.nunique() <= self.order:\n", "instance_id": "mwaskom__seaborn-3010"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/core/management/commands/dbshell.py b/django/core/management/commands/dbshell.py\nindex 30d2765afb..cbc989c715 100644\n--- a/django/core/management/commands/dbshell.py\n+++ b/django/core/management/commands/dbshell.py\n@@ -27,7 +27,12 @@ class Command(BaseCommand):\n     def handle(self, **options):\n         connection = connections[options[\"database\"]]\n         try:\n-            connection.client.runshell(options[\"parameters\"])\n+            # Ensure parameters are passed before the database name for PostgreSQL\n+            if connection.vendor == 'postgresql':\n+                parameters = options[\"parameters\"] + [connection.settings_dict['NAME']]\n+            else:\n+                parameters = options[\"parameters\"]\n+            connection.client.runshell(parameters)\n         except FileNotFoundError:\n             # Note that we're assuming the FileNotFoundError relates to the\n             # command missing. It could be raised for some other reason, in\n", "instance_id": "django__django-15851"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c30b..0567dd8ec2 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2524,7 +2524,11 @@ class AutoFieldMeta(type):\n         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n \n     def __subclasscheck__(self, subclass):\n-        return subclass in self._subclasses or super().__subclasscheck__(subclass)\n+        return (\n+            subclass in self._subclasses or\n+            any(issubclass(subclass, cls) for cls in self._subclasses) or\n+            super().__subclasscheck__(subclass)\n+        )\n \n \n class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):\n", "instance_id": "django__django-14238"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex ebe5da43e2..8868adf306 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -20,6 +20,7 @@ import numpy as np\n import matplotlib as mpl\n from . import (_api, _docstring, backend_tools, cbook, collections, colors,\n                text as mtext, ticker, transforms)\n+import matplotlib.pyplot as pyplot\n from .lines import Line2D\n from .patches import Circle, Rectangle, Ellipse, Polygon\n from .transforms import TransformedPatchPath, Affine2D\n@@ -584,6 +585,7 @@ class Slider(SliderBase):\n         self.val = val\n         if self.eventson:\n             self._observers.process('changed', val)\n+            pyplot.pause(0.001)  # Allow the GUI event loop to process other events\n \n     def on_changed(self, func):\n         \"\"\"\n@@ -967,6 +969,7 @@ class RangeSlider(SliderBase):\n         self.val = (vmin, vmax)\n         if self.eventson:\n             self._observers.process(\"changed\", (vmin, vmax))\n+            pyplot.pause(0.001)  # Allow the GUI event loop to process other events\n \n     def on_changed(self, func):\n         \"\"\"\n", "instance_id": "matplotlib__matplotlib-25433"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/parsing/latex/_antlr/latexparser.py b/sympy/parsing/latex/_antlr/latexparser.py\nindex 0fc7e5a7a6..1de7795427 100644\n--- a/sympy/parsing/latex/_antlr/latexparser.py\n+++ b/sympy/parsing/latex/_antlr/latexparser.py\n@@ -2309,14 +2309,22 @@ def frac(self):\n             self.state = 306\n             self.match(LaTeXParser.L_BRACE)\n             self.state = 307\n-            localctx.upper = self.expr()\n+            self.match(LaTeXParser.L_PAREN)\n             self.state = 308\n-            self.match(LaTeXParser.R_BRACE)\n+            localctx.upper = self.expr()\n             self.state = 309\n-            self.match(LaTeXParser.L_BRACE)\n+            self.match(LaTeXParser.R_PAREN)\n             self.state = 310\n-            localctx.lower = self.expr()\n+            self.match(LaTeXParser.R_BRACE)\n             self.state = 311\n+            self.match(LaTeXParser.L_BRACE)\n+            self.state = 312\n+            self.match(LaTeXParser.L_PAREN)\n+            self.state = 313\n+            localctx.lower = self.expr()\n+            self.state = 314\n+            self.match(LaTeXParser.R_PAREN)\n+            self.state = 315\n             self.match(LaTeXParser.R_BRACE)\n         except RecognitionException as re:\n             localctx.exception = re\n", "instance_id": "sympy__sympy-21612"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/preprocessing/label.py b/sklearn/preprocessing/label.py\nindex 61b8d4a21..62253a00a 100644\n--- a/sklearn/preprocessing/label.py\n+++ b/sklearn/preprocessing/label.py\n@@ -92,6 +92,8 @@ class LabelEncoder(BaseEstimator, TransformerMixin):\n         -------\n         self : returns an instance of self.\n         \"\"\"\n+        if len(y) == 0:\n+            return np.array([], dtype=self.classes_.dtype)\n         y = column_or_1d(y, warn=True)\n         self.classes_ = np.unique(y)\n         return self\n", "instance_id": "scikit-learn__scikit-learn-10508"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..04cc460ac3 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,13 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=DjangoJSONEncoder):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n     \"\"\"\n-    from django.core.serializers.json import DjangoJSONEncoder\n-\n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n", "instance_id": "django__django-15789"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/core/handlers/exception.py b/django/core/handlers/exception.py\nindex 66443ce560..630fd2984d 100644\n--- a/django/core/handlers/exception.py\n+++ b/django/core/handlers/exception.py\n@@ -41,7 +41,10 @@ def convert_exception_to_response(get_response):\n def response_for_exception(request, exc):\n     if isinstance(exc, Http404):\n         if settings.DEBUG:\n-            response = debug.technical_404_response(request, exc)\n+            if hasattr(exc, 'converter_error'):\n+                response = debug.technical_500_response(request, *sys.exc_info(), status_code=404)\n+            else:\n+                response = debug.technical_404_response(request, exc)\n         else:\n             response = get_exception_response(request, get_resolver(get_urlconf()), 404, exc)\n \ndiff --git a/django/urls/converters.py b/django/urls/converters.py\nindex bb8478e32f..3a6d5f4cd6 100644\n--- a/django/urls/converters.py\n+++ b/django/urls/converters.py\n@@ -6,7 +6,11 @@ class IntConverter:\n     regex = '[0-9]+'\n \n     def to_python(self, value):\n-        return int(value)\n+        try:\n+            return int(value)\n+        except ValueError:\n+            from django.http import Http404\n+            raise Http404(f\"Invalid value '{value}' for path converter 'int'.\")\n \n     def to_url(self, value):\n         return str(value)\n@@ -26,7 +30,11 @@ class UUIDConverter:\n     regex = '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'\n \n     def to_python(self, value):\n-        return uuid.UUID(value)\n+        try:\n+            return uuid.UUID(value)\n+        except ValueError:\n+            from django.http import Http404\n+            raise Http404(f\"Invalid value '{value}' for path converter 'uuid'.\")\n \n     def to_url(self, value):\n         return str(value)\n", "instance_id": "django__django-11620"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 011181a40..e19a55eb3 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -726,3 +726,6 @@ class RaisesContext:\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n         return suppress_exception\n+\n+    def __str__(self):\n+        return str(self.excinfo.value)\n", "instance_id": "pytest-dev__pytest-5413"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..92eb3db01d 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -103,6 +103,7 @@ import warnings\n \n import numpy\n from packaging.version import parse as parse_version\n+from distutils.version import LooseVersion\n \n # cbook must import matplotlib only within function\n # definitions, so it is safe to import from it here.\n@@ -133,7 +134,7 @@ __bibtex__ = r\"\"\"@Article{Hunter:2007,\n def __getattr__(name):\n     if name == \"__version__\":\n         import setuptools_scm\n-        global __version__  # cache it.\n+        global __version__, version_info, __loose_version__  # cache it.\n         # Only shell out to a git subprocess if really needed, and not on a\n         # shallow clone, such as those used by CI, as the latter would trigger\n         # a warning from setuptools_scm.\n@@ -147,7 +148,13 @@ def __getattr__(name):\n             )\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n+        version_info = tuple(map(int, __version__.split('.')[:3]))\n+        __loose_version__ = LooseVersion(__version__)\n         return __version__\n+    elif name == \"version_info\":\n+        return version_info\n+    elif name == \"__loose_version__\":\n+        return __loose_version__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n", "instance_id": "matplotlib__matplotlib-18869"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\nindex ea7e3a2d94..e7644d7d13 100644\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -94,7 +94,9 @@ def _print_list(self, expr):\n     _print_Tuple = _print_list\n \n     def _print_Function(self, expr):\n-        if expr.func.__name__ in self.known_functions:\n+        if expr.func.__name__ == \"Max\":\n+            return \"Max[%s]\" % self.stringify(expr.args, \", \")\n+        elif expr.func.__name__ in self.known_functions:\n             cond_mfunc = self.known_functions[expr.func.__name__]\n             for cond, mfunc in cond_mfunc:\n                 if cond(*expr.args):\n", "instance_id": "sympy__sympy-15345"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex 24d89897f7..2919bc6c03 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -120,26 +120,15 @@ def _hashable_content(self):\n         return self._args\n \n     def __eq__(self, other):\n+        if isinstance(other, Expr):\n+            return self._hashable_content() == other._hashable_content()\n         try:\n-            other = sympify(other)\n-            if not isinstance(other, Expr):\n-                return False\n-        except (SympifyError, SyntaxError):\n-            return False\n-        # check for pure number expr\n-        if  not (self.is_Number and other.is_Number) and (\n-                type(self) != type(other)):\n+            other = sympify(other, strict=True)\n+        except SympifyError:\n             return False\n-        a, b = self._hashable_content(), other._hashable_content()\n-        if a != b:\n+        if not isinstance(other, Expr):\n             return False\n-        # check number *in* an expression\n-        for a, b in zip(a, b):\n-            if not isinstance(a, Expr):\n-                continue\n-            if a.is_Number and type(a) != type(b):\n-                return False\n-        return True\n+        return self._hashable_content() == other._hashable_content()\n \n     # ***************\n     # * Arithmetics *\ndiff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex ed4ea6ce5e..5f373be516 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -322,19 +322,18 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n                 from ..tensor.array import Array\n                 return Array(a.flat, a.shape)  # works with e.g. NumPy arrays\n \n-    if not isinstance(a, string_types):\n+    if not isinstance(a, (string_types, CantSympify)):\n         for coerce in (float, int):\n             try:\n                 coerced = coerce(a)\n             except (TypeError, ValueError):\n                 continue\n-            # XXX: AttributeError only needed here for Py2\n-            except AttributeError:\n-                continue\n             try:\n-                return sympify(coerced)\n+                return sympify(coerced, strict=strict)\n             except SympifyError:\n                 continue\n+    if isinstance(a, CantSympify):\n+        raise SympifyError(a)\n \n     if strict:\n         raise SympifyError(a)\ndiff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 2ab43d9b31..7b3b18c51b 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -11,6 +11,8 @@\n import unicodedata\n \n from sympy.core.compatibility import exec_, StringIO, iterable\n+from sympy.core.sympify import SympifyError\n+from sympy.core.sympify import SympifyError\n from sympy.core.basic import Basic\n from sympy.core import Symbol\n from sympy.core.function import arity\n@@ -899,8 +901,11 @@ def eval_expr(code, local_dict, global_dict):\n \n     Generally, ``parse_expr`` should be used.\n     \"\"\"\n-    expr = eval(\n-        code, global_dict, local_dict)  # take local objects in preference\n+    try:\n+        expr = eval(\n+            code, global_dict, local_dict)  # take local objects in preference\n+    except AttributeError as e:\n+        raise SympifyError(code, e)\n \n     return expr\n \n", "instance_id": "sympy__sympy-18057"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "astropy__astropy-14995"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..3b94572b10 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -687,10 +687,10 @@ class URLField(CharField):\n             \"\"\"\n             try:\n                 return list(urlsplit(url))\n-            except ValueError:\n+            except ValueError as e:\n                 # urlparse.urlsplit can raise a ValueError with some\n                 # misformatted URLs.\n-                raise ValidationError(self.error_messages['invalid'], code='invalid')\n+                raise ValidationError(self.error_messages['invalid'], code='invalid') from e\n \n         value = super().to_python(value)\n         if value:\n", "instance_id": "django__django-15202"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "django__django-12113"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex f88662de12..5fe1198529 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -2539,6 +2539,100 @@ class RelatedPopulator:\n     model instance.\n     \"\"\"\n \n+    def __init__(self, klass_info, select, db):\n+        self.db = db\n+        # Pre-compute needed attributes. The attributes are:\n+        #  - model_cls: the possibly deferred model class to instantiate\n+        #  - either:\n+        #    - cols_start, cols_end: usually the columns in the row are\n+        #      in the same order model_cls.__init__ expects them, so we\n+        #      can instantiate by model_cls(*row[cols_start:cols_end])\n+        #    - reorder_for_init: When select_related descends to a child\n+        #      class, then we want to reuse the already selected parent\n+        #      data. However, in this case the parent data isn't necessarily\n+        #      in the same order that Model.__init__ expects it to be, so\n+        #      we have to reorder the parent data. The reorder_for_init\n+        #      attribute contains a function used to reorder the field data\n+        #      in the order __init__ expects it.\n+        #  - pk_idx: the index of the primary key field in the reordered\n+        #    model data. Used to check if a related object exists at all.\n+        #  - init_list: the field attnames fetched from the database. For\n+        #    deferred models this isn't the same as all attnames of the\n+        #    model's fields.\n+        #  - related_populators: a list of RelatedPopulator instances if\n+        #    select_related() descends to related models from this model.\n+        #  - local_setter, remote_setter: Methods to set cached values on\n+        #    the object being populated and on the remote object. Usually\n+        #    these are Field.set_cached_value() methods.\n+        select_fields = klass_info[\"select_fields\"]\n+        from_parent = klass_info[\"from_parent\"]\n+        if not from_parent:\n+            self.cols_start = select_fields[0]\n+            self.cols_end = select_fields[-1] + 1\n+            self.init_list = [\n+                f[0].target.attname for f in select[self.cols_start : self.cols_end]\n+            ]\n+            self.reorder_for_init = None\n+        else:\n+            attname_indexes = {\n+                select[idx][0].target.attname: idx for idx in select_fields\n+            }\n+            model_init_attnames = (\n+                f.attname for f in klass_info[\"model\"]._meta.concrete_fields\n+            )\n+            self.init_list = [\n+                attname for attname in model_init_attnames if attname in attname_indexes\n+            ]\n+            self.reorder_for_init = operator.itemgetter(\n+                *[attname_indexes[attname] for attname in self.init_list]\n+            )\n+\n+        self.model_cls = klass_info[\"model\"]\n+        self.pk_idx = self.init_list.index(self.model_cls._meta.pk.attname)\n+        self.related_populators = get_related_populators(klass_info, select, self.db)\n+        self.local_setter = klass_info[\"local_setter\"]\n+        self.remote_setter = klass_info[\"remote_setter\"]\n+\n+    def populate(self, row, from_obj):\n+        if self.reorder_for_init:\n+            obj_data = self.reorder_for_init(row)\n+        else:\n+            obj_data = row[self.cols_start : self.cols_end]\n+        if obj_data[self.pk_idx] is None:\n+            obj = None\n+        else:\n+            obj = self.model_cls.from_db(self.db, self.init_list, obj_data)\n+            for rel_iter in self.related_populators:\n+                rel_iter.populate(row, obj)\n+        if obj is not None:\n+            self.local_setter(from_obj, obj)\n+            self.remote_setter(obj, from_obj)\n+        else:\n+            self.local_setter(from_obj, None)\n+\n+\n+def get_related_populators(klass_info, select, db):\n+    iterators = []\n+    related_klass_infos = klass_info.get(\"related_klass_infos\", [])\n+    for rel_klass_info in related_klass_infos:\n+        rel_cls = RelatedPopulator(rel_klass_info, select, db)\n+        iterators.append(rel_cls)\n+    return iterators\n+    \"\"\"\n+    RelatedPopulator is used for select_related() object instantiation.\n+\n+    The idea is that each select_related() model will be populated by a\n+    different RelatedPopulator instance. The RelatedPopulator instances get\n+    klass_info and select (computed in SQLCompiler) plus the used db as\n+    input for initialization. That data is used to compute which columns\n+    to use, how to instantiate the model, and how to populate the links\n+    between the objects.\n+\n+    The actual creation of the objects is done in populate() method. This\n+    method gets row and from_obj as input and populates the select_related()\n+    model instance.\n+    \"\"\"\n+\n     def __init__(self, klass_info, select, db):\n         self.db = db\n         # Pre-compute needed attributes. The attributes are:\n", "instance_id": "django__django-16408"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 171a3e7b0..0f72f0ee2 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1716,13 +1716,19 @@ class DataDocumenter(ModuleLevelDocumenter):\n                 annotations = {}\n \n             if self.objpath[-1] in annotations:\n-                objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n+                objrepr = annotations.get(self.objpath[-1])\n+                if isinstance(objrepr, str):\n+                    objrepr = self.config.autodoc_type_aliases.get(objrepr, objrepr)\n+                else:\n+                    objrepr = stringify_typehint(objrepr)\n                 self.add_line('   :type: ' + objrepr, sourcename)\n             else:\n                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])\n                 if self.analyzer and key in self.analyzer.annotations:\n-                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n-                                  sourcename)\n+                    objrepr = self.analyzer.annotations[key]\n+                    if isinstance(objrepr, str):\n+                        objrepr = self.config.autodoc_type_aliases.get(objrepr, objrepr)\n+                    self.add_line('   :type: ' + objrepr, sourcename)\n \n             try:\n                 if self.object is UNINITIALIZED_ATTR:\n@@ -2107,13 +2113,19 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n                 annotations = {}\n \n             if self.objpath[-1] in annotations:\n-                objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n+                objrepr = annotations.get(self.objpath[-1])\n+                if isinstance(objrepr, str):\n+                    objrepr = self.config.autodoc_type_aliases.get(objrepr, objrepr)\n+                else:\n+                    objrepr = stringify_typehint(objrepr)\n                 self.add_line('   :type: ' + objrepr, sourcename)\n             else:\n                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])\n                 if self.analyzer and key in self.analyzer.annotations:\n-                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n-                                  sourcename)\n+                    objrepr = self.analyzer.annotations[key]\n+                    if isinstance(objrepr, str):\n+                        objrepr = self.config.autodoc_type_aliases.get(objrepr, objrepr)\n+                    self.add_line('   :type: ' + objrepr, sourcename)\n \n             # data descriptors do not have useful values\n             if not self._datadescriptor:\ndiff --git a/sphinx/ext/autodoc/directive.py b/sphinx/ext/autodoc/directive.py\nindex 9a3428f5d..75bc64ae7 100644\n--- a/sphinx/ext/autodoc/directive.py\n+++ b/sphinx/ext/autodoc/directive.py\n@@ -86,7 +86,11 @@ def process_documenter_options(documenter: \"Type[Documenter]\", config: Config, o\n             if name in config.autodoc_default_options and not negated:\n                 options[name] = config.autodoc_default_options[name]\n \n-    return Options(assemble_option_dict(options.items(), documenter.option_spec))\n+    assembled_options = assemble_option_dict(options.items(), documenter.option_spec)\n+    for key, value in assembled_options.items():\n+        if isinstance(value, str):\n+            assembled_options[key] = config.autodoc_type_aliases.get(value, value)\n+    return Options(assembled_options)\n \n \n def parse_generated_content(state: RSTState, content: StringList, documenter: Documenter\n", "instance_id": "sphinx-doc__sphinx-8435"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "django__django-11910"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..101628cd95 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -13,8 +13,12 @@ from .mpl_axes import Axes\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    if isinstance(ax.axis, dict):\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    else:\n+        ax.tick_params(axis='x', labelbottom=bottom_on)\n+        ax.tick_params(axis='y', labelleft=left_on)\n \n \n class CbarAxesBase:\n", "instance_id": "matplotlib__matplotlib-26020"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex e1f97190c0..037157ba49 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -1,6 +1,7 @@\n from typing import Dict, Callable\n \n from sympy.core import S, Add, Expr, Basic, Mul\n+from sympy.functions import Abs, arg\n from sympy.logic.boolalg import Boolean\n \n from sympy.assumptions import ask, Q  # type: ignore\n@@ -50,7 +51,11 @@ def refine(expr, assumptions=True):\n         args = [refine(arg, assumptions) for arg in expr.args]\n         # TODO: this will probably not work with Integral or Polynomial\n         expr = expr.func(*args)\n-    if hasattr(expr, '_eval_refine'):\n+    if isinstance(expr, Abs):\n+        ref_expr = refine_abs(expr, assumptions)\n+    elif isinstance(expr, arg):\n+        ref_expr = refine_arg(expr, assumptions)\n+    elif hasattr(expr, '_eval_refine'):\n         ref_expr = expr._eval_refine(assumptions)\n         if ref_expr is not None:\n             return ref_expr\n@@ -373,7 +378,33 @@ def refine_matrixelement(expr, assumptions):\n             return expr\n         return MatrixElement(matrix, j, i)\n \n+def refine_arg(expr, assumptions):\n+    \"\"\"\n+    Handler for the argument function.\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy import Q, arg\n+    >>> from sympy.assumptions.refine import refine_arg\n+    >>> from sympy.abc import x\n+    >>> refine_arg(arg(x), Q.positive(x))\n+    0\n+    >>> refine_arg(arg(x), Q.negative(x))\n+    pi\n+    \"\"\"\n+    from sympy import arg, pi\n+    arg_expr = expr.args[0]\n+    if ask(Q.positive(arg_expr), assumptions):\n+        return S.Zero\n+    if ask(Q.negative(arg_expr), assumptions):\n+        return pi\n+    return expr\n+\n handlers_dict = {\n+    'Abs': refine_abs,\n+    'Pow': refine_Pow,\n+    'arg': refine_arg,\n     'Abs': refine_abs,\n     'Pow': refine_Pow,\n     'atan2': refine_atan2,\n", "instance_id": "sympy__sympy-21055"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex 9cc4fec441..21c4a597f3 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -478,6 +478,9 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n     try:\n         a = a.replace('\\n', '')\n         expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n+        if not evaluate:\n+            return expr\n+        expr = expr.simplify()\n     except (TokenError, SyntaxError) as exc:\n         raise SympifyError('could not parse %r' % a, exc)\n \ndiff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex 5f5eab3b9d..9f4d941ac5 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -37,7 +37,7 @@\n \n \n \n-def separatevars(expr, symbols=[], dict=False, force=False):\n+def separatevars(expr, symbols=[], dict=False, force=False, evaluate=None):\n     \"\"\"\n     Separates variables in an expression, if possible.  By\n     default, it separates with respect to all symbols in an\n@@ -104,7 +104,7 @@ def separatevars(expr, symbols=[], dict=False, force=False):\n     True\n \n     \"\"\"\n-    expr = sympify(expr)\n+    expr = sympify(expr, evaluate=evaluate)\n     if dict:\n         return _separatevars_dict(_separatevars(expr, force), symbols)\n     else:\n", "instance_id": "sympy__sympy-20322"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "django__django-16229"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a9f66740f..cc1d20b3a 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -38,7 +38,7 @@ def _check_shape(param, param_shape, name):\n                          \"but got %s\" % (name, param_shape, param.shape))\n \n \n-def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n+def _check_X(X, n_clusters=None, n_features=None, ensure_min_samples=1):\n     \"\"\"Check the input data X.\n \n     Parameters\n@@ -53,10 +53,10 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     \"\"\"\n     X = check_array(X, dtype=[np.float64, np.float32],\n                     ensure_min_samples=ensure_min_samples)\n-    if n_components is not None and X.shape[0] < n_components:\n-        raise ValueError('Expected n_samples >= n_components '\n-                         'but got n_components = %d, n_samples = %d'\n-                         % (n_components, X.shape[0]))\n+    if n_clusters is not None and X.shape[0] < n_clusters:\n+        raise ValueError('Expected n_samples >= n_clusters '\n+                         'but got n_clusters = %d, n_samples = %d'\n+                         % (n_clusters, X.shape[0]))\n     if n_features is not None and X.shape[1] != n_features:\n         raise ValueError(\"Expected the input data X have %d features, \"\n                          \"but got %d features\"\n@@ -71,10 +71,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n     provides basic common methods for mixture models.\n     \"\"\"\n \n-    def __init__(self, n_components, tol, reg_covar,\n+    def __init__(self, n_clusters, tol, reg_covar,\n                  max_iter, n_init, init_params, random_state, warm_start,\n                  verbose, verbose_interval):\n-        self.n_components = n_components\n+        self.n_clusters = n_clusters\n         self.tol = tol\n         self.reg_covar = reg_covar\n         self.max_iter = max_iter\n@@ -92,10 +92,10 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n         ----------\n         X : array-like, shape (n_samples, n_features)\n         \"\"\"\n-        if self.n_components < 1:\n-            raise ValueError(\"Invalid value for 'n_components': %d \"\n+        if self.n_clusters < 1:\n+            raise ValueError(\"Invalid value for 'n_clusters': %d \"\n                              \"Estimation requires at least one component\"\n-                             % self.n_components)\n+                             % self.n_clusters)\n \n         if self.tol < 0.:\n             raise ValueError(\"Invalid value for 'tol': %.5f \"\n@@ -144,12 +144,12 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n         n_samples, _ = X.shape\n \n         if self.init_params == 'kmeans':\n-            resp = np.zeros((n_samples, self.n_components))\n-            label = cluster.KMeans(n_clusters=self.n_components, n_init=1,\n+            resp = np.zeros((n_samples, self.n_clusters))\n+            label = cluster.KMeans(n_clusters=self.n_clusters, n_init=1,\n                                    random_state=random_state).fit(X).labels_\n             resp[np.arange(n_samples), label] = 1\n         elif self.init_params == 'random':\n-            resp = random_state.rand(n_samples, self.n_components)\n+            resp = random_state.rand(n_samples, self.n_clusters)\n             resp /= resp.sum(axis=1)[:, np.newaxis]\n         else:\n             raise ValueError(\"Unimplemented initialization method '%s'\"\n@@ -188,11 +188,11 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n         -------\n         self\n         \"\"\"\n-        X = _check_X(X, self.n_components, ensure_min_samples=2)\n+        X = _check_X(X, self.n_clusters, ensure_min_samples=2)\n         self._check_initial_parameters(X)\n \n         # if we enable warm_start, we will have a unique initialisation\n-        do_init = not(self.warm_start and hasattr(self, 'converged_'))\n+        do_init = not (self.warm_start and hasattr(self, 'converged_'))\n         n_init = self.n_init if do_init else 1\n \n         max_lower_bound = -np.infty\n@@ -229,6 +229,7 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n                 max_lower_bound = self.lower_bound_\n                 best_params = self._get_parameters()\n                 best_n_iter = n_iter\n+                self.labels_ = self.predict(X)\n \n         if not self.converged_:\n             warnings.warn('Initialization %d did not converge. '\n@@ -242,6 +243,23 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n \n         return self\n \n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit the model and predict the labels for the data samples in X.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+            List of n_features-dimensional data points. Each row\n+            corresponds to a single data point.\n+\n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Component labels.\n+        \"\"\"\n+        self.fit(X, y)\n+        return self.labels_\n+\n     def _e_step(self, X):\n         \"\"\"E step.\n \ndiff --git a/sklearn/mixture/gmm.py b/sklearn/mixture/gmm.py\nindex b3c231314..776b4ab7c 100644\n--- a/sklearn/mixture/gmm.py\n+++ b/sklearn/mixture/gmm.py\n@@ -256,11 +256,11 @@ class _GMMBase(BaseEstimator):\n \n     \"\"\"\n \n-    def __init__(self, n_components=1, covariance_type='diag',\n+    def __init__(self, n_clusters=1, covariance_type='diag',\n                  random_state=None, tol=1e-3, min_covar=1e-3,\n                  n_iter=100, n_init=1, params='wmc', init_params='wmc',\n                  verbose=0):\n-        self.n_components = n_components\n+        self.n_clusters = n_clusters\n         self.covariance_type = covariance_type\n         self.tol = tol\n         self.min_covar = min_covar\n@@ -416,7 +416,7 @@ class _GMMBase(BaseEstimator):\n         # decide which component to use for each sample\n         comps = weight_cdf.searchsorted(rand)\n         # for each component, generate all needed samples\n-        for comp in range(self.n_components):\n+        for comp in range(self.n_clusters):\n             # occurrences of current component in X\n             comp_in_X = (comp == comps)\n             # number of those occurrences\n@@ -450,7 +450,8 @@ class _GMMBase(BaseEstimator):\n         -------\n         C : array, shape = (n_samples,) component memberships\n         \"\"\"\n-        return self._fit(X, y).argmax(axis=1)\n+        self.labels_ = self._fit(X, y).argmax(axis=1)\n+        return self.labels_\n \n     def _fit(self, X, y=None, do_prediction=False):\n         \"\"\"Estimate model parameters with the EM algorithm.\n@@ -477,10 +478,10 @@ class _GMMBase(BaseEstimator):\n         # initialization step\n         X = check_array(X, dtype=np.float64, ensure_min_samples=2,\n                         estimator=self)\n-        if X.shape[0] < self.n_components:\n+        if X.shape[0] < self.n_clusters:\n             raise ValueError(\n-                'GMM estimation with %s components, but got only %s samples' %\n-                (self.n_components, X.shape[0]))\n+                'GMM estimation with %s clusters, but got only %s samples' %\n+                (self.n_clusters, X.shape[0]))\n \n         max_log_prob = -np.infty\n \n@@ -494,7 +495,7 @@ class _GMMBase(BaseEstimator):\n \n             if 'm' in self.init_params or not hasattr(self, 'means_'):\n                 self.means_ = cluster.KMeans(\n-                    n_clusters=self.n_components,\n+                    n_clusters=self.n_clusters,\n                     random_state=self.random_state).fit(X).cluster_centers_\n                 if self.verbose > 1:\n                     print('\\tMeans have been initialized.')\n@@ -510,8 +511,7 @@ class _GMMBase(BaseEstimator):\n                 if not cv.shape:\n                     cv.shape = (1, 1)\n                 self.covars_ = \\\n-                    distribute_covar_matrix_to_match_covariance_type(\n-                        cv, self.covariance_type, self.n_components)\n+                    distribute_covar_matrix_to_match_covariance_type(cv, self.covariance_type, self.n_clusters)\n                 if self.verbose > 1:\n                     print('\\tCovariance matrices have been initialized.')\n \n@@ -551,9 +551,12 @@ class _GMMBase(BaseEstimator):\n             if self.n_iter:\n                 if current_log_likelihood > max_log_prob:\n                     max_log_prob = current_log_likelihood\n-                    best_params = {'weights': self.weights_,\n-                                   'means': self.means_,\n-                                   'covars': self.covars_}\n+                    best_params = {\n+                        'weights': self.weights_,\n+                        'means': self.means_,\n+                        'covars': self.covars_,\n+                    }\n+                    self.labels_ = self.predict(X)\n                     if self.verbose > 1:\n                         print('\\tBetter parameters were found.')\n \n", "instance_id": "scikit-learn__scikit-learn-11281"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/pylint/config/arguments_manager.py b/pylint/config/arguments_manager.py\nindex eda1a583d..94a74d748 100644\n--- a/pylint/config/arguments_manager.py\n+++ b/pylint/config/arguments_manager.py\n@@ -12,6 +12,10 @@ import copy\n import optparse  # pylint: disable=deprecated-module\n import os\n import re\n+try:\n+    import regex\n+except ImportError:\n+    regex = None\n import sys\n import textwrap\n import warnings\n@@ -780,7 +784,14 @@ class _ArgumentsManager:\n                 DeprecationWarning,\n             )\n \n-        self.config = self._arg_parser.parse_known_args(\n-            [f\"--{optname.replace('_', '-')}\", _parse_rich_type_value(value)],\n-            self.config,\n-        )[0]\n+        # Use regex module if the pattern contains \\p{ for Unicode property escapes\n+        if regex and isinstance(value, str) and r\"\\p{\" in value:\n+            self.config = self._arg_parser.parse_known_args(\n+                [f\"--{optname.replace('_', '-')}\", regex.compile(value)],\n+                self.config,\n+            )[0]\n+        else:\n+            self.config = self._arg_parser.parse_known_args(\n+                [f\"--{optname.replace('_', '-')}\", _parse_rich_type_value(value)],\n+                self.config,\n+            )[0]\n", "instance_id": "pylint-dev__pylint-7228"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..d38802e0b 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1216,58 +1216,18 @@ class RepeatedKFold(_RepeatedSplits):\n         super().__init__(\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return ('%s(n_splits=%d, n_repeats=%d, random_state=%s)'\n+                % (self.__class__.__name__,\n+                   self.cvargs['n_splits'], self.n_repeats,\n+                   self.random_state))\n \n-class RepeatedStratifiedKFold(_RepeatedSplits):\n-    \"\"\"Repeated Stratified K-Fold cross validator.\n-\n-    Repeats Stratified K-Fold n times with different randomization in each\n-    repetition.\n-\n-    Read more in the :ref:`User Guide <cross_validation>`.\n-\n-    Parameters\n-    ----------\n-    n_splits : int, default=5\n-        Number of folds. Must be at least 2.\n-\n-    n_repeats : int, default=10\n-        Number of times cross-validator needs to be repeated.\n-\n-    random_state : None, int or RandomState, default=None\n-        Random state to be used to generate random state for each\n-        repetition.\n-\n-    Examples\n-    --------\n-    >>> import numpy as np\n-    >>> from sklearn.model_selection import RepeatedStratifiedKFold\n-    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n-    >>> y = np.array([0, 0, 1, 1])\n-    >>> rskf = RepeatedStratifiedKFold(n_splits=2, n_repeats=2,\n-    ...     random_state=36851234)\n-    >>> for train_index, test_index in rskf.split(X, y):\n-    ...     print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n-    ...     X_train, X_test = X[train_index], X[test_index]\n-    ...     y_train, y_test = y[train_index], y[test_index]\n-    ...\n-    TRAIN: [1 2] TEST: [0 3]\n-    TRAIN: [0 3] TEST: [1 2]\n-    TRAIN: [1 3] TEST: [0 2]\n-    TRAIN: [0 2] TEST: [1 3]\n-\n-    Notes\n-    -----\n-    Randomized CV splitters may return different results for each call of\n-    split. You can make the results identical by setting ``random_state``\n-    to an integer.\n \n-    See also\n-    --------\n-    RepeatedKFold: Repeats K-Fold n times.\n-    \"\"\"\n-    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n-        super().__init__(\n-            StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n+    def __repr__(self):\n+        return ('%s(n_splits=%d, n_repeats=%d, random_state=%s)'\n+                % (self.__class__.__name__,\n+                   self.cvargs['n_splits'], self.n_repeats,\n+                   self.random_state))\n \n \n class BaseShuffleSplit(metaclass=ABCMeta):\n", "instance_id": "scikit-learn__scikit-learn-14983"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/core/management/commands/shell.py b/django/core/management/commands/shell.py\nindex 2b306a579e..571d120467 100644\n--- a/django/core/management/commands/shell.py\n+++ b/django/core/management/commands/shell.py\n@@ -84,13 +84,13 @@ class Command(BaseCommand):\n     def handle(self, **options):\n         # Execute the command and exit.\n         if options['command']:\n-            exec(options['command'])\n+            exec(options['command'], {})\n             return\n \n         # Execute stdin if it has anything to read and exit.\n         # Not supported on Windows due to select.select() limitations.\n         if sys.platform != 'win32' and not sys.stdin.isatty() and select.select([sys.stdin], [], [], 0)[0]:\n-            exec(sys.stdin.read())\n+            exec(sys.stdin.read(), {})\n             return\n \n         available_shells = [options['interface']] if options['interface'] else self.shells\n", "instance_id": "django__django-13660"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/utils/text.py b/django/utils/text.py\nindex fb5f6298c4..3ba4bbb3f4 100644\n--- a/django/utils/text.py\n+++ b/django/utils/text.py\n@@ -403,7 +403,7 @@ def slugify(value, allow_unicode=False):\n     else:\n         value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore').decode('ascii')\n     value = re.sub(r'[^\\w\\s-]', '', value.lower()).strip()\n-    return re.sub(r'[-\\s]+', '-', value)\n+    return re.sub(r'[-\\s]+', '-', value).strip('-_')\n \n \n def camel_case_to_spaces(value):\n", "instance_id": "django__django-12983"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/pylint/checkers/misc.py b/pylint/checkers/misc.py\nindex 69149e61a..059455bfc 100644\n--- a/pylint/checkers/misc.py\n+++ b/pylint/checkers/misc.py\n@@ -119,7 +119,7 @@ class EncodingChecker(BaseChecker):\n     def open(self):\n         super().open()\n \n-        notes = \"|\".join(re.escape(note) for note in self.config.notes)\n+        notes = \"|\".join(re.escape(note) if re.search(r'\\w', note) else re.escape(note) + r'\\b' for note in self.config.notes)\n         if self.config.notes_rgx:\n             regex_string = rf\"#\\s*({notes}|{self.config.notes_rgx})\\b\"\n         else:\n", "instance_id": "pylint-dev__pylint-5859"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 9db44b7994..98f30f0b25 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -185,12 +185,24 @@ class Axes3D(Axes):\n                 \"other Axes classes.\")\n             fig.add_axes(self)\n \n-    def set_axis_off(self):\n+    def set_visible(self, b):\n+        \"\"\"\n+        Set the visibility of the axes.\n+        \"\"\"\n+        super().set_visible(b)\n+        for axis in self._axis_map.values():\n+            axis.set_visible(b)\n+        self.stale = True\n         self._axis3don = False\n         self.stale = True\n \n-    def set_axis_on(self):\n-        self._axis3don = True\n+    def set_visible(self, b):\n+        \"\"\"\n+        Set the visibility of the axes.\n+        \"\"\"\n+        super().set_visible(b)\n+        for axis in self._axis_map.values():\n+            axis.set_visible(b)\n         self.stale = True\n \n     def convert_zunits(self, z):\n@@ -200,16 +212,13 @@ class Axes3D(Axes):\n         \"\"\"\n         return self.zaxis.convert_units(z)\n \n-    def set_top_view(self):\n-        # this happens to be the right view for the viewing coordinates\n-        # moved up and to the left slightly to fit labels and axes\n-        xdwl = 0.95 / self._dist\n-        xdw = 0.9 / self._dist\n-        ydwl = 0.95 / self._dist\n-        ydw = 0.9 / self._dist\n-        # Set the viewing pane.\n-        self.viewLim.intervalx = (-xdwl, xdw)\n-        self.viewLim.intervaly = (-ydwl, ydw)\n+    def set_visible(self, b):\n+        \"\"\"\n+        Set the visibility of the axes.\n+        \"\"\"\n+        super().set_visible(b)\n+        for axis in self._axis_map.values():\n+            axis.set_visible(b)\n         self.stale = True\n \n     def _init_axis(self):\n", "instance_id": "matplotlib__matplotlib-23314"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/neighbors/nca.py b/sklearn/neighbors/nca.py\nindex 1d278b6e1..2f8433baf 100644\n--- a/sklearn/neighbors/nca.py\n+++ b/sklearn/neighbors/nca.py\n@@ -299,7 +299,8 @@ class NeighborhoodComponentsAnalysis(BaseEstimator, TransformerMixin):\n \n         # Check the preferred dimensionality of the projected space\n         if self.n_components is not None:\n-            check_scalar(self.n_components, 'n_components', int, 1)\n+            self.n_components = int(self.n_components)\n+            check_scalar(self.n_components, 'n_components', (int, np.integer), 1)\n \n             if self.n_components > X.shape[1]:\n                 raise ValueError('The preferred dimensionality of the '\n@@ -318,9 +319,10 @@ class NeighborhoodComponentsAnalysis(BaseEstimator, TransformerMixin):\n                                  .format(X.shape[1],\n                                          self.components_.shape[1]))\n \n-        check_scalar(self.max_iter, 'max_iter', int, 1)\n-        check_scalar(self.tol, 'tol', float, 0.)\n-        check_scalar(self.verbose, 'verbose', int, 0)\n+        check_scalar(self.max_iter, 'max_iter', (int, np.integer), 1)\n+        self.tol = float(self.tol)\n+        check_scalar(self.tol, 'tol', (float, np.floating), 0.)\n+        check_scalar(self.verbose, 'verbose', (int, np.integer), 0)\n \n         if self.callback is not None:\n             if not callable(self.callback):\n", "instance_id": "scikit-learn__scikit-learn-14092"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 187e14b1b7..56f60a9a59 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -2,6 +2,7 @@ import base64\n import logging\n import string\n import warnings\n+import binascii\n from datetime import datetime, timedelta\n \n from django.conf import settings\n@@ -141,9 +142,9 @@ class SessionBase:\n                 raise SuspiciousSession(\"Session data corrupted\")\n             else:\n                 return self.serializer().loads(serialized)\n-        except Exception as e:\n-            # ValueError, SuspiciousOperation, unpickling exceptions. If any of\n-            # these happen, just return an empty dictionary (an empty session).\n+        except (Exception, binascii.Error) as e:\n+            # ValueError, SuspiciousOperation, binascii.Error, unpickling exceptions.\n+            # If any of these happen, just return an empty dictionary (an empty session).\n             if isinstance(e, SuspiciousOperation):\n                 logger = logging.getLogger('django.security.%s' % e.__class__.__name__)\n                 logger.warning(str(e))\ndiff --git a/django/contrib/sessions/backends/db.py b/django/contrib/sessions/backends/db.py\nindex 7c905a2c99..5807ca43f4 100644\n--- a/django/contrib/sessions/backends/db.py\n+++ b/django/contrib/sessions/backends/db.py\n@@ -1,5 +1,6 @@\n import logging\n \n+import binascii\n from django.contrib.sessions.backends.base import (\n     CreateError, SessionBase, UpdateError,\n )\n@@ -33,7 +34,7 @@ class SessionStore(SessionBase):\n                 session_key=self.session_key,\n                 expire_date__gt=timezone.now()\n             )\n-        except (self.model.DoesNotExist, SuspiciousOperation) as e:\n+        except (self.model.DoesNotExist, SuspiciousOperation, binascii.Error) as e:\n             if isinstance(e, SuspiciousOperation):\n                 logger = logging.getLogger('django.security.%s' % e.__class__.__name__)\n                 logger.warning(str(e))\n", "instance_id": "django__django-13321"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "django__django-13925"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex b6adb7ceb..1d048c743 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -108,6 +108,17 @@ def import_object(modname: str, objpath: List[str], objtype: str = '',\n             obj = attrgetter(obj, mangled_name)\n             logger.debug('[autodoc] => %r', obj)\n             object_name = attrname\n+\n+        # Check for __all__ attribute\n+        if hasattr(module, '__all__') and not module.__all__:\n+            logger.debug('[autodoc] __all__ is empty, ignoring members')\n+            return [module, None, None, None]\n+\n+        # Check for __all__ attribute\n+        if hasattr(module, '__all__') and not module.__all__:\n+            logger.debug('[autodoc] __all__ is empty, ignoring members')\n+            return [module, None, None, None]\n+\n         return [module, parent, object_name, obj]\n     except (AttributeError, ImportError) as exc:\n         if isinstance(exc, AttributeError) and exc_on_importing:\n", "instance_id": "sphinx-doc__sphinx-8595"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex ff6abdb958..7b207daa2c 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -93,6 +93,23 @@ class DraggableLegend(DraggableOffsetBox):\n         loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n         self.legend.set_bbox_to_anchor(loc_in_bbox)\n \n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        # Remove the unpickleable attributes\n+        del state['canvas']\n+        del state['cids']\n+        return state\n+\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        self.canvas = self.legend.figure.canvas\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable(\n+                'pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable(\n+                'button_release_event', self.on_release),\n+        ]\n+\n \n _legend_kw_doc_base = \"\"\"\n bbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats\ndiff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 1dee8a23d9..b020679987 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1605,6 +1605,23 @@ class DraggableOffsetBox(DraggableBase):\n         loc_in_canvas = (ox + bbox.x0, oy + bbox.y0)\n         return loc_in_canvas\n \n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        # Remove the unpickleable attributes\n+        del state['canvas']\n+        del state['cids']\n+        return state\n+\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        self.canvas = self.ref_artist.figure.canvas\n+        self.cids = [\n+            self.canvas.callbacks._connect_picklable(\n+                'pick_event', self.on_pick),\n+            self.canvas.callbacks._connect_picklable(\n+                'button_release_event', self.on_release),\n+        ]\n+\n \n class DraggableAnnotation(DraggableBase):\n     def __init__(self, annotation, use_blit=False):\n", "instance_id": "matplotlib__matplotlib-25311"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 29c6ff0926..4ad6eb26dd 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -368,11 +368,21 @@ class KeyTransformIsNull(lookups.IsNull):\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        if self.rhs:\n+            return super().as_sql(compiler, connection)\n+        return HasKey(self.lhs.lhs, self.lhs.key_name).as_sql(compiler, connection)\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n+        if self.rhs:\n+            return super().as_sql(compiler, connection)\n+        if connection.vendor in {'sqlite', 'oracle'}:\n+            return HasKey(self.lhs.lhs, self.lhs.key_name).as_sql(compiler, connection)\n+        if self.rhs:\n+            return super().as_sql(compiler, connection)\n+        if connection.vendor in {'sqlite', 'oracle'}:\n+            return HasKey(self.lhs.lhs, self.lhs.key_name).as_sql(compiler, connection)\n         return super().as_sql(compiler, connection)\n \n \n", "instance_id": "django__django-13757"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..2e0fa6a54b 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,11 +810,8 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n-                if (\n-                    connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n-                ):\n-                    assert len(returned_columns) == len(objs_without_pk)\n+                if connection.features.can_return_rows_from_bulk_insert:\n+                    assert len(returned_columns) == len(objs_without_pk) or on_conflict is not None\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n                     for result, field in zip(results, opts.db_returning_fields):\n                         setattr(obj_without_pk, field.attname, result)\n@@ -1837,7 +1834,7 @@ class QuerySet(AltersData):\n         inserted_rows = []\n         bulk_return = connection.features.can_return_rows_from_bulk_insert\n         for item in [objs[i : i + batch_size] for i in range(0, len(objs), batch_size)]:\n-            if bulk_return and on_conflict is None:\n+            if bulk_return:\n                 inserted_rows.extend(\n                     self._insert(\n                         item,\n", "instance_id": "django__django-17051"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex b03ed4cd88..0e8000e181 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -102,7 +102,7 @@ def get_total_scale_factor(expr):\n         return expr\n \n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n-    if depmat is None:\n+    if depmat is None or not all(p.is_integer for p in depmat):\n         return expr\n \n     expr_scale_factor = get_total_scale_factor(expr)\n", "instance_id": "sympy__sympy-20442"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sphinx/ext/napoleon/iterators.py b/sphinx/ext/napoleon/iterators.py\nindex fc41afdb3..e0a87611d 100644\n--- a/sphinx/ext/napoleon/iterators.py\n+++ b/sphinx/ext/napoleon/iterators.py\n@@ -68,7 +68,10 @@ class peek_iter:\n             n = 1\n         try:\n             while len(self._cache) < n:\n-                self._cache.append(next(self._iterable))  # type: ignore\n+                item = next(self._iterable)  # type: ignore\n+                if isinstance(item, str):\n+                    item = item.replace('\\\\_', '_')\n+                self._cache.append(item)\n         except StopIteration:\n             while len(self._cache) < n:\n                 self._cache.append(self.sentinel)\n", "instance_id": "sphinx-doc__sphinx-7738"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 25c3b44250..4769f40c84 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -138,6 +138,10 @@ def iter_modules_and_files(modules, extra_files):\n             continue\n         path = Path(filename)\n         try:\n+            # Skip paths containing null bytes\n+            if '\\x00' in str(path):\n+                logger.warning('Skipping path with embedded null byte: %s', path)\n+                continue\n             resolved_path = path.resolve(strict=True).absolute()\n         except FileNotFoundError:\n             # The module could have been removed, don't fail loudly if this\n", "instance_id": "django__django-11583"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..08b6b840f 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -67,6 +67,8 @@ from inspect import signature\n import pprint\n from collections import OrderedDict\n \n+import numpy as np\n+import numpy as np\n from ..base import BaseEstimator\n from .._config import get_config\n from . import is_scalar_nan\n@@ -95,7 +97,8 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n-        if (v != init_params[k] and\n+        if (not isinstance(v, np.ndarray) and v != init_params[k] or\n+                isinstance(v, np.ndarray) and not np.array_equal(v, init_params[k]) and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n     return filtered_params\n", "instance_id": "scikit-learn__scikit-learn-13584"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 488d6a77cd..e952af3fdc 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -68,7 +68,7 @@ def format(\n             str_number = \"{:f}\".format(number)\n     else:\n         str_number = str(number)\n-    if str_number[0] == \"-\":\n+    if str_number and str_number[0] == \"-\":\n         sign = \"-\"\n         str_number = str_number[1:]\n     # decimal part\n", "instance_id": "django__django-16046"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex dd36dea304..53ca4c181d 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -1738,20 +1738,6 @@ def partitions(n, m=None, k=None, size=False):\n     {2: 1, 4: 1}\n     {3: 2}\n \n-    Note that the _same_ dictionary object is returned each time.\n-    This is for speed:  generating each partition goes quickly,\n-    taking constant time, independent of n.\n-\n-    >>> [p for p in partitions(6, k=2)]\n-    [{1: 6}, {1: 6}, {1: 6}, {1: 6}]\n-\n-    If you want to build a list of the returned dictionaries then\n-    make a copy of them:\n-\n-    >>> [p.copy() for p in partitions(6, k=2)]  # doctest: +SKIP\n-    [{2: 3}, {1: 2, 2: 2}, {1: 4, 2: 1}, {1: 6}]\n-    >>> [(M, p.copy()) for M, p in partitions(6, k=2, size=True)]  # doctest: +SKIP\n-    [(3, {2: 3}), (4, {1: 2, 2: 2}), (5, {1: 4, 2: 1}), (6, {1: 6})]\n \n     References\n     ==========\n@@ -1802,9 +1788,9 @@ def partitions(n, m=None, k=None, size=False):\n         keys.append(r)\n     room = m - q - bool(r)\n     if size:\n-        yield sum(ms.values()), ms\n+        yield sum(ms.values()), ms.copy()\n     else:\n-        yield ms\n+        yield ms.copy()\n \n     while keys != [1]:\n         # Reuse any 1's.\n", "instance_id": "sympy__sympy-20154"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 71a52fb754..b6563cee18 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1221,6 +1221,9 @@ class QuerySet:\n         if fields == (None,):\n             clone.query.clear_deferred_loading()\n         else:\n+            if self.query.deferred_loading[0]:\n+                # If there are already deferred fields, clear them\n+                clone.query.clear_deferred_loading()\n             clone.query.add_deferred_loading(fields)\n         return clone\n \n@@ -1242,6 +1245,7 @@ class QuerySet:\n             if field in self.query._filtered_relations:\n                 raise ValueError('only() is not supported with FilteredRelation.')\n         clone = self._chain()\n+        clone.query.clear_deferred_loading()\n         clone.query.add_immediate_loading(fields)\n         return clone\n \n", "instance_id": "django__django-14667"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "django__django-12184"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/metrics/cluster/_supervised.py b/sklearn/metrics/cluster/_supervised.py\nindex 4bddae35c..869237f56 100644\n--- a/sklearn/metrics/cluster/_supervised.py\n+++ b/sklearn/metrics/cluster/_supervised.py\n@@ -43,10 +43,10 @@ def check_clusterings(labels_true, labels_pred):\n         The predicted labels.\n     \"\"\"\n     labels_true = check_array(\n-        labels_true, ensure_2d=False, ensure_min_samples=0\n+        labels_true, ensure_2d=False, ensure_min_samples=0, dtype=None\n     )\n     labels_pred = check_array(\n-        labels_pred, ensure_2d=False, ensure_min_samples=0\n+        labels_pred, ensure_2d=False, ensure_min_samples=0, dtype=None\n     )\n \n     # input checks\n", "instance_id": "scikit-learn__scikit-learn-15535"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 6e504a3057..af858f6381 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -450,29 +450,19 @@ def preprocess(cls, domain):\n             if r is not None:\n                 return sympy.polys.domains.FF(int(r.groups()[1]))\n \n-            r = cls._re_polynomial.match(domain)\n-\n-            if r is not None:\n-                ground, gens = r.groups()\n-\n-                gens = list(map(sympify, gens.split(',')))\n-\n-                if ground in ['Z', 'ZZ']:\n-                    return sympy.polys.domains.ZZ.poly_ring(*gens)\n-                else:\n-                    return sympy.polys.domains.QQ.poly_ring(*gens)\n-\n-            r = cls._re_fraction.match(domain)\n-\n-            if r is not None:\n-                ground, gens = r.groups()\n-\n-                gens = list(map(sympify, gens.split(',')))\n-\n-                if ground in ['Z', 'ZZ']:\n-                    return sympy.polys.domains.ZZ.frac_field(*gens)\n-                else:\n-                    return sympy.polys.domains.QQ.frac_field(*gens)\n+            for regex, constructor in [\n+                (cls._re_polynomial, lambda ground, gens: sympy.polys.domains.ZZ.poly_ring(*gens) if ground in ['Z', 'ZZ'] else sympy.polys.domains.QQ.poly_ring(*gens)),\n+                (cls._re_fraction, lambda ground, gens: sympy.polys.domains.ZZ.frac_field(*gens) if ground in ['Z', 'ZZ'] else sympy.polys.domains.QQ.frac_field(*gens)),\n+                (cls._re_realfield, lambda _, __, prec: sympy.polys.domains.RR if prec is None else sympy.polys.domains.RealField(int(prec))),\n+                (cls._re_complexfield, lambda _, __, prec: sympy.polys.domains.CC if prec is None else sympy.polys.domains.ComplexField(int(prec))),\n+                (cls._re_finitefield, lambda _, __, p: sympy.polys.domains.FF(int(p))),\n+                (cls._re_algebraic, lambda _, gens: sympy.polys.domains.QQ.algebraic_field(*gens))\n+            ]:\n+                r = regex.match(domain)\n+                if r is not None:\n+                    ground, gens = r.groups()\n+                    gens = list(map(sympify, gens.split(',')))\n+                    return constructor(ground, gens)\n \n             r = cls._re_algebraic.match(domain)\n \n@@ -480,7 +470,7 @@ def preprocess(cls, domain):\n                 gens = list(map(sympify, r.groups()[1].split(',')))\n                 return sympy.polys.domains.QQ.algebraic_field(*gens)\n \n-        raise OptionError('expected a valid domain specification, got %s' % domain)\n+        raise OptionError(f\"Expected a valid domain specification, but got '{domain}'. Please provide a valid domain such as 'ZZ', 'QQ', 'RR', 'CC', or a polynomial ring like 'ZZ[x]', 'QQ[y]', etc.\")\n \n     @classmethod\n     def postprocess(cls, options):\n", "instance_id": "sympy__sympy-14396"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e16ab8ce5..7303c7bfb 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1598,6 +1598,10 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         else:\n             sigs.append(sig)\n \n+        # Remove duplicated *args and **kwargs\n+        if self.config.autodoc_typehints == \"description\":\n+            sigs = [sig.replace('*args, **kwargs', '*args, **kwargs').replace('*args', '*args').replace('**kwargs', '**kwargs') for sig in sigs]\n+\n         return \"\\n\".join(sigs)\n \n     def get_overloaded_signatures(self) -> List[Signature]:\n", "instance_id": "sphinx-doc__sphinx-10451"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "scikit-learn__scikit-learn-11040"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..56aaefba79 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -320,6 +320,9 @@ class RenameModel(ModelOperation):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # Check if db_table is the same, if so, it's a no-op\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n             # Move the main table\n             schema_editor.alter_db_table(\n                 new_model,\n", "instance_id": "django__django-14999"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 28eaae5f..0b7441a4 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -283,7 +283,15 @@ def summarize_variable(\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n         dims_str = \"\"\n-    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+    \n+    # Add units if available\n+    units = var.attrs.get('units', '')\n+    if units:\n+        units_str = f\", in {units}\"\n+    else:\n+        units_str = \"\"\n+\n+    front_str = f\"{first_col}{units_str} {dims_str}{var.dtype} \"\n \n     values_width = max_width - len(front_str)\n     values_str = inline_variable_array_repr(var, values_width)\n@@ -652,6 +660,12 @@ def diff_array_repr(a, b, compat):\n     if compat == \"identical\":\n         summary.append(diff_attrs_repr(a.attrs, b.attrs, compat))\n \n+    # Add units if available\n+    units_a = a.attrs.get('units', '')\n+    units_b = b.attrs.get('units', '')\n+    if units_a or units_b:\n+        summary.append(f\"Units: {units_a} != {units_b}\")\n+\n     return \"\\n\".join(summary)\n \n \n@@ -675,4 +689,10 @@ def diff_dataset_repr(a, b, compat):\n     if compat == \"identical\":\n         summary.append(diff_attrs_repr(a.attrs, b.attrs, compat))\n \n+    # Add units if available\n+    units_a = a.attrs.get('units', '')\n+    units_b = b.attrs.get('units', '')\n+    if units_a or units_b:\n+        summary.append(f\"Units: {units_a} != {units_b}\")\n+\n     return \"\\n\".join(summary)\ndiff --git a/xarray/core/formatting_html.py b/xarray/core/formatting_html.py\nindex 5521b33e..eed1e14d 100644\n--- a/xarray/core/formatting_html.py\n+++ b/xarray/core/formatting_html.py\n@@ -105,6 +105,13 @@ def summarize_variable(name, var, is_index=False, dtype=None, preview=None):\n     name = escape(str(name))\n     dtype = dtype or escape(str(var.dtype))\n \n+    # Add units if available\n+    units = var.attrs.get('units', '')\n+    if units:\n+        units_str = f\", in {escape(units)}\"\n+    else:\n+        units_str = \"\"\n+\n     # \"unique\" ids required to expand/collapse subsections\n     attrs_id = \"attrs-\" + str(uuid.uuid4())\n     data_id = \"data-\" + str(uuid.uuid4())\n@@ -119,7 +126,7 @@ def summarize_variable(name, var, is_index=False, dtype=None, preview=None):\n \n     return (\n         f\"<div class='xr-var-name'><span{cssclass_idx}>{name}</span></div>\"\n-        f\"<div class='xr-var-dims'>{dims_str}</div>\"\n+        f\"<div class='xr-var-dims'>{units_str} {dims_str}</div>\"\n         f\"<div class='xr-var-dtype'>{dtype}</div>\"\n         f\"<div class='xr-var-preview xr-preview'>{preview}</div>\"\n         f\"<input id='{attrs_id}' class='xr-var-attrs-in' \"\n", "instance_id": "pydata__xarray-4248"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex d96e76263b..6f26d9ac42 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -2091,6 +2091,8 @@ def uniq(seq, result=None):\n     parameter ``result``  is used internally; it is not necessary to pass\n     anything for this.\n \n+    Raises a RuntimeError if the size of the list changes during iteration.\n+\n     Examples\n     ========\n \n@@ -2109,7 +2111,10 @@ def uniq(seq, result=None):\n     try:\n         seen = set()\n         result = result or []\n+        initial_size = len(seq)\n         for i, s in enumerate(seq):\n+            if len(seq) != initial_size:\n+                raise RuntimeError(\"dictionary changed size during iteration\")\n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n", "instance_id": "sympy__sympy-18835"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..6185dc80ec 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -90,7 +90,9 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n+        parts = path.split(\".\")\n+        module = \".\".join(parts[:-1])\n+        name = parts[-1]\n         if module == \"django.db.models\":\n             imports = {\"from django.db import models\"}\n             name = \"models.%s\" % name\n", "instance_id": "django__django-12125"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 755088ca5..fef75816c 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -682,7 +682,11 @@ class GoogleDocstring:\n         return self._parse_generic_section(_('Notes'), use_admonition)\n \n     def _parse_other_parameters_section(self, section: str) -> List[str]:\n-        return self._format_fields(_('Other Parameters'), self._consume_fields())\n+        fields = self._consume_fields()\n+        if self._config.napoleon_use_param:\n+            return self._format_docutils_params(fields)\n+        else:\n+            return self._format_fields(_('Other Parameters'), fields)\n \n     def _parse_parameters_section(self, section: str) -> List[str]:\n         if self._config.napoleon_use_param:\n@@ -926,28 +930,28 @@ def _token_type(token: str, location: str = None) -> str:\n             (token.startswith(\"'\") and token.endswith(\"'\"))\n     ):\n         type_ = \"literal\"\n-    elif token.startswith(\"{\"):\n+    elif token.startswith(\"{\") and not token.endswith(\"}\"):\n         logger.warning(\n             __(\"invalid value set (missing closing brace): %s\"),\n             token,\n             location=location,\n         )\n         type_ = \"literal\"\n-    elif token.endswith(\"}\"):\n+    elif token.endswith(\"}\") and not token.startswith(\"{\"):\n         logger.warning(\n             __(\"invalid value set (missing opening brace): %s\"),\n             token,\n             location=location,\n         )\n         type_ = \"literal\"\n-    elif token.startswith(\"'\") or token.startswith('\"'):\n+    elif (token.startswith(\"'\") and not token.endswith(\"'\")) or (token.startswith('\"') and not token.endswith('\"')):\n         logger.warning(\n             __(\"malformed string literal (missing closing quote): %s\"),\n             token,\n             location=location,\n         )\n         type_ = \"literal\"\n-    elif token.endswith(\"'\") or token.endswith('\"'):\n+    elif (token.endswith(\"'\") and not token.startswith(\"'\")) or (token.endswith('\"') and not token.startswith('\"')):\n         logger.warning(\n             __(\"malformed string literal (missing opening quote): %s\"),\n             token,\n", "instance_id": "sphinx-doc__sphinx-8713"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "django__django-13265"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 78accaf295..4b2c4f020c 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -246,9 +246,10 @@ def _eval_expand_tensorproduct(self, **hints):\n             if isinstance(args[i], Add):\n                 for aa in args[i].args:\n                     tp = TensorProduct(*args[:i] + (aa,) + args[i + 1:])\n-                    if isinstance(tp, TensorProduct):\n-                        tp = tp._eval_expand_tensorproduct()\n-                    add_args.append(tp)\n+                    c_part, nc_part = tp.args_cnc()  # added\n+                    if len(nc_part) == 1 and isinstance(nc_part[0], TensorProduct):  # modified\n+                        nc_part = (nc_part[0]._eval_expand_tensorproduct(), )  # modified\n+                    add_args.append(Mul(*c_part) * Mul(*nc_part))  # modified\n                 break\n \n         if add_args:\n", "instance_id": "sympy__sympy-24152"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 757cb2797..08670d2b2 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,7 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n", "instance_id": "pytest-dev__pytest-5227"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "django__django-12856"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex d9c9b0db04..cc6597dac9 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -737,6 +737,10 @@ class QuerySet:\n \n         # Clear the result cache, in case this QuerySet gets reused.\n         self._result_cache = None\n+        if not deleted and not _rows_count:\n+            # Ensure the dictionary contains model-label keys with zero values\n+            model_labels = {model._meta.label for model in collector.data}\n+            _rows_count = {label: 0 for label in model_labels}\n         return deleted, _rows_count\n \n     delete.alters_data = True\n", "instance_id": "django__django-12747"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex f50d8200e..b8084535f 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -396,6 +396,18 @@ def _call_reprcompare(ops, results, expls, each_obj):\n         custom = util._reprcompare(ops[i], each_obj[i], each_obj[i + 1])\n         if custom is not None:\n             return custom\n+    if isinstance(each_obj[0], bytes) and isinstance(each_obj[1], bytes):\n+        expl = expl.replace(repr(each_obj[0]), \"{} (ASCII: {})\".format(each_obj[0], [b for b in each_obj[0]]))\n+        expl = expl.replace(repr(each_obj[1]), \"{} (ASCII: {})\".format(each_obj[1], [b for b in each_obj[1]]))\n+    elif isinstance(each_obj[0], str) and isinstance(each_obj[1], str):\n+        expl = expl.replace(repr(each_obj[0]), \"{}\".format(each_obj[0]))\n+        expl = expl.replace(repr(each_obj[1]), \"{}\".format(each_obj[1]))\n+    elif hasattr(each_obj[0], '__dict__') and hasattr(each_obj[1], '__dict__'):\n+        expl = expl.replace(repr(each_obj[0]), \"{}\".format(each_obj[0]))\n+        expl = expl.replace(repr(each_obj[1]), \"{}\".format(each_obj[1]))\n+    if isinstance(each_obj[0], bytes) and isinstance(each_obj[1], bytes):\n+        expl = expl.replace(\"{}\".format(each_obj[0]), \"{} (ASCII: {})\".format(each_obj[0], [b for b in each_obj[0]]))\n+        expl = expl.replace(\"{}\".format(each_obj[1]), \"{} (ASCII: {})\".format(each_obj[1], [b for b in each_obj[1]]))\n     return expl\n \n \n", "instance_id": "pytest-dev__pytest-5495"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "sympy__sympy-18199"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..3e6aacff7f 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -979,6 +979,11 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         return super().get_group_by_cols()\n \n     def as_sql(self, compiler, connection):\n+        if isinstance(self.expression, Q):\n+            sql, params = compiler.compile(self.expression)\n+            if sql == '':\n+                sql = '0'\n+            return sql, params\n         return compiler.compile(self.expression)\n \n     def __repr__(self):\n", "instance_id": "django__django-15213"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 899ae8efe8..8662c0d317 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1063,7 +1063,31 @@ class OneToOneField(ForeignKey):\n         if isinstance(data, self.remote_field.model):\n             setattr(instance, self.name, data)\n         else:\n-            setattr(instance, self.attname, data)\n+            if isinstance(data, self.remote_field.model):\n+                if data.pk is None:\n+                    raise ValueError(\n+                        'Cannot assign \"%r\": \"%s.%s\" must be a \"%s\" instance with a primary key.' % (\n+                            data,\n+                            instance._meta.object_name,\n+                            self.name,\n+                            self.remote_field.model._meta.object_name,\n+                        )\n+                    )\n+                setattr(instance, self.attname, data.pk)\n+            else:\n+                if isinstance(data, self.remote_field.model):\n+                    if data.pk is None:\n+                        raise ValueError(\n+                            'Cannot assign \"%r\": \"%s.%s\" must be a \"%s\" instance with a primary key.' % (\n+                                data,\n+                                instance._meta.object_name,\n+                                self.name,\n+                                self.remote_field.model._meta.object_name,\n+                            )\n+                        )\n+                    setattr(instance, self.attname, data.pk)\n+                else:\n+                    setattr(instance, self.attname, data)\n             # Remote field object must be cleared otherwise Model.save()\n             # will reassign attname using the related object pk.\n             if data is None:\ndiff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 872a4c98dc..f3bb8a604c 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -254,6 +254,16 @@ class ForwardManyToOneDescriptor:\n         # Set the values of the related field.\n         else:\n             for lh_field, rh_field in self.field.related_fields:\n+                # Ensure the primary key is updated correctly\n+                if rh_field.primary_key and getattr(value, rh_field.attname) is None:\n+                    raise ValueError(\n+                        'Cannot assign \"%r\": \"%s.%s\" must be a \"%s\" instance with a primary key.' % (\n+                            value,\n+                            instance._meta.object_name,\n+                            self.field.name,\n+                            self.field.remote_field.model._meta.object_name,\n+                        )\n+                    )\n                 setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n \n         # Set the related instance cache used by __get__ to avoid an SQL query\n", "instance_id": "django__django-13964"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/physics/units/prefixes.py b/sympy/physics/units/prefixes.py\nindex ca6a642156..bc1d6586ea 100644\n--- a/sympy/physics/units/prefixes.py\n+++ b/sympy/physics/units/prefixes.py\n@@ -80,21 +80,27 @@ def __repr__(self):\n \n     def __mul__(self, other):\n         from sympy.physics.units import Quantity\n-        if not isinstance(other, (Quantity, Prefix)):\n-            return super().__mul__(other)\n-\n-        fact = self.scale_factor * other.scale_factor\n-\n-        if fact == 1:\n-            return 1\n+        from sympy.physics.units import Quantity\n+        if isinstance(other, Quantity):\n+            return Quantity(\n+                name=f\"{self.name}{other.name}\",\n+                abbrev=f\"{self.abbrev}{other.abbrev}\",\n+                scale_factor=self.scale_factor * other.scale_factor,\n+                dimension=other.dimension,\n+                is_prefixed=True\n+            )\n         elif isinstance(other, Prefix):\n-            # simplify prefix\n+            fact = self.scale_factor * other.scale_factor\n+            if fact == 1:\n+                return 1\n             for p in PREFIXES:\n                 if PREFIXES[p].scale_factor == fact:\n                     return PREFIXES[p]\n             return fact\n-\n-        return self.scale_factor * other\n+        elif isinstance(other, (int, float)):\n+            return self.scale_factor * other\n+        else:\n+            return self.scale_factor * other\n \n     def __truediv__(self, other):\n         if not hasattr(other, \"scale_factor\"):\n", "instance_id": "sympy__sympy-24909"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 02aa32b207..25ea943bfb 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -179,7 +179,7 @@ def media_property(cls):\n                 return m + Media(definition)\n             return Media(definition)\n         return base\n-    return property(_media)\n+    return _media\n \n \n class MediaDefiningClass(type):\n", "instance_id": "django__django-11019"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "django__django-16820"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..2a0ada5c6d 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -233,6 +233,9 @@ class HttpResponseBase:\n             return bytes(value)\n         if isinstance(value, str):\n             return bytes(value.encode(self.charset))\n+        # Handle memoryview types.\n+        if isinstance(value, memoryview):\n+            return value.tobytes()\n         # Handle non-string types.\n         return str(value).encode(self.charset)\n \n", "instance_id": "django__django-11133"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/admin/templatetags/admin_modify.py b/django/contrib/admin/templatetags/admin_modify.py\nindex 9df4b7aadb..5b742af46a 100644\n--- a/django/contrib/admin/templatetags/admin_modify.py\n+++ b/django/contrib/admin/templatetags/admin_modify.py\n@@ -100,6 +100,7 @@ def submit_row(context):\n                 and context.get(\"show_delete\", True)\n             ),\n             \"show_save_as_new\": not is_popup\n+            and has_add_permission\n             and has_change_permission\n             and change\n             and save_as,\n", "instance_id": "django__django-16527"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..8ea17ebbd4 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1311,10 +1311,11 @@ default: %(va)s\n         \"\"\"\n         if (self.get_layout_engine() is not None and\n                 not self.get_layout_engine().adjust_compatible):\n-            _api.warn_external(\n-                \"This figure was using a layout engine that is \"\n-                \"incompatible with subplots_adjust and/or tight_layout; \"\n-                \"not calling subplots_adjust.\")\n+            if self.get_layout_engine().__class__.__name__ != 'PlaceHolderLayoutEngine':\n+                _api.warn_external(\n+                    \"This figure was using a layout engine that is \"\n+                    \"incompatible with subplots_adjust and/or tight_layout; \"\n+                    \"not calling subplots_adjust.\")\n             return\n         self.subplotpars.update(left, bottom, right, top, wspace, hspace)\n         for ax in self.axes:\n", "instance_id": "matplotlib__matplotlib-23987"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..a32d0c45d9 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -176,10 +176,12 @@ def parse_http_date(date):\n     try:\n         year = int(m.group('year'))\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n+            current_year = datetime.datetime.now().year\n+            current_century = current_year // 100 * 100\n+            if year + current_century > current_year + 50:\n+                year += current_century - 100\n             else:\n-                year += 1900\n+                year += current_century\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n", "instance_id": "django__django-11848"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 78db834466..0f4b784ce8 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -281,7 +281,7 @@ def __getitem__(self, key):\n         if not isinstance(key, tuple) and isinstance(key, slice):\n             from sympy.matrices.expressions.slice import MatrixSlice\n             return MatrixSlice(self, key, (0, None, 1))\n-        if isinstance(key, tuple) and len(key) == 2:\n+        if isinstance(key, tuple) and len(key) == 2 and not isinstance(key[0], MatrixElement)):\n             i, j = key\n             if isinstance(i, slice) or isinstance(j, slice):\n                 from sympy.matrices.expressions.slice import MatrixSlice\n@@ -589,7 +589,7 @@ class MatrixElement(Expr):\n     def __new__(cls, name, n, m):\n         n, m = map(_sympify, (n, m))\n         from sympy.matrices.matrices import MatrixBase\n-        if isinstance(name, (MatrixBase,)):\n+        if isinstance(name, (MatrixBase, MatrixElement)):\n             if n.is_Integer and m.is_Integer:\n                 return name[n, m]\n         if isinstance(name, str):\ndiff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex d649dd02a9..f8ee4827b0 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -488,7 +488,7 @@ def opt_cse(exprs, order='canonical'):\n \n     def _find_opts(expr):\n \n-        if not isinstance(expr, (Basic, Unevaluated)):\n+        if not isinstance(expr, (Basic, Unevaluated, MatrixElement)):\n             return\n \n         if expr.is_Atom or expr.is_Order:\n@@ -580,7 +580,7 @@ def tree_cse(exprs, symbols, opt_subs=None, order='canonical', ignore=()):\n     excluded_symbols = set()\n \n     def _find_repeated(expr):\n-        if not isinstance(expr, (Basic, Unevaluated)):\n+        if not isinstance(expr, (Basic, Unevaluated, MatrixElement)):\n             return\n \n         if isinstance(expr, RootOf):\n@@ -626,7 +626,7 @@ def _find_repeated(expr):\n     subs = dict()\n \n     def _rebuild(expr):\n-        if not isinstance(expr, (Basic, Unevaluated)):\n+        if not isinstance(expr, (Basic, Unevaluated, MatrixElement)):\n             return expr\n \n         if not expr.args:\n", "instance_id": "sympy__sympy-22840"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 94d9465d7..51d74236d 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -1278,9 +1278,12 @@ class FeatureUnion(TransformerMixin, _BaseComposition):\n \n     def _hstack(self, Xs):\n         config = _get_output_config(\"transform\", self)\n-        if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n+        if config[\"dense\"] == \"pandas\":\n             pd = check_pandas_support(\"transform\")\n-            return pd.concat(Xs, axis=1)\n+            if all(hasattr(X, \"iloc\") for X in Xs):\n+                return pd.concat(Xs, axis=1)\n+            else:\n+                return pd.DataFrame(np.hstack(Xs))\n \n         if any(sparse.issparse(f) for f in Xs):\n             Xs = sparse.hstack(Xs).tocsr()\n", "instance_id": "scikit-learn__scikit-learn-25747"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/syndication/views.py b/django/contrib/syndication/views.py\nindex 68ffb0bfe0..64c574f99c 100644\n--- a/django/contrib/syndication/views.py\n+++ b/django/contrib/syndication/views.py\n@@ -199,7 +199,9 @@ class Feed:\n             if updateddate and is_naive(updateddate):\n                 updateddate = make_aware(updateddate, tz)\n \n+            comments = self._get_dynamic_attr('item_comments', item)\n             feed.add_item(\n+                comments=comments,\n                 title=title,\n                 link=link,\n                 description=description,\n@@ -214,6 +216,6 @@ class Feed:\n                 author_link=author_link,\n                 categories=self._get_dynamic_attr('item_categories', item),\n                 item_copyright=self._get_dynamic_attr('item_copyright', item),\n-                **self.item_extra_kwargs(item)\n+                **self.item_extra_kwargs(item),\n             )\n         return feed\n", "instance_id": "django__django-13230"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/src/flask/blueprints.py b/src/flask/blueprints.py\nindex 5fb84d86..f5310e3a 100644\n--- a/src/flask/blueprints.py\n+++ b/src/flask/blueprints.py\n@@ -188,6 +188,8 @@ class Blueprint(Scaffold):\n             template_folder=template_folder,\n             root_path=root_path,\n         )\n+        if '.' in name:\n+            raise ValueError(\"Blueprint name should not contain dots\")\n         self.name = name\n         self.url_prefix = url_prefix\n         self.subdomain = subdomain\n", "instance_id": "pallets__flask-4045"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\nindex 1e05aba59..67fa5c8c4 100644\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -110,7 +110,10 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):\n                     # continue `The rows are marked `X_mask` and will be\n                     # removed later.\n                     X_mask[:, i] = valid_mask\n-                    Xi = Xi.copy()\n+                    if X.dtype.kind in {'U', 'S'}:\n+                        Xi = Xi.astype(object)\n+                    else:\n+                        Xi = Xi.copy()\n                     Xi[~valid_mask] = self.categories_[i][0]\n             _, encoded = _encode(Xi, self.categories_[i], encode=True)\n             X_int[:, i] = encoded\n", "instance_id": "scikit-learn__scikit-learn-12471"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 1877c3f92a..fe2f0cc519 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -528,6 +528,11 @@ def _print_IndexedBase(self, expr):\n \n class PythonCodePrinter(AbstractPythonCodePrinter):\n \n+    def _print_Tuple(self, expr):\n+        if len(expr) == 1:\n+            return '({},)'.format(self._print(expr[0]))\n+        return '({})'.format(', '.join(map(self._print, expr)))\n+\n     def _print_sign(self, e):\n         return '(0.0 if {e} == 0 else {f}(1, {e}))'.format(\n             f=self._module_format('math.copysign'), e=self._print(e.args[0]))\n", "instance_id": "sympy__sympy-23262"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 09e2b00735..cfac5f0c08 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1215,28 +1215,9 @@ def _print_ExpBase(self, e):\n         base = prettyForm(pretty_atom('Exp1', 'e'))\n         return base ** self._print(e.args[0])\n \n-    def _print_Function(self, e, sort=False, func_name=None):\n-        # optional argument func_name for supplying custom names\n-        # XXX works only for applied functions\n-        func = e.func\n-        args = e.args\n-        if sort:\n-            args = sorted(args, key=default_sort_key)\n-\n-        if not func_name:\n-            func_name = func.__name__\n-\n-        prettyFunc = self._print(Symbol(func_name))\n-        prettyArgs = prettyForm(*self._print_seq(args).parens())\n-\n-        pform = prettyForm(\n-            binding=prettyForm.FUNC, *stringPict.next(prettyFunc, prettyArgs))\n-\n-        # store pform parts so it can be reassembled e.g. when powered\n-        pform.prettyFunc = prettyFunc\n-        pform.prettyArgs = prettyArgs\n-\n-        return pform\n+    def _print_Vector(self, e):\n+        from sympy.vector.vector import Vector\n+        return e._pretty(self)\n \n     @property\n     def _special_function_classes(self):\ndiff --git a/sympy/vector/vector.py b/sympy/vector/vector.py\nindex c62b1dbf0d..b33f940395 100755\n--- a/sympy/vector/vector.py\n+++ b/sympy/vector/vector.py\n@@ -2,7 +2,8 @@\n from sympy.core import S, Pow, sympify\n from sympy.core.expr import AtomicExpr, Expr\n from sympy.core.compatibility import range, default_sort_key\n-from sympy import sqrt, ImmutableMatrix as Matrix, Add\n+from sympy.functions import sqrt\n+from sympy import ImmutableMatrix as Matrix, Add\n from sympy.vector.coordsysrect import CoordSys3D\n from sympy.vector.basisdependent import (BasisDependent, BasisDependentAdd,\n                                          BasisDependentMul, BasisDependentZero)\n@@ -16,6 +17,29 @@ class Vector(BasisDependent):\n     instantiated by the user.\n     \"\"\"\n \n+    def _pretty(self, printer, *args):\n+        from sympy.printing.pretty.stringpict import prettyForm\n+        from sympy.vector.vector import VectorAdd, VectorMul\n+\n+        if isinstance(self, VectorAdd):\n+            pform = None\n+            for arg in self.args:\n+                if pform is None:\n+                    pform = printer._print(arg)\n+                else:\n+                    pform = prettyForm(*pform.right(' + '))\n+                    pform = prettyForm(*pform.right(printer._print(arg)))\n+            return pform\n+\n+        if isinstance(self, VectorMul):\n+            pform = printer._print(self.args[0])\n+            for arg in self.args[1:]:\n+                pform = prettyForm(*pform.right(' '))\n+                pform = prettyForm(*pform.right(printer._print(arg)))\n+            return pform\n+\n+        return printer._print(self)\n+\n     is_Vector = True\n     _op_priority = 12.0\n \n", "instance_id": "sympy__sympy-14308"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..fb12a395ca 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -761,7 +761,9 @@ class Field(RegisterLookupMixin):\n         column = self.db_column or attname\n         return attname, column\n \n-    def get_internal_type(self):\n+    def __init__(self, *args, **kwargs):\n+        kwargs.setdefault('help_text', 'Enter a duration in the format [DD] [[HH:]MM:]ss[.uuuuuu]')\n+        super(DurationField, self).__init__(*args, **kwargs)\n         return self.__class__.__name__\n \n     def pre_save(self, model_instance, add):\n@@ -933,7 +935,9 @@ class AutoField(Field):\n         kwargs['primary_key'] = True\n         return name, path, args, kwargs\n \n-    def get_internal_type(self):\n+    def __init__(self, *args, **kwargs):\n+        kwargs.setdefault('help_text', 'Enter a duration in the format [DD] [[HH:]MM:]ss[.uuuuuu]')\n+        super(DurationField, self).__init__(*args, **kwargs)\n         return \"AutoField\"\n \n     def to_python(self, value):\n@@ -1587,7 +1591,7 @@ class DurationField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\")\n     }\n     description = _(\"Duration\")\n \n", "instance_id": "django__django-11049"}
{"model_name_or_path": "210724-045403", "model_patch": "", "instance_id": "pytest-dev__pytest-11148"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex dd154f72ee..ba8c3463a0 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -209,7 +209,11 @@ class AdminReadonlyField:\n             remote_field.model._meta.model_name,\n         )\n         try:\n-            url = reverse(url_name, args=[quote(remote_obj.pk)])\n+            url = reverse(\n+                url_name,\n+                args=[quote(remote_obj.pk)],\n+                current_app=self.model_admin.admin_site.name\n+            )\n             return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n         except NoReverseMatch:\n             return str(remote_obj)\n", "instance_id": "django__django-14855"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex bd6afb12d1..be9d8b753b 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -614,7 +614,7 @@ def autowrap(expr, language=None, backend='f2py', tempdir=None, args=None,\n     args = list(args) if iterable(args, exclude=set) else args\n \n     if code_gen is None:\n-        code_gen = get_code_generator(language, \"autowrap\")\n+        code_gen = get_code_generator(language, \"autowrap\", printer=None)\n \n     CodeWrapperClass = {\n         'F2PY': F2PyCodeWrapper,\ndiff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py\nindex f0befb2bd7..65370db4b0 100644\n--- a/sympy/utilities/codegen.py\n+++ b/sympy/utilities/codegen.py\n@@ -708,10 +708,9 @@ def routine(self, name, expr, argument_sequence=None, global_vars=None):\n                 for dim in array.shape:\n                     dims.append((S.Zero, dim - 1))\n                 metadata = {'dimensions': dims}\n+                arg_list.append(InputArgument(symbol, **metadata))\n             else:\n-                metadata = {}\n-\n-            arg_list.append(InputArgument(symbol, **metadata))\n+                arg_list.append(InputArgument(symbol))\n \n         output_args.sort(key=lambda x: str(x.name))\n         arg_list.extend(output_args)\n", "instance_id": "sympy__sympy-16792"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\nindex bdedc455c2..2b11631bd8 100644\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -432,12 +432,12 @@ def _eval_subs(self, old, new):\n             old = exp(old.exp*log(old.base))\n         elif old is S.Exp1 and new.is_Function:\n             old = exp\n-        if isinstance(old, exp) or old is S.Exp1:\n+        if isinstance(old, exp) or old is S.Exp1 or isinstance(old, (sinh, cosh, tanh)):\n             f = lambda a: Pow(*a.as_base_exp(), evaluate=False) if (\n-                a.is_Pow or isinstance(a, exp)) else a\n+                a.is_Pow or isinstance(a, (exp, sinh, cosh, tanh))) else a\n             return Pow._eval_subs(f(self), f(old), new)\n \n-        if old is exp and not new.is_Function:\n+        if old is exp and not new.is_Function or isinstance(old, (sinh, cosh, tanh)):\n             return new**self.exp._subs(old, new)\n         return Function._eval_subs(self, old, new)\n \n", "instance_id": "sympy__sympy-21379"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex 5e6a400b6c..ad0a87b1ed 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -5,7 +5,7 @@ from collections import defaultdict\n from functools import reduce\n from operator import or_\n \n-from django.core.exceptions import FieldDoesNotExist\n+from django.core.exceptions import FieldDoesNotExist, FieldOrAttributeDoesNotExist\n from django.db import models, router\n from django.db.models.constants import LOOKUP_SEP\n from django.db.models.deletion import Collector\n@@ -375,7 +375,7 @@ def label_for_field(name, model, model_admin=None, return_attr=False, form=None)\n                     message += \" or %s\" % model_admin.__class__.__name__\n                 if form:\n                     message += \" or %s\" % form.__class__.__name__\n-                raise AttributeError(message)\n+                raise FieldOrAttributeDoesNotExist(message)\n \n             if hasattr(attr, \"short_description\"):\n                 label = attr.short_description\ndiff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 2a2288ff4d..917836fb43 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -12,6 +12,11 @@ class FieldDoesNotExist(Exception):\n     pass\n \n \n+class FieldOrAttributeDoesNotExist(Exception):\n+    \"\"\"The requested model field or attribute does not exist\"\"\"\n+\n+    pass\n+\n class AppRegistryNotReady(Exception):\n     \"\"\"The django.apps registry is not populated yet\"\"\"\n \n", "instance_id": "django__django-16816"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex f0c81c123b..06d46f1190 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -215,28 +215,26 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         # Work inside a new app registry\n         apps = Apps()\n \n-        # Work out the new value of unique_together, taking renames into\n-        # account\n+        # Work out the new value of unique_together and index_together, taking renames into account\n         unique_together = [\n             [rename_mapping.get(n, n) for n in unique]\n             for unique in model._meta.unique_together\n         ]\n-\n-        # Work out the new value for index_together, taking renames into\n-        # account\n         index_together = [\n             [rename_mapping.get(n, n) for n in index]\n             for index in model._meta.index_together\n         ]\n \n-        indexes = model._meta.indexes\n-        if delete_field:\n-            indexes = [\n-                index for index in indexes\n-                if delete_field.name not in index.fields\n-            ]\n+        # Filter out unique constraints that use expressions, as they are not supported by SQLite\n+        constraints = [\n+            constraint for constraint in model._meta.constraints\n+            if not (isinstance(constraint, UniqueConstraint) and constraint.contains_expressions)\n+        ]\n \n-        constraints = list(model._meta.constraints)\n+        indexes = [\n+            index for index in model._meta.indexes\n+            if not (index.contains_expressions)\n+        ]\n \n         # Provide isolated instances of the fields to the new model body so\n         # that the existing model's internals aren't interfered with when\n", "instance_id": "django__django-14997"}
{"model_name_or_path": "210724-045403", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex c55864243a..ad40cb9c46 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2411,6 +2411,11 @@ class Figure(FigureBase):\n         self.transFigure = BboxTransformTo(self.bbox)\n         self.transSubfigure = self.transFigure\n \n+        # Ensure DPI is not doubled after unpickling\n+        if hasattr(self, '_dpi_unpickled'):\n+            self._dpi = self._dpi_unpickled\n+            del self._dpi_unpickled\n+\n         self.patch = Rectangle(\n             xy=(0, 0), width=1, height=1, visible=frameon,\n             facecolor=facecolor, edgecolor=edgecolor, linewidth=linewidth,\n@@ -3030,6 +3035,7 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        state['_dpi_unpickled'] = self._dpi\n         return state\n \n     def __setstate__(self, state):\n", "instance_id": "matplotlib__matplotlib-23476"}
