--- a/sympy/utilities/autowrap.py
+++ b/sympy/utilities/autowrap.py
@@ -421,9 +421,8 @@
                 py_args.append(arg)
             else:
                 py_args.append(arg)
-        # Find arguments that are array dimensions. These can be inferred
-        # locally in the Cython code.
-            if isinstance(arg, (InputArgument, InOutArgument)) and arg.dimensions:
+            # Treat all arguments with dimensions as array arguments
+            if arg.dimensions:
                 dims = [d[1] + 1 for d in arg.dimensions]
                 sym_dims = [(i, d) for (i, d) in enumerate(dims) if
                             isinstance(d, Symbol)]
@@ -432,8 +431,6 @@
         for arg in args:
             if arg.name in py_inferred:
                 py_inferred[arg] = py_inferred.pop(arg.name)
-        # Filter inferred arguments from py_args
-        py_args = [a for a in py_args if a not in py_inferred]
         return py_returns, py_args, py_locals, py_inferred
 
     def _prototype_arg(self, arg):
@@ -461,6 +458,9 @@
         if arg.dimensions:
             t = arg.get_datatype('c')
             return "<{0}*> {1}.data".format(t, self._string_var(arg.name))
+        elif isinstance(arg, (InputArgument, InOutArgument)):
+            # Always pass by reference for input and inout arguments
+            return "&{0}".format(self._string_var(arg.name))
         elif isinstance(arg, ResultBase):
             return "&{0}".format(self._string_var(arg.name))
         else:
