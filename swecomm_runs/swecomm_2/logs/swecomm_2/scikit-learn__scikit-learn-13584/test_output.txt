+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   sklearn/utils/_pprint.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 0e3c1879b06d839171b7d0a607d71bbb19a966a9
Author: St√©phane Couvreur <stephane.couvreur@feedzai.com>
Date:   Tue Apr 9 13:45:54 2019 +0100

    TST Fixes to make test_pprint.py more resilient to change (#13529)

diff --git a/sklearn/utils/tests/test_pprint.py b/sklearn/utils/tests/test_pprint.py
index 1ab4712b9..4c85d7980 100644
--- a/sklearn/utils/tests/test_pprint.py
+++ b/sklearn/utils/tests/test_pprint.py
@@ -1,25 +1,178 @@
 import re
 from pprint import PrettyPrinter
 
+import numpy as np
+
 from sklearn.utils._pprint import _EstimatorPrettyPrinter
-from sklearn.pipeline import make_pipeline, Pipeline
-from sklearn.preprocessing import StandardScaler
-from sklearn.linear_model import LogisticRegression
-from sklearn.feature_selection import RFE
-from sklearn.model_selection import GridSearchCV
+from sklearn.pipeline import make_pipeline
+from sklearn.base import BaseEstimator, TransformerMixin
 from sklearn.feature_selection import SelectKBest, chi2
-from sklearn.svm import SVC
-from sklearn.svm import LinearSVC
-from sklearn.decomposition import PCA
-from sklearn.decomposition import NMF
-from sklearn.impute import SimpleImputer
-from sklearn.feature_extraction.text import CountVectorizer
 from sklearn import set_config
 
 
 # Ignore flake8 (lots of line too long issues)
 # flake8: noqa
 
+# Constructors excerpted to test pprinting
+class LogisticRegression(BaseEstimator):
+    def __init__(self, penalty='l2', dual=False, tol=1e-4, C=1.0,
+                 fit_intercept=True, intercept_scaling=1, class_weight=None,
+                 random_state=None, solver='warn', max_iter=100,
+                 multi_class='warn', verbose=0, warm_start=False, n_jobs=None,
+                 l1_ratio=None):
+        self.penalty = penalty
+        self.dual = dual
+        self.tol = tol
+        self.C = C
+        self.fit_intercept = fit_intercept
+        self.intercept_scaling = intercept_scaling
+        self.class_weight = class_weight
+        self.random_state = random_state
+        self.solver = solver
+        self.max_iter = max_iter
+        self.multi_class = multi_class
+        self.verbose = verbose
+        self.warm_start = warm_start
+        self.n_jobs = n_jobs
+        self.l1_ratio = l1_ratio
+
+    def fit(self, X, y):
+        return self
+
+
+class StandardScaler(BaseEstimator, TransformerMixin):
+    def __init__(self, copy=True, with_mean=True, with_std=True):
+        self.with_mean = with_mean
+        self.with_std = with_std
+        self.copy = copy
+
+    def transform(self, X, copy=None):
+        return self
+
+
+class RFE(BaseEstimator):
+    def __init__(self, estimator, n_features_to_select=None, step=1,
+                 verbose=0):
+        self.estimator = estimator
+        self.n_features_to_select = n_features_to_select
+        self.step = step
+        self.verbose = verbose
+
+
+class GridSearchCV(BaseEstimator):
+    def __init__(self, estimator, param_grid, scoring=None,
+                 n_jobs=None, iid='warn', refit=True, cv='warn', verbose=0,
+                 pre_dispatch='2*n_jobs', error_score='raise-deprecating',
+                 return_train_score=False):
+        self.estimator = estimator
+        self.param_grid = param_grid
+        self.scoring = scoring
+        self.n_jobs = n_jobs
+        self.iid = iid
+        self.refit = refit
+        self.cv = cv
+        self.verbose = verbose
+        self.pre_dispatch = pre_dispatch
+        self.error_score = error_score
+        self.return_train_score = return_train_score
+
+
+class CountVectorizer(BaseEstimator):
+    def __init__(self, input='content', encoding='utf-8',
+                 decode_error='strict', strip_accents=None,
+                 lowercase=True, preprocessor=None, tokenizer=None,
+                 stop_words=None, token_pattern=r"(?u)\b\w\w+\b",
+                 ngram_range=(1, 1), analyzer='word',
+                 max_df=1.0, min_df=1, max_features=None,
+                 vocabulary=None, binary=False, dtype=np.int64):
+        self.input = input
+        self.encoding = encoding
+        self.decode_error = decode_error
+        self.strip_accents = strip_accents
+        self.preprocessor = preprocessor
+        self.tokenizer = tokenizer
+        self.analyzer = analyzer
+        self.lowercase = lowercase
+        self.token_pattern = token_pattern
+        self.stop_words = stop_words
+        self.max_df = max_df
+        self.min_df = min_df
+        self.max_features = max_features
+        self.ngram_range = ngram_range
+        self.vocabulary = vocabulary
+        self.binary = binary
+        self.dtype = dtype
+
+
+class Pipeline(BaseEstimator):
+    def __init__(self, steps, memory=None):
+        self.steps = steps
+        self.memory = memory
+
+
+class SVC(BaseEstimator):
+    def __init__(self, C=1.0, kernel='rbf', degree=3, gamma='auto_deprecated',
+                 coef0=0.0, shrinking=True, probability=False,
+                 tol=1e-3, cache_size=200, class_weight=None,
+                 verbose=False, max_iter=-1, decision_function_shape='ovr',
+                 random_state=None):
+        self.kernel = kernel
+        self.degree = degree
+        self.gamma = gamma
+        self.coef0 = coef0
+        self.tol = tol
+        self.C = C
+        self.shrinking = shrinking
+        self.probability = probability
+        self.cache_size = cache_size
+        self.class_weight = class_weight
+        self.verbose = verbose
+        self.max_iter = max_iter
+        self.decision_function_shape = decision_function_shape
+        self.random_state = random_state
+
+
+class PCA(BaseEstimator):
+    def __init__(self, n_components=None, copy=True, whiten=False,
+                 svd_solver='auto', tol=0.0, iterated_power='auto',
+                 random_state=None):
+        self.n_components = n_components
+        self.copy = copy
+        self.whiten = whiten
+        self.svd_solver = svd_solver
+        self.tol = tol
+        self.iterated_power = iterated_power
+        self.random_state = random_state
+
+
+class NMF(BaseEstimator):
+    def __init__(self, n_components=None, init=None, solver='cd',
+                 beta_loss='frobenius', tol=1e-4, max_iter=200,
+                 random_state=None, alpha=0., l1_ratio=0., verbose=0,
+                 shuffle=False):
+        self.n_components = n_components
+        self.init = init
+        self.solver = solver
+        self.beta_loss = beta_loss
+        self.tol = tol
+        self.max_iter = max_iter
+        self.random_state = random_state
+        self.alpha = alpha
+        self.l1_ratio = l1_ratio
+        self.verbose = verbose
+        self.shuffle = shuffle
+
+
+class SimpleImputer(BaseEstimator):
+    def __init__(self, missing_values=np.nan, strategy="mean",
+                 fill_value=None, verbose=0, copy=True):
+        self.missing_values = missing_values
+        self.strategy = strategy
+        self.fill_value = fill_value
+        self.verbose = verbose
+        self.copy = copy
+
+
 def test_basic():
     # Basic pprint test
     lr = LogisticRegression()
@@ -150,7 +303,7 @@ def test_gridsearch_pipeline():
 
     pipeline = Pipeline([
         ('reduce_dim', PCA()),
-        ('classify', LinearSVC())
+        ('classify', SVC())
     ])
     N_FEATURES_OPTIONS = [2, 4, 8]
     C_OPTIONS = [1, 10, 100, 1000]
@@ -177,15 +330,14 @@ GridSearchCV(cv=3, error_score='raise-deprecating',
                                             svd_solver='auto', tol=0.0,
                                             whiten=False)),
                                        ('classify',
-                                        LinearSVC(C=1.0, class_weight=None,
-                                                  dual=True, fit_intercept=True,
-                                                  intercept_scaling=1,
-                                                  loss='squared_hinge',
-                                                  max_iter=1000,
-                                                  multi_class='ovr',
-                                                  penalty='l2',
-                                                  random_state=None, tol=0.0001,
-                                                  verbose=0))]),
+                                        SVC(C=1.0, cache_size=200,
+                                            class_weight=None, coef0=0.0,
+                                            decision_function_shape='ovr',
+                                            degree=3, gamma='auto_deprecated',
+                                            kernel='rbf', max_iter=-1,
+                                            probability=False,
+                                            random_state=None, shrinking=True,
+                                            tol=0.001, verbose=False))]),
              iid='warn', n_jobs=1,
              param_grid=[{'classify__C': [1, 10, 100, 1000],
                           'reduce_dim': [PCA(copy=True, iterated_power=7,
+ git diff 0e3c1879b06d839171b7d0a607d71bbb19a966a9
diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py
index b8686dba5..8f4373343 100644
--- a/sklearn/utils/_pprint.py
+++ b/sklearn/utils/_pprint.py
@@ -66,6 +66,7 @@ BaseEstimator.__repr__ for pretty-printing estimators"""
 from inspect import signature
 import pprint
 from collections import OrderedDict
+import numpy as np
 
 from ..base import BaseEstimator
 from .._config import get_config
@@ -97,7 +98,11 @@ def _changed_params(estimator):
     for k, v in params.items():
         if (v != init_params[k] and
                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):
-            filtered_params[k] = v
+            if isinstance(v, np.ndarray) and isinstance(init_params[k], np.ndarray):
+                if not np.array_equal(v, init_params[k]):
+                    filtered_params[k] = v
+            elif not isinstance(v, np.ndarray):
+                filtered_params[k] = v
     return filtered_params
 
 
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -v --no-use-pep517 --no-build-isolation -e .
Using pip 21.2.2 from /opt/miniconda3/envs/testbed/lib/python3.6/site-packages/pip (python 3.6)
Obtaining file:///testbed
    Running command python setup.py egg_info
    running egg_info
    creating /tmp/pip-pip-egg-info-8_j6od5z/scikit_learn.egg-info
    writing /tmp/pip-pip-egg-info-8_j6od5z/scikit_learn.egg-info/PKG-INFO
    writing dependency_links to /tmp/pip-pip-egg-info-8_j6od5z/scikit_learn.egg-info/dependency_links.txt
    writing requirements to /tmp/pip-pip-egg-info-8_j6od5z/scikit_learn.egg-info/requires.txt
    writing top-level names to /tmp/pip-pip-egg-info-8_j6od5z/scikit_learn.egg-info/top_level.txt
    writing manifest file '/tmp/pip-pip-egg-info-8_j6od5z/scikit_learn.egg-info/SOURCES.txt'
    reading manifest file '/tmp/pip-pip-egg-info-8_j6od5z/scikit_learn.egg-info/SOURCES.txt'
    reading manifest template 'MANIFEST.in'
    adding license file 'COPYING'
    writing manifest file '/tmp/pip-pip-egg-info-8_j6od5z/scikit_learn.egg-info/SOURCES.txt'
    Partial import of sklearn during the build process.
Requirement already satisfied: numpy>=1.11.0 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from scikit-learn==0.21.dev0) (1.19.2)
Requirement already satisfied: scipy>=0.17.0 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from scikit-learn==0.21.dev0) (1.5.2)
Installing collected packages: scikit-learn
  Attempting uninstall: scikit-learn
    Found existing installation: scikit-learn 0.21.dev0
    Uninstalling scikit-learn-0.21.dev0:
      Removing file or directory /opt/miniconda3/envs/testbed/lib/python3.6/site-packages/scikit-learn.egg-link
      Removing pth entries from /opt/miniconda3/envs/testbed/lib/python3.6/site-packages/easy-install.pth:
      Removing entry: /testbed
      Successfully uninstalled scikit-learn-0.21.dev0
  Running setup.py develop for scikit-learn
    Running command /opt/miniconda3/envs/testbed/bin/python -c 'import io, os, sys, setuptools, tokenize; sys.argv[0] = '"'"'/testbed/setup.py'"'"'; __file__='"'"'/testbed/setup.py'"'"';f = getattr(tokenize, '"'"'open'"'"', open)(__file__) if os.path.exists(__file__) else io.StringIO('"'"'from setuptools import setup; setup()'"'"');code = f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' develop --no-deps
    blas_opt_info:
    blas_mkl_info:
    customize UnixCCompiler
      libraries mkl_rt not found in ['/opt/miniconda3/envs/testbed/lib', '/usr/local/lib', '/usr/lib64', '/usr/lib', '/usr/lib/x86_64-linux-gnu']
      NOT AVAILABLE

    blis_info:
      libraries blis not found in ['/opt/miniconda3/envs/testbed/lib', '/usr/local/lib', '/usr/lib64', '/usr/lib', '/usr/lib/x86_64-linux-gnu']
      NOT AVAILABLE

    openblas_info:
    C compiler: gcc -pthread -B /opt/miniconda3/envs/testbed/compiler_compat -Wl,--sysroot=/ -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC

    creating /tmp/tmpktzeftzc/tmp
    creating /tmp/tmpktzeftzc/tmp/tmpktzeftzc
    compile options: '-c'
    gcc: /tmp/tmpktzeftzc/source.c
    gcc -pthread -B /opt/miniconda3/envs/testbed/compiler_compat -Wl,--sysroot=/ /tmp/tmpktzeftzc/tmp/tmpktzeftzc/source.o -L/opt/miniconda3/envs/testbed/lib -lopenblas -o /tmp/tmpktzeftzc/a.out
      FOUND:
        libraries = ['openblas', 'openblas']
        library_dirs = ['/opt/miniconda3/envs/testbed/lib']
        language = c
        define_macros = [('HAVE_CBLAS', None)]

      FOUND:
        libraries = ['openblas', 'openblas']
        library_dirs = ['/opt/miniconda3/envs/testbed/lib']
        language = c
        define_macros = [('HAVE_CBLAS', None)]

    running develop
    running build_scripts
    running egg_info
    running build_src
    build_src
    building library "libsvm-skl" sources
    building extension "sklearn.__check_build._check_build" sources
    building extension "sklearn.preprocessing._csr_polynomial_expansion" sources
    building extension "sklearn.cluster._dbscan_inner" sources
    building extension "sklearn.cluster._hierarchical" sources
    building extension "sklearn.cluster._k_means_elkan" sources
    building extension "sklearn.cluster._k_means" sources
    building extension "sklearn.datasets._svmlight_format" sources
    building extension "sklearn.decomposition._online_lda" sources
    building extension "sklearn.decomposition.cdnmf_fast" sources
    building extension "sklearn.ensemble._gradient_boosting" sources
    building extension "sklearn.feature_extraction._hashing" sources
    building extension "sklearn.manifold._utils" sources
    building extension "sklearn.manifold._barnes_hut_tsne" sources
    building extension "sklearn.metrics.cluster.expected_mutual_info_fast" sources
    building extension "sklearn.metrics.pairwise_fast" sources
    building extension "sklearn.neighbors.ball_tree" sources
    building extension "sklearn.neighbors.kd_tree" sources
    building extension "sklearn.neighbors.dist_metrics" sources
    building extension "sklearn.neighbors.typedefs" sources
    building extension "sklearn.neighbors.quad_tree" sources
    building extension "sklearn.tree._tree" sources
    building extension "sklearn.tree._splitter" sources
    building extension "sklearn.tree._criterion" sources
    building extension "sklearn.tree._utils" sources
    building extension "sklearn.utils.sparsefuncs_fast" sources
    building extension "sklearn.utils._cython_blas" sources
    building extension "sklearn.utils.arrayfuncs" sources
    building extension "sklearn.utils.murmurhash" sources
    building extension "sklearn.utils.lgamma" sources
    building extension "sklearn.utils.graph_shortest_path" sources
    building extension "sklearn.utils.fast_dict" sources
    building extension "sklearn.utils.seq_dataset" sources
    building extension "sklearn.utils.weight_vector" sources
    building extension "sklearn.utils._random" sources
    building extension "sklearn.utils._logistic_sigmoid" sources
    building extension "sklearn.svm.libsvm" sources
    building extension "sklearn.svm.liblinear" sources
    building extension "sklearn.svm.libsvm_sparse" sources
    building extension "sklearn.linear_model.cd_fast" sources
    building extension "sklearn.linear_model.sgd_fast" sources
    building extension "sklearn.linear_model.sag_fast" sources
    building extension "sklearn._isotonic" sources
    building data_files sources
    build_src: building npy-pkg config files
    writing scikit_learn.egg-info/PKG-INFO
    writing dependency_links to scikit_learn.egg-info/dependency_links.txt
    writing requirements to scikit_learn.egg-info/requires.txt
    writing top-level names to scikit_learn.egg-info/top_level.txt
    reading manifest file 'scikit_learn.egg-info/SOURCES.txt'
    reading manifest template 'MANIFEST.in'
    adding license file 'COPYING'
    writing manifest file 'scikit_learn.egg-info/SOURCES.txt'
    running build_ext
    customize UnixCCompiler
    customize UnixCCompiler using build_clib
    customize UnixCCompiler
    customize UnixCCompiler using build_ext_subclass
    customize UnixCCompiler
    customize UnixCCompiler using build_ext_subclass
    Creating /opt/miniconda3/envs/testbed/lib/python3.6/site-packages/scikit-learn.egg-link (link to .)
    Adding scikit-learn 0.21.dev0 to easy-install.pth file

    Installed /testbed
    Partial import of sklearn during the build process.
Successfully installed scikit-learn-0.21.dev0
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 0e3c1879b06d839171b7d0a607d71bbb19a966a9 sklearn/utils/tests/test_pprint.py
Updated 0 paths from 686f52212
+ git apply -v -
Checking patch sklearn/utils/tests/test_pprint.py...
Applied patch sklearn/utils/tests/test_pprint.py cleanly.
+ pytest -rA sklearn/utils/tests/test_pprint.py
============================= test session starts ==============================
platform linux -- Python 3.6.13, pytest-6.2.4, py-1.11.0, pluggy-0.13.1
rootdir: /testbed, configfile: setup.cfg
collected 9 items

sklearn/utils/tests/test_pprint.py .FFFFFF..                             [100%]

=================================== FAILURES ===================================
______________________________ test_changed_only _______________________________

    def test_changed_only():
        # Make sure the changed_only param is correctly used
        set_config(print_changed_only=True)
        lr = LogisticRegression(C=99)
        expected = """LogisticRegression(C=99)"""
        assert lr.__repr__() == expected
    
        # Check with a repr that doesn't fit on a single line
        lr = LogisticRegression(C=99, class_weight=.4, fit_intercept=False,
                                tol=1234, verbose=True)
        expected = """
    LogisticRegression(C=99, class_weight=0.4, fit_intercept=False, tol=1234,
                       verbose=True)"""
        expected = expected[1:]  # remove first \n
        assert lr.__repr__() == expected
    
        imputer = SimpleImputer(missing_values=0)
        expected = """SimpleImputer(missing_values=0)"""
        assert imputer.__repr__() == expected
    
        # Defaults to np.NaN, trying with float('NaN')
        imputer = SimpleImputer(missing_values=float('NaN'))
        expected = """SimpleImputer()"""
        assert imputer.__repr__() == expected
    
        # make sure array parameters don't throw error (see #13583)
>       repr(LogisticRegressionCV(Cs=np.array([0.1, 1])))

sklearn/utils/tests/test_pprint.py:217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
sklearn/base.py:247: in __repr__
    repr_ = pp.pformat(self)
/opt/miniconda3/envs/testbed/lib/python3.6/pprint.py:144: in pformat
    self._format(object, sio, 0, 0, {}, 0)
/opt/miniconda3/envs/testbed/lib/python3.6/pprint.py:161: in _format
    rep = self._repr(object, context, level)
/opt/miniconda3/envs/testbed/lib/python3.6/pprint.py:393: in _repr
    self._depth, level)
sklearn/utils/_pprint.py:175: in format
    changed_only=self._changed_only)
sklearn/utils/_pprint.py:418: in _safe_repr
    params = _changed_params(object)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

estimator = <[ValueError('The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()',) raised in repr()] LogisticRegressionCV object at 0x7f2d66fd9908>

    def _changed_params(estimator):
        """Return dict (param_name: value) of parameters that were given to
        estimator with non-default values."""
    
        params = estimator.get_params(deep=False)
        filtered_params = {}
        init_func = getattr(estimator.__init__, 'deprecated_original',
                            estimator.__init__)
        init_params = signature(init_func).parameters
        init_params = {name: param.default for name, param in init_params.items()}
        for k, v in params.items():
>           if (v != init_params[k] and
                    not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):
E                   ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()

sklearn/utils/_pprint.py:99: ValueError
________________________________ test_pipeline _________________________________

    def test_pipeline():
        # Render a pipeline object
        pipeline = make_pipeline(StandardScaler(), LogisticRegression(C=999))
        expected = """
    Pipeline(memory=None,
             steps=[('standardscaler',
                     StandardScaler(copy=True, with_mean=True, with_std=True)),
                    ('logisticregression',
                     LogisticRegression(C=999, class_weight=None, dual=False,
                                        fit_intercept=True, intercept_scaling=1,
                                        l1_ratio=None, max_iter=100,
                                        multi_class='warn', n_jobs=None,
                                        penalty='l2', random_state=None,
                                        solver='warn', tol=0.0001, verbose=0,
                                        warm_start=False))])"""
    
        expected = expected[1:]  # remove first \n
>       assert pipeline.__repr__() == expected
E       AssertionError: assert 'Pipeline(ste...ion(C=999))])' == 'Pipeline(mem...art=False))])'
E         + Pipeline(steps=[('standardscaler', StandardScaler()),
E         +                 ('logisticregression', LogisticRegression(C=999))])
E         - Pipeline(memory=None,
E         -          steps=[('standardscaler',
E         -                  StandardScaler(copy=True, with_mean=True, with_std=True)),
E         -                 ('logisticregression',
E         -                  LogisticRegression(C=999, class_weight=None, dual=False,...
E         
E         ...Full output truncated (7 lines hidden), use '-vv' to show

sklearn/utils/tests/test_pprint.py:239: AssertionError
______________________________ test_deeply_nested ______________________________

    def test_deeply_nested():
        # Render a deeply nested estimator
        rfe = RFE(RFE(RFE(RFE(RFE(RFE(RFE(LogisticRegression())))))))
        expected = """
    RFE(estimator=RFE(estimator=RFE(estimator=RFE(estimator=RFE(estimator=RFE(estimator=RFE(estimator=LogisticRegression(C=1.0,
                                                                                                                         class_weight=None,
                                                                                                                         dual=False,
                                                                                                                         fit_intercept=True,
                                                                                                                         intercept_scaling=1,
                                                                                                                         l1_ratio=None,
                                                                                                                         max_iter=100,
                                                                                                                         multi_class='warn',
                                                                                                                         n_jobs=None,
                                                                                                                         penalty='l2',
                                                                                                                         random_state=None,
                                                                                                                         solver='warn',
                                                                                                                         tol=0.0001,
                                                                                                                         verbose=0,
                                                                                                                         warm_start=False),
                                                                                            n_features_to_select=None,
                                                                                            step=1,
                                                                                            verbose=0),
                                                                              n_features_to_select=None,
                                                                              step=1,
                                                                              verbose=0),
                                                                n_features_to_select=None,
                                                                step=1, verbose=0),
                                                  n_features_to_select=None, step=1,
                                                  verbose=0),
                                    n_features_to_select=None, step=1, verbose=0),
                      n_features_to_select=None, step=1, verbose=0),
        n_features_to_select=None, step=1, verbose=0)"""
    
        expected = expected[1:]  # remove first \n
>       assert rfe.__repr__() == expected
E       AssertionError: assert 'RFE(estimato...sion())))))))' == 'RFE(estimato...1, verbose=0)'
E         Skipping 107 identical leading characters in diff, use -v to show
E         + egression())))))))
E         - egression(C=1.0,
E         -                                                                                                                      class_weight=None,
E         -                                                                                                                      dual=False,
E         -                                                                                                                      fit_intercept=True,
E         -                                                                   ...
E         
E         ...Full output truncated (24 lines hidden), use '-vv' to show

sklearn/utils/tests/test_pprint.py:276: AssertionError
_______________________________ test_gridsearch ________________________________

    def test_gridsearch():
        # render a gridsearch
        param_grid = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4],
                       'C': [1, 10, 100, 1000]},
                      {'kernel': ['linear'], 'C': [1, 10, 100, 1000]}]
        gs = GridSearchCV(SVC(), param_grid, cv=5)
    
        expected = """
    GridSearchCV(cv=5, error_score='raise-deprecating',
                 estimator=SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,
                               decision_function_shape='ovr', degree=3,
                               gamma='auto_deprecated', kernel='rbf', max_iter=-1,
                               probability=False, random_state=None, shrinking=True,
                               tol=0.001, verbose=False),
                 iid='warn', n_jobs=None,
                 param_grid=[{'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001],
                              'kernel': ['rbf']},
                             {'C': [1, 10, 100, 1000], 'kernel': ['linear']}],
                 pre_dispatch='2*n_jobs', refit=True, return_train_score=False,
                 scoring=None, verbose=0)"""
    
        expected = expected[1:]  # remove first \n
>       assert gs.__repr__() == expected
E       assert "GridSearchCV...['linear']}])" == 'GridSearchCV...e, verbose=0)'
E         + GridSearchCV(cv=5, estimator=SVC(),
E         - GridSearchCV(cv=5, error_score='raise-deprecating',
E         -              estimator=SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,
E         -                            decision_function_shape='ovr', degree=3,
E         -                            gamma='auto_deprecated', kernel='rbf', max_iter=-1,
E         -                            probability=False, random_state=None, shrinking=True,
E         -                            tol=0.001, verbose=False),...
E         
E         ...Full output truncated (10 lines hidden), use '-vv' to show

sklearn/utils/tests/test_pprint.py:301: AssertionError
___________________________ test_gridsearch_pipeline ___________________________

    def test_gridsearch_pipeline():
        # render a pipeline inside a gridsearch
        pp = _EstimatorPrettyPrinter(compact=True, indent=1, indent_at_name=True)
    
        pipeline = Pipeline([
            ('reduce_dim', PCA()),
            ('classify', SVC())
        ])
        N_FEATURES_OPTIONS = [2, 4, 8]
        C_OPTIONS = [1, 10, 100, 1000]
        param_grid = [
            {
                'reduce_dim': [PCA(iterated_power=7), NMF()],
                'reduce_dim__n_components': N_FEATURES_OPTIONS,
                'classify__C': C_OPTIONS
            },
            {
                'reduce_dim': [SelectKBest(chi2)],
                'reduce_dim__k': N_FEATURES_OPTIONS,
                'classify__C': C_OPTIONS
            }
        ]
        gspipline = GridSearchCV(pipeline, cv=3, n_jobs=1, param_grid=param_grid)
        expected = """
    GridSearchCV(cv=3, error_score='raise-deprecating',
                 estimator=Pipeline(memory=None,
                                    steps=[('reduce_dim',
                                            PCA(copy=True, iterated_power='auto',
                                                n_components=None,
                                                random_state=None,
                                                svd_solver='auto', tol=0.0,
                                                whiten=False)),
                                           ('classify',
                                            SVC(C=1.0, cache_size=200,
                                                class_weight=None, coef0=0.0,
                                                decision_function_shape='ovr',
                                                degree=3, gamma='auto_deprecated',
                                                kernel='rbf', max_iter=-1,
                                                probability=False,
                                                random_state=None, shrinking=True,
                                                tol=0.001, verbose=False))]),
                 iid='warn', n_jobs=1,
                 param_grid=[{'classify__C': [1, 10, 100, 1000],
                              'reduce_dim': [PCA(copy=True, iterated_power=7,
                                                 n_components=None,
                                                 random_state=None,
                                                 svd_solver='auto', tol=0.0,
                                                 whiten=False),
                                             NMF(alpha=0.0, beta_loss='frobenius',
                                                 init=None, l1_ratio=0.0,
                                                 max_iter=200, n_components=None,
                                                 random_state=None, shuffle=False,
                                                 solver='cd', tol=0.0001,
                                                 verbose=0)],
                              'reduce_dim__n_components': [2, 4, 8]},
                             {'classify__C': [1, 10, 100, 1000],
                              'reduce_dim': [SelectKBest(k=10,
                                                         score_func=<function chi2 at some_address>)],
                              'reduce_dim__k': [2, 4, 8]}],
                 pre_dispatch='2*n_jobs', refit=True, return_train_score=False,
                 scoring=None, verbose=0)"""
    
        expected = expected[1:]  # remove first \n
        repr_ = pp.pformat(gspipline)
        # Remove address of '<function chi2 at 0x.....>' for reproducibility
        repr_ = re.sub('function chi2 at 0x.*>',
                       'function chi2 at some_address>', repr_)
>       assert repr_ == expected
E       AssertionError: assert 'GridSearchCV... [2, 4, 8]}])' == 'GridSearchCV...e, verbose=0)'
E         + GridSearchCV(cv=3,
E         +              estimator=Pipeline(steps=[('reduce_dim', PCA()),
E         - GridSearchCV(cv=3, error_score='raise-deprecating',
E         -              estimator=Pipeline(memory=None,
E         -                                 steps=[('reduce_dim',
E         -                                         PCA(copy=True, iterated_power='auto',
E         -                                             n_components=None,...
E         
E         ...Full output truncated (44 lines hidden), use '-vv' to show

sklearn/utils/tests/test_pprint.py:371: AssertionError
_________________________ test_n_max_elements_to_show __________________________

    def test_n_max_elements_to_show():
    
        n_max_elements_to_show = 30
        pp = _EstimatorPrettyPrinter(
            compact=True, indent=1, indent_at_name=True,
            n_max_elements_to_show=n_max_elements_to_show
        )
    
        # No ellipsis
        vocabulary = {i: i for i in range(n_max_elements_to_show)}
        vectorizer = CountVectorizer(vocabulary=vocabulary)
    
        expected = r"""
    CountVectorizer(analyzer='word', binary=False, decode_error='strict',
                    dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',
                    lowercase=True, max_df=1.0, max_features=None, min_df=1,
                    ngram_range=(1, 1), preprocessor=None, stop_words=None,
                    strip_accents=None, token_pattern='(?u)\\b\\w\\w+\\b',
                    tokenizer=None,
                    vocabulary={0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7,
                                8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 13: 13, 14: 14,
                                15: 15, 16: 16, 17: 17, 18: 18, 19: 19, 20: 20,
                                21: 21, 22: 22, 23: 23, 24: 24, 25: 25, 26: 26,
                                27: 27, 28: 28, 29: 29})"""
    
        expected = expected[1:]  # remove first \n
>       assert  pp.pformat(vectorizer) == expected
E       AssertionError: assert 'CountVectori... 28, 29: 29})' == 'CountVectori... 28, 29: 29})'
E         - CountVectorizer(analyzer='word', binary=False, decode_error='strict',
E         -                 dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',
E         -                 lowercase=True, max_df=1.0, max_features=None, min_df=1,
E         -                 ngram_range=(1, 1), preprocessor=None, stop_words=None,
E         -                 strip_accents=None, token_pattern='(?u)\\b\\w\\w+\\b',
E         -                 tokenizer=None,
E         -                 vocabulary={0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7,...
E         
E         ...Full output truncated (8 lines hidden), use '-vv' to show

sklearn/utils/tests/test_pprint.py:399: AssertionError
==================================== PASSES ====================================
__________________________ test_builtin_prettyprinter __________________________
----------------------------- Captured stdout call -----------------------------
LogisticRegression()
=========================== short test summary info ============================
PASSED sklearn/utils/tests/test_pprint.py::test_basic
PASSED sklearn/utils/tests/test_pprint.py::test_length_constraint
PASSED sklearn/utils/tests/test_pprint.py::test_builtin_prettyprinter
FAILED sklearn/utils/tests/test_pprint.py::test_changed_only - ValueError: Th...
FAILED sklearn/utils/tests/test_pprint.py::test_pipeline - AssertionError: as...
FAILED sklearn/utils/tests/test_pprint.py::test_deeply_nested - AssertionErro...
FAILED sklearn/utils/tests/test_pprint.py::test_gridsearch - assert "GridSear...
FAILED sklearn/utils/tests/test_pprint.py::test_gridsearch_pipeline - Asserti...
FAILED sklearn/utils/tests/test_pprint.py::test_n_max_elements_to_show - Asse...
========================= 6 failed, 3 passed in 0.89s ==========================
+ git checkout 0e3c1879b06d839171b7d0a607d71bbb19a966a9 sklearn/utils/tests/test_pprint.py
Updated 1 path from 686f52212
