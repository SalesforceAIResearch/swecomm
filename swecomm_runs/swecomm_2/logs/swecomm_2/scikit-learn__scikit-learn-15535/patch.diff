--- a/sklearn/metrics/cluster/_supervised.py
+++ b/sklearn/metrics/cluster/_supervised.py
@@ -43,10 +43,10 @@
         The predicted labels.
     """
     labels_true = check_array(
-        labels_true, ensure_2d=False, ensure_min_samples=0
+        labels_true, ensure_2d=False, ensure_min_samples=0, dtype=None
     )
     labels_pred = check_array(
-        labels_pred, ensure_2d=False, ensure_min_samples=0
+        labels_pred, ensure_2d=False, ensure_min_samples=0, dtype=None
     )
 
     # input checks
@@ -57,6 +57,12 @@
         raise ValueError(
             "labels_pred must be 1D: shape is %r" % (labels_pred.shape,))
     check_consistent_length(labels_true, labels_pred)
+
+    # Convert string labels to unique integers
+    if labels_true.dtype.kind in {'U', 'S'}:
+        labels_true = np.unique(labels_true, return_inverse=True)[1]
+    if labels_pred.dtype.kind in {'U', 'S'}:
+        labels_pred = np.unique(labels_pred, return_inverse=True)[1]
 
     return labels_true, labels_pred
 
@@ -161,7 +167,7 @@
 
     Parameters
     ----------
-    labels_true : int array, shape = [n_samples]
+    labels_true : array-like of shape (n_samples,)
         Ground truth class labels to be used as a reference
 
     labels_pred : array-like of shape (n_samples,)
@@ -589,10 +595,10 @@
 
     Parameters
     ----------
-    labels_true : int array, shape = [n_samples]
+    labels_true : array-like of shape (n_samples,)
         A clustering of the data into disjoint subsets.
 
-    labels_pred : int array-like of shape (n_samples,)
+    labels_pred : array-like of shape (n_samples,)
         A clustering of the data into disjoint subsets.
 
     contingency : {None, array, sparse matrix}, \
