2024-08-04 17:28:10,958 - INFO - Environment image sweb.env.x86_64.c795f4b88616b8462021ed:latest found for sympy__sympy-12481
Building instance image sweb.eval.x86_64.sympy__sympy-12481:latest for sympy__sympy-12481
2024-08-04 17:28:10,960 - INFO - Image sweb.eval.x86_64.sympy__sympy-12481:latest already exists, skipping build.
2024-08-04 17:28:10,960 - INFO - Creating container for sympy__sympy-12481...
2024-08-04 17:28:10,989 - INFO - Container for sympy__sympy-12481 created: a6e54f02fe378240bd93bb17979864c563437e9744ca9ce96c7ad6608d615ce0
2024-08-04 17:28:11,380 - INFO - Container for sympy__sympy-12481 started: a6e54f02fe378240bd93bb17979864c563437e9744ca9ce96c7ad6608d615ce0
2024-08-04 17:28:11,381 - INFO - Intermediate patch for sympy__sympy-12481 written to logs/run_evaluation/swecomm_2/swecomm_2/sympy__sympy-12481/patch.diff, now applying to container...
2024-08-04 17:28:11,556 - INFO - Failed to apply patch to container, trying again...
2024-08-04 17:28:11,595 - INFO - >>>>> Applied Patch:
patching file sympy/combinatorics/tests/test_permutations.py
patching file sympy/combinatorics/permutations.py

2024-08-04 17:28:11,927 - INFO - Git diff before:
diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 136ed5a478..7557bad66e 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -843,6 +843,11 @@ def __new__(cls, *args, **kwargs):
         Permutation([0, 4, 3, 5, 1, 2], size=10)
         >>> _.array_form
         [0, 4, 3, 5, 1, 2, 6, 7, 8, 9]
+
+        Non-disjoint cycles are allowed and applied in left-to-right order:
+
+        >>> Permutation([[0, 1], [0, 1]])
+        Permutation([0, 1])
         """
         size = kwargs.pop('size', None)
         if size is not None:
@@ -894,29 +899,20 @@ def __new__(cls, *args, **kwargs):
         # for convenience in case one wants to enter permutations where
         # counting starts from 1.
 
-        temp = flatten(args)
-        if has_dups(temp):
-            if is_cycle:
-                raise ValueError('there were repeated elements; to resolve '
-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))
-            else:
-                raise ValueError('there were repeated elements.')
-        temp = set(temp)
-
-        if not is_cycle and \
-                any(i not in temp for i in range(len(temp))):
-            raise ValueError("Integers 0 through %s must be present." %
-                             max(temp))
-
         if is_cycle:
-            # it's not necessarily canonical so we won't store
-            # it -- use the array form instead
+            # Apply non-disjoint cycles in left-to-right order
             c = Cycle()
             for ci in args:
                 c = c(*ci)
             aform = c.list()
         else:
             aform = list(args)
+            temp = set(aform)
+            if len(aform) != len(temp):
+                raise ValueError('there were repeated elements.')
+            if any(i not in temp for i in range(len(temp))):
+                raise ValueError("Integers 0 through %s must be present." %
+                                 max(temp))
         if size and size > len(aform):
             # don't allow for truncation of permutation which
             # might split a cycle and lead to an invalid aform
diff --git a/sympy/combinatorics/tests/test_permutations.py b/sympy/combinatorics/tests/test_permutations.py
index 7f8cd572e7..f2ec2157cc 100644
--- a/sympy/combinatorics/tests/test_permutations.py
+++ b/sympy/combinatorics/tests/test_permutations.py
@@ -353,6 +353,9 @@ def test_args():
     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?
     # but this is ok because cycles imply that only those listed moved
     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])
+    # Test non-disjoint cycles
+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])
+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])
 
 
 def test_Cycle():
2024-08-04 17:28:11,927 - INFO - Eval script for sympy__sympy-12481 written to logs/run_evaluation/swecomm_2/swecomm_2/sympy__sympy-12481/eval.sh; copying to container...
2024-08-04 17:28:15,694 - INFO - Test runtime: 3.63 seconds
2024-08-04 17:28:15,694 - INFO - Test output for sympy__sympy-12481 written to logs/run_evaluation/swecomm_2/swecomm_2/sympy__sympy-12481/test_output.txt
2024-08-04 17:28:15,746 - INFO - Git diff after:
diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py
index 136ed5a478..7557bad66e 100644
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -843,6 +843,11 @@ def __new__(cls, *args, **kwargs):
         Permutation([0, 4, 3, 5, 1, 2], size=10)
         >>> _.array_form
         [0, 4, 3, 5, 1, 2, 6, 7, 8, 9]
+
+        Non-disjoint cycles are allowed and applied in left-to-right order:
+
+        >>> Permutation([[0, 1], [0, 1]])
+        Permutation([0, 1])
         """
         size = kwargs.pop('size', None)
         if size is not None:
@@ -894,29 +899,20 @@ def __new__(cls, *args, **kwargs):
         # for convenience in case one wants to enter permutations where
         # counting starts from 1.
 
-        temp = flatten(args)
-        if has_dups(temp):
-            if is_cycle:
-                raise ValueError('there were repeated elements; to resolve '
-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))
-            else:
-                raise ValueError('there were repeated elements.')
-        temp = set(temp)
-
-        if not is_cycle and \
-                any(i not in temp for i in range(len(temp))):
-            raise ValueError("Integers 0 through %s must be present." %
-                             max(temp))
-
         if is_cycle:
-            # it's not necessarily canonical so we won't store
-            # it -- use the array form instead
+            # Apply non-disjoint cycles in left-to-right order
             c = Cycle()
             for ci in args:
                 c = c(*ci)
             aform = c.list()
         else:
             aform = list(args)
+            temp = set(aform)
+            if len(aform) != len(temp):
+                raise ValueError('there were repeated elements.')
+            if any(i not in temp for i in range(len(temp))):
+                raise ValueError("Integers 0 through %s must be present." %
+                                 max(temp))
         if size and size > len(aform):
             # don't allow for truncation of permutation which
             # might split a cycle and lead to an invalid aform
2024-08-04 17:28:15,746 - INFO - Git diff changed after running eval script
2024-08-04 17:28:15,746 - INFO - Grading answer for sympy__sympy-12481...
2024-08-04 17:28:15,748 - INFO - report: {'sympy__sympy-12481': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': True, 'tests_status': {'FAIL_TO_PASS': {'success': ['test_args'], 'failure': []}, 'PASS_TO_PASS': {'success': ['test_Permutation', 'test_josephus', 'test_ranking', 'test_mul', 'test_Cycle', 'test_from_sequence', 'test_printing_cyclic'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-12481: resolved: True
2024-08-04 17:28:15,748 - INFO - Attempting to stop container sweb.eval.sympy__sympy-12481.swecomm_2...
2024-08-04 17:28:31,000 - INFO - Attempting to remove container sweb.eval.sympy__sympy-12481.swecomm_2...
2024-08-04 17:28:31,034 - INFO - Container sweb.eval.sympy__sympy-12481.swecomm_2 removed.
