--- a/sympy/combinatorics/tests/test_permutations.py
+++ b/sympy/combinatorics/tests/test_permutations.py
@@ -353,6 +353,9 @@
     raises(ValueError, lambda: Permutation([4, 5], size=10))  # where are 0-3?
     # but this is ok because cycles imply that only those listed moved
     assert Permutation(4, 5) == Permutation([0, 1, 2, 3, 5, 4])
+    # Test non-disjoint cycles
+    assert Permutation([[0, 1], [0, 1]]) == Permutation([0, 1])
+    assert Permutation([[0, 1], [1, 2]]) == Permutation([1, 2, 0])
 
 
 def test_Cycle():
--- a/sympy/combinatorics/permutations.py
+++ b/sympy/combinatorics/permutations.py
@@ -843,6 +843,11 @@
         Permutation([0, 4, 3, 5, 1, 2], size=10)
         >>> _.array_form
         [0, 4, 3, 5, 1, 2, 6, 7, 8, 9]
+
+        Non-disjoint cycles are allowed and applied in left-to-right order:
+
+        >>> Permutation([[0, 1], [0, 1]])
+        Permutation([0, 1])
         """
         size = kwargs.pop('size', None)
         if size is not None:
@@ -894,29 +899,20 @@
         # for convenience in case one wants to enter permutations where
         # counting starts from 1.
 
-        temp = flatten(args)
-        if has_dups(temp):
-            if is_cycle:
-                raise ValueError('there were repeated elements; to resolve '
-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))
-            else:
-                raise ValueError('there were repeated elements.')
-        temp = set(temp)
-
-        if not is_cycle and \
-                any(i not in temp for i in range(len(temp))):
-            raise ValueError("Integers 0 through %s must be present." %
-                             max(temp))
-
         if is_cycle:
-            # it's not necessarily canonical so we won't store
-            # it -- use the array form instead
+            # Apply non-disjoint cycles in left-to-right order
             c = Cycle()
             for ci in args:
                 c = c(*ci)
             aform = c.list()
         else:
             aform = list(args)
+            temp = set(aform)
+            if len(aform) != len(temp):
+                raise ValueError('there were repeated elements.')
+            if any(i not in temp for i in range(len(temp))):
+                raise ValueError("Integers 0 through %s must be present." %
+                                 max(temp))
         if size and size > len(aform):
             # don't allow for truncation of permutation which
             # might split a cycle and lead to an invalid aform
