diff --git a/requests/models.py b/requests/models.py
index fbb3c7e6..e6695857 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -656,11 +656,11 @@ class Response(object):
         large responses.  The chunk size is the number of bytes it should
         read into memory.  This is not necessarily the length of each item
         returned as decoding can take place.
-
+    
         If decode_unicode is True, content will be decoded using the best
         available encoding based on the response.
         """
-
+    
         def generate():
             # Special case for urllib3.
             if hasattr(self.raw, 'stream'):
@@ -680,23 +680,25 @@ class Response(object):
                     if not chunk:
                         break
                     yield chunk
-
+    
             self._content_consumed = True
-
+    
         if self._content_consumed and isinstance(self._content, bool):
             raise StreamConsumedError()
         elif not isinstance(chunk_size, int):
             raise TypeError("chunk_size must be an int, it is instead a %s." % type(chunk_size))
         # simulate reading small chunks of the content
         reused_chunks = iter_slices(self._content, chunk_size)
-
+    
         stream_chunks = generate()
-
+    
         chunks = reused_chunks if self._content_consumed else stream_chunks
-
+    
         if decode_unicode:
+            if self.encoding is None:
+                self.encoding = self.apparent_encoding
             chunks = stream_decode_response_unicode(chunks, self)
-
+    
         return chunks
 
     def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None, delimiter=None):
