diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py
index fdac0f3560..213a0be121 100644
--- a/lib/matplotlib/axes/_axes.py
+++ b/lib/matplotlib/axes/_axes.py
@@ -2179,12 +2179,12 @@ class Axes(_AxesBase):
             # removes the units from unit packages like `pint` that
             # wrap numpy arrays.
             try:
-                x0 = cbook._safe_first_finite(x0)
+                x0 = cbook._safe_first_finite(x0, fallback=0)
             except (TypeError, IndexError, KeyError):
                 pass
 
             try:
-                x = cbook._safe_first_finite(xconv)
+                x = cbook._safe_first_finite(xconv, fallback=0)
             except (TypeError, IndexError, KeyError):
                 x = xconv
 
diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py
index 34c6ddb861..be3b044899 100644
--- a/lib/matplotlib/cbook/__init__.py
+++ b/lib/matplotlib/cbook/__init__.py
@@ -1706,7 +1706,7 @@ def safe_first_element(obj):
     return _safe_first_finite(obj, skip_nonfinite=False)
 
 
-def _safe_first_finite(obj, *, skip_nonfinite=True):
+def _safe_first_finite(obj, *, skip_nonfinite=True, fallback=None):
     """
     Return the first non-None (and optionally finite) element in *obj*.
 
@@ -1746,7 +1746,7 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):
         raise RuntimeError("matplotlib does not "
                            "support generators as input")
     else:
-        return next(val for val in obj if safe_isfinite(val))
+        return next((val for val in obj if safe_isfinite(val)), fallback)
 
 
 def sanitize_sequence(data):
