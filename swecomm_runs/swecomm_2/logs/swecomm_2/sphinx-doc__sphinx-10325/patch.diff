diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index 62631f7ff..667a783ab 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -112,7 +112,11 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:
 def inherited_members_option(arg: Any) -> Union[object, Set[str]]:
     """Used to convert the :members: option to auto directives."""
     if arg in (None, True):
-        return 'object'
+        return {'object'}
+    elif isinstance(arg, str):
+        return {arg}
+    elif isinstance(arg, (list, tuple)):
+        return set(arg)
     else:
         return arg
 
@@ -681,8 +685,11 @@ class Documenter:
         """
         def is_filtered_inherited_member(name: str, obj: Any) -> bool:
             if inspect.isclass(self.object):
+                inherited_members = self.options.inherited_members
+                if not isinstance(inherited_members, set):
+                    inherited_members = {inherited_members}
                 for cls in self.object.__mro__:
-                    if cls.__name__ == self.options.inherited_members and cls != self.object:
+                    if cls.__name__ in inherited_members and cls != self.object:
                         # given member is a member of specified *super class*
                         return True
                     elif name in cls.__dict__:
@@ -829,7 +836,7 @@ class Documenter:
             self.env.temp_data['autodoc:class'] = self.objpath[0]
 
         want_all = (all_members or
-                    self.options.inherited_members or
+                    bool(self.options.inherited_members) or
                     self.options.members is ALL)
         # find out which members are documentable
         members_check_module, members = self.get_object_members(want_all)
