diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py
index 7afa7180c..23cdb66ef 100644
--- a/sklearn/ensemble/voting.py
+++ b/sklearn/ensemble/voting.py
@@ -64,6 +64,8 @@ class _BaseVoting(_BaseComposition, TransformerMixin):
     def fit(self, X, y, sample_weight=None):
         """
         common fit operations.
+
+        Estimators set to `None` are ignored during fitting.
         """
         if self.estimators is None or len(self.estimators) == 0:
             raise AttributeError('Invalid `estimators` attribute, `estimators`'
@@ -85,18 +87,22 @@ class _BaseVoting(_BaseComposition, TransformerMixin):
         names, clfs = zip(*self.estimators)
         self._validate_names(names)
 
+        # Filter out None estimators before proceeding with fit operations
+        valid_estimators = [(name, est) for name, est in self.estimators if est is not None]
+        names, clfs = zip(*valid_estimators) if valid_estimators else ([], [])
+
         n_isnone = np.sum([clf is None for _, clf in self.estimators])
         if n_isnone == len(self.estimators):
             raise ValueError('All estimators are None. At least one is '
                              'required!')
 
         self.estimators_ = Parallel(n_jobs=self.n_jobs)(
-                delayed(_parallel_fit_estimator)(clone(clf), X, y,
+                delayed(_parallel_fit_estimator)(clone(est), X, y,
                                                  sample_weight=sample_weight)
-                for clf in clfs if clf is not None)
+                for name, est in valid_estimators)
 
         self.named_estimators_ = Bunch()
-        for k, e in zip(self.estimators, self.estimators_):
+        for k, e in zip(valid_estimators, self.estimators_):
             self.named_estimators_[k[0]] = e
         return self
 
