+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   lib/matplotlib/axes/_base.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 00afcc0c6d4d2e4390338127f05b8f4fdb4e7087
Author: Elliott Sales de Andrade <quantum.analyst@gmail.com>
Date:   Thu Jul 27 13:02:00 2023 -0400

    Improve typing in pyplot (#26385)
    
    * TYP: Fix types for path effects property
    
    * Add typing to _docstring module
    
    This is mainly useful because of its decorators, which previously caused
    any usage to lose typing. Consequently, there are several _new_ typing
    errors, many of which are fixed here, but not all.
    
    * Add typing to _copy_docstring_and_deprecators
    
    As before, this untyped function caused any decorator usage to make the
    wrapped function untyped. Now, these functions are typed again. This
    revealed several follow-on type issues, but many of them are expected
    (as tests tend to call things with incorrect arguments on purpose, use
    property aliases, etc.)
    
    * Add some more typing in pyplot
    
    * Add return annotation for pie
    
    * Remove return from pyplot funcs annotated as None
    
    * TYP: Explicitly re-export some API from pyplot
    
    See #26372

diff --git a/galleries/examples/misc/hyperlinks_sgskip.py b/galleries/examples/misc/hyperlinks_sgskip.py
index 8ecef0a9e3..6b6960a5d4 100644
--- a/galleries/examples/misc/hyperlinks_sgskip.py
+++ b/galleries/examples/misc/hyperlinks_sgskip.py
@@ -33,7 +33,7 @@ Z2 = np.exp(-(X - 1)**2 - (Y - 1)**2)
 Z = (Z1 - Z2) * 2
 
 im = plt.imshow(Z, interpolation='bilinear', cmap=cm.gray,
-                origin='lower', extent=[-3, 3, -3, 3])
+                origin='lower', extent=(-3, 3, -3, 3))
 
 im.set_url('https://www.google.com/')
 fig.savefig('image.svg')
diff --git a/galleries/examples/shapes_and_collections/dolphin.py b/galleries/examples/shapes_and_collections/dolphin.py
index bf28fdbcc2..0fcd67284a 100644
--- a/galleries/examples/shapes_and_collections/dolphin.py
+++ b/galleries/examples/shapes_and_collections/dolphin.py
@@ -33,7 +33,7 @@ ax.add_patch(circle)
 im = plt.imshow(np.random.random((100, 100)),
                 origin='lower', cmap=cm.winter,
                 interpolation='spline36',
-                extent=([-1, 1, -1, 1]))
+                extent=(-1, 1, -1, 1))
 im.set_clip_path(circle)
 
 plt.plot(x, y, 'o', color=(0.9, 0.9, 1.0), alpha=0.8)
diff --git a/galleries/examples/subplots_axes_and_figures/subplots_adjust.py b/galleries/examples/subplots_axes_and_figures/subplots_adjust.py
index 3eb6d709a5..d4393be51f 100644
--- a/galleries/examples/subplots_axes_and_figures/subplots_adjust.py
+++ b/galleries/examples/subplots_axes_and_figures/subplots_adjust.py
@@ -25,7 +25,7 @@ plt.subplot(212)
 plt.imshow(np.random.random((100, 100)))
 
 plt.subplots_adjust(bottom=0.1, right=0.8, top=0.9)
-cax = plt.axes([0.85, 0.1, 0.075, 0.8])
+cax = plt.axes((0.85, 0.1, 0.075, 0.8))
 plt.colorbar(cax=cax)
 
 plt.show()
diff --git a/galleries/examples/text_labels_and_annotations/autowrap.py b/galleries/examples/text_labels_and_annotations/autowrap.py
index ec8ffd6235..e52dc919ee 100644
--- a/galleries/examples/text_labels_and_annotations/autowrap.py
+++ b/galleries/examples/text_labels_and_annotations/autowrap.py
@@ -17,7 +17,7 @@ embed.
 import matplotlib.pyplot as plt
 
 fig = plt.figure()
-plt.axis([0, 10, 0, 10])
+plt.axis((0, 10, 0, 10))
 t = ("This is a really long string that I'd rather have wrapped so that it "
      "doesn't go outside of the figure, but if it's long enough it will go "
      "off the top or bottom!")
diff --git a/galleries/tutorials/pyplot.py b/galleries/tutorials/pyplot.py
index b7f9245190..02c829ac3f 100644
--- a/galleries/tutorials/pyplot.py
+++ b/galleries/tutorials/pyplot.py
@@ -73,7 +73,7 @@ plt.plot([1, 2, 3, 4], [1, 4, 9, 16])
 # example, to plot the above with red circles, you would issue
 
 plt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'ro')
-plt.axis([0, 6, 0, 20])
+plt.axis((0, 6, 0, 20))
 plt.show()
 
 # %%
diff --git a/lib/matplotlib/_docstring.pyi b/lib/matplotlib/_docstring.pyi
new file mode 100644
index 0000000000..0377dc5fe9
--- /dev/null
+++ b/lib/matplotlib/_docstring.pyi
@@ -0,0 +1,29 @@
+from typing import Any, Callable, TypeVar, overload
+
+
+_T = TypeVar('_T')
+
+
+class Substitution:
+    @overload
+    def __init__(self, *args: str): ...
+    @overload
+    def __init__(self, **kwargs: str): ...
+    def __call__(self, func: _T) -> _T: ...
+    def update(self, *args, **kwargs): ...  # type: ignore[no-untyped-def]
+
+
+class _ArtistKwdocLoader(dict[str, str]):
+    def __missing__(self, key: str) -> str: ...
+
+
+class _ArtistPropertiesSubstitution(Substitution):
+    def __init__(self) -> None: ...
+    def __call__(self, obj: _T) -> _T: ...
+
+
+def copy(source: Any) -> Callable[[_T], _T]: ...
+
+
+dedent_interpd: _ArtistPropertiesSubstitution
+interpd: _ArtistPropertiesSubstitution
diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py
index e891803871..b9d627c303 100644
--- a/lib/matplotlib/artist.py
+++ b/lib/matplotlib/artist.py
@@ -715,7 +715,7 @@ class Artist:
 
         Parameters
         ----------
-        path_effects : `.AbstractPathEffect`
+        path_effects : list of `.AbstractPathEffect`
         """
         self._path_effects = path_effects
         self.stale = True
diff --git a/lib/matplotlib/artist.pyi b/lib/matplotlib/artist.pyi
index 4597bed6fb..6e5dddaef6 100644
--- a/lib/matplotlib/artist.pyi
+++ b/lib/matplotlib/artist.pyi
@@ -83,8 +83,8 @@ class Artist:
         length: float | None = ...,
         randomness: float | None = ...,
     ) -> None: ...
-    def set_path_effects(self, path_effects: AbstractPathEffect) -> None: ...
-    def get_path_effects(self) -> AbstractPathEffect: ...
+    def set_path_effects(self, path_effects: list[AbstractPathEffect]) -> None: ...
+    def get_path_effects(self) -> list[AbstractPathEffect]: ...
     def get_figure(self) -> Figure | None: ...
     def set_figure(self, fig: Figure) -> None: ...
     def set_clip_box(self, clipbox: Bbox) -> None: ...
diff --git a/lib/matplotlib/axes/_axes.pyi b/lib/matplotlib/axes/_axes.pyi
index 4be2c55361..846da9e0cb 100644
--- a/lib/matplotlib/axes/_axes.pyi
+++ b/lib/matplotlib/axes/_axes.pyi
@@ -20,7 +20,7 @@ from matplotlib.legend import Legend
 from matplotlib.legend_handler import HandlerBase
 from matplotlib.lines import Line2D
 from matplotlib.mlab import GaussianKDE
-from matplotlib.patches import Rectangle, FancyArrow, Polygon, StepPatch
+from matplotlib.patches import Rectangle, FancyArrow, Polygon, StepPatch, Wedge
 from matplotlib.quiver import Quiver, QuiverKey, Barbs
 from matplotlib.text import Annotation, Text
 from matplotlib.transforms import Transform, Bbox
@@ -305,7 +305,7 @@ class Axes(_AxesBase):
         autopct: str | Callable[[float], str] | None = ...,
         pctdistance: float = ...,
         shadow: bool = ...,
-        labeldistance: float = ...,
+        labeldistance: float | None = ...,
         startangle: float = ...,
         radius: float = ...,
         counterclock: bool = ...,
@@ -318,7 +318,9 @@ class Axes(_AxesBase):
         normalize: bool = ...,
         hatch: str | Sequence[str] | None = ...,
         data=...,
-    ): ...
+    ) -> tuple[list[Wedge], list[Text]] | tuple[
+        list[Wedge], list[Text], list[Text]
+    ]: ...
     def errorbar(
         self,
         x: float | ArrayLike,
@@ -564,7 +566,7 @@ class Axes(_AxesBase):
         edges: ArrayLike | None = ...,
         *,
         orientation: Literal["vertical", "horizontal"] = ...,
-        baseline: float | ArrayLike = ...,
+        baseline: float | ArrayLike | None = ...,
         fill: bool = ...,
         data=...,
         **kwargs
@@ -736,7 +738,7 @@ class Axes(_AxesBase):
         showmeans: bool = ...,
         showextrema: bool = ...,
         showmedians: bool = ...,
-        quantiles: Sequence[float] | None = ...,
+        quantiles: Sequence[float | Sequence[float]] | None = ...,
         points: int = ...,
         bw_method: Literal["scott", "silverman"]
         | float
diff --git a/lib/matplotlib/axes/_base.pyi b/lib/matplotlib/axes/_base.pyi
index 7cf5f166ae..507ecc2e51 100644
--- a/lib/matplotlib/axes/_base.pyi
+++ b/lib/matplotlib/axes/_base.pyi
@@ -39,6 +39,7 @@ class _axis_method_wrapper:
 
 class _AxesBase(martist.Artist):
     name: str
+    patch: Patch
     spines: Spines
     fmt_xdata: Callable[[float], str] | None
     fmt_ydata: Callable[[float], str] | None
diff --git a/lib/matplotlib/backend_bases.py b/lib/matplotlib/backend_bases.py
index ac06eee261..435a5f6f49 100644
--- a/lib/matplotlib/backend_bases.py
+++ b/lib/matplotlib/backend_bases.py
@@ -2304,7 +2304,7 @@ class FigureCanvasBase:
             # ... later
             canvas.mpl_disconnect(cid)
         """
-        return self.callbacks.disconnect(cid)
+        self.callbacks.disconnect(cid)
 
     # Internal subclasses can override _timer_cls instead of new_timer, though
     # this is not a public API for third-party subclasses.
diff --git a/lib/matplotlib/cbook.pyi b/lib/matplotlib/cbook.pyi
index 69e52a0568..3bf0e345e9 100644
--- a/lib/matplotlib/cbook.pyi
+++ b/lib/matplotlib/cbook.pyi
@@ -20,6 +20,8 @@ from typing import (
 
 _T = TypeVar("_T")
 
+def _get_running_interactive_framework() -> str | None: ...
+
 class CallbackRegistry:
     exception_handler: Callable[[Exception], Any]
     callbacks: dict[Any, dict[int, Any]]
@@ -162,6 +164,7 @@ def normalize_kwargs(
     kw: dict[str, Any],
     alias_mapping: dict[str, list[str]] | type[Artist] | Artist | None = ...,
 ) -> dict[str, Any]: ...
+def _str_equal(obj: Any, s: str) -> bool: ...
 
 class _OrderedSet(collections.abc.MutableSet):
     def __init__(self) -> None: ...
@@ -171,4 +174,5 @@ class _OrderedSet(collections.abc.MutableSet):
     def add(self, key) -> None: ...
     def discard(self, key) -> None: ...
 
+def _backend_module_name(name: str) -> str: ...
 def _format_approx(number: float, precision: int) -> str: ...
diff --git a/lib/matplotlib/collections.pyi b/lib/matplotlib/collections.pyi
index 25eece49d7..9ed1746f6c 100644
--- a/lib/matplotlib/collections.pyi
+++ b/lib/matplotlib/collections.pyi
@@ -42,7 +42,7 @@ class Collection(artist.Artist, cm.ScalarMappable):
     def get_datalim(self, transData: transforms.Transform) -> transforms.Bbox: ...
     def set_pickradius(self, pickradius: float) -> None: ...
     def get_pickradius(self) -> float: ...
-    def set_urls(self, urls: Sequence[str]) -> None: ...
+    def set_urls(self, urls: Sequence[str | None]) -> None: ...
     def get_urls(self) -> Sequence[str | None]: ...
     def set_hatch(self, hatch: str) -> None: ...
     def get_hatch(self) -> str: ...
diff --git a/lib/matplotlib/container.pyi b/lib/matplotlib/container.pyi
index 406ee8b62c..9cc2e1ac2a 100644
--- a/lib/matplotlib/container.pyi
+++ b/lib/matplotlib/container.pyi
@@ -10,8 +10,8 @@ from numpy.typing import ArrayLike
 class Container(tuple):
     def __new__(cls, *args, **kwargs): ...
     def __init__(self, kl, label: Any | None = ...) -> None: ...
-    def remove(self): ...
-    def get_children(self): ...
+    def remove(self) -> None: ...
+    def get_children(self) -> list[Artist]: ...
     def get_label(self) -> str | None: ...
     def set_label(self, s: Any) -> None: ...
     def add_callback(self, func: Callable[[Artist], Any]) -> int: ...
diff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py
index 99af494c78..8cae12d0c5 100644
--- a/lib/matplotlib/pyplot.py
+++ b/lib/matplotlib/pyplot.py
@@ -49,13 +49,15 @@ import re
 import sys
 import threading
 import time
+from typing import cast, overload
 
 from cycler import cycler
 import matplotlib
 import matplotlib.colorbar
 import matplotlib.image
 from matplotlib import _api
-from matplotlib import rcsetup, style
+from matplotlib import (  # Re-exported for typing.
+    cm as cm, get_backend as get_backend, rcParams as rcParams, style as style)
 from matplotlib import _pylab_helpers, interactive
 from matplotlib import cbook
 from matplotlib import _docstring
@@ -63,18 +65,16 @@ from matplotlib.backend_bases import (
     FigureCanvasBase, FigureManagerBase, MouseButton)
 from matplotlib.figure import Figure, FigureBase, figaspect
 from matplotlib.gridspec import GridSpec, SubplotSpec
-from matplotlib import rcParams, rcParamsDefault, get_backend, rcParamsOrig
-from matplotlib.rcsetup import interactive_bk as _interactive_bk
+from matplotlib import rcsetup, rcParamsDefault, rcParamsOrig
 from matplotlib.artist import Artist
 from matplotlib.axes import Axes, Subplot  # type: ignore
 from matplotlib.projections import PolarAxes  # type: ignore
 from matplotlib import mlab  # for detrend_none, window_hanning
 from matplotlib.scale import get_scale_names
 
-from matplotlib import cm
-from matplotlib.cm import _colormaps as colormaps
+from matplotlib.cm import _colormaps
 from matplotlib.cm import register_cmap  # type: ignore
-from matplotlib.colors import _color_sequences as color_sequences
+from matplotlib.colors import _color_sequences
 
 import numpy as np
 
@@ -85,7 +85,8 @@ if TYPE_CHECKING:
     import datetime
     import pathlib
     import os
-    from typing import Any, BinaryIO, Literal
+    from typing import Any, BinaryIO, Literal, TypeVar
+    from typing_extensions import ParamSpec
 
     import PIL
     from numpy.typing import ArrayLike
@@ -115,13 +116,17 @@ if TYPE_CHECKING:
     from matplotlib.legend import Legend
     from matplotlib.mlab import GaussianKDE
     from matplotlib.image import AxesImage, FigureImage
-    from matplotlib.patches import FancyArrow, StepPatch
+    from matplotlib.patches import FancyArrow, StepPatch, Wedge
     from matplotlib.quiver import Barbs, Quiver, QuiverKey
     from matplotlib.scale import ScaleBase
     from matplotlib.transforms import Transform, Bbox
     from matplotlib.typing import ColorType, LineStyleType, MarkerType, HashableList
     from matplotlib.widgets import SubplotTool
 
+    _P = ParamSpec('_P')
+    _R = TypeVar('_R')
+
+
 # We may not need the following imports here:
 from matplotlib.colors import Normalize
 from matplotlib.lines import Line2D
@@ -138,17 +143,40 @@ from .ticker import (
 _log = logging.getLogger(__name__)
 
 
-def _copy_docstring_and_deprecators(method, func=None):
+# Explicit rename instead of import-as for typing's sake.
+colormaps = _colormaps
+color_sequences = _color_sequences
+
+
+@overload
+def _copy_docstring_and_deprecators(
+    method: Any,
+    func: Literal[None] = None
+) -> Callable[[Callable[_P, _R]], Callable[_P, _R]]: ...
+
+
+@overload
+def _copy_docstring_and_deprecators(
+    method: Any, func: Callable[_P, _R]) -> Callable[_P, _R]: ...
+
+
+def _copy_docstring_and_deprecators(
+    method: Any,
+    func: Callable[_P, _R] | None = None
+) -> Callable[[Callable[_P, _R]], Callable[_P, _R]] | Callable[_P, _R]:
     if func is None:
-        return functools.partial(_copy_docstring_and_deprecators, method)
-    decorators = [_docstring.copy(method)]
+        return cast('Callable[[Callable[_P, _R]], Callable[_P, _R]]',
+                    functools.partial(_copy_docstring_and_deprecators, method))
+    decorators: list[Callable[[Callable[_P, _R]], Callable[_P, _R]]] = [
+        _docstring.copy(method)
+    ]
     # Check whether the definition of *method* includes @_api.rename_parameter
     # or @_api.make_keyword_only decorators; if so, propagate them to the
     # pyplot wrapper as well.
-    while getattr(method, "__wrapped__", None) is not None:
-        decorator = _api.deprecation.DECORATORS.get(method)
-        if decorator:
-            decorators.append(decorator)
+    while hasattr(method, "__wrapped__"):
+        potential_decorator = _api.deprecation.DECORATORS.get(method)
+        if potential_decorator:
+            decorators.append(potential_decorator)
         method = method.__wrapped__
     for decorator in decorators[::-1]:
         func = decorator(func)
@@ -163,12 +191,12 @@ _ReplDisplayHook = Enum("_ReplDisplayHook", ["NONE", "PLAIN", "IPYTHON"])
 _REPL_DISPLAYHOOK = _ReplDisplayHook.NONE
 
 
-def _draw_all_if_interactive():
+def _draw_all_if_interactive() -> None:
     if matplotlib.is_interactive():
         draw_all()
 
 
-def install_repl_displayhook():
+def install_repl_displayhook() -> None:
     """
     Connect to the display hook of the current shell.
 
@@ -205,7 +233,7 @@ def install_repl_displayhook():
         ip.enable_gui(ipython_gui_name)
 
 
-def uninstall_repl_displayhook():
+def uninstall_repl_displayhook() -> None:
     """Disconnect from the display hook of the current shell."""
     global _REPL_DISPLAYHOOK
     if _REPL_DISPLAYHOOK is _ReplDisplayHook.IPYTHON:
@@ -235,10 +263,10 @@ def findobj(
     return o.findobj(match, include_self=include_self)
 
 
-_backend_mod = None
+_backend_mod: type[matplotlib.backend_bases._Backend] | None = None
 
 
-def _get_backend_mod():
+def _get_backend_mod() -> type[matplotlib.backend_bases._Backend]:
     """
     Ensure that a backend is selected and return it.
 
@@ -248,11 +276,11 @@ def _get_backend_mod():
         # Use rcParams._get("backend") to avoid going through the fallback
         # logic (which will (re)import pyplot and then call switch_backend if
         # we need to resolve the auto sentinel)
-        switch_backend(rcParams._get("backend"))
-    return _backend_mod
+        switch_backend(rcParams._get("backend"))  # type: ignore[attr-defined]
+    return cast(type[matplotlib.backend_bases._Backend], _backend_mod)
 
 
-def switch_backend(newbackend):
+def switch_backend(newbackend: str) -> None:
     """
     Set the pyplot backend.
 
@@ -283,9 +311,8 @@ def switch_backend(newbackend):
                    'macosx': 'macosx',
                    'headless': 'agg'}
 
-        best_guess = mapping.get(current_framework, None)
-        if best_guess is not None:
-            candidates = [best_guess]
+        if current_framework in mapping:
+            candidates = [mapping[current_framework]]
         else:
             candidates = []
         candidates += [
@@ -311,10 +338,9 @@ def switch_backend(newbackend):
     # have to escape the switch on access logic
     old_backend = dict.__getitem__(rcParams, 'backend')
 
-    backend_mod = importlib.import_module(
-        cbook._backend_module_name(newbackend))
+    module = importlib.import_module(cbook._backend_module_name(newbackend))
 
-    required_framework = backend_mod.FigureCanvas.required_interactive_framework
+    required_framework = module.FigureCanvas.required_interactive_framework
     if required_framework is not None:
         current_framework = cbook._get_running_interactive_framework()
         if (current_framework and required_framework
@@ -328,15 +354,15 @@ def switch_backend(newbackend):
 
     # Classically, backends can directly export these functions.  This should
     # keep working for backcompat.
-    new_figure_manager = getattr(backend_mod, "new_figure_manager", None)
-    show = getattr(backend_mod, "show", None)
+    new_figure_manager = getattr(module, "new_figure_manager", None)
+    show = getattr(module, "show", None)
 
     # In that classical approach, backends are implemented as modules, but
     # "inherit" default method implementations from backend_bases._Backend.
     # This is achieved by creating a "class" that inherits from
     # backend_bases._Backend and whose body is filled with the module globals.
     class backend_mod(matplotlib.backend_bases._Backend):
-        locals().update(vars(backend_mod))
+        locals().update(vars(module))
 
     # However, the newer approach for defining new_figure_manager and
     # show is to derive them from canvas methods.  In that case, also
@@ -359,10 +385,12 @@ def switch_backend(newbackend):
                 if manager:
                     manager.canvas.draw_idle()
 
-        backend_mod.new_figure_manager_given_figure = \
-            new_figure_manager_given_figure
-        backend_mod.new_figure_manager = new_figure_manager
-        backend_mod.draw_if_interactive = draw_if_interactive
+        backend_mod.new_figure_manager_given_figure = (  # type: ignore[method-assign]
+            new_figure_manager_given_figure)
+        backend_mod.new_figure_manager = (  # type: ignore[method-assign]
+            new_figure_manager)
+        backend_mod.draw_if_interactive = (  # type: ignore[method-assign]
+            draw_if_interactive)
 
     # If the manager explicitly overrides pyplot_show, use it even if a global
     # show is already present, as the latter may be here for backcompat.
@@ -377,7 +405,8 @@ def switch_backend(newbackend):
     if (show is None
             or (manager_pyplot_show is not None
                 and manager_pyplot_show != base_pyplot_show)):
-        backend_mod.show = manager_class.pyplot_show
+        _pyplot_show = cast('Any', manager_class).pyplot_show
+        backend_mod.show = _pyplot_show  # type: ignore[method-assign]
 
     _log.debug("Loaded backend %s version %s.",
                newbackend, backend_mod.backend_version)
@@ -390,7 +419,7 @@ def switch_backend(newbackend):
 
     # Need to keep a global reference to the backend for compatibility reasons.
     # See https://github.com/matplotlib/matplotlib/issues/6092
-    matplotlib.backends.backend = newbackend
+    matplotlib.backends.backend = newbackend  # type: ignore[attr-defined]
     if not cbook._str_equal(old_backend, newbackend):
         close("all")
 
@@ -399,9 +428,10 @@ def switch_backend(newbackend):
     install_repl_displayhook()
 
 
-def _warn_if_gui_out_of_main_thread():
+def _warn_if_gui_out_of_main_thread() -> None:
     warn = False
-    if _get_backend_mod().FigureCanvas.required_interactive_framework:
+    canvas_class = cast(type[FigureCanvasBase], _get_backend_mod().FigureCanvas)
+    if canvas_class.required_interactive_framework:
         if hasattr(threading, 'get_native_id'):
             # This compares native thread ids because even if Python-level
             # Thread objects match, the underlying OS thread (which is what
@@ -1003,7 +1033,7 @@ def connect(s: str, func: Callable[[Event], Any]) -> int:
 
 @_copy_docstring_and_deprecators(FigureCanvasBase.mpl_disconnect)
 def disconnect(cid: int) -> None:
-    return gcf().canvas.mpl_disconnect(cid)
+    gcf().canvas.mpl_disconnect(cid)
 
 
 def close(fig: None | int | str | Figure | Literal["all"] = None) -> None:
@@ -1941,6 +1971,7 @@ def xticks(
     """
     ax = gca()
 
+    locs: list[Tick] | np.ndarray
     if ticks is None:
         locs = ax.get_xticks(minor=minor)
         if labels is not None:
@@ -2011,6 +2042,7 @@ def yticks(
     """
     ax = gca()
 
+    locs: list[Tick] | np.ndarray
     if ticks is None:
         locs = ax.get_yticks(minor=minor)
         if labels is not None:
@@ -2297,7 +2329,7 @@ def imread(
 def imsave(
     fname: str | os.PathLike | BinaryIO, arr: ArrayLike, **kwargs
 ) -> None:
-    return matplotlib.image.imsave(fname, arr, **kwargs)
+    matplotlib.image.imsave(fname, arr, **kwargs)
 
 
 def matshow(A: ArrayLike, fignum: None | int = None, **kwargs) -> AxesImage:
@@ -2379,7 +2411,7 @@ def polar(*args, **kwargs) -> list[Line2D]:
 # is compatible with the current running interactive framework.
 if (rcParams["backend_fallback"]
         and rcParams._get_backend_or_none() in (  # type: ignore
-            set(_interactive_bk) - {'WebAgg', 'nbAgg'})
+            set(rcsetup.interactive_bk) - {'WebAgg', 'nbAgg'})
         and cbook._get_running_interactive_framework()):  # type: ignore
     rcParams._set("backend", rcsetup._auto_backend_sentinel)  # type: ignore
 
@@ -2468,7 +2500,7 @@ def subplots_adjust(
     wspace: float | None = None,
     hspace: float | None = None,
 ) -> None:
-    return gcf().subplots_adjust(
+    gcf().subplots_adjust(
         left=left, bottom=bottom, right=right, top=top, wspace=wspace, hspace=hspace
     )
 
@@ -2488,7 +2520,7 @@ def tight_layout(
     w_pad: float | None = None,
     rect: tuple[float, float, float, float] | None = None,
 ) -> None:
-    return gcf().tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)
+    gcf().tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)
 
 
 # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
@@ -2576,7 +2608,7 @@ def autoscale(
     axis: Literal["both", "x", "y"] = "both",
     tight: bool | None = None,
 ) -> None:
-    return gca().autoscale(enable=enable, axis=axis, tight=tight)
+    gca().autoscale(enable=enable, axis=axis, tight=tight)
 
 
 # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
@@ -2831,8 +2863,8 @@ def contour(*args, data=None, **kwargs) -> QuadContourSet:
     __ret = gca().contour(
         *args, **({"data": data} if data is not None else {}), **kwargs
     )
-    if __ret._A is not None:
-        sci(__ret)  # noqa
+    if __ret._A is not None:  # type: ignore[attr-defined]
+        sci(__ret)
     return __ret
 
 
@@ -2842,8 +2874,8 @@ def contourf(*args, data=None, **kwargs) -> QuadContourSet:
     __ret = gca().contourf(
         *args, **({"data": data} if data is not None else {}), **kwargs
     )
-    if __ret._A is not None:
-        sci(__ret)  # noqa
+    if __ret._A is not None:  # type: ignore[attr-defined]
+        sci(__ret)
     return __ret
 
 
@@ -3045,7 +3077,7 @@ def grid(
     axis: Literal["both", "x", "y"] = "both",
     **kwargs,
 ) -> None:
-    return gca().grid(visible=visible, which=which, axis=axis, **kwargs)
+    gca().grid(visible=visible, which=which, axis=axis, **kwargs)
 
 
 # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
@@ -3153,7 +3185,7 @@ def stairs(
     edges: ArrayLike | None = None,
     *,
     orientation: Literal["vertical", "horizontal"] = "vertical",
-    baseline: float | ArrayLike = 0,
+    baseline: float | ArrayLike | None = 0,
     fill: bool = False,
     data=None,
     **kwargs,
@@ -3281,7 +3313,7 @@ def legend(*args, **kwargs) -> Legend:
 def locator_params(
     axis: Literal["both", "x", "y"] = "both", tight: bool | None = None, **kwargs
 ) -> None:
-    return gca().locator_params(axis=axis, tight=tight, **kwargs)
+    gca().locator_params(axis=axis, tight=tight, **kwargs)
 
 
 # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
@@ -3331,13 +3363,13 @@ def margins(
 # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
 @_copy_docstring_and_deprecators(Axes.minorticks_off)
 def minorticks_off() -> None:
-    return gca().minorticks_off()
+    gca().minorticks_off()
 
 
 # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
 @_copy_docstring_and_deprecators(Axes.minorticks_on)
 def minorticks_on() -> None:
-    return gca().minorticks_on()
+    gca().minorticks_on()
 
 
 # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
@@ -3433,7 +3465,7 @@ def pie(
     autopct: str | Callable[[float], str] | None = None,
     pctdistance: float = 0.6,
     shadow: bool = False,
-    labeldistance: float = 1.1,
+    labeldistance: float | None = 1.1,
     startangle: float = 0,
     radius: float = 1,
     counterclock: bool = True,
@@ -3446,7 +3478,7 @@ def pie(
     normalize: bool = True,
     hatch: str | Sequence[str] | None = None,
     data=None,
-):
+) -> tuple[list[Wedge], list[Text]] | tuple[list[Wedge], list[Text], list[Text]]:
     return gca().pie(
         x,
         explode=explode,
@@ -3849,7 +3881,7 @@ def text(
 # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
 @_copy_docstring_and_deprecators(Axes.tick_params)
 def tick_params(axis: Literal["both", "x", "y"] = "both", **kwargs) -> None:
-    return gca().tick_params(axis=axis, **kwargs)
+    gca().tick_params(axis=axis, **kwargs)
 
 
 # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
@@ -3863,7 +3895,7 @@ def ticklabel_format(
     useLocale: bool | None = None,
     useMathText: bool | None = None,
 ) -> None:
-    return gca().ticklabel_format(
+    gca().ticklabel_format(
         axis=axis,
         style=style,
         scilimits=scilimits,
@@ -3877,8 +3909,8 @@ def ticklabel_format(
 @_copy_docstring_and_deprecators(Axes.tricontour)
 def tricontour(*args, **kwargs):
     __ret = gca().tricontour(*args, **kwargs)
-    if __ret._A is not None:
-        sci(__ret)  # noqa
+    if __ret._A is not None:  # type: ignore[attr-defined]
+        sci(__ret)
     return __ret
 
 
@@ -3886,8 +3918,8 @@ def tricontour(*args, **kwargs):
 @_copy_docstring_and_deprecators(Axes.tricontourf)
 def tricontourf(*args, **kwargs):
     __ret = gca().tricontourf(*args, **kwargs)
-    if __ret._A is not None:
-        sci(__ret)  # noqa
+    if __ret._A is not None:  # type: ignore[attr-defined]
+        sci(__ret)
     return __ret
 
 
@@ -3935,7 +3967,7 @@ def violinplot(
     showmeans: bool = False,
     showextrema: bool = True,
     showmedians: bool = False,
-    quantiles: Sequence[float] | None = None,
+    quantiles: Sequence[float | Sequence[float]] | None = None,
     points: int = 100,
     bw_method: Literal["scott", "silverman"]
     | float
@@ -4012,7 +4044,7 @@ def xcorr(
 # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
 @_copy_docstring_and_deprecators(Axes._sci)
 def sci(im: ScalarMappable) -> None:
-    return gca()._sci(im)
+    gca()._sci(im)
 
 
 # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
@@ -4062,13 +4094,13 @@ def ylabel(
 # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
 @_copy_docstring_and_deprecators(Axes.set_xscale)
 def xscale(value: str | ScaleBase, **kwargs) -> None:
-    return gca().set_xscale(value, **kwargs)
+    gca().set_xscale(value, **kwargs)
 
 
 # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
 @_copy_docstring_and_deprecators(Axes.set_yscale)
 def yscale(value: str | ScaleBase, **kwargs) -> None:
-    return gca().set_yscale(value, **kwargs)
+    gca().set_yscale(value, **kwargs)
 
 
 # Autogenerated by boilerplate.py.  Do not edit as changes will be lost.
diff --git a/lib/matplotlib/rcsetup.pyi b/lib/matplotlib/rcsetup.pyi
index 9c368d5224..8a8a9e71d6 100644
--- a/lib/matplotlib/rcsetup.pyi
+++ b/lib/matplotlib/rcsetup.pyi
@@ -1,4 +1,3 @@
-
 from cycler import Cycler
 
 from collections.abc import Callable, Iterable
@@ -41,6 +40,9 @@ def validate_float(s: Any) -> float: ...
 def validate_float_or_None(s: Any) -> float | None: ...
 def validate_floatlist(s: Any) -> list[float]: ...
 def validate_fonttype(s: Any) -> int: ...
+
+_auto_backend_sentinel: object
+
 def validate_backend(s: Any) -> str: ...
 def validate_color_or_inherit(s: Any) -> Literal["inherit"] | ColorType: ...
 def validate_color_or_auto(s: Any) -> ColorType | Literal["auto"]: ...
diff --git a/lib/matplotlib/tests/test_artist.py b/lib/matplotlib/tests/test_artist.py
index 9bfb4ebce1..dbb5dd2305 100644
--- a/lib/matplotlib/tests/test_artist.py
+++ b/lib/matplotlib/tests/test_artist.py
@@ -23,8 +23,8 @@ def test_patch_transform_of_none():
     # specifications
 
     ax = plt.axes()
-    ax.set_xlim([1, 3])
-    ax.set_ylim([1, 3])
+    ax.set_xlim(1, 3)
+    ax.set_ylim(1, 3)
 
     # Draw an ellipse over data coord (2, 2) by specifying device coords.
     xy_data = (2, 2)
@@ -65,8 +65,8 @@ def test_collection_transform_of_none():
     # transform specifications
 
     ax = plt.axes()
-    ax.set_xlim([1, 3])
-    ax.set_ylim([1, 3])
+    ax.set_xlim(1, 3)
+    ax.set_ylim(1, 3)
 
     # draw an ellipse over data coord (2, 2) by specifying device coords
     xy_data = (2, 2)
diff --git a/lib/matplotlib/tests/test_axes.py b/lib/matplotlib/tests/test_axes.py
index 79c67a2083..baef9ac09a 100644
--- a/lib/matplotlib/tests/test_axes.py
+++ b/lib/matplotlib/tests/test_axes.py
@@ -2948,7 +2948,7 @@ def test_as_mpl_axes_api():
     prj2.theta_offset = np.pi
 
     # testing axes creation with plt.axes
-    ax = plt.axes([0, 0, 1, 1], projection=prj)
+    ax = plt.axes((0, 0, 1, 1), projection=prj)
     assert type(ax) == PolarAxes
     plt.close()
 
@@ -3574,14 +3574,14 @@ def test_vert_violinplot_baseline():
     np.random.seed(414213562)
     data = [np.random.normal(size=100) for _ in range(4)]
     ax = plt.axes()
-    ax.violinplot(data, positions=range(4), showmeans=0, showextrema=0,
-                  showmedians=0)
+    ax.violinplot(data, positions=range(4), showmeans=False, showextrema=False,
+                  showmedians=False)
 
     # Reuse testcase from above for a labeled data test
     data = {"d": data}
     fig, ax = plt.subplots()
-    ax.violinplot("d", positions=range(4), showmeans=0, showextrema=0,
-                  showmedians=0, data=data)
+    ax.violinplot("d", positions=range(4), showmeans=False, showextrema=False,
+                  showmedians=False, data=data)
 
 
 @image_comparison(['violinplot_vert_showmeans.png'])
@@ -3590,8 +3590,8 @@ def test_vert_violinplot_showmeans():
     # First 9 digits of frac(sqrt(3))
     np.random.seed(732050807)
     data = [np.random.normal(size=100) for _ in range(4)]
-    ax.violinplot(data, positions=range(4), showmeans=1, showextrema=0,
-                  showmedians=0)
+    ax.violinplot(data, positions=range(4), showmeans=True, showextrema=False,
+                  showmedians=False)
 
 
 @image_comparison(['violinplot_vert_showextrema.png'])
@@ -3600,8 +3600,8 @@ def test_vert_violinplot_showextrema():
     # First 9 digits of frac(sqrt(5))
     np.random.seed(236067977)
     data = [np.random.normal(size=100) for _ in range(4)]
-    ax.violinplot(data, positions=range(4), showmeans=0, showextrema=1,
-                  showmedians=0)
+    ax.violinplot(data, positions=range(4), showmeans=False, showextrema=True,
+                  showmedians=False)
 
 
 @image_comparison(['violinplot_vert_showmedians.png'])
@@ -3610,8 +3610,8 @@ def test_vert_violinplot_showmedians():
     # First 9 digits of frac(sqrt(7))
     np.random.seed(645751311)
     data = [np.random.normal(size=100) for _ in range(4)]
-    ax.violinplot(data, positions=range(4), showmeans=0, showextrema=0,
-                  showmedians=1)
+    ax.violinplot(data, positions=range(4), showmeans=False, showextrema=False,
+                  showmedians=True)
 
 
 @image_comparison(['violinplot_vert_showall.png'])
@@ -3620,8 +3620,8 @@ def test_vert_violinplot_showall():
     # First 9 digits of frac(sqrt(11))
     np.random.seed(316624790)
     data = [np.random.normal(size=100) for _ in range(4)]
-    ax.violinplot(data, positions=range(4), showmeans=1, showextrema=1,
-                  showmedians=1,
+    ax.violinplot(data, positions=range(4), showmeans=True, showextrema=True,
+                  showmedians=True,
                   quantiles=[[0.1, 0.9], [0.2, 0.8], [0.3, 0.7], [0.4, 0.6]])
 
 
@@ -3631,8 +3631,8 @@ def test_vert_violinplot_custompoints_10():
     # First 9 digits of frac(sqrt(13))
     np.random.seed(605551275)
     data = [np.random.normal(size=100) for _ in range(4)]
-    ax.violinplot(data, positions=range(4), showmeans=0, showextrema=0,
-                  showmedians=0, points=10)
+    ax.violinplot(data, positions=range(4), showmeans=False, showextrema=False,
+                  showmedians=False, points=10)
 
 
 @image_comparison(['violinplot_vert_custompoints_200.png'])
@@ -3641,8 +3641,8 @@ def test_vert_violinplot_custompoints_200():
     # First 9 digits of frac(sqrt(17))
     np.random.seed(123105625)
     data = [np.random.normal(size=100) for _ in range(4)]
-    ax.violinplot(data, positions=range(4), showmeans=0, showextrema=0,
-                  showmedians=0, points=200)
+    ax.violinplot(data, positions=range(4), showmeans=False, showextrema=False,
+                  showmedians=False, points=200)
 
 
 @image_comparison(['violinplot_horiz_baseline.png'])
@@ -3651,8 +3651,8 @@ def test_horiz_violinplot_baseline():
     # First 9 digits of frac(sqrt(19))
     np.random.seed(358898943)
     data = [np.random.normal(size=100) for _ in range(4)]
-    ax.violinplot(data, positions=range(4), vert=False, showmeans=0,
-                  showextrema=0, showmedians=0)
+    ax.violinplot(data, positions=range(4), vert=False, showmeans=False,
+                  showextrema=False, showmedians=False)
 
 
 @image_comparison(['violinplot_horiz_showmedians.png'])
@@ -3661,8 +3661,8 @@ def test_horiz_violinplot_showmedians():
     # First 9 digits of frac(sqrt(23))
     np.random.seed(795831523)
     data = [np.random.normal(size=100) for _ in range(4)]
-    ax.violinplot(data, positions=range(4), vert=False, showmeans=0,
-                  showextrema=0, showmedians=1)
+    ax.violinplot(data, positions=range(4), vert=False, showmeans=False,
+                  showextrema=False, showmedians=True)
 
 
 @image_comparison(['violinplot_horiz_showmeans.png'])
@@ -3671,8 +3671,8 @@ def test_horiz_violinplot_showmeans():
     # First 9 digits of frac(sqrt(29))
     np.random.seed(385164807)
     data = [np.random.normal(size=100) for _ in range(4)]
-    ax.violinplot(data, positions=range(4), vert=False, showmeans=1,
-                  showextrema=0, showmedians=0)
+    ax.violinplot(data, positions=range(4), vert=False, showmeans=True,
+                  showextrema=False, showmedians=False)
 
 
 @image_comparison(['violinplot_horiz_showextrema.png'])
@@ -3681,8 +3681,8 @@ def test_horiz_violinplot_showextrema():
     # First 9 digits of frac(sqrt(31))
     np.random.seed(567764362)
     data = [np.random.normal(size=100) for _ in range(4)]
-    ax.violinplot(data, positions=range(4), vert=False, showmeans=0,
-                  showextrema=1, showmedians=0)
+    ax.violinplot(data, positions=range(4), vert=False, showmeans=False,
+                  showextrema=True, showmedians=False)
 
 
 @image_comparison(['violinplot_horiz_showall.png'])
@@ -3691,8 +3691,8 @@ def test_horiz_violinplot_showall():
     # First 9 digits of frac(sqrt(37))
     np.random.seed(82762530)
     data = [np.random.normal(size=100) for _ in range(4)]
-    ax.violinplot(data, positions=range(4), vert=False, showmeans=1,
-                  showextrema=1, showmedians=1,
+    ax.violinplot(data, positions=range(4), vert=False, showmeans=True,
+                  showextrema=True, showmedians=True,
                   quantiles=[[0.1, 0.9], [0.2, 0.8], [0.3, 0.7], [0.4, 0.6]])
 
 
@@ -3702,8 +3702,8 @@ def test_horiz_violinplot_custompoints_10():
     # First 9 digits of frac(sqrt(41))
     np.random.seed(403124237)
     data = [np.random.normal(size=100) for _ in range(4)]
-    ax.violinplot(data, positions=range(4), vert=False, showmeans=0,
-                  showextrema=0, showmedians=0, points=10)
+    ax.violinplot(data, positions=range(4), vert=False, showmeans=False,
+                  showextrema=False, showmedians=False, points=10)
 
 
 @image_comparison(['violinplot_horiz_custompoints_200.png'])
@@ -3712,8 +3712,8 @@ def test_horiz_violinplot_custompoints_200():
     # First 9 digits of frac(sqrt(43))
     np.random.seed(557438524)
     data = [np.random.normal(size=100) for _ in range(4)]
-    ax.violinplot(data, positions=range(4), vert=False, showmeans=0,
-                  showextrema=0, showmedians=0, points=200)
+    ax.violinplot(data, positions=range(4), vert=False, showmeans=False,
+                  showextrema=False, showmedians=False, points=200)
 
 
 def test_violinplot_bad_positions():
diff --git a/lib/matplotlib/tests/test_bbox_tight.py b/lib/matplotlib/tests/test_bbox_tight.py
index 7e0ad945b3..4d4624e13f 100644
--- a/lib/matplotlib/tests/test_bbox_tight.py
+++ b/lib/matplotlib/tests/test_bbox_tight.py
@@ -92,8 +92,8 @@ def test_bbox_inches_tight_clipping():
     # to generate an appropriately tight bbox
     plt.scatter(np.arange(10), np.arange(10))
     ax = plt.gca()
-    ax.set_xlim([0, 5])
-    ax.set_ylim([0, 5])
+    ax.set_xlim(0, 5)
+    ax.set_ylim(0, 5)
 
     # make a massive rectangle and clip it with a path
     patch = mpatches.Rectangle([-50, -50], 100, 100,
diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py
index fd872bac98..b1af0abbc5 100644
--- a/lib/matplotlib/tests/test_patches.py
+++ b/lib/matplotlib/tests/test_patches.py
@@ -297,8 +297,8 @@ def test_patch_alpha_coloring():
                                edgecolor=(0, 0, 1, 0.75))
     ax.add_patch(patch)
 
-    ax.set_xlim([-1, 2])
-    ax.set_ylim([-1, 2])
+    ax.set_xlim(-1, 2)
+    ax.set_ylim(-1, 2)
 
 
 @image_comparison(['patch_alpha_override'], remove_text=True)
@@ -329,8 +329,8 @@ def test_patch_alpha_override():
                                edgecolor=(0, 0, 1, 0.75))
     ax.add_patch(patch)
 
-    ax.set_xlim([-1, 2])
-    ax.set_ylim([-1, 2])
+    ax.set_xlim(-1, 2)
+    ax.set_ylim(-1, 2)
 
 
 @mpl.style.context('default')
@@ -366,8 +366,8 @@ def test_patch_custom_linestyle():
         facecolor=(1, 0, 0), edgecolor=(0, 0, 1))
     ax.add_patch(patch)
 
-    ax.set_xlim([-1, 2])
-    ax.set_ylim([-1, 2])
+    ax.set_xlim(-1, 2)
+    ax.set_ylim(-1, 2)
 
 
 def test_patch_linestyle_accents():
@@ -464,8 +464,8 @@ def test_wedge_range():
 
         ax.add_artist(wedge)
 
-    ax.set_xlim([-2, 8])
-    ax.set_ylim([-2, 9])
+    ax.set_xlim(-2, 8)
+    ax.set_ylim(-2, 9)
 
 
 def test_patch_str():
diff --git a/lib/matplotlib/tests/test_patheffects.py b/lib/matplotlib/tests/test_patheffects.py
index 29ddedacac..32cce14178 100644
--- a/lib/matplotlib/tests/test_patheffects.py
+++ b/lib/matplotlib/tests/test_patheffects.py
@@ -81,7 +81,7 @@ def test_patheffects_stroked_text():
     ]
     font_size = 50
 
-    ax = plt.axes([0, 0, 1, 1])
+    ax = plt.axes((0, 0, 1, 1))
     for i, chunk in enumerate(text_chunks):
         text = ax.text(x=0.01, y=(0.9 - i * 0.13), s=chunk,
                        fontdict={'ha': 'left', 'va': 'center',
diff --git a/lib/matplotlib/tests/test_png.py b/lib/matplotlib/tests/test_png.py
index 646db60cd0..066eb01c3a 100644
--- a/lib/matplotlib/tests/test_png.py
+++ b/lib/matplotlib/tests/test_png.py
@@ -20,7 +20,7 @@ def test_pngsuite():
         if data.ndim == 2:
             # keep grayscale images gray
             cmap = cm.gray
-        plt.imshow(data, extent=[i, i + 1, 0, 1], cmap=cmap)
+        plt.imshow(data, extent=(i, i + 1, 0, 1), cmap=cmap)
 
     plt.gca().patch.set_facecolor("#ddffff")
     plt.gca().set_xlim(0, len(files))
diff --git a/lib/matplotlib/tests/test_subplots.py b/lib/matplotlib/tests/test_subplots.py
index 462dc55d8a..e0a8257596 100644
--- a/lib/matplotlib/tests/test_subplots.py
+++ b/lib/matplotlib/tests/test_subplots.py
@@ -123,7 +123,7 @@ def test_label_outer_span():
 
 
 def test_label_outer_non_gridspec():
-    ax = plt.axes([0, 0, 1, 1])
+    ax = plt.axes((0, 0, 1, 1))
     ax.label_outer()  # Does nothing.
     check_visible([ax], [True], [True])
 
diff --git a/lib/matplotlib/tests/test_text.py b/lib/matplotlib/tests/test_text.py
index 4215927f05..bd3a88fa61 100644
--- a/lib/matplotlib/tests/test_text.py
+++ b/lib/matplotlib/tests/test_text.py
@@ -291,8 +291,8 @@ def test_alignment():
     ax.plot([0, 1], [0.5, 0.5])
     ax.plot([0, 1], [1.0, 1.0])
 
-    ax.set_xlim([0, 1])
-    ax.set_ylim([0, 1.5])
+    ax.set_xlim(0, 1)
+    ax.set_ylim(0, 1.5)
     ax.set_xticks([])
     ax.set_yticks([])
 
diff --git a/lib/matplotlib/transforms.pyi b/lib/matplotlib/transforms.pyi
index 6084a94017..6554d9d879 100644
--- a/lib/matplotlib/transforms.pyi
+++ b/lib/matplotlib/transforms.pyi
@@ -26,7 +26,7 @@ class TransformNode:
 class BboxBase(TransformNode):
     is_bbox: bool
     is_affine: bool
-    def frozen(self) -> TransformNode: ...
+    def frozen(self) -> Bbox: ...
     def __array__(self, *args, **kwargs): ...
     @property
     def x0(self) -> float: ...
diff --git a/requirements/testing/mypy.txt b/requirements/testing/mypy.txt
index c5f68c57bc..707965be5a 100644
--- a/requirements/testing/mypy.txt
+++ b/requirements/testing/mypy.txt
@@ -1,6 +1,7 @@
 # Extra pip requirements for the GitHub Actions mypy build
 
 mypy==1.1.1
+typing-extensions
 
 # Extra stubs distributed separately from the main pypi package
 pandas-stubs
diff --git a/tools/boilerplate.py b/tools/boilerplate.py
index e3b4809d96..bcb41bc206 100644
--- a/tools/boilerplate.py
+++ b/tools/boilerplate.py
@@ -73,13 +73,13 @@ def {name}{signature}:
 AXES_METHOD_TEMPLATE = AUTOGEN_MSG + """
 @_copy_docstring_and_deprecators(Axes.{called_name})
 def {name}{signature}:
-    return gca().{called_name}{call}
+    {return_statement}gca().{called_name}{call}
 """
 
 FIGURE_METHOD_TEMPLATE = AUTOGEN_MSG + """
 @_copy_docstring_and_deprecators(Figure.{called_name})
 def {name}{signature}:
-    return gcf().{called_name}{call}
+    {return_statement}gcf().{called_name}{call}
 """
 
 CMAP_TEMPLATE = '''
@@ -169,6 +169,7 @@ def generate_function(name, called_fullname, template, **kwargs):
 
     # Replace self argument.
     params = list(signature.parameters.values())[1:]
+    has_return_value = str(signature.return_annotation) != 'None'
     signature = str(signature.replace(parameters=[
         param.replace(default=value_formatter(param.default))
         if param.default is not param.empty else param
@@ -197,6 +198,7 @@ def generate_function(name, called_fullname, template, **kwargs):
            if param.kind is Parameter.VAR_KEYWORD else
            None).format(param.name)
        for param in params) + ')'
+    return_statement = 'return ' if has_return_value else ''
     # Bail out in case of name collision.
     for reserved in ('gca', 'gci', 'gcf', '__ret'):
         if reserved in params:
@@ -208,6 +210,7 @@ def generate_function(name, called_fullname, template, **kwargs):
         called_name=called_name,
         signature=signature,
         call=call,
+        return_statement=return_statement,
         **kwargs)
 
 
@@ -309,8 +312,14 @@ def boilerplate_gen():
     )
 
     cmappable = {
-        'contour': 'if __ret._A is not None: sci(__ret)  # noqa',
-        'contourf': 'if __ret._A is not None: sci(__ret)  # noqa',
+        'contour': (
+            'if __ret._A is not None:  # type: ignore[attr-defined]\n'
+            '        sci(__ret)'
+        ),
+        'contourf': (
+            'if __ret._A is not None:  # type: ignore[attr-defined]\n'
+            '        sci(__ret)'
+        ),
         'hexbin': 'sci(__ret)',
         'scatter': 'sci(__ret)',
         'pcolor': 'sci(__ret)',
@@ -321,8 +330,14 @@ def boilerplate_gen():
         'quiver': 'sci(__ret)',
         'specgram': 'sci(__ret[-1])',
         'streamplot': 'sci(__ret.lines)',
-        'tricontour': 'if __ret._A is not None: sci(__ret)  # noqa',
-        'tricontourf': 'if __ret._A is not None: sci(__ret)  # noqa',
+        'tricontour': (
+            'if __ret._A is not None:  # type: ignore[attr-defined]\n'
+            '        sci(__ret)'
+        ),
+        'tricontourf': (
+            'if __ret._A is not None:  # type: ignore[attr-defined]\n'
+            '        sci(__ret)'
+        ),
         'tripcolor': 'sci(__ret)',
     }
 
+ git diff 00afcc0c6d4d2e4390338127f05b8f4fdb4e7087
diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py
index 9c2ba63901..1e5cc02bff 100644
--- a/lib/matplotlib/axes/_base.py
+++ b/lib/matplotlib/axes/_base.py
@@ -3643,7 +3643,15 @@ class _AxesBase(martist.Artist):
             if right is not None:
                 raise TypeError("Cannot pass both 'right' and 'xmax'")
             right = xmax
-        return self.xaxis._set_lim(left, right, emit=emit, auto=auto)
+        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
+        if emit:
+            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
+            # Call all of the other x-axes that are shared with this one
+            for other in self._shared_x_axes.get_siblings(self):
+                if other is not self:
+                    other.set_xlim(self.viewLim.intervalx, emit=False, auto=auto)  # Set limits for sibling axes
+                    other.callbacks.process('xlim_changed', other)  # Emit xlim_changed event for sibling axes
+        return result  # Return the result of setting limits
 
     get_xscale = _axis_method_wrapper("xaxis", "get_scale")
     set_xscale = _axis_method_wrapper("xaxis", "_set_axes_scale")
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval '. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh"
PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libxml2_deactivate.sh
++++ test -n ''
++++ unset XML_CATALOG_FILES
++++ unset xml_catalog_files_libxml2
+++ . /opt/miniconda3/envs/testbed/etc/conda/deactivate.d/libglib_deactivate.sh
++++ export GSETTINGS_SCHEMA_DIR=
++++ GSETTINGS_SCHEMA_DIR=
++++ unset GSETTINGS_SCHEMA_DIR_CONDA_BACKUP
++++ '[' -z ']'
++++ unset GSETTINGS_SCHEMA_DIR
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\''
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh"
. "/opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh"'
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libglib_activate.sh
+++ export GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ GSETTINGS_SCHEMA_DIR_CONDA_BACKUP=
+++ export GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
+++ GSETTINGS_SCHEMA_DIR=/opt/miniconda3/envs/testbed/share/glib-2.0/schemas
++ . /opt/miniconda3/envs/testbed/etc/conda/activate.d/libxml2_activate.sh
+++ test -n ''
+++ xml_catalog_files_libxml2=
+++ XML_CATALOG_FILES=
+++ conda_catalog_files=
+++ ifs_libxml2=' 	
'
+++ IFS=' '
+++ rem=/opt/miniconda3/envs/testbed
+++ for pre in ${rem}
+++ test '' = /opt/miniconda3/envs/testbed
+++ conda_catalog_files=/opt/miniconda3/envs/testbed
+++ rem=
+++ IFS=' 	
'
+++ conda_catalog_files='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ export 'XML_CATALOG_FILES=file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ XML_CATALOG_FILES='file:///opt/miniconda3/envs/testbed/etc/xml/catalog file:///etc/xml/catalog'
+++ unset conda_catalog_files ifs_libxml2 rem
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: contourpy>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20240804) (1.1.0)
Requirement already satisfied: cycler>=0.10 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20240804) (0.11.0)
Requirement already satisfied: fonttools>=4.22.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20240804) (4.42.1)
Requirement already satisfied: kiwisolver>=1.0.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20240804) (1.4.5)
Requirement already satisfied: numpy>=1.21 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20240804) (1.25.2)
Requirement already satisfied: packaging>=20.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20240804) (23.1)
Requirement already satisfied: pillow>=6.2.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20240804) (10.0.0)
Requirement already satisfied: pyparsing<3.1,>=2.3.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20240804) (3.0.9)
Requirement already satisfied: python-dateutil>=2.7 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20240804) (2.8.2)
Requirement already satisfied: setuptools-scm>=7 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from matplotlib==3.8.0.dev1620+g00afcc0c6d.d20240804) (7.1.0)
Requirement already satisfied: six>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from python-dateutil>=2.7->matplotlib==3.8.0.dev1620+g00afcc0c6d.d20240804) (1.16.0)
Requirement already satisfied: setuptools in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools-scm>=7->matplotlib==3.8.0.dev1620+g00afcc0c6d.d20240804) (68.1.2)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from setuptools-scm>=7->matplotlib==3.8.0.dev1620+g00afcc0c6d.d20240804) (4.7.1)
Building wheels for collected packages: matplotlib
  Building editable for matplotlib (pyproject.toml): started
  Building editable for matplotlib (pyproject.toml): still running...
  Building editable for matplotlib (pyproject.toml): finished with status 'done'
  Created wheel for matplotlib: filename=matplotlib-3.8.0.dev1620+g00afcc0c6d.d20240804-0.editable-cp311-cp311-linux_x86_64.whl size=21951 sha256=5c8c23169605f4b7ef4b569f3f6915b9fb819662c6eeaf4f431c014b4a2476cf
  Stored in directory: /tmp/pip-ephem-wheel-cache-qzrruxg_/wheels/49/5f/4f/01b7d31ea6ddac9643da788242d33e5fd3467d95d17b032c6b
Successfully built matplotlib
Installing collected packages: matplotlib
  Attempting uninstall: matplotlib
    Found existing installation: matplotlib 3.8.0.dev1620+g00afcc0c6d
    Uninstalling matplotlib-3.8.0.dev1620+g00afcc0c6d:
      Successfully uninstalled matplotlib-3.8.0.dev1620+g00afcc0c6d
Successfully installed matplotlib-3.8.0.dev1620+g00afcc0c6d.d20240804
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 00afcc0c6d4d2e4390338127f05b8f4fdb4e7087 lib/matplotlib/tests/test_axes.py
Updated 0 paths from 7d928250c1
+ git apply -v -
Checking patch lib/matplotlib/tests/test_axes.py...
Applied patch lib/matplotlib/tests/test_axes.py cleanly.
+ pytest -rA lib/matplotlib/tests/test_axes.py
============================= test session starts ==============================
platform linux -- Python 3.11.9, pytest-8.3.2, pluggy-1.5.0
rootdir: /testbed
configfile: pytest.ini
plugins: cov-5.0.0, rerunfailures-14.0, timeout-2.3.1, xdist-3.6.1
collected 884 items

lib/matplotlib/tests/test_axes.py ...FFFFFFFFF.FFF.FFFs..FFs.FFFF..F..FF [  4%]
FsFFFF...FFsF.F..F.FFFsFF.FFFs..sFFFFF.FFFFsFFFFFsFFs.FFs......FFsFFsFFs [ 12%]
FF.FFsFFFFFFF..FF..FFFFsFFFsFFFsFFsFFsFFsFFsFFsFFsFFsF..FFFFFF..FF...F.. [ 20%]
FFFFFFFF.FFsFFF.FFF...........FFFFF....FFFFFsFFsFFsFFsFFFsFFF.FFFFF..FFF [ 28%]
.FF..............................FF..................F.FFFFFsFFsFFFFFFFF [ 36%]
FFFFFFFFFFFFFFF..FF.FFsFFFFFFsFF....FFFFFFFFFFFFFFF....FFFFFFFsF.FFF.FFs [ 45%]
..F..FFF...FFFsFFsFFFFsF...FFFsFFsFFsF........FFs...FFsFFsFFsFFFFsFFsF.. [ 53%]
..F..FF.FF.FFFFFFFFsFFFFFFFFFFFFFF.F.FFFFFsFFs.FFFFF.FFF.FF......F..F.FF [ 61%]
F...F...F.FFFFFFFFFF.FFFFFFFF...FFFFFFFF........FF....F....F....F....F.F [ 69%]
......................................................FFs....FFFF.F.F.F. [ 77%]
FFF.F.......F.......FFFF..........F...F.FF................FFFF..FF.FFFF. [ 85%]
FFFF.FF.FFFF.FFF.F......FF.....FFF...F...FFFFFFFF................F.FFF.. [ 93%]
.FFFFFFFsFFFFFFFFFF..F...........FF.FFFF.FFF.FF.F.FF.F                   [100%]

=================================== FAILURES ===================================
_________________________ test_label_loc_vertical[png] _________________________

ext = 'png'
request = <FixtureRequest for <Function test_label_loc_vertical[png]>>
args = (), kwargs = {}, file_name = 'test_label_loc_vertical[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:76: in test_label_loc_vertical
    sc = ax.scatter([1, 2], [1, 2], c=[1, 2], label='scatter')
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_label_loc_vertical[pdf] _________________________

ext = 'pdf'
request = <FixtureRequest for <Function test_label_loc_vertical[pdf]>>
args = (), kwargs = {}, file_name = 'test_label_loc_vertical[pdf]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:76: in test_label_loc_vertical
    sc = ax.scatter([1, 2], [1, 2], c=[1, 2], label='scatter')
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_label_loc_vertical[svg] _________________________

ext = 'svg'
request = <FixtureRequest for <Function test_label_loc_vertical[svg]>>
args = (), kwargs = {}, file_name = 'test_label_loc_vertical[svg]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:76: in test_label_loc_vertical
    sc = ax.scatter([1, 2], [1, 2], c=[1, 2], label='scatter')
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_label_loc_horizontal[png] ________________________

ext = 'png'
request = <FixtureRequest for <Function test_label_loc_horizontal[png]>>
args = (), kwargs = {}, file_name = 'test_label_loc_horizontal[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:95: in test_label_loc_horizontal
    sc = ax.scatter([1, 2], [1, 2], c=[1, 2], label='scatter')
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_label_loc_horizontal[pdf] ________________________

ext = 'pdf'
request = <FixtureRequest for <Function test_label_loc_horizontal[pdf]>>
args = (), kwargs = {}, file_name = 'test_label_loc_horizontal[pdf]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:95: in test_label_loc_horizontal
    sc = ax.scatter([1, 2], [1, 2], c=[1, 2], label='scatter')
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_label_loc_horizontal[svg] ________________________

ext = 'svg'
request = <FixtureRequest for <Function test_label_loc_horizontal[svg]>>
args = (), kwargs = {}, file_name = 'test_label_loc_horizontal[svg]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:95: in test_label_loc_horizontal
    sc = ax.scatter([1, 2], [1, 2], c=[1, 2], label='scatter')
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_label_loc_rc[png] ____________________________

ext = 'png', request = <FixtureRequest for <Function test_label_loc_rc[png]>>
args = (), kwargs = {}, file_name = 'test_label_loc_rc[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:116: in test_label_loc_rc
    sc = ax.scatter([1, 2], [1, 2], c=[1, 2], label='scatter')
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_label_loc_rc[pdf] ____________________________

ext = 'pdf', request = <FixtureRequest for <Function test_label_loc_rc[pdf]>>
args = (), kwargs = {}, file_name = 'test_label_loc_rc[pdf]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:116: in test_label_loc_rc
    sc = ax.scatter([1, 2], [1, 2], c=[1, 2], label='scatter')
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_label_loc_rc[svg] ____________________________

ext = 'svg', request = <FixtureRequest for <Function test_label_loc_rc[svg]>>
args = (), kwargs = {}, file_name = 'test_label_loc_rc[svg]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:116: in test_label_loc_rc
    sc = ax.scatter([1, 2], [1, 2], c=[1, 2], label='scatter')
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_acorr[png] ________________________________

ext = 'png', request = <FixtureRequest for <Function test_acorr[png]>>
args = (), kwargs = {}, file_name = 'test_acorr[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:162: in test_acorr
    ax_test.acorr(x, maxlags=maxlags)
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2026: in acorr
    return self.xcorr(x, x, **kwargs)
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2129: in xcorr
    b = self.axhline(**kwargs)
lib/matplotlib/axes/_axes.py:774: in axhline
    ymin, ymax = self.get_ybound()
lib/matplotlib/axes/_base.py:3749: in get_ybound
    bottom, top = self.get_ylim()
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -600.0, right = 600.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_acorr_integers[png] ___________________________

ext = 'png', request = <FixtureRequest for <Function test_acorr_integers[png]>>
args = (), kwargs = {}, file_name = 'test_acorr_integers[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:182: in test_acorr_integers
    ax_test.acorr(x, maxlags=maxlags)
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2026: in acorr
    return self.xcorr(x, x, **kwargs)
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2129: in xcorr
    b = self.axhline(**kwargs)
lib/matplotlib/axes/_axes.py:774: in axhline
    ymin, ymax = self.get_ybound()
lib/matplotlib/axes/_base.py:3749: in get_ybound
    bottom, top = self.get_ylim()
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -60.0, right = 60.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________________ test_spy[png] _________________________________

ext = 'png', request = <FixtureRequest for <Function test_spy[png]>>, args = ()
kwargs = {}, file_name = 'test_spy[png]'
fig_test = <Figure size 640x480 with 2 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:203: in test_spy
    axs_test[0].spy(a)
lib/matplotlib/axes/_axes.py:8043: in spy
    ret = self.imshow(mask, interpolation='nearest',
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:5747: in imshow
    im.set_extent(im.get_extent())
lib/matplotlib/image.py:991: in set_extent
    self.axes.set_xlim((xmin, xmax), auto=None)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.5, right = 31.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_matshow[png] _______________________________

ext = 'png', request = <FixtureRequest for <Function test_matshow[png]>>
args = (), kwargs = {}, file_name = 'test_matshow[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:228: in test_matshow
    fig_test.add_subplot().matshow(a)
lib/matplotlib/axes/_axes.py:8130: in matshow
    im = self.imshow(Z, **kw)
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:5747: in imshow
    im.set_extent(im.get_extent())
lib/matplotlib/image.py:991: in set_extent
    self.axes.set_xlim((xmin, xmax), auto=None)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.5, right = 31.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_formatter_ticker[png] __________________________

    @image_comparison(['formatter_ticker_001',
                       'formatter_ticker_002',
                       'formatter_ticker_003',
                       'formatter_ticker_004',
                       'formatter_ticker_005',
                       ])
    def test_formatter_ticker():
        import matplotlib.testing.jpl_units as units
        units.register()
    
        # This should affect the tick size.  (Tests issue #543)
        matplotlib.rcParams['lines.markeredgewidth'] = 30
    
        # This essentially test to see if user specified labels get overwritten
        # by the auto labeler functionality of the axes.
        xdata = [x*units.sec for x in range(10)]
        ydata1 = [(1.5*y - 0.5)*units.km for y in range(10)]
        ydata2 = [(1.75*y - 1.0)*units.km for y in range(10)]
    
        ax = plt.figure().subplots()
        ax.set_xlabel("x-label 001")
    
        ax = plt.figure().subplots()
        ax.set_xlabel("x-label 001")
>       ax.plot(xdata, ydata1, color='blue', xunits="sec")

lib/matplotlib/tests/test_axes.py:259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:1718: in plot
    lines = [*self._get_lines(self, *args, data=data, **kwargs)]
lib/matplotlib/axes/_base.py:303: in __call__
    yield from self._plot_args(
lib/matplotlib/axes/_base.py:494: in _plot_args
    axes.xaxis.update_units(x)
lib/matplotlib/axis.py:1679: in update_units
    self._update_axisinfo()
lib/matplotlib/axis.py:1715: in _update_axisinfo
    self.set_default_intervals()
lib/matplotlib/axis.py:2442: in set_default_intervals
    not self.axes.viewLim.mutatedx()):
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: xlabel='x-label 001'>, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_formatter_ticker[pdf] __________________________

    @image_comparison(['formatter_ticker_001',
                       'formatter_ticker_002',
                       'formatter_ticker_003',
                       'formatter_ticker_004',
                       'formatter_ticker_005',
                       ])
    def test_formatter_ticker():
        import matplotlib.testing.jpl_units as units
        units.register()
    
        # This should affect the tick size.  (Tests issue #543)
        matplotlib.rcParams['lines.markeredgewidth'] = 30
    
        # This essentially test to see if user specified labels get overwritten
        # by the auto labeler functionality of the axes.
        xdata = [x*units.sec for x in range(10)]
        ydata1 = [(1.5*y - 0.5)*units.km for y in range(10)]
        ydata2 = [(1.75*y - 1.0)*units.km for y in range(10)]
    
        ax = plt.figure().subplots()
        ax.set_xlabel("x-label 001")
    
        ax = plt.figure().subplots()
        ax.set_xlabel("x-label 001")
>       ax.plot(xdata, ydata1, color='blue', xunits="sec")

lib/matplotlib/tests/test_axes.py:259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:1718: in plot
    lines = [*self._get_lines(self, *args, data=data, **kwargs)]
lib/matplotlib/axes/_base.py:303: in __call__
    yield from self._plot_args(
lib/matplotlib/axes/_base.py:494: in _plot_args
    axes.xaxis.update_units(x)
lib/matplotlib/axis.py:1679: in update_units
    self._update_axisinfo()
lib/matplotlib/axis.py:1715: in _update_axisinfo
    self.set_default_intervals()
lib/matplotlib/axis.py:2442: in set_default_intervals
    not self.axes.viewLim.mutatedx()):
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: xlabel='x-label 001'>, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________ test_twin_axis_locators_formatters[png] ____________________

    @image_comparison(["twin_axis_locators_formatters"])
    def test_twin_axis_locators_formatters():
        vals = np.linspace(0, 1, num=5, endpoint=True)
        locs = np.sin(np.pi * vals / 2.0)
    
        majl = plt.FixedLocator(locs)
        minl = plt.FixedLocator([0.1, 0.2, 0.3])
    
        fig = plt.figure()
        ax1 = fig.add_subplot(1, 1, 1)
        ax1.plot([0.1, 100], [0, 1])
        ax1.yaxis.set_major_locator(majl)
        ax1.yaxis.set_minor_locator(minl)
        ax1.yaxis.set_major_formatter(plt.FormatStrFormatter('%08.2lf'))
        ax1.yaxis.set_minor_formatter(plt.FixedFormatter(['tricks', 'mind',
                                                          'jedi']))
    
        ax1.xaxis.set_major_locator(plt.LinearLocator())
        ax1.xaxis.set_minor_locator(plt.FixedLocator([15, 35, 55, 75]))
        ax1.xaxis.set_major_formatter(plt.FormatStrFormatter('%05.2lf'))
        ax1.xaxis.set_minor_formatter(plt.FixedFormatter(['c', '3', 'p', 'o']))
>       ax1.twiny()

lib/matplotlib/tests/test_axes.py:352: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:4483: in twiny
    ax2 = self._make_twin_axes(sharey=self)
lib/matplotlib/axes/_base.py:4421: in _make_twin_axes
    twin = self.figure.add_subplot(ss, *args, **kwargs)
lib/matplotlib/figure.py:782: in add_subplot
    ax = projection_class(self, *args, **pkw)
lib/matplotlib/axes/_base.py:678: in __init__
    self.clear()
lib/matplotlib/axes/_base.py:1388: in clear
    self.__clear()
lib/matplotlib/axes/_base.py:1370: in __clear
    getattr(self, f"share{name}")(share)
lib/matplotlib/axes/_base.py:1250: in sharey
    y0, y1 = other.get_ylim()
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 100.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________ test_twin_axis_locators_formatters[pdf] ____________________

    @image_comparison(["twin_axis_locators_formatters"])
    def test_twin_axis_locators_formatters():
        vals = np.linspace(0, 1, num=5, endpoint=True)
        locs = np.sin(np.pi * vals / 2.0)
    
        majl = plt.FixedLocator(locs)
        minl = plt.FixedLocator([0.1, 0.2, 0.3])
    
        fig = plt.figure()
        ax1 = fig.add_subplot(1, 1, 1)
        ax1.plot([0.1, 100], [0, 1])
        ax1.yaxis.set_major_locator(majl)
        ax1.yaxis.set_minor_locator(minl)
        ax1.yaxis.set_major_formatter(plt.FormatStrFormatter('%08.2lf'))
        ax1.yaxis.set_minor_formatter(plt.FixedFormatter(['tricks', 'mind',
                                                          'jedi']))
    
        ax1.xaxis.set_major_locator(plt.LinearLocator())
        ax1.xaxis.set_minor_locator(plt.FixedLocator([15, 35, 55, 75]))
        ax1.xaxis.set_major_formatter(plt.FormatStrFormatter('%05.2lf'))
        ax1.xaxis.set_minor_formatter(plt.FixedFormatter(['c', '3', 'p', 'o']))
>       ax1.twiny()

lib/matplotlib/tests/test_axes.py:352: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:4483: in twiny
    ax2 = self._make_twin_axes(sharey=self)
lib/matplotlib/axes/_base.py:4421: in _make_twin_axes
    twin = self.figure.add_subplot(ss, *args, **kwargs)
lib/matplotlib/figure.py:782: in add_subplot
    ax = projection_class(self, *args, **pkw)
lib/matplotlib/axes/_base.py:678: in __init__
    self.clear()
lib/matplotlib/axes/_base.py:1388: in clear
    self.__clear()
lib/matplotlib/axes/_base.py:1370: in __clear
    getattr(self, f"share{name}")(share)
lib/matplotlib/axes/_base.py:1250: in sharey
    y0, y1 = other.get_ylim()
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 100.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_twin_units[x] ______________________________

twin = 'x'

    @pytest.mark.parametrize('twin', ('x', 'y'))
    def test_twin_units(twin):
        axis_name = f'{twin}axis'
        twin_func = f'twin{twin}'
    
        a = ['0', '1']
        b = ['a', 'b']
    
        fig = Figure()
        ax1 = fig.subplots()
>       ax1.plot(a, b)

lib/matplotlib/tests/test_axes.py:389: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:1718: in plot
    lines = [*self._get_lines(self, *args, data=data, **kwargs)]
lib/matplotlib/axes/_base.py:303: in __call__
    yield from self._plot_args(
lib/matplotlib/axes/_base.py:494: in _plot_args
    axes.xaxis.update_units(x)
lib/matplotlib/axis.py:1679: in update_units
    self._update_axisinfo()
lib/matplotlib/axis.py:1715: in _update_axisinfo
    self.set_default_intervals()
lib/matplotlib/axis.py:2442: in set_default_intervals
    not self.axes.viewLim.mutatedx()):
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.05, right = 0.05

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_twin_units[y] ______________________________

twin = 'y'

    @pytest.mark.parametrize('twin', ('x', 'y'))
    def test_twin_units(twin):
        axis_name = f'{twin}axis'
        twin_func = f'twin{twin}'
    
        a = ['0', '1']
        b = ['a', 'b']
    
        fig = Figure()
        ax1 = fig.subplots()
>       ax1.plot(a, b)

lib/matplotlib/tests/test_axes.py:389: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:1718: in plot
    lines = [*self._get_lines(self, *args, data=data, **kwargs)]
lib/matplotlib/axes/_base.py:303: in __call__
    yield from self._plot_args(
lib/matplotlib/axes/_base.py:494: in _plot_args
    axes.xaxis.update_units(x)
lib/matplotlib/axis.py:1679: in update_units
    self._update_axisinfo()
lib/matplotlib/axis.py:1715: in _update_axisinfo
    self.set_default_intervals()
lib/matplotlib/axis.py:2442: in set_default_intervals
    not self.axes.viewLim.mutatedx()):
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.05, right = 0.05

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_twin_logscale[png-x] ___________________________

ext = 'png', request = <FixtureRequest for <Function test_twin_logscale[png-x]>>
args = (), kwargs = {'twin': 'x'}, file_name = 'test_twin_logscale[png-x]'
fig_test = <Figure size 640x480 with 2 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:406: in test_twin_logscale
    getattr(ax_test, set_scale)('log')
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_twin_logscale[png-y] ___________________________

ext = 'png', request = <FixtureRequest for <Function test_twin_logscale[png-y]>>
args = (), kwargs = {'twin': 'y'}, file_name = 'test_twin_logscale[png-y]'
fig_test = <Figure size 640x480 with 4 Axes>
fig_ref = <Figure size 640x480 with 2 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_twin_logscale[png-y].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_twin_logscale[png-y]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2932: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3783: in set_ybound
    self.set_ylim(sorted((lower, upper),
lib/matplotlib/axes/_base.py:3885: in set_ylim
    return self.yaxis._set_lim(bottom, top, emit=emit, auto=auto)
lib/matplotlib/axis.py:1245: in _set_lim
    other._axis_map[name]._set_lim(
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 100.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_inverted_cla _______________________________

    def test_inverted_cla():
        # GitHub PR #5450. Setting autoscale should reset
        # axes to be non-inverted.
        # plotting an image, then 1d graph, axis is now down
        fig = plt.figure(0)
        ax = fig.gca()
        # 1. test that a new axis is not inverted per default
        assert not ax.xaxis_inverted()
        assert not ax.yaxis_inverted()
        img = np.random.random((100, 100))
>       ax.imshow(img)

lib/matplotlib/tests/test_axes.py:485: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:5747: in imshow
    im.set_extent(im.get_extent())
lib/matplotlib/image.py:991: in set_extent
    self.axes.set_xlim((xmin, xmax), auto=None)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.5, right = 99.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ test_minorticks_on_rcParams_both[png] _____________________

ext = 'png'
request = <FixtureRequest for <Function test_minorticks_on_rcParams_both[png]>>
args = (), kwargs = {}, file_name = 'test_minorticks_on_rcParams_both[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_minorticks_on_rcParams_both[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_minorticks_on_rcParams_both[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_autoscale_tiny_range[png] ________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_autoscale_tiny_range[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_autoscale_tiny_range[pdf] ________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_autoscale_tiny_range[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_autoscale_tight _____________________________

    @mpl.style.context('default')
    def test_autoscale_tight():
        fig, ax = plt.subplots(1, 1)
        ax.plot([1, 2, 3, 4])
        ax.autoscale(enable=True, axis='x', tight=False)
        ax.autoscale(enable=True, axis='y', tight=True)
>       assert_allclose(ax.get_xlim(), (-0.15, 3.15))

lib/matplotlib/tests/test_axes.py:612: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.15000000000000002, right = 3.15

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_autoscale_log_shared ___________________________

    @mpl.style.context('default')
    def test_autoscale_log_shared():
        # related to github #7587
        # array starts at zero to trigger _minpos handling
        x = np.arange(100, dtype=float)
        fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True)
>       ax1.loglog(x, x)

lib/matplotlib/tests/test_axes.py:636: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:1854: in loglog
    self.set_xscale('log', **dx)
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.8912509381337456, right = 11.220184543019636

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_use_sticky_edges _____________________________

    @mpl.style.context('default')
    def test_use_sticky_edges():
        fig, ax = plt.subplots()
>       ax.imshow([[0, 1], [2, 3]], origin='lower')

lib/matplotlib/tests/test_axes.py:651: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:5747: in imshow
    im.set_extent(im.get_extent())
lib/matplotlib/image.py:991: in set_extent
    self.axes.set_xlim((xmin, xmax), auto=None)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.5, right = 1.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_sticky_shared_axes[png] _________________________

ext = 'png'
request = <FixtureRequest for <Function test_sticky_shared_axes[png]>>
args = (), kwargs = {}, file_name = 'test_sticky_shared_axes[png]'
fig_test = <Figure size 640x480 with 2 Axes>
fig_ref = <Figure size 640x480 with 2 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_sticky_shared_axes[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_sticky_shared_axes[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 5.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_basic_annotate[png] ___________________________

    @image_comparison(['offset_points'], remove_text=True)
    def test_basic_annotate():
        # Setup some data
        t = np.arange(0.0, 5.0, 0.01)
        s = np.cos(2.0*np.pi * t)
    
        # Offset Points
    
        fig = plt.figure()
>       ax = fig.add_subplot(autoscale_on=False, xlim=(-1, 5), ylim=(-3, 5))

lib/matplotlib/tests/test_axes.py:713: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:782: in add_subplot
    ax = projection_class(self, *args, **pkw)
lib/matplotlib/axes/_base.py:692: in __init__
    self._internal_update(kwargs)
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1, right = 5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_basic_annotate[pdf] ___________________________

    @image_comparison(['offset_points'], remove_text=True)
    def test_basic_annotate():
        # Setup some data
        t = np.arange(0.0, 5.0, 0.01)
        s = np.cos(2.0*np.pi * t)
    
        # Offset Points
    
        fig = plt.figure()
>       ax = fig.add_subplot(autoscale_on=False, xlim=(-1, 5), ylim=(-3, 5))

lib/matplotlib/tests/test_axes.py:713: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:782: in add_subplot
    ax = projection_class(self, *args, **pkw)
lib/matplotlib/axes/_base.py:692: in __init__
    self._internal_update(kwargs)
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1, right = 5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_arrow_simple[png] ____________________________

    @image_comparison(['arrow_simple.png'], remove_text=True)
    def test_arrow_simple():
        # Simple image test for ax.arrow
        # kwargs that take discrete values
        length_includes_head = (True, False)
        shape = ('full', 'left', 'right')
        head_starts_at_zero = (True, False)
        # Create outer product of values
        kwargs = product(length_includes_head, shape, head_starts_at_zero)
    
        fig, axs = plt.subplots(3, 4)
        for i, (ax, kwarg) in enumerate(zip(axs.flat, kwargs)):
>           ax.set_xlim(-2, 2)

lib/matplotlib/tests/test_axes.py:732: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -2, right = 2

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_arrow_in_view ______________________________

    def test_arrow_in_view():
        _, ax = plt.subplots()
        ax.arrow(1, 1, 1, 1)
>       assert ax.get_xlim() == (0.8, 2.2)

lib/matplotlib/tests/test_axes.py:756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.8, right = 2.2

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_fill_units[png] _____________________________

    @image_comparison(['fill_units.png'], savefig_kwarg={'dpi': 60})
    def test_fill_units():
        import matplotlib.testing.jpl_units as units
        units.register()
    
        # generate some data
        t = units.Epoch("ET", dt=datetime.datetime(2009, 4, 27))
        value = 10.0 * units.deg
        day = units.Duration("ET", 24.0 * 60.0 * 60.0)
        dt = np.arange('2009-04-27', '2009-04-29', dtype='datetime64[D]')
        dtn = mdates.date2num(dt)
    
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2)
    
>       ax1.plot([t], [value], yunits='deg', color='red')

lib/matplotlib/tests/test_axes.py:793: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:1718: in plot
    lines = [*self._get_lines(self, *args, data=data, **kwargs)]
lib/matplotlib/axes/_base.py:303: in __call__
    yield from self._plot_args(
lib/matplotlib/axes/_base.py:496: in _plot_args
    axes.yaxis.update_units(y)
lib/matplotlib/axis.py:1679: in update_units
    self._update_axisinfo()
lib/matplotlib/axis.py:1715: in _update_axisinfo
    self.set_default_intervals()
lib/matplotlib/axis.py:2685: in set_default_intervals
    not self.axes.viewLim.mutatedy()):
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: xlabel='ET', ylabel='deg'>, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_errorbar_dashes[png] ___________________________

ext = 'png', request = <FixtureRequest for <Function test_errorbar_dashes[png]>>
args = (), kwargs = {}, file_name = 'test_errorbar_dashes[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_errorbar_dashes[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_errorbar_dashes[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 5.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_single_point[png] ____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_single_point[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_single_point[pdf] ____________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_single_point[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_single_date[png] _____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_single_date[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1998.0, right = 3604.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_shaped_data[png] _____________________________

ext = 'png', request = <FixtureRequest for <Function test_shaped_data[png]>>
args = (), kwargs = {}, file_name = 'test_shaped_data[png]'
fig_test = <Figure size 640x480 with 2 Axes>
fig_ref = <Figure size 640x480 with 2 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:882: in test_shaped_data
    axs[0].set(xlim=(-.06, .06), ylim=(0, 9))
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_aitoff_proj[png] _____________________________

    @image_comparison(['aitoff_proj'], extensions=["png"],
                      remove_text=True, style='mpl20')
    def test_aitoff_proj():
        """
        Test aitoff projection ref.:
        https://github.com/matplotlib/matplotlib/pull/14451
        """
        x = np.linspace(-np.pi, np.pi, 20)
        y = np.linspace(-np.pi / 2, np.pi / 2, 20)
        X, Y = np.meshgrid(x, y)
    
>       fig, ax = plt.subplots(figsize=(8, 4.2),
                               subplot_kw=dict(projection="aitoff"))

lib/matplotlib/tests/test_axes.py:907: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:1591: in subplots
    axs = fig.subplots(nrows=nrows, ncols=ncols, sharex=sharex, sharey=sharey,
lib/matplotlib/figure.py:931: in subplots
    axs = gs.subplots(sharex=sharex, sharey=sharey, squeeze=squeeze,
lib/matplotlib/gridspec.py:298: in subplots
    axarr[row, col] = figure.add_subplot(
lib/matplotlib/figure.py:782: in add_subplot
    ax = projection_class(self, *args, **pkw)
lib/matplotlib/projections/geo.py:286: in __init__
    super().__init__(*args, **kwargs)
lib/matplotlib/axes/_base.py:678: in __init__
    self.clear()
lib/matplotlib/projections/geo.py:54: in clear
    Axes.set_xlim(self, -np.pi, np.pi)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <AitoffAxes: >, left = -3.141592653589793, right = 3.141592653589793

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'AitoffAxes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_axvspan_epoch[png] ____________________________

    @image_comparison(['axvspan_epoch'])
    def test_axvspan_epoch():
        import matplotlib.testing.jpl_units as units
        units.register()
    
        # generate some data
        t0 = units.Epoch("ET", dt=datetime.datetime(2009, 1, 20))
        tf = units.Epoch("ET", dt=datetime.datetime(2009, 1, 21))
        dt = units.Duration("ET", units.day.convert("sec"))
    
        ax = plt.gca()
        ax.axvspan(t0, tf, facecolor="blue", alpha=0.25)
>       ax.set_xlim(t0 - 5.0*dt, tf + 5.0*dt)

lib/matplotlib/tests/test_axes.py:925: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: xlabel='ET'>, left = 14265.0, right = 14266.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_axvspan_epoch[pdf] ____________________________

    @image_comparison(['axvspan_epoch'])
    def test_axvspan_epoch():
        import matplotlib.testing.jpl_units as units
        units.register()
    
        # generate some data
        t0 = units.Epoch("ET", dt=datetime.datetime(2009, 1, 20))
        tf = units.Epoch("ET", dt=datetime.datetime(2009, 1, 21))
        dt = units.Duration("ET", units.day.convert("sec"))
    
        ax = plt.gca()
        ax.axvspan(t0, tf, facecolor="blue", alpha=0.25)
>       ax.set_xlim(t0 - 5.0*dt, tf + 5.0*dt)

lib/matplotlib/tests/test_axes.py:925: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: xlabel='ET'>, left = 14265.0, right = 14266.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_hexbin_extent[png] ____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_hexbin_extent[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0999999998, right = 0.3000000002

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_hexbin_empty[png] ____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_hexbin_empty[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1e-09, right = 1.000000001

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_hexbin_pickable _____________________________

    def test_hexbin_pickable():
        # From #1973: Test that picking a hexbin collection works
        fig, ax = plt.subplots()
        data = (np.arange(200) / 200).reshape((2, 100))
        x, y = data
        hb = ax.hexbin(x, y, extent=[.1, .3, .6, .7], picker=-1)
        mouse_event = SimpleNamespace(x=400, y=300)
>       assert hb.contains(mouse_event)[0]

lib/matplotlib/tests/test_axes.py:977: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/collections.py:467: in contains
    self.axes._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0999999998, right = 0.3000000002

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_hexbin_log[png] _____________________________

    @image_comparison(['hexbin_log.png'], style='mpl20')
    def test_hexbin_log():
        # Issue #1636 (and also test log scaled colorbar)
    
        # Remove this line when this test image is regenerated.
        plt.rcParams['pcolormesh.snap'] = False
    
        np.random.seed(19680801)
        n = 100000
        x = np.random.standard_normal(n)
        y = 2.0 + 3.0 * x + 4.0 * np.random.standard_normal(n)
        y = np.power(2, y * 0.5)
    
        fig, ax = plt.subplots()
        h = ax.hexbin(x, y, yscale='log', bins='log',
                      marginals=True, reduce_C_function=np.sum)
>       plt.colorbar(h)

lib/matplotlib/tests/test_axes.py:996: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:2262: in colorbar
    ret = gcf().colorbar(mappable, cax=cax, ax=ax, **kwargs)
lib/matplotlib/figure.py:1296: in colorbar
    cb = cbar.Colorbar(cax, mappable, **{
lib/matplotlib/colorbar.py:411: in __init__
    self._draw_all()
lib/matplotlib/colorbar.py:546: in _draw_all
    self.ax.set_xlim(0, 1)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: label='<colorbar>'>, left = 0, right = 1

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_hexbin_linear[png] ____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_hexbin_linear[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -4.980433653523665, right = 4.545741268833969

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________ test_hexbin_mincnt_behavior_upon_C_parameter[png] _______________

ext = 'png'
request = <FixtureRequest for <Function test_hexbin_mincnt_behavior_upon_C_parameter[png]>>
args = (), kwargs = {}
file_name = 'test_hexbin_mincnt_behavior_upon_C_parameter[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_hexbin_mincnt_behavior_upon_C_parameter[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_hexbin_mincnt_behavior_upon_C_parameter[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -10.00000002, right = 10.00000002

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_inverted_limits _____________________________

    def test_inverted_limits():
        # Test gh:1553
        # Calling invert_xaxis prior to plotting should not disable autoscaling
        # while still maintaining the inverted direction
        fig, ax = plt.subplots()
        ax.invert_xaxis()
        ax.plot([-5, -3, 2, 4], [1, 2, -3, 5])
    
>       assert ax.get_xlim() == (4, -5)

lib/matplotlib/tests/test_axes.py:1066: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 4.0, right = -5.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_nonfinite_limits[png] __________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_nonfinite_limits[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 3.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_nonfinite_limits[pdf] __________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_nonfinite_limits[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 3.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________ test_limits_empty_data[png-scatter] ______________________

ext = 'png'
request = <FixtureRequest for <Function test_limits_empty_data[png-scatter]>>
args = (), kwargs = {'plot_fun': 'scatter'}
file_name = 'test_limits_empty_data[png-scatter]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:1109: in test_limits_empty_data
    getattr(ax, plot_fun)(x, range(len(x)), color='C0')
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4632: in scatter
    x, y = self._process_unit_info([("x", x), ("y", y)], kwargs)
lib/matplotlib/axes/_base.py:2548: in _process_unit_info
    axis.update_units(data)
lib/matplotlib/axis.py:1679: in update_units
    self._update_axisinfo()
lib/matplotlib/axis.py:1715: in _update_axisinfo
    self.set_default_intervals()
lib/matplotlib/axis.py:2442: in set_default_intervals
    not self.axes.viewLim.mutatedx()):
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.05, right = 1.05

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________ test_limits_empty_data[png-plot] _______________________

ext = 'png'
request = <FixtureRequest for <Function test_limits_empty_data[png-plot]>>
args = (), kwargs = {'plot_fun': 'plot'}
file_name = 'test_limits_empty_data[png-plot]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:1109: in test_limits_empty_data
    getattr(ax, plot_fun)(x, range(len(x)), color='C0')
lib/matplotlib/axes/_axes.py:1718: in plot
    lines = [*self._get_lines(self, *args, data=data, **kwargs)]
lib/matplotlib/axes/_base.py:303: in __call__
    yield from self._plot_args(
lib/matplotlib/axes/_base.py:494: in _plot_args
    axes.xaxis.update_units(x)
lib/matplotlib/axis.py:1679: in update_units
    self._update_axisinfo()
lib/matplotlib/axis.py:1715: in _update_axisinfo
    self.set_default_intervals()
lib/matplotlib/axis.py:2442: in set_default_intervals
    not self.axes.viewLim.mutatedx()):
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.05, right = 1.05

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________ test_limits_empty_data[png-fill_between] ___________________

ext = 'png'
request = <FixtureRequest for <Function test_limits_empty_data[png-fill_between]>>
args = (), kwargs = {'plot_fun': 'fill_between'}
file_name = 'test_limits_empty_data[png-fill_between]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:1109: in test_limits_empty_data
    getattr(ax, plot_fun)(x, range(len(x)), color='C0')
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:5490: in fill_between
    return self._fill_between_x_or_y(
lib/matplotlib/axes/_axes.py:5391: in _fill_between_x_or_y
    ma.masked_invalid, self._process_unit_info(
lib/matplotlib/axes/_base.py:2548: in _process_unit_info
    axis.update_units(data)
lib/matplotlib/axis.py:1679: in update_units
    self._update_axisinfo()
lib/matplotlib/axis.py:1715: in _update_axisinfo
    self.set_default_intervals()
lib/matplotlib/axis.py:2442: in set_default_intervals
    not self.axes.viewLim.mutatedx()):
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.05, right = 1.05

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_imshow[png] _______________________________

    @image_comparison(['imshow', 'imshow'], remove_text=True, style='mpl20')
    def test_imshow():
        # use former defaults to match existing baseline image
        matplotlib.rcParams['image.interpolation'] = 'nearest'
        # Create a NxN image
        N = 100
        (x, y) = np.indices((N, N))
        x -= N//2
        y -= N//2
        r = np.sqrt(x**2+y**2-x*y)
    
        # Create a contour plot at N/4 and extract both the clip path and transform
        fig, ax = plt.subplots()
>       ax.imshow(r)

lib/matplotlib/tests/test_axes.py:1125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:5747: in imshow
    im.set_extent(im.get_extent())
lib/matplotlib/image.py:991: in set_extent
    self.axes.set_xlim((xmin, xmax), auto=None)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.5, right = 99.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_imshow[pdf] _______________________________

    @image_comparison(['imshow', 'imshow'], remove_text=True, style='mpl20')
    def test_imshow():
        # use former defaults to match existing baseline image
        matplotlib.rcParams['image.interpolation'] = 'nearest'
        # Create a NxN image
        N = 100
        (x, y) = np.indices((N, N))
        x -= N//2
        y -= N//2
        r = np.sqrt(x**2+y**2-x*y)
    
        # Create a contour plot at N/4 and extract both the clip path and transform
        fig, ax = plt.subplots()
>       ax.imshow(r)

lib/matplotlib/tests/test_axes.py:1125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:5747: in imshow
    im.set_extent(im.get_extent())
lib/matplotlib/image.py:991: in set_extent
    self.axes.set_xlim((xmin, xmax), auto=None)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.5, right = 99.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_imshow_clip[png] _____________________________

    @image_comparison(
        ['imshow_clip'], style='mpl20',
        tol=1.24 if platform.machine() in ('aarch64', 'ppc64le', 's390x') else 0)
    def test_imshow_clip():
        # As originally reported by Gellule Xg <gellule.xg@free.fr>
        # use former defaults to match existing baseline image
        matplotlib.rcParams['image.interpolation'] = 'nearest'
    
        # Create a NxN image
        N = 100
        (x, y) = np.indices((N, N))
        x -= N//2
        y -= N//2
        r = np.sqrt(x**2+y**2-x*y)
    
        # Create a contour plot at N/4 and extract both the clip path and transform
        fig, ax = plt.subplots()
    
>       c = ax.contour(r, [N/4])

lib/matplotlib/tests/test_axes.py:1151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:6498: in contour
    contours = mcontour.QuadContourSet(self, *args, **kwargs)
lib/matplotlib/contour.py:925: in __init__
    self.axes.autoscale_view(tight=True)
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 99.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_imshow_clip[pdf] _____________________________

    @image_comparison(
        ['imshow_clip'], style='mpl20',
        tol=1.24 if platform.machine() in ('aarch64', 'ppc64le', 's390x') else 0)
    def test_imshow_clip():
        # As originally reported by Gellule Xg <gellule.xg@free.fr>
        # use former defaults to match existing baseline image
        matplotlib.rcParams['image.interpolation'] = 'nearest'
    
        # Create a NxN image
        N = 100
        (x, y) = np.indices((N, N))
        x -= N//2
        y -= N//2
        r = np.sqrt(x**2+y**2-x*y)
    
        # Create a contour plot at N/4 and extract both the clip path and transform
        fig, ax = plt.subplots()
    
>       c = ax.contour(r, [N/4])

lib/matplotlib/tests/test_axes.py:1151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:6498: in contour
    contours = mcontour.QuadContourSet(self, *args, **kwargs)
lib/matplotlib/contour.py:925: in __init__
    self.axes.autoscale_view(tight=True)
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 99.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_polycollection_joinstyle[png] ______________________

    @image_comparison(['polycollection_joinstyle'], remove_text=True)
    def test_polycollection_joinstyle():
        # Bug #2890979 reported by Matthew West
        fig, ax = plt.subplots()
        verts = np.array([[1, 1], [1, 2], [2, 2], [2, 1]])
        c = mpl.collections.PolyCollection([verts], linewidths=40)
        ax.add_collection(c)
>       ax.set_xbound(0, 3)

lib/matplotlib/tests/test_axes.py:1175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0, right = 3

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_polycollection_joinstyle[pdf] ______________________

    @image_comparison(['polycollection_joinstyle'], remove_text=True)
    def test_polycollection_joinstyle():
        # Bug #2890979 reported by Matthew West
        fig, ax = plt.subplots()
        verts = np.array([[1, 1], [1, 2], [2, 2], [2, 1]])
        c = mpl.collections.PolyCollection([verts], linewidths=40)
        ax.add_collection(c)
>       ax.set_xbound(0, 3)

lib/matplotlib/tests/test_axes.py:1175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0, right = 3

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_fill_between_interpolate[png] ______________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_fill_between_interpolate[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_fill_between_interpolate[pdf] ______________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_fill_between_interpolate[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________ test_fill_between_interpolate_decreasing[png] _________________

    @image_comparison(['fill_between_interpolate_decreasing'],
                      style='mpl20', remove_text=True)
    def test_fill_between_interpolate_decreasing():
        p = np.array([724.3, 700, 655])
        t = np.array([9.4, 7, 2.2])
        prof = np.array([7.9, 6.6, 3.8])
    
        fig, ax = plt.subplots(figsize=(9, 9))
    
        ax.plot(t, p, 'tab:red')
        ax.plot(prof, p, 'k')
    
        ax.fill_betweenx(p, t, prof, where=prof < t,
                         facecolor='blue', interpolate=True, alpha=0.4)
        ax.fill_betweenx(p, t, prof, where=prof > t,
                         facecolor='red', interpolate=True, alpha=0.4)
    
>       ax.set_xlim(0, 30)

lib/matplotlib/tests/test_axes.py:1254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.84, right = 9.76

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________ test_fill_between_interpolate_decreasing[pdf] _________________

    @image_comparison(['fill_between_interpolate_decreasing'],
                      style='mpl20', remove_text=True)
    def test_fill_between_interpolate_decreasing():
        p = np.array([724.3, 700, 655])
        t = np.array([9.4, 7, 2.2])
        prof = np.array([7.9, 6.6, 3.8])
    
        fig, ax = plt.subplots(figsize=(9, 9))
    
        ax.plot(t, p, 'tab:red')
        ax.plot(prof, p, 'k')
    
        ax.fill_betweenx(p, t, prof, where=prof < t,
                         facecolor='blue', interpolate=True, alpha=0.4)
        ax.fill_betweenx(p, t, prof, where=prof > t,
                         facecolor='red', interpolate=True, alpha=0.4)
    
>       ax.set_xlim(0, 30)

lib/matplotlib/tests/test_axes.py:1254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.84, right = 9.76

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ test_fill_between_interpolate_nan[png] ____________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_fill_between_interpolate_nan[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ test_fill_between_interpolate_nan[pdf] ____________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_fill_between_interpolate_nan[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_symlog[pdf] _______________________________

    @image_comparison(['symlog.pdf'])
    def test_symlog():
        x = np.array([0, 1, 2, 4, 6, 9, 12, 24])
        y = np.array([1000000, 500000, 100000, 100, 5, 0, 0, 0])
    
        fig, ax = plt.subplots()
        ax.plot(x, y)
        ax.set_yscale('symlog')
        ax.set_xscale('linear')
>       ax.set_ylim(-1, 10000000)

lib/matplotlib/tests/test_axes.py:1287: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3885: in set_ylim
    return self.yaxis._set_lim(bottom, top, emit=emit, auto=auto)
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 25.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_symlog2[pdf] _______________________________

    @image_comparison(['symlog2.pdf'], remove_text=True)
    def test_symlog2():
        # Numbers from -50 to 50, with 0.1 as step
        x = np.arange(-50, 50, 0.001)
    
        fig, axs = plt.subplots(5, 1)
        for ax, linthresh in zip(axs, [20., 2., 1., 0.1, 0.01]):
            ax.plot(x, x)
            ax.set_xscale('symlog', linthresh=linthresh)
            ax.grid(True)
>       axs[-1].set_ylim(-0.1, 0.1)

lib/matplotlib/tests/test_axes.py:1300: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3885: in set_ylim
    return self.yaxis._set_lim(bottom, top, emit=emit, auto=auto)
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -100.0, right = 100.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_pcolormesh[png] _____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_pcolormesh[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_pcolormesh[pdf] _____________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_pcolormesh[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_pcolormesh_small[eps] __________________________

args = ()
kwds = {'extension': 'eps', 'request': <FixtureRequest for <Function test_pcolormesh_small[eps]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_ps.py:850: in _print_ps
    printer(fmt, outfile, dpi=dpi, dsc_comments=dsc_comments,
lib/matplotlib/backends/backend_ps.py:909: in _print_figure
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_pcolormesh_alpha[png] __________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_pcolormesh_alpha[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.5, right = 1.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_pcolormesh_alpha[pdf] __________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_pcolormesh_alpha[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.5, right = 1.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_pcolormesh_rgba[png-3-1] _________________________

ext = 'png'
request = <FixtureRequest for <Function test_pcolormesh_rgba[png-3-1]>>
args = (), kwargs = {'alpha': 1, 'dims': 3}
file_name = 'test_pcolormesh_rgba[png-3-1]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_pcolormesh_rgba[png-3-1].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_pcolormesh_rgba[png-3-1]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 6.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________ test_pcolormesh_rgba[png-4-0.5] ________________________

ext = 'png'
request = <FixtureRequest for <Function test_pcolormesh_rgba[png-4-0.5]>>
args = (), kwargs = {'alpha': 0.5, 'dims': 4}
file_name = 'test_pcolormesh_rgba[png-4-05]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_pcolormesh_rgba[png-4-05].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_pcolormesh_rgba[png-4-05]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 6.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_pcolormesh_datetime_axis[png] ______________________

    @image_comparison(['pcolormesh_datetime_axis.png'], style='mpl20')
    def test_pcolormesh_datetime_axis():
        # Remove this line when this test image is regenerated.
        plt.rcParams['pcolormesh.snap'] = False
    
        fig = plt.figure()
        fig.subplots_adjust(hspace=0.4, top=0.98, bottom=.15)
        base = datetime.datetime(2013, 1, 1)
        x = np.array([base + datetime.timedelta(days=d) for d in range(21)])
        y = np.arange(21)
        z1, z2 = np.meshgrid(np.arange(20), np.arange(20))
        z = z1 * z2
        plt.subplot(221)
        plt.pcolormesh(x[:-1], y[:-1], z[:-1, :-1])
        plt.subplot(222)
        plt.pcolormesh(x, y, z)
        x = np.repeat(x[np.newaxis], 21, axis=0)
        y = np.repeat(y[:, np.newaxis], 21, axis=1)
        plt.subplot(223)
        plt.pcolormesh(x[:-1, :-1], y[:-1, :-1], z[:-1, :-1])
        plt.subplot(224)
        plt.pcolormesh(x, y, z)
        for ax in fig.get_axes():
>           for label in ax.get_xticklabels():

lib/matplotlib/tests/test_axes.py:1436: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:1455: in get_ticklabels
    return self.get_majorticklabels()
lib/matplotlib/axis.py:1412: in get_majorticklabels
    self._update_ticks()
lib/matplotlib/axis.py:1263: in _update_ticks
    major_locs = self.get_majorticklocs()
lib/matplotlib/axis.py:1483: in get_majorticklocs
    return self.major.locator()
lib/matplotlib/dates.py:1378: in __call__
    dmin, dmax = self.viewlim_to_dt()
lib/matplotlib/dates.py:1160: in viewlim_to_dt
    vmin, vmax = self.axis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 15706.0, right = 15725.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_pcolor_datetime_axis[png] ________________________

    @image_comparison(['pcolor_datetime_axis.png'], style='mpl20')
    def test_pcolor_datetime_axis():
        fig = plt.figure()
        fig.subplots_adjust(hspace=0.4, top=0.98, bottom=.15)
        base = datetime.datetime(2013, 1, 1)
        x = np.array([base + datetime.timedelta(days=d) for d in range(21)])
        y = np.arange(21)
        z1, z2 = np.meshgrid(np.arange(20), np.arange(20))
        z = z1 * z2
        plt.subplot(221)
        plt.pcolor(x[:-1], y[:-1], z[:-1, :-1])
        plt.subplot(222)
        plt.pcolor(x, y, z)
        x = np.repeat(x[np.newaxis], 21, axis=0)
        y = np.repeat(y[:, np.newaxis], 21, axis=1)
        plt.subplot(223)
        plt.pcolor(x[:-1, :-1], y[:-1, :-1], z[:-1, :-1])
        plt.subplot(224)
        plt.pcolor(x, y, z)
        for ax in fig.get_axes():
>           for label in ax.get_xticklabels():

lib/matplotlib/tests/test_axes.py:1461: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:1455: in get_ticklabels
    return self.get_majorticklabels()
lib/matplotlib/axis.py:1412: in get_majorticklabels
    self._update_ticks()
lib/matplotlib/axis.py:1263: in _update_ticks
    major_locs = self.get_majorticklocs()
lib/matplotlib/axis.py:1483: in get_majorticklocs
    return self.major.locator()
lib/matplotlib/dates.py:1378: in __call__
    dmin, dmax = self.viewlim_to_dt()
lib/matplotlib/dates.py:1160: in viewlim_to_dt
    vmin, vmax = self.axis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 15706.0, right = 15725.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_pcolornearest[png] ____________________________

ext = 'png', request = <FixtureRequest for <Function test_pcolornearest[png]>>
args = (), kwargs = {}, file_name = 'test_pcolornearest[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_pcolornearest[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_pcolornearest[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_pcolornearestunits[png] _________________________

ext = 'png'
request = <FixtureRequest for <Function test_pcolornearestunits[png]>>
args = (), kwargs = {}, file_name = 'test_pcolornearestunits[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_pcolornearestunits[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_pcolornearestunits[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 0.375

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_pcolorauto[png-False] __________________________

ext = 'png'
request = <FixtureRequest for <Function test_pcolorauto[png-False]>>, args = ()
kwargs = {'snap': False}, file_name = 'test_pcolorauto[png-False]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_pcolorauto[png-False].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_pcolorauto[png-False]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_pcolorauto[png-True] ___________________________

ext = 'png', request = <FixtureRequest for <Function test_pcolorauto[png-True]>>
args = (), kwargs = {'snap': True}, file_name = 'test_pcolorauto[png-True]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_pcolorauto[png-True].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_pcolorauto[png-True]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_canonical[png] ______________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_canonical[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_canonical[pdf] ______________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_canonical[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_arc_angles[png] _____________________________

    @image_comparison(['arc_angles.png'], remove_text=True, style='default')
    def test_arc_angles():
        # Ellipse parameters
        w = 2
        h = 1
        centre = (0.2, 0.5)
        scale = 2
    
        fig, axs = plt.subplots(3, 3)
        for i, ax in enumerate(axs.flat):
            theta2 = i * 360 / 9
            theta1 = theta2 - 45
    
            ax.add_patch(mpatches.Ellipse(centre, w, h, alpha=0.3))
            ax.add_patch(mpatches.Arc(centre, w, h, theta1=theta1, theta2=theta2))
            # Straight lines intersecting start and end of arc
            ax.plot([scale * np.cos(np.deg2rad(theta1)) + centre[0],
                     centre[0],
                     scale * np.cos(np.deg2rad(theta2)) + centre[0]],
                    [scale * np.sin(np.deg2rad(theta1)) + centre[1],
                     centre[1],
                     scale * np.sin(np.deg2rad(theta2)) + centre[1]])
    
>           ax.set_xlim(-scale, scale)

lib/matplotlib/tests/test_axes.py:1620: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.9500000000000001, right = 2.35

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_arc_ellipse[png] _____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_arc_ellipse[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3145: in draw
    artists = self._get_draw_artists(renderer)
lib/matplotlib/figure.py:231: in _get_draw_artists
    ax.apply_aspect(locator(ax, renderer) if locator else None)
lib/matplotlib/axes/_base.py:1917: in apply_aspect
    box_aspect = aspect * self.get_data_ratio()
lib/matplotlib/axes/_base.py:1863: in get_data_ratio
    txmin, txmax = self.xaxis.get_transform().transform(self.get_xbound())
lib/matplotlib/axes/_base.py:3493: in get_xbound
    left, right = self.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.25, right = 0.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_arc_ellipse[pdf] _____________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_arc_ellipse[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3145: in draw
    artists = self._get_draw_artists(renderer)
lib/matplotlib/figure.py:231: in _get_draw_artists
    ax.apply_aspect(locator(ax, renderer) if locator else None)
lib/matplotlib/axes/_base.py:1917: in apply_aspect
    box_aspect = aspect * self.get_data_ratio()
lib/matplotlib/axes/_base.py:1863: in get_data_ratio
    txmin, txmax = self.xaxis.get_transform().transform(self.get_xbound())
lib/matplotlib/axes/_base.py:3493: in get_xbound
    left, right = self.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.25, right = 0.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_marker_as_markerstyle __________________________

    def test_marker_as_markerstyle():
        fix, ax = plt.subplots()
        m = mmarkers.MarkerStyle('o')
        ax.plot([1, 2, 3], [3, 2, 1], marker=m)
>       ax.scatter([1, 2, 3], [4, 3, 2], marker=m)

lib/matplotlib/tests/test_axes.py:1672: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 3.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_markevery[png] ______________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_markevery[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_markevery[pdf] ______________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_markevery[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_markevery_line[png] ___________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_markevery_line[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_markevery_line[pdf] ___________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_markevery_line[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_markevery_linear_scales[png] _______________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_markevery_linear_scales[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_markevery_linear_scales[pdf] _______________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_markevery_linear_scales[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________ test_markevery_linear_scales_zoomed[png] ___________________

    @image_comparison(['markevery_linear_scales_zoomed'], remove_text=True)
    def test_markevery_linear_scales_zoomed():
        cases = [None,
                 8,
                 (30, 8),
                 [16, 24, 30], [0, -1],
                 slice(100, 200, 3),
                 0.1, 0.3, 1.5,
                 (0.0, 0.1), (0.45, 0.1)]
    
        cols = 3
        gs = matplotlib.gridspec.GridSpec(len(cases) // cols + 1, cols)
    
        delta = 0.11
        x = np.linspace(0, 10 - 2 * delta, 200) + delta
        y = np.sin(x) + 1.0 + delta
    
        for i, case in enumerate(cases):
            row = (i // cols)
            col = i % cols
            plt.subplot(gs[row, col])
            plt.title('markevery=%s' % str(case))
            plt.plot(x, y, 'o', ls='-', ms=4,  markevery=case)
>           plt.xlim((6, 6.7))

lib/matplotlib/tests/test_axes.py:1756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:1882: in xlim
    ret = ax.set_xlim(*args, **kwargs)
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: title={'center': 'markevery=None'}>, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________ test_markevery_linear_scales_zoomed[pdf] ___________________

    @image_comparison(['markevery_linear_scales_zoomed'], remove_text=True)
    def test_markevery_linear_scales_zoomed():
        cases = [None,
                 8,
                 (30, 8),
                 [16, 24, 30], [0, -1],
                 slice(100, 200, 3),
                 0.1, 0.3, 1.5,
                 (0.0, 0.1), (0.45, 0.1)]
    
        cols = 3
        gs = matplotlib.gridspec.GridSpec(len(cases) // cols + 1, cols)
    
        delta = 0.11
        x = np.linspace(0, 10 - 2 * delta, 200) + delta
        y = np.sin(x) + 1.0 + delta
    
        for i, case in enumerate(cases):
            row = (i // cols)
            col = i % cols
            plt.subplot(gs[row, col])
            plt.title('markevery=%s' % str(case))
            plt.plot(x, y, 'o', ls='-', ms=4,  markevery=case)
>           plt.xlim((6, 6.7))

lib/matplotlib/tests/test_axes.py:1756: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:1882: in xlim
    ret = ax.set_xlim(*args, **kwargs)
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: title={'center': 'markevery=None'}>, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_markevery_log_scales[png] ________________________

    @image_comparison(['markevery_log_scales'], remove_text=True)
    def test_markevery_log_scales():
        cases = [None,
                 8,
                 (30, 8),
                 [16, 24, 30], [0, -1],
                 slice(100, 200, 3),
                 0.1, 0.3, 1.5,
                 (0.0, 0.1), (0.45, 0.1)]
    
        cols = 3
        gs = matplotlib.gridspec.GridSpec(len(cases) // cols + 1, cols)
    
        delta = 0.11
        x = np.linspace(0, 10 - 2 * delta, 200) + delta
        y = np.sin(x) + 1.0 + delta
    
        for i, case in enumerate(cases):
            row = (i // cols)
            col = i % cols
            plt.subplot(gs[row, col])
            plt.title('markevery=%s' % str(case))
>           plt.xscale('log')

lib/matplotlib/tests/test_axes.py:1782: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:4097: in xscale
    gca().set_xscale(value, **kwargs)
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: title={'center': 'markevery=None'}>, left = 1.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_markevery_log_scales[pdf] ________________________

    @image_comparison(['markevery_log_scales'], remove_text=True)
    def test_markevery_log_scales():
        cases = [None,
                 8,
                 (30, 8),
                 [16, 24, 30], [0, -1],
                 slice(100, 200, 3),
                 0.1, 0.3, 1.5,
                 (0.0, 0.1), (0.45, 0.1)]
    
        cols = 3
        gs = matplotlib.gridspec.GridSpec(len(cases) // cols + 1, cols)
    
        delta = 0.11
        x = np.linspace(0, 10 - 2 * delta, 200) + delta
        y = np.sin(x) + 1.0 + delta
    
        for i, case in enumerate(cases):
            row = (i // cols)
            col = i % cols
            plt.subplot(gs[row, col])
            plt.title('markevery=%s' % str(case))
>           plt.xscale('log')

lib/matplotlib/tests/test_axes.py:1782: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:4097: in xscale
    gca().set_xscale(value, **kwargs)
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: title={'center': 'markevery=None'}>, left = 1.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_markevery_polar[png] ___________________________

    @image_comparison(['markevery_polar'], style='default', remove_text=True)
    def test_markevery_polar():
        cases = [None,
                 8,
                 (30, 8),
                 [16, 24, 30], [0, -1],
                 slice(100, 200, 3),
                 0.1, 0.3, 1.5,
                 (0.0, 0.1), (0.45, 0.1)]
    
        cols = 3
        gs = matplotlib.gridspec.GridSpec(len(cases) // cols + 1, cols)
    
        r = np.linspace(0, 3.0, 200)
        theta = 2 * np.pi * r
    
        for i, case in enumerate(cases):
            row = (i // cols)
            col = i % cols
>           plt.subplot(gs[row, col], polar=True)

lib/matplotlib/tests/test_axes.py:1806: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:1429: in subplot
    ax = fig.add_subplot(*args, **kwargs)
lib/matplotlib/figure.py:782: in add_subplot
    ax = projection_class(self, *args, **pkw)
lib/matplotlib/projections/polar.py:819: in __init__
    super().__init__(*args, **kwargs)
lib/matplotlib/axes/_base.py:678: in __init__
    self.clear()
lib/matplotlib/projections/polar.py:836: in clear
    self.set_xlim(0.0, 2 * np.pi)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <PolarAxes: >, left = 0.0, right = 6.283185307179586

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'PolarAxes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_markevery_polar[pdf] ___________________________

    @image_comparison(['markevery_polar'], style='default', remove_text=True)
    def test_markevery_polar():
        cases = [None,
                 8,
                 (30, 8),
                 [16, 24, 30], [0, -1],
                 slice(100, 200, 3),
                 0.1, 0.3, 1.5,
                 (0.0, 0.1), (0.45, 0.1)]
    
        cols = 3
        gs = matplotlib.gridspec.GridSpec(len(cases) // cols + 1, cols)
    
        r = np.linspace(0, 3.0, 200)
        theta = 2 * np.pi * r
    
        for i, case in enumerate(cases):
            row = (i // cols)
            col = i % cols
>           plt.subplot(gs[row, col], polar=True)

lib/matplotlib/tests/test_axes.py:1806: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:1429: in subplot
    ax = fig.add_subplot(*args, **kwargs)
lib/matplotlib/figure.py:782: in add_subplot
    ax = projection_class(self, *args, **pkw)
lib/matplotlib/projections/polar.py:819: in __init__
    super().__init__(*args, **kwargs)
lib/matplotlib/axes/_base.py:678: in __init__
    self.clear()
lib/matplotlib/projections/polar.py:836: in clear
    self.set_xlim(0.0, 2 * np.pi)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <PolarAxes: >, left = 0.0, right = 6.283185307179586

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'PolarAxes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ test_markevery_linear_scales_nans[png] ____________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_markevery_linear_scales_nans[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ test_markevery_linear_scales_nans[pdf] ____________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_markevery_linear_scales_nans[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_marker_edges[png] ____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_marker_edges[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.2000000000000002

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_marker_edges[pdf] ____________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_marker_edges[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.2000000000000002

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________ test_bar_tick_label_single[png] ________________________

    @image_comparison(['bar_tick_label_single.png', 'bar_tick_label_single.png'])
    def test_bar_tick_label_single():
        # From 2516: plot bar with array of string labels for x axis
        ax = plt.gca()
>       ax.bar(0, 1, align='edge', tick_label='0')

lib/matplotlib/tests/test_axes.py:1850: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2567: in bar
    tick_label_axis.set_ticks(tick_label_position)
lib/matplotlib/axis.py:2074: in set_ticks
    result = self._set_tick_locations(ticks, minor=minor)
lib/matplotlib/axis.py:2023: in _set_tick_locations
    axis.set_view_interval(min(ticks), max(ticks))
lib/matplotlib/axis.py:2210: in setter
    oldmin, oldmax = getter(self)
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 0.8

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_bar_tick_label_multiple[png] _______________________

    @image_comparison(['bar_tick_label_multiple.png'])
    def test_bar_tick_label_multiple():
        # From 2516: plot bar with array of string labels for x axis
        ax = plt.gca()
>       ax.bar([1, 2.5], [1, 2], width=[0.2, 0.5], tick_label=['a', 'b'],
               align='center')

lib/matplotlib/tests/test_axes.py:1873: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2567: in bar
    tick_label_axis.set_ticks(tick_label_position)
lib/matplotlib/axis.py:2074: in set_ticks
    result = self._set_tick_locations(ticks, minor=minor)
lib/matplotlib/axis.py:2023: in _set_tick_locations
    axis.set_view_interval(min(ticks), max(ticks))
lib/matplotlib/axis.py:2210: in setter
    oldmin, oldmax = getter(self)
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 3.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________ test_bar_tick_label_multiple_old_alignment[png] ________________

    @image_comparison(['bar_tick_label_multiple_old_label_alignment.png'])
    def test_bar_tick_label_multiple_old_alignment():
        # Test that the alignment for class is backward compatible
        matplotlib.rcParams["ytick.alignment"] = "center"
        ax = plt.gca()
>       ax.bar([1, 2.5], [1, 2], width=[0.2, 0.5], tick_label=['a', 'b'],
               align='center')

lib/matplotlib/tests/test_axes.py:1882: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2567: in bar
    tick_label_axis.set_ticks(tick_label_position)
lib/matplotlib/axis.py:2074: in set_ticks
    result = self._set_tick_locations(ticks, minor=minor)
lib/matplotlib/axis.py:2023: in _set_tick_locations
    axis.set_view_interval(min(ticks), max(ticks))
lib/matplotlib/axis.py:2210: in setter
    oldmin, oldmax = getter(self)
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 3.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_bar_decimal_center[png] _________________________

ext = 'png'
request = <FixtureRequest for <Function test_bar_decimal_center[png]>>
args = (), kwargs = {}, file_name = 'test_bar_decimal_center[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_bar_decimal_center[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_bar_decimal_center[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_barh_decimal_center[png] _________________________

ext = 'png'
request = <FixtureRequest for <Function test_barh_decimal_center[png]>>
args = (), kwargs = {}, file_name = 'test_barh_decimal_center[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_barh_decimal_center[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_barh_decimal_center[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_bar_decimal_width[png] __________________________

ext = 'png'
request = <FixtureRequest for <Function test_bar_decimal_width[png]>>, args = ()
kwargs = {}, file_name = 'test_bar_decimal_width[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_bar_decimal_width[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_bar_decimal_width[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_barh_decimal_height[png] _________________________

ext = 'png'
request = <FixtureRequest for <Function test_barh_decimal_height[png]>>
args = (), kwargs = {}, file_name = 'test_barh_decimal_height[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_barh_decimal_height[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_barh_decimal_height[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_barh_tick_label[png] ___________________________

    @image_comparison(['barh_tick_label.png'])
    def test_barh_tick_label():
        # From 2516: plot barh with array of string labels for y axis
        ax = plt.gca()
>       ax.barh([1, 2.5], [1, 2], height=[0.2, 0.5], tick_label=['a', 'b'],
                align='center')

lib/matplotlib/tests/test_axes.py:1962: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2695: in barh
    patches = self.bar(x=left, height=height, width=width, bottom=y,
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2567: in bar
    tick_label_axis.set_ticks(tick_label_position)
lib/matplotlib/axis.py:2074: in set_ticks
    result = self._set_tick_locations(ticks, minor=minor)
lib/matplotlib/axis.py:2023: in _set_tick_locations
    axis.set_view_interval(min(ticks), max(ticks))
lib/matplotlib/axis.py:2210: in setter
    oldmin, oldmax = getter(self)
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_bar_timedelta ______________________________

    def test_bar_timedelta():
        """Smoketest that bar can handle width and height in delta units."""
        fig, ax = plt.subplots()
        ax.bar(datetime.datetime(2018, 1, 1), 1.,
               width=datetime.timedelta(hours=3))
        ax.bar(datetime.datetime(2018, 1, 1), 1.,
               xerr=datetime.timedelta(hours=2),
               width=datetime.timedelta(hours=3))
        fig, ax = plt.subplots()
        ax.barh(datetime.datetime(2018, 1, 1), 1,
                height=datetime.timedelta(hours=3))
        ax.barh(datetime.datetime(2018, 1, 1), 1,
                height=datetime.timedelta(hours=3),
                yerr=datetime.timedelta(hours=2))
        fig, ax = plt.subplots()
        ax.barh([datetime.datetime(2018, 1, 1), datetime.datetime(2018, 1, 1)],
                np.array([1, 1.5]),
                height=datetime.timedelta(hours=3))
        ax.barh([datetime.datetime(2018, 1, 1), datetime.datetime(2018, 1, 1)],
                np.array([1, 1.5]),
                height=[datetime.timedelta(hours=t) for t in [1, 2]])
>       ax.broken_barh([(datetime.datetime(2018, 1, 1),
                         datetime.timedelta(hours=1))],
                       (10, 20))

lib/matplotlib/tests/test_axes.py:1987: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2929: in broken_barh
    self.add_collection(col, autolim=True)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_pcolor_regression ____________________________

pd = <module 'pandas' from '/opt/miniconda3/envs/testbed/lib/python3.11/site-packages/pandas/__init__.py'>

    def test_pcolor_regression(pd):
        from pandas.plotting import (
            register_matplotlib_converters,
            deregister_matplotlib_converters,
        )
    
        fig = plt.figure()
        ax = fig.add_subplot(111)
    
        times = [datetime.datetime(2021, 1, 1)]
        while len(times) < 7:
            times.append(times[-1] + datetime.timedelta(seconds=120))
    
        y_vals = np.arange(5)
    
        time_axis, y_axis = np.meshgrid(times, y_vals)
        shape = (len(y_vals) - 1, len(times) - 1)
        z_data = np.arange(shape[0] * shape[1])
    
        z_data.shape = shape
        try:
            register_matplotlib_converters()
    
            im = ax.pcolormesh(time_axis, y_axis, z_data)
            # make sure this does not raise!
>           fig.canvas.draw()

lib/matplotlib/tests/test_axes.py:2059: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 18628.0, right = 18628.008333333335

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_bar_hatches[png] _____________________________

ext = 'png', request = <FixtureRequest for <Function test_bar_hatches[png]>>
args = (), kwargs = {}, file_name = 'test_bar_hatches[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_bar_hatches[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_bar_hatches[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.51, right = 2.49

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_bar_hatches[pdf] _____________________________

ext = 'pdf', request = <FixtureRequest for <Function test_bar_hatches[pdf]>>
args = (), kwargs = {}, file_name = 'test_bar_hatches[pdf]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_bar_hatches[pdf].pdf')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_bar_hatches[pdf]-expected.pdf')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.51, right = 2.49

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_bar_hatches[svg] _____________________________

ext = 'svg', request = <FixtureRequest for <Function test_bar_hatches[svg]>>
args = (), kwargs = {}, file_name = 'test_bar_hatches[svg]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_bar_hatches[svg].svg')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_bar_hatches[svg]-expected.svg')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_svg.py:1338: in print_svg
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.51, right = 2.49

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________ test_bar_labels[x-1-x-expected_labels0-x] ___________________

x = 'x', width = 1, label = 'x', expected_labels = ['_nolegend_']
container_label = 'x'

    @pytest.mark.parametrize(
        ("x", "width", "label", "expected_labels", "container_label"),
        [
            ("x", 1, "x", ["_nolegend_"], "x"),
            (["a", "b", "c"], [10, 20, 15], ["A", "B", "C"],
             ["A", "B", "C"], "_nolegend_"),
            (["a", "b", "c"], [10, 20, 15], ["R", "Y", "_nolegend_"],
             ["R", "Y", "_nolegend_"], "_nolegend_"),
            (["a", "b", "c"], [10, 20, 15], "bars",
             ["_nolegend_", "_nolegend_", "_nolegend_"], "bars"),
        ]
    )
    def test_bar_labels(x, width, label, expected_labels, container_label):
        _, ax = plt.subplots()
>       bar_container = ax.bar(x, width, label=label)

lib/matplotlib/tests/test_axes.py:2120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2426: in bar
    self._process_unit_info(
lib/matplotlib/axes/_base.py:2548: in _process_unit_info
    axis.update_units(data)
lib/matplotlib/axis.py:1679: in update_units
    self._update_axisinfo()
lib/matplotlib/axis.py:1715: in _update_axisinfo
    self.set_default_intervals()
lib/matplotlib/axis.py:2442: in set_default_intervals
    not self.axes.viewLim.mutatedx()):
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.05, right = 0.05

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________ test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_] _________

x = ['a', 'b', 'c'], width = [10, 20, 15], label = ['A', 'B', 'C']
expected_labels = ['A', 'B', 'C'], container_label = '_nolegend_'

    @pytest.mark.parametrize(
        ("x", "width", "label", "expected_labels", "container_label"),
        [
            ("x", 1, "x", ["_nolegend_"], "x"),
            (["a", "b", "c"], [10, 20, 15], ["A", "B", "C"],
             ["A", "B", "C"], "_nolegend_"),
            (["a", "b", "c"], [10, 20, 15], ["R", "Y", "_nolegend_"],
             ["R", "Y", "_nolegend_"], "_nolegend_"),
            (["a", "b", "c"], [10, 20, 15], "bars",
             ["_nolegend_", "_nolegend_", "_nolegend_"], "bars"),
        ]
    )
    def test_bar_labels(x, width, label, expected_labels, container_label):
        _, ax = plt.subplots()
>       bar_container = ax.bar(x, width, label=label)

lib/matplotlib/tests/test_axes.py:2120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2426: in bar
    self._process_unit_info(
lib/matplotlib/axes/_base.py:2548: in _process_unit_info
    axis.update_units(data)
lib/matplotlib/axis.py:1679: in update_units
    self._update_axisinfo()
lib/matplotlib/axis.py:1715: in _update_axisinfo
    self.set_default_intervals()
lib/matplotlib/axis.py:2442: in set_default_intervals
    not self.axes.viewLim.mutatedx()):
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.05, right = 0.05

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________ test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_] _________

x = ['a', 'b', 'c'], width = [10, 20, 15], label = ['R', 'Y', '_nolegend_']
expected_labels = ['R', 'Y', '_nolegend_'], container_label = '_nolegend_'

    @pytest.mark.parametrize(
        ("x", "width", "label", "expected_labels", "container_label"),
        [
            ("x", 1, "x", ["_nolegend_"], "x"),
            (["a", "b", "c"], [10, 20, 15], ["A", "B", "C"],
             ["A", "B", "C"], "_nolegend_"),
            (["a", "b", "c"], [10, 20, 15], ["R", "Y", "_nolegend_"],
             ["R", "Y", "_nolegend_"], "_nolegend_"),
            (["a", "b", "c"], [10, 20, 15], "bars",
             ["_nolegend_", "_nolegend_", "_nolegend_"], "bars"),
        ]
    )
    def test_bar_labels(x, width, label, expected_labels, container_label):
        _, ax = plt.subplots()
>       bar_container = ax.bar(x, width, label=label)

lib/matplotlib/tests/test_axes.py:2120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2426: in bar
    self._process_unit_info(
lib/matplotlib/axes/_base.py:2548: in _process_unit_info
    axis.update_units(data)
lib/matplotlib/axis.py:1679: in update_units
    self._update_axisinfo()
lib/matplotlib/axis.py:1715: in _update_axisinfo
    self.set_default_intervals()
lib/matplotlib/axis.py:2442: in set_default_intervals
    not self.axes.viewLim.mutatedx()):
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.05, right = 0.05

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________ test_bar_labels[x3-width3-bars-expected_labels3-bars] _____________

x = ['a', 'b', 'c'], width = [10, 20, 15], label = 'bars'
expected_labels = ['_nolegend_', '_nolegend_', '_nolegend_']
container_label = 'bars'

    @pytest.mark.parametrize(
        ("x", "width", "label", "expected_labels", "container_label"),
        [
            ("x", 1, "x", ["_nolegend_"], "x"),
            (["a", "b", "c"], [10, 20, 15], ["A", "B", "C"],
             ["A", "B", "C"], "_nolegend_"),
            (["a", "b", "c"], [10, 20, 15], ["R", "Y", "_nolegend_"],
             ["R", "Y", "_nolegend_"], "_nolegend_"),
            (["a", "b", "c"], [10, 20, 15], "bars",
             ["_nolegend_", "_nolegend_", "_nolegend_"], "bars"),
        ]
    )
    def test_bar_labels(x, width, label, expected_labels, container_label):
        _, ax = plt.subplots()
>       bar_container = ax.bar(x, width, label=label)

lib/matplotlib/tests/test_axes.py:2120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2426: in bar
    self._process_unit_info(
lib/matplotlib/axes/_base.py:2548: in _process_unit_info
    axis.update_units(data)
lib/matplotlib/axis.py:1679: in update_units
    self._update_axisinfo()
lib/matplotlib/axis.py:1715: in _update_axisinfo
    self.set_default_intervals()
lib/matplotlib/axis.py:2442: in set_default_intervals
    not self.axes.viewLim.mutatedx()):
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.05, right = 0.05

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_bar_labels_length ____________________________

    def test_bar_labels_length():
        _, ax = plt.subplots()
        with pytest.raises(ValueError):
>           ax.bar(["x", "y"], [1, 2], label=["X", "Y", "Z"])

lib/matplotlib/tests/test_axes.py:2129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:2426: in bar
    self._process_unit_info(
lib/matplotlib/axes/_base.py:2548: in _process_unit_info
    axis.update_units(data)
lib/matplotlib/axis.py:1679: in update_units
    self._update_axisinfo()
lib/matplotlib/axis.py:1715: in _update_axisinfo
    self.set_default_intervals()
lib/matplotlib/axis.py:2442: in set_default_intervals
    not self.axes.viewLim.mutatedx()):
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.05, right = 0.05

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_hist_log[png] ______________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_hist_log[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_hist_log[pdf] ______________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_hist_log[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_hist_log_2[png] _____________________________

ext = 'png', request = <FixtureRequest for <Function test_hist_log_2[png]>>
args = (), kwargs = {}, file_name = 'test_hist_log_2[png]'
fig_test = <Figure size 640x480 with 6 Axes>
fig_ref = <Figure size 640x480 with 6 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:2166: in test_hist_log_2
    axs_test[1, i].set_yscale("log")
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2932: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3777: in set_ybound
    old_lower, old_upper = self.get_ybound()
lib/matplotlib/axes/_base.py:3749: in get_ybound
    bottom, top = self.get_ylim()
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.4, right = 1.6

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_hist_log_barstacked ___________________________

    def test_hist_log_barstacked():
        fig, axs = plt.subplots(2)
        axs[0].hist([[0], [0, 1]], 2, histtype="barstacked")
>       axs[0].set_yscale("log")

lib/matplotlib/tests/test_axes.py:2175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2932: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3777: in set_ybound
    old_lower, old_upper = self.get_ybound()
lib/matplotlib/axes/_base.py:3749: in get_ybound
    bottom, top = self.get_ylim()
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_hist_bar_empty[png] ___________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_hist_bar_empty[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0000000000000002

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_hist_step_empty[png] ___________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_hist_step_empty[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_hist_step_filled[png] __________________________

    @image_comparison(['hist_step_filled.png'], remove_text=True)
    def test_hist_step_filled():
        np.random.seed(0)
        x = np.random.randn(1000, 3)
        n_bins = 10
    
        kwargs = [{'fill': True}, {'fill': False}, {'fill': None}, {}]*2
        types = ['step']*4+['stepfilled']*4
        fig, axs = plt.subplots(nrows=2, ncols=4)
    
        for kg, _type, ax in zip(kwargs, types, axs.flat):
            ax.hist(x, n_bins, histtype=_type, stacked=True, **kg)
            ax.set_title(f'{kg}/{_type}')
>           ax.set_ylim(bottom=-50)

lib/matplotlib/tests/test_axes.py:2224: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3885: in set_ylim
    return self.yaxis._set_lim(bottom, top, emit=emit, auto=auto)
lib/matplotlib/axis.py:1206: in _set_lim
    old0, old1 = self.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: title={'center': "{'fill': True}/step"}>, left = -4.0, right = 4.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_hist_density[png] ____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_hist_density[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -4.0, right = 5.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_stairs[png] _______________________________

ext = 'png', request = <FixtureRequest for <Function test_stairs[png]>>
args = (), kwargs = {}, file_name = 'test_stairs[png]'
fig_test = <Figure size 640x480 with 6 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:2318: in test_stairs
    test_axes[4].semilogy()
lib/matplotlib/axes/_axes.py:1952: in semilogy
    self.set_yscale('log', **d)
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2932: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3777: in set_ybound
    old_lower, old_upper = self.get_ybound()
lib/matplotlib/axes/_base.py:3749: in get_ybound
    bottom, top = self.get_ylim()
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_stairs_fill[png] _____________________________

ext = 'png', request = <FixtureRequest for <Function test_stairs_fill[png]>>
args = (), kwargs = {}, file_name = 'test_stairs_fill[png]'
fig_test = <Figure size 640x480 with 4 Axes>
fig_ref = <Figure size 640x480 with 4 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:2365: in test_stairs_fill
    ref_axes[0].set_ylim(0, None)
lib/matplotlib/axes/_base.py:3885: in set_ylim
    return self.yaxis._set_lim(bottom, top, emit=emit, auto=auto)
lib/matplotlib/axis.py:1206: in _set_lim
    old0, old1 = self.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 5.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_stairs_update[png] ____________________________

ext = 'png', request = <FixtureRequest for <Function test_stairs_update[png]>>
args = (), kwargs = {}, file_name = 'test_stairs_update[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:2383: in test_stairs_update
    test_ax.set_ylim(ylim)
lib/matplotlib/axes/_base.py:3885: in set_ylim
    return self.yaxis._set_lim(bottom, top, emit=emit, auto=auto)
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 3.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_stairs_baseline_0[png] __________________________

ext = 'png'
request = <FixtureRequest for <Function test_stairs_baseline_0[png]>>, args = ()
kwargs = {}, file_name = 'test_stairs_baseline_0[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:2410: in test_stairs_baseline_0
    ref_ax.set_ylim(0, None)
lib/matplotlib/axes/_base.py:3885: in set_ylim
    return self.yaxis._set_lim(bottom, top, emit=emit, auto=auto)
lib/matplotlib/axis.py:1206: in _set_lim
    old0, old1 = self.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 3.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_stairs_empty _______________________________

    def test_stairs_empty():
        ax = plt.figure().add_subplot()
        ax.stairs([], [42])
>       assert ax.get_xlim() == (39, 45)

lib/matplotlib/tests/test_axes.py:2416: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 39.0, right = 45.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_stairs_options[png] ___________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_stairs_options[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 6.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_stairs_datetime[png] ___________________________

    @image_comparison(['test_stairs_datetime.png'])
    def test_stairs_datetime():
        f, ax = plt.subplots(constrained_layout=True)
        ax.stairs(np.arange(36),
                  np.arange(np.datetime64('2001-12-27'),
                            np.datetime64('2002-02-02')))
>       plt.xticks(rotation=30)

lib/matplotlib/tests/test_axes.py:2472: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:1976: in xticks
    locs = ax.get_xticks(minor=minor)
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:1520: in get_ticklocs
    return self.get_minorticklocs() if minor else self.get_majorticklocs()
lib/matplotlib/axis.py:1483: in get_majorticklocs
    return self.major.locator()
lib/matplotlib/dates.py:1378: in __call__
    dmin, dmax = self.viewlim_to_dt()
lib/matplotlib/dates.py:1160: in viewlim_to_dt
    vmin, vmax = self.axis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 11683.0, right = 11719.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_stairs_edge_handling[png] ________________________

ext = 'png'
request = <FixtureRequest for <Function test_stairs_edge_handling[png]>>
args = (), kwargs = {}, file_name = 'test_stairs_edge_handling[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_stairs_edge_handling[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_stairs_edge_handling[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 3.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_contour_hatching[png] __________________________

    @image_comparison(['contour_hatching'], remove_text=True, style='mpl20')
    def test_contour_hatching():
        x, y, z = contour_dat()
        fig, ax = plt.subplots()
>       ax.contourf(x, y, z, 7, hatches=['/', '\\', '//', '-'],
                    cmap=mpl.colormaps['gray'],
                    extend='both', alpha=0.5)

lib/matplotlib/tests/test_axes.py:2498: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:6514: in contourf
    contours = mcontour.QuadContourSet(self, *args, **kwargs)
lib/matplotlib/contour.py:925: in __init__
    self.axes.autoscale_view(tight=True)
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -3.0, right = 5.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_contour_hatching[pdf] __________________________

    @image_comparison(['contour_hatching'], remove_text=True, style='mpl20')
    def test_contour_hatching():
        x, y, z = contour_dat()
        fig, ax = plt.subplots()
>       ax.contourf(x, y, z, 7, hatches=['/', '\\', '//', '-'],
                    cmap=mpl.colormaps['gray'],
                    extend='both', alpha=0.5)

lib/matplotlib/tests/test_axes.py:2498: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:6514: in contourf
    contours = mcontour.QuadContourSet(self, *args, **kwargs)
lib/matplotlib/contour.py:925: in __init__
    self.axes.autoscale_view(tight=True)
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -3.0, right = 5.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_contour_colorbar[png] __________________________

    @image_comparison(
        ['contour_colorbar'], style='mpl20',
        tol=0.02 if platform.machine() in ('aarch64', 'ppc64le', 's390x') else 0)
    def test_contour_colorbar():
        x, y, z = contour_dat()
    
        fig, ax = plt.subplots()
>       cs = ax.contourf(x, y, z, levels=np.arange(-1.8, 1.801, 0.2),
                         cmap=mpl.colormaps['RdBu'],
                         vmin=-0.6,
                         vmax=0.6,
                         extend='both')

lib/matplotlib/tests/test_axes.py:2510: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:6514: in contourf
    contours = mcontour.QuadContourSet(self, *args, **kwargs)
lib/matplotlib/contour.py:925: in __init__
    self.axes.autoscale_view(tight=True)
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -3.0, right = 5.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_contour_colorbar[pdf] __________________________

    @image_comparison(
        ['contour_colorbar'], style='mpl20',
        tol=0.02 if platform.machine() in ('aarch64', 'ppc64le', 's390x') else 0)
    def test_contour_colorbar():
        x, y, z = contour_dat()
    
        fig, ax = plt.subplots()
>       cs = ax.contourf(x, y, z, levels=np.arange(-1.8, 1.801, 0.2),
                         cmap=mpl.colormaps['RdBu'],
                         vmin=-0.6,
                         vmax=0.6,
                         extend='both')

lib/matplotlib/tests/test_axes.py:2510: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:6514: in contourf
    contours = mcontour.QuadContourSet(self, *args, **kwargs)
lib/matplotlib/contour.py:925: in __init__
    self.axes.autoscale_view(tight=True)
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -3.0, right = 5.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_hist2d[png] _______________________________

    @image_comparison(['hist2d', 'hist2d'], remove_text=True, style='mpl20')
    def test_hist2d():
        # Remove this line when this test image is regenerated.
        plt.rcParams['pcolormesh.snap'] = False
    
        np.random.seed(0)
        # make it not symmetric in case we switch x and y axis
        x = np.random.randn(100)*2+5
        y = np.random.randn(100)-2
        fig, ax = plt.subplots()
>       ax.hist2d(x, y, bins=10, rasterized=True)

lib/matplotlib/tests/test_axes.py:2537: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:7186: in hist2d
    self.set_xlim(xedges[0], xedges[-1])
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.10597963166815738, right = 9.539509247975214

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_hist2d[pdf] _______________________________

    @image_comparison(['hist2d', 'hist2d'], remove_text=True, style='mpl20')
    def test_hist2d():
        # Remove this line when this test image is regenerated.
        plt.rcParams['pcolormesh.snap'] = False
    
        np.random.seed(0)
        # make it not symmetric in case we switch x and y axis
        x = np.random.randn(100)*2+5
        y = np.random.randn(100)-2
        fig, ax = plt.subplots()
>       ax.hist2d(x, y, bins=10, rasterized=True)

lib/matplotlib/tests/test_axes.py:2537: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:7186: in hist2d
    self.set_xlim(xedges[0], xedges[-1])
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.10597963166815738, right = 9.539509247975214

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_hist2d_transpose[png] __________________________

    @image_comparison(['hist2d_transpose'], remove_text=True, style='mpl20')
    def test_hist2d_transpose():
        # Remove this line when this test image is regenerated.
        plt.rcParams['pcolormesh.snap'] = False
    
        np.random.seed(0)
        # make sure the output from np.histogram is transposed before
        # passing to pcolorfast
        x = np.array([5]*100)
        y = np.random.randn(100)-2
        fig, ax = plt.subplots()
>       ax.hist2d(x, y, bins=10, rasterized=True)

lib/matplotlib/tests/test_axes.py:2556: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:7186: in hist2d
    self.set_xlim(xedges[0], xedges[-1])
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 4.5, right = 5.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_hist2d_transpose[pdf] __________________________

    @image_comparison(['hist2d_transpose'], remove_text=True, style='mpl20')
    def test_hist2d_transpose():
        # Remove this line when this test image is regenerated.
        plt.rcParams['pcolormesh.snap'] = False
    
        np.random.seed(0)
        # make sure the output from np.histogram is transposed before
        # passing to pcolorfast
        x = np.array([5]*100)
        y = np.random.randn(100)-2
        fig, ax = plt.subplots()
>       ax.hist2d(x, y, bins=10, rasterized=True)

lib/matplotlib/tests/test_axes.py:2556: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:7186: in hist2d
    self.set_xlim(xedges[0], xedges[-1])
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 4.5, right = 5.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_hist2d_density ______________________________

    def test_hist2d_density():
        x, y = np.random.random((2, 100))
        ax = plt.figure().subplots()
        for obj in [ax, plt]:
>           obj.hist2d(x, y, density=True)

lib/matplotlib/tests/test_axes.py:2563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:7186: in hist2d
    self.set_xlim(xedges[0], xedges[-1])
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ TestScatter.test_scatter_plot[png] ______________________

self = <matplotlib.tests.test_axes.TestScatter object at 0x7f386c4cc850>

    @image_comparison(['scatter'], style='mpl20', remove_text=True)
    def test_scatter_plot(self):
        data = {"x": np.array([3, 4, 2, 6]), "y": np.array([2, 5, 2, 3]),
                "c": ['r', 'y', 'b', 'lime'], "s": [24, 15, 19, 29],
                "c2": ['0.5', '0.6', '0.7', '0.8']}
    
        fig, ax = plt.subplots()
        ax.scatter(data["x"] - 1., data["y"] - 1., c=data["c"], s=data["s"])
>       ax.scatter(data["x"] + 1., data["y"] + 1., c=data["c2"], s=data["s"])

lib/matplotlib/tests/test_axes.py:2575: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.8, right = 5.2

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ TestScatter.test_scatter_plot[pdf] ______________________

self = <matplotlib.tests.test_axes.TestScatter object at 0x7f386d820c10>

    @image_comparison(['scatter'], style='mpl20', remove_text=True)
    def test_scatter_plot(self):
        data = {"x": np.array([3, 4, 2, 6]), "y": np.array([2, 5, 2, 3]),
                "c": ['r', 'y', 'b', 'lime'], "s": [24, 15, 19, 29],
                "c2": ['0.5', '0.6', '0.7', '0.8']}
    
        fig, ax = plt.subplots()
        ax.scatter(data["x"] - 1., data["y"] - 1., c=data["c"], s=data["s"])
>       ax.scatter(data["x"] + 1., data["y"] + 1., c=data["c2"], s=data["s"])

lib/matplotlib/tests/test_axes.py:2575: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.8, right = 5.2

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________ TestScatter.test_scatter_marker[png] _____________________

self = <matplotlib.tests.test_axes.TestScatter object at 0x7f386d821390>

    @image_comparison(['scatter_marker.png'], remove_text=True)
    def test_scatter_marker(self):
        fig, (ax0, ax1, ax2) = plt.subplots(ncols=3)
>       ax0.scatter([3, 4, 2, 6], [2, 5, 2, 3],
                    c=[(1, 0, 0), 'y', 'b', 'lime'],
                    s=[60, 50, 40, 30],
                    edgecolors=['k', 'r', 'g', 'b'],
                    marker='s')

lib/matplotlib/tests/test_axes.py:2581: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________ TestScatter.test_scatter_2D[png] _______________________

self = <matplotlib.tests.test_axes.TestScatter object at 0x7f386d8219d0>

    @image_comparison(['scatter_2D'], remove_text=True, extensions=['png'])
    def test_scatter_2D(self):
        x = np.arange(3)
        y = np.arange(2)
        x, y = np.meshgrid(x, y)
        z = x + y
        fig, ax = plt.subplots()
>       ax.scatter(x, y, c=z, s=200, edgecolors='face')

lib/matplotlib/tests/test_axes.py:2610: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ TestScatter.test_scatter_decimal[png] _____________________

ext = 'png', request = <FixtureRequest for <Function test_scatter_decimal[png]>>
args = (<matplotlib.tests.test_axes.TestScatter object at 0x7f386d822090>,)
kwargs = {}, file_name = 'test_scatter_decimal[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:2622: in test_scatter_decimal
    ax.scatter(x, y, c=c, s=s)
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________ TestScatter.test_scatter_color_warning[kwargs0] ________________

self = <matplotlib.tests.test_axes.TestScatter object at 0x7f386d822d90>
kwargs = {'cmap': 'gray'}

    @pytest.mark.parametrize('kwargs',
                                [
                                    {'cmap': 'gray'},
                                    {'norm': mcolors.Normalize()},
                                    {'vmin': 0},
                                    {'vmax': 0}
                                ])
    def test_scatter_color_warning(self, kwargs):
        warn_match = "No data for colormapping provided "
        # Warn for cases where 'cmap', 'norm', 'vmin', 'vmax'
        # kwargs are being overridden
        with pytest.warns(Warning, match=warn_match):
            plt.scatter([], [], **kwargs)
        with pytest.warns(Warning, match=warn_match):
>           plt.scatter([1, 2], [3, 4], c=[], **kwargs)

lib/matplotlib/tests/test_axes.py:2648: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:3623: in scatter
    __ret = gca().scatter(
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________ TestScatter.test_scatter_color_warning[kwargs1] ________________

self = <matplotlib.tests.test_axes.TestScatter object at 0x7f386d822ed0>
kwargs = {'norm': <matplotlib.colors.Normalize object at 0x7f386c4fe410>}

    @pytest.mark.parametrize('kwargs',
                                [
                                    {'cmap': 'gray'},
                                    {'norm': mcolors.Normalize()},
                                    {'vmin': 0},
                                    {'vmax': 0}
                                ])
    def test_scatter_color_warning(self, kwargs):
        warn_match = "No data for colormapping provided "
        # Warn for cases where 'cmap', 'norm', 'vmin', 'vmax'
        # kwargs are being overridden
        with pytest.warns(Warning, match=warn_match):
            plt.scatter([], [], **kwargs)
        with pytest.warns(Warning, match=warn_match):
>           plt.scatter([1, 2], [3, 4], c=[], **kwargs)

lib/matplotlib/tests/test_axes.py:2648: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:3623: in scatter
    __ret = gca().scatter(
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________ TestScatter.test_scatter_color_warning[kwargs2] ________________

self = <matplotlib.tests.test_axes.TestScatter object at 0x7f386d823150>
kwargs = {'vmin': 0}

    @pytest.mark.parametrize('kwargs',
                                [
                                    {'cmap': 'gray'},
                                    {'norm': mcolors.Normalize()},
                                    {'vmin': 0},
                                    {'vmax': 0}
                                ])
    def test_scatter_color_warning(self, kwargs):
        warn_match = "No data for colormapping provided "
        # Warn for cases where 'cmap', 'norm', 'vmin', 'vmax'
        # kwargs are being overridden
        with pytest.warns(Warning, match=warn_match):
            plt.scatter([], [], **kwargs)
        with pytest.warns(Warning, match=warn_match):
>           plt.scatter([1, 2], [3, 4], c=[], **kwargs)

lib/matplotlib/tests/test_axes.py:2648: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:3623: in scatter
    __ret = gca().scatter(
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________ TestScatter.test_scatter_color_warning[kwargs3] ________________

self = <matplotlib.tests.test_axes.TestScatter object at 0x7f386d8233d0>
kwargs = {'vmax': 0}

    @pytest.mark.parametrize('kwargs',
                                [
                                    {'cmap': 'gray'},
                                    {'norm': mcolors.Normalize()},
                                    {'vmin': 0},
                                    {'vmax': 0}
                                ])
    def test_scatter_color_warning(self, kwargs):
        warn_match = "No data for colormapping provided "
        # Warn for cases where 'cmap', 'norm', 'vmin', 'vmax'
        # kwargs are being overridden
        with pytest.warns(Warning, match=warn_match):
            plt.scatter([], [], **kwargs)
        with pytest.warns(Warning, match=warn_match):
>           plt.scatter([1, 2], [3, 4], c=[], **kwargs)

lib/matplotlib/tests/test_axes.py:2648: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:3623: in scatter
    __ret = gca().scatter(
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ TestScatter.test_scatter_unfilled _______________________

self = <matplotlib.tests.test_axes.TestScatter object at 0x7f386d8238d0>

    def test_scatter_unfilled(self):
>       coll = plt.scatter([0, 1, 2], [1, 3, 2], c=['0.1', '0.3', '0.5'],
                           marker=mmarkers.MarkerStyle('o', fillstyle='none'),
                           linewidths=[1.1, 1.2, 1.3])

lib/matplotlib/tests/test_axes.py:2654: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:3623: in scatter
    __ret = gca().scatter(
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ TestScatter.test_scatter_edgecolor_RGB ____________________

self = <matplotlib.tests.test_axes.TestScatter object at 0x7f386d814a90>

    def test_scatter_edgecolor_RGB(self):
        # GitHub issue 19066
>       coll = plt.scatter([1, 2, 3], [1, np.nan, np.nan],
                            edgecolor=(1, 0, 0))

lib/matplotlib/tests/test_axes.py:2685: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:3623: in scatter
    __ret = gca().scatter(
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________ TestScatter.test_scatter_invalid_color[png] __________________

ext = 'png'
request = <FixtureRequest for <Function test_scatter_invalid_color[png]>>
args = (<matplotlib.tests.test_axes.TestScatter object at 0x7f386d815610>,)
kwargs = {}, file_name = 'test_scatter_invalid_color[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:2700: in test_scatter_invalid_color
    ax.scatter(range(4), range(4),
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________ TestScatter.test_scatter_no_invalid_color[png] ________________

ext = 'png'
request = <FixtureRequest for <Function test_scatter_no_invalid_color[png]>>
args = (<matplotlib.tests.test_axes.TestScatter object at 0x7f386d815f50>,)
kwargs = {}, file_name = 'test_scatter_no_invalid_color[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:2714: in test_scatter_no_invalid_color
    ax.scatter(range(4), range(4),
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________ TestScatter.test_scatter_single_point[png] __________________

ext = 'png'
request = <FixtureRequest for <Function test_scatter_single_point[png]>>
args = (<matplotlib.tests.test_axes.TestScatter object at 0x7f386d816f50>,)
kwargs = {}, file_name = 'test_scatter_single_point[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:2733: in test_scatter_single_point
    ax.scatter(1, 1, c=1)
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________ TestScatter.test_scatter_different_shapes[png] ________________

ext = 'png'
request = <FixtureRequest for <Function test_scatter_different_shapes[png]>>
args = (<matplotlib.tests.test_axes.TestScatter object at 0x7f386d817890>,)
kwargs = {}, file_name = 'test_scatter_different_shapes[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:2741: in test_scatter_different_shapes
    ax.scatter(x, x.reshape(2, 5), c=x.reshape(5, 2))
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________ TestScatter.test_scatter_single_color_c[png] _________________

ext = 'png'
request = <FixtureRequest for <Function test_scatter_single_color_c[png]>>
args = (<matplotlib.tests.test_axes.TestScatter object at 0x7f386d8136d0>,)
kwargs = {}, file_name = 'test_scatter_single_color_c[png]'
fig_test = <Figure size 640x480 with 0 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:2824: in test_scatter_single_color_c
    ax_ref.scatter(np.ones(4)*2, range(4), color=rgba)
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.945, right = 1.0550000000000002

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________ TestScatter.test_scatter_linewidths ______________________

self = <matplotlib.tests.test_axes.TestScatter object at 0x7f386d813bd0>

    def test_scatter_linewidths(self):
        x = np.arange(5)
    
        fig, ax = plt.subplots()
        for i in range(3):
>           pc = ax.scatter(x, np.full(5, i), c=f'C{i}', marker='x', s=100,
                            linewidths=i + 1)

lib/matplotlib/tests/test_axes.py:2836: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_as_mpl_axes_api _____________________________

    def test_as_mpl_axes_api():
        # tests the _as_mpl_axes api
        class Polar:
            def __init__(self):
                self.theta_offset = 0
    
            def _as_mpl_axes(self):
                # implement the matplotlib axes interface
                return PolarAxes, {'theta_offset': self.theta_offset}
    
        prj = Polar()
        prj2 = Polar()
        prj2.theta_offset = np.pi
    
        # testing axes creation with plt.axes
>       ax = plt.axes((0, 0, 1, 1), projection=prj)

lib/matplotlib/tests/test_axes.py:2951: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:1217: in axes
    return fig.add_axes(arg, **kwargs)
lib/matplotlib/figure.py:648: in add_axes
    a = projection_class(self, rect, **pkw)
lib/matplotlib/projections/polar.py:819: in __init__
    super().__init__(*args, **kwargs)
lib/matplotlib/axes/_base.py:678: in __init__
    self.clear()
lib/matplotlib/projections/polar.py:836: in clear
    self.set_xlim(0.0, 2 * np.pi)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <PolarAxes: >, left = 0.0, right = 6.283185307179586

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'PolarAxes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_log_scales ________________________________

    def test_log_scales():
        fig, ax = plt.subplots()
        ax.plot(np.log(np.linspace(0.1, 100)))
>       ax.set_yscale('log', base=5.5)

lib/matplotlib/tests/test_axes.py:2975: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2932: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3777: in set_ybound
    old_lower, old_upper = self.get_ybound()
lib/matplotlib/axes/_base.py:3749: in get_ybound
    bottom, top = self.get_ylim()
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 50.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_log_scales_no_data ____________________________

    def test_log_scales_no_data():
        _, ax = plt.subplots()
>       ax.set(xscale="log", yscale="log")

lib/matplotlib/tests/test_axes.py:3018: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_log_scales_invalid ____________________________

    def test_log_scales_invalid():
        fig, ax = plt.subplots()
>       ax.set_xscale('log')

lib/matplotlib/tests/test_axes.py:3025: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_stackplot[png] ______________________________

    @image_comparison(['stackplot_test_image', 'stackplot_test_image'])
    def test_stackplot():
        fig = plt.figure()
        x = np.linspace(0, 10, 10)
        y1 = 1.0 * x
        y2 = 2.0 * x + 1
        y3 = 3.0 * x + 2
        ax = fig.add_subplot(1, 1, 1)
        ax.stackplot(x, y1, y2, y3)
>       ax.set_xlim((0, 10))

lib/matplotlib/tests/test_axes.py:3042: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_stackplot[pdf] ______________________________

    @image_comparison(['stackplot_test_image', 'stackplot_test_image'])
    def test_stackplot():
        fig = plt.figure()
        x = np.linspace(0, 10, 10)
        y1 = 1.0 * x
        y2 = 2.0 * x + 1
        y3 = 3.0 * x + 2
        ax = fig.add_subplot(1, 1, 1)
        ax.stackplot(x, y1, y2, y3)
>       ax.set_xlim((0, 10))

lib/matplotlib/tests/test_axes.py:3042: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_stackplot_baseline[png] _________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_stackplot_baseline[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 100.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_stackplot_baseline[pdf] _________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_stackplot_baseline[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 100.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_bxp_baseline[png] ____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_baseline[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_bxp_rangewhis[png] ____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_rangewhis[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_bxp_percentilewhis[png] _________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_percentilewhis[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_bxp_with_xlabels[png] __________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_with_xlabels[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_bxp_horizontal[png] ___________________________

    @image_comparison(['bxp_horizontal.png'],
                      remove_text=True,
                      savefig_kwarg={'dpi': 40},
                      style='default',
                      tol=0.1)
    def test_bxp_horizontal():
>       _bxp_test_helper(bxp_kwargs=dict(vert=False))

lib/matplotlib/tests/test_axes.py:3136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:3088: in _bxp_test_helper
    ax.set_xscale('log')
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.8912509381337456, right = 11.220184543019636

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_bxp_with_ylabels[png] __________________________

    @image_comparison(['bxp_with_ylabels.png'],
                      savefig_kwarg={'dpi': 40},
                      style='default',
                      tol=0.1)
    def test_bxp_with_ylabels():
        def transform(stats):
            for s, label in zip(stats, list('ABCD')):
                s['label'] = label
            return stats
    
>       _bxp_test_helper(transform_stats=transform, bxp_kwargs=dict(vert=False))

lib/matplotlib/tests/test_axes.py:3149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:3088: in _bxp_test_helper
    ax.set_xscale('log')
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.8912509381337456, right = 11.220184543019636

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_bxp_patchartist[png] ___________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_patchartist[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________ test_bxp_custompatchartist[png] ________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_custompatchartist[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_bxp_customoutlier[png] __________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_customoutlier[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_bxp_showcustommean[png] _________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_showcustommean[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_bxp_custombox[png] ____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_custombox[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_bxp_custommedian[png] __________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_custommedian[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_bxp_customcap[png] ____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_customcap[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_bxp_customwhisker[png] __________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_customwhisker[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_bxp_shownotches[png] ___________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_shownotches[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_bxp_nocaps[png] _____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_nocaps[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_bxp_nobox[png] ______________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_nobox[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_bxp_no_flier_stats[png] _________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_no_flier_stats[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_bxp_showmean[png] ____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_showmean[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_bxp_showmeanasline[png] _________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_showmeanasline[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_bxp_scalarwidth[png] ___________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_scalarwidth[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_bxp_customwidths[png] __________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_customwidths[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_bxp_custompositions[png] _________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_custompositions[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 7.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_bxp_custom_capwidths[png] ________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_custom_capwidths[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_bxp_custom_capwidth[png] _________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_bxp_custom_capwidth[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 4.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_boxplot[png] _______________________________

    @image_comparison(['boxplot', 'boxplot'], tol=1.28, style='default')
    def test_boxplot():
        # Randomness used for bootstrapping.
        np.random.seed(937)
    
        x = np.linspace(-7, 7, 140)
        x = np.hstack([-25, x, 25])
        fig, ax = plt.subplots()
    
        ax.boxplot([x, x], bootstrap=10000, notch=1)
>       ax.set_ylim((-30, 30))

lib/matplotlib/tests/test_axes.py:3343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3885: in set_ylim
    return self.yaxis._set_lim(bottom, top, emit=emit, auto=auto)
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_boxplot[pdf] _______________________________

    @image_comparison(['boxplot', 'boxplot'], tol=1.28, style='default')
    def test_boxplot():
        # Randomness used for bootstrapping.
        np.random.seed(937)
    
        x = np.linspace(-7, 7, 140)
        x = np.hstack([-25, x, 25])
        fig, ax = plt.subplots()
    
        ax.boxplot([x, x], bootstrap=10000, notch=1)
>       ax.set_ylim((-30, 30))

lib/matplotlib/tests/test_axes.py:3343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3885: in set_ylim
    return self.yaxis._set_lim(bottom, top, emit=emit, auto=auto)
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_boxplot_custom_capwidths[png] ______________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_boxplot_custom_capwidths[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_boxplot_sym2[png] ____________________________

    @image_comparison(['boxplot_sym2.png'], remove_text=True, style='default')
    def test_boxplot_sym2():
        # Randomness used for bootstrapping.
        np.random.seed(937)
    
        x = np.linspace(-7, 7, 140)
        x = np.hstack([-25, x, 25])
        fig, [ax1, ax2] = plt.subplots(1, 2)
    
        ax1.boxplot([x, x], bootstrap=10000, sym='^')
>       ax1.set_ylim((-30, 30))

lib/matplotlib/tests/test_axes.py:3373: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3885: in set_ylim
    return self.yaxis._set_lim(bottom, top, emit=emit, auto=auto)
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_boxplot_sym[png] _____________________________

    @image_comparison(['boxplot_sym.png'],
                      remove_text=True,
                      savefig_kwarg={'dpi': 40},
                      style='default')
    def test_boxplot_sym():
        x = np.linspace(-7, 7, 140)
        x = np.hstack([-25, x, 25])
        fig, ax = plt.subplots()
    
        ax.boxplot([x, x], sym='gs')
>       ax.set_ylim((-30, 30))

lib/matplotlib/tests/test_axes.py:3389: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3885: in set_ylim
    return self.yaxis._set_lim(bottom, top, emit=emit, auto=auto)
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________ test_boxplot_autorange_whiskers[png] _____________________

    @image_comparison(['boxplot_autorange_false_whiskers.png',
                       'boxplot_autorange_true_whiskers.png'],
                      style='default')
    def test_boxplot_autorange_whiskers():
        # Randomness used for bootstrapping.
        np.random.seed(937)
    
        x = np.ones(140)
        x = np.hstack([0, x, 2])
    
        fig1, ax1 = plt.subplots()
        ax1.boxplot([x, x], bootstrap=10000, notch=1)
>       ax1.set_ylim((-5, 5))

lib/matplotlib/tests/test_axes.py:3404: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3885: in set_ylim
    return self.yaxis._set_lim(bottom, top, emit=emit, auto=auto)
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________ test_boxplot_rc_parameters[png] ________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_boxplot_rc_parameters[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________ test_boxplot_rc_parameters[pdf] ________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_boxplot_rc_parameters[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_boxplot_with_CIarray[png] ________________________

    @image_comparison(['boxplot_with_CIarray.png'],
                      remove_text=True, savefig_kwarg={'dpi': 40}, style='default')
    def test_boxplot_with_CIarray():
        # Randomness used for bootstrapping.
        np.random.seed(937)
    
        x = np.linspace(-7, 7, 140)
        x = np.hstack([-25, x, 25])
        fig, ax = plt.subplots()
        CIs = np.array([[-1.5, 3.], [-1., 3.5]])
    
        # show a boxplot with Matplotlib medians and confidence intervals, and
        # another with manual values
        ax.boxplot([x, x], bootstrap=10000, usermedians=[None, 1.0],
                   conf_intervals=CIs, notch=1)
>       ax.set_ylim((-30, 30))

lib/matplotlib/tests/test_axes.py:3499: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3885: in set_ylim
    return self.yaxis._set_lim(bottom, top, emit=emit, auto=auto)
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_boxplot_no_weird_whisker[png] ______________________

    @image_comparison(['boxplot_no_inverted_whisker.png'],
                      remove_text=True, savefig_kwarg={'dpi': 40}, style='default')
    def test_boxplot_no_weird_whisker():
        x = np.array([3, 9000, 150, 88, 350, 200000, 1400, 960],
                     dtype=np.float64)
        ax1 = plt.axes()
        ax1.boxplot(x)
>       ax1.set_yscale('log')

lib/matplotlib/tests/test_axes.py:3509: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2932: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3777: in set_ybound
    old_lower, old_upper = self.get_ybound()
lib/matplotlib/axes/_base.py:3749: in get_ybound
    bottom, top = self.get_ylim()
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 1.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________ test_boxplot_mod_artist_after_plotting[png] __________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_boxplot_mod_artist_after_plotting[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 1.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_vert_violinplot_baseline[png] ______________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_vert_violinplot_baseline[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.5, right = 3.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________ test_vert_violinplot_showmeans[png] ______________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_vert_violinplot_showmeans[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.5, right = 3.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ test_vert_violinplot_showextrema[png] _____________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_vert_violinplot_showextrema[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.5, right = 3.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ test_vert_violinplot_showmedians[png] _____________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_vert_violinplot_showmedians[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.5, right = 3.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_vert_violinplot_showall[png] _______________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_vert_violinplot_showall[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.5, right = 3.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________ test_vert_violinplot_custompoints_10[png] ___________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_vert_violinplot_custompoints_10[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.5, right = 3.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________ test_vert_violinplot_custompoints_200[png] __________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_vert_violinplot_custompoints_200[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.5, right = 3.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________ test_horiz_violinplot_baseline[png] ______________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_horiz_violinplot_baseline[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -5.0, right = 4.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ test_horiz_violinplot_showmedians[png] ____________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_horiz_violinplot_showmedians[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -3.0, right = 4.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________ test_horiz_violinplot_showmeans[png] _____________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_horiz_violinplot_showmeans[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -3.0, right = 3.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ test_horiz_violinplot_showextrema[png] ____________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_horiz_violinplot_showextrema[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -4.0, right = 5.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_horiz_violinplot_showall[png] ______________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_horiz_violinplot_showall[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -4.0, right = 5.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________ test_horiz_violinplot_custompoints_10[png] __________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_horiz_violinplot_custompoints_10[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -4.0, right = 4.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________ test_horiz_violinplot_custompoints_200[png] __________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_horiz_violinplot_custompoints_200[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -4.0, right = 4.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________ test_violinplot_single_list_quantiles[png] __________________

ext = 'png'
request = <FixtureRequest for <Function test_violinplot_single_list_quantiles[png]>>
args = (), kwargs = {}, file_name = 'test_violinplot_single_list_quantiles[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_violinplot_single_list_quantiles[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_violinplot_single_list_quantiles[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.7000000000000001, right = 1.3000000000000003

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_violinplot_pandas_series[png] ______________________

ext = 'png'
request = <FixtureRequest for <Function test_violinplot_pandas_series[png]>>
args = ()
kwargs = {'pd': <module 'pandas' from '/opt/miniconda3/envs/testbed/lib/python3.11/site-packages/pandas/__init__.py'>}
file_name = 'test_violinplot_pandas_series[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_violinplot_pandas_series[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_violinplot_pandas_series[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 3.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_manage_xticks ______________________________

    def test_manage_xticks():
        _, ax = plt.subplots()
>       ax.set_xlim(0, 4)

lib/matplotlib/tests/test_axes.py:3791: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0, right = 4

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_boxplot_not_single ____________________________

    def test_boxplot_not_single():
        fig, ax = plt.subplots()
        ax.boxplot(np.random.rand(100), positions=[3])
        ax.boxplot(np.random.rand(100), positions=[5])
>       fig.canvas.draw()

lib/matplotlib/tests/test_axes.py:3805: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 2.5, right = 5.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_tick_space_size_0 ____________________________

    def test_tick_space_size_0():
        # allow font size to be zero, which affects ticks when there is
        # no other text in the figure.
        plt.plot([0, 1], [0, 1])
        matplotlib.rcParams.update({'font.size': 0})
        b = io.BytesIO()
>       plt.savefig(b, dpi=80, format='raw')

lib/matplotlib/tests/test_axes.py:3817: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:1111: in savefig
    res = fig.savefig(*args, **kwargs)  # type: ignore[func-returns-value]
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:431: in print_raw
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_errorbar[png] ______________________________

    @image_comparison(['errorbar_basic', 'errorbar_mixed', 'errorbar_basic'])
    def test_errorbar():
        # longdouble due to floating point rounding issues with certain
        # computer chipsets
        x = np.arange(0.1, 4, 0.5, dtype=np.longdouble)
        y = np.exp(-x)
    
        yerr = 0.1 + 0.2*np.sqrt(x)
        xerr = 0.1 + yerr
    
        # First illustrate basic pyplot interface, using defaults where possible.
        fig = plt.figure()
        ax = fig.gca()
        ax.errorbar(x, y, xerr=0.2, yerr=0.4)
        ax.set_title("Simplest errorbars, 0.2 in x, 0.4 in y")
    
        # Now switch to a more OO interface to exercise more features.
        fig, axs = plt.subplots(nrows=2, ncols=2, sharex=True)
        ax = axs[0, 0]
        ax.errorbar(x, y, yerr=yerr, fmt='o')
        ax.set_title('Vert. symmetric')
    
        # With 4 subplots, reduce the number of axis ticks to avoid crowding.
        ax.locator_params(nbins=4)
    
        ax = axs[0, 1]
        ax.errorbar(x, y, xerr=xerr, fmt='o', alpha=0.4)
        ax.set_title('Hor. symmetric w/ alpha')
    
        ax = axs[1, 0]
        ax.errorbar(x, y, yerr=[yerr, 2*yerr], xerr=[xerr, 2*xerr], fmt='--o')
        ax.set_title('H, V asymmetric')
    
        ax = axs[1, 1]
>       ax.set_yscale('log')

lib/matplotlib/tests/test_axes.py:3854: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2932: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3777: in set_ybound
    old_lower, old_upper = self.get_ybound()
lib/matplotlib/axes/_base.py:3749: in get_ybound
    bottom, top = self.get_ylim()
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -2.0, right = 6.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_errorbar[pdf] ______________________________

    @image_comparison(['errorbar_basic', 'errorbar_mixed', 'errorbar_basic'])
    def test_errorbar():
        # longdouble due to floating point rounding issues with certain
        # computer chipsets
        x = np.arange(0.1, 4, 0.5, dtype=np.longdouble)
        y = np.exp(-x)
    
        yerr = 0.1 + 0.2*np.sqrt(x)
        xerr = 0.1 + yerr
    
        # First illustrate basic pyplot interface, using defaults where possible.
        fig = plt.figure()
        ax = fig.gca()
        ax.errorbar(x, y, xerr=0.2, yerr=0.4)
        ax.set_title("Simplest errorbars, 0.2 in x, 0.4 in y")
    
        # Now switch to a more OO interface to exercise more features.
        fig, axs = plt.subplots(nrows=2, ncols=2, sharex=True)
        ax = axs[0, 0]
        ax.errorbar(x, y, yerr=yerr, fmt='o')
        ax.set_title('Vert. symmetric')
    
        # With 4 subplots, reduce the number of axis ticks to avoid crowding.
        ax.locator_params(nbins=4)
    
        ax = axs[0, 1]
        ax.errorbar(x, y, xerr=xerr, fmt='o', alpha=0.4)
        ax.set_title('Hor. symmetric w/ alpha')
    
        ax = axs[1, 0]
        ax.errorbar(x, y, yerr=[yerr, 2*yerr], xerr=[xerr, 2*xerr], fmt='--o')
        ax.set_title('H, V asymmetric')
    
        ax = axs[1, 1]
>       ax.set_yscale('log')

lib/matplotlib/tests/test_axes.py:3854: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2932: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3777: in set_ybound
    old_lower, old_upper = self.get_ybound()
lib/matplotlib/axes/_base.py:3749: in get_ybound
    bottom, top = self.get_ylim()
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -2.0, right = 6.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________ test_mixed_errorbar_polar_caps[png] ______________________

    @image_comparison(['mixed_errorbar_polar_caps'], extensions=['png'],
                      remove_text=True)
    def test_mixed_errorbar_polar_caps():
        """
        Mix several polar errorbar use cases in a single test figure.
    
        It is advisable to position individual points off the grid. If there are
        problems with reproducibility of this test, consider removing grid.
        """
        fig = plt.figure()
>       ax = plt.subplot(111, projection='polar')

lib/matplotlib/tests/test_axes.py:3885: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:1429: in subplot
    ax = fig.add_subplot(*args, **kwargs)
lib/matplotlib/figure.py:782: in add_subplot
    ax = projection_class(self, *args, **pkw)
lib/matplotlib/projections/polar.py:819: in __init__
    super().__init__(*args, **kwargs)
lib/matplotlib/axes/_base.py:678: in __init__
    self.clear()
lib/matplotlib/projections/polar.py:836: in clear
    self.set_xlim(0.0, 2 * np.pi)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <PolarAxes: >, left = 0.0, right = 6.283185307179586

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'PolarAxes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________ test_errorbar_cycle_ecolor[png] ________________________

ext = 'png'
request = <FixtureRequest for <Function test_errorbar_cycle_ecolor[png]>>
args = (), kwargs = {}, file_name = 'test_errorbar_cycle_ecolor[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_errorbar_cycle_ecolor[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_errorbar_cycle_ecolor[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 4.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________ test_errorbar_cycle_ecolor[pdf] ________________________

ext = 'pdf'
request = <FixtureRequest for <Function test_errorbar_cycle_ecolor[pdf]>>
args = (), kwargs = {}, file_name = 'test_errorbar_cycle_ecolor[pdf]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_errorbar_cycle_ecolor[pdf].pdf')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_errorbar_cycle_ecolor[pdf]-expected.pdf')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 4.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________ test_errorbar_cycle_ecolor[svg] ________________________

ext = 'svg'
request = <FixtureRequest for <Function test_errorbar_cycle_ecolor[svg]>>
args = (), kwargs = {}, file_name = 'test_errorbar_cycle_ecolor[svg]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_errorbar_cycle_ecolor[svg].svg')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_errorbar_cycle_ecolor[svg]-expected.svg')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_svg.py:1338: in print_svg
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 4.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_errorbar_limits[png] ___________________________

    @image_comparison(['errorbar_limits'])
    def test_errorbar_limits():
        x = np.arange(0.5, 5.5, 0.5)
        y = np.exp(-x)
        xerr = 0.1
        yerr = 0.2
        ls = 'dotted'
    
        fig, ax = plt.subplots()
    
        # standard error bars
        ax.errorbar(x, y, xerr=xerr, yerr=yerr, ls=ls, color='blue')
    
        # including upper limits
        uplims = np.zeros_like(x)
        uplims[[1, 5, 9]] = True
>       ax.errorbar(x, y+0.5, xerr=xerr, yerr=yerr, uplims=uplims, ls=ls,
                    color='green')

lib/matplotlib/tests/test_axes.py:3974: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3702: in errorbar
    if self._axis_map[dep_axis].get_inverted() ^ idx
lib/matplotlib/axis.py:1150: in get_inverted
    low, high = self.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 6.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_errorbar_limits[pdf] ___________________________

    @image_comparison(['errorbar_limits'])
    def test_errorbar_limits():
        x = np.arange(0.5, 5.5, 0.5)
        y = np.exp(-x)
        xerr = 0.1
        yerr = 0.2
        ls = 'dotted'
    
        fig, ax = plt.subplots()
    
        # standard error bars
        ax.errorbar(x, y, xerr=xerr, yerr=yerr, ls=ls, color='blue')
    
        # including upper limits
        uplims = np.zeros_like(x)
        uplims[[1, 5, 9]] = True
>       ax.errorbar(x, y+0.5, xerr=xerr, yerr=yerr, uplims=uplims, ls=ls,
                    color='green')

lib/matplotlib/tests/test_axes.py:3974: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3702: in errorbar
    if self._axis_map[dep_axis].get_inverted() ^ idx
lib/matplotlib/axis.py:1150: in get_inverted
    low, high = self.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 6.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_errorbar_with_prop_cycle[png] ______________________

ext = 'png'
request = <FixtureRequest for <Function test_errorbar_with_prop_cycle[png]>>
args = (), kwargs = {}, file_name = 'test_errorbar_with_prop_cycle[png]'
fig_test = <Figure size 640x480 with 0 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:4042: in test_errorbar_with_prop_cycle
    ax.set_xlim(1, 11)
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 2.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_errorbar_every[png] ___________________________

ext = 'png', request = <FixtureRequest for <Function test_errorbar_every[png]>>
args = (), kwargs = {}, file_name = 'test_errorbar_every[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_errorbar_every[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_errorbar_every[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_errorbar_every[pdf] ___________________________

ext = 'pdf', request = <FixtureRequest for <Function test_errorbar_every[pdf]>>
args = (), kwargs = {}, file_name = 'test_errorbar_every[pdf]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_errorbar_every[pdf].pdf')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_errorbar_every[pdf]-expected.pdf')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_errorbar_every[svg] ___________________________

ext = 'svg', request = <FixtureRequest for <Function test_errorbar_every[svg]>>
args = (), kwargs = {}, file_name = 'test_errorbar_every[svg]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_errorbar_every[svg].svg')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_errorbar_every[svg]-expected.svg')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_svg.py:1338: in print_svg
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_errorbar_nan[png] ____________________________

ext = 'png', request = <FixtureRequest for <Function test_errorbar_nan[png]>>
args = (), kwargs = {}, file_name = 'test_errorbar_nan[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_errorbar_nan[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_errorbar_nan[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 4.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_hist_stacked_stepfilled[png] _______________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_hist_stacked_stepfilled[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_hist_stacked_stepfilled[pdf] _______________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_hist_stacked_stepfilled[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_hist_offset[png] _____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_hist_offset[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_hist_offset[pdf] _____________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_hist_offset[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_hist_step[png] ______________________________

    @image_comparison(['hist_step.png'], remove_text=True)
    def test_hist_step():
        # make some data
        d1 = np.linspace(1, 3, 20)
        fig, ax = plt.subplots()
        ax.hist(d1, histtype="step")
>       ax.set_ylim(0, 10)

lib/matplotlib/tests/test_axes.py:4185: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3885: in set_ylim
    return self.yaxis._set_lim(bottom, top, emit=emit, auto=auto)
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 3.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_hist_step_horiz[png] ___________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_hist_step_horiz[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________ test_hist_stacked_weighted[png] ________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_hist_stacked_weighted[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________ test_hist_stacked_weighted[pdf] ________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_hist_stacked_weighted[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________________ test_stem[png] ________________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_stem[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.20915926535897936, right = 6.592344572538566

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_stem_orientation[png] __________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_stem_orientation[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.099909992291837, right = 1.099995713918659

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________ test_hist_stacked_stepfilled_alpha[png] ____________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_hist_stacked_stepfilled_alpha[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________ test_hist_stacked_stepfilled_alpha[pdf] ____________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_hist_stacked_stepfilled_alpha[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_hist_stacked_step[png] __________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_hist_stacked_step[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_hist_stacked_step[pdf] __________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_hist_stacked_step[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_hist_stacked_density[png] ________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_hist_stacked_density[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_hist_stacked_density[pdf] ________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_hist_stacked_density[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_hist_step_bottom[png] __________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_hist_step_bottom[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 3.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_hist_stacked_bar[png] __________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_hist_stacked_bar[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 800.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_hist_stacked_bar[pdf] __________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_hist_stacked_bar[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 800.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_transparent_markers[png] _________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_transparent_markers[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 50.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_transparent_markers[pdf] _________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_transparent_markers[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 50.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_rgba_markers[png] ____________________________

    @image_comparison(['rgba_markers'], remove_text=True)
    def test_rgba_markers():
        fig, axs = plt.subplots(ncols=2)
        rcolors = [(1, 0, 0, 1), (1, 0, 0, 0.5)]
        bcolors = [(0, 0, 1, 1), (0, 0, 1, 0.5)]
        alphas = [None, 0.2]
        kw = dict(ms=100, mew=20)
        for i, alpha in enumerate(alphas):
            for j, rcolor in enumerate(rcolors):
                for k, bcolor in enumerate(bcolors):
                    axs[i].plot(j+1, k+1, 'o', mfc=bcolor, mec=rcolor,
                                alpha=alpha, **kw)
                    axs[i].plot(j+1, k+3, 'x', mec=rcolor, alpha=alpha, **kw)
        for ax in axs:
>           ax.axis([-1, 4, 0, 5])

lib/matplotlib/tests/test_axes.py:4558: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:2125: in axis
    set_ax_lim(ax_min, ax_max, emit=emit, auto=ax_auto)
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_rgba_markers[pdf] ____________________________

    @image_comparison(['rgba_markers'], remove_text=True)
    def test_rgba_markers():
        fig, axs = plt.subplots(ncols=2)
        rcolors = [(1, 0, 0, 1), (1, 0, 0, 0.5)]
        bcolors = [(0, 0, 1, 1), (0, 0, 1, 0.5)]
        alphas = [None, 0.2]
        kw = dict(ms=100, mew=20)
        for i, alpha in enumerate(alphas):
            for j, rcolor in enumerate(rcolors):
                for k, bcolor in enumerate(bcolors):
                    axs[i].plot(j+1, k+1, 'o', mfc=bcolor, mec=rcolor,
                                alpha=alpha, **kw)
                    axs[i].plot(j+1, k+3, 'x', mec=rcolor, alpha=alpha, **kw)
        for ax in axs:
>           ax.axis([-1, 4, 0, 5])

lib/matplotlib/tests/test_axes.py:4558: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:2125: in axis
    set_ax_lim(ax_min, ax_max, emit=emit, auto=ax_auto)
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_mollweide_grid[png] ___________________________

    @image_comparison(['mollweide_grid'], remove_text=True)
    def test_mollweide_grid():
        # test that both horizontal and vertical gridlines appear on the Mollweide
        # projection
        fig = plt.figure()
>       ax = fig.add_subplot(projection='mollweide')

lib/matplotlib/tests/test_axes.py:4566: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:782: in add_subplot
    ax = projection_class(self, *args, **pkw)
lib/matplotlib/projections/geo.py:405: in __init__
    super().__init__(*args, **kwargs)
lib/matplotlib/axes/_base.py:678: in __init__
    self.clear()
lib/matplotlib/projections/geo.py:54: in clear
    Axes.set_xlim(self, -np.pi, np.pi)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MollweideAxes: >, left = -3.141592653589793, right = 3.141592653589793

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'MollweideAxes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_mollweide_grid[pdf] ___________________________

    @image_comparison(['mollweide_grid'], remove_text=True)
    def test_mollweide_grid():
        # test that both horizontal and vertical gridlines appear on the Mollweide
        # projection
        fig = plt.figure()
>       ax = fig.add_subplot(projection='mollweide')

lib/matplotlib/tests/test_axes.py:4566: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:782: in add_subplot
    ax = projection_class(self, *args, **pkw)
lib/matplotlib/projections/geo.py:405: in __init__
    super().__init__(*args, **kwargs)
lib/matplotlib/axes/_base.py:678: in __init__
    self.clear()
lib/matplotlib/projections/geo.py:54: in clear
    Axes.set_xlim(self, -np.pi, np.pi)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MollweideAxes: >, left = -3.141592653589793, right = 3.141592653589793

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'MollweideAxes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ test_mollweide_forward_inverse_closure ____________________

    def test_mollweide_forward_inverse_closure():
        # test that the round-trip Mollweide forward->inverse transformation is an
        # approximate identity
        fig = plt.figure()
>       ax = fig.add_subplot(projection='mollweide')

lib/matplotlib/tests/test_axes.py:4574: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:782: in add_subplot
    ax = projection_class(self, *args, **pkw)
lib/matplotlib/projections/geo.py:405: in __init__
    super().__init__(*args, **kwargs)
lib/matplotlib/axes/_base.py:678: in __init__
    self.clear()
lib/matplotlib/projections/geo.py:54: in clear
    Axes.set_xlim(self, -np.pi, np.pi)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MollweideAxes: >, left = -3.141592653589793, right = 3.141592653589793

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'MollweideAxes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ test_mollweide_inverse_forward_closure ____________________

    def test_mollweide_inverse_forward_closure():
        # test that the round-trip Mollweide inverse->forward transformation is an
        # approximate identity
        fig = plt.figure()
>       ax = fig.add_subplot(projection='mollweide')

lib/matplotlib/tests/test_axes.py:4597: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:782: in add_subplot
    ax = projection_class(self, *args, **pkw)
lib/matplotlib/projections/geo.py:405: in __init__
    super().__init__(*args, **kwargs)
lib/matplotlib/axes/_base.py:678: in __init__
    self.clear()
lib/matplotlib/projections/geo.py:54: in clear
    Axes.set_xlim(self, -np.pi, np.pi)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MollweideAxes: >, left = -3.141592653589793, right = 3.141592653589793

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'MollweideAxes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_alpha[png] ________________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_alpha[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 50.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_alpha[pdf] ________________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_alpha[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 50.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_eventplot[png] ______________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_eventplot[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_eventplot[pdf] ______________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_eventplot[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_eventplot_defaults[png] _________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_eventplot_defaults[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_eventplot_problem_kwargs[png] ______________________

args = ()
kwds = {'extension': 'png', 'recwarn': WarningsRecorder(record=True), 'request': <FixtureRequest for <Function test_eventplot_problem_kwargs[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ test_eventplot_orientation[None-data1] ____________________

data = [[], [0, 1]], orientation = None

    @pytest.mark.parametrize('data', [[[]], [[], [0, 1]], [[0, 1], []]])
    @pytest.mark.parametrize('orientation', [None, 'vertical', 'horizontal'])
    def test_eventplot_orientation(data, orientation):
        """Introduced when fixing issue #6412."""
        opts = {} if orientation is None else {'orientation': orientation}
        fig, ax = plt.subplots(1, 1)
        ax.eventplot(data, **opts)
>       plt.draw()

lib/matplotlib/tests/test_axes.py:4793: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:1103: in draw
    gcf().canvas.draw_idle()
lib/matplotlib/backend_bases.py:1888: in draw_idle
    self.draw(*args, **kwargs)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ test_eventplot_orientation[None-data2] ____________________

data = [[0, 1], []], orientation = None

    @pytest.mark.parametrize('data', [[[]], [[], [0, 1]], [[0, 1], []]])
    @pytest.mark.parametrize('orientation', [None, 'vertical', 'horizontal'])
    def test_eventplot_orientation(data, orientation):
        """Introduced when fixing issue #6412."""
        opts = {} if orientation is None else {'orientation': orientation}
        fig, ax = plt.subplots(1, 1)
        ax.eventplot(data, **opts)
>       plt.draw()

lib/matplotlib/tests/test_axes.py:4793: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:1103: in draw
    gcf().canvas.draw_idle()
lib/matplotlib/backend_bases.py:1888: in draw_idle
    self.draw(*args, **kwargs)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________ test_eventplot_orientation[vertical-data1] __________________

data = [[], [0, 1]], orientation = 'vertical'

    @pytest.mark.parametrize('data', [[[]], [[], [0, 1]], [[0, 1], []]])
    @pytest.mark.parametrize('orientation', [None, 'vertical', 'horizontal'])
    def test_eventplot_orientation(data, orientation):
        """Introduced when fixing issue #6412."""
        opts = {} if orientation is None else {'orientation': orientation}
        fig, ax = plt.subplots(1, 1)
        ax.eventplot(data, **opts)
>       plt.draw()

lib/matplotlib/tests/test_axes.py:4793: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:1103: in draw
    gcf().canvas.draw_idle()
lib/matplotlib/backend_bases.py:1888: in draw_idle
    self.draw(*args, **kwargs)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________ test_eventplot_orientation[vertical-data2] __________________

data = [[0, 1], []], orientation = 'vertical'

    @pytest.mark.parametrize('data', [[[]], [[], [0, 1]], [[0, 1], []]])
    @pytest.mark.parametrize('orientation', [None, 'vertical', 'horizontal'])
    def test_eventplot_orientation(data, orientation):
        """Introduced when fixing issue #6412."""
        opts = {} if orientation is None else {'orientation': orientation}
        fig, ax = plt.subplots(1, 1)
        ax.eventplot(data, **opts)
>       plt.draw()

lib/matplotlib/tests/test_axes.py:4793: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:1103: in draw
    gcf().canvas.draw_idle()
lib/matplotlib/backend_bases.py:1888: in draw_idle
    self.draw(*args, **kwargs)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________ test_eventplot_orientation[horizontal-data1] _________________

data = [[], [0, 1]], orientation = 'horizontal'

    @pytest.mark.parametrize('data', [[[]], [[], [0, 1]], [[0, 1], []]])
    @pytest.mark.parametrize('orientation', [None, 'vertical', 'horizontal'])
    def test_eventplot_orientation(data, orientation):
        """Introduced when fixing issue #6412."""
        opts = {} if orientation is None else {'orientation': orientation}
        fig, ax = plt.subplots(1, 1)
        ax.eventplot(data, **opts)
>       plt.draw()

lib/matplotlib/tests/test_axes.py:4793: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:1103: in draw
    gcf().canvas.draw_idle()
lib/matplotlib/backend_bases.py:1888: in draw_idle
    self.draw(*args, **kwargs)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________ test_eventplot_orientation[horizontal-data2] _________________

data = [[0, 1], []], orientation = 'horizontal'

    @pytest.mark.parametrize('data', [[[]], [[], [0, 1]], [[0, 1], []]])
    @pytest.mark.parametrize('orientation', [None, 'vertical', 'horizontal'])
    def test_eventplot_orientation(data, orientation):
        """Introduced when fixing issue #6412."""
        opts = {} if orientation is None else {'orientation': orientation}
        fig, ax = plt.subplots(1, 1)
        ax.eventplot(data, **opts)
>       plt.draw()

lib/matplotlib/tests/test_axes.py:4793: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:1103: in draw
    gcf().canvas.draw_idle()
lib/matplotlib/backend_bases.py:1888: in draw_idle
    self.draw(*args, **kwargs)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_eventplot_units_list[png] ________________________

ext = 'png'
request = <FixtureRequest for <Function test_eventplot_units_list[png]>>
args = (), kwargs = {}, file_name = 'test_eventplot_units_list[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_eventplot_units_list[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_eventplot_units_list[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 18628.0, right = 18643.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_marker_styles[png] ____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_marker_styles[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 100.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________ test_markers_fillstyle_rcparams[png] _____________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_markers_fillstyle_rcparams[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 6.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_vertex_markers[png] ___________________________

    @image_comparison(['vertex_markers.png'], remove_text=True)
    def test_vertex_markers():
        data = list(range(10))
        marker_as_tuple = ((-1, -1), (1, -1), (1, 1), (-1, 1))
        marker_as_list = [(-1, -1), (1, -1), (1, 1), (-1, 1)]
        fig, ax = plt.subplots()
        ax.plot(data, linestyle='', marker=marker_as_tuple, mfc='k')
        ax.plot(data[::-1], linestyle='', marker=marker_as_list, mfc='b')
>       ax.set_xlim([-1, 10])

lib/matplotlib/tests/test_axes.py:4845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_eb_line_zorder[png] ___________________________

    @image_comparison(['vline_hline_zorder', 'errorbar_zorder'],
                      tol=0 if platform.machine() == 'x86_64' else 0.02)
    def test_eb_line_zorder():
        x = list(range(10))
    
        # First illustrate basic pyplot interface, using defaults where possible.
        fig = plt.figure()
        ax = fig.gca()
        ax.plot(x, lw=10, zorder=5)
>       ax.axhline(1, color='red', lw=10, zorder=1)

lib/matplotlib/tests/test_axes.py:4858: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:774: in axhline
    ymin, ymax = self.get_ybound()
lib/matplotlib/axes/_base.py:3749: in get_ybound
    bottom, top = self.get_ylim()
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_eb_line_zorder[pdf] ___________________________

    @image_comparison(['vline_hline_zorder', 'errorbar_zorder'],
                      tol=0 if platform.machine() == 'x86_64' else 0.02)
    def test_eb_line_zorder():
        x = list(range(10))
    
        # First illustrate basic pyplot interface, using defaults where possible.
        fig = plt.figure()
        ax = fig.gca()
        ax.plot(x, lw=10, zorder=5)
>       ax.axhline(1, color='red', lw=10, zorder=1)

lib/matplotlib/tests/test_axes.py:4858: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:774: in axhline
    ymin, ymax = self.get_ybound()
lib/matplotlib/axes/_base.py:3749: in get_ybound
    bottom, top = self.get_ylim()
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_axline_loglog[png] ____________________________

ext = 'png', request = <FixtureRequest for <Function test_axline_loglog[png]>>
args = (), kwargs = {}, file_name = 'test_axline_loglog[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:4882: in test_axline_loglog
    ax.set(xlim=(0.1, 10), ylim=(1e-3, 1))
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.1, right = 10

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_axline_loglog[pdf] ____________________________

ext = 'pdf', request = <FixtureRequest for <Function test_axline_loglog[pdf]>>
args = (), kwargs = {}, file_name = 'test_axline_loglog[pdf]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:4882: in test_axline_loglog
    ax.set(xlim=(0.1, 10), ylim=(1e-3, 1))
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.1, right = 10

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_axline_loglog[svg] ____________________________

ext = 'svg', request = <FixtureRequest for <Function test_axline_loglog[svg]>>
args = (), kwargs = {}, file_name = 'test_axline_loglog[svg]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:4882: in test_axline_loglog
    ax.set(xlim=(0.1, 10), ylim=(1e-3, 1))
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.1, right = 10

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_axline[png] _______________________________

ext = 'png', request = <FixtureRequest for <Function test_axline[png]>>
args = (), kwargs = {}, file_name = 'test_axline[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:4895: in test_axline
    ax.set(xlim=(-1, 1), ylim=(-1, 1))
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1, right = 1

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_axline[pdf] _______________________________

ext = 'pdf', request = <FixtureRequest for <Function test_axline[pdf]>>
args = (), kwargs = {}, file_name = 'test_axline[pdf]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:4895: in test_axline
    ax.set(xlim=(-1, 1), ylim=(-1, 1))
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1, right = 1

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_axline[svg] _______________________________

ext = 'svg', request = <FixtureRequest for <Function test_axline[svg]>>
args = (), kwargs = {}, file_name = 'test_axline[svg]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:4895: in test_axline
    ax.set(xlim=(-1, 1), ylim=(-1, 1))
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1, right = 1

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_axline_transaxes[png] __________________________

ext = 'png'
request = <FixtureRequest for <Function test_axline_transaxes[png]>>, args = ()
kwargs = {}, file_name = 'test_axline_transaxes[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:4918: in test_axline_transaxes
    ax.set(xlim=(-1, 1), ylim=(-1, 1))
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1, right = 1

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_axline_transaxes[pdf] __________________________

ext = 'pdf'
request = <FixtureRequest for <Function test_axline_transaxes[pdf]>>, args = ()
kwargs = {}, file_name = 'test_axline_transaxes[pdf]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:4918: in test_axline_transaxes
    ax.set(xlim=(-1, 1), ylim=(-1, 1))
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1, right = 1

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_axline_transaxes[svg] __________________________

ext = 'svg'
request = <FixtureRequest for <Function test_axline_transaxes[svg]>>, args = ()
kwargs = {}, file_name = 'test_axline_transaxes[svg]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:4918: in test_axline_transaxes
    ax.set(xlim=(-1, 1), ylim=(-1, 1))
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1, right = 1

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_axline_transaxes_panzoom[png] ______________________

ext = 'png'
request = <FixtureRequest for <Function test_axline_transaxes_panzoom[png]>>
args = (), kwargs = {}, file_name = 'test_axline_transaxes_panzoom[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:4937: in test_axline_transaxes_panzoom
    ax.set(xlim=(-1, 1), ylim=(-1, 1))
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1, right = 1

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_axline_transaxes_panzoom[pdf] ______________________

ext = 'pdf'
request = <FixtureRequest for <Function test_axline_transaxes_panzoom[pdf]>>
args = (), kwargs = {}, file_name = 'test_axline_transaxes_panzoom[pdf]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:4937: in test_axline_transaxes_panzoom
    ax.set(xlim=(-1, 1), ylim=(-1, 1))
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1, right = 1

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_axline_transaxes_panzoom[svg] ______________________

ext = 'svg'
request = <FixtureRequest for <Function test_axline_transaxes_panzoom[svg]>>
args = (), kwargs = {}, file_name = 'test_axline_transaxes_panzoom[svg]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:4937: in test_axline_transaxes_panzoom
    ax.set(xlim=(-1, 1), ylim=(-1, 1))
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1, right = 1

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_axline_args _______________________________

    def test_axline_args():
        """Exactly one of *xy2* and *slope* must be specified."""
        fig, ax = plt.subplots()
        with pytest.raises(TypeError):
            ax.axline((0, 0))  # missing second parameter
        with pytest.raises(TypeError):
            ax.axline((0, 0), (1, 1), slope=1)  # redundant parameters
>       ax.set_xscale('log')

lib/matplotlib/tests/test_axes.py:4959: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_vlines[png] _______________________________

    @image_comparison(['vlines_basic', 'vlines_with_nan', 'vlines_masked'],
                      extensions=['png'])
    def test_vlines():
        # normal
        x1 = [2, 3, 4, 5, 7]
        y1 = [2, -6, 3, 8, 2]
        fig1, ax1 = plt.subplots()
        ax1.vlines(x1, 0, y1, colors='g', linewidth=5)
    
        # GH #7406
        x2 = [2, 3, 4, 5, 6, 7]
        y2 = [2, -6, 3, 8, np.nan, 2]
        fig2, (ax2, ax3, ax4) = plt.subplots(nrows=3, figsize=(4, 8))
        ax2.vlines(x2, 0, y2, colors='g', linewidth=5)
    
        x3 = [2, 3, 4, 5, 6, 7]
        y3 = [np.nan, 2, -6, 3, 8, 2]
        ax3.vlines(x3, 0, y3, colors='r', linewidth=3, linestyle='--')
    
        x4 = [2, 3, 4, 5, 6, 7]
        y4 = [np.nan, 2, -6, 3, 8, np.nan]
        ax4.vlines(x4, 0, y4, colors='k', linewidth=2)
    
        # tweak the x-axis so we can see the lines better
        for ax in [ax1, ax2, ax3, ax4]:
>           ax.set_xlim(0, 10)

lib/matplotlib/tests/test_axes.py:4997: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 2.0, right = 7.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_hlines[png] _______________________________

    @image_comparison(['hlines_basic', 'hlines_with_nan', 'hlines_masked'],
                      extensions=['png'])
    def test_hlines():
        # normal
        y1 = [2, 3, 4, 5, 7]
        x1 = [2, -6, 3, 8, 2]
        fig1, ax1 = plt.subplots()
        ax1.hlines(y1, 0, x1, colors='g', linewidth=5)
    
        # GH #7406
        y2 = [2, 3, 4, 5, 6, 7]
        x2 = [2, -6, 3, 8, np.nan, 2]
        fig2, (ax2, ax3, ax4) = plt.subplots(nrows=3, figsize=(4, 8))
        ax2.hlines(y2, 0, x2, colors='g', linewidth=5)
    
        y3 = [2, 3, 4, 5, 6, 7]
        x3 = [np.nan, 2, -6, 3, 8, 2]
        ax3.hlines(y3, 0, x3, colors='r', linewidth=3, linestyle='--')
    
        y4 = [2, 3, 4, 5, 6, 7]
        x4 = [np.nan, 2, -6, 3, 8, np.nan]
        ax4.hlines(y4, 0, x4, colors='k', linewidth=2)
    
        # tweak the y-axis so we can see the lines better
        for ax in [ax1, ax2, ax3, ax4]:
>           ax.set_ylim(0, 10)

lib/matplotlib/tests/test_axes.py:5044: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3885: in set_ylim
    return self.yaxis._set_lim(bottom, top, emit=emit, auto=auto)
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -6.0, right = 8.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_lines_with_colors[png-data0] _______________________

ext = 'png'
request = <FixtureRequest for <Function test_lines_with_colors[png-data0]>>
args = (), kwargs = {'data': [1, 2, 3, nan, 5]}
file_name = 'test_lines_with_colors[png-data0]'
fig_test = <Figure size 640x480 with 2 Axes>
fig_ref = <Figure size 640x480 with 2 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_lines_with_colors[png-data0].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_lines_with_colors[png-data0]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 5.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_lines_with_colors[png-data1] _______________________

ext = 'png'
request = <FixtureRequest for <Function test_lines_with_colors[png-data1]>>
args = ()
kwargs = {'data': masked_array(data=[1, 2, 3, --, 5],
             mask=[False, False, False,  True, False],
       fill_value=4)}
file_name = 'test_lines_with_colors[png-data1]'
fig_test = <Figure size 640x480 with 2 Axes>
fig_ref = <Figure size 640x480 with 2 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_lines_with_colors[png-data1].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_lines_with_colors[png-data1]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 5.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________ test_vlines_hlines_blended_transform[png] ___________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_vlines_hlines_blended_transform[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 4.755000000000001, right = 10.144999999999982

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_step_linestyle[png] ___________________________

    @image_comparison(['step_linestyle', 'step_linestyle'], remove_text=True,
                      tol=0.2)
    def test_step_linestyle():
        # Tolerance caused by reordering of floating-point operations
        # Remove when regenerating the images
        x = y = np.arange(10)
    
        # First illustrate basic pyplot interface, using defaults where possible.
        fig, ax_lst = plt.subplots(2, 2)
        ax_lst = ax_lst.flatten()
    
        ln_styles = ['-', '--', '-.', ':']
    
        for ax, ls in zip(ax_lst, ln_styles):
            ax.step(x, y, lw=5, linestyle=ls, where='pre')
            ax.step(x, y + 1, lw=5, linestyle=ls, where='mid')
            ax.step(x, y + 2, lw=5, linestyle=ls, where='post')
>           ax.set_xlim([-1, 5])

lib/matplotlib/tests/test_axes.py:5115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_step_linestyle[pdf] ___________________________

    @image_comparison(['step_linestyle', 'step_linestyle'], remove_text=True,
                      tol=0.2)
    def test_step_linestyle():
        # Tolerance caused by reordering of floating-point operations
        # Remove when regenerating the images
        x = y = np.arange(10)
    
        # First illustrate basic pyplot interface, using defaults where possible.
        fig, ax_lst = plt.subplots(2, 2)
        ax_lst = ax_lst.flatten()
    
        ln_styles = ['-', '--', '-.', ':']
    
        for ax, ls in zip(ax_lst, ln_styles):
            ax.step(x, y, lw=5, linestyle=ls, where='pre')
            ax.step(x, y + 1, lw=5, linestyle=ls, where='mid')
            ax.step(x, y + 2, lw=5, linestyle=ls, where='post')
>           ax.set_xlim([-1, 5])

lib/matplotlib/tests/test_axes.py:5115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_mixed_collection[png] __________________________

    @image_comparison(['mixed_collection'], remove_text=True)
    def test_mixed_collection():
        # First illustrate basic pyplot interface, using defaults where possible.
        fig, ax = plt.subplots()
    
        c = mpatches.Circle((8, 8), radius=4, facecolor='none', edgecolor='green')
    
        # PDF can optimize this one
        p1 = mpl.collections.PatchCollection([c], match_original=True)
        p1.set_offsets([[0, 0], [24, 24]])
        p1.set_linewidths([1, 5])
    
        # PDF can't optimize this one, because the alpha of the edge changes
        p2 = mpl.collections.PatchCollection([c], match_original=True)
        p2.set_offsets([[48, 0], [-32, -16]])
        p2.set_linewidths([1, 5])
        p2.set_edgecolors([[0, 0, 0.1, 1.0], [0, 0, 0.1, 0.5]])
    
        ax.patch.set_color('0.5')
        ax.add_collection(p1)
        ax.add_collection(p2)
    
>       ax.set_xlim(0, 16)

lib/matplotlib/tests/test_axes.py:5153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0, right = 16

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_mixed_collection[pdf] __________________________

    @image_comparison(['mixed_collection'], remove_text=True)
    def test_mixed_collection():
        # First illustrate basic pyplot interface, using defaults where possible.
        fig, ax = plt.subplots()
    
        c = mpatches.Circle((8, 8), radius=4, facecolor='none', edgecolor='green')
    
        # PDF can optimize this one
        p1 = mpl.collections.PatchCollection([c], match_original=True)
        p1.set_offsets([[0, 0], [24, 24]])
        p1.set_linewidths([1, 5])
    
        # PDF can't optimize this one, because the alpha of the edge changes
        p2 = mpl.collections.PatchCollection([c], match_original=True)
        p2.set_offsets([[48, 0], [-32, -16]])
        p2.set_linewidths([1, 5])
        p2.set_edgecolors([[0, 0, 0.1, 1.0], [0, 0, 0.1, 0.5]])
    
        ax.patch.set_color('0.5')
        ax.add_collection(p1)
        ax.add_collection(p2)
    
>       ax.set_xlim(0, 16)

lib/matplotlib/tests/test_axes.py:5153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0, right = 16

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_specgram[png] ______________________________

    @image_comparison(
        ["specgram_freqs.png", "specgram_freqs_linear.png",
         "specgram_noise.png", "specgram_noise_linear.png"],
        remove_text=True, tol=0.07, style="default")
    def test_specgram():
        """Test axes.specgram in default (psd) mode."""
    
        # use former defaults to match existing baseline image
        matplotlib.rcParams['image.interpolation'] = 'nearest'
    
        n = 1000
        Fs = 10.
    
        fstims = [[Fs/4, Fs/5, Fs/11], [Fs/4.7, Fs/5.6, Fs/11.9]]
        NFFT_freqs = int(10 * Fs / np.min(fstims))
        x = np.arange(0, n, 1/Fs)
        y_freqs = np.concatenate(
            np.sin(2 * np.pi * np.multiply.outer(fstims, x)).sum(axis=1))
    
        NFFT_noise = int(10 * Fs / 11)
        np.random.seed(0)
        y_noise = np.concatenate([np.random.standard_normal(n), np.random.rand(n)])
    
        all_sides = ["default", "onesided", "twosided"]
        for y, NFFT in [(y_freqs, NFFT_freqs), (y_noise, NFFT_noise)]:
            noverlap = NFFT // 2
            pad_to = int(2 ** np.ceil(np.log2(NFFT)))
            for ax, sides in zip(plt.figure().subplots(3), all_sides):
>               ax.specgram(y, NFFT=NFFT, Fs=Fs, noverlap=noverlap,
                            pad_to=pad_to, sides=sides)

lib/matplotlib/tests/test_axes.py:5191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:7944: in specgram
    im = self.imshow(Z, cmap, extent=extent, vmin=vmin, vmax=vmax,
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:5747: in imshow
    im.set_extent(im.get_extent())
lib/matplotlib/image.py:991: in set_extent
    self.axes.set_xlim((xmin, xmax), auto=None)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 2.95, right = 1994.95

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_specgram_magnitude[png] _________________________

    @image_comparison(
        ["specgram_magnitude_freqs.png", "specgram_magnitude_freqs_linear.png",
         "specgram_magnitude_noise.png", "specgram_magnitude_noise_linear.png"],
        remove_text=True, tol=0.07, style="default")
    def test_specgram_magnitude():
        """Test axes.specgram in magnitude mode."""
    
        # use former defaults to match existing baseline image
        matplotlib.rcParams['image.interpolation'] = 'nearest'
    
        n = 1000
        Fs = 10.
    
        fstims = [[Fs/4, Fs/5, Fs/11], [Fs/4.7, Fs/5.6, Fs/11.9]]
        NFFT_freqs = int(100 * Fs / np.min(fstims))
        x = np.arange(0, n, 1/Fs)
        y = np.sin(2 * np.pi * np.multiply.outer(fstims, x)).sum(axis=1)
        y[:, -1] = 1
        y_freqs = np.hstack(y)
    
        NFFT_noise = int(10 * Fs / 11)
        np.random.seed(0)
        y_noise = np.concatenate([np.random.standard_normal(n), np.random.rand(n)])
    
        all_sides = ["default", "onesided", "twosided"]
        for y, NFFT in [(y_freqs, NFFT_freqs), (y_noise, NFFT_noise)]:
            noverlap = NFFT // 2
            pad_to = int(2 ** np.ceil(np.log2(NFFT)))
            for ax, sides in zip(plt.figure().subplots(3), all_sides):
>               ax.specgram(y, NFFT=NFFT, Fs=Fs, noverlap=noverlap,
                            pad_to=pad_to, sides=sides, mode="magnitude")

lib/matplotlib/tests/test_axes.py:5228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:7944: in specgram
    im = self.imshow(Z, cmap, extent=extent, vmin=vmin, vmax=vmax,
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:5747: in imshow
    im.set_extent(im.get_extent())
lib/matplotlib/image.py:991: in set_extent
    self.axes.set_xlim((xmin, xmax), auto=None)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 29.75, right = 1933.75

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_specgram_angle[png] ___________________________

    @image_comparison(
        ["specgram_angle_freqs.png", "specgram_phase_freqs.png",
         "specgram_angle_noise.png", "specgram_phase_noise.png"],
        remove_text=True, tol=0.07, style="default")
    def test_specgram_angle():
        """Test axes.specgram in angle and phase modes."""
    
        # use former defaults to match existing baseline image
        matplotlib.rcParams['image.interpolation'] = 'nearest'
    
        n = 1000
        Fs = 10.
    
        fstims = [[Fs/4, Fs/5, Fs/11], [Fs/4.7, Fs/5.6, Fs/11.9]]
        NFFT_freqs = int(10 * Fs / np.min(fstims))
        x = np.arange(0, n, 1/Fs)
        y = np.sin(2 * np.pi * np.multiply.outer(fstims, x)).sum(axis=1)
        y[:, -1] = 1
        y_freqs = np.hstack(y)
    
        NFFT_noise = int(10 * Fs / 11)
        np.random.seed(0)
        y_noise = np.concatenate([np.random.standard_normal(n), np.random.rand(n)])
    
        all_sides = ["default", "onesided", "twosided"]
        for y, NFFT in [(y_freqs, NFFT_freqs), (y_noise, NFFT_noise)]:
            noverlap = NFFT // 2
            pad_to = int(2 ** np.ceil(np.log2(NFFT)))
            for mode in ["angle", "phase"]:
                for ax, sides in zip(plt.figure().subplots(3), all_sides):
>                   ax.specgram(y, NFFT=NFFT, Fs=Fs, noverlap=noverlap,
                                pad_to=pad_to, sides=sides, mode=mode)

lib/matplotlib/tests/test_axes.py:5266: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:7944: in specgram
    im = self.imshow(Z, cmap, extent=extent, vmin=vmin, vmax=vmax,
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:5747: in imshow
    im.set_extent(im.get_extent())
lib/matplotlib/image.py:991: in set_extent
    self.axes.set_xlim((xmin, xmax), auto=None)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 2.95, right = 1994.95

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_specgram_fs_none _____________________________

    def test_specgram_fs_none():
        """Test axes.specgram when Fs is None, should not throw error."""
>       spec, freqs, t, im = plt.specgram(np.ones(300), Fs=None, scale='linear')

lib/matplotlib/tests/test_axes.py:5276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:3681: in specgram
    __ret = gca().specgram(
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:7944: in specgram
    im = self.imshow(Z, cmap, extent=extent, vmin=vmin, vmax=vmax,
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:5747: in imshow
    im.set_extent(im.get_extent())
lib/matplotlib/image.py:991: in set_extent
    self.axes.set_xlim((xmin, xmax), auto=None)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 32.0, right = 96.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_specgram_origin_rcparam[png] _______________________

ext = 'png'
request = <FixtureRequest for <Function test_specgram_origin_rcparam[png]>>
args = (), kwargs = {}, file_name = 'test_specgram_origin_rcparam[png]'
fig_test = <Figure size 640x480 with 0 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:5290: in test_specgram_origin_rcparam
    fig_ref.subplots().specgram(signal)
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:7944: in specgram
    im = self.imshow(Z, cmap, extent=extent, vmin=vmin, vmax=vmax,
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:5747: in imshow
    im.set_extent(im.get_extent())
lib/matplotlib/image.py:991: in set_extent
    self.axes.set_xlim((xmin, xmax), auto=None)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 32.0, right = 160.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_psd_csd[png] _______________________________

    @image_comparison(
        ["psd_freqs.png", "csd_freqs.png", "psd_noise.png", "csd_noise.png"],
        remove_text=True, tol=0.002)
    def test_psd_csd():
        n = 10000
        Fs = 100.
    
        fstims = [[Fs/4, Fs/5, Fs/11], [Fs/4.7, Fs/5.6, Fs/11.9]]
        NFFT_freqs = int(1000 * Fs / np.min(fstims))
        x = np.arange(0, n, 1/Fs)
        ys_freqs = np.sin(2 * np.pi * np.multiply.outer(fstims, x)).sum(axis=1)
    
        NFFT_noise = int(1000 * Fs / 11)
        np.random.seed(0)
        ys_noise = [np.random.standard_normal(n), np.random.rand(n)]
    
        all_kwargs = [{"sides": "default"},
                      {"sides": "onesided", "return_line": False},
                      {"sides": "twosided", "return_line": True}]
        for ys, NFFT in [(ys_freqs, NFFT_freqs), (ys_noise, NFFT_noise)]:
            noverlap = NFFT // 2
            pad_to = int(2 ** np.ceil(np.log2(NFFT)))
            for ax, kwargs in zip(plt.figure().subplots(3), all_kwargs):
>               ret = ax.psd(np.concatenate(ys), NFFT=NFFT, Fs=Fs,
                             noverlap=noverlap, pad_to=pad_to, **kwargs)

lib/matplotlib/tests/test_axes.py:5331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:7394: in psd
    vmin, vmax = self.get_ybound()
lib/matplotlib/axes/_base.py:3749: in get_ybound
    bottom, top = self.get_ylim()
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: xlabel='Frequency', ylabel='Power Spectral Density (dB/Hz)'>
left = 0.0, right = 50.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_spectrum[png] ______________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_spectrum[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 50.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_psd_csd_edge_cases ____________________________

    def test_psd_csd_edge_cases():
        # Inverted yaxis or fully zero inputs used to throw exceptions.
        axs = plt.figure().subplots(2)
        for ax in axs:
            ax.yaxis.set(inverted=True)
        with np.errstate(divide="ignore"):
>           axs[0].psd(np.zeros(5))

lib/matplotlib/tests/test_axes.py:5390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:7394: in psd
    vmin, vmax = self.get_ybound()
lib/matplotlib/axes/_base.py:3749: in get_ybound
    bottom, top = self.get_ylim()
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: xlabel='Frequency', ylabel='Power Spectral Density (dB/Hz)'>
left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_twin_spines[png] _____________________________

    @image_comparison(['twin_spines.png'], remove_text=True)
    def test_twin_spines():
    
        def make_patch_spines_invisible(ax):
            ax.set_frame_on(True)
            ax.patch.set_visible(False)
            ax.spines[:].set_visible(False)
    
        fig = plt.figure(figsize=(4, 3))
        fig.subplots_adjust(right=0.75)
    
        host = fig.add_subplot()
        par1 = host.twinx()
        par2 = host.twinx()
    
        # Offset the right spine of par2.  The ticks and label have already been
        # placed on the right by twinx above.
        par2.spines.right.set_position(("axes", 1.2))
        # Having been created by twinx, par2 has its frame off, so the line of
        # its detached spine is invisible.  First, activate the frame but make
        # the patch and spines invisible.
        make_patch_spines_invisible(par2)
        # Second, show the right spine.
        par2.spines.right.set_visible(True)
    
        p1, = host.plot([0, 1, 2], [0, 1, 2], "b-")
        p2, = par1.plot([0, 1, 2], [0, 3, 2], "r-")
        p3, = par2.plot([0, 1, 2], [50, 30, 15], "g-")
    
>       host.set_xlim(0, 2)

lib/matplotlib/tests/test_axes.py:5438: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_twin_spines_on_top[png] _________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_twin_spines_on_top[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1000.0, right = 1250.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_vline_limit _______________________________

    def test_vline_limit():
        fig = plt.figure()
        ax = fig.gca()
        ax.axvline(0.5)
        ax.plot([-0.1, 0, 0.2, 0.1])
>       assert_allclose(ax.get_ylim(), (-.1, .2))

lib/matplotlib/tests/test_axes.py:5554: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 3.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_empty_shared_subplots __________________________

    def test_empty_shared_subplots():
        # empty plots with shared axes inherit limits from populated plots
        fig, axs = plt.subplots(nrows=1, ncols=2, sharex=True, sharey=True)
        axs[0].plot([1, 2, 3], [2, 4, 6])
>       x0, x1 = axs[1].get_xlim()

lib/matplotlib/tests/test_axes.py:5577: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 3.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_shared_with_aspect_2 ___________________________

    def test_shared_with_aspect_2():
        # Share 2 axes only with 'box':
        fig, axs = plt.subplots(nrows=2, sharex=True, sharey=True)
        axs[0].set_aspect(2, share=True)
        axs[0].plot([1, 2], [3, 4])
        axs[1].plot([3, 4], [1, 2])
>       plt.draw()  # Trigger apply_aspect().

lib/matplotlib/tests/test_axes.py:5604: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:1103: in draw
    gcf().canvas.draw_idle()
lib/matplotlib/backend_bases.py:1888: in draw_idle
    self.draw(*args, **kwargs)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3145: in draw
    artists = self._get_draw_artists(renderer)
lib/matplotlib/figure.py:231: in _get_draw_artists
    ax.apply_aspect(locator(ax, renderer) if locator else None)
lib/matplotlib/axes/_base.py:1917: in apply_aspect
    box_aspect = aspect * self.get_data_ratio()
lib/matplotlib/axes/_base.py:1863: in get_data_ratio
    txmin, txmax = self.xaxis.get_transform().transform(self.get_xbound())
lib/matplotlib/axes/_base.py:3493: in get_xbound
    left, right = self.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 4.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_shared_with_aspect_3 ___________________________

    def test_shared_with_aspect_3():
        # Different aspect ratios:
        for adjustable in ['box', 'datalim']:
            fig, axs = plt.subplots(nrows=2, sharey=True)
            axs[0].set_aspect(2, adjustable=adjustable)
            axs[1].set_aspect(0.5, adjustable=adjustable)
            axs[0].plot([1, 2], [3, 4])
            axs[1].plot([3, 4], [1, 2])
>           plt.draw()  # Trigger apply_aspect().

lib/matplotlib/tests/test_axes.py:5617: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:1103: in draw
    gcf().canvas.draw_idle()
lib/matplotlib/backend_bases.py:1888: in draw_idle
    self.draw(*args, **kwargs)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3145: in draw
    artists = self._get_draw_artists(renderer)
lib/matplotlib/figure.py:231: in _get_draw_artists
    ax.apply_aspect(locator(ax, renderer) if locator else None)
lib/matplotlib/axes/_base.py:1917: in apply_aspect
    box_aspect = aspect * self.get_data_ratio()
lib/matplotlib/axes/_base.py:1863: in get_data_ratio
    txmin, txmax = self.xaxis.get_transform().transform(self.get_xbound())
lib/matplotlib/axes/_base.py:3493: in get_xbound
    left, right = self.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_shared_aspect_error ___________________________

    def test_shared_aspect_error():
        fig, axes = plt.subplots(1, 2, sharex=True, sharey=True)
>       axes[0].axis("equal")

lib/matplotlib/tests/test_axes.py:5631: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:2077: in axis
    self.autoscale_view(tight=False)
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_ test_axis_errors[TypeError-args3-kwargs3-axis\\(\\) got an unexpected keyword argument 'foo'] _

err = <class 'TypeError'>, args = (), kwargs = {'foo': None}
match = "axis\\(\\) got an unexpected keyword argument 'foo'"

    @pytest.mark.parametrize('err, args, kwargs, match',
                             ((TypeError, (1, 2), {},
                               r"axis\(\) takes from 0 to 1 positional arguments "
                               "but 2 were given"),
                              (ValueError, ('foo', ), {},
                               "Unrecognized string 'foo' to axis; try 'on' or "
                               "'off'"),
                              (TypeError, ([1, 2], ), {},
                               "The first argument to axis*"),
                              (TypeError, tuple(), {'foo': None},
                               r"axis\(\) got an unexpected keyword argument "
                               "'foo'"),
                              ))
    def test_axis_errors(err, args, kwargs, match):
        with pytest.raises(err, match=match):
>           plt.axis(*args, **kwargs)

lib/matplotlib/tests/test_axes.py:5651: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:2637: in axis
    return gca().axis(arg, emit=emit, **kwargs)
lib/matplotlib/axes/_base.py:2125: in axis
    set_ax_lim(ax_min, ax_max, emit=emit, auto=ax_auto)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = None, right = None

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_relim_visible_only ____________________________

    def test_relim_visible_only():
        x1 = (0., 10.)
        y1 = (0., 10.)
        x2 = (-10., 20.)
        y2 = (-10., 30.)
    
        fig = matplotlib.figure.Figure()
        ax = fig.add_subplot()
        ax.plot(x1, y1)
>       assert ax.get_xlim() == x1

lib/matplotlib/tests/test_axes.py:5700: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_pie_default[png] _____________________________

    @image_comparison(['pie_default.png'])
    def test_pie_default():
        # The slices will be ordered and plotted counter-clockwise.
        labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
        sizes = [15, 30, 45, 10]
        colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
        explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')
        fig1, ax1 = plt.subplots(figsize=(8, 6))
>       ax1.pie(sizes, explode=explode, labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=90)

lib/matplotlib/tests/test_axes.py:5734: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3329: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.25, right = 1.25

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_pie_linewidth_0[png] ___________________________

    @image_comparison(['pie_linewidth_0', 'pie_linewidth_0', 'pie_linewidth_0'],
                      extensions=['png'], style='mpl20')
    def test_pie_linewidth_0():
        # The slices will be ordered and plotted counter-clockwise.
        labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
        sizes = [15, 30, 45, 10]
        colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
        explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')
    
>       plt.pie(sizes, explode=explode, labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=90,
                wedgeprops={'linewidth': 0})

lib/matplotlib/tests/test_axes.py:5747: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:3482: in pie
    return gca().pie(
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3329: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.25, right = 1.25

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_pie_center_radius[png] __________________________

    @image_comparison(['pie_center_radius.png'], style='mpl20')
    def test_pie_center_radius():
        # The slices will be ordered and plotted counter-clockwise.
        labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
        sizes = [15, 30, 45, 10]
        colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
        explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')
    
>       plt.pie(sizes, explode=explode, labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=90,
                wedgeprops={'linewidth': 0}, center=(1, 2), radius=1.5)

lib/matplotlib/tests/test_axes.py:5779: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:3482: in pie
    return gca().pie(
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3329: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.25, right = 2.25

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_pie_linewidth_2[png] ___________________________

    @image_comparison(['pie_linewidth_2.png'], style='mpl20')
    def test_pie_linewidth_2():
        # The slices will be ordered and plotted counter-clockwise.
        labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
        sizes = [15, 30, 45, 10]
        colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
        explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')
    
>       plt.pie(sizes, explode=explode, labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=90,
                wedgeprops={'linewidth': 2})

lib/matplotlib/tests/test_axes.py:5799: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:3482: in pie
    return gca().pie(
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3329: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.25, right = 1.25

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_pie_ccw_true[png] ____________________________

    @image_comparison(['pie_ccw_true.png'], style='mpl20')
    def test_pie_ccw_true():
        # The slices will be ordered and plotted counter-clockwise.
        labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
        sizes = [15, 30, 45, 10]
        colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
        explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')
    
>       plt.pie(sizes, explode=explode, labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=90,
                counterclock=True)

lib/matplotlib/tests/test_axes.py:5814: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:3482: in pie
    return gca().pie(
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3329: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.25, right = 1.25

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_pie_frame_grid[png] ___________________________

    @image_comparison(['pie_frame_grid.png'], style='mpl20')
    def test_pie_frame_grid():
        # The slices will be ordered and plotted counter-clockwise.
        labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
        sizes = [15, 30, 45, 10]
        colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
        # only "explode" the 2nd slice (i.e. 'Hogs')
        explode = (0, 0.1, 0, 0)
    
        plt.pie(sizes, explode=explode, labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=90,
                wedgeprops={'linewidth': 0},
                frame=True, center=(2, 2))
    
        plt.pie(sizes[::-1], explode=explode, labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=90,
                wedgeprops={'linewidth': 0},
                frame=True, center=(5, 2))
    
        plt.pie(sizes, explode=explode[::-1], labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=90,
                wedgeprops={'linewidth': 0},
                frame=True, center=(3, 5))
        # Set aspect ratio to be equal so that pie is drawn as a circle.
>       plt.axis('equal')

lib/matplotlib/tests/test_axes.py:5845: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:2637: in axis
    return gca().axis(arg, emit=emit, **kwargs)
lib/matplotlib/axes/_base.py:2077: in axis
    self.autoscale_view(tight=False)
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3521: in set_xbound
    old_lower, old_upper = self.get_xbound()
lib/matplotlib/axes/_base.py:3493: in get_xbound
    left, right = self.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.6501401064631837, right = 6.254754244221458

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________ test_pie_rotatelabels_true[png] ________________________

    @image_comparison(['pie_rotatelabels_true.png'], style='mpl20')
    def test_pie_rotatelabels_true():
        # The slices will be ordered and plotted counter-clockwise.
        labels = 'Hogwarts', 'Frogs', 'Dogs', 'Logs'
        sizes = [15, 30, 45, 10]
        colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
        explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')
    
>       plt.pie(sizes, explode=explode, labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=90,
                rotatelabels=True)

lib/matplotlib/tests/test_axes.py:5856: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:3482: in pie
    return gca().pie(
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3329: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.25, right = 1.25

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________ test_pie_nolabel_but_legend[png] _______________________

    @image_comparison(['pie_no_label.png'])
    def test_pie_nolabel_but_legend():
        labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
        sizes = [15, 30, 45, 10]
        colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
        explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice (i.e. 'Hogs')
>       plt.pie(sizes, explode=explode, labels=labels, colors=colors,
                autopct='%1.1f%%', shadow=True, startangle=90, labeldistance=None,
                rotatelabels=True)

lib/matplotlib/tests/test_axes.py:5869: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:3482: in pie
    return gca().pie(
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3329: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.25, right = 1.25

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_pie_shadow[png] _____________________________

    @image_comparison(['pie_shadow.png'], style='mpl20')
    def test_pie_shadow():
        # Also acts as a test for the shade argument of Shadow
        sizes = [15, 30, 45, 10]
        colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral']
        explode = (0, 0.1, 0, 0)  # only "explode" the 2nd slice
        _, axes = plt.subplots(2, 2)
>       axes[0][0].pie(sizes, explode=explode, colors=colors,
                       shadow=True, startangle=90,
                       wedgeprops={'linewidth': 0})

lib/matplotlib/tests/test_axes.py:5884: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3329: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.25, right = 1.25

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_pie_textprops ______________________________

    def test_pie_textprops():
        data = [23, 34, 45]
        labels = ["Long name 1", "Long name 2", "Long name 3"]
    
        textprops = dict(horizontalalignment="center",
                         verticalalignment="top",
                         rotation=90,
                         rotation_mode="anchor",
                         size=12, color="red")
    
>       _, texts, autopct = plt.gca().pie(data, labels=labels, autopct='%.2f',
                                          textprops=textprops)

lib/matplotlib/tests/test_axes.py:5911: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3329: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.25, right = 1.25

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_normalize_kwarg_pie ___________________________

    def test_normalize_kwarg_pie():
        fig, ax = plt.subplots()
        x = [0.3, 0.3, 0.1]
>       t1 = ax.pie(x=x, normalize=True)

lib/matplotlib/tests/test_axes.py:5933: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3329: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.25, right = 1.25

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_pie_hatch_single[png] __________________________

ext = 'png'
request = <FixtureRequest for <Function test_pie_hatch_single[png]>>, args = ()
kwargs = {}, file_name = 'test_pie_hatch_single[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:5943: in test_pie_hatch_single
    fig_test.subplots().pie(x, hatch=hatch)
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3329: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.25, right = 1.25

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_pie_hatch_single[pdf] __________________________

ext = 'pdf'
request = <FixtureRequest for <Function test_pie_hatch_single[pdf]>>, args = ()
kwargs = {}, file_name = 'test_pie_hatch_single[pdf]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:5943: in test_pie_hatch_single
    fig_test.subplots().pie(x, hatch=hatch)
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3329: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.25, right = 1.25

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_pie_hatch_single[svg] __________________________

ext = 'svg'
request = <FixtureRequest for <Function test_pie_hatch_single[svg]>>, args = ()
kwargs = {}, file_name = 'test_pie_hatch_single[svg]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:5943: in test_pie_hatch_single
    fig_test.subplots().pie(x, hatch=hatch)
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3329: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.25, right = 1.25

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_pie_hatch_multi[png] ___________________________

ext = 'png', request = <FixtureRequest for <Function test_pie_hatch_multi[png]>>
args = (), kwargs = {}, file_name = 'test_pie_hatch_multi[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:5952: in test_pie_hatch_multi
    fig_test.subplots().pie(x, hatch=hatch)
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3329: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.25, right = 1.25

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_pie_hatch_multi[pdf] ___________________________

ext = 'pdf', request = <FixtureRequest for <Function test_pie_hatch_multi[pdf]>>
args = (), kwargs = {}, file_name = 'test_pie_hatch_multi[pdf]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:5952: in test_pie_hatch_multi
    fig_test.subplots().pie(x, hatch=hatch)
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3329: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.25, right = 1.25

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_pie_hatch_multi[svg] ___________________________

ext = 'svg', request = <FixtureRequest for <Function test_pie_hatch_multi[svg]>>
args = (), kwargs = {}, file_name = 'test_pie_hatch_multi[svg]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:5952: in test_pie_hatch_multi
    fig_test.subplots().pie(x, hatch=hatch)
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:3329: in pie
    self.set(frame_on=False, xticks=[], yticks=[],
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.25, right = 1.25

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_set_get_ticklabels[png] _________________________

    @image_comparison(['set_get_ticklabels.png'])
    def test_set_get_ticklabels():
        # test issue 2246
        fig, ax = plt.subplots(2)
        ha = ['normal', 'set_x/yticklabels']
    
        ax[0].plot(np.arange(10))
        ax[0].set_title(ha[0])
    
        ax[1].plot(np.arange(10))
        ax[1].set_title(ha[1])
    
        # set ticklabel to 1 plot in normal way
>       ax[0].set_xticks(range(10))

lib/matplotlib/tests/test_axes.py:5970: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:2074: in set_ticks
    result = self._set_tick_locations(ticks, minor=minor)
lib/matplotlib/axis.py:2023: in _set_tick_locations
    axis.set_view_interval(min(ticks), max(ticks))
lib/matplotlib/axis.py:2210: in setter
    oldmin, oldmax = getter(self)
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: title={'center': 'normal'}>, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_subsampled_ticklabels __________________________

    def test_subsampled_ticklabels():
        # test issue 11937
        fig, ax = plt.subplots()
        ax.plot(np.arange(10))
>       ax.xaxis.set_ticks(np.arange(10) + 0.1)

lib/matplotlib/tests/test_axes.py:6034: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axis.py:2074: in set_ticks
    result = self._set_tick_locations(ticks, minor=minor)
lib/matplotlib/axis.py:2023: in _set_tick_locations
    axis.set_view_interval(min(ticks), max(ticks))
lib/matplotlib/axis.py:2210: in setter
    oldmin, oldmax = getter(self)
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_mismatched_ticklabels __________________________

    def test_mismatched_ticklabels():
        fig, ax = plt.subplots()
        ax.plot(np.arange(10))
>       ax.xaxis.set_ticks([1.5, 2.5])

lib/matplotlib/tests/test_axes.py:6045: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axis.py:2074: in set_ticks
    result = self._set_tick_locations(ticks, minor=minor)
lib/matplotlib/axis.py:2023: in _set_tick_locations
    axis.set_view_interval(min(ticks), max(ticks))
lib/matplotlib/axis.py:2210: in setter
    oldmin, oldmax = getter(self)
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_empty_ticks_fixed_loc __________________________

    def test_empty_ticks_fixed_loc():
        # Smoke test that [] can be used to unset all tick labels
        fig, ax = plt.subplots()
        ax.bar([1, 2], [1, 2])
>       ax.set_xticks([1, 2])

lib/matplotlib/tests/test_axes.py:6054: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:2074: in set_ticks
    result = self._set_tick_locations(ticks, minor=minor)
lib/matplotlib/axis.py:2023: in _set_tick_locations
    axis.set_view_interval(min(ticks), max(ticks))
lib/matplotlib/axis.py:2210: in setter
    oldmin, oldmax = getter(self)
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________ test_retain_tick_visibility[png] _______________________

    @image_comparison(['retain_tick_visibility.png'])
    def test_retain_tick_visibility():
        fig, ax = plt.subplots()
        plt.plot([0, 1, 2], [0, -1, 4])
>       plt.setp(ax.get_yticklabels(), visible=False)

lib/matplotlib/tests/test_axes.py:6062: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:1455: in get_ticklabels
    return self.get_majorticklabels()
lib/matplotlib/axis.py:1412: in get_majorticklabels
    self._update_ticks()
lib/matplotlib/axis.py:1263: in _update_ticks
    major_locs = self.get_majorticklocs()
lib/matplotlib/axis.py:1483: in get_majorticklocs
    return self.major.locator()
lib/matplotlib/ticker.py:2145: in __call__
    vmin, vmax = self.axis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_tick_label_update ____________________________

    def test_tick_label_update():
        # test issue 9397
    
        fig, ax = plt.subplots()
    
        # Set up a dummy formatter
        def formatter_func(x, pos):
            return "unit value" if x == 1 else ""
        ax.xaxis.set_major_formatter(plt.FuncFormatter(formatter_func))
    
        # Force some of the x-axis ticks to be outside of the drawn range
        ax.set_xticks([-1, 0, 1, 2, 3])
>       ax.set_xlim(-0.5, 2.5)

lib/matplotlib/tests/test_axes.py:6078: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_o_marker_path_snap[png] _________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_o_marker_path_snap[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.7, right = 4.3

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________________ test_margins _________________________________

    def test_margins():
        # test all ways margins can be called
        data = [1, 10]
        xmin = 0.0
        xmax = len(data) - 1.0
        ymin = min(data)
        ymax = max(data)
    
        fig1, ax1 = plt.subplots(1, 1)
        ax1.plot(data)
        ax1.margins(1)
        assert ax1.margins() == (1, 1)
>       assert ax1.get_xlim() == (xmin - (xmax - xmin) * 1,
                                  xmax + (xmax - xmin) * 1)

lib/matplotlib/tests/test_axes.py:6108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_set_margin_updates_limits ________________________

    def test_set_margin_updates_limits():
        mpl.style.use("default")
        fig, ax = plt.subplots()
        ax.plot([1, 2], [1, 2])
>       ax.set(xscale="log", xmargin=0)

lib/matplotlib/tests/test_axes.py:6136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3521: in set_xbound
    old_lower, old_upper = self.get_xbound()
lib/matplotlib/axes/_base.py:3493: in get_xbound
    left, right = self.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.9659363289248456, right = 2.070529847682755

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_set_xy_bound _______________________________

    def test_set_xy_bound():
        fig = plt.figure()
        ax = fig.add_subplot()
>       ax.set_xbound(2.0, 3.0)

lib/matplotlib/tests/test_axes.py:6167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 2.0, right = 3.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_pathological_hexbin ___________________________

    def test_pathological_hexbin():
        # issue #2863
        mylist = [10] * 100
        fig, ax = plt.subplots(1, 1)
        ax.hexbin(mylist, mylist)
>       fig.savefig(io.BytesIO())  # Check that no warning is emitted.

lib/matplotlib/tests/test_axes.py:6193: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 8.999999998, right = 11.000000002

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_move_offsetlabel _____________________________

    def test_move_offsetlabel():
        data = np.random.random(10) * 1e-22
    
        fig, ax = plt.subplots()
        ax.plot(data)
>       fig.canvas.draw()

lib/matplotlib/tests/test_axes.py:6234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_square_plot _______________________________

    def test_square_plot():
        x = np.arange(4)
        y = np.array([1., 3., 5., 7.])
        fig, ax = plt.subplots()
        ax.plot(x, y, 'mo')
>       ax.axis('square')

lib/matplotlib/tests/test_axes.py:6336: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:2077: in axis
    self.autoscale_view(tight=False)
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3521: in set_xbound
    old_lower, old_upper = self.get_xbound()
lib/matplotlib/axes/_base.py:3493: in get_xbound
    left, right = self.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 3.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ test_pcolorfast[data0-xy3-PcolorImage] ____________________

xy = ([1, 2, 4, 8, 16], [0, 1, 2, 3])
data = array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
cls = <class 'matplotlib.image.PcolorImage'>

    @pytest.mark.parametrize(
        "xy, cls", [
            ((), mpl.image.AxesImage),  # (0, N)
            (((3, 7), (2, 6)), mpl.image.AxesImage),  # (xmin, xmax)
            ((range(5), range(4)), mpl.image.AxesImage),  # regular grid
            (([1, 2, 4, 8, 16], [0, 1, 2, 3]),  # irregular grid
             mpl.image.PcolorImage),
            ((np.random.random((4, 5)), np.random.random((4, 5))),  # 2D coords
             mpl.collections.QuadMesh),
        ]
    )
    @pytest.mark.parametrize(
        "data", [np.arange(12).reshape((3, 4)), np.random.rand(3, 4, 3)]
    )
    def test_pcolorfast(xy, data, cls):
        fig, ax = plt.subplots()
>       assert type(ax.pcolorfast(*xy, data)) == cls

lib/matplotlib/tests/test_axes.py:6373: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:6466: in pcolorfast
    im = mimage.PcolorImage(
lib/matplotlib/image.py:1232: in __init__
    self._internal_update(kwargs)
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
lib/matplotlib/image.py:991: in set_extent
    self.axes.set_xlim((xmin, xmax), auto=None)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1, right = 16

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ test_pcolorfast[data1-xy3-PcolorImage] ____________________

xy = ([1, 2, 4, 8, 16], [0, 1, 2, 3])
data = array([[[0.71238415, 0.81498604, 0.52311308],
        [0.54450861, 0.16926476, 0.76097769],
        [0.36227045, 0.601... 0.9901891 , 0.4879695 ],
        [0.71800178, 0.20135251, 0.46569476],
        [0.67301967, 0.02802972, 0.29251614]]])
cls = <class 'matplotlib.image.PcolorImage'>

    @pytest.mark.parametrize(
        "xy, cls", [
            ((), mpl.image.AxesImage),  # (0, N)
            (((3, 7), (2, 6)), mpl.image.AxesImage),  # (xmin, xmax)
            ((range(5), range(4)), mpl.image.AxesImage),  # regular grid
            (([1, 2, 4, 8, 16], [0, 1, 2, 3]),  # irregular grid
             mpl.image.PcolorImage),
            ((np.random.random((4, 5)), np.random.random((4, 5))),  # 2D coords
             mpl.collections.QuadMesh),
        ]
    )
    @pytest.mark.parametrize(
        "data", [np.arange(12).reshape((3, 4)), np.random.rand(3, 4, 3)]
    )
    def test_pcolorfast(xy, data, cls):
        fig, ax = plt.subplots()
>       assert type(ax.pcolorfast(*xy, data)) == cls

lib/matplotlib/tests/test_axes.py:6373: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:6466: in pcolorfast
    im = mimage.PcolorImage(
lib/matplotlib/image.py:1232: in __init__
    self._internal_update(kwargs)
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
lib/matplotlib/image.py:991: in set_extent
    self.axes.set_xlim((xmin, xmax), auto=None)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1, right = 16

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_shared_scale _______________________________

    def test_shared_scale():
        fig, axs = plt.subplots(2, 2, sharex=True, sharey=True)
    
>       axs[0, 0].set_xscale("log")

lib/matplotlib/tests/test_axes.py:6379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_dash_offset[png] _____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_dash_offset[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_dash_offset[pdf] _____________________________

args = ()
kwds = {'extension': 'pdf', 'request': <FixtureRequest for <Function test_dash_offset[pdf]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_loglog[png] _______________________________

    @image_comparison(["loglog.png"], remove_text=True, tol=0.02)
    def test_loglog():
        fig, ax = plt.subplots()
        x = np.arange(1, 11)
>       ax.loglog(x, x**3, lw=5)

lib/matplotlib/tests/test_axes.py:6493: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:1854: in loglog
    self.set_xscale('log', **dx)
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_loglog_nonpos[png] ____________________________

    @image_comparison(["test_loglog_nonpos.png"], remove_text=True, style='mpl20')
    def test_loglog_nonpos():
        fig, axs = plt.subplots(3, 3)
        x = np.arange(1, 11)
        y = x**3
        y[7] = -3.
        x[4] = -10
        for (mcy, mcx), ax in zip(product(['mask', 'clip', ''], repeat=2),
                                  axs.flat):
            if mcx == mcy:
                if mcx:
>                   ax.loglog(x, y**3, lw=2, nonpositive=mcx)

lib/matplotlib/tests/test_axes.py:6509: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:1854: in loglog
    self.set_xscale('log', **dx)
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.8912509381337456, right = 11.220184543019636

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_axes_margins _______________________________

    @mpl.style.context('default')
    def test_axes_margins():
        fig, ax = plt.subplots()
        ax.plot([0, 1, 2, 3])
>       assert ax.get_ybound()[0] != 0

lib/matplotlib/tests/test_axes.py:6524: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3749: in get_ybound
    bottom, top = self.get_ylim()
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.15000000000000002, right = 3.15

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_remove_shared_axes[gca-x] ________________________

shared_axes_generator = (<Figure size 640x480 with 1 Axes>, <Axes: >)
shared_axis_remover = <function shared_axis_remover.<locals>._helper_x at 0x7f386c77ff60>

    def test_remove_shared_axes(shared_axes_generator, shared_axis_remover):
        # test all of the ways to get fig/ax sets
        fig, ax = shared_axes_generator
>       shared_axis_remover(ax)

lib/matplotlib/tests/test_axes.py:6593: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:6559: in _helper_x
    ax.set_xlim(0, 15)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0, right = 15

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________ test_remove_shared_axes[subplots-x] ______________________

shared_axes_generator = (<Figure size 640x480 with 1 Axes>, <Axes: >)
shared_axis_remover = <function shared_axis_remover.<locals>._helper_x at 0x7f385ecb2480>

    def test_remove_shared_axes(shared_axes_generator, shared_axis_remover):
        # test all of the ways to get fig/ax sets
        fig, ax = shared_axes_generator
>       shared_axis_remover(ax)

lib/matplotlib/tests/test_axes.py:6593: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:6559: in _helper_x
    ax.set_xlim(0, 15)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0, right = 15

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________ test_remove_shared_axes[subplots_shared-x] __________________

shared_axes_generator = (<Figure size 640x480 with 4 Axes>, <Axes: >)
shared_axis_remover = <function shared_axis_remover.<locals>._helper_x at 0x7f3858d971a0>

    def test_remove_shared_axes(shared_axes_generator, shared_axis_remover):
        # test all of the ways to get fig/ax sets
        fig, ax = shared_axes_generator
>       shared_axis_remover(ax)

lib/matplotlib/tests/test_axes.py:6593: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:6559: in _helper_x
    ax.set_xlim(0, 15)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0, right = 15

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________ test_remove_shared_axes[add_axes-x] ______________________

shared_axes_generator = (<Figure size 640x480 with 1 Axes>, <Axes: >)
shared_axis_remover = <function shared_axis_remover.<locals>._helper_x at 0x7f386d4428e0>

    def test_remove_shared_axes(shared_axes_generator, shared_axis_remover):
        # test all of the ways to get fig/ax sets
        fig, ax = shared_axes_generator
>       shared_axis_remover(ax)

lib/matplotlib/tests/test_axes.py:6593: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:6559: in _helper_x
    ax.set_xlim(0, 15)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0, right = 15

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_remove_shared_axes_relim _________________________

    def test_remove_shared_axes_relim():
        fig, ax_lst = plt.subplots(2, 2, sharex='all', sharey='all')
        ax = ax_lst[0][0]
        orig_xlim = ax_lst[0][1].get_xlim()
        ax.remove()
>       ax.set_xlim(0, 5)

lib/matplotlib/tests/test_axes.py:6601: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0, right = 5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_shared_axes_autoscale __________________________

    def test_shared_axes_autoscale():
        l = np.arange(-80, 90, 40)
        t = np.random.random_sample((l.size, l.size))
    
        fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True, sharey=True)
    
>       ax1.set_xlim(-1000, 1000)

lib/matplotlib/tests/test_axes.py:6611: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1000, right = 1000

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_adjust_numtick_aspect __________________________

    def test_adjust_numtick_aspect():
        fig, ax = plt.subplots()
        ax.yaxis.get_major_locator().set_params(nbins='auto')
>       ax.set_xlim(0, 1000)

lib/matplotlib/tests/test_axes.py:6625: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0, right = 1000

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_auto_numticks_log ____________________________

    @mpl.style.context("default")
    def test_auto_numticks_log():
        # Verify that there are not too many ticks with a large log range.
        fig, ax = plt.subplots()
        mpl.rcParams['axes.autolimit_mode'] = 'round_numbers'
>       ax.loglog([1e-20, 1e5], [1e-16, 10])

lib/matplotlib/tests/test_axes.py:6646: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:1854: in loglog
    self.set_xscale('log', **dx)
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.1, right = 100.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_pandas_bar_align_center _________________________

pd = <module 'pandas' from '/opt/miniconda3/envs/testbed/lib/python3.11/site-packages/pandas/__init__.py'>

    def test_pandas_bar_align_center(pd):
        # Tests fix for issue 8767
        df = pd.DataFrame({'a': range(2), 'b': range(2)})
    
        fig, ax = plt.subplots(1)
    
        ax.bar(df.loc[df['a'] == 1, 'b'],
               df.loc[df['a'] == 1, 'b'],
               align='center')
    
>       fig.canvas.draw()

lib/matplotlib/tests/test_axes.py:6716: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.6, right = 1.4

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_date_timezone_x[png] ___________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_date_timezone_x[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 16853.208333333332, right = 16853.291666666668

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_date_timezone_y[png] ___________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_date_timezone_y[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 2.85, right = 3.1500000000000004

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________ test_date_timezone_x_and_y[png] ________________________

    @image_comparison(['date_timezone_x_and_y.png'], tol=1.0)
    def test_date_timezone_x_and_y():
        # Tests issue 5575
        UTC = datetime.timezone.utc
        time_index = [datetime.datetime(2016, 2, 22, hour=x, tzinfo=UTC)
                      for x in range(3)]
    
        # Same Timezone
        plt.figure(figsize=(20, 12))
        plt.subplot(2, 1, 1)
>       plt.plot_date(time_index, time_index, tz='UTC', ydate=True)

lib/matplotlib/tests/test_axes.py:6859: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:3536: in plot_date
    return gca().plot_date(
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:1805: in plot_date
    self.yaxis_date(tz)
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:2131: in axis_date
    self.update_units(datetime.datetime(2009, 1, 1, 0, 0, 0, 0, tz))
lib/matplotlib/axis.py:1676: in update_units
    self.set_units(default)
lib/matplotlib/axis.py:1753: in set_units
    axis._update_axisinfo()
lib/matplotlib/axis.py:1715: in _update_axisinfo
    self.set_default_intervals()
lib/matplotlib/axis.py:2685: in set_default_intervals
    not self.axes.viewLim.mutatedy()):
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_axisbelow[png] ______________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_axisbelow[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -2.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_large_offset _______________________________

    def test_large_offset():
        fig, ax = plt.subplots()
        ax.plot((1 + np.array([0, 1.e-12])) * 1.e27)
>       fig.canvas.draw()

lib/matplotlib/tests/test_axes.py:7000: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_tick_param_label_rotation ________________________

    def test_tick_param_label_rotation():
        fix, (ax, ax2) = plt.subplots(1, 2)
        ax.plot([0, 1], [0, 1])
        ax2.plot([0, 1], [0, 1])
        ax.xaxis.set_tick_params(which='both', rotation=75)
        ax.yaxis.set_tick_params(which='both', rotation=90)
>       for text in ax.get_xticklabels(which='both'):

lib/matplotlib/tests/test_axes.py:7035: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:1450: in get_ticklabels
    return self.get_majorticklabels() + self.get_minorticklabels()
lib/matplotlib/axis.py:1412: in get_majorticklabels
    self._update_ticks()
lib/matplotlib/axis.py:1263: in _update_ticks
    major_locs = self.get_majorticklocs()
lib/matplotlib/axis.py:1483: in get_majorticklocs
    return self.major.locator()
lib/matplotlib/ticker.py:2145: in __call__
    vmin, vmax = self.axis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_log_margins _______________________________

    def test_log_margins():
        plt.rcParams['axes.autolimit_mode'] = 'data'
        fig, ax = plt.subplots()
        margin = 0.05
        ax.set_xmargin(margin)
>       ax.semilogx([10, 100], [10, 100])

lib/matplotlib/tests/test_axes.py:7081: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:1905: in semilogx
    self.set_xscale('log', **d)
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3521: in set_xbound
    old_lower, old_upper = self.get_xbound()
lib/matplotlib/axes/_base.py:3493: in get_xbound
    left, right = self.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.8912509381337456, right = 11.220184543019636

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_color_length_mismatch __________________________

    def test_color_length_mismatch():
        N = 5
        x, y = np.arange(N), np.arange(N)
        colors = np.arange(N+1)
        fig, ax = plt.subplots()
        with pytest.raises(ValueError):
            ax.scatter(x, y, c=colors)
        with pytest.warns(match="argument looks like a single numeric RGB"):
>           ax.scatter(x, y, c=(0.5, 0.5, 0.5))

lib/matplotlib/tests/test_axes.py:7098: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_minorticks_on[symlog-log] ________________________

xscale = 'log', yscale = 'symlog'

    @pytest.mark.parametrize('xscale', ['symlog', 'log'])
    @pytest.mark.parametrize('yscale', ['symlog', 'log'])
    def test_minorticks_on(xscale, yscale):
        ax = plt.subplot()
        ax.plot([1, 2, 3, 4])
>       ax.set_xscale(xscale)

lib/matplotlib/tests/test_axes.py:7161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3521: in set_xbound
    old_lower, old_upper = self.get_xbound()
lib/matplotlib/axes/_base.py:3493: in get_xbound
    left, right = self.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_minorticks_on[log-symlog] ________________________

xscale = 'symlog', yscale = 'log'

    @pytest.mark.parametrize('xscale', ['symlog', 'log'])
    @pytest.mark.parametrize('yscale', ['symlog', 'log'])
    def test_minorticks_on(xscale, yscale):
        ax = plt.subplot()
        ax.plot([1, 2, 3, 4])
        ax.set_xscale(xscale)
>       ax.set_yscale(yscale)

lib/matplotlib/tests/test_axes.py:7162: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2932: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3777: in set_ybound
    old_lower, old_upper = self.get_ybound()
lib/matplotlib/axes/_base.py:3749: in get_ybound
    bottom, top = self.get_ylim()
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_minorticks_on[log-log] __________________________

xscale = 'log', yscale = 'log'

    @pytest.mark.parametrize('xscale', ['symlog', 'log'])
    @pytest.mark.parametrize('yscale', ['symlog', 'log'])
    def test_minorticks_on(xscale, yscale):
        ax = plt.subplot()
        ax.plot([1, 2, 3, 4])
>       ax.set_xscale(xscale)

lib/matplotlib/tests/test_axes.py:7161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3521: in set_xbound
    old_lower, old_upper = self.get_xbound()
lib/matplotlib/axes/_base.py:3493: in get_xbound
    left, right = self.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_twinx_knows_limits ____________________________

    def test_twinx_knows_limits():
        fig, ax = plt.subplots()
    
        ax.axvspan(1, 2)
>       xtwin = ax.twinx()

lib/matplotlib/tests/test_axes.py:7170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:4452: in twinx
    ax2 = self._make_twin_axes(sharex=self)
lib/matplotlib/axes/_base.py:4421: in _make_twin_axes
    twin = self.figure.add_subplot(ss, *args, **kwargs)
lib/matplotlib/figure.py:782: in add_subplot
    ax = projection_class(self, *args, **pkw)
lib/matplotlib/axes/_base.py:678: in __init__
    self.clear()
lib/matplotlib/axes/_base.py:1388: in clear
    self.__clear()
lib/matplotlib/axes/_base.py:1370: in __clear
    getattr(self, f"share{name}")(share)
lib/matplotlib/axes/_base.py:1231: in sharex
    x0, x1 = other.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_plot_decimal[png] ____________________________

ext = 'png', request = <FixtureRequest for <Function test_plot_decimal[png]>>
args = (), kwargs = {}, file_name = 'test_plot_decimal[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_plot_decimal[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_plot_decimal[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -10.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________ test_markerfacecolor_none_alpha[png] _____________________

ext = 'png'
request = <FixtureRequest for <Function test_markerfacecolor_none_alpha[png]>>
args = (), kwargs = {}, file_name = 'test_markerfacecolor_none_alpha[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_markerfacecolor_none_alpha[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_markerfacecolor_none_alpha[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________________ test_inset __________________________________

    def test_inset():
        """
        Ensure that inset_ax argument is indeed optional
        """
        dx, dy = 0.05, 0.05
        # generate 2 2d grids for the x & y bounds
        y, x = np.mgrid[slice(1, 5 + dy, dy),
                        slice(1, 5 + dx, dx)]
        z = np.sin(x) ** 10 + np.cos(10 + y * x) * np.cos(x)
    
        fig, ax = plt.subplots()
        ax.pcolormesh(x, y, z[:-1, :-1])
        ax.set_aspect(1.)
>       ax.apply_aspect()

lib/matplotlib/tests/test_axes.py:7237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:1917: in apply_aspect
    box_aspect = aspect * self.get_data_ratio()
lib/matplotlib/axes/_base.py:1863: in get_data_ratio
    txmin, txmax = self.xaxis.get_transform().transform(self.get_xbound())
lib/matplotlib/axes/_base.py:3493: in get_xbound
    left, right = self.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 5.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_zoom_inset ________________________________

    def test_zoom_inset():
        dx, dy = 0.05, 0.05
        # generate 2 2d grids for the x & y bounds
        y, x = np.mgrid[slice(1, 5 + dy, dy),
                        slice(1, 5 + dx, dx)]
        z = np.sin(x)**10 + np.cos(10 + y*x) * np.cos(x)
    
        fig, ax = plt.subplots()
        ax.pcolormesh(x, y, z[:-1, :-1])
        ax.set_aspect(1.)
>       ax.apply_aspect()

lib/matplotlib/tests/test_axes.py:7263: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:1917: in apply_aspect
    box_aspect = aspect * self.get_data_ratio()
lib/matplotlib/axes/_base.py:1863: in get_data_ratio
    txmin, txmax = self.xaxis.get_transform().transform(self.get_xbound())
lib/matplotlib/axes/_base.py:3493: in get_xbound
    left, right = self.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 5.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_inset_polar[png] _____________________________

    @image_comparison(['inset_polar.png'], remove_text=True, style='mpl20')
    def test_inset_polar():
        _, ax = plt.subplots()
>       axins = ax.inset_axes([0.5, 0.1, 0.45, 0.45], polar=True)

lib/matplotlib/tests/test_axes.py:7289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:391: in inset_axes
    inset_ax = projection_class(self.figure, bounds, zorder=zorder, **pkw)
lib/matplotlib/projections/polar.py:819: in __init__
    super().__init__(*args, **kwargs)
lib/matplotlib/axes/_base.py:678: in __init__
    self.clear()
lib/matplotlib/projections/polar.py:836: in clear
    self.set_xlim(0.0, 2 * np.pi)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <PolarAxes: label='inset_axes'>, left = 0.0, right = 6.283185307179586

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'PolarAxes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_inset_projection _____________________________

    def test_inset_projection():
        _, ax = plt.subplots()
>       axins = ax.inset_axes([0.2, 0.2, 0.3, 0.3], projection="hammer")

lib/matplotlib/tests/test_axes.py:7301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:391: in inset_axes
    inset_ax = projection_class(self.figure, bounds, zorder=zorder, **pkw)
lib/matplotlib/projections/geo.py:333: in __init__
    super().__init__(*args, **kwargs)
lib/matplotlib/axes/_base.py:678: in __init__
    self.clear()
lib/matplotlib/projections/geo.py:54: in clear
    Axes.set_xlim(self, -np.pi, np.pi)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <HammerAxes: label='inset_axes'>, left = -3.141592653589793
right = 3.141592653589793

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'HammerAxes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________ test_indicate_inset_inverted[False-False] ___________________

x_inverted = False, y_inverted = False

    @pytest.mark.parametrize('x_inverted', [False, True])
    @pytest.mark.parametrize('y_inverted', [False, True])
    def test_indicate_inset_inverted(x_inverted, y_inverted):
        """
        Test that the inset lines are correctly located with inverted data axes.
        """
        fig, (ax1, ax2) = plt.subplots(1, 2)
    
        x = np.arange(10)
        ax1.plot(x, x, 'o')
        if x_inverted:
            ax1.invert_xaxis()
        if y_inverted:
            ax1.invert_yaxis()
    
>       rect, bounds = ax1.indicate_inset([2, 2, 5, 4], ax2)

lib/matplotlib/tests/test_axes.py:7326: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:484: in indicate_inset
    if self.xaxis.get_inverted():
lib/matplotlib/axis.py:1150: in get_inverted
    low, high = self.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________ test_indicate_inset_inverted[False-True] ___________________

x_inverted = True, y_inverted = False

    @pytest.mark.parametrize('x_inverted', [False, True])
    @pytest.mark.parametrize('y_inverted', [False, True])
    def test_indicate_inset_inverted(x_inverted, y_inverted):
        """
        Test that the inset lines are correctly located with inverted data axes.
        """
        fig, (ax1, ax2) = plt.subplots(1, 2)
    
        x = np.arange(10)
        ax1.plot(x, x, 'o')
        if x_inverted:
>           ax1.invert_xaxis()

lib/matplotlib/tests/test_axes.py:7322: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3479: in invert_xaxis
    self.xaxis.set_inverted(not self.xaxis.get_inverted())
lib/matplotlib/axis.py:1150: in get_inverted
    low, high = self.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________ test_indicate_inset_inverted[True-False] ___________________

x_inverted = False, y_inverted = True

    @pytest.mark.parametrize('x_inverted', [False, True])
    @pytest.mark.parametrize('y_inverted', [False, True])
    def test_indicate_inset_inverted(x_inverted, y_inverted):
        """
        Test that the inset lines are correctly located with inverted data axes.
        """
        fig, (ax1, ax2) = plt.subplots(1, 2)
    
        x = np.arange(10)
        ax1.plot(x, x, 'o')
        if x_inverted:
            ax1.invert_xaxis()
        if y_inverted:
>           ax1.invert_yaxis()

lib/matplotlib/tests/test_axes.py:7324: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3735: in invert_yaxis
    self.yaxis.set_inverted(not self.yaxis.get_inverted())
lib/matplotlib/axis.py:1150: in get_inverted
    low, high = self.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________ test_indicate_inset_inverted[True-True] ____________________

x_inverted = True, y_inverted = True

    @pytest.mark.parametrize('x_inverted', [False, True])
    @pytest.mark.parametrize('y_inverted', [False, True])
    def test_indicate_inset_inverted(x_inverted, y_inverted):
        """
        Test that the inset lines are correctly located with inverted data axes.
        """
        fig, (ax1, ax2) = plt.subplots(1, 2)
    
        x = np.arange(10)
        ax1.plot(x, x, 'o')
        if x_inverted:
>           ax1.invert_xaxis()

lib/matplotlib/tests/test_axes.py:7322: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3479: in invert_xaxis
    self.xaxis.set_inverted(not self.xaxis.get_inverted())
lib/matplotlib/axis.py:1150: in get_inverted
    low, high = self.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_spines_properbbox_after_zoom _______________________

    def test_spines_properbbox_after_zoom():
        fig, ax = plt.subplots()
        bb = ax.spines.bottom.get_window_extent(fig.canvas.get_renderer())
        # this is what zoom calls:
>       ax._set_view_from_bbox((320, 320, 500, 500), 'in',
                               None, False, False)

lib/matplotlib/tests/test_axes.py:7354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:4146: in _set_view_from_bbox
    self.set_xbound(new_xbound)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.4838709677419355, right = 0.8467741935483871

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_limits_after_scroll_zoom _________________________

    def test_limits_after_scroll_zoom():
        fig, ax = plt.subplots()
        #
        xlim = (-0.5, 0.5)
        ylim = (-1, 2)
>       ax.set_xlim(xlim)

lib/matplotlib/tests/test_axes.py:7365: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.5, right = 0.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_scatter_series_non_zero_index ______________________

pd = <module 'pandas' from '/opt/miniconda3/envs/testbed/lib/python3.11/site-packages/pandas/__init__.py'>

    def test_scatter_series_non_zero_index(pd):
        # create non-zero index
        ids = range(10, 18)
        x = pd.Series(np.random.uniform(size=8), index=ids)
        y = pd.Series(np.random.uniform(size=8), index=ids)
        c = pd.Series([1, 1, 1, 1, 1, 0, 0, 0], index=ids)
>       plt.scatter(x, y, c)

lib/matplotlib/tests/test_axes.py:7410: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:3623: in scatter
    __ret = gca().scatter(
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_scatter_empty_data ____________________________

    def test_scatter_empty_data():
        # making sure this does not raise an exception
        plt.scatter([], [])
>       plt.scatter([], [], s=[], c=[])

lib/matplotlib/tests/test_axes.py:7416: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/pyplot.py:3623: in scatter
    __ret = gca().scatter(
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________ test_annotate_across_transforms[png] _____________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_annotate_across_transforms[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.5, right = 10.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_secondary_xy[png] ____________________________

args = ()
kwds = {'extension': 'png', 'request': <FixtureRequest for <Function test_secondary_xy[png]>>}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)

/opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2153: in print_figure
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3145: in draw
    artists = self._get_draw_artists(renderer)
lib/matplotlib/figure.py:236: in _get_draw_artists
    child.apply_aspect(
lib/matplotlib/axes/_secondary_axes.py:120: in apply_aspect
    self._set_lims()
lib/matplotlib/axes/_secondary_axes.py:210: in _set_lims
    lims = self._parent.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.6, right = 10.4

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_secondary_resize _____________________________

    def test_secondary_resize():
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.plot(np.arange(2, 11), np.arange(2, 11))
    
        def invert(x):
            with np.errstate(divide='ignore'):
                return 1 / x
    
        ax.secondary_xaxis('top', functions=(invert, invert))
>       fig.canvas.draw()

lib/matplotlib/tests/test_axes.py:7477: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3145: in draw
    artists = self._get_draw_artists(renderer)
lib/matplotlib/figure.py:236: in _get_draw_artists
    child.apply_aspect(
lib/matplotlib/axes/_secondary_axes.py:120: in apply_aspect
    self._set_lims()
lib/matplotlib/axes/_secondary_axes.py:210: in _set_lims
    lims = self._parent.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 2.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_secondary_minorloc ____________________________

    def test_secondary_minorloc():
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.plot(np.arange(2, 11), np.arange(2, 11))
    
        def invert(x):
            with np.errstate(divide='ignore'):
                return 1 / x
    
        secax = ax.secondary_xaxis('top', functions=(invert, invert))
        assert isinstance(secax._axis.get_minor_locator(),
                          mticker.NullLocator)
        secax.minorticks_on()
        assert isinstance(secax._axis.get_minor_locator(),
                          mticker.AutoMinorLocator)
>       ax.set_xscale('log')

lib/matplotlib/tests/test_axes.py:7496: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3521: in set_xbound
    old_lower, old_upper = self.get_xbound()
lib/matplotlib/axes/_base.py:3493: in get_xbound
    left, right = self.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_secondary_formatter ___________________________

    def test_secondary_formatter():
        fig, ax = plt.subplots()
>       ax.set_xscale("log")

lib/matplotlib/tests/test_axes.py:7508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_axis_options[png] ____________________________

    @image_comparison(['axis_options.png'], remove_text=True, style='mpl20')
    def test_axis_options():
        fig, axes = plt.subplots(2, 3)
        for i, option in enumerate(('scaled', 'tight', 'image')):
            # Draw a line and a circle fitting within the boundaries of the line
            # The circle should look like a circle for 'scaled' and 'image'
            # High/narrow aspect ratio
            axes[0, i].plot((1, 2), (1, 3.2))
>           axes[0, i].axis(option)

lib/matplotlib/tests/test_axes.py:7530: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:2077: in axis
    self.autoscale_view(tight=False)
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3521: in set_xbound
    old_lower, old_upper = self.get_xbound()
lib/matplotlib/axes/_base.py:3493: in get_xbound
    left, right = self.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.95, right = 2.05

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_axis_extent_arg _____________________________

    def test_axis_extent_arg():
        fig, ax = plt.subplots()
        xmin = 5
        xmax = 10
        ymin = 15
        ymax = 20
>       extent = ax.axis([xmin, xmax, ymin, ymax])

lib/matplotlib/tests/test_axes.py:7753: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:2125: in axis
    set_ax_lim(ax_min, ax_max, emit=emit, auto=ax_auto)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 5, right = 10

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_axis_extent_arg2 _____________________________

    def test_axis_extent_arg2():
        # Same as test_axis_extent_arg, but with keyword arguments
        fig, ax = plt.subplots()
        xmin = 5
        xmax = 10
        ymin = 15
        ymax = 20
>       extent = ax.axis(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax)

lib/matplotlib/tests/test_axes.py:7770: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:2125: in axis
    set_ax_lim(ax_min, ax_max, emit=emit, auto=ax_auto)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 5, right = 10

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________ test_aspect_nonlinear_adjustable_box _____________________

    def test_aspect_nonlinear_adjustable_box():
        fig = plt.figure(figsize=(10, 10))  # Square.
    
        ax = fig.add_subplot()
        ax.plot([.4, .6], [.4, .6])  # Set minpos to keep logit happy.
>       ax.set(xscale="log", xlim=(1, 10),
               yscale="logit", ylim=(1/11, 1/1001),
               aspect=1, adjustable="box")

lib/matplotlib/tests/test_axes.py:7836: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3521: in set_xbound
    old_lower, old_upper = self.get_xbound()
lib/matplotlib/axes/_base.py:3493: in get_xbound
    left, right = self.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.1, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________ test_aspect_nonlinear_adjustable_datalim ___________________

    def test_aspect_nonlinear_adjustable_datalim():
        fig = plt.figure(figsize=(10, 10))  # Square.
    
        ax = fig.add_axes([.1, .1, .8, .8])  # Square.
        ax.plot([.4, .6], [.4, .6])  # Set minpos to keep logit happy.
>       ax.set(xscale="log", xlim=(1, 100),
               yscale="logit", ylim=(1 / 101, 1 / 11),
               aspect=1, adjustable="datalim")

lib/matplotlib/tests/test_axes.py:7849: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:835: in _set_axes_scale
    self.axes.autoscale_view(
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3521: in set_xbound
    old_lower, old_upper = self.get_xbound()
lib/matplotlib/axes/_base.py:3493: in get_xbound
    left, right = self.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.1, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_box_aspect ________________________________

    def test_box_aspect():
        # Test if axes with box_aspect=1 has same dimensions
        # as axes with aspect equal and adjustable="box"
    
        fig1, ax1 = plt.subplots()
        axtwin = ax1.twinx()
        axtwin.plot([12, 344])
    
        ax1.set_box_aspect(1)
        assert ax1.get_box_aspect() == 1.0
    
        fig2, ax2 = plt.subplots()
        ax2.margins(0)
        ax2.plot([0, 2], [6, 8])
        ax2.set_aspect("equal", adjustable="box")
    
>       fig1.canvas.draw()

lib/matplotlib/tests/test_axes.py:7875: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_redraw_in_frame _____________________________

    def test_redraw_in_frame():
        fig, ax = plt.subplots(1, 1)
        ax.plot([1, 2, 3])
>       fig.canvas.draw()

lib/matplotlib/tests/test_axes.py:7939: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_unautoscale[True-x] ___________________________

axis = 'x', auto = True

    @pytest.mark.parametrize('axis', ('x', 'y'))
    @pytest.mark.parametrize('auto', (True, False, None))
    def test_unautoscale(axis, auto):
        fig, ax = plt.subplots()
        x = np.arange(100)
        y = np.linspace(-.1, .1, 100)
>       ax.scatter(y, x)

lib/matplotlib/tests/test_axes.py:7973: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_unautoscale[True-y] ___________________________

axis = 'y', auto = True

    @pytest.mark.parametrize('axis', ('x', 'y'))
    @pytest.mark.parametrize('auto', (True, False, None))
    def test_unautoscale(axis, auto):
        fig, ax = plt.subplots()
        x = np.arange(100)
        y = np.linspace(-.1, .1, 100)
>       ax.scatter(y, x)

lib/matplotlib/tests/test_axes.py:7973: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_unautoscale[False-x] ___________________________

axis = 'x', auto = False

    @pytest.mark.parametrize('axis', ('x', 'y'))
    @pytest.mark.parametrize('auto', (True, False, None))
    def test_unautoscale(axis, auto):
        fig, ax = plt.subplots()
        x = np.arange(100)
        y = np.linspace(-.1, .1, 100)
>       ax.scatter(y, x)

lib/matplotlib/tests/test_axes.py:7973: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_unautoscale[False-y] ___________________________

axis = 'y', auto = False

    @pytest.mark.parametrize('axis', ('x', 'y'))
    @pytest.mark.parametrize('auto', (True, False, None))
    def test_unautoscale(axis, auto):
        fig, ax = plt.subplots()
        x = np.arange(100)
        y = np.linspace(-.1, .1, 100)
>       ax.scatter(y, x)

lib/matplotlib/tests/test_axes.py:7973: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_unautoscale[None-x] ___________________________

axis = 'x', auto = None

    @pytest.mark.parametrize('axis', ('x', 'y'))
    @pytest.mark.parametrize('auto', (True, False, None))
    def test_unautoscale(axis, auto):
        fig, ax = plt.subplots()
        x = np.arange(100)
        y = np.linspace(-.1, .1, 100)
>       ax.scatter(y, x)

lib/matplotlib/tests/test_axes.py:7973: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_unautoscale[None-y] ___________________________

axis = 'y', auto = None

    @pytest.mark.parametrize('axis', ('x', 'y'))
    @pytest.mark.parametrize('auto', (True, False, None))
    def test_unautoscale(axis, auto):
        fig, ax = plt.subplots()
        x = np.arange(100)
        y = np.linspace(-.1, .1, 100)
>       ax.scatter(y, x)

lib/matplotlib/tests/test_axes.py:7973: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________ test_polar_interpolation_steps_variable_r[png] ________________

ext = 'png'
request = <FixtureRequest for <Function test_polar_interpolation_steps_variable_r[png]>>
args = (), kwargs = {}
file_name = 'test_polar_interpolation_steps_variable_r[png]'
fig_test = <Figure size 640x480 with 0 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:7989: in test_polar_interpolation_steps_variable_r
    l, = fig_test.add_subplot(projection="polar").plot([0, np.pi/2], [1, 2])
lib/matplotlib/figure.py:782: in add_subplot
    ax = projection_class(self, *args, **pkw)
lib/matplotlib/projections/polar.py:819: in __init__
    super().__init__(*args, **kwargs)
lib/matplotlib/axes/_base.py:678: in __init__
    self.clear()
lib/matplotlib/projections/polar.py:836: in clear
    self.set_xlim(0.0, 2 * np.pi)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <PolarAxes: >, left = 0.0, right = 6.283185307179586

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'PolarAxes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_autoscale_tiny_sticky __________________________

    @mpl.style.context('default')
    def test_autoscale_tiny_sticky():
        fig, ax = plt.subplots()
        ax.bar(0, 1e-9)
>       fig.canvas.draw()

lib/matplotlib/tests/test_axes.py:7999: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.44000000000000006, right = 0.44000000000000006

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_multiplot_autoscale ___________________________

    def test_multiplot_autoscale():
        fig = plt.figure()
        ax1, ax2 = fig.subplots(2, 1, sharex='all')
>       ax1.scatter([1, 2, 3, 4], [2, 3, 2, 3])

lib/matplotlib/tests/test_axes.py:8062: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_2dcolor_plot[pdf] ____________________________

ext = 'pdf', request = <FixtureRequest for <Function test_2dcolor_plot[pdf]>>
args = (), kwargs = {}, file_name = 'test_2dcolor_plot[pdf]'
fig_test = <Figure size 640x480 with 5 Axes>
fig_ref = <Figure size 640x480 with 0 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:8084: in test_2dcolor_plot
    axs[1].scatter([1, 2], [1, 2], c=color.reshape(-1))
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_shared_axes_clear[png] __________________________

ext = 'png'
request = <FixtureRequest for <Function test_shared_axes_clear[png]>>, args = ()
kwargs = {}, file_name = 'test_shared_axes_clear[png]'
fig_test = <Figure size 640x480 with 4 Axes>
fig_ref = <Figure size 640x480 with 4 Axes>, figs = []

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
>               func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)

lib/matplotlib/testing/decorators.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/tests/test_axes.py:8108: in test_shared_axes_clear
    ax.clear()
lib/matplotlib/axes/_base.py:1388: in clear
    self.__clear()
lib/matplotlib/axes/_base.py:1370: in __clear
    getattr(self, f"share{name}")(share)
lib/matplotlib/axes/_base.py:1231: in sharex
    x0, x1 = other.get_xlim()
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 7.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_shared_axes_retick ____________________________

    def test_shared_axes_retick():
        fig, axs = plt.subplots(2, 2, sharex='all', sharey='all')
    
        for ax in axs.flat:
            ax.plot([0, 2], 'o-')
    
>       axs[0, 0].set_xticks([-0.5, 0, 1, 1.5])  # should affect all axes xlims

lib/matplotlib/tests/test_axes.py:8118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:2074: in set_ticks
    result = self._set_tick_locations(ticks, minor=minor)
lib/matplotlib/axis.py:2023: in _set_tick_locations
    axis.set_view_interval(min(ticks), max(ticks))
lib/matplotlib/axis.py:2210: in setter
    oldmin, oldmax = getter(self)
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________ test_bar_label_location_vertical _______________________

    def test_bar_label_location_vertical():
        ax = plt.gca()
        xs, heights = [1, 2], [3, -4]
        rects = ax.bar(xs, heights)
>       labels = ax.bar_label(rects)

lib/matplotlib/tests/test_axes.py:8140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2756: in bar_label
    a, b = self.yaxis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________ test_bar_label_location_vertical_yinverted __________________

    def test_bar_label_location_vertical_yinverted():
        ax = plt.gca()
        ax.invert_yaxis()
        xs, heights = [1, 2], [3, -4]
        rects = ax.bar(xs, heights)
>       labels = ax.bar_label(rects)

lib/matplotlib/tests/test_axes.py:8154: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2756: in bar_label
    a, b = self.yaxis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_bar_label_location_horizontal ______________________

    def test_bar_label_location_horizontal():
        ax = plt.gca()
        ys, widths = [1, 2], [3, -4]
        rects = ax.barh(ys, widths)
>       labels = ax.bar_label(rects)

lib/matplotlib/tests/test_axes.py:8167: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2756: in bar_label
    a, b = self.yaxis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -4.0, right = 3.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________ test_bar_label_location_horizontal_yinverted _________________

    def test_bar_label_location_horizontal_yinverted():
        ax = plt.gca()
        ax.invert_yaxis()
        ys, widths = [1, 2], [3, -4]
        rects = ax.barh(ys, widths)
>       labels = ax.bar_label(rects)

lib/matplotlib/tests/test_axes.py:8181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2756: in bar_label
    a, b = self.yaxis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -4.0, right = 3.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________ test_bar_label_location_horizontal_xinverted _________________

    def test_bar_label_location_horizontal_xinverted():
        ax = plt.gca()
        ax.invert_xaxis()
        ys, widths = [1, 2], [3, -4]
        rects = ax.barh(ys, widths)
>       labels = ax.bar_label(rects)

lib/matplotlib/tests/test_axes.py:8195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2756: in bar_label
    a, b = self.yaxis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 3.0, right = -4.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________ test_bar_label_location_horizontal_xyinverted _________________

    def test_bar_label_location_horizontal_xyinverted():
        ax = plt.gca()
        ax.invert_xaxis()
        ax.invert_yaxis()
        ys, widths = [1, 2], [3, -4]
        rects = ax.barh(ys, widths)
>       labels = ax.bar_label(rects)

lib/matplotlib/tests/test_axes.py:8210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2756: in bar_label
    a, b = self.yaxis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 3.0, right = -4.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_bar_label_location_center ________________________

    def test_bar_label_location_center():
        ax = plt.gca()
        ys, widths = [1, 2], [3, -4]
        rects = ax.barh(ys, widths)
>       labels = ax.bar_label(rects, label_type='center')

lib/matplotlib/tests/test_axes.py:8223: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2756: in bar_label
    a, b = self.yaxis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -4.0, right = 3.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________ test_centered_bar_label_label_beyond_limits __________________

    def test_centered_bar_label_label_beyond_limits():
        fig, ax = plt.subplots()
    
        last = 0
        for label, value in zip(['a', 'b', 'c'], [10, 20, 50]):
            bar_container = ax.barh('col', value, label=label, left=last)
>           ax.bar_label(bar_container, label_type='center')

lib/matplotlib/tests/test_axes.py:8248: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2756: in bar_label
    a, b = self.yaxis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 10.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_bar_label_location_errorbars _______________________

    def test_bar_label_location_errorbars():
        ax = plt.gca()
        xs, heights = [1, 2], [3, -4]
        rects = ax.bar(xs, heights, yerr=1)
>       labels = ax.bar_label(rects)

lib/matplotlib/tests/test_axes.py:8259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2756: in bar_label
    a, b = self.yaxis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_bar_label_fmt[%.2f] ___________________________

fmt = '%.2f'

    @pytest.mark.parametrize('fmt', [
        '%.2f', '{:.2f}', '{:.2f}'.format
    ])
    def test_bar_label_fmt(fmt):
        ax = plt.gca()
        rects = ax.bar([1, 2], [3, -4])
>       labels = ax.bar_label(rects, fmt=fmt)

lib/matplotlib/tests/test_axes.py:8274: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2756: in bar_label
    a, b = self.yaxis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_bar_label_fmt[{:.2f}] __________________________

fmt = '{:.2f}'

    @pytest.mark.parametrize('fmt', [
        '%.2f', '{:.2f}', '{:.2f}'.format
    ])
    def test_bar_label_fmt(fmt):
        ax = plt.gca()
        rects = ax.bar([1, 2], [3, -4])
>       labels = ax.bar_label(rects, fmt=fmt)

lib/matplotlib/tests/test_axes.py:8274: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2756: in bar_label
    a, b = self.yaxis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_bar_label_fmt[format] __________________________

fmt = <built-in method format of str object at 0x7f386e688d30>

    @pytest.mark.parametrize('fmt', [
        '%.2f', '{:.2f}', '{:.2f}'.format
    ])
    def test_bar_label_fmt(fmt):
        ax = plt.gca()
        rects = ax.bar([1, 2], [3, -4])
>       labels = ax.bar_label(rects, fmt=fmt)

lib/matplotlib/tests/test_axes.py:8274: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2756: in bar_label
    a, b = self.yaxis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_bar_label_fmt_error ___________________________

    def test_bar_label_fmt_error():
        ax = plt.gca()
        rects = ax.bar([1, 2], [3, -4])
        with pytest.raises(TypeError, match='str or callable'):
>           _ = ax.bar_label(rects, fmt=10)

lib/matplotlib/tests/test_axes.py:8283: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2756: in bar_label
    a, b = self.yaxis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_bar_label_labels _____________________________

    def test_bar_label_labels():
        ax = plt.gca()
        rects = ax.bar([1, 2], [3, -4])
>       labels = ax.bar_label(rects, labels=['A', 'B'])

lib/matplotlib/tests/test_axes.py:8289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2756: in bar_label
    a, b = self.yaxis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5, right = 2.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
___________________________ test_bar_label_nan_ydata ___________________________

    def test_bar_label_nan_ydata():
        ax = plt.gca()
        bars = ax.bar([2, 3], [np.nan, 1])
>       labels = ax.bar_label(bars)

lib/matplotlib/tests/test_axes.py:8297: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2756: in bar_label
    a, b = self.yaxis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 2.6, right = 3.4

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________ test_bar_label_nan_ydata_inverted _______________________

    def test_bar_label_nan_ydata_inverted():
        ax = plt.gca()
        ax.yaxis_inverted()
        bars = ax.bar([2, 3], [np.nan, 1])
>       labels = ax.bar_label(bars)

lib/matplotlib/tests/test_axes.py:8307: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2756: in bar_label
    a, b = self.yaxis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 2.6, right = 3.4

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
______________________________ test_nan_barlabels ______________________________

    def test_nan_barlabels():
        fig, ax = plt.subplots()
        bars = ax.bar([1, 2, 3], [np.nan, 1, 2], yerr=[0.2, 0.4, 0.6])
>       labels = ax.bar_label(bars)

lib/matplotlib/tests/test_axes.py:8316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_axes.py:2756: in bar_label
    a, b = self.yaxis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1.5, right = 3.5

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_artist_sublists _____________________________

    def test_artist_sublists():
        fig, ax = plt.subplots()
        lines = [ax.plot(np.arange(i, i + 5))[0] for i in range(6)]
>       col = ax.scatter(np.arange(5), np.arange(5))

lib/matplotlib/tests/test_axes.py:8351: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.0, right = 5.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_______________________________ test_plot_format _______________________________

    def test_plot_format():
        fig, ax = plt.subplots()
        line = ax.plot([1, 2, 3], '1.0')
        assert line[0].get_color() == (1.0, 1.0, 1.0, 1.0)
        assert line[0].get_marker() == 'None'
        fig, ax = plt.subplots()
        line = ax.plot([1, 2, 3], '1')
        assert line[0].get_marker() == '1'
        fig, ax = plt.subplots()
        line = ax.plot([1, 2], [1, 2], '1.0', "1")
>       fig.canvas.draw()

lib/matplotlib/tests/test_axes.py:8434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_automatic_legend _____________________________

    def test_automatic_legend():
        fig, ax = plt.subplots()
        ax.plot("a", "b", data={"d": 2})
        leg = ax.legend()
>       fig.canvas.draw()

lib/matplotlib/tests/test_axes.py:8452: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________________ test_clim ___________________________________

    def test_clim():
        ax = plt.figure().add_subplot()
        for plot_method in [
                partial(ax.scatter, range(3), range(3), c=range(3)),
                partial(ax.imshow, [[0, 1], [2, 3]]),
                partial(ax.pcolor,  [[0, 1], [2, 3]]),
                partial(ax.pcolormesh, [[0, 1], [2, 3]]),
                partial(ax.pcolorfast, [[0, 1], [2, 3]]),
        ]:
            clim = (7, 8)
>           norm = plot_method(clim=clim).norm

lib/matplotlib/tests/test_axes.py:8488: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:4765: in scatter
    self.add_collection(collection)
lib/matplotlib/axes/_base.py:2261: in add_collection
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.06, right = 0.06

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_bezier_autoscale _____________________________

    def test_bezier_autoscale():
        # Check that bezier curves autoscale to their curves, and not their
        # control points
        verts = [[-1, 0],
                 [0, -1],
                 [1, 0],
                 [1, 0]]
        codes = [mpath.Path.MOVETO,
                 mpath.Path.CURVE3,
                 mpath.Path.CURVE3,
                 mpath.Path.CLOSEPOLY]
        p = mpath.Path(verts, codes)
    
        fig, ax = plt.subplots()
        ax.add_patch(mpatches.PathPatch(p))
        ax.autoscale()
        # Bottom ylim should be at the edge of the curve (-0.5), and not include
        # the control point (at -1)
>       assert ax.get_ylim()[0] == -0.5

lib/matplotlib/tests/test_axes.py:8510: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3807: in get_ylim
    return tuple(self.viewLim.intervaly)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1.0, right = 1.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_small_autoscale _____________________________

    def test_small_autoscale():
        # Check that paths with small values autoscale correctly #24097.
        verts = np.array([
            [-5.45, 0.00], [-5.45, 0.00], [-5.29, 0.00], [-5.29, 0.00],
            [-5.13, 0.00], [-5.13, 0.00], [-4.97, 0.00], [-4.97, 0.00],
            [-4.81, 0.00], [-4.81, 0.00], [-4.65, 0.00], [-4.65, 0.00],
            [-4.49, 0.00], [-4.49, 0.00], [-4.33, 0.00], [-4.33, 0.00],
            [-4.17, 0.00], [-4.17, 0.00], [-4.01, 0.00], [-4.01, 0.00],
            [-3.85, 0.00], [-3.85, 0.00], [-3.69, 0.00], [-3.69, 0.00],
            [-3.53, 0.00], [-3.53, 0.00], [-3.37, 0.00], [-3.37, 0.00],
            [-3.21, 0.00], [-3.21, 0.01], [-3.05, 0.01], [-3.05, 0.01],
            [-2.89, 0.01], [-2.89, 0.01], [-2.73, 0.01], [-2.73, 0.02],
            [-2.57, 0.02], [-2.57, 0.04], [-2.41, 0.04], [-2.41, 0.04],
            [-2.25, 0.04], [-2.25, 0.06], [-2.09, 0.06], [-2.09, 0.08],
            [-1.93, 0.08], [-1.93, 0.10], [-1.77, 0.10], [-1.77, 0.12],
            [-1.61, 0.12], [-1.61, 0.14], [-1.45, 0.14], [-1.45, 0.17],
            [-1.30, 0.17], [-1.30, 0.19], [-1.14, 0.19], [-1.14, 0.22],
            [-0.98, 0.22], [-0.98, 0.25], [-0.82, 0.25], [-0.82, 0.27],
            [-0.66, 0.27], [-0.66, 0.29], [-0.50, 0.29], [-0.50, 0.30],
            [-0.34, 0.30], [-0.34, 0.32], [-0.18, 0.32], [-0.18, 0.33],
            [-0.02, 0.33], [-0.02, 0.32], [0.13, 0.32], [0.13, 0.33], [0.29, 0.33],
            [0.29, 0.31], [0.45, 0.31], [0.45, 0.30], [0.61, 0.30], [0.61, 0.28],
            [0.77, 0.28], [0.77, 0.25], [0.93, 0.25], [0.93, 0.22], [1.09, 0.22],
            [1.09, 0.19], [1.25, 0.19], [1.25, 0.17], [1.41, 0.17], [1.41, 0.15],
            [1.57, 0.15], [1.57, 0.12], [1.73, 0.12], [1.73, 0.10], [1.89, 0.10],
            [1.89, 0.08], [2.05, 0.08], [2.05, 0.07], [2.21, 0.07], [2.21, 0.05],
            [2.37, 0.05], [2.37, 0.04], [2.53, 0.04], [2.53, 0.02], [2.69, 0.02],
            [2.69, 0.02], [2.85, 0.02], [2.85, 0.01], [3.01, 0.01], [3.01, 0.01],
            [3.17, 0.01], [3.17, 0.00], [3.33, 0.00], [3.33, 0.00], [3.49, 0.00],
            [3.49, 0.00], [3.65, 0.00], [3.65, 0.00], [3.81, 0.00], [3.81, 0.00],
            [3.97, 0.00], [3.97, 0.00], [4.13, 0.00], [4.13, 0.00], [4.29, 0.00],
            [4.29, 0.00], [4.45, 0.00], [4.45, 0.00], [4.61, 0.00], [4.61, 0.00],
            [4.77, 0.00], [4.77, 0.00], [4.93, 0.00], [4.93, 0.00],
        ])
    
        minx = np.min(verts[:, 0])
        miny = np.min(verts[:, 1])
        maxx = np.max(verts[:, 0])
        maxy = np.max(verts[:, 1])
    
        p = mpath.Path(verts)
    
        fig, ax = plt.subplots()
        ax.add_patch(mpatches.PathPatch(p))
        ax.autoscale()
    
>       assert ax.get_xlim()[0] <= minx

lib/matplotlib/tests/test_axes.py:8559: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -6.0, right = 6.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_____________________________ test_get_xticklabel ______________________________

    def test_get_xticklabel():
        fig, ax = plt.subplots()
        ax.plot(np.arange(10))
        for ind in range(10):
>           assert ax.get_xticklabels()[ind].get_text() == f'{ind}'

lib/matplotlib/tests/test_axes.py:8569: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:1455: in get_ticklabels
    return self.get_majorticklabels()
lib/matplotlib/axis.py:1412: in get_majorticklabels
    self._update_ticks()
lib/matplotlib/axis.py:1263: in _update_ticks
    major_locs = self.get_majorticklocs()
lib/matplotlib/axis.py:1483: in get_majorticklocs
    return self.major.locator()
lib/matplotlib/ticker.py:2145: in __call__
    vmin, vmax = self.axis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 9.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_bar_all_nan[png] _____________________________

ext = 'png', request = <FixtureRequest for <Function test_bar_all_nan[png]>>
args = (), kwargs = {}, file_name = 'test_bar_all_nan[png]'
fig_test = <Figure size 640x480 with 1 Axes>
fig_ref = <Figure size 640x480 with 1 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_bar_all_nan[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_bar_all_nan[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.5599999999999999, right = 1.44

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________________ test_extent_units[png] ____________________________

    @image_comparison(["extent_units.png"], style="mpl20")
    def test_extent_units():
        _, axs = plt.subplots(2, 2)
        date_first = np.datetime64('2020-01-01', 'D')
        date_last = np.datetime64('2020-01-11', 'D')
        arr = [[i+j for i in range(10)] for j in range(10)]
    
        axs[0, 0].set_title('Date extents on y axis')
>       im = axs[0, 0].imshow(arr, origin='lower',
                              extent=[1, 11, date_first, date_last],
                              cmap=mpl.colormaps["plasma"])

lib/matplotlib/tests/test_axes.py:8618: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:5747: in imshow
    im.set_extent(im.get_extent())
lib/matplotlib/image.py:991: in set_extent
    self.axes.set_xlim((xmin, xmax), auto=None)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: title={'center': 'Date extents on y axis'}>, left = 1, right = 11

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ test_cla_clears_children_axes_and_fig _____________________

    def test_cla_clears_children_axes_and_fig():
        fig, ax = plt.subplots()
        lines = ax.plot([], [], [], [])
>       img = ax.imshow([[1]])

lib/matplotlib/tests/test_axes.py:8648: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/__init__.py:1458: in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
lib/matplotlib/axes/_axes.py:5747: in imshow
    im.set_extent(im.get_extent())
lib/matplotlib/image.py:991: in set_extent
    self.axes.set_xlim((xmin, xmax), auto=None)
lib/matplotlib/axes/_base.py:3646: in set_xlim
    result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
lib/matplotlib/axis.py:1233: in _set_lim
    self.set_view_interval(v0, v1, ignore=True)
lib/matplotlib/axis.py:2208: in setter
    setattr(getattr(self.axes, lim_name), attr_name, (vmin, vmax))
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -0.6000000000000001, right = 0.6000000000000001

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
____________________ test_zorder_and_explicit_rasterization ____________________

    def test_zorder_and_explicit_rasterization():
        fig, ax = plt.subplots()
        ax.set_rasterization_zorder(5)
        ln, = ax.plot(range(5), rasterized=True, zorder=1)
        with io.BytesIO() as b:
>           fig.savefig(b, format='pdf')

lib/matplotlib/tests/test_axes.py:8677: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_pdf.py:2790: in print_pdf
    self.figure.draw(renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 4.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
_________________________ test_preset_clip_paths[png] __________________________

    @image_comparison(["preset_clip_paths.png"], remove_text=True, style="mpl20")
    def test_preset_clip_paths():
        fig, ax = plt.subplots()
    
        poly = mpl.patches.Polygon(
            [[1, 0], [0, 1], [-1, 0], [0, -1]], facecolor="#ddffdd",
            edgecolor="#00ff00", linewidth=2, alpha=0.5)
    
        ax.add_patch(poly)
    
        line = mpl.lines.Line2D((-1, 1), (0.5, 0.5), clip_on=True, clip_path=poly)
        line.set_path_effects([patheffects.withTickedStroke()])
        ax.add_artist(line)
    
        line = mpl.lines.Line2D((-1, 1), (-0.5, -0.5), color='r', clip_on=True,
                                clip_path=poly)
        ax.add_artist(line)
    
        poly2 = mpl.patches.Polygon(
            [[-1, 1], [0, 1], [0, -0.25]], facecolor="#beefc0", alpha=0.3,
            edgecolor="#faded0", linewidth=2, clip_on=True, clip_path=poly)
        ax.add_artist(poly2)
    
        # When text clipping works, the "Annotation" text should be clipped
        ax.annotate('Annotation', (-0.75, -0.75), xytext=(0.1, 0.75),
                    arrowprops={'color': 'k'}, clip_on=True, clip_path=poly)
    
        poly3 = mpl.patches.Polygon(
            [[0, 0], [0, 0.5], [0.5, 0.5], [0.5, 0]], facecolor="g", edgecolor="y",
            linewidth=2, alpha=0.3, clip_on=True, clip_path=poly)
    
        fig.add_artist(poly3, clip=True)
    
>       ax.set_xlim(-1, 1)

lib/matplotlib/tests/test_axes.py:8713: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = -1, right = 1

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________________ test_ecdf[png] ________________________________

ext = 'png', request = <FixtureRequest for <Function test_ecdf[png]>>, args = ()
kwargs = {}, file_name = 'test_ecdf[png]'
fig_test = <Figure size 640x480 with 2 Axes>
fig_ref = <Figure size 640x480 with 2 Axes>, figs = []
test_image_path = PosixPath('/testbed/result_images/test_axes/test_ecdf[png].png')
ref_image_path = PosixPath('/testbed/result_images/test_axes/test_ecdf[png]-expected.png')

    @pytest.mark.parametrize("ext", extensions)
    def wrapper(*args, ext, request, **kwargs):
        if 'ext' in old_sig.parameters:
            kwargs['ext'] = ext
        if 'request' in old_sig.parameters:
            kwargs['request'] = request
    
        file_name = "".join(c for c in request.node.name
                            if c in ALLOWED_CHARS)
        try:
            fig_test = plt.figure("test")
            fig_ref = plt.figure("reference")
            with _collect_new_figures() as figs:
                func(*args, fig_test=fig_test, fig_ref=fig_ref, **kwargs)
            if figs:
                raise RuntimeError('Number of open figures changed during '
                                   'test. Make sure you are plotting to '
                                   'fig_test or fig_ref, or if this is '
                                   'deliberate explicitly close the '
                                   'new figure(s) inside the test.')
            test_image_path = result_dir / (file_name + "." + ext)
            ref_image_path = result_dir / (file_name + "-expected." + ext)
>           fig_test.savefig(test_image_path)

lib/matplotlib/testing/decorators.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/figure.py:3392: in savefig
    self.canvas.print_figure(fname, **kwargs)
lib/matplotlib/backend_bases.py:2182: in print_figure
    result = print_method(
lib/matplotlib/backend_bases.py:2038: in <lambda>
    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(
lib/matplotlib/backends/backend_agg.py:495: in print_png
    self._print_pil(filename_or_obj, "png", pil_kwargs, metadata)
lib/matplotlib/backends/backend_agg.py:443: in _print_pil
    FigureCanvasAgg.draw(self)
lib/matplotlib/backends/backend_agg.py:386: in draw
    self.figure.draw(self.renderer)
lib/matplotlib/artist.py:95: in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/figure.py:3156: in draw
    mimage._draw_list_compositing_images(
lib/matplotlib/image.py:131: in _draw_list_compositing_images
    a.draw(renderer)
lib/matplotlib/artist.py:72: in draw_wrapper
    return draw(artist, renderer)
lib/matplotlib/axes/_base.py:3005: in draw
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 2.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
________________________ test_fill_between_axes_limits _________________________

    def test_fill_between_axes_limits():
        fig, ax = plt.subplots()
        x = np.arange(0, 4 * np.pi, 0.01)
        y = 0.1*np.sin(x)
        threshold = 0.075
        ax.plot(x, y, color='black')
    
>       original_lims = (ax.get_xlim(), ax.get_ylim())

lib/matplotlib/tests/test_axes.py:8769: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:3551: in get_xlim
    return tuple(self.viewLim.intervalx)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 0.0, right = 14.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_tick_param_labelfont ___________________________

    def test_tick_param_labelfont():
        fig, ax = plt.subplots()
        ax.plot([1, 2, 3, 4], [1, 2, 3, 4])
        ax.set_xlabel('X label in Impact font', fontname='Impact')
        ax.set_ylabel('Y label in Humor Sans', fontname='Humor Sans')
        ax.tick_params(color='r', labelfontfamily='monospace')
        plt.title('Title in sans-serif')
>       for text in ax.get_xticklabels():

lib/matplotlib/tests/test_axes.py:8785: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/axes/_base.py:73: in wrapper
    return get_method(self)(*args, **kwargs)
lib/matplotlib/axis.py:1455: in get_ticklabels
    return self.get_majorticklabels()
lib/matplotlib/axis.py:1412: in get_majorticklabels
    self._update_ticks()
lib/matplotlib/axis.py:1263: in _update_ticks
    major_locs = self.get_majorticklocs()
lib/matplotlib/axis.py:1483: in get_majorticklocs
    return self.major.locator()
lib/matplotlib/ticker.py:2145: in __call__
    vmin, vmax = self.axis.get_view_interval()
lib/matplotlib/axis.py:2203: in getter
    return getattr(getattr(self.axes, lim_name), attr_name)
lib/matplotlib/axes/_base.py:849: in viewLim
    self._unstale_viewLim()
lib/matplotlib/axes/_base.py:844: in _unstale_viewLim
    self.autoscale_view(**{f"scale{name}": scale
lib/matplotlib/axes/_base.py:2929: in autoscale_view
    handle_single_axis(
lib/matplotlib/axes/_base.py:2926: in handle_single_axis
    set_bound(x0, x1)
lib/matplotlib/axes/_base.py:3527: in set_xbound
    self.set_xlim(sorted((lower, upper),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: title={'center': 'Title in sans-serif'}, xlabel='X label in Impact font', ylabel='Y label in Humor Sans'>
left = 1.0, right = 4.0

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
__________________________ test_xylim_changed_shared ___________________________

    def test_xylim_changed_shared():
        fig, axs = plt.subplots(2, sharex=True, sharey=True)
        events = []
        axs[1].callbacks.connect("xlim_changed", events.append)
        axs[1].callbacks.connect("ylim_changed", events.append)
>       axs[0].set(xlim=[1, 3], ylim=[2, 4])

lib/matplotlib/tests/test_axes.py:8804: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
lib/matplotlib/artist.py:147: in <lambda>
    cls.set = lambda self, **kwargs: Artist.set(self, **kwargs)
lib/matplotlib/artist.py:1221: in set
    return self._internal_update(cbook.normalize_kwargs(kwargs, self))
lib/matplotlib/artist.py:1213: in _internal_update
    return self._update_props(
lib/matplotlib/artist.py:1189: in _update_props
    ret.append(func(v))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Axes: >, left = 1, right = 3

    def set_xlim(self, left=None, right=None, *, emit=True, auto=False,
                 xmin=None, xmax=None):
        """
        Set the x-axis view limits.
    
        Parameters
        ----------
        left : float, optional
            The left xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
            The left and right xlims may also be passed as the tuple
            (*left*, *right*) as the first positional argument (or as
            the *left* keyword argument).
    
            .. ACCEPTS: (bottom: float, top: float)
    
        right : float, optional
            The right xlim in data coordinates. Passing *None* leaves the
            limit unchanged.
    
        emit : bool, default: True
            Whether to notify observers of limit change.
    
        auto : bool or None, default: False
            Whether to turn on autoscaling of the x-axis. True turns on,
            False turns off, None leaves unchanged.
    
        xmin, xmax : float, optional
            They are equivalent to left and right respectively, and it is an
            error to pass both *xmin* and *left* or *xmax* and *right*.
    
        Returns
        -------
        left, right : (float, float)
            The new x-axis limits in data coordinates.
    
        See Also
        --------
        get_xlim
        set_xbound, get_xbound
        invert_xaxis, xaxis_inverted
    
        Notes
        -----
        The *left* value may be greater than the *right* value, in which
        case the x-axis values will decrease from left to right.
    
        Examples
        --------
        >>> set_xlim(left, right)
        >>> set_xlim((left, right))
        >>> left, right = set_xlim(left, right)
    
        One limit may be left unchanged.
    
        >>> set_xlim(right=right_lim)
    
        Limits may be passed in reverse order to flip the direction of
        the x-axis. For example, suppose *x* represents the number of
        years before present. The x-axis limits might be set like the
        following so 5000 years ago is on the left of the plot and the
        present is on the right.
    
        >>> set_xlim(5000, 0)
        """
        if right is None and np.iterable(left):
            left, right = left
        if xmin is not None:
            if left is not None:
                raise TypeError("Cannot pass both 'left' and 'xmin'")
            left = xmin
        if xmax is not None:
            if right is not None:
                raise TypeError("Cannot pass both 'right' and 'xmax'")
            right = xmax
        result = self.xaxis._set_lim(left, right, emit=emit, auto=auto)  # Store the result of setting limits
        if emit:
            self.callbacks.process('xlim_changed', self)  # Emit xlim_changed event for the primary axis
            # Call all of the other x-axes that are shared with this one
>           for other in self._shared_x_axes.get_siblings(self):
E           AttributeError: 'Axes' object has no attribute '_shared_x_axes'

lib/matplotlib/axes/_base.py:3650: AttributeError
==================================== PASSES ====================================
=========================== short test summary info ============================
PASSED lib/matplotlib/tests/test_axes.py::test_invisible_axes[png]
PASSED lib/matplotlib/tests/test_axes.py::test_get_labels
PASSED lib/matplotlib/tests/test_axes.py::test_repr
PASSED lib/matplotlib/tests/test_axes.py::test_label_shift
PASSED lib/matplotlib/tests/test_axes.py::test_spy_invalid_kwargs
PASSED lib/matplotlib/tests/test_axes.py::test_funcformatter_auto_formatter
PASSED lib/matplotlib/tests/test_axes.py::test_strmethodformatter_auto_formatter
PASSED lib/matplotlib/tests/test_axes.py::test_twinx_cla
PASSED lib/matplotlib/tests/test_axes.py::test_twinx_axis_scales[png]
PASSED lib/matplotlib/tests/test_axes.py::test_twin_inherit_autoscale_setting
PASSED lib/matplotlib/tests/test_axes.py::test_subclass_clear_cla
PASSED lib/matplotlib/tests/test_axes.py::test_cla_not_redefined_internally
PASSED lib/matplotlib/tests/test_axes.py::test_nargs_stem
PASSED lib/matplotlib/tests/test_axes.py::test_nargs_legend
PASSED lib/matplotlib/tests/test_axes.py::test_nargs_pcolorfast
PASSED lib/matplotlib/tests/test_axes.py::test_arrow_empty
PASSED lib/matplotlib/tests/test_axes.py::test_annotate_default_arrow
PASSED lib/matplotlib/tests/test_axes.py::test_annotate_signature
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_kwarg_redundant
PASSED lib/matplotlib/tests/test_axes.py::test_structured_data
PASSED lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[png]
PASSED lib/matplotlib/tests/test_axes.py::test_axhspan_epoch[pdf]
PASSED lib/matplotlib/tests/test_axes.py::test_hexbin_log_clim
PASSED lib/matplotlib/tests/test_axes.py::test_imshow_norm_vminvmax
PASSED lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_x_input]
PASSED lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y1_input]
PASSED lib/matplotlib/tests/test_axes.py::test_fill_between_input[2d_y2_input]
PASSED lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_y_input]
PASSED lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x1_input]
PASSED lib/matplotlib/tests/test_axes.py::test_fill_betweenx_input[2d_x2_input]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorargs_5205
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorargs
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorargs_with_read_only
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorflaterror
PASSED lib/matplotlib/tests/test_axes.py::test_samesizepcolorflaterror
PASSED lib/matplotlib/tests/test_axes.py::test_nan_bar_values
PASSED lib/matplotlib/tests/test_axes.py::test_bar_ticklabel_fail
PASSED lib/matplotlib/tests/test_axes.py::test_bar_color_none_alpha
PASSED lib/matplotlib/tests/test_axes.py::test_bar_edgecolor_none_alpha
PASSED lib/matplotlib/tests/test_axes.py::test_bar_datetime_start
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_dates_pandas
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_capwidths
PASSED lib/matplotlib/tests/test_axes.py::test_bar_pandas
PASSED lib/matplotlib/tests/test_axes.py::test_bar_pandas_indexed
PASSED lib/matplotlib/tests/test_axes.py::test_pandas_minimal_plot
PASSED lib/matplotlib/tests/test_axes.py::test_hist_float16
PASSED lib/matplotlib/tests/test_axes.py::test_hist_unequal_bins_density
PASSED lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets
PASSED lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[date2num]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[datetime.datetime]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_datetime_datasets_bins[np.datetime64]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data0-1]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data1-1]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_with_empty_input[data2-2]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_zorder[bar-1]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_zorder[step-2]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_zorder[stepfilled-1]
PASSED lib/matplotlib/tests/test_axes.py::test_stairs_invalid_nan
PASSED lib/matplotlib/tests/test_axes.py::test_stairs_invalid_mismatch
PASSED lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update
PASSED lib/matplotlib/tests/test_axes.py::test_stairs_invalid_update2
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfillable
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_size_arg_size
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_norm_vminvmax
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[0.5-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case1-conversion]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[red-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[none-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[None-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case5-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[jaune-conversion]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case7-conversion]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case8-conversion]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case9-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case10-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case11-shape]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case12-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case13-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case14-conversion]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case15-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case16-shape]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case17-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case18-shape]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case19-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case20-shape]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case21-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case22-shape]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case23-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case24-shape]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case25-None]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case26-shape]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case27-conversion]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case28-conversion]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_c[c_case29-conversion]
PASSED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_singular_plural_arguments
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params0-expected_result0]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params1-expected_result1]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params2-expected_result2]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params3-expected_result3]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args[params4-expected_result4]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs0-None]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs1-None]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs2-r]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs3-expected_edgecolors3]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs4-r]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs5-face]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs6-none]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs7-r]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs8-r]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs9-r]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_edgecolors[kwargs10-g]
PASSED lib/matplotlib/tests/test_axes.py::test_parse_scatter_color_args_error
PASSED lib/matplotlib/tests/test_axes.py::test_pyplot_axes
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_bad_widths
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_bad_positions
PASSED lib/matplotlib/tests/test_axes.py::test_bxp_bad_capwidths
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_bad_medians
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_bad_ci
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_zorder
PASSED lib/matplotlib/tests/test_axes.py::test_boxplot_marker_behavior
PASSED lib/matplotlib/tests/test_axes.py::test_violinplot_bad_positions
PASSED lib/matplotlib/tests/test_axes.py::test_violinplot_bad_widths
PASSED lib/matplotlib/tests/test_axes.py::test_violinplot_bad_quantiles
PASSED lib/matplotlib/tests/test_axes.py::test_violinplot_outofrange_quantiles
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_colorcycle
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_shape
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_nonefmt
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_line_specific_kwargs
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_every_invalid
PASSED lib/matplotlib/tests/test_axes.py::test_xerr_yerr_not_negative
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth0]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[elinewidth1]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_linewidth_type[1]
PASSED lib/matplotlib/tests/test_axes.py::test_stem_args
PASSED lib/matplotlib/tests/test_axes.py::test_stem_markerfmt
PASSED lib/matplotlib/tests/test_axes.py::test_stem_dates
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_geometry
PASSED lib/matplotlib/tests/test_axes.py::test_hist_step_geometry
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stepfilled_bottom_geometry
PASSED lib/matplotlib/tests/test_axes.py::test_hist_step_bottom_geometry
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_geometry
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_geometry
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_bottom_geometry
PASSED lib/matplotlib/tests/test_axes.py::test_hist_stacked_step_bottom_geometry
PASSED lib/matplotlib/tests/test_axes.py::test_hist_barstacked_bottom_unchanged
PASSED lib/matplotlib/tests/test_axes.py::test_hist_emptydata
PASSED lib/matplotlib/tests/test_axes.py::test_hist_labels
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors0]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors1]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_colors[colors2]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_alpha
PASSED lib/matplotlib/tests/test_axes.py::test_empty_eventplot
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data0]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data0]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data0]
PASSED lib/matplotlib/tests/test_axes.py::test_vlines_default
PASSED lib/matplotlib/tests/test_axes.py::test_hlines_default
PASSED lib/matplotlib/tests/test_axes.py::test_subplot_key_hash
PASSED lib/matplotlib/tests/test_axes.py::test_specgram_origin_kwarg
PASSED lib/matplotlib/tests/test_axes.py::test_twin_remove[png]
PASSED lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[both-True-True]
PASSED lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[major-True-False]
PASSED lib/matplotlib/tests/test_axes.py::test_rcparam_grid_minor[minor-False-True]
PASSED lib/matplotlib/tests/test_axes.py::test_grid
PASSED lib/matplotlib/tests/test_axes.py::test_reset_grid
PASSED lib/matplotlib/tests/test_axes.py::test_reset_ticks[png]
PASSED lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvline-axhline-args0]
PASSED lib/matplotlib/tests/test_axes.py::test_axline_minmax[axvspan-axhspan-args1]
PASSED lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_1
PASSED lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args0-kwargs0-axis\\(\\) takes from 0 to 1 positional arguments but 2 were given]
PASSED lib/matplotlib/tests/test_axes.py::test_axis_errors[ValueError-args1-kwargs1-Unrecognized string 'foo' to axis; try 'on' or 'off']
PASSED lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args2-kwargs2-The first argument to axis*]
PASSED lib/matplotlib/tests/test_axes.py::test_axis_method_errors
PASSED lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[x]
PASSED lib/matplotlib/tests/test_axes.py::test_twin_with_aspect[y]
PASSED lib/matplotlib/tests/test_axes.py::test_text_labelsize
PASSED lib/matplotlib/tests/test_axes.py::test_pie_get_negative_values
PASSED lib/matplotlib/tests/test_axes.py::test_set_ticks_kwargs_raise_error_without_labels
PASSED lib/matplotlib/tests/test_axes.py::test_set_ticks_with_labels[png]
PASSED lib/matplotlib/tests/test_axes.py::test_xticks_bad_args
PASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args0-kwargs0-margin must be greater than -0\\.5]
PASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args1-kwargs1-margin must be greater than -0\\.5]
PASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args2-kwargs2-margin must be greater than -0\\.5]
PASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[ValueError-args3-kwargs3-margin must be greater than -0\\.5]
PASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args4-kwargs4-Cannot pass both positional and keyword arguments for x and/or y]
PASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args5-kwargs5-Cannot pass both positional and keyword arguments for x and/or y]
PASSED lib/matplotlib/tests/test_axes.py::test_margins_errors[TypeError-args6-kwargs6-Must pass a single positional argument]
PASSED lib/matplotlib/tests/test_axes.py::test_length_one_hist
PASSED lib/matplotlib/tests/test_axes.py::test_color_None
PASSED lib/matplotlib/tests/test_axes.py::test_color_alias
PASSED lib/matplotlib/tests/test_axes.py::test_numerical_hist_label
PASSED lib/matplotlib/tests/test_axes.py::test_unicode_hist_label
PASSED lib/matplotlib/tests/test_axes.py::test_rc_spines[png]
PASSED lib/matplotlib/tests/test_axes.py::test_rc_grid[png]
PASSED lib/matplotlib/tests/test_axes.py::test_rc_tick
PASSED lib/matplotlib/tests/test_axes.py::test_rc_major_minor_tick
PASSED lib/matplotlib/tests/test_axes.py::test_bad_plot_args
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy0-AxesImage]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy1-AxesImage]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy2-AxesImage]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy4-QuadMesh]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy0-AxesImage]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy1-AxesImage]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy2-AxesImage]
PASSED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy4-QuadMesh]
PASSED lib/matplotlib/tests/test_axes.py::test_shared_bool
PASSED lib/matplotlib/tests/test_axes.py::test_violin_point_mass
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs0]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs1]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs2]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs3]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs4]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs5]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs6]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs7]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs8]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs9]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs10]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs11]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs12]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs13]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs14]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs15]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs16]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs17]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs18]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs19]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs20]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs21]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs22]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs23]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs24]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs25]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs26]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs27]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs28]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs29]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs30]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs31]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs32]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs33]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs34]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs35]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs36]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs37]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs38]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs39]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs40]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs41]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs42]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs43]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs44]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs45]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs46]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs47]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs48]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs49]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs50]
PASSED lib/matplotlib/tests/test_axes.py::test_errorbar_inputs_shotgun[kwargs51]
PASSED lib/matplotlib/tests/test_axes.py::test_title_pad
PASSED lib/matplotlib/tests/test_axes.py::test_title_location_roundtrip
PASSED lib/matplotlib/tests/test_axes.py::test_title_location_shared[True]
PASSED lib/matplotlib/tests/test_axes.py::test_title_location_shared[False]
PASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-y]
PASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-y]
PASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-y]
PASSED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-y]
PASSED lib/matplotlib/tests/test_axes.py::test_auto_numticks
PASSED lib/matplotlib/tests/test_axes.py::test_broken_barh_empty
PASSED lib/matplotlib/tests/test_axes.py::test_broken_barh_timedelta
PASSED lib/matplotlib/tests/test_axes.py::test_pandas_pcolormesh
PASSED lib/matplotlib/tests/test_axes.py::test_pandas_indexing_dates
PASSED lib/matplotlib/tests/test_axes.py::test_pandas_errorbar_indexing
PASSED lib/matplotlib/tests/test_axes.py::test_pandas_index_shape
PASSED lib/matplotlib/tests/test_axes.py::test_pandas_indexing_hist
PASSED lib/matplotlib/tests/test_axes.py::test_axis_get_tick_params
PASSED lib/matplotlib/tests/test_axes.py::test_axis_set_tick_params_labelsize_labelcolor
PASSED lib/matplotlib/tests/test_axes.py::test_axes_tick_params_gridlines
PASSED lib/matplotlib/tests/test_axes.py::test_axes_tick_params_ylabelside
PASSED lib/matplotlib/tests/test_axes.py::test_axes_tick_params_xlabelside
PASSED lib/matplotlib/tests/test_axes.py::test_none_kwargs
PASSED lib/matplotlib/tests/test_axes.py::test_bar_uint8
PASSED lib/matplotlib/tests/test_axes.py::test_titletwiny
PASSED lib/matplotlib/tests/test_axes.py::test_titlesetpos
PASSED lib/matplotlib/tests/test_axes.py::test_title_xticks_top
PASSED lib/matplotlib/tests/test_axes.py::test_title_xticks_top_both
PASSED lib/matplotlib/tests/test_axes.py::test_title_above_offset[left title moved]
PASSED lib/matplotlib/tests/test_axes.py::test_title_above_offset[center title kept]
PASSED lib/matplotlib/tests/test_axes.py::test_title_above_offset[both titles aligned]
PASSED lib/matplotlib/tests/test_axes.py::test_title_no_move_off_page
PASSED lib/matplotlib/tests/test_axes.py::test_offset_label_color
PASSED lib/matplotlib/tests/test_axes.py::test_offset_text_visible
PASSED lib/matplotlib/tests/test_axes.py::test_barb_units
PASSED lib/matplotlib/tests/test_axes.py::test_quiver_units
PASSED lib/matplotlib/tests/test_axes.py::test_bar_color_cycle
PASSED lib/matplotlib/tests/test_axes.py::test_fillbetween_cycle
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_legend
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args0-kwargs0-lineoffsets cannot be empty]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args1-kwargs1-linelengths cannot be empty]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args2-kwargs2-linewidths cannot be empty]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args3-kwargs3-linestyles cannot be empty]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args4-kwargs4-alpha cannot be empty]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args5-kwargs5-positions must be one-dimensional]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args6-kwargs6-lineoffsets and positions are unequal sized sequences]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args7-kwargs7-linelengths and positions are unequal sized sequences]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args8-kwargs8-linewidths and positions are unequal sized sequences]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args9-kwargs9-linestyles and positions are unequal sized sequences]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args10-kwargs10-alpha and positions are unequal sized sequences]
PASSED lib/matplotlib/tests/test_axes.py::test_eventplot_errors[ValueError-args11-kwargs11-colors and positions are unequal sized sequences]
PASSED lib/matplotlib/tests/test_axes.py::test_bar_broadcast_args
PASSED lib/matplotlib/tests/test_axes.py::test_invalid_axis_limits
PASSED lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-symlog]
PASSED lib/matplotlib/tests/test_axes.py::test_zero_linewidth
PASSED lib/matplotlib/tests/test_axes.py::test_empty_errorbar_legend
PASSED lib/matplotlib/tests/test_axes.py::test_tick_padding_tightbbox
PASSED lib/matplotlib/tests/test_axes.py::test_inset_subclass
PASSED lib/matplotlib/tests/test_axes.py::test_set_position
PASSED lib/matplotlib/tests/test_axes.py::test_gettightbbox_ignore_nan
PASSED lib/matplotlib/tests/test_axes.py::test_secondary_fail
PASSED lib/matplotlib/tests/test_axes.py::test_secondary_repr
PASSED lib/matplotlib/tests/test_axes.py::test_normal_axes
PASSED lib/matplotlib/tests/test_axes.py::test_nodecorator
PASSED lib/matplotlib/tests/test_axes.py::test_displaced_spine
PASSED lib/matplotlib/tests/test_axes.py::test_tickdirs
PASSED lib/matplotlib/tests/test_axes.py::test_minor_accountedfor
PASSED lib/matplotlib/tests/test_axes.py::test_axis_bool_arguments[png]
PASSED lib/matplotlib/tests/test_axes.py::test_hist_auto_bins
PASSED lib/matplotlib/tests/test_axes.py::test_hist_nan_data
PASSED lib/matplotlib/tests/test_axes.py::test_hist_range_and_density
PASSED lib/matplotlib/tests/test_axes.py::test_bar_errbar_zorder
PASSED lib/matplotlib/tests/test_axes.py::test_set_ticks_inverted
PASSED lib/matplotlib/tests/test_axes.py::test_box_aspect_custom_position
PASSED lib/matplotlib/tests/test_axes.py::test_bbox_aspect_axes_init
PASSED lib/matplotlib/tests/test_axes.py::test_set_aspect_negative
PASSED lib/matplotlib/tests/test_axes.py::test_invisible_axes_events
PASSED lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_markercolor
PASSED lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_markercolor
PASSED lib/matplotlib/tests/test_axes.py::test_xtickcolor_is_not_xticklabelcolor
PASSED lib/matplotlib/tests/test_axes.py::test_ytickcolor_is_not_yticklabelcolor
PASSED lib/matplotlib/tests/test_axes.py::test_xaxis_offsetText_color
PASSED lib/matplotlib/tests/test_axes.py::test_yaxis_offsetText_color
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-small]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-small]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[small]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[medium]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[large]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[x-large]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[xx-large]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[larger]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[smaller]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[8]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[10]
PASSED lib/matplotlib/tests/test_axes.py::test_relative_ticklabel_sizes[12]
PASSED lib/matplotlib/tests/test_axes.py::test_sharing_does_not_link_positions
PASSED lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[left]
PASSED lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[center]
PASSED lib/matplotlib/tests/test_axes.py::test_ylabel_ha_with_position[right]
PASSED lib/matplotlib/tests/test_axes.py::test_patch_bounds
PASSED lib/matplotlib/tests/test_axes.py::test_warn_ignored_scatter_kwargs
PASSED lib/matplotlib/tests/test_axes.py::test_empty_line_plots
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-f-'f' is not a valid format string \\(unrecognized character 'f'\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-o+-'o\\+' is not a valid format string \\(two marker symbols\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:--':-' is not a valid format string \\(two linestyle symbols\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-rk-'rk' is not a valid format string \\(two color symbols\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[None-:o-r-':o-r' is not a valid format string \\(two linestyle symbols\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-f-'f' is not a valid format string \\(unrecognized character 'f'\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-o+-'o\\+' is not a valid format string \\(two marker symbols\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:--':-' is not a valid format string \\(two linestyle symbols\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-rk-'rk' is not a valid format string \\(two color symbols\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_format_errors[data1-:o-r-':o-r' is not a valid format string \\(two linestyle symbols\\)]
PASSED lib/matplotlib/tests/test_axes.py::test_plot_errors
PASSED lib/matplotlib/tests/test_axes.py::test_bar_leading_nan
PASSED lib/matplotlib/tests/test_axes.py::test_scatter_color_repr_error
PASSED lib/matplotlib/tests/test_axes.py::test_rc_axes_label_formatting
PASSED lib/matplotlib/tests/test_axes.py::test_ecdf_invalid
PASSED lib/matplotlib/tests/test_axes.py::test_set_secondary_axis_color
SKIPPED [54] ../opt/miniconda3/envs/testbed/lib/python3.11/contextlib.py:81: Cannot compare svg files because Inkscape is not installed
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[png] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[pdf] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_vertical[svg] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[png] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[pdf] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_horizontal[svg] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_rc[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_rc[pdf] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_label_loc_rc[svg] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_acorr[png] - AttributeError: '...
FAILED lib/matplotlib/tests/test_axes.py::test_acorr_integers[png] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_spy[png] - AttributeError: 'Ax...
FAILED lib/matplotlib/tests/test_axes.py::test_matshow[png] - AttributeError:...
FAILED lib/matplotlib/tests/test_axes.py::test_formatter_ticker[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_formatter_ticker[pdf] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[png]
FAILED lib/matplotlib/tests/test_axes.py::test_twin_axis_locators_formatters[pdf]
FAILED lib/matplotlib/tests/test_axes.py::test_twin_units[x] - AttributeError...
FAILED lib/matplotlib/tests/test_axes.py::test_twin_units[y] - AttributeError...
FAILED lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-x] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_twin_logscale[png-y] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_inverted_cla - AttributeError:...
FAILED lib/matplotlib/tests/test_axes.py::test_minorticks_on_rcParams_both[png]
FAILED lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[png] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_range[pdf] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_autoscale_tight - AttributeErr...
FAILED lib/matplotlib/tests/test_axes.py::test_autoscale_log_shared - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_use_sticky_edges - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_sticky_shared_axes[png] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_basic_annotate[png] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_basic_annotate[pdf] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_arrow_simple[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_arrow_in_view - AttributeError...
FAILED lib/matplotlib/tests/test_axes.py::test_fill_units[png] - AttributeErr...
FAILED lib/matplotlib/tests/test_axes.py::test_errorbar_dashes[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_single_point[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_single_point[pdf] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_single_date[png] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_shaped_data[png] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_aitoff_proj[png] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[png] - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_axvspan_epoch[pdf] - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_hexbin_extent[png] - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_hexbin_empty[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_hexbin_pickable - AttributeErr...
FAILED lib/matplotlib/tests/test_axes.py::test_hexbin_log[png] - AttributeErr...
FAILED lib/matplotlib/tests/test_axes.py::test_hexbin_linear[png] - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_hexbin_mincnt_behavior_upon_C_parameter[png]
FAILED lib/matplotlib/tests/test_axes.py::test_inverted_limits - AttributeErr...
FAILED lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_nonfinite_limits[pdf] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-scatter]
FAILED lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-plot] - ...
FAILED lib/matplotlib/tests/test_axes.py::test_limits_empty_data[png-fill_between]
FAILED lib/matplotlib/tests/test_axes.py::test_imshow[png] - AttributeError: ...
FAILED lib/matplotlib/tests/test_axes.py::test_imshow[pdf] - AttributeError: ...
FAILED lib/matplotlib/tests/test_axes.py::test_imshow_clip[png] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_imshow_clip[pdf] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[png]
FAILED lib/matplotlib/tests/test_axes.py::test_polycollection_joinstyle[pdf]
FAILED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[png]
FAILED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate[pdf]
FAILED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[png]
FAILED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_decreasing[pdf]
FAILED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[png]
FAILED lib/matplotlib/tests/test_axes.py::test_fill_between_interpolate_nan[pdf]
FAILED lib/matplotlib/tests/test_axes.py::test_symlog[pdf] - AttributeError: ...
FAILED lib/matplotlib/tests/test_axes.py::test_symlog2[pdf] - AttributeError:...
FAILED lib/matplotlib/tests/test_axes.py::test_pcolormesh[png] - AttributeErr...
FAILED lib/matplotlib/tests/test_axes.py::test_pcolormesh[pdf] - AttributeErr...
FAILED lib/matplotlib/tests/test_axes.py::test_pcolormesh_small[eps] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_pcolormesh_alpha[pdf] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_pcolormesh_rgba[png-3-1] - Att...
FAILED lib/matplotlib/tests/test_axes.py::test_pcolormesh_rgba[png-4-0.5] - A...
FAILED lib/matplotlib/tests/test_axes.py::test_pcolormesh_datetime_axis[png]
FAILED lib/matplotlib/tests/test_axes.py::test_pcolor_datetime_axis[png] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_pcolornearest[png] - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_pcolornearestunits[png] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-False] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_pcolorauto[png-True] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_canonical[png] - AttributeErro...
FAILED lib/matplotlib/tests/test_axes.py::test_canonical[pdf] - AttributeErro...
FAILED lib/matplotlib/tests/test_axes.py::test_arc_angles[png] - AttributeErr...
FAILED lib/matplotlib/tests/test_axes.py::test_arc_ellipse[png] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_arc_ellipse[pdf] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_marker_as_markerstyle - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_markevery[png] - AttributeErro...
FAILED lib/matplotlib/tests/test_axes.py::test_markevery[pdf] - AttributeErro...
FAILED lib/matplotlib/tests/test_axes.py::test_markevery_line[png] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_markevery_line[pdf] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[png]
FAILED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales[pdf]
FAILED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[png]
FAILED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_zoomed[pdf]
FAILED lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[png] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_markevery_log_scales[pdf] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_markevery_polar[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_markevery_polar[pdf] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[png]
FAILED lib/matplotlib/tests/test_axes.py::test_markevery_linear_scales_nans[pdf]
FAILED lib/matplotlib/tests/test_axes.py::test_marker_edges[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_marker_edges[pdf] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_tick_label_single[png] - A...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple[png]
FAILED lib/matplotlib/tests/test_axes.py::test_bar_tick_label_multiple_old_alignment[png]
FAILED lib/matplotlib/tests/test_axes.py::test_bar_decimal_center[png] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_barh_decimal_center[png] - Att...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_decimal_width[png] - Attri...
FAILED lib/matplotlib/tests/test_axes.py::test_barh_decimal_height[png] - Att...
FAILED lib/matplotlib/tests/test_axes.py::test_barh_tick_label[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_timedelta - AttributeError...
FAILED lib/matplotlib/tests/test_axes.py::test_pcolor_regression - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_hatches[png] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_hatches[pdf] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_hatches[svg] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_labels[x-1-x-expected_labels0-x]
FAILED lib/matplotlib/tests/test_axes.py::test_bar_labels[x1-width1-label1-expected_labels1-_nolegend_]
FAILED lib/matplotlib/tests/test_axes.py::test_bar_labels[x2-width2-label2-expected_labels2-_nolegend_]
FAILED lib/matplotlib/tests/test_axes.py::test_bar_labels[x3-width3-bars-expected_labels3-bars]
FAILED lib/matplotlib/tests/test_axes.py::test_bar_labels_length - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_log[png] - AttributeError...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_log[pdf] - AttributeError...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_log_2[png] - AttributeErr...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_log_barstacked - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_bar_empty[png] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_step_empty[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_step_filled[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_density[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_stairs[png] - AttributeError: ...
FAILED lib/matplotlib/tests/test_axes.py::test_stairs_fill[png] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_stairs_update[png] - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_stairs_baseline_0[png] - Attri...
FAILED lib/matplotlib/tests/test_axes.py::test_stairs_empty - AttributeError:...
FAILED lib/matplotlib/tests/test_axes.py::test_stairs_options[png] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_stairs_datetime[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_stairs_edge_handling[png] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_contour_hatching[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_contour_hatching[pdf] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_contour_colorbar[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_contour_colorbar[pdf] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_hist2d[png] - AttributeError: ...
FAILED lib/matplotlib/tests/test_axes.py::test_hist2d[pdf] - AttributeError: ...
FAILED lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_hist2d_transpose[pdf] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_hist2d_density - AttributeErro...
FAILED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[png]
FAILED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_plot[pdf]
FAILED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_marker[png]
FAILED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_2D[png]
FAILED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_decimal[png]
FAILED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs0]
FAILED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs1]
FAILED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs2]
FAILED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_color_warning[kwargs3]
FAILED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_unfilled
FAILED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_edgecolor_RGB
FAILED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_invalid_color[png]
FAILED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_no_invalid_color[png]
FAILED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_point[png]
FAILED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_different_shapes[png]
FAILED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_single_color_c[png]
FAILED lib/matplotlib/tests/test_axes.py::TestScatter::test_scatter_linewidths
FAILED lib/matplotlib/tests/test_axes.py::test_as_mpl_axes_api - AttributeErr...
FAILED lib/matplotlib/tests/test_axes.py::test_log_scales - AttributeError: '...
FAILED lib/matplotlib/tests/test_axes.py::test_log_scales_no_data - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_log_scales_invalid - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_stackplot[png] - AttributeErro...
FAILED lib/matplotlib/tests/test_axes.py::test_stackplot[pdf] - AttributeErro...
FAILED lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[png] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_stackplot_baseline[pdf] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_baseline[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_rangewhis[png] - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_percentilewhis[png] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_with_xlabels[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_horizontal[png] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_with_ylabels[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_patchartist[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_custompatchartist[png] - A...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_customoutlier[png] - Attri...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_showcustommean[png] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_custombox[png] - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_custommedian[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_customcap[png] - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_customwhisker[png] - Attri...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_shownotches[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_nocaps[png] - AttributeErr...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_nobox[png] - AttributeErro...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_no_flier_stats[png] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_showmean[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_showmeanasline[png] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_scalarwidth[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_customwidths[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_custompositions[png] - Att...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidths[png] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_bxp_custom_capwidth[png] - Att...
FAILED lib/matplotlib/tests/test_axes.py::test_boxplot[png] - AttributeError:...
FAILED lib/matplotlib/tests/test_axes.py::test_boxplot[pdf] - AttributeError:...
FAILED lib/matplotlib/tests/test_axes.py::test_boxplot_custom_capwidths[png]
FAILED lib/matplotlib/tests/test_axes.py::test_boxplot_sym2[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_boxplot_sym[png] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_boxplot_autorange_whiskers[png]
FAILED lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[png] - A...
FAILED lib/matplotlib/tests/test_axes.py::test_boxplot_rc_parameters[pdf] - A...
FAILED lib/matplotlib/tests/test_axes.py::test_boxplot_with_CIarray[png] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_boxplot_no_weird_whisker[png]
FAILED lib/matplotlib/tests/test_axes.py::test_boxplot_mod_artist_after_plotting[png]
FAILED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_baseline[png]
FAILED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmeans[png]
FAILED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showextrema[png]
FAILED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showmedians[png]
FAILED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_showall[png]
FAILED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_10[png]
FAILED lib/matplotlib/tests/test_axes.py::test_vert_violinplot_custompoints_200[png]
FAILED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_baseline[png]
FAILED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmedians[png]
FAILED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showmeans[png]
FAILED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showextrema[png]
FAILED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_showall[png]
FAILED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_10[png]
FAILED lib/matplotlib/tests/test_axes.py::test_horiz_violinplot_custompoints_200[png]
FAILED lib/matplotlib/tests/test_axes.py::test_violinplot_single_list_quantiles[png]
FAILED lib/matplotlib/tests/test_axes.py::test_violinplot_pandas_series[png]
FAILED lib/matplotlib/tests/test_axes.py::test_manage_xticks - AttributeError...
FAILED lib/matplotlib/tests/test_axes.py::test_boxplot_not_single - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_tick_space_size_0 - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_errorbar[png] - AttributeError...
FAILED lib/matplotlib/tests/test_axes.py::test_errorbar[pdf] - AttributeError...
FAILED lib/matplotlib/tests/test_axes.py::test_mixed_errorbar_polar_caps[png]
FAILED lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[png] - A...
FAILED lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[pdf] - A...
FAILED lib/matplotlib/tests/test_axes.py::test_errorbar_cycle_ecolor[svg] - A...
FAILED lib/matplotlib/tests/test_axes.py::test_errorbar_limits[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_errorbar_limits[pdf] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_errorbar_with_prop_cycle[png]
FAILED lib/matplotlib/tests/test_axes.py::test_errorbar_every[png] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_errorbar_every[pdf] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_errorbar_every[svg] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_errorbar_nan[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[png]
FAILED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled[pdf]
FAILED lib/matplotlib/tests/test_axes.py::test_hist_offset[png] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_offset[pdf] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_step[png] - AttributeErro...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_step_horiz[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[png] - A...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_stacked_weighted[pdf] - A...
FAILED lib/matplotlib/tests/test_axes.py::test_stem[png] - AttributeError: 'A...
FAILED lib/matplotlib/tests/test_axes.py::test_stem_orientation[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[png]
FAILED lib/matplotlib/tests/test_axes.py::test_hist_stacked_stepfilled_alpha[pdf]
FAILED lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[png] - Attri...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_stacked_step[pdf] - Attri...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[png] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_stacked_density[pdf] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_step_bottom[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_hist_stacked_bar[pdf] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_transparent_markers[png] - Att...
FAILED lib/matplotlib/tests/test_axes.py::test_transparent_markers[pdf] - Att...
FAILED lib/matplotlib/tests/test_axes.py::test_rgba_markers[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_rgba_markers[pdf] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_mollweide_grid[png] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_mollweide_grid[pdf] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_mollweide_forward_inverse_closure
FAILED lib/matplotlib/tests/test_axes.py::test_mollweide_inverse_forward_closure
FAILED lib/matplotlib/tests/test_axes.py::test_alpha[png] - AttributeError: '...
FAILED lib/matplotlib/tests/test_axes.py::test_alpha[pdf] - AttributeError: '...
FAILED lib/matplotlib/tests/test_axes.py::test_eventplot[png] - AttributeErro...
FAILED lib/matplotlib/tests/test_axes.py::test_eventplot[pdf] - AttributeErro...
FAILED lib/matplotlib/tests/test_axes.py::test_eventplot_defaults[png] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_eventplot_problem_kwargs[png]
FAILED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data1]
FAILED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[None-data2]
FAILED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data1]
FAILED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[vertical-data2]
FAILED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data1]
FAILED lib/matplotlib/tests/test_axes.py::test_eventplot_orientation[horizontal-data2]
FAILED lib/matplotlib/tests/test_axes.py::test_eventplot_units_list[png] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_marker_styles[png] - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_markers_fillstyle_rcparams[png]
FAILED lib/matplotlib/tests/test_axes.py::test_vertex_markers[png] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[png] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_eb_line_zorder[pdf] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_axline_loglog[png] - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_axline_loglog[pdf] - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_axline_loglog[svg] - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_axline[png] - AttributeError: ...
FAILED lib/matplotlib/tests/test_axes.py::test_axline[pdf] - AttributeError: ...
FAILED lib/matplotlib/tests/test_axes.py::test_axline[svg] - AttributeError: ...
FAILED lib/matplotlib/tests/test_axes.py::test_axline_transaxes[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_axline_transaxes[pdf] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_axline_transaxes[svg] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[png]
FAILED lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[pdf]
FAILED lib/matplotlib/tests/test_axes.py::test_axline_transaxes_panzoom[svg]
FAILED lib/matplotlib/tests/test_axes.py::test_axline_args - AttributeError: ...
FAILED lib/matplotlib/tests/test_axes.py::test_vlines[png] - AttributeError: ...
FAILED lib/matplotlib/tests/test_axes.py::test_hlines[png] - AttributeError: ...
FAILED lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data0]
FAILED lib/matplotlib/tests/test_axes.py::test_lines_with_colors[png-data1]
FAILED lib/matplotlib/tests/test_axes.py::test_vlines_hlines_blended_transform[png]
FAILED lib/matplotlib/tests/test_axes.py::test_step_linestyle[png] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_step_linestyle[pdf] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_mixed_collection[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_mixed_collection[pdf] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_specgram[png] - AttributeError...
FAILED lib/matplotlib/tests/test_axes.py::test_specgram_magnitude[png] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_specgram_angle[png] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_specgram_fs_none - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_specgram_origin_rcparam[png]
FAILED lib/matplotlib/tests/test_axes.py::test_psd_csd[png] - AttributeError:...
FAILED lib/matplotlib/tests/test_axes.py::test_spectrum[png] - AttributeError...
FAILED lib/matplotlib/tests/test_axes.py::test_psd_csd_edge_cases - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_twin_spines[png] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_twin_spines_on_top[png] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_vline_limit - AttributeError: ...
FAILED lib/matplotlib/tests/test_axes.py::test_empty_shared_subplots - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_2 - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_shared_with_aspect_3 - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_shared_aspect_error - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_axis_errors[TypeError-args3-kwargs3-axis\\(\\) got an unexpected keyword argument 'foo']
FAILED lib/matplotlib/tests/test_axes.py::test_relim_visible_only - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_default[png] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_linewidth_0[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_center_radius[png] - Attri...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_linewidth_2[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_ccw_true[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_frame_grid[png] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_rotatelabels_true[png] - A...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_nolabel_but_legend[png] - ...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_shadow[png] - AttributeErr...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_textprops - AttributeError...
FAILED lib/matplotlib/tests/test_axes.py::test_normalize_kwarg_pie - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_hatch_single[png] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_hatch_single[pdf] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_hatch_single[svg] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_hatch_multi[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_hatch_multi[pdf] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_pie_hatch_multi[svg] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_set_get_ticklabels[png] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_subsampled_ticklabels - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_mismatched_ticklabels - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_empty_ticks_fixed_loc - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_retain_tick_visibility[png] - ...
FAILED lib/matplotlib/tests/test_axes.py::test_tick_label_update - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_o_marker_path_snap[png] - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_margins - AttributeError: 'Axe...
FAILED lib/matplotlib/tests/test_axes.py::test_set_margin_updates_limits - At...
FAILED lib/matplotlib/tests/test_axes.py::test_set_xy_bound - AttributeError:...
FAILED lib/matplotlib/tests/test_axes.py::test_pathological_hexbin - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_move_offsetlabel - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_square_plot - AttributeError: ...
FAILED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data0-xy3-PcolorImage]
FAILED lib/matplotlib/tests/test_axes.py::test_pcolorfast[data1-xy3-PcolorImage]
FAILED lib/matplotlib/tests/test_axes.py::test_shared_scale - AttributeError:...
FAILED lib/matplotlib/tests/test_axes.py::test_dash_offset[png] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_dash_offset[pdf] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_loglog[png] - AttributeError: ...
FAILED lib/matplotlib/tests/test_axes.py::test_loglog_nonpos[png] - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_axes_margins - AttributeError:...
FAILED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[gca-x] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots-x]
FAILED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[subplots_shared-x]
FAILED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes[add_axes-x]
FAILED lib/matplotlib/tests/test_axes.py::test_remove_shared_axes_relim - Att...
FAILED lib/matplotlib/tests/test_axes.py::test_shared_axes_autoscale - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_adjust_numtick_aspect - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_auto_numticks_log - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_pandas_bar_align_center - Attr...
FAILED lib/matplotlib/tests/test_axes.py::test_date_timezone_x[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_date_timezone_y[png] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_date_timezone_x_and_y[png] - A...
FAILED lib/matplotlib/tests/test_axes.py::test_axisbelow[png] - AttributeErro...
FAILED lib/matplotlib/tests/test_axes.py::test_large_offset - AttributeError:...
FAILED lib/matplotlib/tests/test_axes.py::test_tick_param_label_rotation - At...
FAILED lib/matplotlib/tests/test_axes.py::test_log_margins - AttributeError: ...
FAILED lib/matplotlib/tests/test_axes.py::test_color_length_mismatch - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_minorticks_on[symlog-log] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-symlog] - At...
FAILED lib/matplotlib/tests/test_axes.py::test_minorticks_on[log-log] - Attri...
FAILED lib/matplotlib/tests/test_axes.py::test_twinx_knows_limits - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_plot_decimal[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_markerfacecolor_none_alpha[png]
FAILED lib/matplotlib/tests/test_axes.py::test_inset - AttributeError: 'Axes'...
FAILED lib/matplotlib/tests/test_axes.py::test_zoom_inset - AttributeError: '...
FAILED lib/matplotlib/tests/test_axes.py::test_inset_polar[png] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_inset_projection - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-False]
FAILED lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[False-True]
FAILED lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-False]
FAILED lib/matplotlib/tests/test_axes.py::test_indicate_inset_inverted[True-True]
FAILED lib/matplotlib/tests/test_axes.py::test_spines_properbbox_after_zoom
FAILED lib/matplotlib/tests/test_axes.py::test_limits_after_scroll_zoom - Att...
FAILED lib/matplotlib/tests/test_axes.py::test_scatter_series_non_zero_index
FAILED lib/matplotlib/tests/test_axes.py::test_scatter_empty_data - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_annotate_across_transforms[png]
FAILED lib/matplotlib/tests/test_axes.py::test_secondary_xy[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_secondary_resize - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_secondary_minorloc - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_secondary_formatter - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_axis_options[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_axis_extent_arg - AttributeErr...
FAILED lib/matplotlib/tests/test_axes.py::test_axis_extent_arg2 - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_box
FAILED lib/matplotlib/tests/test_axes.py::test_aspect_nonlinear_adjustable_datalim
FAILED lib/matplotlib/tests/test_axes.py::test_box_aspect - AttributeError: '...
FAILED lib/matplotlib/tests/test_axes.py::test_redraw_in_frame - AttributeErr...
FAILED lib/matplotlib/tests/test_axes.py::test_unautoscale[True-x] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_unautoscale[True-y] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_unautoscale[False-x] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_unautoscale[False-y] - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_unautoscale[None-x] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_unautoscale[None-y] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_polar_interpolation_steps_variable_r[png]
FAILED lib/matplotlib/tests/test_axes.py::test_autoscale_tiny_sticky - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_multiplot_autoscale - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_2dcolor_plot[pdf] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_shared_axes_clear[png] - Attri...
FAILED lib/matplotlib/tests/test_axes.py::test_shared_axes_retick - Attribute...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical - ...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_label_location_vertical_yinverted
FAILED lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal
FAILED lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_yinverted
FAILED lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xinverted
FAILED lib/matplotlib/tests/test_axes.py::test_bar_label_location_horizontal_xyinverted
FAILED lib/matplotlib/tests/test_axes.py::test_bar_label_location_center - At...
FAILED lib/matplotlib/tests/test_axes.py::test_centered_bar_label_label_beyond_limits
FAILED lib/matplotlib/tests/test_axes.py::test_bar_label_location_errorbars
FAILED lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[%.2f] - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[{:.2f}] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_label_fmt[format] - Attrib...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_label_fmt_error - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_label_labels - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata - Attribut...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_label_nan_ydata_inverted
FAILED lib/matplotlib/tests/test_axes.py::test_nan_barlabels - AttributeError...
FAILED lib/matplotlib/tests/test_axes.py::test_artist_sublists - AttributeErr...
FAILED lib/matplotlib/tests/test_axes.py::test_plot_format - AttributeError: ...
FAILED lib/matplotlib/tests/test_axes.py::test_automatic_legend - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_clim - AttributeError: 'Axes' ...
FAILED lib/matplotlib/tests/test_axes.py::test_bezier_autoscale - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_small_autoscale - AttributeErr...
FAILED lib/matplotlib/tests/test_axes.py::test_get_xticklabel - AttributeErro...
FAILED lib/matplotlib/tests/test_axes.py::test_bar_all_nan[png] - AttributeEr...
FAILED lib/matplotlib/tests/test_axes.py::test_extent_units[png] - AttributeE...
FAILED lib/matplotlib/tests/test_axes.py::test_cla_clears_children_axes_and_fig
FAILED lib/matplotlib/tests/test_axes.py::test_zorder_and_explicit_rasterization
FAILED lib/matplotlib/tests/test_axes.py::test_preset_clip_paths[png] - Attri...
FAILED lib/matplotlib/tests/test_axes.py::test_ecdf[png] - AttributeError: 'A...
FAILED lib/matplotlib/tests/test_axes.py::test_fill_between_axes_limits - Att...
FAILED lib/matplotlib/tests/test_axes.py::test_tick_param_labelfont - Attribu...
FAILED lib/matplotlib/tests/test_axes.py::test_xylim_changed_shared - Attribu...
=========== 453 failed, 377 passed, 54 skipped in 266.50s (0:04:26) ============
+ git checkout 00afcc0c6d4d2e4390338127f05b8f4fdb4e7087 lib/matplotlib/tests/test_axes.py
Updated 1 path from 7d928250c1
