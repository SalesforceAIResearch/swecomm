--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -736,13 +736,14 @@
         Insert each of the instances into the database. Do *not* call
         save() on each of the instances, do not send any pre/post_save
         signals, and do not set the primary key attribute if it is an
-        autoincrement field (except if features.can_return_rows_from_bulk_insert=True).
+        autoincrement field (except if features.can_return_rows_from_bulk_insert=True
+        or update_conflicts=True).
         Multi-table models are not supported.
         """
         # When you bulk insert you don't get the primary keys back (if it's an
-        # autoincrement, except if can_return_rows_from_bulk_insert=True), so
-        # you can't insert into the child tables which references this. There
-        # are two workarounds:
+        # autoincrement, except if can_return_rows_from_bulk_insert=True or
+        # update_conflicts=True), so you can't insert into the child tables which
+        # references this. There are two workarounds:
         # 1) This could be implemented if you didn't have an autoincrement pk
         # 2) You could do it by doing O(n) normal inserts into the parent
         #    tables to get the primary keys back and then doing a single bulk
@@ -794,8 +795,7 @@
                 )
                 for obj_with_pk, results in zip(objs_with_pk, returned_columns):
                     for result, field in zip(results, opts.db_returning_fields):
-                        if field != opts.pk:
-                            setattr(obj_with_pk, field.attname, result)
+                        setattr(obj_with_pk, field.attname, result)
                 for obj_with_pk in objs_with_pk:
                     obj_with_pk._state.adding = False
                     obj_with_pk._state.db = self.db
@@ -812,7 +812,7 @@
                 connection = connections[self.db]
                 if (
                     connection.features.can_return_rows_from_bulk_insert
-                    and on_conflict is None
+                    and (on_conflict is None or update_conflicts)
                 ):
                     assert len(returned_columns) == len(objs_without_pk)
                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):
