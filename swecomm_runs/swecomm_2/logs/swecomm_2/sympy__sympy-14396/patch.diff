--- a/sympy/polys/polyoptions.py
+++ b/sympy/polys/polyoptions.py
@@ -405,7 +405,7 @@
     _re_realfield = re.compile(r"^(R|RR)(_(\d+))?$")
     _re_complexfield = re.compile(r"^(C|CC)(_(\d+))?$")
     _re_finitefield = re.compile(r"^(FF|GF)\((\d+)\)$")
-    _re_polynomial = re.compile(r"^(Z|ZZ|Q|QQ)\[(.+)\]$")
+    _re_polynomial = re.compile(r"^(Z|ZZ|Q|QQ|R|RR|C|CC)\[(.+)\]$")
     _re_fraction = re.compile(r"^(Z|ZZ|Q|QQ)\((.+)\)$")
     _re_algebraic = re.compile(r"^(Q|QQ)\<(.+)\>$")
 
@@ -418,69 +418,62 @@
         elif isinstance(domain, string_types):
             if domain in ['Z', 'ZZ']:
                 return sympy.polys.domains.ZZ
-
             if domain in ['Q', 'QQ']:
                 return sympy.polys.domains.QQ
-
+            if domain in ['R', 'RR']:
+                return sympy.polys.domains.RR
+            if domain in ['C', 'CC']:
+                return sympy.polys.domains.CC
             if domain == 'EX':
                 return sympy.polys.domains.EX
 
             r = cls._re_realfield.match(domain)
-
             if r is not None:
                 _, _, prec = r.groups()
-
-                if prec is None:
-                    return sympy.polys.domains.RR
-                else:
-                    return sympy.polys.domains.RealField(int(prec))
+                return sympy.polys.domains.RealField(int(prec)) if prec else sympy.polys.domains.RR
 
             r = cls._re_complexfield.match(domain)
-
             if r is not None:
                 _, _, prec = r.groups()
-
-                if prec is None:
-                    return sympy.polys.domains.CC
-                else:
-                    return sympy.polys.domains.ComplexField(int(prec))
+                return sympy.polys.domains.ComplexField(int(prec)) if prec else sympy.polys.domains.CC
 
             r = cls._re_finitefield.match(domain)
-
             if r is not None:
                 return sympy.polys.domains.FF(int(r.groups()[1]))
 
             r = cls._re_polynomial.match(domain)
-
             if r is not None:
                 ground, gens = r.groups()
-
                 gens = list(map(sympify, gens.split(',')))
-
                 if ground in ['Z', 'ZZ']:
                     return sympy.polys.domains.ZZ.poly_ring(*gens)
-                else:
+                elif ground in ['Q', 'QQ']:
                     return sympy.polys.domains.QQ.poly_ring(*gens)
+                elif ground in ['R', 'RR']:
+                    return sympy.polys.domains.RR.poly_ring(*gens)
+                elif ground in ['C', 'CC']:
+                    return sympy.polys.domains.CC.poly_ring(*gens)
 
             r = cls._re_fraction.match(domain)
-
             if r is not None:
                 ground, gens = r.groups()
-
                 gens = list(map(sympify, gens.split(',')))
-
                 if ground in ['Z', 'ZZ']:
                     return sympy.polys.domains.ZZ.frac_field(*gens)
-                else:
+                elif ground in ['Q', 'QQ']:
                     return sympy.polys.domains.QQ.frac_field(*gens)
+                elif ground in ['R', 'RR']:
+                    return sympy.polys.domains.RR.frac_field(*gens)
+                elif ground in ['C', 'CC']:
+                    return sympy.polys.domains.CC.frac_field(*gens)
 
             r = cls._re_algebraic.match(domain)
-
             if r is not None:
                 gens = list(map(sympify, r.groups()[1].split(',')))
                 return sympy.polys.domains.QQ.algebraic_field(*gens)
 
-        raise OptionError('expected a valid domain specification, got %s' % domain)
+        raise OptionError('Invalid domain specification. Expected a valid domain (e.g., ZZ, QQ, RR, CC) '
+                          'or a valid composite domain (e.g., ZZ[x], RR[x,y]), got %s' % domain)
 
     @classmethod
     def postprocess(cls, options):
