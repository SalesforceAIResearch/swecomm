{
    "best_choice": "20240523_aider",
    "best_choice_resolved": false,
    "evaluations": {
        "20240523_aider": {
            "score": [
                7,
                8,
                8,
                9,
                9,
                9,
                9,
                7,
                8,
                9
            ],
            "avg_score": 8.3,
            "resolved": false,
            "patch": {
                "model_name_or_path": "aider--gpt-4o--openrouter-anthropic-claude-3-opus",
                "model_patch": "diff --git a/astropy/io/ascii/core.py b/astropy/io/ascii/core.py\nindex 381b5b13db..d4feff02aa 100644\n--- a/astropy/io/ascii/core.py\n+++ b/astropy/io/ascii/core.py\n@@ -1812,7 +1812,7 @@ def _get_writer(Writer, fast_writer, **kwargs):\n         return FAST_CLASSES[f\"fast_{Writer._format_name}\"](**kwargs)\n \n     writer_kwargs = {k: v for k, v in kwargs.items() if k not in extra_writer_pars}\n-    writer = Writer(**writer_kwargs)\n+    writer = Writer(header_rows=kwargs.get('header_rows'), **writer_kwargs)\n \n     if \"delimiter\" in kwargs:\n         writer.header.splitter.delimiter = kwargs[\"delimiter\"]\ndiff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..0a843268bc 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,15 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n+        self.header_rows = header_rows\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        if self.header_rows:\n+            header_lines = [lines[1]] * len(self.header_rows)\n+            lines = header_lines + lines + [lines[1]]\n+        else:\n+            lines = [lines[1]] + lines + [lines[1]]\n         return lines\n",
                "instance_id": "astropy__astropy-14182"
            },
            "explanation": [
                {
                    "issue_exp": "\nThe issue is that the `RestructuredText` (RST) output format in the `astropy` library does not currently support setting header rows, making it difficult for users to output tables with specified headers in RST format. This functionality is desired by users to facilitate autogenerating documentation.\n",
                    "code_span_exp": "\nThe code span with `span_id=RST` defines the `RST` class, which is crucial because this class handles the RST format table output. To allow header row flexibility in the output, modifications need to be made within this class or its methods.\n\nThe code span with `span_id=RST.write` defines the `write` method of the `RST` class, which manages how the lines of the table are written out in the RST format. Any changes needed for including additional header rows will involve modifications to this method.\n",
                    "patch_exp": "\nThe patch modifies two hunks:\n\n1. **Hunk 1 (in `astropy/io/ascii/core.py`):**\n   - This change now includes passing the `header_rows` argument while initializing the `Writer` object.\n   - Specifically changes line 1815 to `writer = Writer(header_rows=kwargs.get('header_rows'), **writer_kwargs)` allowing the RST writer to handle the additional `header_rows` parameter. This affects how an instance of the `RST` writer object is created.\n\n2. **Hunk 2 (in `astropy/io/ascii/rst.py`):**\n   - Adds additional handling for `header_rows` within the `RST` class by modifying the constructor and write methods:\n     - Constructor `__init__` is modified to accept the `header_rows` argument and store it.\n     - The `write` method now checks if `header_rows` is set. If so, it adds the respective lines for each header before and after the main table content.\n",
                    "new_issues_exp": "\nThe patch introduces a minor issue:\n- If `lines` are too short to index `lines[1]`, an `IndexError` might occur. Specifically, the original logic `lines = [lines[1]] + lines + [lines[1]]` assumes there's a minimum length of `lines`. With added headers, this compound issue might propagate errors if not all edge cases are considered.\n- No modifications are contradicting the identified code spans, as modifications are in line with how headers require processing.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue is that the `RestructuredText` (RST) output format in the `astropy` library does not currently support setting header rows, making it difficult for users to output tables with specified headers in RST format. This functionality is desired by users to facilitate autogenerating documentation.\n</issue_exp>\n\n<span_ids>\n- RST\n- RST.write\n</span_ids>\n\n<code_span_exp>\nThe code span with `span_id=RST` defines the `RST` class, which is crucial because this class handles the RST format table output. To allow header row flexibility in the output, modifications need to be made within this class or its methods.\n\nThe code span with `span_id=RST.write` defines the `write` method of the `RST` class, which manages how the lines of the table are written out in the RST format. Any changes needed for including additional header rows will involve modifications to this method.\n</code_span_exp>\n\n<patch_exp>\nThe patch modifies two hunks:\n\n1. **Hunk 1 (in `astropy/io/ascii/core.py`):**\n   - This change now includes passing the `header_rows` argument while initializing the `Writer` object.\n   - Specifically changes line 1815 to `writer = Writer(header_rows=kwargs.get('header_rows'), **writer_kwargs)` allowing the RST writer to handle the additional `header_rows` parameter. This affects how an instance of the `RST` writer object is created.\n\n2. **Hunk 2 (in `astropy/io/ascii/rst.py`):**\n   - Adds additional handling for `header_rows` within the `RST` class by modifying the constructor and write methods:\n     - Constructor `__init__` is modified to accept the `header_rows` argument and store it.\n     - The `write` method now checks if `header_rows` is set. If so, it adds the respective lines for each header before and after the main table content.\n</patch_exp>\n\n<correct_location_exp>\nYes, the patch is attempting to fix the issue in the correct locations. Modifying the initialization and `write` method in the `RST` writer will allow `header_rows` to be supported and correctly processed in the RST output format.\n</correct_location_exp>\n\n<new_issues_exp>\nThe patch introduces a minor issue:\n- If `lines` are too short to index `lines[1]`, an `IndexError` might occur. Specifically, the original logic `lines = [lines[1]] + lines + [lines[1]]` assumes there's a minimum length of `lines`. With added headers, this compound issue might propagate errors if not all edge cases are considered.\n- No modifications are contradicting the identified code spans, as modifications are in line with how headers require processing.\n</new_issues_exp>\n\n<fix_issue_exp>\nThe patch should theoretically fix the issue as it adds the necessary functionality to handle custom header rows specific to the `RST` writer. However, edge cases, such as verifying adequate `lines` length during indexing, need loopholes fixes to ensure consistent output without Runtime errors described above. The essential adds `headers in __init__` and modifies `write()` method are rightly done, staying away from common pitfalls previously made by LLMs such as not routing new parameters down effectively or simply remapping wrongly.\n</fix_issue_exp>\n\n<score>7</score>"
                },
                {
                    "issue_exp": "\nThe issue is about adding support for header rows in the RestructuredText format for the `QTable` in `astropy.table`. Currently, specifying `header_rows=[\"name\", \"unit\"]` while writing in the `ascii.rst` format results in a `TypeError` because the `RST.__init__()` method does not accept a 'header_rows' keyword argument. The main goal is to allow users to define such header rows within the `ascii.rst` writer.\n",
                    "code_span_exp": "\n- `RST`: This code span defines the `RST` class, which is a writer for producing a RestructuredText simple format table. The modification is likely to happen here to allow passing and handling new keyword arguments.\n- `RST.write`: This method of the `RST` class facilitates the writing process of the table lines. Adjustments will probably be made so that additional header rows can be integrated appropriately when writing tables.\n",
                    "patch_exp": "\n1. In `astropy/io/ascii/core.py`, the instantiation of the `Writer` class is updated to pass `header_rows` from kwargs: `writer = Writer(header_rows=kwargs.get('header_rows'), **writer_kwargs)`.\n2. The `__init__` method of the `RST` class in `astropy/io/ascii/rst.py` is modified to accept `header_rows`: `def __init__(self, header_rows=None)`. And initialization includes this new attribute: `self.header_rows = header_rows`.\n3. The `write` method of the `RST` class in `astropy/io/ascii/rst.py` is updated to conditionally add header lines if `header_rows` is provided: It first includes code to add the header lines to the ones being written.\n",
                    "new_issues_exp": "\nNo new issues are introduced. The patch is aligned with identified spans and its changes blend well with the current function definitions. There are no obvious contradictions or inappropriate changes in these code spans.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue is about adding support for header rows in the RestructuredText format for the `QTable` in `astropy.table`. Currently, specifying `header_rows=[\"name\", \"unit\"]` while writing in the `ascii.rst` format results in a `TypeError` because the `RST.__init__()` method does not accept a 'header_rows' keyword argument. The main goal is to allow users to define such header rows within the `ascii.rst` writer.\n</issue_exp>\n\n<span_ids_list>\n- RST\n- RST.write\n</span_ids_list>\n\n<code_span_exp>\n- `RST`: This code span defines the `RST` class, which is a writer for producing a RestructuredText simple format table. The modification is likely to happen here to allow passing and handling new keyword arguments.\n- `RST.write`: This method of the `RST` class facilitates the writing process of the table lines. Adjustments will probably be made so that additional header rows can be integrated appropriately when writing tables.\n</code_span_exp>\n\n<modified_hunks>\n1. Modification in `astropy/io/ascii/core.py` to pass `header_rows` from kwargs during Writer instantiation.\n2. Modification in `astropy/io/ascii/rst.py` for the `RST` initialization to accept `header_rows` and in `RST.write` to incorporate the new header rows correctly.\n</modified_hunks>\n\n<patch_exp>\n1. In `astropy/io/ascii/core.py`, the instantiation of the `Writer` class is updated to pass `header_rows` from kwargs: `writer = Writer(header_rows=kwargs.get('header_rows'), **writer_kwargs)`.\n2. The `__init__` method of the `RST` class in `astropy/io/ascii/rst.py` is modified to accept `header_rows`: `def __init__(self, header_rows=None)`. And initialization includes this new attribute: `self.header_rows = header_rows`.\n3. The `write` method of the `RST` class in `astropy/io/ascii/rst.py` is updated to conditionally add header lines if `header_rows` is provided: It first includes code to add the header lines to the ones being written.\n</patch_exp>\n\n<correct_location_exp>\nYes, the patch is modifying the correct locations. It updates the `RST` class to accept and handle `header_rows`, as well as modifying the core writing mechanism to facilitate the new feature.\n</correct_location_exp>\n\n<new_issues_exp>\nNo new issues are introduced. The patch is aligned with identified spans and its changes blend well with the current function definitions. There are no obvious contradictions or inappropriate changes in these code spans.\n</new_issues_exp>\n\n<fix_issue_exp>\nThe patch correctly addresses the issue by:\n- Adding `header_rows` as a parameter to the `RST` writer initialization.\n- Modifying the `RST.write` method to properly incorporate the `header_rows`.\n\nHowever, two potential pitfalls could arise:\n1. The `header_rows` are repeat entries initialized blindly without handling potential exceptions or invalid values. More validation could be incorporated.\n2. Classic LLM errors, like redundant array boundaries or edge practices pitfalls, don't seem apparent, which is good.\n\nOn these grounds, the patch seems appropriate to fix the reported issue.\n</fix_issue_exp>\n\n<score>8</score>"
                },
                {
                    "issue_exp": "\nThe issue is about adding support for header rows in RestructuredText (ReST) output in the Astropy library. The user wants to be able to specify custom header rows when writing tables in ReST format, similar to how it works for other formats like \"ascii.fixed_width.\" Currently, specifying the `header_rows` in the write method for ReST format results in an error because the `RST` writer does not recognize the `header_rows` parameter.\n",
                    "code_span_exp": "\n1. RST:\n   This is the class definition for the RestructuredText table writer. Modifications to support header rows are likely to be needed here.\n   \n2. RST.write:\n   This is the `write` method of the `RST` class. Changes to this method will be necessary to modify the output to include custom header rows if they are provided.\n",
                    "patch_exp": "\n1. Hunk 1 (`core.py`, lines 1807-1823):\n   The code in `core.py` has been modified to include the `header_rows` parameter in the instantiation of the `Writer` class. This ensures that the `header_rows` parameter, if provided, is passed from the higher-level write function down to the specific writer instance.\n\n2. Hunk 2 (`rst.py`, lines 52-71):\n   The `__init__` method of the `RST` class has been updated to accept an optional `header_rows` parameter and store it as an instance variable.\n   \n   In the `write` method, the logic now checks if `self.header_rows` is present. If it is, the specified header rows are inserted into the output; otherwise, the existing behavior (duplicating the first line as a header) is maintained.\n",
                    "new_issues_exp": "\nThe patch does not appear to introduce new issues; it respects the existing identified spans and does not contradict any assumptions made by the existing code. However, it should be better tested to include proper handling for cases where `header_rows` may not be provided or is an empty list.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue is about adding support for header rows in RestructuredText (ReST) output in the Astropy library. The user wants to be able to specify custom header rows when writing tables in ReST format, similar to how it works for other formats like \"ascii.fixed_width.\" Currently, specifying the `header_rows` in the write method for ReST format results in an error because the `RST` writer does not recognize the `header_rows` parameter.\n</issue_exp>\n\n<span_ids>\nRST, RST.write\n</span_ids>\n\n<code_span_exp>\n1. RST:\n   This is the class definition for the RestructuredText table writer. Modifications to support header rows are likely to be needed here.\n   \n2. RST.write:\n   This is the `write` method of the `RST` class. Changes to this method will be necessary to modify the output to include custom header rows if they are provided.\n</code_span_exp>\n\n<patch_exp>\n1. Hunk 1 (`core.py`, lines 1807-1823):\n   The code in `core.py` has been modified to include the `header_rows` parameter in the instantiation of the `Writer` class. This ensures that the `header_rows` parameter, if provided, is passed from the higher-level write function down to the specific writer instance.\n\n2. Hunk 2 (`rst.py`, lines 52-71):\n   The `__init__` method of the `RST` class has been updated to accept an optional `header_rows` parameter and store it as an instance variable.\n   \n   In the `write` method, the logic now checks if `self.header_rows` is present. If it is, the specified header rows are inserted into the output; otherwise, the existing behavior (duplicating the first line as a header) is maintained.\n</patch_exp>\n\n<correct_location_exp>\nYes, the patch is targeting the correct functions and locations. The modifications in `core.py` ensure that the argument is passed into the `RST` writer, and the updates in `rst.py` adapt the writer to handle the `header_rows`.\n</correct_location_exp>\n\n<new_issues_exp>\nThe patch does not appear to introduce new issues; it respects the existing identified spans and does not contradict any assumptions made by the existing code. However, it should be better tested to include proper handling for cases where `header_rows` may not be provided or is an empty list.\n</new_issues_exp>\n\n<fix_issue_exp>\nThe patch is addressing the right class and right methods by plumbing the `header_rows` argument through the layers of function calls and modifying the output in the writer method properly if the argument is provided. \n\nHowever, a review blocks on guaranteeing if this truly does solve the test case initially raised in the issue concerning how arbitrary ReStructuredText labels and units look like. Moreover, no handling appears found in removing redundancy once supplemented by `print`. \n\nThe patch seems pretty careful about keeping backward compatibility intact too if `header_rows` is not sent but can benefit heavily from detailed unit tests accompanying proof of the fuller ensurement provided here.\n\nOverall, fixes toward common LLM issues\u2014passthrough management, new elements consideration\u2014 don\u2019t arise as evident obstacles in this context from the visible patch and issue nature overall.\n</fix_issue_exp>\n\n<score>8</score>"
                },
                {
                    "issue_exp": "\nThe issue is that the function in the astropy library does not support the `header_rows` argument for the \"ascii.rst\" format when writing `QTable` data to output streams. The example provided shows that the \"ascii.fixed_width\" format supports specifying header rows, but this functionality does not work for the \"ascii.rst\" format, causing a `TypeError` to be thrown.\n",
                    "code_span_exp": "\nThe identified code spans are relevant to the issue as follows:\n\n- `span_id=RST` (astropy/io/ascii/rst.py): This span defines the `RST` class that handles the \"ascii.rst\" format writing. Extending this class to support `header_rows` is crucial for resolving the issue.\n- `span_id=RST.write` (astropy/io/ascii/rst.py): This span defines the `write` method of the `RST` class. Modifying this method will allow handling of header rows during the writing process, which is the expected feature described in the issue.\n",
                    "patch_exp": "\n- **Hunk 1 (core.py)**: Modifies `_get_writer` function to accept `header_rows` argument when creating the `Writer` object:\n    - Adds `header_rows=kwargs.get('header_rows')` to the `Writer` initialization. This change allows `header_rows` parameter to be passed to the writer if specified.\n- **Hunk 2 (rst.py)**: Updates `RST` class and `write` method to handle `header_rows`:\n    - Modifies `RST.__init__` to accept an optional `header_rows` argument and initializes the `RST` class instance with it.\n    - Updates `RST.write` method to include logic for prepending header rows specified via the `header_rows` argument to the table output.\n",
                    "new_issues_exp": "\nThe patch does not introduce any new issues. The additional logic in the `write` method to handle `header_rows` is conditionally applied, meaning that if `header_rows` is not provided, it falls back to the original behavior. The changes are localized and don't seem to affect other parts unexpectedly.\n",
                    "fixes_issue_exp": "",
                    "msg": "1. **Understand the issue:**\n<issue_exp>\nThe issue is that the function in the astropy library does not support the `header_rows` argument for the \"ascii.rst\" format when writing `QTable` data to output streams. The example provided shows that the \"ascii.fixed_width\" format supports specifying header rows, but this functionality does not work for the \"ascii.rst\" format, causing a `TypeError` to be thrown.\n</issue_exp>\n\n2. **Understand the identified code spans:**\n<strong>Span IDs:</strong> \n- RST\n- RST.write\n\n<code_span_exp>\nThe identified code spans are relevant to the issue as follows:\n\n- `span_id=RST` (astropy/io/ascii/rst.py): This span defines the `RST` class that handles the \"ascii.rst\" format writing. Extending this class to support `header_rows` is crucial for resolving the issue.\n- `span_id=RST.write` (astropy/io/ascii/rst.py): This span defines the `write` method of the `RST` class. Modifying this method will allow handling of header rows during the writing process, which is the expected feature described in the issue.\n</code_span_exp>\n\n3. **Understand the candidate patch:**\n<strong>List of modified hunks:</strong> \n- Hunk 1: `core.py` changes around lines 1807-1823\n- Hunk 2: `rst.py` changes around lines 52-71\n\n<patch_exp>\n- **Hunk 1 (core.py)**: Modifies `_get_writer` function to accept `header_rows` argument when creating the `Writer` object:\n    - Adds `header_rows=kwargs.get('header_rows')` to the `Writer` initialization. This change allows `header_rows` parameter to be passed to the writer if specified.\n- **Hunk 2 (rst.py)**: Updates `RST` class and `write` method to handle `header_rows`:\n    - Modifies `RST.__init__` to accept an optional `header_rows` argument and initializes the `RST` class instance with it.\n    - Updates `RST.write` method to include logic for prepending header rows specified via the `header_rows` argument to the table output.\n</patch_exp>\n\n4. **Check if the patch is fixing the correct function or not:**\n<correct_location_exp>\nYes, the patch fixes the correct functions. It updates the `_get_writer` function to accept and pass the `header_rows` argument to the writer class. Additionally, it correctly updates the `RST` class and its `write` method to handle the `header_rows` parameter, aligning with what's described in the issue.\n</correct_location_exp>\n\n5. **Check if the patch is introducing any new issues, especially if it contradicts with identified code spans:**\n<new_issues_exp>\nThe patch does not introduce any new issues. The additional logic in the `write` method to handle `header_rows` is conditionally applied, meaning that if `header_rows` is not provided, it falls back to the original behavior. The changes are localized and don't seem to affect other parts unexpectedly.\n</new_issues_exp>\n\n6. **Check if the patch can fix the issue:**\n<fix_issue_exp>\nThe patch appears to address the issue as described. Passing the `header_rows` argument and updating the `write` method to manage header rows aligns with supporting `header_rows` in the \"ascii.rst\" format. The solution avoids common mistakes like ignoring additional keyword arguments or failing to conditionally include header rows. The update implements the requested feature while preserving existing functionalities correctly.\n</fix_issue_exp>\n\n<score>9</score>"
                },
                {
                    "issue_exp": "\nThe issue is related to the `RestructuredText (RST)` output format in the `astropy` library. Specifically, the `QTable.write` method currently does not support adding custom header rows (like \"name\" and \"unit\") in the RST output format, which works for other formats such as `ascii.fixed_width`, but throws a TypeError for RST. The user wants to include additional header rows in the output for better documentation and readability.\n",
                    "code_span_exp": "\n- **Span ID: RST**\n  This is the class definition for the `RST` formatter which includes the `write` method, and `_format_name`, and `_description` attributes that describe its purpose as generating RestructuredText simple tables.\n  \n- **Span ID: RST.write**\n  This defines the `write` method in the `RST` class that is responsible for writing the table lines into the RST format. The implementation currently wraps table content lines.\n",
                    "patch_exp": "\n- **Hunk in `astropy/io/ascii/core.py`**\n  This modification adds `header_rows=kwargs.get('header_rows')` when instantiating the writer to pass custom header rows to the `RST` formatter if they exist in the kwargs. This ensures that the `header_rows` parameter is appropriately passed to the `Writer`'s initializer, which wasn't handled previously, causing the `TypeError`.\n\n- **Hunk in `astropy/io/ascii/rst.py`**\n  In this hunk, the `__init__` method of the `RST` class now takes an additional `header_rows` parameter, which is then passed to its superclass and stored as an instance variable. The `write` method is also updated to prepend these header rows to the lines if they are provided. This helps incorporate additional header rows into the formatted RST output.\n",
                    "new_issues_exp": "\nThe patch correctly integrates the `header_rows` into the RST format without contradicting any existing functionalities in the identified code spans. However, it is essential that any existing logic thoroughly handle cases where `header_rows` is `None` or an empty list to avoid unintended alterations in output.\n",
                    "fixes_issue_exp": "",
                    "msg": "1. **Understand the Issue:**\n\n<issue_exp>\nThe issue is related to the `RestructuredText (RST)` output format in the `astropy` library. Specifically, the `QTable.write` method currently does not support adding custom header rows (like \"name\" and \"unit\") in the RST output format, which works for other formats such as `ascii.fixed_width`, but throws a TypeError for RST. The user wants to include additional header rows in the output for better documentation and readability.\n</issue_exp>\n\n2. **Understand the Identified Code Spans:**\n\n**List of Span IDs:**\n- RST\n- RST.write\n\n<code_span_exp>\n- **Span ID: RST**\n  This is the class definition for the `RST` formatter which includes the `write` method, and `_format_name`, and `_description` attributes that describe its purpose as generating RestructuredText simple tables.\n  \n- **Span ID: RST.write**\n  This defines the `write` method in the `RST` class that is responsible for writing the table lines into the RST format. The implementation currently wraps table content lines.\n</code_span_exp>\n\n3. **Understand the Candidate Patch:**\n\n**List of Modified Hunks:**\n\n- Modified hunk in `astropy/io/ascii/core.py`\n- Modified hunk in `astropy/io/ascii/rst.py`\n\n<patch_exp>\n- **Hunk in `astropy/io/ascii/core.py`**\n  This modification adds `header_rows=kwargs.get('header_rows')` when instantiating the writer to pass custom header rows to the `RST` formatter if they exist in the kwargs. This ensures that the `header_rows` parameter is appropriately passed to the `Writer`'s initializer, which wasn't handled previously, causing the `TypeError`.\n\n- **Hunk in `astropy/io/ascii/rst.py`**\n  In this hunk, the `__init__` method of the `RST` class now takes an additional `header_rows` parameter, which is then passed to its superclass and stored as an instance variable. The `write` method is also updated to prepend these header rows to the lines if they are provided. This helps incorporate additional header rows into the formatted RST output.\n</patch_exp>\n\n4. **Check if the Patch is Fixing the Correct Function or Not:**\n\n<correct_location_exp>\nYes, the patch is fixing the correct functions. The changes in `astropy/io/ascii/core.py` ensure that the `header_rows` is passed to the `RST` class, and the changes in `astropy/io/ascii/rst.py` include these `header_rows` in the RST output if they are provided.\n</correct_location_exp>\n\n5. **Check if the Patch is Introducing Any New Issues:**\n\n<new_issues_exp>\nThe patch correctly integrates the `header_rows` into the RST format without contradicting any existing functionalities in the identified code spans. However, it is essential that any existing logic thoroughly handle cases where `header_rows` is `None` or an empty list to avoid unintended alterations in output.\n</new_issues_exp>\n\n6. **Check if the Patch Can Fix the Issue:**\n\n<fix_issue_exp>\nThe patch effectively addresses the provided issue by ensuring that the `header_rows` parameter can be passed to and correctly handled by the RST formatter class, preventing the `TypeError` and enabling the desired functionality. This doesn't appear to fall into common LLM pitfalls such as misunderstanding variable scopes, mishandling data types, or failing to integrate with the existing API.\n</fix_issue_exp>\n\n<score>9</score>"
                },
                {
                    "issue_exp": "\nThe issue is about extending the functionality of the RestructuredText (RST) writer in the `astropy` library to support header rows when writing tables. Currently, while it supports writing a table in the RST format, it does not support additional header rows like \"name\" and \"unit\". The user provided an example where they attempt to write a QTable with additional header rows and encounter a `TypeError` because the `RST` writer does not recognize the `header_rows` keyword argument.\n",
                    "code_span_exp": "\n- Span `RST`: This span starts with the definition of the `RST` class in `astropy/io/ascii/rst.py`. It includes the class docstring which briefly explains how it currently handles TSV-like tables using a fixed width format. It is relevant because the changes for adding header row support would likely need to be implemented here.\n  \n- Span `RST.write`: This span includes the `write` method of the `RST` class which is responsible for generating the text lines. The method forms the table with a middle border around actual data rows. It is relevant to the issue because modifications in this span might be necessary to adjust how header rows could be incorporated into the final output.\n",
                    "patch_exp": "\n- Hunk 1 (`core.py`):\n  The patch adds an `header_rows` argument to the instantiation of the `Writer`. It pulls this argument from the `kwargs` dictionary if it exists.\n\n- Hunk 2 (`rst.py`):\n  The patch modifies the `RST` class, altering its constructor to accept an optional `header_rows` parameter and passes it to the `super().__init__` call. It saves `header_rows` in an instance variable. In the `write` method, the code checks if `self.header_rows` is set; if true, it adds an additional header line for each requested header row before and after the data lines.\n",
                    "new_issues_exp": "\nThe patch does not introduce any apparent new issues in the provided context. It also doesn't formally contradict the functionality as seen in the code spans; rather, it extends it gracefully to include the logic of incorporating additional header rows.\n",
                    "fixes_issue_exp": "",
                    "msg": "1. Understanding the Issue:\n\n<issue_exp>\nThe issue is about extending the functionality of the RestructuredText (RST) writer in the `astropy` library to support header rows when writing tables. Currently, while it supports writing a table in the RST format, it does not support additional header rows like \"name\" and \"unit\". The user provided an example where they attempt to write a QTable with additional header rows and encounter a `TypeError` because the `RST` writer does not recognize the `header_rows` keyword argument.\n</issue_exp>\n\n2. Understanding the Identified Code Spans:\n\nList of span IDs: `RST` and `RST.write`.\n\n<code_span_exp>\n- Span `RST`: This span starts with the definition of the `RST` class in `astropy/io/ascii/rst.py`. It includes the class docstring which briefly explains how it currently handles TSV-like tables using a fixed width format. It is relevant because the changes for adding header row support would likely need to be implemented here.\n  \n- Span `RST.write`: This span includes the `write` method of the `RST` class which is responsible for generating the text lines. The method forms the table with a middle border around actual data rows. It is relevant to the issue because modifications in this span might be necessary to adjust how header rows could be incorporated into the final output.\n</code_span_exp>\n\n3. Understanding the Candidate Patch:\n\nList of modified hunks:\n\n- Modification in `b/astropy/io/ascii/core.py` starting at line 1807.\n- Modification in `b/astropy/io/ascii/rst.py` starting at line 52.\n\n<patch_exp>\n- Hunk 1 (`core.py`):\n  The patch adds an `header_rows` argument to the instantiation of the `Writer`. It pulls this argument from the `kwargs` dictionary if it exists.\n\n- Hunk 2 (`rst.py`):\n  The patch modifies the `RST` class, altering its constructor to accept an optional `header_rows` parameter and passes it to the `super().__init__` call. It saves `header_rows` in an instance variable. In the `write` method, the code checks if `self.header_rows` is set; if true, it adds an additional header line for each requested header row before and after the data lines.\n</patch_exp>\n\n4. Correct Function Location:\n\n<correct_location_exp>\nYes, the patch modifies the `RST` class constructor and the `write` method to accommodate header rows, which are the relevant parts of the code specified in the identified code spans. Therefore, the changes are being made in the correct locations.\n</correct_location_exp>\n\n5. Check for New Issues:\n\n<new_issues_exp>\nThe patch does not introduce any apparent new issues in the provided context. It also doesn't formally contradict the functionality as seen in the code spans; rather, it extends it gracefully to include the logic of incorporating additional header rows.\n</new_issues_exp>\n\n6. Effectiveness of Fix:\n\n<fix_issue_exp>\nThe patch addresses the footroom issue by ensuring `header_rows` are considered when initializing the `Writer`. The approach seems logically sound, influencing output formatting within the `write` method. It preempts common LLM errors:\n- Uses argument retrieval without `kwargs` overwriting typical function behavior.\n  \nWhile the new condition including different headers looks effective, test edge cases should be experimented. Therefore, barring extreme scrutiny, initial look evaluates a logical solution offered.\n</fix_issue_exp>\n\n<score>9</score>\n"
                },
                {
                    "issue_exp": "\nThe issue is about enhancing the functionality of a module to support specifying header rows in RestructuredText (ReST) formatted table outputs. Specifically, when creating a table and attempting to use the `header_rows` parameter in the `tbl.write()` function, it raises a `TypeError` because the `RST` writer class does not currently support this keyword. The user wants to be able to specify different header rows such as \"name\" and \"unit\" and see them in the ReST formatted output.\n",
                    "code_span_exp": "\n- **Span ID: RST**: This code span shows the definition of the `RST` class, which is responsible for handling the reStructuredText output format. Changes made here directly impact how the RST tables are generated.\n- **Span ID: RST.write**: This span contains the `write` method of the `RST` class. This method is crucial as it defines how the rows, including headers, are formatted and written. Modifications to this function are necessary to support the header rows as per the user's requirements.\n",
                    "patch_exp": "\n- **Hunk in b/astropy/io/ascii/core.py**:\n  This modification makes the `header_rows` argument be included in the instantiation of the writer if it is present in the keyword arguments (`kwargs`). This allows passing the `header_rows` to the `RST` writer class constructor.\n  \n  ```python\n  writer = Writer(header_rows=kwargs.get('header_rows'), **writer_kwargs)\n  ```\n\n- **Hunk in b/astropy/io/ascii/rst.py**:\n  a. In the `__init__` method of the `RST` class, the `header_rows` parameter is added to allow initializing the class with this argument.\n\n  ```python\n  def __init__(self, header_rows=None):\n      super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n      self.header_rows = header_rows\n  ```\n\n  b. In the `write` method, there is an additional conditional check whether `header_rows` is not `None`. If `header_rows` are provided, they get added to the list of lines.\n\n  ```python\n  def write(self, lines):\n      lines = super().write(lines)\n      if self.header_rows:\n          header_lines = [lines[1]] * len(self.header_rows)\n          lines = header_lines + lines + [lines[1]]\n      else:\n          lines = [lines[1]] + lines + [lines[1]]\n      return lines\n  ```\n",
                    "new_issues_exp": "\nThe patch appears thorough in handling new features without introduction of significant new issues. It ensures compatibility by making `header_rows` an optional argument, thus maintaining backward compatibility. Nonetheless, there should be careful testing to ensure lists referenced within a multi-line table still behave appropriately when formatted.\n",
                    "fixes_issue_exp": "",
                    "msg": "1. **Understand the issue**\n\n<issue_exp>\nThe issue is about enhancing the functionality of a module to support specifying header rows in RestructuredText (ReST) formatted table outputs. Specifically, when creating a table and attempting to use the `header_rows` parameter in the `tbl.write()` function, it raises a `TypeError` because the `RST` writer class does not currently support this keyword. The user wants to be able to specify different header rows such as \"name\" and \"unit\" and see them in the ReST formatted output.\n</issue_exp>\n\n2. **Understand the identified code spans**\n\n- **List of span IDs**: \n  - RST\n  - RST.write\n\n<code_span_exp>\n- **Span ID: RST**: This code span shows the definition of the `RST` class, which is responsible for handling the reStructuredText output format. Changes made here directly impact how the RST tables are generated.\n- **Span ID: RST.write**: This span contains the `write` method of the `RST` class. This method is crucial as it defines how the rows, including headers, are formatted and written. Modifications to this function are necessary to support the header rows as per the user's requirements.\n</code_span_exp>\n\n3. **Understand the candidate patch**\n\n- **List of modified hunks**: \n  - b/astropy/io/ascii/core.py\n  - b/astropy/io/ascii/rst.py\n\n<patch_exp>\n- **Hunk in b/astropy/io/ascii/core.py**:\n  This modification makes the `header_rows` argument be included in the instantiation of the writer if it is present in the keyword arguments (`kwargs`). This allows passing the `header_rows` to the `RST` writer class constructor.\n  \n  ```python\n  writer = Writer(header_rows=kwargs.get('header_rows'), **writer_kwargs)\n  ```\n\n- **Hunk in b/astropy/io/ascii/rst.py**:\n  a. In the `__init__` method of the `RST` class, the `header_rows` parameter is added to allow initializing the class with this argument.\n\n  ```python\n  def __init__(self, header_rows=None):\n      super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n      self.header_rows = header_rows\n  ```\n\n  b. In the `write` method, there is an additional conditional check whether `header_rows` is not `None`. If `header_rows` are provided, they get added to the list of lines.\n\n  ```python\n  def write(self, lines):\n      lines = super().write(lines)\n      if self.header_rows:\n          header_lines = [lines[1]] * len(self.header_rows)\n          lines = header_lines + lines + [lines[1]]\n      else:\n          lines = [lines[1]] + lines + [lines[1]]\n      return lines\n  ```\n</patch_exp>\n\n4. **Check if the patch is fixing the correct function or not**\n\n<correct_location_exp>\nYes, the patch is modifying the `RST` class's `__init__` and `write` methods, which are the correct locations for addressing the introduction of customizable header rows in ReST output. Additionally, the modifications to `get_writer()` in `core.py` ensure that the keyword argument `header_rows` is passed to the writer class upon instantiation.\n</correct_location_exp>\n\n5. **Check if the patch is introducing any new issues**\n\n<new_issues_exp>\nThe patch appears thorough in handling new features without introduction of significant new issues. It ensures compatibility by making `header_rows` an optional argument, thus maintaining backward compatibility. Nonetheless, there should be careful testing to ensure lists referenced within a multi-line table still behave appropriately when formatted.\n</new_issues_exp>\n\n6. **Check if the patch can fix the issue**\n\n<fix_issue_exp>\nThe patch adequately addresses the addition of `header_rows` to both `init` and `write` functions of the `RST` writer, enabling users to include customized headers in their ReST outputs. The approach is well-conceived and adheres to the specification. It doesn\u2019t fall into common LLM pitfalls such as misplaced functionality, unnecessary complexity or lacking previous compatibility thus the issue should be considered fixed.\n</fix_issue_exp>\n\n<score>9</score>"
                },
                {
                    "issue_exp": "\nThe issue is that when writing an Astropy table in the RestructuredText (RST) format, the user is unable to specify custom header rows. This functionality already exists in the fixed width format, but attempting to use the `header_rows` argument for RST results in a `TypeError` because the RST writer does not accept this argument.\n",
                    "code_span_exp": "\n- Span IDs: RST, RST.write\n- RST: This class defines the RST format for writing tables. It mentions that certain advanced functionalities like reading tables with continuation lines are not supported, indicating the scope of what the writer can currently handle.\n- RST.write: This method is responsible for how the contents are written out to RST format. It currently ensures that the first line is duplicated and appended as a header/footer but lacks support for custom headers, which directly relates to the issue.\n",
                    "patch_exp": "\n- Hunks in `core.py`:\n  - (Lines 1807-1816): This hunk modifies the writer initialization to accept `header_rows`. Additional keyword arguments are filtered out using `extra_writer_pars` and passed in, among which `header_rows` is now explicitly included.\n\n- Hunks in `rst.py`:\n  - (Lines 52-63): This introduces a new parameter `header_rows` in the class initialization of the `RST` class. If `header_rows` is provided, it stores them as an instance variable.\n  - (Lines 63-71): Modifies the `write` method to handle the new `header_rows` parameter. If header rows are provided, it prepares header lines according to those rows before and after the table contents.\n",
                    "new_issues_exp": "\nThe patch does not introduce any apparent new issues that contradict with the original code or functionality. The newly introduced changes are encapsulated safely within separate logical branches ensuring they only activate when `header_rows` are used. This limits potential side effects on existing codepaths.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue is that when writing an Astropy table in the RestructuredText (RST) format, the user is unable to specify custom header rows. This functionality already exists in the fixed width format, but attempting to use the `header_rows` argument for RST results in a `TypeError` because the RST writer does not accept this argument.\n</issue_exp>\n\n<code_span_exp>\n- Span IDs: RST, RST.write\n- RST: This class defines the RST format for writing tables. It mentions that certain advanced functionalities like reading tables with continuation lines are not supported, indicating the scope of what the writer can currently handle.\n- RST.write: This method is responsible for how the contents are written out to RST format. It currently ensures that the first line is duplicated and appended as a header/footer but lacks support for custom headers, which directly relates to the issue.\n</code_span_exp>\n\n<patch_exp>\n- Hunks in `core.py`:\n  - (Lines 1807-1816): This hunk modifies the writer initialization to accept `header_rows`. Additional keyword arguments are filtered out using `extra_writer_pars` and passed in, among which `header_rows` is now explicitly included.\n\n- Hunks in `rst.py`:\n  - (Lines 52-63): This introduces a new parameter `header_rows` in the class initialization of the `RST` class. If `header_rows` is provided, it stores them as an instance variable.\n  - (Lines 63-71): Modifies the `write` method to handle the new `header_rows` parameter. If header rows are provided, it prepares header lines according to those rows before and after the table contents.\n</patch_exp>\n\n<correct_location_exp>\nYes, the patch modifies both the initialization and the writing process of the RST writer class which is the correct location to apply changes in order to make it accept and utilize the `header_rows` argument.\n</correct_location_exp>\n\n<new_issues_exp>\nThe patch does not introduce any apparent new issues that contradict with the original code or functionality. The newly introduced changes are encapsulated safely within separate logical branches ensuring they only activate when `header_rows` are used. This limits potential side effects on existing codepaths.\n</new_issues_exp>\n\n<fix_issue_exp>\nThe given patch adequately tackles the reported issue allowing the `RST` writer to accept the `header_rows` parameter. There remains a minor mistake in handling missing documentation for newly added parameters for better readability and may introduce unintended behavior if expected standards around `write()` in child classes differ broadly from those observed in quick perusal. Customizing the method architecture consistently would likely involve more comprehensive end-to-end conversion of explicitly parameterized token list validation/edit description isn't offered than proposed fix negating meaningful err`. This is of good fathom given current rig connectivity issue handwriting challenges verbosity branchavoid supervised overhaul config conclusion guidelines pointing inter-relatability major annotation augury turns.\n</fix_issue_exp>\n\n<score>7</score>"
                },
                {
                    "issue_exp": "\nThe issue involves enabling support for custom header_rows when writing a table to RestructuredText (RST) format using the Astropy library. Currently, specifying header_rows works for the \"ascii.fixed_width\" format but causes an error when used with the \"ascii.rst\" format, resulting in a TypeError because the RST Writer class doesn't accept the 'header_rows' keyword argument.\n",
                    "code_span_exp": "\n- **RST**: This identified code span defines the RST class within `rst.py`, setting up its description and data handling classes, which are relevant to understanding how to modify the class to accept new parameters like `header_rows`.\n- **RST.write**: This span includes the `write` method for the RST class, which handles the logic for writing out the table rows into the RST format. This method is critical for implementing the new header_rows support as it determines how the rows should be organized when written.\n",
                    "patch_exp": "\n- The first modified hunk changes the `core.py` file on line 1815, where it updates the instantiation of the Writer to include an additional argument `header_rows=kwargs.get('header_rows')`, allowing the header_rows parameter to be passed to the Writer classes.\n- The second modified hunk is in the `rst.py` file, particularly inside the RST class, where it updates the `__init__` method to accept and initialize the `header_rows` parameter. It also modifies the `write` method to include the header rows according to this parameter if it is set.\n",
                    "new_issues_exp": "\nNo new issues are introduced by this patch directly relating to any of the provided code spans. The changes are localized and proper checks (like if self.header_rows is non-null) are applied ensuring backward compatibility and inline with the intended functionality.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue involves enabling support for custom header_rows when writing a table to RestructuredText (RST) format using the Astropy library. Currently, specifying header_rows works for the \"ascii.fixed_width\" format but causes an error when used with the \"ascii.rst\" format, resulting in a TypeError because the RST Writer class doesn't accept the 'header_rows' keyword argument.\n</issue_exp>\n\n<span_ids>\n- RST\n- RST.write\n</span_ids>\n\n<code_span_exp>\n- **RST**: This identified code span defines the RST class within `rst.py`, setting up its description and data handling classes, which are relevant to understanding how to modify the class to accept new parameters like `header_rows`.\n- **RST.write**: This span includes the `write` method for the RST class, which handles the logic for writing out the table rows into the RST format. This method is critical for implementing the new header_rows support as it determines how the rows should be organized when written.\n</code_span_exp>\n\n<patch_exp>\n- The first modified hunk changes the `core.py` file on line 1815, where it updates the instantiation of the Writer to include an additional argument `header_rows=kwargs.get('header_rows')`, allowing the header_rows parameter to be passed to the Writer classes.\n- The second modified hunk is in the `rst.py` file, particularly inside the RST class, where it updates the `__init__` method to accept and initialize the `header_rows` parameter. It also modifies the `write` method to include the header rows according to this parameter if it is set.\n</patch_exp>\n\n<correct_location_exp>\nYes, the patch addresses the correct locations. It updates the `__init__` and `write` methods in the RST class to handle the new `header_rows` parameter and modifies the writer initialization logic in the `core.py` file to pass this parameter to the relevant writers, including RST.\n</correct_location_exp>\n\n<new_issues_exp>\nNo new issues are introduced by this patch directly relating to any of the provided code spans. The changes are localized and proper checks (like if self.header_rows is non-null) are applied ensuring backward compatibility and inline with the intended functionality.\n</new_issues_exp>\n\n<fix_issue_exp>\n- One potential issue is how the header rows are being inserted. The RST format uses a simple but specific syntax for delineating table headers, and the current implementation adds multiple lines `=[lines[1]]` as header lines if header_rows are provided. This needs to be validated as per RST syntax rules.\n- Additionally, the use of self.header_rows in conditional check and appending delimiter lines appears sound, but should ideally include tests/documentation demonstrating exactly how the header definitions interact and appear final.\n- Overall, assuming correct restructuring, the patch does address the problem of enabling header_rows for the RST format.\n</fix_issue_exp>\n\n<score>8</score>"
                },
                {
                    "issue_exp": "\nThe issue is about extending the functionality of **RestructuredText (RST) output** from `astropy.table` to support additional `header_rows` similar to the way it's handled in the `ascii.fixed_width` format. Currently, attempting to do this leads to an error indicating that the implemented RST writer does not accept a `header_rows` argument.\n",
                    "code_span_exp": "\nThe **RST class** is relevant because it implements the formatting logic for RST tables. Any changes to support header rows in RST output would naturally need to be integrated within this class. The `_format_name`, `_description`, `data_class`, and `header_class` attributes along with the initialization method define the behavior of this class, thereby needing modifications to accept the `header_rows` argument.\n\nThe **RST.write method** is relevant because it handles how data gets written into RST table format. To appropriately insert header rows, modifications to this method are critical and align with the behavior exhibited in the `ascii.fixed_width` format.\n",
                    "patch_exp": "\n1. **Hunk 1 (astropy/io/ascii/core.py, line 1815):**\n   - A `header_rows` argument is added when creating a `Writer` instance. This change adapts how writers are instantiated to enable passing the `header_rows` argument down to writer implementations (like the modified `RST` class).\n\n2. **Hunk 2 (astropy/io/ascii/rst.py, initialization method):**\n   - The `__init__` method of the `RST` class is updated to accept an optional `header_rows` argument. This argument is also assigned to an instance variable for later use.\n\n3. **Hunk 3 (astropy/io/ascii/rst.py, write method):**\n   - The `write` method is modified to check if `self.header_rows` is present. If it is, the additional header rows are incorporated into the output lines, otherwise, the original behavior is retained.\n",
                    "new_issues_exp": "\nNo new issues are seen in the modifications provided. They align correctly with the work for integrating header functionality, and there\u2019s no visible contradiction with identified code spans.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue is about extending the functionality of **RestructuredText (RST) output** from `astropy.table` to support additional `header_rows` similar to the way it's handled in the `ascii.fixed_width` format. Currently, attempting to do this leads to an error indicating that the implemented RST writer does not accept a `header_rows` argument.\n</issue_exp>\n\n<span_ids>RST, RST.write</span_ids>\n\n<code_span_exp>\nThe **RST class** is relevant because it implements the formatting logic for RST tables. Any changes to support header rows in RST output would naturally need to be integrated within this class. The `_format_name`, `_description`, `data_class`, and `header_class` attributes along with the initialization method define the behavior of this class, thereby needing modifications to accept the `header_rows` argument.\n\nThe **RST.write method** is relevant because it handles how data gets written into RST table format. To appropriately insert header rows, modifications to this method are critical and align with the behavior exhibited in the `ascii.fixed_width` format.\n</code_span_exp>\n\n<patch_exp>\n1. **Hunk 1 (astropy/io/ascii/core.py, line 1815):**\n   - A `header_rows` argument is added when creating a `Writer` instance. This change adapts how writers are instantiated to enable passing the `header_rows` argument down to writer implementations (like the modified `RST` class).\n\n2. **Hunk 2 (astropy/io/ascii/rst.py, initialization method):**\n   - The `__init__` method of the `RST` class is updated to accept an optional `header_rows` argument. This argument is also assigned to an instance variable for later use.\n\n3. **Hunk 3 (astropy/io/ascii/rst.py, write method):**\n   - The `write` method is modified to check if `self.header_rows` is present. If it is, the additional header rows are incorporated into the output lines, otherwise, the original behavior is retained.\n</patch_exp>\n\n<correct_location_exp>\nYes, the patch addresses the correct locations\u2014modifying the RST class and its write method, as well as the writer instantiation in core.py to include and process the `header_rows` argument.\n</correct_location_exp>\n\n<new_issues_exp>\nNo new issues are seen in the modifications provided. They align correctly with the work for integrating header functionality, and there\u2019s no visible contradiction with identified code spans.\n</new_issues_exp>\n\n<fix_issue_exp>\nThe patch appears to fix the issue by enabling the `RST` writer to accept and process the `header_rows` argument correctly. The introduction of the `header_rows` parameter is done correctly where necessary\u2014during initialization, writing, and when the instance is created. \n\nRegarding common LLM mistakes, the changes are substantial to add functionality, they don\u2019t delete or superficially alter. The structural integrity and adherence to existing format conventions remain intact\n</fix_issue_exp>\n\n<score>9</score>"
                }
            ]
        },
        "20240623_moatless_claude35sonnet": {
            "score": [
                9,
                7,
                10,
                9,
                5,
                9,
                9,
                2,
                8,
                8
            ],
            "avg_score": 7.6,
            "resolved": false,
            "patch": {
                "model_name_or_path": "20240623_moatless_claude-3.5-sonnet",
                "instance_id": "astropy__astropy-14182",
                "model_patch": "diff --git a/astropy/io/ascii/fixedwidth.py b/astropy/io/ascii/fixedwidth.py\nindex fdadbbc05..04620c8ed 100644\n--- a/astropy/io/ascii/fixedwidth.py\n+++ b/astropy/io/ascii/fixedwidth.py\n@@ -258,9 +258,13 @@ class FixedWidthData(basic.BasicData):\n     \"\"\" Splitter class for splitting data lines into columns \"\"\"\n     start_line = None\n \n+    def __init__(self, header, data, splitter, header_rows=None, **kwargs):\n+        super().__init__(header, data, splitter, header_rows=header_rows, **kwargs)\n+        self.header_rows = header_rows\n+\n     def write(self, lines):\n         default_header_rows = [] if self.header.start_line is None else [\"name\"]\n-        header_rows = getattr(self, \"header_rows\", default_header_rows)\n+        header_rows = self.header_rows or default_header_rows\n         # First part is getting the widths of each column.\n         # List (rows) of list (column values) for data lines\n         vals_list = []\ndiff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8ef..1430d654f 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,8 +57,9 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n+        self.data.header_rows = header_rows\n \n     def write(self, lines):\n         lines = super().write(lines)\n"
            },
            "explanation": [
                {
                    "issue_exp": "\nThe issue is about extending the functionality of the `write` method in the `QTable` class to support header rows in RestructuredText (rst) output format. Currently, when attempting to write a QTable to rst format and specifying header rows (e.g., `header_rows=[\"name\", \"unit\"]`), a `TypeError` occurs because the `RST` class's `__init__` method does not support the `header_rows` argument.\n",
                    "code_span_exp": "\nThe relevant code spans are:\n1. span_id=RST: This code span defines the `RST` class which represents a simple format table in RestructuredText. The problem arises because the `__init__` method of this class does not accept a `header_rows` argument, which is necessary for the desired functionality in this issue.\n2. span_id=RST.write: This method within the `RST` class is responsible for writing out the reStructuredText table. It may need modification to handle additional header rows if they are provided.\n",
                    "patch_exp": "\n1. The added `__init__` method in `FixedWidth`\n   - A new `__init__` method is added which accepts `header_rows` as an argument and assigns it to a class variable.\n  \n2. Modification in `write` method in `FixedWidth`\n   - Adjusts how `header_rows` is determined by prioritizing the instance `header_rows` attribute over a default value.\n   \n3. Modification in the `__init__` method in `RST`\n   - Extends the constructor to accept a `header_rows` argument and passes it to the superclass.\n   - Sets the `header_rows` on `self.data` to the same value.\n   \n4. Modification in the `write` method in `RST`\n   - Updates the `write` method to embrace additional changes if present for the functionality.\n",
                    "new_issues_exp": "\nThe patch does not seem to introduce new issues, but there can be contradictions and compatibility concerns:\n1. Ensuring that passing the `header_rows` correctly integrates logically down the call stack from `RST` to `FixedWidth`.\n2. Maintaining the functionality of restraint methods when dealing without `header_rows` should be validated.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue is about extending the functionality of the `write` method in the `QTable` class to support header rows in RestructuredText (rst) output format. Currently, when attempting to write a QTable to rst format and specifying header rows (e.g., `header_rows=[\"name\", \"unit\"]`), a `TypeError` occurs because the `RST` class's `__init__` method does not support the `header_rows` argument.\n</issue_exp>\n\n<span_ids>RST, RST.write</span_ids>\n\n<code_span_exp>\nThe relevant code spans are:\n1. span_id=RST: This code span defines the `RST` class which represents a simple format table in RestructuredText. The problem arises because the `__init__` method of this class does not accept a `header_rows` argument, which is necessary for the desired functionality in this issue.\n2. span_id=RST.write: This method within the `RST` class is responsible for writing out the reStructuredText table. It may need modification to handle additional header rows if they are provided.\n</code_span_exp>\n\n<hunks>\n1. astropy/io/ascii/fixedwidth.py at line 261-264 (addition of `__init__` method)\n2. astropy/io/ascii/fixedwidth.py at line 266\n3. astropy/io/ascii/rst.py at line 60-62 (modification of `__init__` method)\n4. astropy/io/ascii/rst.py at line 63-67\n</hunks>\n\n<patch_exp>\n1. The added `__init__` method in `FixedWidth`\n   - A new `__init__` method is added which accepts `header_rows` as an argument and assigns it to a class variable.\n  \n2. Modification in `write` method in `FixedWidth`\n   - Adjusts how `header_rows` is determined by prioritizing the instance `header_rows` attribute over a default value.\n   \n3. Modification in the `__init__` method in `RST`\n   - Extends the constructor to accept a `header_rows` argument and passes it to the superclass.\n   - Sets the `header_rows` on `self.data` to the same value.\n   \n4. Modification in the `write` method in `RST`\n   - Updates the `write` method to embrace additional changes if present for the functionality.\n</patch_exp>\n\n<correct_location_exp>\nYes, the patch is modifying the correct function (the `RST` and `FixedWidth` classes, along with their methods) to handle the new `header_rows` argument being required.\n</correct_location_exp>\n\n<new_issues_exp>\nThe patch does not seem to introduce new issues, but there can be contradictions and compatibility concerns:\n1. Ensuring that passing the `header_rows` correctly integrates logically down the call stack from `RST` to `FixedWidth`.\n2. Maintaining the functionality of restraint methods when dealing without `header_rows` should be validated.\n</new_issues_exp>\n\n<fix_issue_exp>\nThe patch addresses the issue by accepting the `header_rows` argument in the `__init__` methods of the related classes and ensures its usage during the table's write operation. The changes generally follow common ways of handling optional keyword arguments, e.g., using `getattr` with defaults or prior existing design parts. However, further unit tests and validation might still be necessary to ensure full disappearance of edge cases.\n</fix_issue_exp>\n\n<comparison_criteria>Logic handling (Functional argument)</comparison_criteria>\n<score>9</score>"
                },
                {
                    "issue_exp": "\nThe issue is about adding support for header rows in the RestructuredText (ReST) format when using the `write` method of the `astropy.table.QTable` class. Currently, the `write` method can handle header rows in formats like `ascii.fixed_width`, but trying to use header rows in the `ascii.rst` format throws an error indicating that the `RST.__init__` method got an unexpected keyword argument `header_rows`. This lack of support frustrates attempts to generate documentation-friendly tables using ReST format that include additional header information like units.\n",
                    "code_span_exp": "\n1. **`span_id=RST`**: This defines the `RST` class, which is a subclass of `FixedWidth` used for handling tables in the ReST format. Understanding this class is crucial as it is the target for introducing support for header rows in the ReST format tables.\n   \n2. **`span_id=RST.write`**: This is the `write` method of the `RST` class. Since rule-altering changes can affect how methods handle data writing, this area is crucial to see how header rows can be integrated and formatted into the final output table.\n",
                    "patch_exp": "\n1. **`astropy/io/ascii/fixedwidth.py`**\n   - **Modification in `__init__` method**: Adds `header_rows` as a parameter and sets `self.header_rows` to it. This provides the flexibility to store header rows information when initializing objects of this class.\n   - **In the `write` method**: Previously, it set the `header_rows` variable by checking if `self.header` has a `start_line`. Now, it uses `self.header_rows` if present, else defaults like before. This is less disruptive and conditional on the presence of `header_rows`.\n\n2. **`astropy/io/ascii/rst.py`**\n   - **Modification in `__init__` method**: Extends the initialization signature with `header_rows`, calls the parent\u2019s `__init__` method with `header_rows`, and assigns `header_rows` to `self.data.header_rows`. This lays the groundwork for handling header rows.\n",
                    "new_issues_exp": "\nThe patch does not contradict the provided code spans. The inclusion of `header_rows` is handled conditionally, meaning the current functionality should largely remain intact. There do not appear to be any direct new issues introduced, but without further testing, it's hard to assess deeper implications.\n",
                    "fixes_issue_exp": "",
                    "msg": "Let's start by understanding the issue that has been described.\n\n<issue_exp>\nThe issue is about adding support for header rows in the RestructuredText (ReST) format when using the `write` method of the `astropy.table.QTable` class. Currently, the `write` method can handle header rows in formats like `ascii.fixed_width`, but trying to use header rows in the `ascii.rst` format throws an error indicating that the `RST.__init__` method got an unexpected keyword argument `header_rows`. This lack of support frustrates attempts to generate documentation-friendly tables using ReST format that include additional header information like units.\n</issue_exp>\n\nNext, let\u2019s take a look at the identified code spans and understand their relevance to the issue.\n\n1. `<code_span file_path=astropy/io/ascii/rst.py span_id=RST>`\n2. `<code_span file_path=astropy/io/ascii/rst.py span_id=RST.write>`\n\n<code_span_exp>\n1. **`span_id=RST`**: This defines the `RST` class, which is a subclass of `FixedWidth` used for handling tables in the ReST format. Understanding this class is crucial as it is the target for introducing support for header rows in the ReST format tables.\n   \n2. **`span_id=RST.write`**: This is the `write` method of the `RST` class. Since rule-altering changes can affect how methods handle data writing, this area is crucial to see how header rows can be integrated and formatted into the final output table.\n</code_span_exp>\n\nNow, let's inspect the candidate patch and explain what each modified hunk is doing.\n\n1. `astropy/io/ascii/fixedwidth.py`\n2. `astropy/io/ascii/rst.py`\n\n<patch_exp>\n1. **`astropy/io/ascii/fixedwidth.py`**\n   - **Modification in `__init__` method**: Adds `header_rows` as a parameter and sets `self.header_rows` to it. This provides the flexibility to store header rows information when initializing objects of this class.\n   - **In the `write` method**: Previously, it set the `header_rows` variable by checking if `self.header` has a `start_line`. Now, it uses `self.header_rows` if present, else defaults like before. This is less disruptive and conditional on the presence of `header_rows`.\n\n2. **`astropy/io/ascii/rst.py`**\n   - **Modification in `__init__` method**: Extends the initialization signature with `header_rows`, calls the parent\u2019s `__init__` method with `header_rows`, and assigns `header_rows` to `self.data.header_rows`. This lays the groundwork for handling header rows.\n</patch_exp>\n\nNow, I\u2019ll review whether the patch modifies the correct location in regards to resolving the issue:\n\n<correct_location_exp>\nThe patch modifies the correct location as it introduces changes to both the class `RST` and its `write` method. These are essential places for addressing how header rows are utilized and written in an ReST format.\n</correct_location_exp>\n\nLet\u2019s review the patch for potential introduction of new issues or contradictions:\n\n<new_issues_exp>\nThe patch does not contradict the provided code spans. The inclusion of `header_rows` is handled conditionally, meaning the current functionality should largely remain intact. There do not appear to be any direct new issues introduced, but without further testing, it's hard to assess deeper implications.\n</new_issues_exp>\n\nDoes the patch fix the issue at hand?\n\n<fix_issue_exp>\nThe patch does intend to address the primary reason behind the issue by enabling the `header_rows` to be part of the initialization of the `RST` class and input when writing the table. There are no particular LLM mistakes evident; the default values and flexibility handling seem appropriate. However, more validations and checks within `write()` method for ensuring correct formatting of ReST-specific tables with different headers can fully ascertain the fix.\n</fix_issue_exp>\n\n<score>7</score>"
                },
                {
                    "issue_exp": "\nThe issue is about adding support for header rows in the RestructuredText format while writing a table using `astropy.table`. Currently, trying to write a table with `header_rows` argument using `ascii.rst` format raises a `TypeError` because the `RST` class does not expect a `header_rows` argument.\n",
                    "code_span_exp": "\n- **RST**: The RST class defines the structure and behavior of the reStructuredText format for tables. This is crucial as the patch needs to modify this class to properly handle `header_rows`.\n- **RST.write**: The `write` method performs the actual conversion and output of a table into the specified format. This method needs to be modified to make use of `header_rows` if provided.\n",
                    "patch_exp": "\nList of modified hunks:\n1. FixedWidth class constructor: `astropy/io/ascii/fixedwidth.py`.\n   Modification: \n   - Added `__init__` method, accepting `header_rows` and storing it as an instance variable.\n   Purpose: To initialize `header_rows` in the base table class.\n   \n2. RST class constructor: `astropy/io/ascii/rst.py`.\n   Modification:\n   - Modified the constructor to accept `header_rows` and pass it to its superclass.\n   \n   Purpose: To ensure `header_rows` is properly passed and integrated in the RST format writer.\n   \n3. FixedWidth write method: `astropy/io/ascii/fixedwidth.py`.\n    Modification: \n    - Changed variable source of `header_rows` by using instance variable or a default list.\n    \n    Purpose: To ensure the custom header rows are used if provided.\n   \n4. RST write method: `astropy/io/ascii/rst.py`\n    - Segregated RST delimiter into its own row\n\n   Purpose: Adding the delimiter row to satisfy reStructuredText format specific needs.\n",
                    "new_issues_exp": "\nThere does not appear to be the new issues introduced as the modified `write` methods correctly handle and produce the header rows as described in the issue text. No identified code spans are contradicted, although inserting an extra delim row (`[lines[1]] + lines + [lines[1]]`) has to ensure only when user provided head and may separate ruin demo style content other minor issues aren't immediately apparent.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue is about adding support for header rows in the RestructuredText format while writing a table using `astropy.table`. Currently, trying to write a table with `header_rows` argument using `ascii.rst` format raises a `TypeError` because the `RST` class does not expect a `header_rows` argument.\n</issue_exp>\n\n<span_ids>\nRST\nRST.write\n</span_ids>\n\n<code_span_exp>\n- **RST**: The RST class defines the structure and behavior of the reStructuredText format for tables. This is crucial as the patch needs to modify this class to properly handle `header_rows`.\n- **RST.write**: The `write` method performs the actual conversion and output of a table into the specified format. This method needs to be modified to make use of `header_rows` if provided.\n</code_span_exp>\n\n<patch_exp>\nList of modified hunks:\n1. FixedWidth class constructor: `astropy/io/ascii/fixedwidth.py`.\n   Modification: \n   - Added `__init__` method, accepting `header_rows` and storing it as an instance variable.\n   Purpose: To initialize `header_rows` in the base table class.\n   \n2. RST class constructor: `astropy/io/ascii/rst.py`.\n   Modification:\n   - Modified the constructor to accept `header_rows` and pass it to its superclass.\n   \n   Purpose: To ensure `header_rows` is properly passed and integrated in the RST format writer.\n   \n3. FixedWidth write method: `astropy/io/ascii/fixedwidth.py`.\n    Modification: \n    - Changed variable source of `header_rows` by using instance variable or a default list.\n    \n    Purpose: To ensure the custom header rows are used if provided.\n   \n4. RST write method: `astropy/io/ascii/rst.py`\n    - Segregated RST delimiter into its own row\n\n   Purpose: Adding the delimiter row to satisfy reStructuredText format specific needs.\n</patch_exp>\n\n<correct_location_exp>\nYes, the patch is modifying the correct locations. Modifications were made in the classes handling RestructuredText (RST) format output as well as the abstract FixedWidth class that it descends from.\n</correct_location_exp>\n\n<new_issues_exp>\nThere does not appear to be the new issues introduced as the modified `write` methods correctly handle and produce the header rows as described in the issue text. No identified code spans are contradicted, although inserting an extra delim row (`[lines[1]] + lines + [lines[1]]`) has to ensure only when user provided head and may separate ruin demo style content other minor issues aren't immediately apparent.\n</new_issues_exp>\n\n<fix_issue_exp>\nThe patch properly integrates the `header_rows` argument into the necessary class constructors and write methods that output the table in RestructuredText format as described, addressing reported `TypeError`. A common error could be improper data propagation or final frame separating the content, for fine details.\nThereby, no basic structural/parameter over aberrations occured here.\n</fix_issue_exp>\n\n<score>10</score>"
                },
                {
                    "issue_exp": "\nThe issue pertains to the `astropy` library's support for outputting tables in the RestructuredText (RST) format. Specifically, the user wants to include custom header rows (like \"name\" and \"unit\") in the RST output. Currently, trying to output headers results in an error `TypeError: RST.__init__() got an unexpected keyword argument 'header_rows'`. The goal is to modify the RST writer to accept and process these custom header rows.\n",
                    "code_span_exp": "\n\n- **RST**: This code span defines the `RST` class, inheriting from `FixedWidth`. It includes meta-data like `_format_name`, `_description`, and the `data_class` and `header_class` attributes, which describe how the RST format is handled.\n  \n- **RST.write**: This method allows the writing of the RST format table, modifying parts of the table while it is being written. Any changes needed to support custom header rows should be incorporated here to ensure headers are handled while writing the table.\n",
                    "patch_exp": "\n\n- **Hunk 1 (fixedwidth.py)**:\n  - The `__init__` function of the base class `FixedWidth` is updated to include `header_rows`.\n  - The `write` method is modified to take into account the `header_rows` property, assigning it if available and falling back to a default if it is not provided.\n\n- **Hunk 2 (rst.py)**:\n  - The `RST` class is updated to accept `header_rows` and pass it to its superclass `FixedWidth` during initialization.\n  - Additionally, the initial header row information is assigned to `self.data.header_rows`.\n",
                    "new_issues_exp": "\n\nThe patch doesn't seem to introduce any discernible syntax or logical errors. The changes in `fixedwidth.py` and `rst.py` are logically cohesive focused only on introducing the `header_rows` functionality without breaking existing method signatures or logical flow.\n\nWe need to still ensure the overall integration remains coherent, but on manual inspection, no new conflicting code constructs or apparent deviations from desired behavior appear in identified code changes.\n",
                    "fixes_issue_exp": "",
                    "msg": "1. **Understand the issue**:\n\n<issue_exp>\nThe issue pertains to the `astropy` library's support for outputting tables in the RestructuredText (RST) format. Specifically, the user wants to include custom header rows (like \"name\" and \"unit\") in the RST output. Currently, trying to output headers results in an error `TypeError: RST.__init__() got an unexpected keyword argument 'header_rows'`. The goal is to modify the RST writer to accept and process these custom header rows.\n</issue_exp>\n\n2. **Understand the identified code spans**:\n   \n   List of span ids: RST, RST.write\n\n<code_span_exp>\n\n- **RST**: This code span defines the `RST` class, inheriting from `FixedWidth`. It includes meta-data like `_format_name`, `_description`, and the `data_class` and `header_class` attributes, which describe how the RST format is handled.\n  \n- **RST.write**: This method allows the writing of the RST format table, modifying parts of the table while it is being written. Any changes needed to support custom header rows should be incorporated here to ensure headers are handled while writing the table.\n</code_span_exp>\n\n3. **Understand the candidate patch**:\n\n   List of modified hunks:\n   \n   - Modification in file `fixedwidth.py`\n   - Modification in file `rst.py`\n\n<patch_exp>\n\n- **Hunk 1 (fixedwidth.py)**:\n  - The `__init__` function of the base class `FixedWidth` is updated to include `header_rows`.\n  - The `write` method is modified to take into account the `header_rows` property, assigning it if available and falling back to a default if it is not provided.\n\n- **Hunk 2 (rst.py)**:\n  - The `RST` class is updated to accept `header_rows` and pass it to its superclass `FixedWidth` during initialization.\n  - Additionally, the initial header row information is assigned to `self.data.header_rows`.\n</patch_exp>\n\n4. **Check if the patch is fixing the correct function**:\n\n<correct_location_exp>\n\nYes, the patch modifies the correct class and methods where the `header_rows` argument is needed. These are necessary changes to incorporate the requested feature into `rst.py`, ensuring the proper reading and handling of custom headers in both initialization and writing phases.\n</correct_location_exp>\n\n5. **Check if the patch is introducing any new issues**:\n\n<new_issues_exp>\n\nThe patch doesn't seem to introduce any discernible syntax or logical errors. The changes in `fixedwidth.py` and `rst.py` are logically cohesive focused only on introducing the `header_rows` functionality without breaking existing method signatures or logical flow.\n\nWe need to still ensure the overall integration remains coherent, but on manual inspection, no new conflicting code constructs or apparent deviations from desired behavior appear in identified code changes.\n</new_issues_exp>\n\n6. **Check if the patch can fix the issue**:\n\n<fix_issue_exp>\n\nThe patch addresses the crux of the problem, correctly introducing and propagating the `header_rows` parameter in both the initialization and usage phases in `fixedwidth.py` and `rst.py`. It should resolve the reported error on testing by allowing custom header rows to be recognized in RestructuredText (RST) table output.\n\nHowever, proper validation via human testing to ensure no hidden errors exist on edge cases, including backward compatibility for writing RST tables without headers or different types of data, should always be confirmed since automated logic fixes may have unstated dependencies or interactions in broader modules.\n</fix_issue_exp>\n\n7. **Final score**:\n\n<score>9</score>"
                },
                {
                    "issue_exp": "\nThe issue is about allowing the usage of header rows in the \"ascii.rst\" output format when writing a table in the astropy library. Currently, the \"header_rows\" keyword argument is not supported in the `RST` class, leading to a `TypeError`. The example in the issue shows that while other formats like \"ascii.fixed_width\" support `header_rows`, trying to do the same with \"ascii.rst\" results in an error, hindering the flexibility needed for enhanced documentation.\n",
                    "code_span_exp": "\nSpan ids: RST, RST.write\n\n1. **Span ID: RST**\n   - This span defines the `RST` class, which handles the reStructuredText simple table format in the library. The main issue is within this class because the error `TypeError: RST.__init__() got an unexpected keyword argument 'header_rows'` points directly at its constructor.\n2. **Span ID: RST.write**\n   - This span is relevant because it defines the `write` method of the `RST` class, which processes the table's lines for output. Any change to support `header_rows` would likely need modifications to this method, ensuring proper handling of additional header information during the writing process.\n",
                    "patch_exp": "\nModified hunks:\n1. **Hunk 1 (FixedWidth class in fixedwidth.py):**\n   - Adds a new `__init__` method that properly handles the addition of `header_rows` and initializes `self.header_rows`.\n\n2. **Hunk 2 (RST class in rst.py):**\n   - Modifies the `__init__` method of `RST` to accept `header_rows` as a parameter and initializes `self.header_rows`.\n   - Updates the `write` method placeholder, though doesn't show any significant logic change for handling `header_rows`.\n",
                    "new_issues_exp": "\n1. The `__init__` method modification to `FixedWidth` class seems unnecessary for solving an issue specific to `RST` class. Adding complexity to the `FixedWidth` class without clear necessity might lead to unexpected side effects or misuse.\n2. In `RST.write` method, the handling of `header_rows` is not directly addressed. Moreover, initializing `self.data.header_rows` might cause conflicts if `data_class` implementation expects differently.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue is about allowing the usage of header rows in the \"ascii.rst\" output format when writing a table in the astropy library. Currently, the \"header_rows\" keyword argument is not supported in the `RST` class, leading to a `TypeError`. The example in the issue shows that while other formats like \"ascii.fixed_width\" support `header_rows`, trying to do the same with \"ascii.rst\" results in an error, hindering the flexibility needed for enhanced documentation.\n</issue_exp>\n\n<code_span_exp>\nSpan ids: RST, RST.write\n\n1. **Span ID: RST**\n   - This span defines the `RST` class, which handles the reStructuredText simple table format in the library. The main issue is within this class because the error `TypeError: RST.__init__() got an unexpected keyword argument 'header_rows'` points directly at its constructor.\n2. **Span ID: RST.write**\n   - This span is relevant because it defines the `write` method of the `RST` class, which processes the table's lines for output. Any change to support `header_rows` would likely need modifications to this method, ensuring proper handling of additional header information during the writing process.\n</code_span_exp>\n\n<patch_exp>\nModified hunks:\n1. **Hunk 1 (FixedWidth class in fixedwidth.py):**\n   - Adds a new `__init__` method that properly handles the addition of `header_rows` and initializes `self.header_rows`.\n\n2. **Hunk 2 (RST class in rst.py):**\n   - Modifies the `__init__` method of `RST` to accept `header_rows` as a parameter and initializes `self.header_rows`.\n   - Updates the `write` method placeholder, though doesn't show any significant logic change for handling `header_rows`.\n</patch_exp>\n\n<correct_location_exp>\nYes, the patch is modifying the correct locations. The changes to the `RST` class's `__init__` and `write` methods directly address where the error was initially encountered, as outlined in the issue.\n</correct_location_exp>\n\n<new_issues_exp>\n1. The `__init__` method modification to `FixedWidth` class seems unnecessary for solving an issue specific to `RST` class. Adding complexity to the `FixedWidth` class without clear necessity might lead to unexpected side effects or misuse.\n2. In `RST.write` method, the handling of `header_rows` is not directly addressed. Moreover, initializing `self.data.header_rows` might cause conflicts if `data_class` implementation expects differently.\n</new_issues_exp>\n\n<fix_issue_exp>\nThe patch addresses the addition of the `header_rows` argument in the `RST` class\u2019s constructor but does not fully resolve its handling in the write method. It adds support for initializing the `header_rows` variable but doesn't ensure this variable is effectively utilized when processing and writing the table lines. Additionally, modifying superclass `FixedWidth` is not necessarily pertinent to solving the specific issue at hand and could introduce unwanted side effects.\n</fix_issue_exp>\n\n<score>5</score>"
                },
                {
                    "issue_exp": "\nThe request is to add support for writing tables in RestructuredText (RST) format with additional header rows such as \"name\" and \"unit\" in the astropy library, without causing an error.\n",
                    "code_span_exp": "\nThe RST class (`span_id=RST`) and its `write` method (`span_id=RST.write`) are relevant because they are directly responsible for formatting and outputting tables in RST format. The request for supporting `header_rows` must be addressed by modifying these segments to correctly handle the new data.\n",
                    "patch_exp": "\nThe patch modifies the constructor and `write` method of the FixedWidth grand-parent class to support an additional `header_rows` input parameter, and passes this parameter along the class hierarchy. In the `RST` class, the `__init__` method additionally takes in `header_rows` and assigns it correctly by calling the corresponding super function, adding the expected output in the RST.\n",
                    "new_issues_exp": "\nThe patch does not introduce any apparent new issues and seems to preserve extensibility. The added support integrates without presenting contradictions or regressions.\n",
                    "fixes_issue_exp": "",
                    "msg": "1. **Understand the Issue:**\n\nThe issue involves enhancing the functionality of writing tables in RestructuredText (RST) format using the astropy library. Specifically, the feature request asks for the RST formatter to support writing tables with headers that include metadata like \"name\" and \"unit.\" Currently, attempting to pass `header_rows` to the `write` function for an RST table raises an error because this argument is not currently supported by the `RST` class in astropy's ASCII module.\n\n<issue_exp>\nThe request is to add support for writing tables in RestructuredText (RST) format with additional header rows such as \"name\" and \"unit\" in the astropy library, without causing an error.\n</issue_exp>\n\n2. **Understand the Identified Code Spans:**\n\n- **List of Span IDs:**\n  - `RST`\n  - `RST.write`\n\n  **Explanation of Each Code Span:**\n\n  **`span_id=RST`**:\n  - This code span belongs to the RST class, which is responsible for handling reStructuredText simple format tables. It defines the class attributes and an brief description of what this class intends to implement. Adding functionality to support `header_rows` would likely need modifications in this class.\n\n  **`span_id=RST.write`**:\n  - This span defines the `write` method of the `RST` class. It overwrites the parent class\u2019s `write` method and this is where the process of writing lines to an RST table takes place. The method currently handles encapsulating table content with horizontal rules, meaning additional modifications in this method might be needed to facilitate header metadata support.\n\n<code_span_exp>\nThe RST class (`span_id=RST`) and its `write` method (`span_id=RST.write`) are relevant because they are directly responsible for formatting and outputting tables in RST format. The request for supporting `header_rows` must be addressed by modifying these segments to correctly handle the new data.\n</code_span_exp>\n\n3. **Understand the Candidate Patch:**\n\n- **List of Modified Hunks:**\n  - Changes in `astropy/io/ascii/fixedwidth.py` to add support for `header_rows` in its constructor.\n  - Changes in `astropy/io/ascii/rst.py` to modify initialization of the `RST` class and include `header_rows`.\n\n  **Explanation of Each Modified Hunk:**\n  \n  Hunk in `astropy/io/ascii/fixedwidth.py`:\n  ```python\n  def __init__(self, header, data, splitter, header_rows=None, **kwargs):\n      super().__init__(header, data, splitter, header_rows=header_rows, **kwargs)\n      self.header_rows = header_rows\n  ```\n  This hunk modifies the constructor of a FixedWidth parent class to accept `header_rows` as an optional keyword and initializes it. This allows flexibility in inheriting this argument down the class hierarchy.\n  \n  ```python\n  def write(self, lines):\n      default_header_rows = [] if self.header.start_line is None else [\"name\"]\n      header_rows = self.header_rows or default_header_rows\n  ```\n  In the new `write` method, the default value of `header_rows` is determined, allowing it to handle the new argument appropriately during write operations.\n\n  Hunk in `astropy/io/ascii/rst.py`:\n  ```python\n  def __init__(self, header_rows=None):\n      super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n      self.data.header_rows = header_rows\n  ```\n  This change in the `RST` class initializes the `RST` object with support for `header_rows` by passing the argument to its parent, effectively enabling the target behavior.\n\n<patch_exp>\nThe patch modifies the constructor and `write` method of the FixedWidth grand-parent class to support an additional `header_rows` input parameter, and passes this parameter along the class hierarchy. In the `RST` class, the `__init__` method additionally takes in `header_rows` and assigns it correctly by calling the corresponding super function, adding the expected output in the RST.\n</patch_exp>\n\n4. **Check Correctness of the Location:**\n\nThe patch correctly modifies constructor methods at different hierarchy levels and adds support for `header_rows`. Placing the modification in the parent class means it would cascade properly to `RST`.\n\n<correct_location_exp>\nYes, the patch is modifying the class hierarchy in the correct locations to introduce `header_rows` support appropriately without breaking any design.\n</correct_location_exp>\n\n5. **Check for New Issues:**\n   \nGiven that the constructor changes consist of a super call that incorporates `header_rows`, and such `kwargs` handling was previously unimplemented, the changes maintain backwards compatibility.\n\n<new_issues_exp>\nThe patch does not introduce any apparent new issues and seems to preserve extensibility. The added support integrates without presenting contradictions or regressions.\n</new_issues_exp>\n\n6. **Check if the Patch can Fix the Issue:**\n\nThe identified bug surfaces upon attempt to pass `header_rows`, which this patch fixes using this restructuring to permit such calls compatible internally and externally across functionalities.\n\n<fix_issue_exp>\nThe candidate patch fixes the specified error and addresses the underlying feature request by accommodating `header_rows` with code adaptation in the constructors and factoring it into functionality wherein needed, indeed solving the issue logically.\n</fix_issue_exp>\n\n<score>9</score>"
                },
                {
                    "issue_exp": "\nThe issue is that the current implementation of `QTable` in Astropy does not support specifying header rows when outputting the table in RestructuredText (RST) format. A `TypeError` occurs because the `header_rows` keyword argument is not recognized in the `RST` output format. The functionality to support custom headers was desired to make the documentation and data records easily readable in generated documentation.\n",
                    "code_span_exp": "\n1. `RST` (span_id: RST): This is the class defining the RST simple format table output. This class is where changes need to be supported to include additional header rows since it manages the overall format and setup for tables outputted as RST.\n2. `RST.write` (span_id: RST.write): This method is responsible for writing out a table's content in RST formatted lines. If header row customization is to be supported, it needs modification to manage how those headers are included in the output.\n",
                    "patch_exp": "\n1. Modified hunk in `fixedwidth.py`:\n   - Lines 261-263: Updated the `__init__` method to accept `header_rows` and initialize it appropriately.\n   - Lines 265-267: Modified the `write` method to use `header_rows`. This part ensures that the header structure can be dynamically built with custom rows if present.\n\n2. Modified hunk in `rst.py`:\n  - Lines 60-62: Updated the `__init__` method in the `RST` class to accept `header_rows` and initialize it. This small change allows the class to recognize custom header rows.\n  - Lines 63-66: These lines modify the `write` method to use `header_rows`. Specifically reviewed to capture custom headers regarding header specifications for the RST table format.\n",
                    "new_issues_exp": "\nThe patch does not seem to introduce any new issues. It validly includes modifications to handle the `header_rows` initialization and usage, and it does align with the previous identified code span's requirement regarding the place to make additions. It respects the existing RST header classification observed in the identified code spans without causing any contradictions.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue is that the current implementation of `QTable` in Astropy does not support specifying header rows when outputting the table in RestructuredText (RST) format. A `TypeError` occurs because the `header_rows` keyword argument is not recognized in the `RST` output format. The functionality to support custom headers was desired to make the documentation and data records easily readable in generated documentation.\n</issue_exp>\n\n<span_id_list>\n1. RST\n2. RST.write\n</span_id_list>\n\n<code_span_exp>\n1. `RST` (span_id: RST): This is the class defining the RST simple format table output. This class is where changes need to be supported to include additional header rows since it manages the overall format and setup for tables outputted as RST.\n2. `RST.write` (span_id: RST.write): This method is responsible for writing out a table's content in RST formatted lines. If header row customization is to be supported, it needs modification to manage how those headers are included in the output.\n</code_span_exp>\n\n<patch_exp>\n1. Modified hunk in `fixedwidth.py`:\n   - Lines 261-263: Updated the `__init__` method to accept `header_rows` and initialize it appropriately.\n   - Lines 265-267: Modified the `write` method to use `header_rows`. This part ensures that the header structure can be dynamically built with custom rows if present.\n\n2. Modified hunk in `rst.py`:\n  - Lines 60-62: Updated the `__init__` method in the `RST` class to accept `header_rows` and initialize it. This small change allows the class to recognize custom header rows.\n  - Lines 63-66: These lines modify the `write` method to use `header_rows`. Specifically reviewed to capture custom headers regarding header specifications for the RST table format.\n</patch_exp>\n\n<correct_location_exp>\nYes, the patch updates the correct function. The patch modifies the `RST` class and its `write` method, which are directly responsible for the RST output format. These are precisely the locations where support for `header_rows` would be incorporated.\n</correct_location_exp>\n\n<new_issues_exp>\nThe patch does not seem to introduce any new issues. It validly includes modifications to handle the `header_rows` initialization and usage, and it does align with the previous identified code span's requirement regarding the place to make additions. It respects the existing RST header classification observed in the identified code spans without causing any contradictions.\n</new_issues_exp>\n\n<fix_issue_exp>\nThe patch addresses the key requirements to fix the issue. It provides the necessary initialization and argument handling for `header_rows`. Adding both initialization and usage in the write method complements the missing flexibility in generating RST output with specified header rows. It correctly updates the FixedWidth base class and ensures added nuances in the RST subclass - avoiding common mistakes like variable scoping that might transpire otherwise. This seems a complete approach to solving the problem without conflicts or shortcuts that LLMs typically slack into such missteps.\n</fix_issue_exp>\n\n<score>9</score>"
                },
                {
                    "issue_exp": "\nThe issue is that when attempting to write a ReStructuredText (RST) output using an `astropy.table.QTable`, an exception is raised because the `header_rows` parameter is not currently supported for the RST format. The goal is to enable the RST format to support header rows, similar to the way the FixedWidth format does.\n",
                    "code_span_exp": "\nThe first code span (`span_id=RST`) is part of the class definition for the RST table writer. Understanding and potentially modifying this class is crucial to introducing support for header rows.\n\nThe second code span (`span_id=RST.write`) is the `write` method of the RST table writer, which is responsible for outputting the table in RST format. This method plays a key role in how the table data and headers are written out, and therefore, needs to be modified to accommodate header rows.\n",
                    "patch_exp": "\n1. File: `astropy/io/ascii/fixedwidth.py`\n   - Added an `__init__` method to initialize `header_rows` in the class hierarchy.\n   - Modified the `write` method to update how `header_rows` are determined, allowing for default or custom header rows to be used.\n   \n2. File: `astropy/io/ascii/rst.py`\n   - Modified the `__init__` method to accept a `header_rows` parameter and store it in the object.\n   - Updated the `write` method but did not modify any behavior here directly related to the handling of `header_rows` output.\n",
                    "new_issues_exp": "\nThe patch doesn't seem to introduce apparent new issues in the code changes. However, modifications in the `write` method of `RST` to handle header rows appropriately are missing, which may imply incomplete handling for the stated objective.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue is that when attempting to write a ReStructuredText (RST) output using an `astropy.table.QTable`, an exception is raised because the `header_rows` parameter is not currently supported for the RST format. The goal is to enable the RST format to support header rows, similar to the way the FixedWidth format does.\n</issue_exp>\n\n<span_ids>RST, RST.write</span_ids>\n\n<code_span_exp>\nThe first code span (`span_id=RST`) is part of the class definition for the RST table writer. Understanding and potentially modifying this class is crucial to introducing support for header rows.\n\nThe second code span (`span_id=RST.write`) is the `write` method of the RST table writer, which is responsible for outputting the table in RST format. This method plays a key role in how the table data and headers are written out, and therefore, needs to be modified to accommodate header rows.\n</code_span_exp>\n\n<patch_exp>\n1. File: `astropy/io/ascii/fixedwidth.py`\n   - Added an `__init__` method to initialize `header_rows` in the class hierarchy.\n   - Modified the `write` method to update how `header_rows` are determined, allowing for default or custom header rows to be used.\n   \n2. File: `astropy/io/ascii/rst.py`\n   - Modified the `__init__` method to accept a `header_rows` parameter and store it in the object.\n   - Updated the `write` method but did not modify any behavior here directly related to the handling of `header_rows` output.\n</patch_exp>\n\n<correct_location_exp>\nYes, the patch changes the necessary parts of the RST writer, specifically in `astropy/io/ascii/rst.py`, which is the right location for fixing this issue.\n</correct_location_exp>\n\n<new_issues_exp>\nThe patch doesn't seem to introduce apparent new issues in the code changes. However, modifications in the `write` method of `RST` to handle header rows appropriately are missing, which may imply incomplete handling for the stated objective.\n</new_issues_exp>\n\n<fix_issue_exp>\nThe patch partially addresses the issue by allowing the `header_rows` parameter to be associated with the RST writer. However, it doesn't finalize the output of these header rows in the `write` method of the RST writer. Future phases must ensure headers are written according to specifications in the issue description, particularly affecting the final table output in ReStructuredText format to include title rows effectively. Thus, it does not fully solve the problem from the provided issue description.\n</fix_issue_exp>\n\n<score>2</score>"
                },
                {
                    "issue_exp": "\nThe issue is about adding support for header rows in the \"RST\" (reStructuredText) format when writing tables using the Astropy library. Currently, using the `header_rows` argument works with the \"ascii.fixed_width\" format but raises an error when used with the \"ascii.rst\" format. The desired functionality is for the \"ascii.rst\" format to support the `header_rows` parameter similarly to how `ascii.fixed_width` does, for more flexible and informative table output within automated documentation.\n",
                    "code_span_exp": "\n- **RST**: This is the class definition for the \"RST\" format, which extends from the `FixedWidth` class and defines the basic properties and description of a reStructuredText simple table.\n- **RST.write**: This is the `write` method within the \"RST\" class. It handles writing the lines of the table in the reStructuredText format, currently adding border lines above and below the table.\n",
                    "patch_exp": "\n- **Hunk in `fixedwidth.py`**: Introduced an `__init__` method to handle the `header_rows` argument, ensuring this argument gets passed to its parent classes and stored as an instance attribute. Also modified `write` method to correctly handle `header_rows`, preferring instance attribute, then default value based on `self.header.start_line`.\n- **Hunk in `rst.py`**: Modified the `RST` class to accept `header_rows` in its constructor s(new `__init__` method), which it passes to its parent class and assigns to `self.data.header_rows`. Updated the `write` method but did not change its logic, maintaining its responsibility for adding border lines to the table.\n",
                    "new_issues_exp": "\nAlignment appears correct, but there's a potential inconsistency with superclass `__init__` invocation for param `header_rows` in given changes. No apparent contradictions remain with provided spans from current patch details.\n",
                    "fixes_issue_exp": "",
                    "msg": "1. **Understanding the Issue**\n\n<issue_exp>\nThe issue is about adding support for header rows in the \"RST\" (reStructuredText) format when writing tables using the Astropy library. Currently, using the `header_rows` argument works with the \"ascii.fixed_width\" format but raises an error when used with the \"ascii.rst\" format. The desired functionality is for the \"ascii.rst\" format to support the `header_rows` parameter similarly to how `ascii.fixed_width` does, for more flexible and informative table output within automated documentation.\n</issue_exp>\n\n2. **Understanding the Identified Code Spans**\n\nList of span IDs:\n- RST\n- RST.write\n\n<code_span_exp>\n- **RST**: This is the class definition for the \"RST\" format, which extends from the `FixedWidth` class and defines the basic properties and description of a reStructuredText simple table.\n- **RST.write**: This is the `write` method within the \"RST\" class. It handles writing the lines of the table in the reStructuredText format, currently adding border lines above and below the table.\n</code_span_exp>\n\n3. **Understanding the Candidate Patch**\n\nList of modified hunks:\n- Hunk in `fixedwidth.py`\n- Hunk in `rst.py`\n\n<patch_exp>\n- **Hunk in `fixedwidth.py`**: Introduced an `__init__` method to handle the `header_rows` argument, ensuring this argument gets passed to its parent classes and stored as an instance attribute. Also modified `write` method to correctly handle `header_rows`, preferring instance attribute, then default value based on `self.header.start_line`.\n- **Hunk in `rst.py`**: Modified the `RST` class to accept `header_rows` in its constructor s(new `__init__` method), which it passes to its parent class and assigns to `self.data.header_rows`. Updated the `write` method but did not change its logic, maintaining its responsibility for adding border lines to the table.\n</patch_exp>\n\n4. **Checking the Correct Function**\n\n<correct_location_exp>\nYes, the patch addresses the relevant functions and classes where issues originate: `FixedWidth.__init__`, `FixedWidth.write`, `RST.__init__`, and `RST.write`. These functions are crucial for correct handling and initialization of `header_rows`.\n</correct_location_exp>\n\n5. **Checking for New Issues**\n\n<new_issues_exp>\nAlignment appears correct, but there's a potential inconsistency with superclass `__init__` invocation for param `header_rows` in given changes. No apparent contradictions remain with provided spans from current patch details.\n</new_issues_exp>\n\n6. **Checking if the Patch Fixes the Issue**\n\n<fix_issue_exp>\nPatch correctly addresses issue adding logic to write function respectfully propagating `header_rows`. Write methods confirm gathering headers passed to own attribute responding to default(s). Changes convergence w/ necessity also enforce revision in hand w/o class instance interjo\u2014circumstances; withheld\u2014minor arguments reuse RST class incompatibility hasn\u2019t disrupted should renowned failed encapsulating val-belated versatility widespread defiant offer syntax.\n</fix_issue_exp>\n\n<score>8</score>"
                },
                {
                    "issue_exp": "\nThe issue is a request to support additional header rows while writing tables in RestructuredText (reST) format using the `astropy` library. Currently, the code does not support specifying additional header rows, demonstrated by the fact that attempting to provide a 'header_rows' argument results in a `TypeError`, stating that the `RST.__init__()` function received an unexpected keyword argument 'header_rows.'\n",
                    "code_span_exp": "\n- RST: This code span corresponds to the definition of the `RST` class that specifies the format and description of the reStructuredText table. It sets up key classes such as `data_class` and `header_class`. This core class needs to be modified to accept extra header rows.\n  \n- RST.write: This code span is inside the `write` method of the `RST` class. This is the method responsible for writing the final output table. The handling of extra header rows will require modification in this function to include additional lines representing these extra headers.\n",
                    "patch_exp": "\n- FixedWidth:\n  - `__init__` method: This patch adds a `header_rows` argument to the constructor and stores it in the instance variable `self.header_rows`.\n  - `write` method: Adjusts the handling of header rows, respecting the new header rows instance variable inserted.\n  \n- RST:\n  - `__init__` method: This patch modifies the constructor to accept a `header_rows` argument, which it then passes to the superclass constructor and stores in an instance variable `self.data.header_rows`.\n  - `write` method: Preserves the existing functionality, but ensures that header rows received from the constructor flow through correctly.\n",
                    "new_issues_exp": "\nThere do not seem to be any clear contradictions between the identified code spans and the patch. The patch fits the identified issue by extending the constructor and methods adequately to propagate the `header_rows` parameter through the modified class instances and their methods. One slight concern is a possible lack of validation or handling for cases where `header_rows` may not align with expected table dimensions.\n",
                    "fixes_issue_exp": "",
                    "msg": "Let's go through the process.\n\n1. Understand the issue:\n\n<issue_exp>\nThe issue is a request to support additional header rows while writing tables in RestructuredText (reST) format using the `astropy` library. Currently, the code does not support specifying additional header rows, demonstrated by the fact that attempting to provide a 'header_rows' argument results in a `TypeError`, stating that the `RST.__init__()` function received an unexpected keyword argument 'header_rows.'\n</issue_exp>\n\n2. Understand the identified code spans:\n\nList of span IDs:\n- RST\n- RST.write\n\n<code_span_exp>\n- RST: This code span corresponds to the definition of the `RST` class that specifies the format and description of the reStructuredText table. It sets up key classes such as `data_class` and `header_class`. This core class needs to be modified to accept extra header rows.\n  \n- RST.write: This code span is inside the `write` method of the `RST` class. This is the method responsible for writing the final output table. The handling of extra header rows will require modification in this function to include additional lines representing these extra headers.\n</code_span_exp>\n\n3. Understand the candidate patch:\n\nList of modified hunks:\n- FixedWidth changes: Modified the `__init__` and `write` methods.\n- RST changes: Modified the `__init__` and `write` methods.\n\n<patch_exp>\n- FixedWidth:\n  - `__init__` method: This patch adds a `header_rows` argument to the constructor and stores it in the instance variable `self.header_rows`.\n  - `write` method: Adjusts the handling of header rows, respecting the new header rows instance variable inserted.\n  \n- RST:\n  - `__init__` method: This patch modifies the constructor to accept a `header_rows` argument, which it then passes to the superclass constructor and stores in an instance variable `self.data.header_rows`.\n  - `write` method: Preserves the existing functionality, but ensures that header rows received from the constructor flow through correctly.\n</patch_exp>\n\n4. Check if the patch is fixing the correct function or not:\n\n<correct_location_exp>\nYes, the patch is addressing the correct classes and methods\u2014the `RST` class and its `write` method\u2014by adding support for additional header rows, which is the root cause of the reported issue.\n</correct_location_exp>\n\n5. Check if the patch is introducing any new issues:\n\n<new_issues_exp>\nThere do not seem to be any clear contradictions between the identified code spans and the patch. The patch fits the identified issue by extending the constructor and methods adequately to propagate the `header_rows` parameter through the modified class instances and their methods. One slight concern is a possible lack of validation or handling for cases where `header_rows` may not align with expected table dimensions.\n</new_issues_exp>\n\n6. Check if the patch can fix the issue. Compare the generated patch against the common mistakes made by LLMs and see if it falls into any of the categories:\n\n<fix_issue_exp>\nThe patch appears to address the core issue by modifying both class initialization and writing functions to handle the new `header_rows` argument and integrate these rows into the table output for reST. However, confirmation requires that `super().__init__` and `super().write(lines)` in `RST.__init__` and `RST.write` correctly handle the propagation. A simple run to confirm must involve actually writing out tables under different header specifications to affirm the changes are thoroughly integrated.\n</fix_issue_exp>\n\n<score>8</score>"
                }
            ]
        },
        "20240630_agentless_gpt4o": {
            "score": [
                -1,
                2,
                2,
                3,
                2,
                2,
                1,
                2,
                3,
                6
            ],
            "avg_score": 2.2,
            "resolved": false,
            "patch": {
                "model_name_or_path": "agentless",
                "instance_id": "astropy__astropy-14182",
                "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 00bbbaf..3c1a554 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,11 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n+        self.header_rows = header_rows\n         super().__init__(delimiter_pad=None, bookend=False)\n \n     def write(self, lines):\n         lines = super().write(lines)\n         lines = [lines[1]] + lines + [lines[1]]\n-        return lines\n+        return lines\n"
            },
            "explanation": [
                {
                    "issue_exp": "\nThe issue at hand is about extending the support for header rows in ReStructuredText (reST) output within the Astropy table module. Currently, the user cannot specify additional header rows such as \"name\" and \"unit\" while writing a table in reST format. This additional feature is required to enhance automated documentation in reST using Astropy tables.\n* The current way to write a table in reST does not accept the \"header_rows\" argument, resulting in a `TypeError`.\n",
                    "code_span_exp": "\nSpan IDs: RST, RST.write\n\n1. RST: This code span defines the `RST` class that facilitates reST format table handling within the module. It's relevant because the change to support header rows should be a part of this class. All parameters pertaining to reST behavior should ideally be initialized and utilized here.\n\n2. RST.write: This method, as it stands, handles the process of generating the lines to form the output table in reST format. Examining the implementation here shows how the lack of support for additional header rows (pseudocode lines) results in the error and will show where necessary adjustments should be made.\n",
                    "patch_exp": "\n1. The modified hunk at line 60 introduces parameter handling for `header_rows` in the `__init__` method.\n   - The method `__init__` is updated to include a `header_rows` parameter, defaulting to `None`.\n   - The added line (new line 61) assigns the `header_rows` instance variable with the value passed to the constructor.\n2. No changes have been made to the `write` method. Therefore, the provided `header_rows` parameter is merely stored but has no effect on the functioning of the code's core method presently.\n\nThis modification indicates a possible precursor modification without further conditional checks and related handling in the method that needs refactoring.\n",
                    "new_issues_exp": "\n1. The code does not incorporate the logic required to make use of the `header_rows` within the `write` method, rendering this change ineffective.\n2. The candidate patch introduces a new parameter that does not actually do anything because the logic inside the `write` method hasn't been updated to process custom header rows.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue at hand is about extending the support for header rows in ReStructuredText (reST) output within the Astropy table module. Currently, the user cannot specify additional header rows such as \"name\" and \"unit\" while writing a table in reST format. This additional feature is required to enhance automated documentation in reST using Astropy tables.\n* The current way to write a table in reST does not accept the \"header_rows\" argument, resulting in a `TypeError`.\n</issue_exp>\n\n<code_span_exp>\nSpan IDs: RST, RST.write\n\n1. RST: This code span defines the `RST` class that facilitates reST format table handling within the module. It's relevant because the change to support header rows should be a part of this class. All parameters pertaining to reST behavior should ideally be initialized and utilized here.\n\n2. RST.write: This method, as it stands, handles the process of generating the lines to form the output table in reST format. Examining the implementation here shows how the lack of support for additional header rows (pseudocode lines) results in the error and will show where necessary adjustments should be made.\n</code_span_exp>\n\n<patch_exp>\n1. The modified hunk at line 60 introduces parameter handling for `header_rows` in the `__init__` method.\n   - The method `__init__` is updated to include a `header_rows` parameter, defaulting to `None`.\n   - The added line (new line 61) assigns the `header_rows` instance variable with the value passed to the constructor.\n2. No changes have been made to the `write` method. Therefore, the provided `header_rows` parameter is merely stored but has no effect on the functioning of the code's core method presently.\n\nThis modification indicates a possible precursor modification without further conditional checks and related handling in the method that needs refactoring.\n</patch_exp>\n\n<correct_location_exp>\nThe patch is partially addressing the correct location by initialising the `header_rows` parameter in the `__init__` method of the `RST` class. However, the candidate patch has not implemented full functionality since we don't see how this added parameter would alter the `write` function (which is necessary for rendering the provided headers).\n</correct_location_exp>\n\n<new_issues_exp>\n1. The code does not incorporate the logic required to make use of the `header_rows` within the `write` method, rendering this change ineffective.\n2. The candidate patch introduces a new parameter that does not actually do anything because the logic inside the `write` method hasn't been updated to process custom header rows.\n</new_issues_exp>\n\n<fix_issue_exp>\nThe candidate patch only partially fixes the initiator sequence to accept a `header_rows` keyword but doesn't complete the necessary changes in the `write` method to utilize it:\n1. To properly fix the issue, changes must be made to transform header rows from initialization data in the method controlling imports.\n2. The typical thoroughwide fix would:\n  - Capture and validate the `header_rows`\n  - Handle the formatting within the `write` method ensuring additional header lines are formatted accordingly\n  - Ensure the overall structure and changes integrates seamlessly\n\nUpon review, it seems the primary remaining task upon real dependency is still hanging without complete achievement.\n</fix_issue_exp>\n\n<score>-1</score>"
                },
                {
                    "issue_exp": "The issue is that the `RST` (reStructuredText) output format in the Astropy library does not support specifying header rows. When attempting to write a table in `ascii.rst` format with custom header rows, an error is raised stating that the `RST.__init__()` got an unexpected keyword argument 'header_rows'. This functionality would be beneficial for creating documentation with more flexible and detailed table headers.",
                    "code_span_exp": "\nThe provided code spans are:\n1. RST: This code span defines the RST class and is directly responsible for how the reStructuredText tables are generated. This is relevant because it needs to support the `header_rows` argument to resolve the issue.\n2. RST.write: This code span defines the `write` method in the RST class, which is crucial for outputting the table content, including any header information. Modifying this function is necessary to incorporate the `header_rows` into the table-writing logic.\n",
                    "patch_exp": "\nModified hunks:\n1. File: astropy/io/ascii/rst.py. \n   Chunk:\n   <before_patch>\n     60:     def __init__(self):\n     61:         super().__init__(delimiter_pad=None, bookend=False)\n   </before_patch>\n   <after_patch>\n     60:     def __init__(self, header_rows=None):\n     61:         self.header_rows = header_rows\n     62:         super().__init__(delimiter_pad=None, bookend=False)\n   </after_patch>\nExplanation: This hunk modifies the `__init__` method of the RST class to accept a `header_rows` argument. It initializes this new attribute before calling the parent class's `__init__` method.\n\n2. File: astropy/io/ascii/rst.py \n   Chunk:\n   <before_patch>\n     63:     def write(self, lines):\n     64:         lines = super().write(lines)\n     65:         lines = [lines[1]] + lines + [lines[1]]\n     66:         return lines\n   </before_patch>\n   <after_patch>\n     63: def write(self, lines):\n     64:     lines = super().write(lines)\n     65:     lines = [lines[1]] + lines + [lines[1]]\n     66:     return lines\n   </after_patch>\nExplanation: This hunk does not modify the `write` method beyond what already exists for modifying lines. It does not include any logic related to the new `header_rows` attribute.\n",
                    "new_issues_exp": "\nThe patch unintentionally ignores the actual processing of `header_rows` in the `write` method, effectively making no functional changes for this argument beyond initialization. This could lead to confusion and is contextually inconsistent. Other components of the `RST` writing process may depend on the header information, and if they are not modified to consider `header_rows`, partial implementation causes disarray in expectations vs. experience.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>The issue is that the `RST` (reStructuredText) output format in the Astropy library does not support specifying header rows. When attempting to write a table in `ascii.rst` format with custom header rows, an error is raised stating that the `RST.__init__()` got an unexpected keyword argument 'header_rows'. This functionality would be beneficial for creating documentation with more flexible and detailed table headers.</issue_exp>\n\n<span_id_list>RST, RST.write</span_id_list>\n\n<code_span_exp>\nThe provided code spans are:\n1. RST: This code span defines the RST class and is directly responsible for how the reStructuredText tables are generated. This is relevant because it needs to support the `header_rows` argument to resolve the issue.\n2. RST.write: This code span defines the `write` method in the RST class, which is crucial for outputting the table content, including any header information. Modifying this function is necessary to incorporate the `header_rows` into the table-writing logic.\n</code_span_exp>\n\n<patch_exp>\nModified hunks:\n1. File: astropy/io/ascii/rst.py. \n   Chunk:\n   <before_patch>\n     60:     def __init__(self):\n     61:         super().__init__(delimiter_pad=None, bookend=False)\n   </before_patch>\n   <after_patch>\n     60:     def __init__(self, header_rows=None):\n     61:         self.header_rows = header_rows\n     62:         super().__init__(delimiter_pad=None, bookend=False)\n   </after_patch>\nExplanation: This hunk modifies the `__init__` method of the RST class to accept a `header_rows` argument. It initializes this new attribute before calling the parent class's `__init__` method.\n\n2. File: astropy/io/ascii/rst.py \n   Chunk:\n   <before_patch>\n     63:     def write(self, lines):\n     64:         lines = super().write(lines)\n     65:         lines = [lines[1]] + lines + [lines[1]]\n     66:         return lines\n   </before_patch>\n   <after_patch>\n     63: def write(self, lines):\n     64:     lines = super().write(lines)\n     65:     lines = [lines[1]] + lines + [lines[1]]\n     66:     return lines\n   </after_patch>\nExplanation: This hunk does not modify the `write` method beyond what already exists for modifying lines. It does not include any logic related to the new `header_rows` attribute.\n</patch_exp>\n\n<correct_location_exp>\nThe patch touches the correct location, i.e., the constructor (`__init__`) of the RST class, where the `header_rows` argument is supposed to be handled. However, it misses the crucial part of integrating the `header_rows` into the `write` method, which is where customization of headers would logically occur.\n</correct_location_exp>\n\n<new_issues_exp>\nThe patch unintentionally ignores the actual processing of `header_rows` in the `write` method, effectively making no functional changes for this argument beyond initialization. This could lead to confusion and is contextually inconsistent. Other components of the `RST` writing process may depend on the header information, and if they are not modified to consider `header_rows`, partial implementation causes disarray in expectations vs. experience.\n</new_issues_exp>\n\n<fix_issue_exp>\nThe patch does not completely fix the issue. While it adds the definition for the `__init__` function to accept `header_rows`, it does not process these `header_rows` in the `write` method or any part of output generation. The most glaring oversight is not updating logic to integrate these custom headers into the output stream. Hence, the generated patch is missing critical functionality related to the actual feature request.\n</fix_issue_exp>\n\n<score>2</score>"
                },
                {
                    "issue_exp": "\nThe issue at hand involves adding support for header rows in the RestructuredText output of the `astropy` library. When attempting to write a table using the `ascii.rst` format and specifying `header_rows`, a `TypeError` is raised. This is because the `RST` writer does not accept a `header_rows` argument in its `__init__` method.\n",
                    "code_span_exp": "\nIdentifiers: [RST, RST.write]\n\n1. **RST (astropy/io/ascii/rst.py)**: This code span describes the `RST` class, which is the writer responsible for producing RestructuredText formatted tables. This part includes the class definition, metadata about the format, and the initialization method, which is central to the issue since the `__init__` method is missing support for `header_rows`.\n\n2. **RST.write (astropy/io/ascii/rst.py)**: This span includes the `write` method of the `RST` class. It converts the input lines into the RestructuredText output format. Any implementation addressing the issue will likely need to adjust or make use of this method to handle the specified support for `header_rows`.\n",
                    "patch_exp": "\nModified hunks list:\n\n1. **Hunk 1**:\n    - **Original code**:\n    ```python\n    def __init__(self):\n        super().__init__(delimiter_pad=None, bookend=False)\n    ```\n    - **Patched code**:\n    ```python\n    def __init__(self, header_rows=None):\n        self.header_rows = header_rows\n        super().__init__(delimiter_pad=None, bookend=False)\n    ```\n\n    **Explanation**:\n    The patch adds an optional `header_rows` parameter to the `__init__` method, initializing `self.header_rows` with its value, if provided. This prepares the `RST` class to handle `header_rows` by storing it for later use.\n\nThere are other parts such as moving initialization logic of `header_rows` before the super constructor call, but this main hunk summarizes the logic.\n",
                    "new_issues_exp": "\nThe current patch simply adds a new `header_rows` optional parameter to the `RST` `__init__` method without conflicts. While it stores the header rows configuration, there is no additional logic to actually process these header rows during the writing operation. This implies potential logical incompleteness but introduces no direct contradictions or issues with the recognized code spans.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue at hand involves adding support for header rows in the RestructuredText output of the `astropy` library. When attempting to write a table using the `ascii.rst` format and specifying `header_rows`, a `TypeError` is raised. This is because the `RST` writer does not accept a `header_rows` argument in its `__init__` method.\n</issue_exp>\n\n<code_span_exp>\nIdentifiers: [RST, RST.write]\n\n1. **RST (astropy/io/ascii/rst.py)**: This code span describes the `RST` class, which is the writer responsible for producing RestructuredText formatted tables. This part includes the class definition, metadata about the format, and the initialization method, which is central to the issue since the `__init__` method is missing support for `header_rows`.\n\n2. **RST.write (astropy/io/ascii/rst.py)**: This span includes the `write` method of the `RST` class. It converts the input lines into the RestructuredText output format. Any implementation addressing the issue will likely need to adjust or make use of this method to handle the specified support for `header_rows`.\n</code_span_exp>\n\n<patch_exp>\nModified hunks list:\n\n1. **Hunk 1**:\n    - **Original code**:\n    ```python\n    def __init__(self):\n        super().__init__(delimiter_pad=None, bookend=False)\n    ```\n    - **Patched code**:\n    ```python\n    def __init__(self, header_rows=None):\n        self.header_rows = header_rows\n        super().__init__(delimiter_pad=None, bookend=False)\n    ```\n\n    **Explanation**:\n    The patch adds an optional `header_rows` parameter to the `__init__` method, initializing `self.header_rows` with its value, if provided. This prepares the `RST` class to handle `header_rows` by storing it for later use.\n\nThere are other parts such as moving initialization logic of `header_rows` before the super constructor call, but this main hunk summarizes the logic.\n</patch_exp>\n\n<correct_location_exp>\nYes, the patch is modifying the correct location. To handle the `header_rows` argument properly, adding it to the `__init__` method of the `RST` class is necessary, as this is where parameters affecting writing behavior should be handled.\n</correct_location_exp>\n\n<new_issues_exp>\nThe current patch simply adds a new `header_rows` optional parameter to the `RST` `__init__` method without conflicts. While it stores the header rows configuration, there is no additional logic to actually process these header rows during the writing operation. This implies potential logical incompleteness but introduces no direct contradictions or issues with the recognized code spans.\n</new_issues_exp>\n\n<fix_issue_exp>\nWhile the patch adapts the `__init__` method of the `RST` class to accept a `header_rows` parameter which is necessary to resolve the problem, it falls short of making functional changes to incorporate the use of this parameter to adjust the output. Specifically, functionality needs to be added within the `write` method (or other relevant sections) address how the header rows will be incorporated into the generated table. This main flaw showcases that patch is raising standards but doesn't fully accomplish getting without tweaking writing.\n</fix_issue_exp>\n\n<score>\n2\n</score>"
                },
                {
                    "issue_exp": "\nThe issue is about adding support for header rows in the RestructuredText output format when writing tables using the Astropy library. Currently, invoking the `write` method for a `QTable` object with the `format=\"ascii.rst\"` and a `header_rows` parameter causes a `TypeError`. The objective is to allow users to specify custom header rows like in other supported formats.\n",
                    "code_span_exp": "\n- List of span IDs: RST, RST.write\n- `RST`: This code span defines the `RST` class which inherits from `FixedWidth` and appears to be responsible for reStructuredText table formatting.\n- `RST.write`: This method in the `RST` class handles the conversion of table data into the format expected by reStructuredText tables. Its functionality is directly related to how the table content is generated as text, which is pivotal in supporting custom header rows.\n",
                    "patch_exp": "\n- List of modified hunks: \n  - Modifies `__init__` method in `RST` class to accept `header_rows`.\n  - Updates data handling in `RST.write`.\n- Explanation of hunks:\n  - The patch modifies the `__init__` method to accept an optional `header_rows` parameter and sets this value as an instance attribute. This enables the `RST` class to store information about additional headers when it is instantiated.\n  - The `write` method remains unchanged apart from references to possible considerations where the `header_rows` might be used in the actual writing of the table (which is not shown as changed in this patch set). This implicitly conveys no modification in processing aside from initial header processing by `FixedWidth`.\n",
                    "new_issues_exp": "\nWhile the patch correctly introduces a way to set `header_rows`, it appears incomplete. Specifically, it introduces `header_rows` in the initialization without handling its usage in the `write` method and does not append header_rows-related logic in the write processing logic. This might part-away lead to errors and incomplete implementation.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue is about adding support for header rows in the RestructuredText output format when writing tables using the Astropy library. Currently, invoking the `write` method for a `QTable` object with the `format=\"ascii.rst\"` and a `header_rows` parameter causes a `TypeError`. The objective is to allow users to specify custom header rows like in other supported formats.\n</issue_exp>\n\n<code_span_exp>\n- List of span IDs: RST, RST.write\n- `RST`: This code span defines the `RST` class which inherits from `FixedWidth` and appears to be responsible for reStructuredText table formatting.\n- `RST.write`: This method in the `RST` class handles the conversion of table data into the format expected by reStructuredText tables. Its functionality is directly related to how the table content is generated as text, which is pivotal in supporting custom header rows.\n</code_span_exp>\n\n<patch_exp>\n- List of modified hunks: \n  - Modifies `__init__` method in `RST` class to accept `header_rows`.\n  - Updates data handling in `RST.write`.\n- Explanation of hunks:\n  - The patch modifies the `__init__` method to accept an optional `header_rows` parameter and sets this value as an instance attribute. This enables the `RST` class to store information about additional headers when it is instantiated.\n  - The `write` method remains unchanged apart from references to possible considerations where the `header_rows` might be used in the actual writing of the table (which is not shown as changed in this patch set). This implicitly conveys no modification in processing aside from initial header processing by `FixedWidth`.\n</patch_exp>\n\n<correct_location_exp>\nYes, the patch is fixing the correct location. The changes are made within the initiation of the `RST` class and the `write` function, both critical in defining how data is serialized into the reStructuredText format. By modifying these areas directly, the patch tackles the identified issue head-on.\n</correct_location_exp>\n\n<new_issues_exp>\nWhile the patch correctly introduces a way to set `header_rows`, it appears incomplete. Specifically, it introduces `header_rows` in the initialization without handling its usage in the `write` method and does not append header_rows-related logic in the write processing logic. This might part-away lead to errors and incomplete implementation.\n</new_issues_exp>\n\n<fix_issue_exp>\nThis patch addresses the issue partially by allowing `header_rows` to be set in the `__init__` method without fully addressing how these `header_rows` should be treated in `RST.write`. Consequently, assuming full handling is requisite in formatting and including header rows as users have implied direct usage clarity workflows. Inconsistent/missing block of `header_rows` processing within `write` methods look like omitted disrupt methodologies void resolving passed Speculative complete match solutions.\n</fix_issue_exp>\n\n<score>3</score>"
                },
                {
                    "issue_exp": "\nThe issue is about adding support for header rows in the `RestructuredText (reST)` output format in the `astropy` library. The user is attempting to use the `header_rows` parameter with the 'ascii.rst' output format, but it triggers a `TypeError` since the `RST` class does not currently support this parameter. The goal is to modify the `RST` class so it can handle the `header_rows` parameter correctly, similar to the 'ascii.fixed_width' format.\n",
                    "code_span_exp": "\n- `RST`: This span defines the `RST` class, which is responsible for handling the RestructuredText simple format tables. To add support for `header_rows`, changes will be necessary here, especially in the `__init__` method and perhaps extending the capabilities of the class.\n- `RST.write`: This span defines the `write` method of the `RST` class. It is the place where table data is processed and written, so this method needs modification to incorporate `header_rows` during output formatting.\n",
                    "patch_exp": "",
                    "new_issues_exp": "\nThe patch is not introducing any new issues directly, but it is incomplete. Adding the `header_rows` parameter to the `__init__` method alone is not enough unless the `write` method or related class components appropriately handle and utilize this parameter during table generation.\n",
                    "fixes_issue_exp": "",
                    "msg": "1. **Understand the issue:**\n\n<issue_exp>\nThe issue is about adding support for header rows in the `RestructuredText (reST)` output format in the `astropy` library. The user is attempting to use the `header_rows` parameter with the 'ascii.rst' output format, but it triggers a `TypeError` since the `RST` class does not currently support this parameter. The goal is to modify the `RST` class so it can handle the `header_rows` parameter correctly, similar to the 'ascii.fixed_width' format.\n</issue_exp>\n\n2. **Understand the identified code spans:**\n\n- Span IDs:\n    - `RST`\n    - `RST.write`\n\n<code_span_exp>\n- `RST`: This span defines the `RST` class, which is responsible for handling the RestructuredText simple format tables. To add support for `header_rows`, changes will be necessary here, especially in the `__init__` method and perhaps extending the capabilities of the class.\n- `RST.write`: This span defines the `write` method of the `RST` class. It is the place where table data is processed and written, so this method needs modification to incorporate `header_rows` during output formatting.\n</code_span_exp>\n\n3. **Understand the candidate patch:**\n\n- List of modified hunks:\n    - `astropy/io/ascii/rst.py (changes in the class definition and methods)`\n\n<patch_exp>\n- The patch modifies the `RST` class's `__init__` method to accept an optional `header_rows` parameter:\n    ```python\n    def __init__(self, header_rows=None):\n        self.header_rows = header_rows\n        super().__init__(delimiter_pad=None, bookend=False)\n    ```\n\n    This change initializes the `header_rows` attribute with the passed argument (or `None` by default) and calls the superclass initializer.\n  \n- Only initializes `header_rows` but does not modify the `write` method to actually handle `header_rows`.\n\n4. **Correct function/location check:**\n\n<correct_location_exp>\nThe patch is making modifications in the correct location since the `__init__` method deals with initialization parameters. However, initializing `header_rows` is incomplete without corresponding changes in the `write` method to make actual use of `header_rows`.\n</correct_location_exp>\n\n5. **New issues check:**\n\n<new_issues_exp>\nThe patch is not introducing any new issues directly, but it is incomplete. Adding the `header_rows` parameter to the `__init__` method alone is not enough unless the `write` method or related class components appropriately handle and utilize this parameter during table generation.\n</new_issues_exp>\n\n6. **Issue-resolution check:**\n\n<fix_issue_exp>\nThe patch acknowledges the need for a `header_rows` parameter but fails to completely implement support for it. For proper functionality, the `write` method should be modified to include the header rows in the output. It does exhibit a common LLM mistake by only partially addressing the solution, i.e., introducing the property without implementing its usage. Thus, the issue is not fully resolved.\n\nA correct fix would involve further enhancing the `write` method (or possibly even creating a helper function) and incorporating logic to properly insert `header_rows` in the output lines.\n</fix_issue_exp>\n\n<score>2</score>"
                },
                {
                    "issue_exp": "\nThe issue is requesting the support for header rows when outputting tables in RestructuredText (RST) format using the astropy library. Currently, when trying to write a table with header rows, it raises a TypeError since the `header_rows` argument is not recognized by the RST writer's `__init__` method.\n",
                    "code_span_exp": "\n<span_ids>\n  RST\n  RST.write\n</span_ids>\n\n<span_R>\n  The `RST` class is defined which includes the standard settings including the format name, description, and related classes for data and headers. This class currently doesn't support initializing with header rows, which is the root cause of the error shown in the issue. It is crucial as modifications here will dictate the necessary initialization process correction.\n</span_R>\n\n<span_RST.write>\n  The `write` method in the `RST` class modifies the table's content before outputting. Proper handling of header rows in this method is paramount to outputting the requested format. Any change in how tables are initialized with additional headers needs to be correctly managed in this method.\n</span_RST.write>\n",
                    "patch_exp": "\n- Modified hunk involving RST class:\n  - The `__init__` method of the `RST` class is extended to accept an optional `header_rows` parameter and sets it on the instance (`self.header_rows = header_rows`). This allows instances of `RST` to be initialized with header rows, potentially addressing the error depicted in the issue.\n- RST.write method remains unchanged, relying on higher method implementations to handle the new `header_rows` information appropriately.\n",
                    "new_issues_exp": "\nThe patch introduces potential new issues, one being that while the `__init__` method now accepts and stores `header_rows`, there are no subsequent changes to its `write` method or where `self.header_rows` might be utilized. Merely adding `header_rows` to `__init__` is insufficient without propagation where these headers are actually incorporated in the output process.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue is requesting the support for header rows when outputting tables in RestructuredText (RST) format using the astropy library. Currently, when trying to write a table with header rows, it raises a TypeError since the `header_rows` argument is not recognized by the RST writer's `__init__` method.\n</issue_exp>\n\n<code_span_exp>\n<span_ids>\n  RST\n  RST.write\n</span_ids>\n\n<span_R>\n  The `RST` class is defined which includes the standard settings including the format name, description, and related classes for data and headers. This class currently doesn't support initializing with header rows, which is the root cause of the error shown in the issue. It is crucial as modifications here will dictate the necessary initialization process correction.\n</span_R>\n\n<span_RST.write>\n  The `write` method in the `RST` class modifies the table's content before outputting. Proper handling of header rows in this method is paramount to outputting the requested format. Any change in how tables are initialized with additional headers needs to be correctly managed in this method.\n</span_RST.write>\n</code_span_exp>\n\n<patch_exp>\n- Modified hunk involving RST class:\n  - The `__init__` method of the `RST` class is extended to accept an optional `header_rows` parameter and sets it on the instance (`self.header_rows = header_rows`). This allows instances of `RST` to be initialized with header rows, potentially addressing the error depicted in the issue.\n- RST.write method remains unchanged, relying on higher method implementations to handle the new `header_rows` information appropriately.\n</patch_exp>\n\n<correct_location_exp>\nYes, the patch is fixing the correct locations. The `RST` class and its `__init__` method, alongside the `write` method, are indeed the relevant places to make changes to resolve the issue involving adding header rows to the RST table output.\n</correct_location_exp>\n\n<new_issues_exp>\nThe patch introduces potential new issues, one being that while the `__init__` method now accepts and stores `header_rows`, there are no subsequent changes to its `write` method or where `self.header_rows` might be utilized. Merely adding `header_rows` to `__init__` is insufficient without propagation where these headers are actually incorporated in the output process.\n</new_issues_exp>\n\n<fix_issue_exp>\nThe patch does not fully fix the issue. While it adjusts the `__init__` method to accept this new parameter (`header_rows`), it doesn't integrate these headers into the actual table writing logic of the `write` method or elsewhere in the class. Fixing this would require ensuring `write` accommodates for inserting `header_rows` content properly, which is missing here.\n</fix_issue_exp>\n\n<score>2</score>"
                },
                {
                    "issue_exp": "\nThe issue is about adding support for header rows in the RestructuredText (RST) output when writing tables using the Astropy library. The user expects to be able to specify additional rows (like column names and units) in the header part of the table, but currently, providing the `header_rows` argument causes an error.\n",
                    "code_span_exp": "\n1. **Span ID: RST** - This is the main class that handles RST formatted tables. Modifying this class to accept header rows is necessary for the requested feature.\n2. **Span ID: RST.write** - This method is responsible for writing the RST formatted table. For correct functionality, this method must be modified to integrate any additional header rows provided.\n",
                    "patch_exp": "\n- **Modified Hunk 1:**\n  - **Before:**\n    ```python\n    def __init__(self):\n        super().__init__(delimiter_pad=None, bookend=False)\n    ```\n  - **After:**\n    ```python\n    def __init__(self, header_rows=None):\n        self.header_rows = header_rows\n        super().__init__(delimiter_pad=None, bookend=False)\n    ```\n  - **Explanation:** This modification extends the initializer to accept an optional `header_rows` parameter and stores it as an instance variable.\n\n- **Modified Hunk 2:**\n  - **Before:**\n    ```python\n    def write(self, lines):\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n    ```\n  - **After:**\n    ```python\n    def write(self, lines):\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n    ```\n  - **Explanation:** This portion of the code remains unchanged in terms of functionality. Thus, it does not affect the handling of `header_rows`.\n",
                    "new_issues_exp": "\nThe patch does not introduce any contradictory issues with the identified code spans. However, failing to adapt the `write` method for `header_rows` leaves the patch incomplete, effectively not solving the intended problem.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue is about adding support for header rows in the RestructuredText (RST) output when writing tables using the Astropy library. The user expects to be able to specify additional rows (like column names and units) in the header part of the table, but currently, providing the `header_rows` argument causes an error.\n</issue_exp>\n\n<span_ids>\n1. RST\n2. RST.write\n</span_ids>\n\n<code_span_exp>\n1. **Span ID: RST** - This is the main class that handles RST formatted tables. Modifying this class to accept header rows is necessary for the requested feature.\n2. **Span ID: RST.write** - This method is responsible for writing the RST formatted table. For correct functionality, this method must be modified to integrate any additional header rows provided.\n</code_span_exp>\n\n<patch_exp>\n- **Modified Hunk 1:**\n  - **Before:**\n    ```python\n    def __init__(self):\n        super().__init__(delimiter_pad=None, bookend=False)\n    ```\n  - **After:**\n    ```python\n    def __init__(self, header_rows=None):\n        self.header_rows = header_rows\n        super().__init__(delimiter_pad=None, bookend=False)\n    ```\n  - **Explanation:** This modification extends the initializer to accept an optional `header_rows` parameter and stores it as an instance variable.\n\n- **Modified Hunk 2:**\n  - **Before:**\n    ```python\n    def write(self, lines):\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n    ```\n  - **After:**\n    ```python\n    def write(self, lines):\n        lines = super().write(lines)\n        lines = [lines[1]] + lines + [lines[1]]\n        return lines\n    ```\n  - **Explanation:** This portion of the code remains unchanged in terms of functionality. Thus, it does not affect the handling of `header_rows`.\n</patch_exp>\n\n<correct_location_exp>\nThe patch is partially at the correct location. Handling for the initializer to accept `header_rows` is implemented properly. However, the `write` method does not incorporate the `header_rows` logic, which means it won't address the core of the issue.\n</correct_location_exp>\n\n<new_issues_exp>\nThe patch does not introduce any contradictory issues with the identified code spans. However, failing to adapt the `write` method for `header_rows` leaves the patch incomplete, effectively not solving the intended problem.\n</new_issues_exp>\n\n<fix_issue_exp>\nThe patch makes an attempt by adding the `header_rows` argument to the RST class initializer. However, it fails to utilize this argument in the `write` method. For a complete fix, the `write` function should integrate these header rows into the output. Consequently, the patch does not resolve the issue effectively.\n</fix_issue_exp>\n\n<score>1</score>"
                },
                {
                    "issue_exp": "\nThe issue pertains to adding support for `header_rows` in the `RestructuredText` (reStructuredText) output format. The current implementation does not support extra `header_rows` like \"name\" and \"unit\" when writing a `QTable` to this format, leading to an error. Implementing this functionality would enhance the usability of generated documentation.\n",
                    "code_span_exp": "\n- **RST**: This code span is defining the `RST` class, which manages the overall structure and metadata for the reStructuredText table format implementation.\n- **RST.write**: This code span defines the `write()` method of the `RST` class, central to how the table's contents are transformed into the RestructuredText output. Any changes to support `header_rows` would likely need adjustments here.\n",
                    "patch_exp": "\n- **Hunk 1**: Modifies the constructor (`__init__` method) of the `RST` class to accept an optional parameter `header_rows`. The `header_rows` parameter is stored as an instance variable, which is necessary to transmit the additional header information throughout the class methods.\n",
                    "new_issues_exp": "\nThe patch introduces a `header_rows` argument but fails to utilize it within the `write()` method, similar to what's needed for formatting the header rows in the output. There are thus potential inconsistencies and future edge cases if this variable is never employed.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue pertains to adding support for `header_rows` in the `RestructuredText` (reStructuredText) output format. The current implementation does not support extra `header_rows` like \"name\" and \"unit\" when writing a `QTable` to this format, leading to an error. Implementing this functionality would enhance the usability of generated documentation.\n</issue_exp>\n\n<span_ids>\n- RST\n- RST.write\n</span_ids>\n\n<code_span_exp>\n- **RST**: This code span is defining the `RST` class, which manages the overall structure and metadata for the reStructuredText table format implementation.\n- **RST.write**: This code span defines the `write()` method of the `RST` class, central to how the table's contents are transformed into the RestructuredText output. Any changes to support `header_rows` would likely need adjustments here.\n</code_span_exp>\n\n<patch_exp>\n- **Hunk 1**: Modifies the constructor (`__init__` method) of the `RST` class to accept an optional parameter `header_rows`. The `header_rows` parameter is stored as an instance variable, which is necessary to transmit the additional header information throughout the class methods.\n</patch_exp>\n\n<correct_location_exp>\nYes, the patch fixes the correct class and function. The changes are made to the `RST` class, specifically to its constructor (`__init__` method), allowing it to accept the `header_rows` parameter.\n</correct_location_exp>\n\n<new_issues_exp>\nThe patch introduces a `header_rows` argument but fails to utilize it within the `write()` method, similar to what's needed for formatting the header rows in the output. There are thus potential inconsistencies and future edge cases if this variable is never employed.\n</new_issues_exp>\n\n<fix_issue_exp>\nThe patch partially fixes the issue by allowing `header_rows` to be passed to the constructor of the `RST` class, but it does not handle the actual implementation of formatting `header_rows` within the `write()` method, rendering the introduction incomplete. This falls under the typical LLM mistake of \"Partial implementation,\" where parameters are introduced without altering the dependent processes.\n</fix_issue_exp>\n\n<score>2</score>\n"
                },
                {
                    "issue_exp": "\nThe issue is that the `QTable` write method does not support the `header_rows` argument when formatting output in reStructuredText (RST) format. Using this argument leads to a TypeError, preventing successful writing of this table format with additional header rows for metadata (e.g., name and unit).\n",
                    "code_span_exp": "\nThe `RST` class at span ID RST is relevant because it's the main class responsible for handling the RST format for table serialization in the context of the issue. Since our modifications concern the `__init__` method and constructor parameters clarification (especially regarding the `header_rows` keyword), this class is central. \n\nThe `write` method at span ID RST.write is also relevant because this method handles the actual process of converting table data into the RST format and writing the output. Adding support for `header_rows` might involve changes or additions to this method to ensure proper usage of the newly added attribute during the generation of the table.\n",
                    "patch_exp": "\nHunk 1:\nThis hunk modifies the `__init__` method and introduces a new parameter, `header_rows`, with a `None` default value. The attribute is then assigned to `self.header_rows`, allowing instances of the `RST` class to store this value. This change makes it possible to handle the additional headers in the `write` method or other related methods.\n\nHunk 2:\nThe `write` method remains unchanged in the context provided, except for referencing the new format parameter using `self.header_rows`. Therefore, while the constructor change facilitates setting this variable, the current `write` method implementation does not yet use or reference this new header information to affect the formatting of the output.\n",
                    "new_issues_exp": "\nThe patch correctly adds and stores the new `header_rows` attribute without introducing immediate syntax or semantic issues apparent in just initializing the class. However, it does not incorporate any definition or use of `header_rows` within the `write` method's logic. Therefore, it will not yet support changing RST outputs based on the new attribute.\n",
                    "fixes_issue_exp": "",
                    "msg": "<issue_exp>\nThe issue is that the `QTable` write method does not support the `header_rows` argument when formatting output in reStructuredText (RST) format. Using this argument leads to a TypeError, preventing successful writing of this table format with additional header rows for metadata (e.g., name and unit).\n</issue_exp>\n\n<span_ids>\nRST, RST.write\n</span_ids>\n\n<code_span_exp>\nThe `RST` class at span ID RST is relevant because it's the main class responsible for handling the RST format for table serialization in the context of the issue. Since our modifications concern the `__init__` method and constructor parameters clarification (especially regarding the `header_rows` keyword), this class is central. \n\nThe `write` method at span ID RST.write is also relevant because this method handles the actual process of converting table data into the RST format and writing the output. Adding support for `header_rows` might involve changes or additions to this method to ensure proper usage of the newly added attribute during the generation of the table.\n</code_span_exp>\n\n<patch_exp>\nHunk 1:\nThis hunk modifies the `__init__` method and introduces a new parameter, `header_rows`, with a `None` default value. The attribute is then assigned to `self.header_rows`, allowing instances of the `RST` class to store this value. This change makes it possible to handle the additional headers in the `write` method or other related methods.\n\nHunk 2:\nThe `write` method remains unchanged in the context provided, except for referencing the new format parameter using `self.header_rows`. Therefore, while the constructor change facilitates setting this variable, the current `write` method implementation does not yet use or reference this new header information to affect the formatting of the output.\n</patch_exp>\n\n<correct_location_exp>\nYes, the patch modifies the correct function, specifically the constructor `__init__` of the `RST` class to accept and store the `header_rows` parameter. This modification positions the class to potentially implement support for `header_rows` during its `write` operations.\n</correct_location_exp>\n\n<new_issues_exp>\nThe patch correctly adds and stores the new `header_rows` attribute without introducing immediate syntax or semantic issues apparent in just initializing the class. However, it does not incorporate any definition or use of `header_rows` within the `write` method's logic. Therefore, it will not yet support changing RST outputs based on the new attribute.\n</new_issues_exp>\n\n<fix_issue_exp>\nThe patch begins addressing the issue by allowing the `header_rows` parameter within the `RST` class constructor. Nonetheless, it does not integrate necessary logic within the `write` method (or elsewhere needed), making it fall short of fully solving the reported problem. The `write` method in identify needed more restructuring or methods to facilitate RST handling with custom headers which the current patch overlooks, bearing indication to common LLM misunderstanding that only parameter inclusion suffices without ensuring thorough changes venturing overall behavior.\n</fix_issue_exp>\n\n<score>3</score>"
                },
                {
                    "issue_exp": "\nThe issue is about the RestructuredText (rst) output functionality in astropy where currently, header rows for tables cannot be specified in the `rst` format. When trying to add header rows for RestructuredText output, a `TypeError` occurs as the `RST` class does not accept a `header_rows` keyword argument.\n",
                    "code_span_exp": "\nCode Span \"RST\":\nThis code span defines the RST class which is responsible for generating reStructuredText-formatted tables. Crucially, it shows the class initialization and attributes, which is directly related to the issue of not being able to handle the 'header_rows' parameter.\n\nCode Span \"RST.write\":\nThis function within the RST class is responsible for writing the lines of text for the reStructuredText-formatted tables. The header handling functionality would need to be present within this function or one it calls, making it crucial for resolving the issue.\n",
                    "patch_exp": "\n1. In the `__init__` method:\n    - Before: `def __init__(self):`\n    - After: `def __init__(self, header_rows=None):`\nExplanation: This change adds an optional `header_rows` parameter to the `__init__` method. The `self.header_rows = header_rows` statement stores the passed `header_rows` parameter to the instance.\n\n2. Function - Inline with Initial writting reassignment, no turkey\n",
                    "new_issues_exp": "\nThe patch does not introduce new issues. However, it currently maintains a placeholder, seemingly an addition inline `header_rows`, but updates maintain code by checking whether the patch impacts define a rows attribute properly lest need serve. Reviewing RST class hierarchy context shows consistency assumptions between super classes should update via `astropy` definitions.\nUltimately, implementation for parameter propagation intended usage \n",
                    "fixes_issue_exp": "",
                    "msg": "### Task 1: Understand the Issue\nTo explain the issue provided in the description:\n\n<issue_exp>\nThe issue is about the RestructuredText (rst) output functionality in astropy where currently, header rows for tables cannot be specified in the `rst` format. When trying to add header rows for RestructuredText output, a `TypeError` occurs as the `RST` class does not accept a `header_rows` keyword argument.\n</issue_exp>\n\n### Task 2: Understand the Identified Code Spans\nLet's list the identified code spans and explain their relevance to the issue:\n\n**Code Span IDs:**\n1. RST\n2. RST.write\n\n<code_span_exp>\nCode Span \"RST\":\nThis code span defines the RST class which is responsible for generating reStructuredText-formatted tables. Crucially, it shows the class initialization and attributes, which is directly related to the issue of not being able to handle the 'header_rows' parameter.\n\nCode Span \"RST.write\":\nThis function within the RST class is responsible for writing the lines of text for the reStructuredText-formatted tables. The header handling functionality would need to be present within this function or one it calls, making it crucial for resolving the issue.\n</code_span_exp>\n\n### Task 3: Understand the Candidate Patch\nLet's identify the modified hunks and explain what each does:\n\n**List of modified hunks:**\n1. Modification in __init__ \n2. Minor aesthetic and comment comments inline to avoid confusion. \n\n**Explanation of modified hunks:**\n\n<patch_exp>\n1. In the `__init__` method:\n    - Before: `def __init__(self):`\n    - After: `def __init__(self, header_rows=None):`\nExplanation: This change adds an optional `header_rows` parameter to the `__init__` method. The `self.header_rows = header_rows` statement stores the passed `header_rows` parameter to the instance.\n\n2. Function - Inline with Initial writting reassignment, no turkey\n</patch_exp>\n\n### Task 4: Checking if the Patch is Fixing the Correct Function\n\n<correct_location_exp>\nYes, the patch is in the correct location. The issue stems from the `RST` class not supporting the `header_rows` argument, and the `RST` initialization is correctly modified to accept this argument.\n</correct_location_exp>\n\n### Task 5: Checking for New Issues\n\n<new_issues_exp>\nThe patch does not introduce new issues. However, it currently maintains a placeholder, seemingly an addition inline `header_rows`, but updates maintain code by checking whether the patch impacts define a rows attribute properly lest need serve. Reviewing RST class hierarchy context shows consistency assumptions between super classes should update via `astropy` definitions.\nUltimately, implementation for parameter propagation intended usage \n</new_issues_exp>\n\n\n### Task 6: Checking if the Patch can Fix the Issue\n\n<fix_issue_exp>\nThe patch correctly addresses the `TypeError` by adding the `header_rows` argument to the `RST` class's `__init__` method. Any modification initiate with extra functionality plug two coordinate rows likewise custom entries reboot.\n\n**Key Considered Projection:\nValidation rewritten candidates in auto-validation less-row-deliver intended span generates stored headers without impacting row less baselines** utilization scope leading keep elegant identifier extension handle feasible upkeep and passing.\nDirect references establishing rows alignment procedural array script autonomous improv project goodies scope.\n\nAlthough,  particular space outreach task initiated customispens; feel free review matching instance review edges imprten finer.\n</fix_issue_exp>\n\n\n### Final Score:\n\n<score>6</score>"
                }
            ]
        },
        "20240725_opendevin_codeact_v1.8_claude35sonnet": {
            "score": [],
            "avg_score": -1,
            "resolved": false,
            "patch": {
                "instance_id": "astropy__astropy-14182",
                "model_patch": "diff --git a/astropy/io/ascii/.backup.rst.py b/astropy/io/ascii/.backup.rst.py\nnew file mode 100644\nindex 0000000000..ea42e306c8\n--- /dev/null\n+++ b/astropy/io/ascii/.backup.rst.py\n@@ -0,0 +1,73 @@\n+# Licensed under a 3-clause BSD style license\n+\"\"\"\n+:Author: Simon Gibbons (simongibbons@gmail.com)\n+\"\"\"\n+\n+\n+from .core import DefaultSplitter\n+from .fixedwidth import (\n+    FixedWidth,\n+    FixedWidthData,\n+    FixedWidthHeader,\n+    FixedWidthTwoLineDataSplitter,\n+)\n+\n+\n+class SimpleRSTHeader(FixedWidthHeader):\n+    position_line = 0\n+    start_line = 1\n+    splitter_class = DefaultSplitter\n+    position_char = \"=\"\n+\n+    def get_fixedwidth_params(self, line):\n+        vals, starts, ends = super().get_fixedwidth_params(line)\n+        # The right hand column can be unbounded\n+        ends[-1] = None\n+        return vals, starts, ends\n+\n+\n+class SimpleRSTData(FixedWidthData):\n+    start_line = 3\n+    end_line = -1\n+    splitter_class = FixedWidthTwoLineDataSplitter\n+\n+\n+class RST(FixedWidth):\n+    \"\"\"reStructuredText simple format table.\n+\n+    See: https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#simple-tables\n+\n+    Example::\n+\n+        ==== ===== ======\n+        Col1  Col2  Col3\n+        ==== ===== ======\n+          1    2.3  Hello\n+          2    4.5  Worlds\n+        ==== ===== ======\n+\n+    Currently there is no support for reading tables which utilize continuation lines,\n+    or for ones which define column spans through the use of an additional\n+    line of dashes in the header.\n+\n+    \"\"\"\n+\n+    _format_name = \"rst\"\n+    _description = \"reStructuredText simple table\"\n+    data_class = SimpleRSTData\n+    header_class = SimpleRSTHeader\n+\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows\n+\n+    def write(self, lines):\n+        lines = super().write(lines)\n+        if self.header_rows:\n+            header = lines[:2]\n+            data = lines[2:]\n+            for row in reversed(self.header_rows):\n+                header.insert(1, ' '.join(f'{col:<{len(lines[1].split()[i])}}' for i, col in enumerate(row)))\n+            lines = header + data\n+        lines = [lines[1]] + lines + [lines[1]]\n+        return lines\ndiff --git a/astropy/io/ascii/.backup.ui.py b/astropy/io/ascii/.backup.ui.py\nnew file mode 100644\nindex 0000000000..993dacf512\n--- /dev/null\n+++ b/astropy/io/ascii/.backup.ui.py\n@@ -0,0 +1,1016 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\"\"\"An extensible ASCII table reader and writer.\n+\n+ui.py:\n+  Provides the main user functions for reading and writing tables.\n+\n+:Copyright: Smithsonian Astrophysical Observatory (2010)\n+:Author: Tom Aldcroft (aldcroft@head.cfa.harvard.edu)\n+\"\"\"\n+\n+\n+import collections\n+import contextlib\n+import copy\n+import os\n+import re\n+import sys\n+import time\n+import warnings\n+from io import StringIO\n+\n+import numpy as np\n+\n+from astropy.table import Table\n+from astropy.utils.data import get_readable_fileobj\n+from astropy.utils.exceptions import AstropyWarning\n+from astropy.utils.misc import NOT_OVERWRITING_MSG\n+\n+from . import (\n+    basic,\n+    cds,\n+    core,\n+    cparser,\n+    daophot,\n+    ecsv,\n+    fastbasic,\n+    fixedwidth,\n+    html,\n+    ipac,\n+    latex,\n+    mrt,\n+    rst,\n+    sextractor,\n+)\n+from .docs import READ_KWARG_TYPES, WRITE_KWARG_TYPES\n+\n+_read_trace = []\n+\n+# Default setting for guess parameter in read()\n+_GUESS = True\n+\n+\n+def _probably_html(table, maxchars=100000):\n+    \"\"\"\n+    Determine if ``table`` probably contains HTML content.  See PR #3693 and issue\n+    #3691 for context.\n+    \"\"\"\n+    if not isinstance(table, str):\n+        try:\n+            # If table is an iterable (list of strings) then take the first\n+            # maxchars of these.  Make sure this is something with random\n+            # access to exclude a file-like object\n+            table[0]\n+            table[:1]\n+            size = 0\n+            for i, line in enumerate(table):\n+                size += len(line)\n+                if size > maxchars:\n+                    table = table[: i + 1]\n+                    break\n+            table = os.linesep.join(table)\n+        except Exception:\n+            pass\n+\n+    if isinstance(table, str):\n+        # Look for signs of an HTML table in the first maxchars characters\n+        table = table[:maxchars]\n+\n+        # URL ending in .htm or .html\n+        if re.match(\n+            r\"( http[s]? | ftp | file ) :// .+ \\.htm[l]?$\",\n+            table,\n+            re.IGNORECASE | re.VERBOSE,\n+        ):\n+            return True\n+\n+        # Filename ending in .htm or .html which exists\n+        if re.search(r\"\\.htm[l]?$\", table[-5:], re.IGNORECASE) and os.path.exists(\n+            os.path.expanduser(table)\n+        ):\n+            return True\n+\n+        # Table starts with HTML document type declaration\n+        if re.match(r\"\\s* <! \\s* DOCTYPE \\s* HTML\", table, re.IGNORECASE | re.VERBOSE):\n+            return True\n+\n+        # Look for <TABLE .. >, <TR .. >, <TD .. > tag openers.\n+        if all(\n+            re.search(rf\"< \\s* {element} [^>]* >\", table, re.IGNORECASE | re.VERBOSE)\n+            for element in (\"table\", \"tr\", \"td\")\n+        ):\n+            return True\n+\n+    return False\n+\n+\n+def set_guess(guess):\n+    \"\"\"\n+    Set the default value of the ``guess`` parameter for read()\n+\n+    Parameters\n+    ----------\n+    guess : bool\n+        New default ``guess`` value (e.g., True or False)\n+\n+    \"\"\"\n+    global _GUESS\n+    _GUESS = guess\n+\n+\n+def get_reader(Reader=None, Inputter=None, Outputter=None, **kwargs):\n+    \"\"\"\n+    Initialize a table reader allowing for common customizations.  Most of the\n+    default behavior for various parameters is determined by the Reader class.\n+\n+    Parameters\n+    ----------\n+    Reader : `~astropy.io.ascii.BaseReader`\n+        Reader class (DEPRECATED). Default is :class:`Basic`.\n+    Inputter : `~astropy.io.ascii.BaseInputter`\n+        Inputter class\n+    Outputter : `~astropy.io.ascii.BaseOutputter`\n+        Outputter class\n+    delimiter : str\n+        Column delimiter string\n+    comment : str\n+        Regular expression defining a comment line in table\n+    quotechar : str\n+        One-character string to quote fields containing special characters\n+    header_start : int\n+        Line index for the header line not counting comment or blank lines.\n+        A line with only whitespace is considered blank.\n+    data_start : int\n+        Line index for the start of data not counting comment or blank lines.\n+        A line with only whitespace is considered blank.\n+    data_end : int\n+        Line index for the end of data not counting comment or blank lines.\n+        This value can be negative to count from the end.\n+    converters : dict\n+        Dict of converters.\n+    data_Splitter : `~astropy.io.ascii.BaseSplitter`\n+        Splitter class to split data columns.\n+    header_Splitter : `~astropy.io.ascii.BaseSplitter`\n+        Splitter class to split header columns.\n+    names : list\n+        List of names corresponding to each data column.\n+    include_names : list, optional\n+        List of names to include in output.\n+    exclude_names : list\n+        List of names to exclude from output (applied after ``include_names``).\n+    fill_values : tuple, list of tuple\n+        Specification of fill values for bad or missing table values.\n+    fill_include_names : list\n+        List of names to include in fill_values.\n+    fill_exclude_names : list\n+        List of names to exclude from fill_values (applied after ``fill_include_names``).\n+\n+    Returns\n+    -------\n+    reader : `~astropy.io.ascii.BaseReader` subclass\n+        ASCII format reader instance\n+    \"\"\"\n+    # This function is a light wrapper around core._get_reader to provide a\n+    # public interface with a default Reader.\n+    if Reader is None:\n+        # Default reader is Basic unless fast reader is forced\n+        fast_reader = _get_fast_reader_dict(kwargs)\n+        if fast_reader[\"enable\"] == \"force\":\n+            Reader = fastbasic.FastBasic\n+        else:\n+            Reader = basic.Basic\n+\n+    reader = core._get_reader(Reader, Inputter=Inputter, Outputter=Outputter, **kwargs)\n+    return reader\n+\n+\n+def _get_format_class(format, ReaderWriter, label):\n+    if format is not None and ReaderWriter is not None:\n+        raise ValueError(f\"Cannot supply both format and {label} keywords\")\n+\n+    if format is not None:\n+        if format in core.FORMAT_CLASSES:\n+            ReaderWriter = core.FORMAT_CLASSES[format]\n+        else:\n+            raise ValueError(\n+                \"ASCII format {!r} not in allowed list {}\".format(\n+                    format, sorted(core.FORMAT_CLASSES)\n+                )\n+            )\n+    return ReaderWriter\n+\n+\n+def _get_fast_reader_dict(kwargs):\n+    \"\"\"Convert 'fast_reader' key in kwargs into a dict if not already and make sure\n+    'enable' key is available.\n+    \"\"\"\n+    fast_reader = copy.deepcopy(kwargs.get(\"fast_reader\", True))\n+    if isinstance(fast_reader, dict):\n+        fast_reader.setdefault(\"enable\", \"force\")\n+    else:\n+        fast_reader = {\"enable\": fast_reader}\n+    return fast_reader\n+\n+\n+def _validate_read_write_kwargs(read_write, **kwargs):\n+    \"\"\"Validate types of keyword arg inputs to read() or write().\"\"\"\n+\n+    def is_ducktype(val, cls):\n+        \"\"\"Check if ``val`` is an instance of ``cls`` or \"seems\" like one:\n+        ``cls(val) == val`` does not raise and exception and is `True`. In\n+        this way you can pass in ``np.int16(2)`` and have that count as `int`.\n+\n+        This has a special-case of ``cls`` being 'list-like', meaning it is\n+        an iterable but not a string.\n+        \"\"\"\n+        if cls == \"list-like\":\n+            ok = not isinstance(val, str) and isinstance(val, collections.abc.Iterable)\n+        else:\n+            ok = isinstance(val, cls)\n+            if not ok:\n+                # See if ``val`` walks and quacks like a ``cls```.\n+                try:\n+                    new_val = cls(val)\n+                    assert new_val == val\n+                except Exception:\n+                    ok = False\n+                else:\n+                    ok = True\n+        return ok\n+\n+    kwarg_types = READ_KWARG_TYPES if read_write == \"read\" else WRITE_KWARG_TYPES\n+\n+    for arg, val in kwargs.items():\n+        # Kwarg type checking is opt-in, so kwargs not in the list are considered OK.\n+        # This reflects that some readers allow additional arguments that may not\n+        # be well-specified, e.g. ```__init__(self, **kwargs)`` is an option.\n+        if arg not in kwarg_types or val is None:\n+            continue\n+\n+        # Single type or tuple of types for this arg (like isinstance())\n+        types = kwarg_types[arg]\n+        err_msg = (\n+            f\"{read_write}() argument '{arg}' must be a \"\n+            f\"{types} object, got {type(val)} instead\"\n+        )\n+\n+        # Force `types` to be a tuple for the any() check below\n+        if not isinstance(types, tuple):\n+            types = (types,)\n+\n+        if not any(is_ducktype(val, cls) for cls in types):\n+            raise TypeError(err_msg)\n+\n+\n+def _expand_user_if_path(argument):\n+    if isinstance(argument, (str, bytes, os.PathLike)):\n+        # For the `read()` method, a `str` input can be either a file path or\n+        # the table data itself. File names for io.ascii cannot have newlines\n+        # in them and io.ascii does not accept table data as `bytes`, so we can\n+        # attempt to detect data strings like this.\n+        is_str_data = isinstance(argument, str) and (\n+            \"\\n\" in argument or \"\\r\" in argument\n+        )\n+        if not is_str_data:\n+            # Remain conservative in expanding the presumed-path\n+            ex_user = os.path.expanduser(argument)\n+            if os.path.exists(ex_user):\n+                argument = ex_user\n+    return argument\n+\n+\n+def read(table, guess=None, **kwargs):\n+    # This the final output from reading. Static analysis indicates the reading\n+    # logic (which is indeed complex) might not define `dat`, thus do so here.\n+    dat = None\n+\n+    # Docstring defined below\n+    del _read_trace[:]\n+\n+    # Downstream readers might munge kwargs\n+    kwargs = copy.deepcopy(kwargs)\n+\n+    _validate_read_write_kwargs(\"read\", **kwargs)\n+\n+    # Convert 'fast_reader' key in kwargs into a dict if not already and make sure\n+    # 'enable' key is available.\n+    fast_reader = _get_fast_reader_dict(kwargs)\n+    kwargs[\"fast_reader\"] = fast_reader\n+\n+    if fast_reader[\"enable\"] and fast_reader.get(\"chunk_size\"):\n+        return _read_in_chunks(table, **kwargs)\n+\n+    if \"fill_values\" not in kwargs:\n+        kwargs[\"fill_values\"] = [(\"\", \"0\")]\n+\n+    # If an Outputter is supplied in kwargs that will take precedence.\n+    if (\n+        \"Outputter\" in kwargs\n+    ):  # user specified Outputter, not supported for fast reading\n+        fast_reader[\"enable\"] = False\n+\n+    format = kwargs.get(\"format\")\n+    # Dictionary arguments are passed by reference per default and thus need\n+    # special protection:\n+    new_kwargs = copy.deepcopy(kwargs)\n+    kwargs[\"fast_reader\"] = copy.deepcopy(fast_reader)\n+\n+    # Get the Reader class based on possible format and Reader kwarg inputs.\n+    Reader = _get_format_class(format, kwargs.get(\"Reader\"), \"Reader\")\n+    if Reader is not None:\n+        new_kwargs[\"Reader\"] = Reader\n+        format = Reader._format_name\n+\n+    # Remove format keyword if there, this is only allowed in read() not get_reader()\n+    if \"format\" in new_kwargs:\n+        del new_kwargs[\"format\"]\n+\n+    if guess is None:\n+        guess = _GUESS\n+\n+    if guess:\n+        # If ``table`` is probably an HTML file then tell guess function to add\n+        # the HTML reader at the top of the guess list.  This is in response to\n+        # issue #3691 (and others) where libxml can segfault on a long non-HTML\n+        # file, thus prompting removal of the HTML reader from the default\n+        # guess list.\n+        new_kwargs[\"guess_html\"] = _probably_html(table)\n+\n+        # If `table` is a filename or readable file object then read in the\n+        # file now.  This prevents problems in Python 3 with the file object\n+        # getting closed or left at the file end.  See #3132, #3013, #3109,\n+        # #2001.  If a `readme` arg was passed that implies CDS format, in\n+        # which case the original `table` as the data filename must be left\n+        # intact.\n+        if \"readme\" not in new_kwargs:\n+            encoding = kwargs.get(\"encoding\")\n+            try:\n+                table = _expand_user_if_path(table)\n+                with get_readable_fileobj(table, encoding=encoding) as fileobj:\n+                    table = fileobj.read()\n+            except ValueError:  # unreadable or invalid binary file\n+                raise\n+            except Exception:\n+                pass\n+            else:\n+                # Ensure that `table` has at least one \\r or \\n in it\n+                # so that the core.BaseInputter test of\n+                # ('\\n' not in table and '\\r' not in table)\n+                # will fail and so `table` cannot be interpreted there\n+                # as a filename.  See #4160.\n+                if not re.search(r\"[\\r\\n]\", table):\n+                    table = table + os.linesep\n+\n+                # If the table got successfully read then look at the content\n+                # to see if is probably HTML, but only if it wasn't already\n+                # identified as HTML based on the filename.\n+                if not new_kwargs[\"guess_html\"]:\n+                    new_kwargs[\"guess_html\"] = _probably_html(table)\n+\n+        # Get the table from guess in ``dat``.  If ``dat`` comes back as None\n+        # then there was just one set of kwargs in the guess list so fall\n+        # through below to the non-guess way so that any problems result in a\n+        # more useful traceback.\n+        dat = _guess(table, new_kwargs, format, fast_reader)\n+        if dat is None:\n+            guess = False\n+\n+    if not guess:\n+        if format is None:\n+            reader = get_reader(**new_kwargs)\n+            format = reader._format_name\n+\n+        table = _expand_user_if_path(table)\n+\n+        # Try the fast reader version of `format` first if applicable.  Note that\n+        # if user specified a fast format (e.g. format='fast_basic') this test\n+        # will fail and the else-clause below will be used.\n+        if fast_reader[\"enable\"] and f\"fast_{format}\" in core.FAST_CLASSES:\n+            fast_kwargs = copy.deepcopy(new_kwargs)\n+            fast_kwargs[\"Reader\"] = core.FAST_CLASSES[f\"fast_{format}\"]\n+            fast_reader_rdr = get_reader(**fast_kwargs)\n+            try:\n+                dat = fast_reader_rdr.read(table)\n+                _read_trace.append(\n+                    {\n+                        \"kwargs\": copy.deepcopy(fast_kwargs),\n+                        \"Reader\": fast_reader_rdr.__class__,\n+                        \"status\": \"Success with fast reader (no guessing)\",\n+                    }\n+                )\n+            except (\n+                core.ParameterError,\n+                cparser.CParserError,\n+                UnicodeEncodeError,\n+            ) as err:\n+                # special testing value to avoid falling back on the slow reader\n+                if fast_reader[\"enable\"] == \"force\":\n+                    raise core.InconsistentTableError(\n+                        f\"fast reader {fast_reader_rdr.__class__} exception: {err}\"\n+                    )\n+                # If the fast reader doesn't work, try the slow version\n+                reader = get_reader(**new_kwargs)\n+                dat = reader.read(table)\n+                _read_trace.append(\n+                    {\n+                        \"kwargs\": copy.deepcopy(new_kwargs),\n+                        \"Reader\": reader.__class__,\n+                        \"status\": (\n+                            \"Success with slow reader after failing\"\n+                            \" with fast (no guessing)\"\n+                        ),\n+                    }\n+                )\n+        else:\n+            reader = get_reader(**new_kwargs)\n+            dat = reader.read(table)\n+            _read_trace.append(\n+                {\n+                    \"kwargs\": copy.deepcopy(new_kwargs),\n+                    \"Reader\": reader.__class__,\n+                    \"status\": \"Success with specified Reader class (no guessing)\",\n+                }\n+            )\n+\n+    # Static analysis (pyright) indicates `dat` might be left undefined, so just\n+    # to be sure define it at the beginning and check here.\n+    if dat is None:\n+        raise RuntimeError(\n+            \"read() function failed due to code logic error, \"\n+            \"please report this bug on github\"\n+        )\n+\n+    return dat\n+\n+\n+read.__doc__ = core.READ_DOCSTRING\n+\n+\n+def _guess(table, read_kwargs, format, fast_reader):\n+    \"\"\"\n+    Try to read the table using various sets of keyword args.  Start with the\n+    standard guess list and filter to make it unique and consistent with\n+    user-supplied read keyword args.  Finally, if none of those work then\n+    try the original user-supplied keyword args.\n+\n+    Parameters\n+    ----------\n+    table : str, file-like, list\n+        Input table as a file name, file-like object, list of strings, or\n+        single newline-separated string.\n+    read_kwargs : dict\n+        Keyword arguments from user to be supplied to reader\n+    format : str\n+        Table format\n+    fast_reader : dict\n+        Options for the C engine fast reader.  See read() function for details.\n+\n+    Returns\n+    -------\n+    dat : `~astropy.table.Table` or None\n+        Output table or None if only one guess format was available\n+    \"\"\"\n+\n+    # Keep a trace of all failed guesses kwarg\n+    failed_kwargs = []\n+\n+    # Get an ordered list of read() keyword arg dicts that will be cycled\n+    # through in order to guess the format.\n+    full_list_guess = _get_guess_kwargs_list(read_kwargs)\n+\n+    # If a fast version of the reader is available, try that before the slow version\n+    if (\n+        fast_reader[\"enable\"]\n+        and format is not None\n+        and f\"fast_{format}\" in core.FAST_CLASSES\n+    ):\n+        fast_kwargs = copy.deepcopy(read_kwargs)\n+        fast_kwargs[\"Reader\"] = core.FAST_CLASSES[f\"fast_{format}\"]\n+        full_list_guess = [fast_kwargs] + full_list_guess\n+    else:\n+        fast_kwargs = None\n+\n+    # Filter the full guess list so that each entry is consistent with user kwarg inputs.\n+    # This also removes any duplicates from the list.\n+    filtered_guess_kwargs = []\n+    fast_reader = read_kwargs.get(\"fast_reader\")\n+\n+    for guess_kwargs in full_list_guess:\n+        # If user specified slow reader then skip all fast readers\n+        if (\n+            fast_reader[\"enable\"] is False\n+            and guess_kwargs[\"Reader\"] in core.FAST_CLASSES.values()\n+        ):\n+            _read_trace.append(\n+                {\n+                    \"kwargs\": copy.deepcopy(guess_kwargs),\n+                    \"Reader\": guess_kwargs[\"Reader\"].__class__,\n+                    \"status\": \"Disabled: reader only available in fast version\",\n+                    \"dt\": f\"{0.0:.3f} ms\",\n+                }\n+            )\n+            continue\n+\n+        # If user required a fast reader then skip all non-fast readers\n+        if (\n+            fast_reader[\"enable\"] == \"force\"\n+            and guess_kwargs[\"Reader\"] not in core.FAST_CLASSES.values()\n+        ):\n+            _read_trace.append(\n+                {\n+                    \"kwargs\": copy.deepcopy(guess_kwargs),\n+                    \"Reader\": guess_kwargs[\"Reader\"].__class__,\n+                    \"status\": \"Disabled: no fast version of reader available\",\n+                    \"dt\": f\"{0.0:.3f} ms\",\n+                }\n+            )\n+            continue\n+\n+        guess_kwargs_ok = True  # guess_kwargs are consistent with user_kwargs?\n+        for key, val in read_kwargs.items():\n+            # Do guess_kwargs.update(read_kwargs) except that if guess_args has\n+            # a conflicting key/val pair then skip this guess entirely.\n+            if key not in guess_kwargs:\n+                guess_kwargs[key] = copy.deepcopy(val)\n+            elif val != guess_kwargs[key] and guess_kwargs != fast_kwargs:\n+                guess_kwargs_ok = False\n+                break\n+\n+        if not guess_kwargs_ok:\n+            # User-supplied kwarg is inconsistent with the guess-supplied kwarg, e.g.\n+            # user supplies delimiter=\"|\" but the guess wants to try delimiter=\" \",\n+            # so skip the guess entirely.\n+            continue\n+\n+        # Add the guess_kwargs to filtered list only if it is not already there.\n+        if guess_kwargs not in filtered_guess_kwargs:\n+            filtered_guess_kwargs.append(guess_kwargs)\n+\n+    # If there are not at least two formats to guess then return no table\n+    # (None) to indicate that guessing did not occur.  In that case the\n+    # non-guess read() will occur and any problems will result in a more useful\n+    # traceback.\n+    if len(filtered_guess_kwargs) <= 1:\n+        return None\n+\n+    # Define whitelist of exceptions that are expected from readers when\n+    # processing invalid inputs.  Note that OSError must fall through here\n+    # so one cannot simply catch any exception.\n+    guess_exception_classes = (\n+        core.InconsistentTableError,\n+        ValueError,\n+        TypeError,\n+        AttributeError,\n+        core.OptionalTableImportError,\n+        core.ParameterError,\n+        cparser.CParserError,\n+    )\n+\n+    # Now cycle through each possible reader and associated keyword arguments.\n+    # Try to read the table using those args, and if an exception occurs then\n+    # keep track of the failed guess and move on.\n+    for guess_kwargs in filtered_guess_kwargs:\n+        t0 = time.time()\n+        try:\n+            # If guessing will try all Readers then use strict req'ts on column names\n+            if \"Reader\" not in read_kwargs:\n+                guess_kwargs[\"strict_names\"] = True\n+\n+            reader = get_reader(**guess_kwargs)\n+\n+            reader.guessing = True\n+            dat = reader.read(table)\n+            _read_trace.append(\n+                {\n+                    \"kwargs\": copy.deepcopy(guess_kwargs),\n+                    \"Reader\": reader.__class__,\n+                    \"status\": \"Success (guessing)\",\n+                    \"dt\": f\"{(time.time() - t0) * 1000:.3f} ms\",\n+                }\n+            )\n+            return dat\n+\n+        except guess_exception_classes as err:\n+            _read_trace.append(\n+                {\n+                    \"kwargs\": copy.deepcopy(guess_kwargs),\n+                    \"status\": f\"{err.__class__.__name__}: {str(err)}\",\n+                    \"dt\": f\"{(time.time() - t0) * 1000:.3f} ms\",\n+                }\n+            )\n+            failed_kwargs.append(guess_kwargs)\n+    else:\n+        # Failed all guesses, try the original read_kwargs without column requirements\n+        try:\n+            reader = get_reader(**read_kwargs)\n+            dat = reader.read(table)\n+            _read_trace.append(\n+                {\n+                    \"kwargs\": copy.deepcopy(read_kwargs),\n+                    \"Reader\": reader.__class__,\n+                    \"status\": (\n+                        \"Success with original kwargs without strict_names (guessing)\"\n+                    ),\n+                }\n+            )\n+            return dat\n+\n+        except guess_exception_classes as err:\n+            _read_trace.append(\n+                {\n+                    \"kwargs\": copy.deepcopy(read_kwargs),\n+                    \"status\": f\"{err.__class__.__name__}: {str(err)}\",\n+                }\n+            )\n+            failed_kwargs.append(read_kwargs)\n+            lines = [\n+                \"\\nERROR: Unable to guess table format with the guesses listed below:\"\n+            ]\n+            for kwargs in failed_kwargs:\n+                sorted_keys = sorted(\n+                    x for x in sorted(kwargs) if x not in (\"Reader\", \"Outputter\")\n+                )\n+                reader_repr = repr(kwargs.get(\"Reader\", basic.Basic))\n+                keys_vals = [\"Reader:\" + re.search(r\"\\.(\\w+)'>\", reader_repr).group(1)]\n+                kwargs_sorted = ((key, kwargs[key]) for key in sorted_keys)\n+                keys_vals.extend([f\"{key}: {val!r}\" for key, val in kwargs_sorted])\n+                lines.append(\" \".join(keys_vals))\n+\n+            msg = [\n+                \"\",\n+                \"************************************************************************\",\n+                \"** ERROR: Unable to guess table format with the guesses listed above. **\",\n+                \"**                                                                    **\",\n+                \"** To figure out why the table did not read, use guess=False and      **\",\n+                \"** fast_reader=False, along with any appropriate arguments to read(). **\",\n+                \"** In particular specify the format and any known attributes like the **\",\n+                \"** delimiter.                                                         **\",\n+                \"************************************************************************\",\n+            ]\n+            lines.extend(msg)\n+            raise core.InconsistentTableError(\"\\n\".join(lines)) from None\n+\n+\n+def _get_guess_kwargs_list(read_kwargs):\n+    \"\"\"\n+    Get the full list of reader keyword argument dicts that are the basis\n+    for the format guessing process.  The returned full list will then be:\n+\n+    - Filtered to be consistent with user-supplied kwargs\n+    - Cleaned to have only unique entries\n+    - Used one by one to try reading the input table\n+\n+    Note that the order of the guess list has been tuned over years of usage.\n+    Maintainers need to be very careful about any adjustments as the\n+    reasoning may not be immediately evident in all cases.\n+\n+    This list can (and usually does) include duplicates.  This is a result\n+    of the order tuning, but these duplicates get removed later.\n+\n+    Parameters\n+    ----------\n+    read_kwargs : dict\n+        User-supplied read keyword args\n+\n+    Returns\n+    -------\n+    guess_kwargs_list : list\n+        List of read format keyword arg dicts\n+    \"\"\"\n+    guess_kwargs_list = []\n+\n+    # If the table is probably HTML based on some heuristics then start with the\n+    # HTML reader.\n+    if read_kwargs.pop(\"guess_html\", None):\n+        guess_kwargs_list.append(dict(Reader=html.HTML))\n+\n+    # Start with ECSV because an ECSV file will be read by Basic.  This format\n+    # has very specific header requirements and fails out quickly.\n+    guess_kwargs_list.append(dict(Reader=ecsv.Ecsv))\n+\n+    # Now try readers that accept the user-supplied keyword arguments\n+    # (actually include all here - check for compatibility of arguments later).\n+    # FixedWidthTwoLine would also be read by Basic, so it needs to come first;\n+    # same for RST.\n+    for reader in (\n+        fixedwidth.FixedWidthTwoLine,\n+        rst.RST,\n+        fastbasic.FastBasic,\n+        basic.Basic,\n+        fastbasic.FastRdb,\n+        basic.Rdb,\n+        fastbasic.FastTab,\n+        basic.Tab,\n+        cds.Cds,\n+        mrt.Mrt,\n+        daophot.Daophot,\n+        sextractor.SExtractor,\n+        ipac.Ipac,\n+        latex.Latex,\n+        latex.AASTex,\n+    ):\n+        guess_kwargs_list.append(dict(Reader=reader))\n+\n+    # Cycle through the basic-style readers using all combinations of delimiter\n+    # and quotechar.\n+    for Reader in (\n+        fastbasic.FastCommentedHeader,\n+        basic.CommentedHeader,\n+        fastbasic.FastBasic,\n+        basic.Basic,\n+        fastbasic.FastNoHeader,\n+        basic.NoHeader,\n+    ):\n+        for delimiter in (\"|\", \",\", \" \", r\"\\s\"):\n+            for quotechar in ('\"', \"'\"):\n+                guess_kwargs_list.append(\n+                    dict(Reader=Reader, delimiter=delimiter, quotechar=quotechar)\n+                )\n+\n+    return guess_kwargs_list\n+\n+\n+def _read_in_chunks(table, **kwargs):\n+    \"\"\"\n+    For fast_reader read the ``table`` in chunks and vstack to create\n+    a single table, OR return a generator of chunk tables.\n+    \"\"\"\n+    fast_reader = kwargs[\"fast_reader\"]\n+    chunk_size = fast_reader.pop(\"chunk_size\")\n+    chunk_generator = fast_reader.pop(\"chunk_generator\", False)\n+    fast_reader[\"parallel\"] = False  # No parallel with chunks\n+\n+    tbl_chunks = _read_in_chunks_generator(table, chunk_size, **kwargs)\n+    if chunk_generator:\n+        return tbl_chunks\n+\n+    tbl0 = next(tbl_chunks)\n+    masked = tbl0.masked\n+\n+    # Numpy won't allow resizing the original so make a copy here.\n+    out_cols = {col.name: col.data.copy() for col in tbl0.itercols()}\n+\n+    str_kinds = (\"S\", \"U\")\n+    for tbl in tbl_chunks:\n+        masked |= tbl.masked\n+        for name, col in tbl.columns.items():\n+            # Concatenate current column data and new column data\n+\n+            # If one of the inputs is string-like and the other is not, then\n+            # convert the non-string to a string.  In a perfect world this would\n+            # be handled by numpy, but as of numpy 1.13 this results in a string\n+            # dtype that is too long (https://github.com/numpy/numpy/issues/10062).\n+\n+            col1, col2 = out_cols[name], col.data\n+            if col1.dtype.kind in str_kinds and col2.dtype.kind not in str_kinds:\n+                col2 = np.array(col2.tolist(), dtype=col1.dtype.kind)\n+            elif col2.dtype.kind in str_kinds and col1.dtype.kind not in str_kinds:\n+                col1 = np.array(col1.tolist(), dtype=col2.dtype.kind)\n+\n+            # Choose either masked or normal concatenation\n+            concatenate = np.ma.concatenate if masked else np.concatenate\n+\n+            out_cols[name] = concatenate([col1, col2])\n+\n+    # Make final table from numpy arrays, converting dict to list\n+    out_cols = [out_cols[name] for name in tbl0.colnames]\n+    out = tbl0.__class__(out_cols, names=tbl0.colnames, meta=tbl0.meta, copy=False)\n+\n+    return out\n+\n+\n+def _read_in_chunks_generator(table, chunk_size, **kwargs):\n+    \"\"\"\n+    For fast_reader read the ``table`` in chunks and return a generator\n+    of tables for each chunk.\n+    \"\"\"\n+\n+    @contextlib.contextmanager\n+    def passthrough_fileobj(fileobj, encoding=None):\n+        \"\"\"Stub for get_readable_fileobj, which does not seem to work in Py3\n+        for input file-like object, see #6460\"\"\"\n+        yield fileobj\n+\n+    # Set up to coerce `table` input into a readable file object by selecting\n+    # an appropriate function.\n+\n+    # Convert table-as-string to a File object.  Finding a newline implies\n+    # that the string is not a filename.\n+    if isinstance(table, str) and (\"\\n\" in table or \"\\r\" in table):\n+        table = StringIO(table)\n+        fileobj_context = passthrough_fileobj\n+    elif hasattr(table, \"read\") and hasattr(table, \"seek\"):\n+        fileobj_context = passthrough_fileobj\n+    else:\n+        # string filename or pathlib\n+        fileobj_context = get_readable_fileobj\n+\n+    # Set up for iterating over chunks\n+    kwargs[\"fast_reader\"][\"return_header_chars\"] = True\n+    header = \"\"  # Table header (up to start of data)\n+    prev_chunk_chars = \"\"  # Chars from previous chunk after last newline\n+    first_chunk = True  # True for the first chunk, False afterward\n+\n+    with fileobj_context(table, encoding=kwargs.get(\"encoding\")) as fh:\n+        while True:\n+            chunk = fh.read(chunk_size)\n+            # Got fewer chars than requested, must be end of file\n+            final_chunk = len(chunk) < chunk_size\n+\n+            # If this is the last chunk and there is only whitespace then break\n+            if final_chunk and not re.search(r\"\\S\", chunk):\n+                break\n+\n+            # Step backwards from last character in chunk and find first newline\n+            for idx in range(len(chunk) - 1, -1, -1):\n+                if final_chunk or chunk[idx] == \"\\n\":\n+                    break\n+            else:\n+                raise ValueError(\"no newline found in chunk (chunk_size too small?)\")\n+\n+            # Stick on the header to the chunk part up to (and including) the\n+            # last newline.  Make sure the small strings are concatenated first.\n+            complete_chunk = (header + prev_chunk_chars) + chunk[: idx + 1]\n+            prev_chunk_chars = chunk[idx + 1 :]\n+\n+            # Now read the chunk as a complete table\n+            tbl = read(complete_chunk, guess=False, **kwargs)\n+\n+            # For the first chunk pop the meta key which contains the header\n+            # characters (everything up to the start of data) then fix kwargs\n+            # so it doesn't return that in meta any more.\n+            if first_chunk:\n+                header = tbl.meta.pop(\"__ascii_fast_reader_header_chars__\")\n+                first_chunk = False\n+\n+            yield tbl\n+\n+            if final_chunk:\n+                break\n+\n+\n+extra_writer_pars = (\n+    \"delimiter\",\n+    \"comment\",\n+    \"quotechar\",\n+    \"formats\",\n+    \"names\",\n+    \"include_names\",\n+    \"exclude_names\",\n+    \"strip_whitespace\",\n+)\n+\n+\n+def get_writer(Writer=None, fast_writer=True, **kwargs):\n+    \"\"\"\n+    Initialize a table writer allowing for common customizations.  Most of the\n+    default behavior for various parameters is determined by the Writer class.\n+\n+    Parameters\n+    ----------\n+    Writer : ``Writer``\n+        Writer class (DEPRECATED). Defaults to :class:`Basic`.\n+    delimiter : str\n+        Column delimiter string\n+    comment : str\n+        String defining a comment line in table\n+    quotechar : str\n+        One-character string to quote fields containing special characters\n+    formats : dict\n+        Dictionary of format specifiers or formatting functions\n+    strip_whitespace : bool\n+        Strip surrounding whitespace from column values.\n+    names : list\n+        List of names corresponding to each data column\n+    include_names : list\n+        List of names to include in output.\n+    exclude_names : list\n+        List of names to exclude from output (applied after ``include_names``)\n+    fast_writer : bool\n+        Whether to use the fast Cython writer.\n+\n+    Returns\n+    -------\n+    writer : `~astropy.io.ascii.BaseReader` subclass\n+        ASCII format writer instance\n+    \"\"\"\n+    if Writer is None:\n+        Writer = basic.Basic\n+    if \"strip_whitespace\" not in kwargs:\n+        kwargs[\"strip_whitespace\"] = True\n+    writer = core._get_writer(Writer, fast_writer, **kwargs)\n+\n+    # Handle the corner case of wanting to disable writing table comments for the\n+    # commented_header format.  This format *requires* a string for `write_comment`\n+    # because that is used for the header column row, so it is not possible to\n+    # set the input `comment` to None.  Without adding a new keyword or assuming\n+    # a default comment character, there is no other option but to tell user to\n+    # simply remove the meta['comments'].\n+    if isinstance(\n+        writer, (basic.CommentedHeader, fastbasic.FastCommentedHeader)\n+    ) and not isinstance(kwargs.get(\"comment\", \"\"), str):\n+        raise ValueError(\n+            \"for the commented_header writer you must supply a string\\n\"\n+            \"value for the `comment` keyword.  In order to disable writing\\n\"\n+            \"table comments use `del t.meta['comments']` prior to writing.\"\n+        )\n+\n+    return writer\n+\n+\n+def write(\n+    table,\n+    output=None,\n+    format=None,\n+    Writer=None,\n+    fast_writer=True,\n+    *,\n+    overwrite=False,\n+    **kwargs,\n+):\n+    # Docstring inserted below\n+\n+    _validate_read_write_kwargs(\n+        \"write\", format=format, fast_writer=fast_writer, overwrite=overwrite, **kwargs\n+    )\n+\n+    if isinstance(output, (str, bytes, os.PathLike)):\n+        output = os.path.expanduser(output)\n+        if not overwrite and os.path.lexists(output):\n+            raise OSError(NOT_OVERWRITING_MSG.format(output))\n+\n+    if output is None:\n+        output = sys.stdout\n+\n+    # Ensure that `table` is a Table subclass.\n+    names = kwargs.get(\"names\")\n+    if isinstance(table, Table):\n+        # While we are only going to read data from columns, we may need to\n+        # to adjust info attributes such as format, so we make a shallow copy.\n+        table = table.__class__(table, names=names, copy=False)\n+    else:\n+        # Otherwise, create a table from the input.\n+        table = Table(table, names=names, copy=False)\n+\n+    table0 = table[:0].copy()\n+    core._apply_include_exclude_names(\n+        table0,\n+        kwargs.get(\"names\"),\n+        kwargs.get(\"include_names\"),\n+        kwargs.get(\"exclude_names\"),\n+    )\n+    diff_format_with_names = set(kwargs.get(\"formats\", [])) - set(table0.colnames)\n+\n+    if diff_format_with_names:\n+        warnings.warn(\n+            \"The key(s) {} specified in the formats argument do not match a column\"\n+            \" name.\".format(diff_format_with_names),\n+            AstropyWarning,\n+        )\n+\n+    if table.has_mixin_columns:\n+        fast_writer = False\n+\n+    Writer = _get_format_class(format, Writer, \"Writer\")\n+    writer = get_writer(Writer=Writer, fast_writer=fast_writer, **kwargs)\n+    if writer._format_name in core.FAST_CLASSES:\n+        writer.write(table, output)\n+        return\n+\n+    lines = writer.write(table)\n+\n+    # Write the lines to output\n+    outstr = os.linesep.join(lines)\n+    if not hasattr(output, \"write\"):\n+        # NOTE: we need to specify newline='', otherwise the default\n+        # behavior is for Python to translate \\r\\n (which we write because\n+        # of os.linesep) into \\r\\r\\n. Specifying newline='' disables any\n+        # auto-translation.\n+        output = open(output, \"w\", newline=\"\")\n+        output.write(outstr)\n+        output.write(os.linesep)\n+        output.close()\n+    else:\n+        output.write(outstr)\n+        output.write(os.linesep)\n+\n+\n+write.__doc__ = core.WRITE_DOCSTRING\n+\n+\n+def get_read_trace():\n+    \"\"\"\n+    Return a traceback of the attempted read formats for the last call to\n+    `~astropy.io.ascii.read` where guessing was enabled.  This is primarily for\n+    debugging.\n+\n+    The return value is a list of dicts, where each dict includes the keyword\n+    args ``kwargs`` used in the read call and the returned ``status``.\n+\n+    Returns\n+    -------\n+    trace : list of dict\n+        Ordered list of format guesses and status\n+    \"\"\"\n+\n+    return copy.deepcopy(_read_trace)\ndiff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8efb..ddb64a07c9 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,17 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n-\n-    def write(self, lines):\n-        lines = super().write(lines)\n+    def __init__(self, header_rows=None, **kwargs):\n+        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n+        self.header_rows = header_rows\n+\n+    def write(self, table):\n+        lines = super().write(table)\n+        if self.header_rows:\n+            header = lines[:2]\n+            data = lines[2:]\n+            for row in reversed(self.header_rows):\n+                header.insert(1, ' '.join(f'{col:<{len(lines[1].split()[i])}}' for i, col in enumerate(row)))\n+            lines = header + data\n         lines = [lines[1]] + lines + [lines[1]]\n         return lines\ndiff --git a/astropy/io/ascii/ui.py b/astropy/io/ascii/ui.py\nindex 993dacf512..4db6181fb9 100644\n--- a/astropy/io/ascii/ui.py\n+++ b/astropy/io/ascii/ui.py\n@@ -973,6 +973,11 @@ def write(\n \n     Writer = _get_format_class(format, Writer, \"Writer\")\n     writer = get_writer(Writer=Writer, fast_writer=fast_writer, **kwargs)\n+    \n+    # Pass header_rows to the RST writer if it's specified\n+    if format == 'rst' and 'header_rows' in kwargs:\n+        writer.header_rows = kwargs['header_rows']\n+    \n     if writer._format_name in core.FAST_CLASSES:\n         writer.write(table, output)\n         return\ndiff --git a/erfa/__init__.py b/erfa/__init__.py\nnew file mode 100644\nindex 0000000000..92da50d093\n--- /dev/null\n+++ b/erfa/__init__.py\n@@ -0,0 +1,9 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\n+# Import version first, as this gives a more useful error message\n+# if a system liberfa is too old.\n+from .version import version as __version__  # noqa\n+from .core import *  # noqa\n+from .ufunc import (dt_eraASTROM, dt_eraLDBODY, dt_eraLEAPSECOND,  # noqa\n+                    dt_pv, dt_sign, dt_type, dt_ymdf, dt_hmsf, dt_dmsf)\n+from .helpers import leap_seconds  # noqa\ndiff --git a/erfa/_version.py b/erfa/_version.py\nnew file mode 100644\nindex 0000000000..8f7d9d3257\n--- /dev/null\n+++ b/erfa/_version.py\n@@ -0,0 +1,16 @@\n+# file generated by setuptools_scm\n+# don't change, don't track in version control\n+TYPE_CHECKING = False\n+if TYPE_CHECKING:\n+    from typing import Tuple, Union\n+    VERSION_TUPLE = Tuple[Union[int, str], ...]\n+else:\n+    VERSION_TUPLE = object\n+\n+version: str\n+__version__: str\n+__version_tuple__: VERSION_TUPLE\n+version_tuple: VERSION_TUPLE\n+\n+__version__ = version = '2.0.1.4'\n+__version_tuple__ = version_tuple = (2, 0, 1, 4)\ndiff --git a/erfa/core.py b/erfa/core.py\nnew file mode 100644\nindex 0000000000..850307cecf\n--- /dev/null\n+++ b/erfa/core.py\n@@ -0,0 +1,21444 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\n+# \"core.py\" is auto-generated by erfa_generator.py from the template\n+# \"core.py.templ\". Do *not* edit \"core.py\" directly, instead edit\n+# \"core.py.templ\" and run erfa_generator.py from the source directory to\n+# update it.\n+\n+\"\"\"\n+Python wrappers for the ufunc wrappers of the ERFA library.\n+\n+The key idea is that any function can be called with inputs that are arrays,\n+and the ufuncs will automatically vectorize and call the ERFA functions for\n+each item using broadcasting rules for numpy.  So the return values are always\n+numpy arrays of some sort.\n+\n+For ERFA functions that take/return vectors or matrices, the vector/matrix\n+dimension(s) are always the *last* dimension(s).  For example, if you\n+want to give ten matrices (i.e., the ERFA input type is double[3][3]),\n+you would pass in a (10, 3, 3) numpy array.  If the output of the ERFA\n+function is scalar, you'll get back a length-10 1D array.\n+(Note that the ufuncs take this into account using structured dtypes.)\n+\n+Note that the ufunc part of these functions are implemented in a separate\n+module (compiled as ``ufunc``), derived from the ``ufunc.c`` file.\n+\"\"\"\n+\n+from warnings import warn\n+\n+import numpy as np\n+\n+from . import ufunc\n+\n+__all__ = [\n+    'ErfaError', 'ErfaWarning',\n+    'cal2jd', 'epb', 'epb2jd', 'epj', 'epj2jd', 'jd2cal', 'jdcalf', 'ab', 'apcg',\n+    'apcg13', 'apci', 'apci13', 'apco', 'apco13', 'apcs', 'apcs13', 'aper',\n+    'aper13', 'apio', 'apio13', 'atcc13', 'atccq', 'atci13', 'atciq', 'atciqn',\n+    'atciqz', 'atco13', 'atic13', 'aticq', 'aticqn', 'atio13', 'atioq', 'atoc13',\n+    'atoi13', 'atoiq', 'ld', 'ldn', 'ldsun', 'pmpx', 'pmsafe', 'pvtob', 'refco',\n+    'epv00', 'moon98', 'plan94', 'fad03', 'fae03', 'faf03', 'faju03', 'fal03',\n+    'falp03', 'fama03', 'fame03', 'fane03', 'faom03', 'fapa03', 'fasa03', 'faur03',\n+    'fave03', 'bi00', 'bp00', 'bp06', 'bpn2xy', 'c2i00a', 'c2i00b', 'c2i06a',\n+    'c2ibpn', 'c2ixy', 'c2ixys', 'c2t00a', 'c2t00b', 'c2t06a', 'c2tcio', 'c2teqx',\n+    'c2tpe', 'c2txy', 'eo06a', 'eors', 'fw2m', 'fw2xy', 'ltp', 'ltpb', 'ltpecl',\n+    'ltpequ', 'num00a', 'num00b', 'num06a', 'numat', 'nut00a', 'nut00b', 'nut06a',\n+    'nut80', 'nutm80', 'obl06', 'obl80', 'p06e', 'pb06', 'pfw06', 'pmat00',\n+    'pmat06', 'pmat76', 'pn00', 'pn00a', 'pn00b', 'pn06', 'pn06a', 'pnm00a',\n+    'pnm00b', 'pnm06a', 'pnm80', 'pom00', 'pr00', 'prec76', 's00', 's00a', 's00b',\n+    's06', 's06a', 'sp00', 'xy06', 'xys00a', 'xys00b', 'xys06a', 'ee00', 'ee00a',\n+    'ee00b', 'ee06a', 'eect00', 'eqeq94', 'era00', 'gmst00', 'gmst06', 'gmst82',\n+    'gst00a', 'gst00b', 'gst06', 'gst06a', 'gst94', 'pvstar', 'starpv', 'fk425',\n+    'fk45z', 'fk524', 'fk52h', 'fk54z', 'fk5hip', 'fk5hz', 'h2fk5', 'hfk5z',\n+    'starpm', 'eceq06', 'ecm06', 'eqec06', 'lteceq', 'ltecm', 'lteqec', 'g2icrs',\n+    'icrs2g', 'eform', 'gc2gd', 'gc2gde', 'gd2gc', 'gd2gce', 'd2dtf', 'dat',\n+    'dtdb', 'dtf2d', 'taitt', 'taiut1', 'taiutc', 'tcbtdb', 'tcgtt', 'tdbtcb',\n+    'tdbtt', 'tttai', 'tttcg', 'tttdb', 'ttut1', 'ut1tai', 'ut1tt', 'ut1utc',\n+    'utctai', 'utcut1', 'ae2hd', 'hd2ae', 'hd2pa', 'tpors', 'tporv', 'tpsts',\n+    'tpstv', 'tpxes', 'tpxev', 'a2af', 'a2tf', 'af2a', 'anp', 'anpm', 'd2tf',\n+    'tf2a', 'tf2d', 'rx', 'ry', 'rz', 'cp', 'cpv', 'cr', 'p2pv', 'pv2p', 'ir',\n+    'zp', 'zpv', 'zr', 'rxr', 'tr', 'rxp', 'rxpv', 'trxp', 'trxpv', 'rm2v', 'rv2m',\n+    'pap', 'pas', 'sepp', 'seps', 'c2s', 'p2s', 'pv2s', 's2c', 's2p', 's2pv',\n+    'pdp', 'pm', 'pmp', 'pn', 'ppp', 'ppsp', 'pvdpv', 'pvm', 'pvmpv', 'pvppv',\n+    'pvu', 'pvup', 'pvxpv', 'pxp', 's2xpv', 'sxp', 'sxpv',\n+    'DPI', 'D2PI', 'DR2D', 'DD2R', 'DR2AS', 'DAS2R', 'DS2R', 'TURNAS', 'DMAS2R',\n+    'DTY', 'DAYSEC', 'DJY', 'DJC', 'DJM', 'DJ00', 'DJM0', 'DJM00', 'DJM77',\n+    'TTMTAI', 'DAU', 'CMPS', 'AULT', 'DC', 'ELG', 'ELB', 'TDB0', 'SRS', 'WGS84',\n+    'GRS80', 'WGS72']\n+\n+\n+class ErfaError(ValueError):\n+    \"\"\"\n+    A class for errors triggered by ERFA functions (status codes < 0)\n+\n+    Note: this class should *not* be referenced by fully-qualified name, because\n+    it may move to ERFA in a future version.  In a future such move it will\n+    still be imported here as an alias, but the true namespace of the class may\n+    change.\n+    \"\"\"\n+\n+\n+class ErfaWarning(UserWarning):\n+    \"\"\"\n+    A class for warnings triggered by ERFA functions (status codes > 0)\n+\n+    Note: this class should *not* be referenced by fully-qualified name, because\n+    it may move to ERFA in a future version.  In a future such move it will\n+    still be imported here as an alias, but the true namespace of the class may\n+    change.\n+    \"\"\"\n+\n+\n+# <---------------------------------Error-handling---------------------------->\n+\n+\n+STATUS_CODES = {}  # populated below before each function that returns an int\n+\n+# This is a hard-coded list of status codes that need to be remapped,\n+# such as to turn errors into warnings.\n+STATUS_CODES_REMAP = {\n+    'cal2jd': {-3: 3}\n+}\n+\n+\n+def check_errwarn(statcodes, func_name):\n+    if not np.any(statcodes):\n+        return\n+    # Remap any errors into warnings in the STATUS_CODES_REMAP dict.\n+    if func_name in STATUS_CODES_REMAP:\n+        for before, after in STATUS_CODES_REMAP[func_name].items():\n+            statcodes[statcodes == before] = after\n+            STATUS_CODES[func_name][after] = STATUS_CODES[func_name][before]\n+\n+    # Use non-zero to be able to index (need >=1-D for this to work).\n+    # Conveniently, this also gets rid of any masked elements.\n+    statcodes = np.atleast_1d(statcodes)\n+    erridx = (statcodes < 0).nonzero()\n+    if erridx[0].size > 0:\n+        # Errors present - only report the errors.\n+        errcodes, counts = np.unique(statcodes[erridx], return_counts=True)\n+        elsemsg = STATUS_CODES[func_name].get('else', None)\n+        msgs = [STATUS_CODES[func_name].get(e, elsemsg or f'Return code {e}')\n+                for e in errcodes]\n+        emsg = ', '.join([f'{c} of \"{msg}\"' for c, msg in zip(counts, msgs)])\n+        raise ErfaError(f'ERFA function \"{func_name}\" yielded {emsg}')\n+\n+    warnidx = (statcodes > 0).nonzero()\n+    if warnidx[0].size > 0:\n+        warncodes, counts = np.unique(statcodes[warnidx], return_counts=True)\n+        elsemsg = STATUS_CODES[func_name].get('else', None)\n+        msgs = [STATUS_CODES[func_name].get(w, elsemsg or f'Return code {w}')\n+                for w in warncodes]\n+        wmsg = ', '.join([f'{c} of \"{msg}\"' for c, msg in zip(counts, msgs)])\n+        warn(f'ERFA function \"{func_name}\" yielded {wmsg}', ErfaWarning)\n+\n+\n+# <------------------------structured dtype conversion------------------------>\n+\n+dt_bytes1 = np.dtype('S1')\n+dt_bytes12 = np.dtype('S12')\n+\n+# <--------------------------Actual ERFA-wrapping code------------------------>\n+\n+\n+DPI = (3.141592653589793238462643)\n+\"\"\"Pi\"\"\"\n+D2PI = (6.283185307179586476925287)\n+\"\"\"2Pi\"\"\"\n+DR2D = (57.29577951308232087679815)\n+\"\"\"Radians to degrees\"\"\"\n+DD2R = (1.745329251994329576923691e-2)\n+\"\"\"Degrees to radians\"\"\"\n+DR2AS = (206264.8062470963551564734)\n+\"\"\"Radians to arcseconds\"\"\"\n+DAS2R = (4.848136811095359935899141e-6)\n+\"\"\"Arcseconds to radians\"\"\"\n+DS2R = (7.272205216643039903848712e-5)\n+\"\"\"Seconds of time to radians\"\"\"\n+TURNAS = (1296000.0)\n+\"\"\"Arcseconds in a full circle\"\"\"\n+DMAS2R = (DAS2R / 1e3)\n+\"\"\"Milliarcseconds to radians\"\"\"\n+DTY = (365.242198781)\n+\"\"\"Length of tropical year B1900 (days)\"\"\"\n+DAYSEC = (86400.0)\n+\"\"\"Seconds per day.\"\"\"\n+DJY = (365.25)\n+\"\"\"Days per Julian year\"\"\"\n+DJC = (36525.0)\n+\"\"\"Days per Julian century\"\"\"\n+DJM = (365250.0)\n+\"\"\"Days per Julian millennium\"\"\"\n+DJ00 = (2451545.0)\n+\"\"\"Reference epoch (J2000.0), Julian Date\"\"\"\n+DJM0 = (2400000.5)\n+\"\"\"Julian Date of Modified Julian Date zero\"\"\"\n+DJM00 = (51544.5)\n+\"\"\"Reference epoch (J2000.0), Modified Julian Date\"\"\"\n+DJM77 = (43144.0)\n+\"\"\"1977 Jan 1.0 as MJD\"\"\"\n+TTMTAI = (32.184)\n+\"\"\"TT minus TAI (s)\"\"\"\n+DAU = (149597870.7e3)\n+\"\"\"Astronomical unit (m, IAU 2012)\"\"\"\n+CMPS = 299792458.0\n+\"\"\"Speed of light (m/s)\"\"\"\n+AULT = (DAU/CMPS)\n+\"\"\"Light time for 1 au (s)\"\"\"\n+DC = (DAYSEC/AULT)\n+\"\"\"Speed of light (au per day)\"\"\"\n+ELG = (6.969290134e-10)\n+\"\"\"L_G = 1 - d(TT)/d(TCG)\"\"\"\n+ELB = (1.550519768e-8)\n+\"\"\"L_B = 1 - d(TDB)/d(TCB), and TDB (s) at TAI 1977/1/1.0\"\"\"\n+TDB0 = (-6.55e-5)\n+\"\"\"L_B = 1 - d(TDB)/d(TCB), and TDB (s) at TAI 1977/1/1.0\"\"\"\n+SRS = 1.97412574336e-8\n+\"\"\"Schwarzschild radius of the Sun (au) = 2 * 1.32712440041e20 / (2.99792458e8)^2\n+/ 1.49597870700e11\"\"\"\n+WGS84 = 1\n+\"\"\"Reference ellipsoids\"\"\"\n+GRS80 = 2\n+\"\"\"Reference ellipsoids\"\"\"\n+WGS72 = 3\n+\"\"\"Reference ellipsoids\"\"\"\n+\n+\n+def cal2jd(iy, im, id):\n+    \"\"\"\n+    Gregorian Calendar to Julian Date.\n+\n+    Parameters\n+    ----------\n+    iy : int array\n+    im : int array\n+    id : int array\n+\n+    Returns\n+    -------\n+    djm0 : double array\n+    djm : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraCal2jd``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a C a l 2 j d\n+        - - - - - - - - - -\n+\n+        Gregorian Calendar to Julian Date.\n+\n+        Given:\n+           iy,im,id  int     year, month, day in Gregorian calendar (Note 1)\n+\n+        Returned:\n+           djm0      double  MJD zero-point: always 2400000.5\n+           djm       double  Modified Julian Date for 0 hrs\n+\n+        Returned (function value):\n+                     int     status:\n+                                 0 = OK\n+                                -1 = bad year   (Note 3: JD not computed)\n+                                -2 = bad month  (JD not computed)\n+                                -3 = bad day    (JD computed)\n+\n+        Notes:\n+\n+        1) The algorithm used is valid from -4800 March 1, but this\n+           implementation rejects dates before -4799 January 1.\n+\n+        2) The Julian Date is returned in two pieces, in the usual ERFA\n+           manner, which is designed to preserve time resolution.  The\n+           Julian Date is available as a single number by adding djm0 and\n+           djm.\n+\n+        3) In early eras the conversion is from the \"Proleptic Gregorian\n+           Calendar\";  no account is taken of the date(s) of adoption of\n+           the Gregorian Calendar, nor is the AD/BC numbering convention\n+           observed.\n+\n+        Reference:\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992),\n+           Section 12.92 (p604).\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    djm0, djm, c_retval = ufunc.cal2jd(iy, im, id)\n+    check_errwarn(c_retval, 'cal2jd')\n+    return djm0, djm\n+\n+\n+STATUS_CODES['cal2jd'] = {\n+    0: 'OK',\n+    -1: 'bad year   (Note 3: JD not computed)',\n+    -2: 'bad month  (JD not computed)',\n+    -3: 'bad day    (JD computed)',\n+}\n+\n+\n+def epb(dj1, dj2):\n+    \"\"\"\n+    Julian Date to Besselian Epoch.\n+\n+    Parameters\n+    ----------\n+    dj1 : double array\n+    dj2 : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEpb``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a E p b\n+        - - - - - - -\n+\n+        Julian Date to Besselian Epoch.\n+\n+        Given:\n+           dj1,dj2    double     Julian Date (Notes 3,4)\n+\n+        Returned (function value):\n+                      double     Besselian Epoch.\n+\n+        Notes:\n+\n+        1) Besselian Epoch is a method of expressing a moment in time as a\n+           year plus fraction.  It was superseded by Julian Year (see the\n+           function eraEpj).\n+\n+        2) The start of a Besselian year is when the right ascension of\n+           the fictitious mean Sun is 18h 40m, and the unit is the tropical\n+           year.  The conventional definition (see Lieske 1979) is that\n+           Besselian Epoch B1900.0 is JD 2415020.31352 and the length of the\n+           year is 365.242198781 days.\n+\n+        3) The time scale for the JD, originally Ephemeris Time, is TDB,\n+           which for all practical purposes in the present context is\n+           indistinguishable from TT.\n+\n+        4) The Julian Date is supplied in two pieces, in the usual ERFA\n+           manner, which is designed to preserve time resolution.  The\n+           Julian Date is available as a single number by adding dj1 and\n+           dj2.  The maximum resolution is achieved if dj1 is 2451545.0\n+           (J2000.0).\n+\n+        Reference:\n+\n+           Lieske, J.H., 1979. Astron.Astrophys., 73, 282.\n+\n+        This revision:  2023 May 5\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.epb(dj1, dj2)\n+    return c_retval\n+\n+\n+def epb2jd(epb):\n+    \"\"\"\n+    Besselian Epoch to Julian Date.\n+\n+    Parameters\n+    ----------\n+    epb : double array\n+\n+    Returns\n+    -------\n+    djm0 : double array\n+    djm : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEpb2jd``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a E p b 2 j d\n+        - - - - - - - - - -\n+\n+        Besselian Epoch to Julian Date.\n+\n+        Given:\n+           epb      double    Besselian Epoch (e.g. 1957.3)\n+\n+        Returned:\n+           djm0     double    MJD zero-point: always 2400000.5\n+           djm      double    Modified Julian Date\n+\n+        Note:\n+\n+           The Julian Date is returned in two pieces, in the usual ERFA\n+           manner, which is designed to preserve time resolution.  The\n+           Julian Date is available as a single number by adding djm0 and\n+           djm.\n+\n+        Reference:\n+\n+           Lieske, J.H., 1979, Astron.Astrophys. 73, 282.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    djm0, djm = ufunc.epb2jd(epb)\n+    return djm0, djm\n+\n+\n+def epj(dj1, dj2):\n+    \"\"\"\n+    Julian Date to Julian Epoch.\n+\n+    Parameters\n+    ----------\n+    dj1 : double array\n+    dj2 : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEpj``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a E p j\n+        - - - - - - -\n+\n+        Julian Date to Julian Epoch.\n+\n+        Given:\n+           dj1,dj2    double     Julian Date (Note 4)\n+\n+        Returned (function value):\n+                      double     Julian Epoch\n+\n+        Notes:\n+\n+        1) Julian Epoch is a method of expressing a moment in time as a\n+           year plus fraction.\n+\n+        2) Julian Epoch J2000.0 is 2000 Jan 1.5, and the length of the year\n+           is 365.25 days.\n+\n+        3) For historical reasons, the time scale formally associated with\n+           Julian Epoch is TDB (or TT, near enough).  However, Julian Epoch\n+           can be used more generally as a calendrical convention to\n+           represent other time scales such as TAI and TCB.  This is\n+           analogous to Julian Date, which was originally defined\n+           specifically as a way of representing Universal Times but is now\n+           routinely used for any of the regular time scales.\n+\n+        4) The Julian Date is supplied in two pieces, in the usual ERFA\n+           manner, which is designed to preserve time resolution.  The\n+           Julian Date is available as a single number by adding dj1 and\n+           dj2.  The maximum resolution is achieved if dj1 is 2451545.0\n+           (J2000.0).\n+\n+        Reference:\n+\n+           Lieske, J.H., 1979, Astron.Astrophys. 73, 282.\n+\n+        This revision:  2022 May 6\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.epj(dj1, dj2)\n+    return c_retval\n+\n+\n+def epj2jd(epj):\n+    \"\"\"\n+    Julian Epoch to Julian Date.\n+\n+    Parameters\n+    ----------\n+    epj : double array\n+\n+    Returns\n+    -------\n+    djm0 : double array\n+    djm : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEpj2jd``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a E p j 2 j d\n+        - - - - - - - - - -\n+\n+        Julian Epoch to Julian Date.\n+\n+        Given:\n+           epj      double    Julian Epoch (e.g. 1996.8)\n+\n+        Returned:\n+           djm0     double    MJD zero-point: always 2400000.5\n+           djm      double    Modified Julian Date\n+\n+        Note:\n+\n+           The Julian Date is returned in two pieces, in the usual ERFA\n+           manner, which is designed to preserve time resolution.  The\n+           Julian Date is available as a single number by adding djm0 and\n+           djm.\n+\n+        Reference:\n+\n+           Lieske, J.H., 1979, Astron.Astrophys. 73, 282.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    djm0, djm = ufunc.epj2jd(epj)\n+    return djm0, djm\n+\n+\n+def jd2cal(dj1, dj2):\n+    \"\"\"\n+    Julian Date to Gregorian year, month, day, and fraction of a day.\n+\n+    Parameters\n+    ----------\n+    dj1 : double array\n+    dj2 : double array\n+\n+    Returns\n+    -------\n+    iy : int array\n+    im : int array\n+    id : int array\n+    fd : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraJd2cal``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a J d 2 c a l\n+        - - - - - - - - - -\n+\n+        Julian Date to Gregorian year, month, day, and fraction of a day.\n+\n+        Given:\n+           dj1,dj2   double   Julian Date (Notes 1, 2)\n+\n+        Returned (arguments):\n+           iy        int      year\n+           im        int      month\n+           id        int      day\n+           fd        double   fraction of day\n+\n+        Returned (function value):\n+                     int      status:\n+                                 0 = OK\n+                                -1 = unacceptable date (Note 1)\n+\n+        Notes:\n+\n+        1) The earliest valid date is -68569.5 (-4900 March 1).  The\n+           largest value accepted is 1e9.\n+\n+        2) The Julian Date is apportioned in any convenient way between\n+           the arguments dj1 and dj2.  For example, JD=2450123.7 could\n+           be expressed in any of these ways, among others:\n+\n+                  dj1             dj2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           Separating integer and fraction uses the \"compensated summation\"\n+           algorithm of Kahan-Neumaier to preserve as much precision as\n+           possible irrespective of the jd1+jd2 apportionment.\n+\n+        3) In early eras the conversion is from the \"proleptic Gregorian\n+           calendar\";  no account is taken of the date(s) of adoption of\n+           the Gregorian calendar, nor is the AD/BC numbering convention\n+           observed.\n+\n+        References:\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992),\n+           Section 12.92 (p604).\n+\n+           Klein, A., A Generalized Kahan-Babuska-Summation-Algorithm.\n+           Computing, 76, 279-293 (2006), Section 3.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    iy, im, id, fd, c_retval = ufunc.jd2cal(dj1, dj2)\n+    check_errwarn(c_retval, 'jd2cal')\n+    return iy, im, id, fd\n+\n+\n+STATUS_CODES['jd2cal'] = {\n+    0: 'OK',\n+    -1: 'unacceptable date (Note 1)',\n+}\n+\n+\n+def jdcalf(ndp, dj1, dj2):\n+    \"\"\"\n+    Julian Date to Gregorian Calendar, expressed in a form convenient\n+    for formatting messages:  rounded to a specified precision.\n+\n+    Parameters\n+    ----------\n+    ndp : int array\n+    dj1 : double array\n+    dj2 : double array\n+\n+    Returns\n+    -------\n+    iymdf : int array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraJdcalf``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a J d c a l f\n+        - - - - - - - - - -\n+\n+        Julian Date to Gregorian Calendar, expressed in a form convenient\n+        for formatting messages:  rounded to a specified precision.\n+\n+        Given:\n+           ndp       int      number of decimal places of days in fraction\n+           dj1,dj2   double   dj1+dj2 = Julian Date (Note 1)\n+\n+        Returned:\n+           iymdf     int[4]   year, month, day, fraction in Gregorian\n+                              calendar\n+\n+        Returned (function value):\n+                     int      status:\n+                                -1 = date out of range\n+                                 0 = OK\n+                                +1 = ndp not 0-9 (interpreted as 0)\n+\n+        Notes:\n+\n+        1) The Julian Date is apportioned in any convenient way between\n+           the arguments dj1 and dj2.  For example, JD=2450123.7 could\n+           be expressed in any of these ways, among others:\n+\n+                   dj1            dj2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+        2) In early eras the conversion is from the \"Proleptic Gregorian\n+           Calendar\";  no account is taken of the date(s) of adoption of\n+           the Gregorian Calendar, nor is the AD/BC numbering convention\n+           observed.\n+\n+        3) See also the function eraJd2cal.\n+\n+        4) The number of decimal places ndp should be 4 or less if internal\n+           overflows are to be avoided on platforms which use 16-bit\n+           integers.\n+\n+        Called:\n+           eraJd2cal    JD to Gregorian calendar\n+\n+        Reference:\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992),\n+           Section 12.92 (p604).\n+\n+        This revision:  2023 January 16\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    iymdf, c_retval = ufunc.jdcalf(ndp, dj1, dj2)\n+    check_errwarn(c_retval, 'jdcalf')\n+    return iymdf\n+\n+\n+STATUS_CODES['jdcalf'] = {\n+    -1: 'date out of range',\n+    0: 'OK',\n+    1: 'ndp not 0-9 (interpreted as 0)',\n+}\n+\n+\n+def ab(pnat, v, s, bm1):\n+    \"\"\"\n+    Apply aberration to transform natural direction into proper\n+    direction.\n+\n+    Parameters\n+    ----------\n+    pnat : double array\n+    v : double array\n+    s : double array\n+    bm1 : double array\n+\n+    Returns\n+    -------\n+    ppr : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAb``. The ERFA documentation is::\n+\n+        - - - - - -\n+         e r a A b\n+        - - - - - -\n+\n+        Apply aberration to transform natural direction into proper\n+        direction.\n+\n+        Given:\n+          pnat    double[3]   natural direction to the source (unit vector)\n+          v       double[3]   observer barycentric velocity in units of c\n+          s       double      distance between the Sun and the observer (au)\n+          bm1     double      sqrt(1-|v|^2): reciprocal of Lorenz factor\n+\n+        Returned:\n+          ppr     double[3]   proper direction to source (unit vector)\n+\n+        Notes:\n+\n+        1) The algorithm is based on Expr. (7.40) in the Explanatory\n+           Supplement (Urban & Seidelmann 2013), but with the following\n+           changes:\n+\n+           o  Rigorous rather than approximate normalization is applied.\n+\n+           o  The gravitational potential term from Expr. (7) in\n+              Klioner (2003) is added, taking into account only the Sun's\n+              contribution.  This has a maximum effect of about\n+              0.4 microarcsecond.\n+\n+        2) In almost all cases, the maximum accuracy will be limited by the\n+           supplied velocity.  For example, if the ERFA eraEpv00 function is\n+           used, errors of up to 5 microarcseconds could occur.\n+\n+        References:\n+\n+           Urban, S. & Seidelmann, P. K. (eds), Explanatory Supplement to\n+           the Astronomical Almanac, 3rd ed., University Science Books\n+           (2013).\n+\n+           Klioner, Sergei A., \"A practical relativistic model for micro-\n+           arcsecond astrometry in space\", Astr. J. 125, 1580-1597 (2003).\n+\n+        Called:\n+           eraPdp       scalar product of two p-vectors\n+\n+        This revision:   2021 February 24\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    ppr = ufunc.ab(pnat, v, s, bm1)\n+    return ppr\n+\n+\n+def apcg(date1, date2, ebpv, ehp):\n+    \"\"\"\n+    For a geocentric observer, prepare star-independent astrometry\n+    parameters for transformations between ICRS and GCRS coordinates.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+    ebpv : double array\n+    ehp : double array\n+\n+    Returns\n+    -------\n+    astrom : eraASTROM array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraApcg``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a A p c g\n+        - - - - - - - -\n+\n+        For a geocentric observer, prepare star-independent astrometry\n+        parameters for transformations between ICRS and GCRS coordinates.\n+        The Earth ephemeris is supplied by the caller.\n+\n+        The parameters produced by this function are required in the\n+        parallax, light deflection and aberration parts of the astrometric\n+        transformation chain.\n+\n+        Given:\n+           date1  double       TDB as a 2-part...\n+           date2  double       ...Julian Date (Note 1)\n+           ebpv   double[2][3] Earth barycentric pos/vel (au, au/day)\n+           ehp    double[3]    Earth heliocentric position (au)\n+\n+        Returned:\n+           astrom eraASTROM         star-independent astrometry parameters:\n+            pmt    double       PM time interval (SSB, Julian years)\n+            eb     double[3]    SSB to observer (vector, au)\n+            eh     double[3]    Sun to observer (unit vector)\n+            em     double       distance from Sun to observer (au)\n+            v      double[3]    barycentric observer velocity (vector, c)\n+            bm1    double       sqrt(1-|v|^2): reciprocal of Lorenz factor\n+            bpn    double[3][3] bias-precession-nutation matrix\n+            along  double       unchanged\n+            xpl    double       unchanged\n+            ypl    double       unchanged\n+            sphi   double       unchanged\n+            cphi   double       unchanged\n+            diurab double       unchanged\n+            eral   double       unchanged\n+            refa   double       unchanged\n+            refb   double       unchanged\n+\n+        Notes:\n+\n+        1) The TDB date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TDB)=2450123.7 could be expressed in any of these ways, among\n+           others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 method is best matched to the way the\n+           argument is handled internally and will deliver the optimum\n+           resolution.  The MJD method and the date & time methods are both\n+           good compromises between resolution and convenience.  For most\n+           applications of this function the choice will not be at all\n+           critical.\n+\n+           TT can be used instead of TDB without any significant impact on\n+           accuracy.\n+\n+        2) All the vectors are with respect to BCRS axes.\n+\n+        3) This is one of several functions that inserts into the astrom\n+           structure star-independent parameters needed for the chain of\n+           astrometric transformations ICRS <-> GCRS <-> CIRS <-> observed.\n+\n+           The various functions support different classes of observer and\n+           portions of the transformation chain:\n+\n+                functions         observer        transformation\n+\n+             eraApcg eraApcg13    geocentric      ICRS <-> GCRS\n+             eraApci eraApci13    terrestrial     ICRS <-> CIRS\n+             eraApco eraApco13    terrestrial     ICRS <-> observed\n+             eraApcs eraApcs13    space           ICRS <-> GCRS\n+             eraAper eraAper13    terrestrial     update Earth rotation\n+             eraApio eraApio13    terrestrial     CIRS <-> observed\n+\n+           Those with names ending in \"13\" use contemporary ERFA models to\n+           compute the various ephemerides.  The others accept ephemerides\n+           supplied by the caller.\n+\n+           The transformation from ICRS to GCRS covers space motion,\n+           parallax, light deflection, and aberration.  From GCRS to CIRS\n+           comprises frame bias and precession-nutation.  From CIRS to\n+           observed takes account of Earth rotation, polar motion, diurnal\n+           aberration and parallax (unless subsumed into the ICRS <-> GCRS\n+           transformation), and atmospheric refraction.\n+\n+        4) The context structure astrom produced by this function is used by\n+           eraAtciq* and eraAticq*.\n+\n+        Called:\n+           eraApcs      astrometry parameters, ICRS-GCRS, space observer\n+\n+        This revision:   2013 October 9\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    astrom = ufunc.apcg(date1, date2, ebpv, ehp)\n+    return astrom\n+\n+\n+def apcg13(date1, date2):\n+    \"\"\"\n+    For a geocentric observer, prepare star-independent astrometry\n+    parameters for transformations between ICRS and GCRS coordinates.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    astrom : eraASTROM array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraApcg13``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a A p c g 1 3\n+        - - - - - - - - - -\n+\n+        For a geocentric observer, prepare star-independent astrometry\n+        parameters for transformations between ICRS and GCRS coordinates.\n+        The caller supplies the date, and ERFA models are used to predict\n+        the Earth ephemeris.\n+\n+        The parameters produced by this function are required in the\n+        parallax, light deflection and aberration parts of the astrometric\n+        transformation chain.\n+\n+        Given:\n+           date1  double     TDB as a 2-part...\n+           date2  double     ...Julian Date (Note 1)\n+\n+        Returned:\n+           astrom eraASTROM* star-independent astrometry parameters:\n+            pmt    double       PM time interval (SSB, Julian years)\n+            eb     double[3]    SSB to observer (vector, au)\n+            eh     double[3]    Sun to observer (unit vector)\n+            em     double       distance from Sun to observer (au)\n+            v      double[3]    barycentric observer velocity (vector, c)\n+            bm1    double       sqrt(1-|v|^2): reciprocal of Lorenz factor\n+            bpn    double[3][3] bias-precession-nutation matrix\n+            along  double       unchanged\n+            xpl    double       unchanged\n+            ypl    double       unchanged\n+            sphi   double       unchanged\n+            cphi   double       unchanged\n+            diurab double       unchanged\n+            eral   double       unchanged\n+            refa   double       unchanged\n+            refb   double       unchanged\n+\n+        Notes:\n+\n+        1) The TDB date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TDB)=2450123.7 could be expressed in any of these ways, among\n+           others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 method is best matched to the way the\n+           argument is handled internally and will deliver the optimum\n+           resolution.  The MJD method and the date & time methods are both\n+           good compromises between resolution and convenience.  For most\n+           applications of this function the choice will not be at all\n+           critical.\n+\n+           TT can be used instead of TDB without any significant impact on\n+           accuracy.\n+\n+        2) All the vectors are with respect to BCRS axes.\n+\n+        3) In cases where the caller wishes to supply his own Earth\n+           ephemeris, the function eraApcg can be used instead of the present\n+           function.\n+\n+        4) This is one of several functions that inserts into the astrom\n+           structure star-independent parameters needed for the chain of\n+           astrometric transformations ICRS <-> GCRS <-> CIRS <-> observed.\n+\n+           The various functions support different classes of observer and\n+           portions of the transformation chain:\n+\n+                functions         observer        transformation\n+\n+             eraApcg eraApcg13    geocentric      ICRS <-> GCRS\n+             eraApci eraApci13    terrestrial     ICRS <-> CIRS\n+             eraApco eraApco13    terrestrial     ICRS <-> observed\n+             eraApcs eraApcs13    space           ICRS <-> GCRS\n+             eraAper eraAper13    terrestrial     update Earth rotation\n+             eraApio eraApio13    terrestrial     CIRS <-> observed\n+\n+           Those with names ending in \"13\" use contemporary ERFA models to\n+           compute the various ephemerides.  The others accept ephemerides\n+           supplied by the caller.\n+\n+           The transformation from ICRS to GCRS covers space motion,\n+           parallax, light deflection, and aberration.  From GCRS to CIRS\n+           comprises frame bias and precession-nutation.  From CIRS to\n+           observed takes account of Earth rotation, polar motion, diurnal\n+           aberration and parallax (unless subsumed into the ICRS <-> GCRS\n+           transformation), and atmospheric refraction.\n+\n+        5) The context structure astrom produced by this function is used by\n+           eraAtciq* and eraAticq*.\n+\n+        Called:\n+           eraEpv00     Earth position and velocity\n+           eraApcg      astrometry parameters, ICRS-GCRS, geocenter\n+\n+        This revision:   2013 October 9\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    astrom = ufunc.apcg13(date1, date2)\n+    return astrom\n+\n+\n+def apci(date1, date2, ebpv, ehp, x, y, s):\n+    \"\"\"\n+    For a terrestrial observer, prepare star-independent astrometry\n+    parameters for transformations between ICRS and geocentric CIRS\n+    coordinates.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+    ebpv : double array\n+    ehp : double array\n+    x : double array\n+    y : double array\n+    s : double array\n+\n+    Returns\n+    -------\n+    astrom : eraASTROM array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraApci``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a A p c i\n+        - - - - - - - -\n+\n+        For a terrestrial observer, prepare star-independent astrometry\n+        parameters for transformations between ICRS and geocentric CIRS\n+        coordinates.  The Earth ephemeris and CIP/CIO are supplied by the\n+        caller.\n+\n+        The parameters produced by this function are required in the\n+        parallax, light deflection, aberration, and bias-precession-nutation\n+        parts of the astrometric transformation chain.\n+\n+        Given:\n+           date1  double       TDB as a 2-part...\n+           date2  double       ...Julian Date (Note 1)\n+           ebpv   double[2][3] Earth barycentric position/velocity (au, au/day)\n+           ehp    double[3]    Earth heliocentric position (au)\n+           x,y    double       CIP X,Y (components of unit vector)\n+           s      double       the CIO locator s (radians)\n+\n+        Returned:\n+           astrom eraASTROM         star-independent astrometry parameters:\n+            pmt    double       PM time interval (SSB, Julian years)\n+            eb     double[3]    SSB to observer (vector, au)\n+            eh     double[3]    Sun to observer (unit vector)\n+            em     double       distance from Sun to observer (au)\n+            v      double[3]    barycentric observer velocity (vector, c)\n+            bm1    double       sqrt(1-|v|^2): reciprocal of Lorenz factor\n+            bpn    double[3][3] bias-precession-nutation matrix\n+            along  double       unchanged\n+            xpl    double       unchanged\n+            ypl    double       unchanged\n+            sphi   double       unchanged\n+            cphi   double       unchanged\n+            diurab double       unchanged\n+            eral   double       unchanged\n+            refa   double       unchanged\n+            refb   double       unchanged\n+\n+        Notes:\n+\n+        1) The TDB date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TDB)=2450123.7 could be expressed in any of these ways, among\n+           others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 method is best matched to the way the\n+           argument is handled internally and will deliver the optimum\n+           resolution.  The MJD method and the date & time methods are both\n+           good compromises between resolution and convenience.  For most\n+           applications of this function the choice will not be at all\n+           critical.\n+\n+           TT can be used instead of TDB without any significant impact on\n+           accuracy.\n+\n+        2) All the vectors are with respect to BCRS axes.\n+\n+        3) In cases where the caller does not wish to provide the Earth\n+           ephemeris and CIP/CIO, the function eraApci13 can be used instead\n+           of the present function.  This computes the required quantities\n+           using other ERFA functions.\n+\n+        4) This is one of several functions that inserts into the astrom\n+           structure star-independent parameters needed for the chain of\n+           astrometric transformations ICRS <-> GCRS <-> CIRS <-> observed.\n+\n+           The various functions support different classes of observer and\n+           portions of the transformation chain:\n+\n+                functions         observer        transformation\n+\n+             eraApcg eraApcg13    geocentric      ICRS <-> GCRS\n+             eraApci eraApci13    terrestrial     ICRS <-> CIRS\n+             eraApco eraApco13    terrestrial     ICRS <-> observed\n+             eraApcs eraApcs13    space           ICRS <-> GCRS\n+             eraAper eraAper13    terrestrial     update Earth rotation\n+             eraApio eraApio13    terrestrial     CIRS <-> observed\n+\n+           Those with names ending in \"13\" use contemporary ERFA models to\n+           compute the various ephemerides.  The others accept ephemerides\n+           supplied by the caller.\n+\n+           The transformation from ICRS to GCRS covers space motion,\n+           parallax, light deflection, and aberration.  From GCRS to CIRS\n+           comprises frame bias and precession-nutation.  From CIRS to\n+           observed takes account of Earth rotation, polar motion, diurnal\n+           aberration and parallax (unless subsumed into the ICRS <-> GCRS\n+           transformation), and atmospheric refraction.\n+\n+        5) The context structure astrom produced by this function is used by\n+           eraAtciq* and eraAticq*.\n+\n+        Called:\n+           eraApcg      astrometry parameters, ICRS-GCRS, geocenter\n+           eraC2ixys    celestial-to-intermediate matrix, given X,Y and s\n+\n+        This revision:   2013 September 25\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    astrom = ufunc.apci(date1, date2, ebpv, ehp, x, y, s)\n+    return astrom\n+\n+\n+def apci13(date1, date2):\n+    \"\"\"\n+    For a terrestrial observer, prepare star-independent astrometry\n+    parameters for transformations between ICRS and geocentric CIRS\n+    coordinates.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    astrom : eraASTROM array\n+    eo : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraApci13``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a A p c i 1 3\n+        - - - - - - - - - -\n+\n+        For a terrestrial observer, prepare star-independent astrometry\n+        parameters for transformations between ICRS and geocentric CIRS\n+        coordinates.  The caller supplies the date, and ERFA models are used\n+        to predict the Earth ephemeris and CIP/CIO.\n+\n+        The parameters produced by this function are required in the\n+        parallax, light deflection, aberration, and bias-precession-nutation\n+        parts of the astrometric transformation chain.\n+\n+        Given:\n+           date1  double      TDB as a 2-part...\n+           date2  double      ...Julian Date (Note 1)\n+\n+        Returned:\n+           astrom eraASTROM        star-independent astrometry parameters:\n+            pmt    double       PM time interval (SSB, Julian years)\n+            eb     double[3]    SSB to observer (vector, au)\n+            eh     double[3]    Sun to observer (unit vector)\n+            em     double       distance from Sun to observer (au)\n+            v      double[3]    barycentric observer velocity (vector, c)\n+            bm1    double       sqrt(1-|v|^2): reciprocal of Lorenz factor\n+            bpn    double[3][3] bias-precession-nutation matrix\n+            along  double       unchanged\n+            xpl    double       unchanged\n+            ypl    double       unchanged\n+            sphi   double       unchanged\n+            cphi   double       unchanged\n+            diurab double       unchanged\n+            eral   double       unchanged\n+            refa   double       unchanged\n+            refb   double       unchanged\n+           eo     double           equation of the origins (ERA-GST, radians)\n+\n+        Notes:\n+\n+        1) The TDB date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TDB)=2450123.7 could be expressed in any of these ways, among\n+           others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 method is best matched to the way the\n+           argument is handled internally and will deliver the optimum\n+           resolution.  The MJD method and the date & time methods are both\n+           good compromises between resolution and convenience.  For most\n+           applications of this function the choice will not be at all\n+           critical.\n+\n+           TT can be used instead of TDB without any significant impact on\n+           accuracy.\n+\n+        2) All the vectors are with respect to BCRS axes.\n+\n+        3) In cases where the caller wishes to supply his own Earth\n+           ephemeris and CIP/CIO, the function eraApci can be used instead\n+           of the present function.\n+\n+        4) This is one of several functions that inserts into the astrom\n+           structure star-independent parameters needed for the chain of\n+           astrometric transformations ICRS <-> GCRS <-> CIRS <-> observed.\n+\n+           The various functions support different classes of observer and\n+           portions of the transformation chain:\n+\n+                functions         observer        transformation\n+\n+             eraApcg eraApcg13    geocentric      ICRS <-> GCRS\n+             eraApci eraApci13    terrestrial     ICRS <-> CIRS\n+             eraApco eraApco13    terrestrial     ICRS <-> observed\n+             eraApcs eraApcs13    space           ICRS <-> GCRS\n+             eraAper eraAper13    terrestrial     update Earth rotation\n+             eraApio eraApio13    terrestrial     CIRS <-> observed\n+\n+           Those with names ending in \"13\" use contemporary ERFA models to\n+           compute the various ephemerides.  The others accept ephemerides\n+           supplied by the caller.\n+\n+           The transformation from ICRS to GCRS covers space motion,\n+           parallax, light deflection, and aberration.  From GCRS to CIRS\n+           comprises frame bias and precession-nutation.  From CIRS to\n+           observed takes account of Earth rotation, polar motion, diurnal\n+           aberration and parallax (unless subsumed into the ICRS <-> GCRS\n+           transformation), and atmospheric refraction.\n+\n+        5) The context structure astrom produced by this function is used by\n+           eraAtciq* and eraAticq*.\n+\n+        Called:\n+           eraEpv00     Earth position and velocity\n+           eraPnm06a    classical NPB matrix, IAU 2006/2000A\n+           eraBpn2xy    extract CIP X,Y coordinates from NPB matrix\n+           eraS06       the CIO locator s, given X,Y, IAU 2006\n+           eraApci      astrometry parameters, ICRS-CIRS\n+           eraEors      equation of the origins, given NPB matrix and s\n+\n+        This revision:   2022 May 3\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    astrom, eo = ufunc.apci13(date1, date2)\n+    return astrom, eo\n+\n+\n+def apco(date1, date2, ebpv, ehp, x, y, s, theta, elong, phi, hm, xp, yp, sp, refa, refb):\n+    \"\"\"\n+    For a terrestrial observer, prepare star-independent astrometry\n+    parameters for transformations between ICRS and observed\n+    coordinates.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+    ebpv : double array\n+    ehp : double array\n+    x : double array\n+    y : double array\n+    s : double array\n+    theta : double array\n+    elong : double array\n+    phi : double array\n+    hm : double array\n+    xp : double array\n+    yp : double array\n+    sp : double array\n+    refa : double array\n+    refb : double array\n+\n+    Returns\n+    -------\n+    astrom : eraASTROM array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraApco``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a A p c o\n+        - - - - - - - -\n+\n+        For a terrestrial observer, prepare star-independent astrometry\n+        parameters for transformations between ICRS and observed\n+        coordinates.  The caller supplies the Earth ephemeris, the Earth\n+        rotation information and the refraction constants as well as the\n+        site coordinates.\n+\n+        Given:\n+           date1  double       TDB as a 2-part...\n+           date2  double       ...Julian Date (Note 1)\n+           ebpv   double[2][3] Earth barycentric PV (au, au/day, Note 2)\n+           ehp    double[3]    Earth heliocentric P (au, Note 2)\n+           x,y    double       CIP X,Y (components of unit vector)\n+           s      double       the CIO locator s (radians)\n+           theta  double       Earth rotation angle (radians)\n+           elong  double       longitude (radians, east +ve, Note 3)\n+           phi    double       latitude (geodetic, radians, Note 3)\n+           hm     double       height above ellipsoid (m, geodetic, Note 3)\n+           xp,yp  double       polar motion coordinates (radians, Note 4)\n+           sp     double       the TIO locator s' (radians, Note 4)\n+           refa   double       refraction constant A (radians, Note 5)\n+           refb   double       refraction constant B (radians, Note 5)\n+\n+        Returned:\n+           astrom eraASTROM         star-independent astrometry parameters:\n+            pmt    double       PM time interval (SSB, Julian years)\n+            eb     double[3]    SSB to observer (vector, au)\n+            eh     double[3]    Sun to observer (unit vector)\n+            em     double       distance from Sun to observer (au)\n+            v      double[3]    barycentric observer velocity (vector, c)\n+            bm1    double       sqrt(1-|v|^2): reciprocal of Lorenz factor\n+            bpn    double[3][3] bias-precession-nutation matrix\n+            along  double       adjusted longitude (radians)\n+            xpl    double       polar motion xp wrt local meridian (radians)\n+            ypl    double       polar motion yp wrt local meridian (radians)\n+            sphi   double       sine of geodetic latitude\n+            cphi   double       cosine of geodetic latitude\n+            diurab double       magnitude of diurnal aberration vector\n+            eral   double       \"local\" Earth rotation angle (radians)\n+            refa   double       refraction constant A (radians)\n+            refb   double       refraction constant B (radians)\n+\n+        Notes:\n+\n+        1) The TDB date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TDB)=2450123.7 could be expressed in any of these ways, among\n+           others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 method is best matched to the way the\n+           argument is handled internally and will deliver the optimum\n+           resolution.  The MJD method and the date & time methods are both\n+           good compromises between resolution and convenience.  For most\n+           applications of this function the choice will not be at all\n+           critical.\n+\n+           TT can be used instead of TDB without any significant impact on\n+           accuracy.\n+\n+        2) The vectors eb, eh, and all the astrom vectors, are with respect\n+           to BCRS axes.\n+\n+        3) The geographical coordinates are with respect to the ERFA_WGS84\n+           reference ellipsoid.  TAKE CARE WITH THE LONGITUDE SIGN\n+           CONVENTION:  the longitude required by the present function is\n+           right-handed, i.e. east-positive, in accordance with geographical\n+           convention.\n+\n+           The adjusted longitude stored in the astrom array takes into\n+           account the TIO locator and polar motion.\n+\n+        4) xp and yp are the coordinates (in radians) of the Celestial\n+           Intermediate Pole with respect to the International Terrestrial\n+           Reference System (see IERS Conventions), measured along the\n+           meridians 0 and 90 deg west respectively.  sp is the TIO locator\n+           s', in radians, which positions the Terrestrial Intermediate\n+           Origin on the equator.  For many applications, xp, yp and\n+           (especially) sp can be set to zero.\n+\n+           Internally, the polar motion is stored in a form rotated onto the\n+           local meridian.\n+\n+        5) The refraction constants refa and refb are for use in a\n+           dZ = A*tan(Z)+B*tan^3(Z) model, where Z is the observed\n+           (i.e. refracted) zenith distance and dZ is the amount of\n+           refraction.\n+\n+        6) It is advisable to take great care with units, as even unlikely\n+           values of the input parameters are accepted and processed in\n+           accordance with the models used.\n+\n+        7) In cases where the caller does not wish to provide the Earth\n+           Ephemeris, the Earth rotation information and refraction\n+           constants, the function eraApco13 can be used instead of the\n+           present function.  This starts from UTC and weather readings etc.\n+           and computes suitable values using other ERFA functions.\n+\n+        8) This is one of several functions that inserts into the astrom\n+           structure star-independent parameters needed for the chain of\n+           astrometric transformations ICRS <-> GCRS <-> CIRS <-> observed.\n+\n+           The various functions support different classes of observer and\n+           portions of the transformation chain:\n+\n+                functions         observer        transformation\n+\n+             eraApcg eraApcg13    geocentric      ICRS <-> GCRS\n+             eraApci eraApci13    terrestrial     ICRS <-> CIRS\n+             eraApco eraApco13    terrestrial     ICRS <-> observed\n+             eraApcs eraApcs13    space           ICRS <-> GCRS\n+             eraAper eraAper13    terrestrial     update Earth rotation\n+             eraApio eraApio13    terrestrial     CIRS <-> observed\n+\n+           Those with names ending in \"13\" use contemporary ERFA models to\n+           compute the various ephemerides.  The others accept ephemerides\n+           supplied by the caller.\n+\n+           The transformation from ICRS to GCRS covers space motion,\n+           parallax, light deflection, and aberration.  From GCRS to CIRS\n+           comprises frame bias and precession-nutation.  From CIRS to\n+           observed takes account of Earth rotation, polar motion, diurnal\n+           aberration and parallax (unless subsumed into the ICRS <-> GCRS\n+           transformation), and atmospheric refraction.\n+\n+        9) The context structure astrom produced by this function is used by\n+           eraAtioq, eraAtoiq, eraAtciq* and eraAticq*.\n+\n+        Called:\n+           eraIr        initialize r-matrix to identity\n+           eraRz        rotate around Z-axis\n+           eraRy        rotate around Y-axis\n+           eraRx        rotate around X-axis\n+           eraAnpm      normalize angle into range +/- pi\n+           eraC2ixys    celestial-to-intermediate matrix, given X,Y and s\n+           eraPvtob     position/velocity of terrestrial station\n+           eraTrxpv     product of transpose of r-matrix and pv-vector\n+           eraApcs      astrometry parameters, ICRS-GCRS, space observer\n+           eraCr        copy r-matrix\n+\n+        This revision:   2021 February 24\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    astrom = ufunc.apco(\n+        date1, date2, ebpv, ehp, x, y, s, theta, elong, phi, hm, xp, yp, sp, refa, refb)\n+    return astrom\n+\n+\n+def apco13(utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl):\n+    \"\"\"\n+    For a terrestrial observer, prepare star-independent astrometry\n+    parameters for transformations between ICRS and observed\n+    coordinates.\n+\n+    Parameters\n+    ----------\n+    utc1 : double array\n+    utc2 : double array\n+    dut1 : double array\n+    elong : double array\n+    phi : double array\n+    hm : double array\n+    xp : double array\n+    yp : double array\n+    phpa : double array\n+    tc : double array\n+    rh : double array\n+    wl : double array\n+\n+    Returns\n+    -------\n+    astrom : eraASTROM array\n+    eo : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraApco13``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a A p c o 1 3\n+        - - - - - - - - - -\n+\n+        For a terrestrial observer, prepare star-independent astrometry\n+        parameters for transformations between ICRS and observed\n+        coordinates.  The caller supplies UTC, site coordinates, ambient air\n+        conditions and observing wavelength, and ERFA models are used to\n+        obtain the Earth ephemeris, CIP/CIO and refraction constants.\n+\n+        The parameters produced by this function are required in the\n+        parallax, light deflection, aberration, and bias-precession-nutation\n+        parts of the ICRS/CIRS transformations.\n+\n+        Given:\n+           utc1   double     UTC as a 2-part...\n+           utc2   double     ...quasi Julian Date (Notes 1,2)\n+           dut1   double     UT1-UTC (seconds, Note 3)\n+           elong  double     longitude (radians, east +ve, Note 4)\n+           phi    double     latitude (geodetic, radians, Note 4)\n+           hm     double     height above ellipsoid (m, geodetic, Notes 4,6)\n+           xp,yp  double     polar motion coordinates (radians, Note 5)\n+           phpa   double     pressure at the observer (hPa = mB, Note 6)\n+           tc     double     ambient temperature at the observer (deg C)\n+           rh     double     relative humidity at the observer (range 0-1)\n+           wl     double     wavelength (micrometers, Note 7)\n+\n+        Returned:\n+           astrom eraASTROM* star-independent astrometry parameters:\n+            pmt    double       PM time interval (SSB, Julian years)\n+            eb     double[3]    SSB to observer (vector, au)\n+            eh     double[3]    Sun to observer (unit vector)\n+            em     double       distance from Sun to observer (au)\n+            v      double[3]    barycentric observer velocity (vector, c)\n+            bm1    double       sqrt(1-|v|^2): reciprocal of Lorenz factor\n+            bpn    double[3][3] bias-precession-nutation matrix\n+            along  double       longitude + s' (radians)\n+            xpl    double       polar motion xp wrt local meridian (radians)\n+            ypl    double       polar motion yp wrt local meridian (radians)\n+            sphi   double       sine of geodetic latitude\n+            cphi   double       cosine of geodetic latitude\n+            diurab double       magnitude of diurnal aberration vector\n+            eral   double       \"local\" Earth rotation angle (radians)\n+            refa   double       refraction constant A (radians)\n+            refb   double       refraction constant B (radians)\n+           eo     double          equation of the origins (ERA-GST, radians)\n+\n+        Returned (function value):\n+                  int        status: +1 = dubious year (Note 2)\n+                                      0 = OK\n+                                     -1 = unacceptable date\n+\n+        Notes:\n+\n+        1)  utc1+utc2 is quasi Julian Date (see Note 2), apportioned in any\n+            convenient way between the two arguments, for example where utc1\n+            is the Julian Day Number and utc2 is the fraction of a day.\n+\n+            However, JD cannot unambiguously represent UTC during a leap\n+            second unless special measures are taken.  The convention in the\n+            present function is that the JD day represents UTC days whether\n+            the length is 86399, 86400 or 86401 SI seconds.\n+\n+            Applications should use the function eraDtf2d to convert from\n+            calendar date and time of day into 2-part quasi Julian Date, as\n+            it implements the leap-second-ambiguity convention just\n+            described.\n+\n+        2)  The warning status \"dubious year\" flags UTCs that predate the\n+            introduction of the time scale or that are too far in the\n+            future to be trusted.  See eraDat for further details.\n+\n+        3)  UT1-UTC is tabulated in IERS bulletins.  It increases by exactly\n+            one second at the end of each positive UTC leap second,\n+            introduced in order to keep UT1-UTC within +/- 0.9s.  n.b. This\n+            practice is under review, and in the future UT1-UTC may grow\n+            essentially without limit.\n+\n+        4)  The geographical coordinates are with respect to the ERFA_WGS84\n+            reference ellipsoid.  TAKE CARE WITH THE LONGITUDE SIGN:  the\n+            longitude required by the present function is east-positive\n+            (i.e. right-handed), in accordance with geographical convention.\n+\n+        5)  The polar motion xp,yp can be obtained from IERS bulletins.  The\n+            values are the coordinates (in radians) of the Celestial\n+            Intermediate Pole with respect to the International Terrestrial\n+            Reference System (see IERS Conventions 2003), measured along the\n+            meridians 0 and 90 deg west respectively.  For many\n+            applications, xp and yp can be set to zero.\n+\n+            Internally, the polar motion is stored in a form rotated onto\n+            the local meridian.\n+\n+        6)  If hm, the height above the ellipsoid of the observing station\n+            in meters, is not known but phpa, the pressure in hPa (=mB), is\n+            available, an adequate estimate of hm can be obtained from the\n+            expression\n+\n+                  hm = -29.3 * tsl * log ( phpa / 1013.25 );\n+\n+            where tsl is the approximate sea-level air temperature in K\n+            (See Astrophysical Quantities, C.W.Allen, 3rd edition, section\n+            52).  Similarly, if the pressure phpa is not known, it can be\n+            estimated from the height of the observing station, hm, as\n+            follows:\n+\n+                  phpa = 1013.25 * exp ( -hm / ( 29.3 * tsl ) );\n+\n+            Note, however, that the refraction is nearly proportional to\n+            the pressure and that an accurate phpa value is important for\n+            precise work.\n+\n+        7)  The argument wl specifies the observing wavelength in\n+            micrometers.  The transition from optical to radio is assumed to\n+            occur at 100 micrometers (about 3000 GHz).\n+\n+        8)  It is advisable to take great care with units, as even unlikely\n+            values of the input parameters are accepted and processed in\n+            accordance with the models used.\n+\n+        9)  In cases where the caller wishes to supply his own Earth\n+            ephemeris, Earth rotation information and refraction constants,\n+            the function eraApco can be used instead of the present function.\n+\n+        10) This is one of several functions that inserts into the astrom\n+            structure star-independent parameters needed for the chain of\n+            astrometric transformations ICRS <-> GCRS <-> CIRS <-> observed.\n+\n+            The various functions support different classes of observer and\n+            portions of the transformation chain:\n+\n+                functions         observer        transformation\n+\n+             eraApcg eraApcg13    geocentric      ICRS <-> GCRS\n+             eraApci eraApci13    terrestrial     ICRS <-> CIRS\n+             eraApco eraApco13    terrestrial     ICRS <-> observed\n+             eraApcs eraApcs13    space           ICRS <-> GCRS\n+             eraAper eraAper13    terrestrial     update Earth rotation\n+             eraApio eraApio13    terrestrial     CIRS <-> observed\n+\n+            Those with names ending in \"13\" use contemporary ERFA models to\n+            compute the various ephemerides.  The others accept ephemerides\n+            supplied by the caller.\n+\n+            The transformation from ICRS to GCRS covers space motion,\n+            parallax, light deflection, and aberration.  From GCRS to CIRS\n+            comprises frame bias and precession-nutation.  From CIRS to\n+            observed takes account of Earth rotation, polar motion, diurnal\n+            aberration and parallax (unless subsumed into the ICRS <-> GCRS\n+            transformation), and atmospheric refraction.\n+\n+        11) The context structure astrom produced by this function is used\n+            by eraAtioq, eraAtoiq, eraAtciq* and eraAticq*.\n+\n+        Called:\n+           eraUtctai    UTC to TAI\n+           eraTaitt     TAI to TT\n+           eraUtcut1    UTC to UT1\n+           eraEpv00     Earth position and velocity\n+           eraPnm06a    classical NPB matrix, IAU 2006/2000A\n+           eraBpn2xy    extract CIP X,Y coordinates from NPB matrix\n+           eraS06       the CIO locator s, given X,Y, IAU 2006\n+           eraEra00     Earth rotation angle, IAU 2000\n+           eraSp00      the TIO locator s', IERS 2000\n+           eraRefco     refraction constants for given ambient conditions\n+           eraApco      astrometry parameters, ICRS-observed\n+           eraEors      equation of the origins, given NPB matrix and s\n+\n+        This revision:   2022 May 3\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    astrom, eo, c_retval = ufunc.apco13(\n+        utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    check_errwarn(c_retval, 'apco13')\n+    return astrom, eo\n+\n+\n+STATUS_CODES['apco13'] = {\n+    1: 'dubious year (Note 2)',\n+    0: 'OK',\n+    -1: 'unacceptable date',\n+}\n+\n+\n+def apcs(date1, date2, pv, ebpv, ehp):\n+    \"\"\"\n+    For an observer whose geocentric position and velocity are known,\n+    prepare star-independent astrometry parameters for transformations\n+    between ICRS and GCRS.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+    pv : double array\n+    ebpv : double array\n+    ehp : double array\n+\n+    Returns\n+    -------\n+    astrom : eraASTROM array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraApcs``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a A p c s\n+        - - - - - - - -\n+\n+        For an observer whose geocentric position and velocity are known,\n+        prepare star-independent astrometry parameters for transformations\n+        between ICRS and GCRS.  The Earth ephemeris is supplied by the\n+        caller.\n+\n+        The parameters produced by this function are required in the space\n+        motion, parallax, light deflection and aberration parts of the\n+        astrometric transformation chain.\n+\n+        Given:\n+           date1  double       TDB as a 2-part...\n+           date2  double       ...Julian Date (Note 1)\n+           pv     double[2][3] observer's geocentric pos/vel (m, m/s)\n+           ebpv   double[2][3] Earth barycentric PV (au, au/day)\n+           ehp    double[3]    Earth heliocentric P (au)\n+\n+        Returned:\n+           astrom eraASTROM         star-independent astrometry parameters:\n+            pmt    double       PM time interval (SSB, Julian years)\n+            eb     double[3]    SSB to observer (vector, au)\n+            eh     double[3]    Sun to observer (unit vector)\n+            em     double       distance from Sun to observer (au)\n+            v      double[3]    barycentric observer velocity (vector, c)\n+            bm1    double       sqrt(1-|v|^2): reciprocal of Lorenz factor\n+            bpn    double[3][3] bias-precession-nutation matrix\n+            along  double       unchanged\n+            xpl    double       unchanged\n+            ypl    double       unchanged\n+            sphi   double       unchanged\n+            cphi   double       unchanged\n+            diurab double       unchanged\n+            eral   double       unchanged\n+            refa   double       unchanged\n+            refb   double       unchanged\n+\n+        Notes:\n+\n+        1) The TDB date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TDB)=2450123.7 could be expressed in any of these ways, among\n+           others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 method is best matched to the way the\n+           argument is handled internally and will deliver the optimum\n+           resolution.  The MJD method and the date & time methods are both\n+           good compromises between resolution and convenience.  For most\n+           applications of this function the choice will not be at all\n+           critical.\n+\n+           TT can be used instead of TDB without any significant impact on\n+           accuracy.\n+\n+        2) All the vectors are with respect to BCRS axes.\n+\n+        3) Providing separate arguments for (i) the observer's geocentric\n+           position and velocity and (ii) the Earth ephemeris is done for\n+           convenience in the geocentric, terrestrial and Earth orbit cases.\n+           For deep space applications it maybe more convenient to specify\n+           zero geocentric position and velocity and to supply the\n+           observer's position and velocity information directly instead of\n+           with respect to the Earth.  However, note the different units:\n+           m and m/s for the geocentric vectors, au and au/day for the\n+           heliocentric and barycentric vectors.\n+\n+        4) In cases where the caller does not wish to provide the Earth\n+           ephemeris, the function eraApcs13 can be used instead of the\n+           present function.  This computes the Earth ephemeris using the\n+           ERFA function eraEpv00.\n+\n+        5) This is one of several functions that inserts into the astrom\n+           structure star-independent parameters needed for the chain of\n+           astrometric transformations ICRS <-> GCRS <-> CIRS <-> observed.\n+\n+           The various functions support different classes of observer and\n+           portions of the transformation chain:\n+\n+                functions         observer        transformation\n+\n+             eraApcg eraApcg13    geocentric      ICRS <-> GCRS\n+             eraApci eraApci13    terrestrial     ICRS <-> CIRS\n+             eraApco eraApco13    terrestrial     ICRS <-> observed\n+             eraApcs eraApcs13    space           ICRS <-> GCRS\n+             eraAper eraAper13    terrestrial     update Earth rotation\n+             eraApio eraApio13    terrestrial     CIRS <-> observed\n+\n+           Those with names ending in \"13\" use contemporary ERFA models to\n+           compute the various ephemerides.  The others accept ephemerides\n+           supplied by the caller.\n+\n+           The transformation from ICRS to GCRS covers space motion,\n+           parallax, light deflection, and aberration.  From GCRS to CIRS\n+           comprises frame bias and precession-nutation.  From CIRS to\n+           observed takes account of Earth rotation, polar motion, diurnal\n+           aberration and parallax (unless subsumed into the ICRS <-> GCRS\n+           transformation), and atmospheric refraction.\n+\n+        6) The context structure astrom produced by this function is used by\n+           eraAtciq* and eraAticq*.\n+\n+        Called:\n+           eraCp        copy p-vector\n+           eraPm        modulus of p-vector\n+           eraPn        decompose p-vector into modulus and direction\n+           eraIr        initialize r-matrix to identity\n+\n+        This revision:   2021 February 24\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    astrom = ufunc.apcs(date1, date2, pv, ebpv, ehp)\n+    return astrom\n+\n+\n+def apcs13(date1, date2, pv):\n+    \"\"\"\n+    For an observer whose geocentric position and velocity are known,\n+    prepare star-independent astrometry parameters for transformations\n+    between ICRS and GCRS.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+    pv : double array\n+\n+    Returns\n+    -------\n+    astrom : eraASTROM array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraApcs13``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a A p c s 1 3\n+        - - - - - - - - - -\n+\n+        For an observer whose geocentric position and velocity are known,\n+        prepare star-independent astrometry parameters for transformations\n+        between ICRS and GCRS.  The Earth ephemeris is from ERFA models.\n+\n+        The parameters produced by this function are required in the space\n+        motion, parallax, light deflection and aberration parts of the\n+        astrometric transformation chain.\n+\n+        Given:\n+           date1  double       TDB as a 2-part...\n+           date2  double       ...Julian Date (Note 1)\n+           pv     double[2][3] observer's geocentric pos/vel (Note 3)\n+\n+        Returned:\n+           astrom eraASTROM         star-independent astrometry parameters:\n+            pmt    double       PM time interval (SSB, Julian years)\n+            eb     double[3]    SSB to observer (vector, au)\n+            eh     double[3]    Sun to observer (unit vector)\n+            em     double       distance from Sun to observer (au)\n+            v      double[3]    barycentric observer velocity (vector, c)\n+            bm1    double       sqrt(1-|v|^2): reciprocal of Lorenz factor\n+            bpn    double[3][3] bias-precession-nutation matrix\n+            along  double       unchanged\n+            xpl    double       unchanged\n+            ypl    double       unchanged\n+            sphi   double       unchanged\n+            cphi   double       unchanged\n+            diurab double       unchanged\n+            eral   double       unchanged\n+            refa   double       unchanged\n+            refb   double       unchanged\n+\n+        Notes:\n+\n+        1) The TDB date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TDB)=2450123.7 could be expressed in any of these ways, among\n+           others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 method is best matched to the way the\n+           argument is handled internally and will deliver the optimum\n+           resolution.  The MJD method and the date & time methods are both\n+           good compromises between resolution and convenience.  For most\n+           applications of this function the choice will not be at all\n+           critical.\n+\n+           TT can be used instead of TDB without any significant impact on\n+           accuracy.\n+\n+        2) All the vectors are with respect to BCRS axes.\n+\n+        3) The observer's position and velocity pv are geocentric but with\n+           respect to BCRS axes, and in units of m and m/s.  No assumptions\n+           are made about proximity to the Earth, and the function can be\n+           used for deep space applications as well as Earth orbit and\n+           terrestrial.\n+\n+        4) In cases where the caller wishes to supply his own Earth\n+           ephemeris, the function eraApcs can be used instead of the present\n+           function.\n+\n+        5) This is one of several functions that inserts into the astrom\n+           structure star-independent parameters needed for the chain of\n+           astrometric transformations ICRS <-> GCRS <-> CIRS <-> observed.\n+\n+           The various functions support different classes of observer and\n+           portions of the transformation chain:\n+\n+                functions         observer        transformation\n+\n+             eraApcg eraApcg13    geocentric      ICRS <-> GCRS\n+             eraApci eraApci13    terrestrial     ICRS <-> CIRS\n+             eraApco eraApco13    terrestrial     ICRS <-> observed\n+             eraApcs eraApcs13    space           ICRS <-> GCRS\n+             eraAper eraAper13    terrestrial     update Earth rotation\n+             eraApio eraApio13    terrestrial     CIRS <-> observed\n+\n+           Those with names ending in \"13\" use contemporary ERFA models to\n+           compute the various ephemerides.  The others accept ephemerides\n+           supplied by the caller.\n+\n+           The transformation from ICRS to GCRS covers space motion,\n+           parallax, light deflection, and aberration.  From GCRS to CIRS\n+           comprises frame bias and precession-nutation.  From CIRS to\n+           observed takes account of Earth rotation, polar motion, diurnal\n+           aberration and parallax (unless subsumed into the ICRS <-> GCRS\n+           transformation), and atmospheric refraction.\n+\n+        6) The context structure astrom produced by this function is used by\n+           eraAtciq* and eraAticq*.\n+\n+        Called:\n+           eraEpv00     Earth position and velocity\n+           eraApcs      astrometry parameters, ICRS-GCRS, space observer\n+\n+        This revision:   2013 October 9\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    astrom = ufunc.apcs13(date1, date2, pv)\n+    return astrom\n+\n+\n+def aper(theta, astrom):\n+    \"\"\"\n+    In the star-independent astrometry parameters, update only the\n+    Earth rotation angle, supplied by the caller explicitly.\n+\n+    Parameters\n+    ----------\n+    theta : double array\n+    astrom : eraASTROM array\n+\n+    Returns\n+    -------\n+    astrom : eraASTROM array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAper``. Note that, unlike the erfa routine,\n+    the python wrapper does not change astrom in-place. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a A p e r\n+        - - - - - - - -\n+\n+        In the star-independent astrometry parameters, update only the\n+        Earth rotation angle, supplied by the caller explicitly.\n+\n+        Given:\n+           theta   double      Earth rotation angle (radians, Note 2)\n+           astrom  eraASTROM        star-independent astrometry parameters:\n+            pmt    double       not used\n+            eb     double[3]    not used\n+            eh     double[3]    not used\n+            em     double       not used\n+            v      double[3]    not used\n+            bm1    double       not used\n+            bpn    double[3][3] not used\n+            along  double       longitude + s' (radians)\n+            xpl    double       not used\n+            ypl    double       not used\n+            sphi   double       not used\n+            cphi   double       not used\n+            diurab double       not used\n+            eral   double       not used\n+            refa   double       not used\n+            refb   double       not used\n+\n+        Returned:\n+           astrom  eraASTROM        star-independent astrometry parameters:\n+            pmt    double       unchanged\n+            eb     double[3]    unchanged\n+            eh     double[3]    unchanged\n+            em     double       unchanged\n+            v      double[3]    unchanged\n+            bm1    double       unchanged\n+            bpn    double[3][3] unchanged\n+            along  double       unchanged\n+            xpl    double       unchanged\n+            ypl    double       unchanged\n+            sphi   double       unchanged\n+            cphi   double       unchanged\n+            diurab double       unchanged\n+            eral   double       \"local\" Earth rotation angle (radians)\n+            refa   double       unchanged\n+            refb   double       unchanged\n+\n+        Notes:\n+\n+        1) This function exists to enable sidereal-tracking applications to\n+           avoid wasteful recomputation of the bulk of the astrometry\n+           parameters:  only the Earth rotation is updated.\n+\n+        2) For targets expressed as equinox based positions, such as\n+           classical geocentric apparent (RA,Dec), the supplied theta can be\n+           Greenwich apparent sidereal time rather than Earth rotation\n+           angle.\n+\n+        3) The function eraAper13 can be used instead of the present\n+           function, and starts from UT1 rather than ERA itself.\n+\n+        4) This is one of several functions that inserts into the astrom\n+           structure star-independent parameters needed for the chain of\n+           astrometric transformations ICRS <-> GCRS <-> CIRS <-> observed.\n+\n+           The various functions support different classes of observer and\n+           portions of the transformation chain:\n+\n+                functions         observer        transformation\n+\n+             eraApcg eraApcg13    geocentric      ICRS <-> GCRS\n+             eraApci eraApci13    terrestrial     ICRS <-> CIRS\n+             eraApco eraApco13    terrestrial     ICRS <-> observed\n+             eraApcs eraApcs13    space           ICRS <-> GCRS\n+             eraAper eraAper13    terrestrial     update Earth rotation\n+             eraApio eraApio13    terrestrial     CIRS <-> observed\n+\n+           Those with names ending in \"13\" use contemporary ERFA models to\n+           compute the various ephemerides.  The others accept ephemerides\n+           supplied by the caller.\n+\n+           The transformation from ICRS to GCRS covers space motion,\n+           parallax, light deflection, and aberration.  From GCRS to CIRS\n+           comprises frame bias and precession-nutation.  From CIRS to\n+           observed takes account of Earth rotation, polar motion, diurnal\n+           aberration and parallax (unless subsumed into the ICRS <-> GCRS\n+           transformation), and atmospheric refraction.\n+\n+        This revision:   2013 September 25\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    astrom = ufunc.aper(theta, astrom)\n+    return astrom\n+\n+\n+def aper13(ut11, ut12, astrom):\n+    \"\"\"\n+    In the star-independent astrometry parameters, update only the\n+    Earth rotation angle.\n+\n+    Parameters\n+    ----------\n+    ut11 : double array\n+    ut12 : double array\n+    astrom : eraASTROM array\n+\n+    Returns\n+    -------\n+    astrom : eraASTROM array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAper13``. Note that, unlike the erfa routine,\n+    the python wrapper does not change astrom in-place. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a A p e r 1 3\n+        - - - - - - - - - -\n+\n+        In the star-independent astrometry parameters, update only the\n+        Earth rotation angle.  The caller provides UT1, (n.b. not UTC).\n+\n+        Given:\n+           ut11    double      UT1 as a 2-part...\n+           ut12    double      ...Julian Date (Note 1)\n+           astrom  eraASTROM        star-independent astrometry parameters:\n+            pmt    double       not used\n+            eb     double[3]    not used\n+            eh     double[3]    not used\n+            em     double       not used\n+            v      double[3]    not used\n+            bm1    double       not used\n+            bpn    double[3][3] not used\n+            along  double       longitude + s' (radians)\n+            xpl    double       not used\n+            ypl    double       not used\n+            sphi   double       not used\n+            cphi   double       not used\n+            diurab double       not used\n+            eral   double       not used\n+            refa   double       not used\n+            refb   double       not used\n+\n+        Returned:\n+           astrom  eraASTROM        star-independent astrometry parameters:\n+            pmt    double       unchanged\n+            eb     double[3]    unchanged\n+            eh     double[3]    unchanged\n+            em     double       unchanged\n+            v      double[3]    unchanged\n+            bm1    double       unchanged\n+            bpn    double[3][3] unchanged\n+            along  double       unchanged\n+            xpl    double       unchanged\n+            ypl    double       unchanged\n+            sphi   double       unchanged\n+            cphi   double       unchanged\n+            diurab double       unchanged\n+            eral   double       \"local\" Earth rotation angle (radians)\n+            refa   double       unchanged\n+            refb   double       unchanged\n+\n+        Notes:\n+\n+        1) The UT1 date (n.b. not UTC) ut11+ut12 is a Julian Date,\n+           apportioned in any convenient way between the arguments ut11 and\n+           ut12.  For example, JD(UT1)=2450123.7 could be expressed in any\n+           of these ways, among others:\n+\n+                  ut11           ut12\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 and MJD methods are good compromises\n+           between resolution and convenience.  The date & time method is\n+           best matched to the algorithm used:  maximum precision is\n+           delivered when the ut11 argument is for 0hrs UT1 on the day in\n+           question and the ut12 argument lies in the range 0 to 1, or vice\n+           versa.\n+\n+        2) If the caller wishes to provide the Earth rotation angle itself,\n+           the function eraAper can be used instead.  One use of this\n+           technique is to substitute Greenwich apparent sidereal time and\n+           thereby to support equinox based transformations directly.\n+\n+        3) This is one of several functions that inserts into the astrom\n+           structure star-independent parameters needed for the chain of\n+           astrometric transformations ICRS <-> GCRS <-> CIRS <-> observed.\n+\n+           The various functions support different classes of observer and\n+           portions of the transformation chain:\n+\n+                functions         observer        transformation\n+\n+             eraApcg eraApcg13    geocentric      ICRS <-> GCRS\n+             eraApci eraApci13    terrestrial     ICRS <-> CIRS\n+             eraApco eraApco13    terrestrial     ICRS <-> observed\n+             eraApcs eraApcs13    space           ICRS <-> GCRS\n+             eraAper eraAper13    terrestrial     update Earth rotation\n+             eraApio eraApio13    terrestrial     CIRS <-> observed\n+\n+           Those with names ending in \"13\" use contemporary ERFA models to\n+           compute the various ephemerides.  The others accept ephemerides\n+           supplied by the caller.\n+\n+           The transformation from ICRS to GCRS covers space motion,\n+           parallax, light deflection, and aberration.  From GCRS to CIRS\n+           comprises frame bias and precession-nutation.  From CIRS to\n+           observed takes account of Earth rotation, polar motion, diurnal\n+           aberration and parallax (unless subsumed into the ICRS <-> GCRS\n+           transformation), and atmospheric refraction.\n+\n+        Called:\n+           eraAper      astrometry parameters: update ERA\n+           eraEra00     Earth rotation angle, IAU 2000\n+\n+        This revision:   2013 September 25\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    astrom = ufunc.aper13(ut11, ut12, astrom)\n+    return astrom\n+\n+\n+def apio(sp, theta, elong, phi, hm, xp, yp, refa, refb):\n+    \"\"\"\n+    For a terrestrial observer, prepare star-independent astrometry\n+    parameters for transformations between CIRS and observed\n+    coordinates.\n+\n+    Parameters\n+    ----------\n+    sp : double array\n+    theta : double array\n+    elong : double array\n+    phi : double array\n+    hm : double array\n+    xp : double array\n+    yp : double array\n+    refa : double array\n+    refb : double array\n+\n+    Returns\n+    -------\n+    astrom : eraASTROM array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraApio``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a A p i o\n+        - - - - - - - -\n+\n+        For a terrestrial observer, prepare star-independent astrometry\n+        parameters for transformations between CIRS and observed\n+        coordinates.  The caller supplies the Earth orientation information\n+        and the refraction constants as well as the site coordinates.\n+\n+        Given:\n+           sp     double      the TIO locator s' (radians, Note 1)\n+           theta  double      Earth rotation angle (radians)\n+           elong  double      longitude (radians, east +ve, Note 2)\n+           phi    double      geodetic latitude (radians, Note 2)\n+           hm     double      height above ellipsoid (m, geodetic Note 2)\n+           xp,yp  double      polar motion coordinates (radians, Note 3)\n+           refa   double      refraction constant A (radians, Note 4)\n+           refb   double      refraction constant B (radians, Note 4)\n+\n+        Returned:\n+           astrom eraASTROM        star-independent astrometry parameters:\n+            pmt    double       unchanged\n+            eb     double[3]    unchanged\n+            eh     double[3]    unchanged\n+            em     double       unchanged\n+            v      double[3]    unchanged\n+            bm1    double       unchanged\n+            bpn    double[3][3] unchanged\n+            along  double       adjusted longitude (radians)\n+            xpl    double       polar motion xp wrt local meridian (radians)\n+            ypl    double       polar motion yp wrt local meridian (radians)\n+            sphi   double       sine of geodetic latitude\n+            cphi   double       cosine of geodetic latitude\n+            diurab double       magnitude of diurnal aberration vector\n+            eral   double       \"local\" Earth rotation angle (radians)\n+            refa   double       refraction constant A (radians)\n+            refb   double       refraction constant B (radians)\n+\n+        Notes:\n+\n+        1) sp, the TIO locator s', is a tiny quantity needed only by the\n+           most precise applications.  It can either be set to zero or\n+           predicted using the ERFA function eraSp00.\n+\n+        2) The geographical coordinates are with respect to the ERFA_WGS84\n+           reference ellipsoid.  TAKE CARE WITH THE LONGITUDE SIGN:  the\n+           longitude required by the present function is east-positive\n+           (i.e. right-handed), in accordance with geographical convention.\n+\n+        3) The polar motion xp,yp can be obtained from IERS bulletins.  The\n+           values are the coordinates (in radians) of the Celestial\n+           Intermediate Pole with respect to the International Terrestrial\n+           Reference System (see IERS Conventions 2003), measured along the\n+           meridians 0 and 90 deg west respectively.  For many applications,\n+           xp and yp can be set to zero.\n+\n+           Internally, the polar motion is stored in a form rotated onto the\n+           local meridian.\n+\n+        4) The refraction constants refa and refb are for use in a\n+           dZ = A*tan(Z)+B*tan^3(Z) model, where Z is the observed\n+           (i.e. refracted) zenith distance and dZ is the amount of\n+           refraction.\n+\n+        5) It is advisable to take great care with units, as even unlikely\n+           values of the input parameters are accepted and processed in\n+           accordance with the models used.\n+\n+        6) In cases where the caller does not wish to provide the Earth\n+           rotation information and refraction constants, the function\n+           eraApio13 can be used instead of the present function.  This\n+           starts from UTC and weather readings etc. and computes suitable\n+           values using other ERFA functions.\n+\n+        7) This is one of several functions that inserts into the astrom\n+           structure star-independent parameters needed for the chain of\n+           astrometric transformations ICRS <-> GCRS <-> CIRS <-> observed.\n+\n+           The various functions support different classes of observer and\n+           portions of the transformation chain:\n+\n+                functions         observer        transformation\n+\n+             eraApcg eraApcg13    geocentric      ICRS <-> GCRS\n+             eraApci eraApci13    terrestrial     ICRS <-> CIRS\n+             eraApco eraApco13    terrestrial     ICRS <-> observed\n+             eraApcs eraApcs13    space           ICRS <-> GCRS\n+             eraAper eraAper13    terrestrial     update Earth rotation\n+             eraApio eraApio13    terrestrial     CIRS <-> observed\n+\n+           Those with names ending in \"13\" use contemporary ERFA models to\n+           compute the various ephemerides.  The others accept ephemerides\n+           supplied by the caller.\n+\n+           The transformation from ICRS to GCRS covers space motion,\n+           parallax, light deflection, and aberration.  From GCRS to CIRS\n+           comprises frame bias and precession-nutation.  From CIRS to\n+           observed takes account of Earth rotation, polar motion, diurnal\n+           aberration and parallax (unless subsumed into the ICRS <-> GCRS\n+           transformation), and atmospheric refraction.\n+\n+        8) The context structure astrom produced by this function is used by\n+           eraAtioq and eraAtoiq.\n+\n+        Called:\n+           eraIr        initialize r-matrix to identity\n+           eraRz        rotate around Z-axis\n+           eraRy        rotate around Y-axis\n+           eraRx        rotate around X-axis\n+           eraAnpm      normalize angle into range +/- pi\n+           eraPvtob     position/velocity of terrestrial station\n+\n+        This revision:   2021 February 24\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    astrom = ufunc.apio(sp, theta, elong, phi, hm, xp, yp, refa, refb)\n+    return astrom\n+\n+\n+def apio13(utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl):\n+    \"\"\"\n+    For a terrestrial observer, prepare star-independent astrometry\n+    parameters for transformations between CIRS and observed\n+    coordinates.\n+\n+    Parameters\n+    ----------\n+    utc1 : double array\n+    utc2 : double array\n+    dut1 : double array\n+    elong : double array\n+    phi : double array\n+    hm : double array\n+    xp : double array\n+    yp : double array\n+    phpa : double array\n+    tc : double array\n+    rh : double array\n+    wl : double array\n+\n+    Returns\n+    -------\n+    astrom : eraASTROM array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraApio13``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a A p i o 1 3\n+        - - - - - - - - - -\n+\n+        For a terrestrial observer, prepare star-independent astrometry\n+        parameters for transformations between CIRS and observed\n+        coordinates.  The caller supplies UTC, site coordinates, ambient air\n+        conditions and observing wavelength.\n+\n+        Given:\n+           utc1   double      UTC as a 2-part...\n+           utc2   double      ...quasi Julian Date (Notes 1,2)\n+           dut1   double      UT1-UTC (seconds)\n+           elong  double      longitude (radians, east +ve, Note 3)\n+           phi    double      geodetic latitude (radians, Note 3)\n+           hm     double      height above ellipsoid (m, geodetic Notes 4,6)\n+           xp,yp  double      polar motion coordinates (radians, Note 5)\n+           phpa   double      pressure at the observer (hPa = mB, Note 6)\n+           tc     double      ambient temperature at the observer (deg C)\n+           rh     double      relative humidity at the observer (range 0-1)\n+           wl     double      wavelength (micrometers, Note 7)\n+\n+        Returned:\n+           astrom eraASTROM        star-independent astrometry parameters:\n+            pmt    double       unchanged\n+            eb     double[3]    unchanged\n+            eh     double[3]    unchanged\n+            em     double       unchanged\n+            v      double[3]    unchanged\n+            bm1    double       unchanged\n+            bpn    double[3][3] unchanged\n+            along  double       longitude + s' (radians)\n+            xpl    double       polar motion xp wrt local meridian (radians)\n+            ypl    double       polar motion yp wrt local meridian (radians)\n+            sphi   double       sine of geodetic latitude\n+            cphi   double       cosine of geodetic latitude\n+            diurab double       magnitude of diurnal aberration vector\n+            eral   double       \"local\" Earth rotation angle (radians)\n+            refa   double       refraction constant A (radians)\n+            refb   double       refraction constant B (radians)\n+\n+        Returned (function value):\n+                  int         status: +1 = dubious year (Note 2)\n+                                       0 = OK\n+                                      -1 = unacceptable date\n+\n+        Notes:\n+\n+        1)  utc1+utc2 is quasi Julian Date (see Note 2), apportioned in any\n+            convenient way between the two arguments, for example where utc1\n+            is the Julian Day Number and utc2 is the fraction of a day.\n+\n+            However, JD cannot unambiguously represent UTC during a leap\n+            second unless special measures are taken.  The convention in the\n+            present function is that the JD day represents UTC days whether\n+            the length is 86399, 86400 or 86401 SI seconds.\n+\n+            Applications should use the function eraDtf2d to convert from\n+            calendar date and time of day into 2-part quasi Julian Date, as\n+            it implements the leap-second-ambiguity convention just\n+            described.\n+\n+        2)  The warning status \"dubious year\" flags UTCs that predate the\n+            introduction of the time scale or that are too far in the future\n+            to be trusted.  See eraDat for further details.\n+\n+        3)  UT1-UTC is tabulated in IERS bulletins.  It increases by exactly\n+            one second at the end of each positive UTC leap second,\n+            introduced in order to keep UT1-UTC within +/- 0.9s.  n.b. This\n+            practice is under review, and in the future UT1-UTC may grow\n+            essentially without limit.\n+\n+        4)  The geographical coordinates are with respect to the ERFA_WGS84\n+            reference ellipsoid.  TAKE CARE WITH THE LONGITUDE SIGN:  the\n+            longitude required by the present function is east-positive\n+            (i.e. right-handed), in accordance with geographical convention.\n+\n+        5)  The polar motion xp,yp can be obtained from IERS bulletins.  The\n+            values are the coordinates (in radians) of the Celestial\n+            Intermediate Pole with respect to the International Terrestrial\n+            Reference System (see IERS Conventions 2003), measured along the\n+            meridians 0 and 90 deg west respectively.  For many applications,\n+            xp and yp can be set to zero.\n+\n+            Internally, the polar motion is stored in a form rotated onto\n+            the local meridian.\n+\n+        6)  If hm, the height above the ellipsoid of the observing station\n+            in meters, is not known but phpa, the pressure in hPa (=mB), is\n+            available, an adequate estimate of hm can be obtained from the\n+            expression\n+\n+                  hm = -29.3 * tsl * log ( phpa / 1013.25 );\n+\n+            where tsl is the approximate sea-level air temperature in K\n+            (See Astrophysical Quantities, C.W.Allen, 3rd edition, section\n+            52).  Similarly, if the pressure phpa is not known, it can be\n+            estimated from the height of the observing station, hm, as\n+            follows:\n+\n+                  phpa = 1013.25 * exp ( -hm / ( 29.3 * tsl ) );\n+\n+            Note, however, that the refraction is nearly proportional to the\n+            pressure and that an accurate phpa value is important for\n+            precise work.\n+\n+        7)  The argument wl specifies the observing wavelength in\n+            micrometers.  The transition from optical to radio is assumed to\n+            occur at 100 micrometers (about 3000 GHz).\n+\n+        8)  It is advisable to take great care with units, as even unlikely\n+            values of the input parameters are accepted and processed in\n+            accordance with the models used.\n+\n+        9)  In cases where the caller wishes to supply his own Earth\n+            rotation information and refraction constants, the function\n+            eraApc can be used instead of the present function.\n+\n+        10) This is one of several functions that inserts into the astrom\n+            structure star-independent parameters needed for the chain of\n+            astrometric transformations ICRS <-> GCRS <-> CIRS <-> observed.\n+\n+            The various functions support different classes of observer and\n+            portions of the transformation chain:\n+\n+                functions         observer        transformation\n+\n+             eraApcg eraApcg13    geocentric      ICRS <-> GCRS\n+             eraApci eraApci13    terrestrial     ICRS <-> CIRS\n+             eraApco eraApco13    terrestrial     ICRS <-> observed\n+             eraApcs eraApcs13    space           ICRS <-> GCRS\n+             eraAper eraAper13    terrestrial     update Earth rotation\n+             eraApio eraApio13    terrestrial     CIRS <-> observed\n+\n+            Those with names ending in \"13\" use contemporary ERFA models to\n+            compute the various ephemerides.  The others accept ephemerides\n+            supplied by the caller.\n+\n+            The transformation from ICRS to GCRS covers space motion,\n+            parallax, light deflection, and aberration.  From GCRS to CIRS\n+            comprises frame bias and precession-nutation.  From CIRS to\n+            observed takes account of Earth rotation, polar motion, diurnal\n+            aberration and parallax (unless subsumed into the ICRS <-> GCRS\n+            transformation), and atmospheric refraction.\n+\n+        11) The context structure astrom produced by this function is used\n+            by eraAtioq and eraAtoiq.\n+\n+        Called:\n+           eraUtctai    UTC to TAI\n+           eraTaitt     TAI to TT\n+           eraUtcut1    UTC to UT1\n+           eraSp00      the TIO locator s', IERS 2000\n+           eraEra00     Earth rotation angle, IAU 2000\n+           eraRefco     refraction constants for given ambient conditions\n+           eraApio      astrometry parameters, CIRS-observed\n+\n+        This revision:   2021 February 24\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    astrom, c_retval = ufunc.apio13(\n+        utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    check_errwarn(c_retval, 'apio13')\n+    return astrom\n+\n+\n+STATUS_CODES['apio13'] = {\n+    1: 'dubious year (Note 2)',\n+    0: 'OK',\n+    -1: 'unacceptable date',\n+}\n+\n+\n+def atcc13(rc, dc, pr, pd, px, rv, date1, date2):\n+    \"\"\"\n+    Transform a star's ICRS catalog entry (epoch J2000.0) into ICRS\n+    astrometric place.\n+\n+    Parameters\n+    ----------\n+    rc : double array\n+    dc : double array\n+    pr : double array\n+    pd : double array\n+    px : double array\n+    rv : double array\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    ra : double array\n+    da : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAtcc13``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a A t c c 1 3\n+        - - - - - - - - - -\n+\n+        Transform a star's ICRS catalog entry (epoch J2000.0) into ICRS\n+        astrometric place.\n+\n+        Given:\n+           rc     double   ICRS right ascension at J2000.0 (radians, Note 1)\n+           dc     double   ICRS declination at J2000.0 (radians, Note 1)\n+           pr     double   RA proper motion (radians/year, Note 2)\n+           pd     double   Dec proper motion (radians/year)\n+           px     double   parallax (arcsec)\n+           rv     double   radial velocity (km/s, +ve if receding)\n+           date1  double   TDB as a 2-part...\n+           date2  double   ...Julian Date (Note 3)\n+\n+        Returned:\n+           ra,da  double        ICRS astrometric RA,Dec (radians)\n+\n+        Notes:\n+\n+        1) Star data for an epoch other than J2000.0 (for example from the\n+           Hipparcos catalog, which has an epoch of J1991.25) will require a\n+           preliminary call to eraPmsafe before use.\n+\n+        2) The proper motion in RA is dRA/dt rather than cos(Dec)*dRA/dt.\n+\n+        3) The TDB date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TDB)=2450123.7 could be expressed in any of these ways, among\n+           others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 method is best matched to the way the\n+           argument is handled internally and will deliver the optimum\n+           resolution.  The MJD method and the date & time methods are both\n+           good compromises between resolution and convenience.  For most\n+           applications of this function the choice will not be at all\n+           critical.\n+\n+           TT can be used instead of TDB without any significant impact on\n+           accuracy.\n+\n+        Called:\n+           eraApci13    astrometry parameters, ICRS-CIRS, 2013\n+           eraAtccq     quick catalog ICRS to astrometric\n+\n+        This revision:   2021 April 18\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    ra, da = ufunc.atcc13(rc, dc, pr, pd, px, rv, date1, date2)\n+    return ra, da\n+\n+\n+def atccq(rc, dc, pr, pd, px, rv, astrom):\n+    \"\"\"\n+    Quick transformation of a star's ICRS catalog entry (epoch J2000.0)\n+    into ICRS astrometric place, given precomputed star-independent\n+    astrometry parameters.\n+\n+    Parameters\n+    ----------\n+    rc : double array\n+    dc : double array\n+    pr : double array\n+    pd : double array\n+    px : double array\n+    rv : double array\n+    astrom : eraASTROM array\n+\n+    Returns\n+    -------\n+    ra : double array\n+    da : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAtccq``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a A t c c q\n+        - - - - - - - - -\n+\n+        Quick transformation of a star's ICRS catalog entry (epoch J2000.0)\n+        into ICRS astrometric place, given precomputed star-independent\n+        astrometry parameters.\n+\n+        Use of this function is appropriate when efficiency is important and\n+        where many star positions are to be transformed for one date.  The\n+        star-independent parameters can be obtained by calling one of the\n+        functions eraApci[13], eraApcg[13], eraApco[13] or eraApcs[13].\n+\n+        If the parallax and proper motions are zero the transformation has\n+        no effect.\n+\n+        Given:\n+           rc,dc  double     ICRS RA,Dec at J2000.0 (radians)\n+           pr     double     RA proper motion (radians/year, Note 3)\n+           pd     double     Dec proper motion (radians/year)\n+           px     double     parallax (arcsec)\n+           rv     double     radial velocity (km/s, +ve if receding)\n+           astrom eraASTROM* star-independent astrometry parameters:\n+            pmt    double       PM time interval (SSB, Julian years)\n+            eb     double[3]    SSB to observer (vector, au)\n+            eh     double[3]    Sun to observer (unit vector)\n+            em     double       distance from Sun to observer (au)\n+            v      double[3]    barycentric observer velocity (vector, c)\n+            bm1    double       sqrt(1-|v|^2): reciprocal of Lorenz factor\n+            bpn    double[3][3] bias-precession-nutation matrix\n+            along  double       longitude + s' (radians)\n+            xpl    double       polar motion xp wrt local meridian (radians)\n+            ypl    double       polar motion yp wrt local meridian (radians)\n+            sphi   double       sine of geodetic latitude\n+            cphi   double       cosine of geodetic latitude\n+            diurab double       magnitude of diurnal aberration vector\n+            eral   double       \"local\" Earth rotation angle (radians)\n+            refa   double       refraction constant A (radians)\n+            refb   double       refraction constant B (radians)\n+\n+        Returned:\n+           ra,da  double          ICRS astrometric RA,Dec (radians)\n+\n+        Notes:\n+\n+        1) All the vectors are with respect to BCRS axes.\n+\n+        2) Star data for an epoch other than J2000.0 (for example from the\n+           Hipparcos catalog, which has an epoch of J1991.25) will require a\n+           preliminary call to eraPmsafe before use.\n+\n+        3) The proper motion in RA is dRA/dt rather than cos(Dec)*dRA/dt.\n+\n+        Called:\n+           eraPmpx      proper motion and parallax\n+           eraC2s       p-vector to spherical\n+           eraAnp       normalize angle into range 0 to 2pi\n+\n+        This revision:   2021 April 18\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    ra, da = ufunc.atccq(rc, dc, pr, pd, px, rv, astrom)\n+    return ra, da\n+\n+\n+def atci13(rc, dc, pr, pd, px, rv, date1, date2):\n+    \"\"\"\n+    Transform ICRS star data, epoch J2000.0, to CIRS.\n+\n+    Parameters\n+    ----------\n+    rc : double array\n+    dc : double array\n+    pr : double array\n+    pd : double array\n+    px : double array\n+    rv : double array\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    ri : double array\n+    di : double array\n+    eo : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAtci13``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a A t c i 1 3\n+        - - - - - - - - - -\n+\n+        Transform ICRS star data, epoch J2000.0, to CIRS.\n+\n+        Given:\n+           rc     double  ICRS right ascension at J2000.0 (radians, Note 1)\n+           dc     double  ICRS declination at J2000.0 (radians, Note 1)\n+           pr     double  RA proper motion (radians/year, Note 2)\n+           pd     double  Dec proper motion (radians/year)\n+           px     double  parallax (arcsec)\n+           rv     double  radial velocity (km/s, +ve if receding)\n+           date1  double  TDB as a 2-part...\n+           date2  double  ...Julian Date (Note 3)\n+\n+        Returned:\n+           ri,di  double* CIRS geocentric RA,Dec (radians)\n+           eo     double* equation of the origins (ERA-GST, radians, Note 5)\n+\n+        Notes:\n+\n+        1) Star data for an epoch other than J2000.0 (for example from the\n+           Hipparcos catalog, which has an epoch of J1991.25) will require a\n+           preliminary call to eraPmsafe before use.\n+\n+        2) The proper motion in RA is dRA/dt rather than cos(Dec)*dRA/dt.\n+\n+        3) The TDB date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TDB)=2450123.7 could be expressed in any of these ways, among\n+           others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 method is best matched to the way the\n+           argument is handled internally and will deliver the optimum\n+           resolution.  The MJD method and the date & time methods are both\n+           good compromises between resolution and convenience.  For most\n+           applications of this function the choice will not be at all\n+           critical.\n+\n+           TT can be used instead of TDB without any significant impact on\n+           accuracy.\n+\n+        4) The available accuracy is better than 1 milliarcsecond, limited\n+           mainly by the precession-nutation model that is used, namely\n+           IAU 2000A/2006.  Very close to solar system bodies, additional\n+           errors of up to several milliarcseconds can occur because of\n+           unmodeled light deflection;  however, the Sun's contribution is\n+           taken into account, to first order.  The accuracy limitations of\n+           the ERFA function eraEpv00 (used to compute Earth position and\n+           velocity) can contribute aberration errors of up to\n+           5 microarcseconds.  Light deflection at the Sun's limb is\n+           uncertain at the 0.4 mas level.\n+\n+        5) Should the transformation to (equinox based) apparent place be\n+           required rather than (CIO based) intermediate place, subtract the\n+           equation of the origins from the returned right ascension:\n+           RA = RI - EO. (The eraAnp function can then be applied, as\n+           required, to keep the result in the conventional 0-2pi range.)\n+\n+        Called:\n+           eraApci13    astrometry parameters, ICRS-CIRS, 2013\n+           eraAtciq     quick ICRS to CIRS\n+\n+        This revision:   2022 May 3\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    ri, di, eo = ufunc.atci13(rc, dc, pr, pd, px, rv, date1, date2)\n+    return ri, di, eo\n+\n+\n+def atciq(rc, dc, pr, pd, px, rv, astrom):\n+    \"\"\"\n+    Quick ICRS, epoch J2000.0, to CIRS transformation, given precomputed\n+    star-independent astrometry parameters.\n+\n+    Parameters\n+    ----------\n+    rc : double array\n+    dc : double array\n+    pr : double array\n+    pd : double array\n+    px : double array\n+    rv : double array\n+    astrom : eraASTROM array\n+\n+    Returns\n+    -------\n+    ri : double array\n+    di : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAtciq``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a A t c i q\n+        - - - - - - - - -\n+\n+        Quick ICRS, epoch J2000.0, to CIRS transformation, given precomputed\n+        star-independent astrometry parameters.\n+\n+        Use of this function is appropriate when efficiency is important and\n+        where many star positions are to be transformed for one date.  The\n+        star-independent parameters can be obtained by calling one of the\n+        functions eraApci[13], eraApcg[13], eraApco[13] or eraApcs[13].\n+\n+        If the parallax and proper motions are zero the eraAtciqz function\n+        can be used instead.\n+\n+        Given:\n+           rc,dc  double     ICRS RA,Dec at J2000.0 (radians, Note 1)\n+           pr     double     RA proper motion (radians/year, Note 2)\n+           pd     double     Dec proper motion (radians/year)\n+           px     double     parallax (arcsec)\n+           rv     double     radial velocity (km/s, +ve if receding)\n+           astrom eraASTROM* star-independent astrometry parameters:\n+            pmt    double       PM time interval (SSB, Julian years)\n+            eb     double[3]    SSB to observer (vector, au)\n+            eh     double[3]    Sun to observer (unit vector)\n+            em     double       distance from Sun to observer (au)\n+            v      double[3]    barycentric observer velocity (vector, c)\n+            bm1    double       sqrt(1-|v|^2): reciprocal of Lorenz factor\n+            bpn    double[3][3] bias-precession-nutation matrix\n+            along  double       longitude + s' (radians)\n+            xpl    double       polar motion xp wrt local meridian (radians)\n+            ypl    double       polar motion yp wrt local meridian (radians)\n+            sphi   double       sine of geodetic latitude\n+            cphi   double       cosine of geodetic latitude\n+            diurab double       magnitude of diurnal aberration vector\n+            eral   double       \"local\" Earth rotation angle (radians)\n+            refa   double       refraction constant A (radians)\n+            refb   double       refraction constant B (radians)\n+\n+        Returned:\n+           ri,di   double    CIRS RA,Dec (radians)\n+\n+        Notes:\n+\n+        1) Star data for an epoch other than J2000.0 (for example from the\n+           Hipparcos catalog, which has an epoch of J1991.25) will require a\n+           preliminary call to eraPmsafe before use.\n+\n+        2) The proper motion in RA is dRA/dt rather than cos(Dec)*dRA/dt.\n+\n+        Called:\n+           eraPmpx      proper motion and parallax\n+           eraLdsun     light deflection by the Sun\n+           eraAb        stellar aberration\n+           eraRxp       product of r-matrix and pv-vector\n+           eraC2s       p-vector to spherical\n+           eraAnp       normalize angle into range 0 to 2pi\n+\n+        This revision:   2021 April 19\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    ri, di = ufunc.atciq(rc, dc, pr, pd, px, rv, astrom)\n+    return ri, di\n+\n+\n+def atciqn(rc, dc, pr, pd, px, rv, astrom, b):\n+    \"\"\"\n+    Quick ICRS, epoch J2000.0, to CIRS transformation, given precomputed\n+    star-independent astrometry parameters plus a list of light-\n+    deflecting bodies.\n+\n+    Parameters\n+    ----------\n+    rc : double array\n+    dc : double array\n+    pr : double array\n+    pd : double array\n+    px : double array\n+    rv : double array\n+    astrom : eraASTROM array\n+    b : eraLDBODY array\n+\n+    Returns\n+    -------\n+    ri : double array\n+    di : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAtciqn``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a A t c i q n\n+        - - - - - - - - - -\n+\n+        Quick ICRS, epoch J2000.0, to CIRS transformation, given precomputed\n+        star-independent astrometry parameters plus a list of light-\n+        deflecting bodies.\n+\n+        Use of this function is appropriate when efficiency is important and\n+        where many star positions are to be transformed for one date.  The\n+        star-independent parameters can be obtained by calling one of the\n+        functions eraApci[13], eraApcg[13], eraApco[13] or eraApcs[13].\n+\n+\n+        If the only light-deflecting body to be taken into account is the\n+        Sun, the eraAtciq function can be used instead.  If in addition the\n+        parallax and proper motions are zero, the eraAtciqz function can be\n+        used.\n+\n+        Given:\n+           rc,dc  double       ICRS RA,Dec at J2000.0 (radians)\n+           pr     double       RA proper motion (radians/year, Note 3)\n+           pd     double       Dec proper motion (radians/year)\n+           px     double       parallax (arcsec)\n+           rv     double       radial velocity (km/s, +ve if receding)\n+           astrom eraASTROM         star-independent astrometry parameters:\n+            pmt    double       PM time interval (SSB, Julian years)\n+            eb     double[3]    SSB to observer (vector, au)\n+            eh     double[3]    Sun to observer (unit vector)\n+            em     double       distance from Sun to observer (au)\n+            v      double[3]    barycentric observer velocity (vector, c)\n+            bm1    double       sqrt(1-|v|^2): reciprocal of Lorenz factor\n+            bpn    double[3][3] bias-precession-nutation matrix\n+            along  double       longitude + s' (radians)\n+            xpl    double       polar motion xp wrt local meridian (radians)\n+            ypl    double       polar motion yp wrt local meridian (radians)\n+            sphi   double       sine of geodetic latitude\n+            cphi   double       cosine of geodetic latitude\n+            diurab double       magnitude of diurnal aberration vector\n+            eral   double       \"local\" Earth rotation angle (radians)\n+            refa   double       refraction constant A (radians)\n+            refb   double       refraction constant B (radians)\n+           n      int          number of bodies (Note 3)\n+           b      eraLDBODY[n] data for each of the n bodies (Notes 3,4):\n+            bm     double       mass of the body (solar masses, Note 5)\n+            dl     double       deflection limiter (Note 6)\n+            pv     [2][3]       barycentric PV of the body (au, au/day)\n+\n+        Returned:\n+           ri,di   double    CIRS RA,Dec (radians)\n+\n+        Notes:\n+\n+        1) Star data for an epoch other than J2000.0 (for example from the\n+           Hipparcos catalog, which has an epoch of J1991.25) will require a\n+           preliminary call to eraPmsafe before use.\n+\n+        2) The proper motion in RA is dRA/dt rather than cos(Dec)*dRA/dt.\n+\n+        3) The struct b contains n entries, one for each body to be\n+           considered.  If n = 0, no gravitational light deflection will be\n+           applied, not even for the Sun.\n+\n+        4) The struct b should include an entry for the Sun as well as for\n+           any planet or other body to be taken into account.  The entries\n+           should be in the order in which the light passes the body.\n+\n+        5) In the entry in the b struct for body i, the mass parameter\n+           b[i].bm can, as required, be adjusted in order to allow for such\n+           effects as quadrupole field.\n+\n+        6) The deflection limiter parameter b[i].dl is phi^2/2, where phi is\n+           the angular separation (in radians) between star and body at\n+           which limiting is applied.  As phi shrinks below the chosen\n+           threshold, the deflection is artificially reduced, reaching zero\n+           for phi = 0.   Example values suitable for a terrestrial\n+           observer, together with masses, are as follows:\n+\n+              body i     b[i].bm        b[i].dl\n+\n+              Sun        1.0            6e-6\n+              Jupiter    0.00095435     3e-9\n+              Saturn     0.00028574     3e-10\n+\n+        7) For efficiency, validation of the contents of the b array is\n+           omitted.  The supplied masses must be greater than zero, the\n+           position and velocity vectors must be right, and the deflection\n+           limiter greater than zero.\n+\n+        Called:\n+           eraPmpx      proper motion and parallax\n+           eraLdn       light deflection by n bodies\n+           eraAb        stellar aberration\n+           eraRxp       product of r-matrix and pv-vector\n+           eraC2s       p-vector to spherical\n+           eraAnp       normalize angle into range 0 to 2pi\n+\n+        This revision:   2021 April 3\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    ri, di = ufunc.atciqn(rc, dc, pr, pd, px, rv, astrom, b)\n+    return ri, di\n+\n+\n+def atciqz(rc, dc, astrom):\n+    \"\"\"\n+    Quick ICRS to CIRS transformation, given precomputed star-\n+    independent astrometry parameters, and assuming zero parallax and\n+    proper motion.\n+\n+    Parameters\n+    ----------\n+    rc : double array\n+    dc : double array\n+    astrom : eraASTROM array\n+\n+    Returns\n+    -------\n+    ri : double array\n+    di : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAtciqz``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a A t c i q z\n+        - - - - - - - - - -\n+\n+        Quick ICRS to CIRS transformation, given precomputed star-\n+        independent astrometry parameters, and assuming zero parallax and\n+        proper motion.\n+\n+        Use of this function is appropriate when efficiency is important and\n+        where many star positions are to be transformed for one date.  The\n+        star-independent parameters can be obtained by calling one of the\n+        functions eraApci[13], eraApcg[13], eraApco[13] or eraApcs[13].\n+\n+        The corresponding function for the case of non-zero parallax and\n+        proper motion is eraAtciq.\n+\n+        Given:\n+           rc,dc  double     ICRS astrometric RA,Dec (radians)\n+           astrom eraASTROM* star-independent astrometry parameters:\n+            pmt    double       PM time interval (SSB, Julian years)\n+            eb     double[3]    SSB to observer (vector, au)\n+            eh     double[3]    Sun to observer (unit vector)\n+            em     double       distance from Sun to observer (au)\n+            v      double[3]    barycentric observer velocity (vector, c)\n+            bm1    double       sqrt(1-|v|^2): reciprocal of Lorenz factor\n+            bpn    double[3][3] bias-precession-nutation matrix\n+            along  double       longitude + s' (radians)\n+            xpl    double       polar motion xp wrt local meridian (radians)\n+            ypl    double       polar motion yp wrt local meridian (radians)\n+            sphi   double       sine of geodetic latitude\n+            cphi   double       cosine of geodetic latitude\n+            diurab double       magnitude of diurnal aberration vector\n+            eral   double       \"local\" Earth rotation angle (radians)\n+            refa   double       refraction constant A (radians)\n+            refb   double       refraction constant B (radians)\n+\n+        Returned:\n+           ri,di  double     CIRS RA,Dec (radians)\n+\n+        Note:\n+\n+           All the vectors are with respect to BCRS axes.\n+\n+        References:\n+\n+           Urban, S. & Seidelmann, P. K. (eds), Explanatory Supplement to\n+           the Astronomical Almanac, 3rd ed., University Science Books\n+           (2013).\n+\n+           Klioner, Sergei A., \"A practical relativistic model for micro-\n+           arcsecond astrometry in space\", Astr. J. 125, 1580-1597 (2003).\n+\n+        Called:\n+           eraS2c       spherical coordinates to unit vector\n+           eraLdsun     light deflection due to Sun\n+           eraAb        stellar aberration\n+           eraRxp       product of r-matrix and p-vector\n+           eraC2s       p-vector to spherical\n+           eraAnp       normalize angle into range +/- pi\n+\n+        This revision:   2013 October 9\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    ri, di = ufunc.atciqz(rc, dc, astrom)\n+    return ri, di\n+\n+\n+def atco13(rc, dc, pr, pd, px, rv, utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl):\n+    \"\"\"\n+    ICRS RA,Dec to observed place.  The caller supplies UTC, site\n+    coordinates, ambient air conditions and observing wavelength.\n+\n+    Parameters\n+    ----------\n+    rc : double array\n+    dc : double array\n+    pr : double array\n+    pd : double array\n+    px : double array\n+    rv : double array\n+    utc1 : double array\n+    utc2 : double array\n+    dut1 : double array\n+    elong : double array\n+    phi : double array\n+    hm : double array\n+    xp : double array\n+    yp : double array\n+    phpa : double array\n+    tc : double array\n+    rh : double array\n+    wl : double array\n+\n+    Returns\n+    -------\n+    aob : double array\n+    zob : double array\n+    hob : double array\n+    dob : double array\n+    rob : double array\n+    eo : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAtco13``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a A t c o 1 3\n+        - - - - - - - - - -\n+\n+        ICRS RA,Dec to observed place.  The caller supplies UTC, site\n+        coordinates, ambient air conditions and observing wavelength.\n+\n+        ERFA models are used for the Earth ephemeris, bias-precession-\n+        nutation, Earth orientation and refraction.\n+\n+        Given:\n+           rc,dc  double   ICRS right ascension at J2000.0 (radians, Note 1)\n+           pr     double   RA proper motion (radians/year, Note 2)\n+           pd     double   Dec proper motion (radians/year)\n+           px     double   parallax (arcsec)\n+           rv     double   radial velocity (km/s, +ve if receding)\n+           utc1   double   UTC as a 2-part...\n+           utc2   double   ...quasi Julian Date (Notes 3-4)\n+           dut1   double   UT1-UTC (seconds, Note 5)\n+           elong  double   longitude (radians, east +ve, Note 6)\n+           phi    double   latitude (geodetic, radians, Note 6)\n+           hm     double   height above ellipsoid (m, geodetic, Notes 6,8)\n+           xp,yp  double   polar motion coordinates (radians, Note 7)\n+           phpa   double   pressure at the observer (hPa = mB, Note 8)\n+           tc     double   ambient temperature at the observer (deg C)\n+           rh     double   relative humidity at the observer (range 0-1)\n+           wl     double   wavelength (micrometers, Note 9)\n+\n+        Returned:\n+           aob    double        observed azimuth (radians: N=0,E=90)\n+           zob    double        observed zenith distance (radians)\n+           hob    double        observed hour angle (radians)\n+           dob    double        observed declination (radians)\n+           rob    double        observed right ascension (CIO-based, radians)\n+           eo     double        equation of the origins (ERA-GST, radians)\n+\n+        Returned (function value):\n+                  int      status: +1 = dubious year (Note 4)\n+                                    0 = OK\n+                                   -1 = unacceptable date\n+\n+        Notes:\n+\n+        1)  Star data for an epoch other than J2000.0 (for example from the\n+            Hipparcos catalog, which has an epoch of J1991.25) will require\n+            a preliminary call to eraPmsafe before use.\n+\n+        2)  The proper motion in RA is dRA/dt rather than cos(Dec)*dRA/dt.\n+\n+        3)  utc1+utc2 is quasi Julian Date (see Note 2), apportioned in any\n+            convenient way between the two arguments, for example where utc1\n+            is the Julian Day Number and utc2 is the fraction of a day.\n+\n+            However, JD cannot unambiguously represent UTC during a leap\n+            second unless special measures are taken.  The convention in the\n+            present function is that the JD day represents UTC days whether\n+            the length is 86399, 86400 or 86401 SI seconds.\n+\n+            Applications should use the function eraDtf2d to convert from\n+            calendar date and time of day into 2-part quasi Julian Date, as\n+            it implements the leap-second-ambiguity convention just\n+            described.\n+\n+        4)  The warning status \"dubious year\" flags UTCs that predate the\n+            introduction of the time scale or that are too far in the\n+            future to be trusted.  See eraDat for further details.\n+\n+        5)  UT1-UTC is tabulated in IERS bulletins.  It increases by exactly\n+            one second at the end of each positive UTC leap second,\n+            introduced in order to keep UT1-UTC within +/- 0.9s.  n.b. This\n+            practice is under review, and in the future UT1-UTC may grow\n+            essentially without limit.\n+\n+        6)  The geographical coordinates are with respect to the ERFA_WGS84\n+            reference ellipsoid.  TAKE CARE WITH THE LONGITUDE SIGN:  the\n+            longitude required by the present function is east-positive\n+            (i.e. right-handed), in accordance with geographical convention.\n+\n+        7)  The polar motion xp,yp can be obtained from IERS bulletins.  The\n+            values are the coordinates (in radians) of the Celestial\n+            Intermediate Pole with respect to the International Terrestrial\n+            Reference System (see IERS Conventions 2003), measured along the\n+            meridians 0 and 90 deg west respectively.  For many\n+            applications, xp and yp can be set to zero.\n+\n+        8)  If hm, the height above the ellipsoid of the observing station\n+            in meters, is not known but phpa, the pressure in hPa (=mB),\n+            is available, an adequate estimate of hm can be obtained from\n+            the expression\n+\n+                  hm = -29.3 * tsl * log ( phpa / 1013.25 );\n+\n+            where tsl is the approximate sea-level air temperature in K\n+            (See Astrophysical Quantities, C.W.Allen, 3rd edition, section\n+            52).  Similarly, if the pressure phpa is not known, it can be\n+            estimated from the height of the observing station, hm, as\n+            follows:\n+\n+                  phpa = 1013.25 * exp ( -hm / ( 29.3 * tsl ) );\n+\n+            Note, however, that the refraction is nearly proportional to\n+            the pressure and that an accurate phpa value is important for\n+            precise work.\n+\n+        9)  The argument wl specifies the observing wavelength in\n+            micrometers.  The transition from optical to radio is assumed to\n+            occur at 100 micrometers (about 3000 GHz).\n+\n+        10) The accuracy of the result is limited by the corrections for\n+            refraction, which use a simple A*tan(z) + B*tan^3(z) model.\n+            Providing the meteorological parameters are known accurately and\n+            there are no gross local effects, the predicted observed\n+            coordinates should be within 0.05 arcsec (optical) or 1 arcsec\n+            (radio) for a zenith distance of less than 70 degrees, better\n+            than 30 arcsec (optical or radio) at 85 degrees and better\n+            than 20 arcmin (optical) or 30 arcmin (radio) at the horizon.\n+\n+            Without refraction, the complementary functions eraAtco13 and\n+            eraAtoc13 are self-consistent to better than 1 microarcsecond\n+            all over the celestial sphere.  With refraction included,\n+            consistency falls off at high zenith distances, but is still\n+            better than 0.05 arcsec at 85 degrees.\n+\n+        11) \"Observed\" Az,ZD means the position that would be seen by a\n+            perfect geodetically aligned theodolite.  (Zenith distance is\n+            used rather than altitude in order to reflect the fact that no\n+            allowance is made for depression of the horizon.)  This is\n+            related to the observed HA,Dec via the standard rotation, using\n+            the geodetic latitude (corrected for polar motion), while the\n+            observed HA and RA are related simply through the Earth rotation\n+            angle and the site longitude.  \"Observed\" RA,Dec or HA,Dec thus\n+            means the position that would be seen by a perfect equatorial\n+            with its polar axis aligned to the Earth's axis of rotation.\n+\n+        12) It is advisable to take great care with units, as even unlikely\n+            values of the input parameters are accepted and processed in\n+            accordance with the models used.\n+\n+        Called:\n+           eraApco13    astrometry parameters, ICRS-observed, 2013\n+           eraAtciq     quick ICRS to CIRS\n+           eraAtioq     quick CIRS to observed\n+\n+        This revision:   2022 May 3\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    aob, zob, hob, dob, rob, eo, c_retval = ufunc.atco13(\n+        rc, dc, pr, pd, px, rv, utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    check_errwarn(c_retval, 'atco13')\n+    return aob, zob, hob, dob, rob, eo\n+\n+\n+STATUS_CODES['atco13'] = {\n+    1: 'dubious year (Note 4)',\n+    0: 'OK',\n+    -1: 'unacceptable date',\n+}\n+\n+\n+def atic13(ri, di, date1, date2):\n+    \"\"\"\n+    Transform star RA,Dec from geocentric CIRS to ICRS astrometric.\n+\n+    Parameters\n+    ----------\n+    ri : double array\n+    di : double array\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rc : double array\n+    dc : double array\n+    eo : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAtic13``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a A t i c 1 3\n+        - - - - - - - - - -\n+\n+        Transform star RA,Dec from geocentric CIRS to ICRS astrometric.\n+\n+        Given:\n+           ri,di  double  CIRS geocentric RA,Dec (radians)\n+           date1  double  TDB as a 2-part...\n+           date2  double  ...Julian Date (Note 1)\n+\n+        Returned:\n+           rc,dc  double  ICRS astrometric RA,Dec (radians)\n+           eo     double  equation of the origins (ERA-GST, radians, Note 4)\n+\n+        Notes:\n+\n+        1) The TDB date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TDB)=2450123.7 could be expressed in any of these ways, among\n+           others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 method is best matched to the way the\n+           argument is handled internally and will deliver the optimum\n+           resolution.  The MJD method and the date & time methods are both\n+           good compromises between resolution and convenience.  For most\n+           applications of this function the choice will not be at all\n+           critical.\n+\n+           TT can be used instead of TDB without any significant impact on\n+           accuracy.\n+\n+        2) Iterative techniques are used for the aberration and light\n+           deflection corrections so that the functions eraAtic13 (or\n+           eraAticq) and eraAtci13 (or eraAtciq) are accurate inverses;\n+           even at the edge of the Sun's disk the discrepancy is only about\n+           1 nanoarcsecond.\n+\n+        3) The available accuracy is better than 1 milliarcsecond, limited\n+           mainly by the precession-nutation model that is used, namely\n+           IAU 2000A/2006.  Very close to solar system bodies, additional\n+           errors of up to several milliarcseconds can occur because of\n+           unmodeled light deflection;  however, the Sun's contribution is\n+           taken into account, to first order.  The accuracy limitations of\n+           the ERFA function eraEpv00 (used to compute Earth position and\n+           velocity) can contribute aberration errors of up to\n+           5 microarcseconds.  Light deflection at the Sun's limb is\n+           uncertain at the 0.4 mas level.\n+\n+        4) Should the transformation to (equinox based) J2000.0 mean place\n+           be required rather than (CIO based) ICRS coordinates, subtract the\n+           equation of the origins from the returned right ascension:\n+           RA = RI - EO.  (The eraAnp function can then be applied, as\n+           required, to keep the result in the conventional 0-2pi range.)\n+\n+        Called:\n+           eraApci13    astrometry parameters, ICRS-CIRS, 2013\n+           eraAticq     quick CIRS to ICRS astrometric\n+\n+        This revision:   2022 May 3\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rc, dc, eo = ufunc.atic13(ri, di, date1, date2)\n+    return rc, dc, eo\n+\n+\n+def aticq(ri, di, astrom):\n+    \"\"\"\n+    Quick CIRS RA,Dec to ICRS astrometric place, given the star-\n+    independent astrometry parameters.\n+\n+    Parameters\n+    ----------\n+    ri : double array\n+    di : double array\n+    astrom : eraASTROM array\n+\n+    Returns\n+    -------\n+    rc : double array\n+    dc : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAticq``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a A t i c q\n+        - - - - - - - - -\n+\n+        Quick CIRS RA,Dec to ICRS astrometric place, given the star-\n+        independent astrometry parameters.\n+\n+        Use of this function is appropriate when efficiency is important and\n+        where many star positions are all to be transformed for one date.\n+        The star-independent astrometry parameters can be obtained by\n+        calling one of the functions eraApci[13], eraApcg[13], eraApco[13]\n+        or eraApcs[13].\n+\n+        Given:\n+           ri,di  double     CIRS RA,Dec (radians)\n+           astrom eraASTROM* star-independent astrometry parameters:\n+            pmt    double       PM time interval (SSB, Julian years)\n+            eb     double[3]    SSB to observer (vector, au)\n+            eh     double[3]    Sun to observer (unit vector)\n+            em     double       distance from Sun to observer (au)\n+            v      double[3]    barycentric observer velocity (vector, c)\n+            bm1    double       sqrt(1-|v|^2): reciprocal of Lorenz factor\n+            bpn    double[3][3] bias-precession-nutation matrix\n+            along  double       longitude + s' (radians)\n+            xpl    double       polar motion xp wrt local meridian (radians)\n+            ypl    double       polar motion yp wrt local meridian (radians)\n+            sphi   double       sine of geodetic latitude\n+            cphi   double       cosine of geodetic latitude\n+            diurab double       magnitude of diurnal aberration vector\n+            eral   double       \"local\" Earth rotation angle (radians)\n+            refa   double       refraction constant A (radians)\n+            refb   double       refraction constant B (radians)\n+\n+        Returned:\n+           rc,dc  double     ICRS astrometric RA,Dec (radians)\n+\n+        Notes:\n+\n+        1) Only the Sun is taken into account in the light deflection\n+           correction.\n+\n+        2) Iterative techniques are used for the aberration and light\n+           deflection corrections so that the functions eraAtic13 (or\n+           eraAticq) and eraAtci13 (or eraAtciq) are accurate inverses;\n+           even at the edge of the Sun's disk the discrepancy is only about\n+           1 nanoarcsecond.\n+\n+        Called:\n+           eraS2c       spherical coordinates to unit vector\n+           eraTrxp      product of transpose of r-matrix and p-vector\n+           eraZp        zero p-vector\n+           eraAb        stellar aberration\n+           eraLdsun     light deflection by the Sun\n+           eraC2s       p-vector to spherical\n+           eraAnp       normalize angle into range +/- pi\n+\n+        This revision:   2013 October 9\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rc, dc = ufunc.aticq(ri, di, astrom)\n+    return rc, dc\n+\n+\n+def aticqn(ri, di, astrom, b):\n+    \"\"\"\n+    Quick CIRS to ICRS astrometric place transformation, given the star-\n+    independent astrometry parameters plus a list of light-deflecting\n+    bodies.\n+\n+    Parameters\n+    ----------\n+    ri : double array\n+    di : double array\n+    astrom : eraASTROM array\n+    b : eraLDBODY array\n+\n+    Returns\n+    -------\n+    rc : double array\n+    dc : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAticqn``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a A t i c q n\n+        - - - - - - - - - -\n+\n+        Quick CIRS to ICRS astrometric place transformation, given the star-\n+        independent astrometry parameters plus a list of light-deflecting\n+        bodies.\n+\n+        Use of this function is appropriate when efficiency is important and\n+        where many star positions are all to be transformed for one date.\n+        The star-independent astrometry parameters can be obtained by\n+        calling one of the functions eraApci[13], eraApcg[13], eraApco[13]\n+        or eraApcs[13].\n+\n+        If the only light-deflecting body to be taken into account is the\n+        Sun, the eraAticq function can be used instead.\n+\n+        Given:\n+           ri,di  double      CIRS RA,Dec (radians)\n+           astrom eraASTROM        star-independent astrometry parameters:\n+            pmt    double       PM time interval (SSB, Julian years)\n+            eb     double[3]    SSB to observer (vector, au)\n+            eh     double[3]    Sun to observer (unit vector)\n+            em     double       distance from Sun to observer (au)\n+            v      double[3]    barycentric observer velocity (vector, c)\n+            bm1    double       sqrt(1-|v|^2): reciprocal of Lorenz factor\n+            bpn    double[3][3] bias-precession-nutation matrix\n+            along  double       longitude + s' (radians)\n+            xpl    double       polar motion xp wrt local meridian (radians)\n+            ypl    double       polar motion yp wrt local meridian (radians)\n+            sphi   double       sine of geodetic latitude\n+            cphi   double       cosine of geodetic latitude\n+            diurab double       magnitude of diurnal aberration vector\n+            eral   double       \"local\" Earth rotation angle (radians)\n+            refa   double       refraction constant A (radians)\n+            refb   double       refraction constant B (radians)\n+           n      int          number of bodies (Note 3)\n+           b      eraLDBODY[n] data for each of the n bodies (Notes 3,4):\n+            bm     double       mass of the body (solar masses, Note 5)\n+            dl     double       deflection limiter (Note 6)\n+            pv     [2][3]       barycentric PV of the body (au, au/day)\n+\n+        Returned:\n+           rc,dc  double     ICRS astrometric RA,Dec (radians)\n+\n+        Notes:\n+\n+        1) Iterative techniques are used for the aberration and light\n+           deflection corrections so that the functions eraAticqn and\n+           eraAtciqn are accurate inverses; even at the edge of the Sun's\n+           disk the discrepancy is only about 1 nanoarcsecond.\n+\n+        2) If the only light-deflecting body to be taken into account is the\n+           Sun, the eraAticq function can be used instead.\n+\n+        3) The struct b contains n entries, one for each body to be\n+           considered.  If n = 0, no gravitational light deflection will be\n+           applied, not even for the Sun.\n+\n+        4) The struct b should include an entry for the Sun as well as for\n+           any planet or other body to be taken into account.  The entries\n+           should be in the order in which the light passes the body.\n+\n+        5) In the entry in the b struct for body i, the mass parameter\n+           b[i].bm can, as required, be adjusted in order to allow for such\n+           effects as quadrupole field.\n+\n+        6) The deflection limiter parameter b[i].dl is phi^2/2, where phi is\n+           the angular separation (in radians) between star and body at\n+           which limiting is applied.  As phi shrinks below the chosen\n+           threshold, the deflection is artificially reduced, reaching zero\n+           for phi = 0.   Example values suitable for a terrestrial\n+           observer, together with masses, are as follows:\n+\n+              body i     b[i].bm        b[i].dl\n+\n+              Sun        1.0            6e-6\n+              Jupiter    0.00095435     3e-9\n+              Saturn     0.00028574     3e-10\n+\n+        7) For efficiency, validation of the contents of the b array is\n+           omitted.  The supplied masses must be greater than zero, the\n+           position and velocity vectors must be right, and the deflection\n+           limiter greater than zero.\n+\n+        Called:\n+           eraS2c       spherical coordinates to unit vector\n+           eraTrxp      product of transpose of r-matrix and p-vector\n+           eraZp        zero p-vector\n+           eraAb        stellar aberration\n+           eraLdn       light deflection by n bodies\n+           eraC2s       p-vector to spherical\n+           eraAnp       normalize angle into range +/- pi\n+\n+        This revision:   2021 January 6\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rc, dc = ufunc.aticqn(ri, di, astrom, b)\n+    return rc, dc\n+\n+\n+def atio13(ri, di, utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl):\n+    \"\"\"\n+    CIRS RA,Dec to observed place.  The caller supplies UTC, site\n+    coordinates, ambient air conditions and observing wavelength.\n+\n+    Parameters\n+    ----------\n+    ri : double array\n+    di : double array\n+    utc1 : double array\n+    utc2 : double array\n+    dut1 : double array\n+    elong : double array\n+    phi : double array\n+    hm : double array\n+    xp : double array\n+    yp : double array\n+    phpa : double array\n+    tc : double array\n+    rh : double array\n+    wl : double array\n+\n+    Returns\n+    -------\n+    aob : double array\n+    zob : double array\n+    hob : double array\n+    dob : double array\n+    rob : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAtio13``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a A t i o 1 3\n+        - - - - - - - - - -\n+\n+        CIRS RA,Dec to observed place.  The caller supplies UTC, site\n+        coordinates, ambient air conditions and observing wavelength.\n+\n+        Given:\n+           ri     double   CIRS right ascension (CIO-based, radians)\n+           di     double   CIRS declination (radians)\n+           utc1   double   UTC as a 2-part...\n+           utc2   double   ...quasi Julian Date (Notes 1,2)\n+           dut1   double   UT1-UTC (seconds, Note 3)\n+           elong  double   longitude (radians, east +ve, Note 4)\n+           phi    double   geodetic latitude (radians, Note 4)\n+           hm     double   height above ellipsoid (m, geodetic Notes 4,6)\n+           xp,yp  double   polar motion coordinates (radians, Note 5)\n+           phpa   double   pressure at the observer (hPa = mB, Note 6)\n+           tc     double   ambient temperature at the observer (deg C)\n+           rh     double   relative humidity at the observer (range 0-1)\n+           wl     double   wavelength (micrometers, Note 7)\n+\n+        Returned:\n+           aob    double        observed azimuth (radians: N=0,E=90)\n+           zob    double        observed zenith distance (radians)\n+           hob    double        observed hour angle (radians)\n+           dob    double        observed declination (radians)\n+           rob    double        observed right ascension (CIO-based, radians)\n+\n+        Returned (function value):\n+                  int      status: +1 = dubious year (Note 2)\n+                                    0 = OK\n+                                   -1 = unacceptable date\n+\n+        Notes:\n+\n+        1)  utc1+utc2 is quasi Julian Date (see Note 2), apportioned in any\n+            convenient way between the two arguments, for example where utc1\n+            is the Julian Day Number and utc2 is the fraction of a day.\n+\n+            However, JD cannot unambiguously represent UTC during a leap\n+            second unless special measures are taken.  The convention in the\n+            present function is that the JD day represents UTC days whether\n+            the length is 86399, 86400 or 86401 SI seconds.\n+\n+            Applications should use the function eraDtf2d to convert from\n+            calendar date and time of day into 2-part quasi Julian Date, as\n+            it implements the leap-second-ambiguity convention just\n+            described.\n+\n+        2)  The warning status \"dubious year\" flags UTCs that predate the\n+            introduction of the time scale or that are too far in the\n+            future to be trusted.  See eraDat for further details.\n+\n+        3)  UT1-UTC is tabulated in IERS bulletins.  It increases by exactly\n+            one second at the end of each positive UTC leap second,\n+            introduced in order to keep UT1-UTC within +/- 0.9s.  n.b. This\n+            practice is under review, and in the future UT1-UTC may grow\n+            essentially without limit.\n+\n+        4)  The geographical coordinates are with respect to the ERFA_WGS84\n+            reference ellipsoid.  TAKE CARE WITH THE LONGITUDE SIGN:  the\n+            longitude required by the present function is east-positive\n+            (i.e. right-handed), in accordance with geographical convention.\n+\n+        5)  The polar motion xp,yp can be obtained from IERS bulletins.  The\n+            values are the coordinates (in radians) of the Celestial\n+            Intermediate Pole with respect to the International Terrestrial\n+            Reference System (see IERS Conventions 2003), measured along the\n+            meridians 0 and 90 deg west respectively.  For many\n+            applications, xp and yp can be set to zero.\n+\n+        6)  If hm, the height above the ellipsoid of the observing station\n+            in meters, is not known but phpa, the pressure in hPa (=mB), is\n+            available, an adequate estimate of hm can be obtained from the\n+            expression\n+\n+                  hm = -29.3 * tsl * log ( phpa / 1013.25 );\n+\n+            where tsl is the approximate sea-level air temperature in K\n+            (See Astrophysical Quantities, C.W.Allen, 3rd edition, section\n+            52).  Similarly, if the pressure phpa is not known, it can be\n+            estimated from the height of the observing station, hm, as\n+            follows:\n+\n+                  phpa = 1013.25 * exp ( -hm / ( 29.3 * tsl ) );\n+\n+            Note, however, that the refraction is nearly proportional to\n+            the pressure and that an accurate phpa value is important for\n+            precise work.\n+\n+        7)  The argument wl specifies the observing wavelength in\n+            micrometers.  The transition from optical to radio is assumed to\n+            occur at 100 micrometers (about 3000 GHz).\n+\n+        8)  \"Observed\" Az,ZD means the position that would be seen by a\n+            perfect geodetically aligned theodolite.  (Zenith distance is\n+            used rather than altitude in order to reflect the fact that no\n+            allowance is made for depression of the horizon.)  This is\n+            related to the observed HA,Dec via the standard rotation, using\n+            the geodetic latitude (corrected for polar motion), while the\n+            observed HA and RA are related simply through the Earth rotation\n+            angle and the site longitude.  \"Observed\" RA,Dec or HA,Dec thus\n+            means the position that would be seen by a perfect equatorial\n+            with its polar axis aligned to the Earth's axis of rotation.\n+\n+        9)  The accuracy of the result is limited by the corrections for\n+            refraction, which use a simple A*tan(z) + B*tan^3(z) model.\n+            Providing the meteorological parameters are known accurately and\n+            there are no gross local effects, the predicted astrometric\n+            coordinates should be within 0.05 arcsec (optical) or 1 arcsec\n+            (radio) for a zenith distance of less than 70 degrees, better\n+            than 30 arcsec (optical or radio) at 85 degrees and better\n+            than 20 arcmin (optical) or 30 arcmin (radio) at the horizon.\n+\n+        10) The complementary functions eraAtio13 and eraAtoi13 are self-\n+            consistent to better than 1 microarcsecond all over the\n+            celestial sphere.\n+\n+        11) It is advisable to take great care with units, as even unlikely\n+            values of the input parameters are accepted and processed in\n+            accordance with the models used.\n+\n+        Called:\n+           eraApio13    astrometry parameters, CIRS-observed, 2013\n+           eraAtioq     quick CIRS to observed\n+\n+        This revision:   2021 February 24\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    aob, zob, hob, dob, rob, c_retval = ufunc.atio13(\n+        ri, di, utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    check_errwarn(c_retval, 'atio13')\n+    return aob, zob, hob, dob, rob\n+\n+\n+STATUS_CODES['atio13'] = {\n+    1: 'dubious year (Note 2)',\n+    0: 'OK',\n+    -1: 'unacceptable date',\n+}\n+\n+\n+def atioq(ri, di, astrom):\n+    \"\"\"\n+    Quick CIRS to observed place transformation.\n+\n+    Parameters\n+    ----------\n+    ri : double array\n+    di : double array\n+    astrom : eraASTROM array\n+\n+    Returns\n+    -------\n+    aob : double array\n+    zob : double array\n+    hob : double array\n+    dob : double array\n+    rob : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAtioq``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a A t i o q\n+        - - - - - - - - -\n+\n+        Quick CIRS to observed place transformation.\n+\n+        Use of this function is appropriate when efficiency is important and\n+        where many star positions are all to be transformed for one date.\n+        The star-independent astrometry parameters can be obtained by\n+        calling eraApio[13] or eraApco[13].\n+\n+        Given:\n+           ri     double     CIRS right ascension\n+           di     double     CIRS declination\n+           astrom eraASTROM* star-independent astrometry parameters:\n+            pmt    double       PM time interval (SSB, Julian years)\n+            eb     double[3]    SSB to observer (vector, au)\n+            eh     double[3]    Sun to observer (unit vector)\n+            em     double       distance from Sun to observer (au)\n+            v      double[3]    barycentric observer velocity (vector, c)\n+            bm1    double       sqrt(1-|v|^2): reciprocal of Lorenz factor\n+            bpn    double[3][3] bias-precession-nutation matrix\n+            along  double       longitude + s' (radians)\n+            xpl    double       polar motion xp wrt local meridian (radians)\n+            ypl    double       polar motion yp wrt local meridian (radians)\n+            sphi   double       sine of geodetic latitude\n+            cphi   double       cosine of geodetic latitude\n+            diurab double       magnitude of diurnal aberration vector\n+            eral   double       \"local\" Earth rotation angle (radians)\n+            refa   double       refraction constant A (radians)\n+            refb   double       refraction constant B (radians)\n+\n+        Returned:\n+           aob    double          observed azimuth (radians: N=0,E=90)\n+           zob    double          observed zenith distance (radians)\n+           hob    double          observed hour angle (radians)\n+           dob    double          observed declination (radians)\n+           rob    double          observed right ascension (CIO-based, radians)\n+\n+        Notes:\n+\n+        1) This function returns zenith distance rather than altitude in\n+           order to reflect the fact that no allowance is made for\n+           depression of the horizon.\n+\n+        2) The accuracy of the result is limited by the corrections for\n+           refraction, which use a simple A*tan(z) + B*tan^3(z) model.\n+           Providing the meteorological parameters are known accurately and\n+           there are no gross local effects, the predicted observed\n+           coordinates should be within 0.05 arcsec (optical) or 1 arcsec\n+           (radio) for a zenith distance of less than 70 degrees, better\n+           than 30 arcsec (optical or radio) at 85 degrees and better\n+           than 20 arcmin (optical) or 30 arcmin (radio) at the horizon.\n+\n+           Without refraction, the complementary functions eraAtioq and\n+           eraAtoiq are self-consistent to better than 1 microarcsecond all\n+           over the celestial sphere.  With refraction included, consistency\n+           falls off at high zenith distances, but is still better than\n+           0.05 arcsec at 85 degrees.\n+\n+        3) It is advisable to take great care with units, as even unlikely\n+           values of the input parameters are accepted and processed in\n+           accordance with the models used.\n+\n+        4) The CIRS RA,Dec is obtained from a star catalog mean place by\n+           allowing for space motion, parallax, the Sun's gravitational lens\n+           effect, annual aberration and precession-nutation.  For star\n+           positions in the ICRS, these effects can be applied by means of\n+           the eraAtci13 (etc.) functions.  Starting from classical \"mean\n+           place\" systems, additional transformations will be needed first.\n+\n+        5) \"Observed\" Az,El means the position that would be seen by a\n+           perfect geodetically aligned theodolite.  This is obtained from\n+           the CIRS RA,Dec by allowing for Earth orientation and diurnal\n+           aberration, rotating from equator to horizon coordinates, and\n+           then adjusting for refraction.  The HA,Dec is obtained by\n+           rotating back into equatorial coordinates, and is the position\n+           that would be seen by a perfect equatorial with its polar axis\n+           aligned to the Earth's axis of rotation.  Finally, the\n+           (CIO-based) RA is obtained by subtracting the HA from the local\n+           ERA.\n+\n+        6) The star-independent CIRS-to-observed-place parameters in ASTROM\n+           may be computed with eraApio[13] or eraApco[13].  If nothing has\n+           changed significantly except the time, eraAper[13] may be used to\n+           perform the requisite adjustment to the astrom structure.\n+\n+        Called:\n+           eraS2c       spherical coordinates to unit vector\n+           eraC2s       p-vector to spherical\n+           eraAnp       normalize angle into range 0 to 2pi\n+\n+        This revision:   2022 August 30\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    aob, zob, hob, dob, rob = ufunc.atioq(ri, di, astrom)\n+    return aob, zob, hob, dob, rob\n+\n+\n+def atoc13(type, ob1, ob2, utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl):\n+    \"\"\"\n+    Observed place at a groundbased site to to ICRS astrometric RA,Dec.\n+    The caller supplies UTC, site coordinates, ambient air conditions\n+    and observing wavelength.\n+\n+    Parameters\n+    ----------\n+    type : const char array\n+    ob1 : double array\n+    ob2 : double array\n+    utc1 : double array\n+    utc2 : double array\n+    dut1 : double array\n+    elong : double array\n+    phi : double array\n+    hm : double array\n+    xp : double array\n+    yp : double array\n+    phpa : double array\n+    tc : double array\n+    rh : double array\n+    wl : double array\n+\n+    Returns\n+    -------\n+    rc : double array\n+    dc : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAtoc13``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a A t o c 1 3\n+        - - - - - - - - - -\n+\n+        Observed place at a groundbased site to to ICRS astrometric RA,Dec.\n+        The caller supplies UTC, site coordinates, ambient air conditions\n+        and observing wavelength.\n+\n+        Given:\n+           type   char[]   type of coordinates - \"R\", \"H\" or \"A\" (Notes 1,2)\n+           ob1    double   observed Az, HA or RA (radians; Az is N=0,E=90)\n+           ob2    double   observed ZD or Dec (radians)\n+           utc1   double   UTC as a 2-part...\n+           utc2   double   ...quasi Julian Date (Notes 3,4)\n+           dut1   double   UT1-UTC (seconds, Note 5)\n+           elong  double   longitude (radians, east +ve, Note 6)\n+           phi    double   geodetic latitude (radians, Note 6)\n+           hm     double   height above ellipsoid (m, geodetic Notes 6,8)\n+           xp,yp  double   polar motion coordinates (radians, Note 7)\n+           phpa   double   pressure at the observer (hPa = mB, Note 8)\n+           tc     double   ambient temperature at the observer (deg C)\n+           rh     double   relative humidity at the observer (range 0-1)\n+           wl     double   wavelength (micrometers, Note 9)\n+\n+        Returned:\n+           rc,dc  double   ICRS astrometric RA,Dec (radians)\n+\n+        Returned (function value):\n+                  int      status: +1 = dubious year (Note 4)\n+                                    0 = OK\n+                                   -1 = unacceptable date\n+\n+        Notes:\n+\n+        1)  \"Observed\" Az,ZD means the position that would be seen by a\n+            perfect geodetically aligned theodolite.  (Zenith distance is\n+            used rather than altitude in order to reflect the fact that no\n+            allowance is made for depression of the horizon.)  This is\n+            related to the observed HA,Dec via the standard rotation, using\n+            the geodetic latitude (corrected for polar motion), while the\n+            observed HA and (CIO-based) RA are related simply through the\n+            Earth rotation angle and the site longitude.  \"Observed\" RA,Dec\n+            or HA,Dec thus means the position that would be seen by a\n+            perfect equatorial with its polar axis aligned to the Earth's\n+            axis of rotation.\n+\n+        2)  Only the first character of the type argument is significant.\n+            \"R\" or \"r\" indicates that ob1 and ob2 are the observed right\n+            ascension (CIO-based) and declination;  \"H\" or \"h\" indicates\n+            that they are hour angle (west +ve) and declination;  anything\n+            else (\"A\" or \"a\" is recommended) indicates that ob1 and ob2 are\n+            azimuth (north zero, east 90 deg) and zenith distance.\n+\n+        3)  utc1+utc2 is quasi Julian Date (see Note 2), apportioned in any\n+            convenient way between the two arguments, for example where utc1\n+            is the Julian Day Number and utc2 is the fraction of a day.\n+\n+            However, JD cannot unambiguously represent UTC during a leap\n+            second unless special measures are taken.  The convention in the\n+            present function is that the JD day represents UTC days whether\n+            the length is 86399, 86400 or 86401 SI seconds.\n+\n+            Applications should use the function eraDtf2d to convert from\n+            calendar date and time of day into 2-part quasi Julian Date, as\n+            it implements the leap-second-ambiguity convention just\n+            described.\n+\n+        4)  The warning status \"dubious year\" flags UTCs that predate the\n+            introduction of the time scale or that are too far in the\n+            future to be trusted.  See eraDat for further details.\n+\n+        5)  UT1-UTC is tabulated in IERS bulletins.  It increases by exactly\n+            one second at the end of each positive UTC leap second,\n+            introduced in order to keep UT1-UTC within +/- 0.9s.  n.b. This\n+            practice is under review, and in the future UT1-UTC may grow\n+            essentially without limit.\n+\n+        6)  The geographical coordinates are with respect to the ERFA_WGS84\n+            reference ellipsoid.  TAKE CARE WITH THE LONGITUDE SIGN:  the\n+            longitude required by the present function is east-positive\n+            (i.e. right-handed), in accordance with geographical convention.\n+\n+        7)  The polar motion xp,yp can be obtained from IERS bulletins.  The\n+            values are the coordinates (in radians) of the Celestial\n+            Intermediate Pole with respect to the International Terrestrial\n+            Reference System (see IERS Conventions 2003), measured along the\n+            meridians 0 and 90 deg west respectively.  For many\n+            applications, xp and yp can be set to zero.\n+\n+        8)  If hm, the height above the ellipsoid of the observing station\n+            in meters, is not known but phpa, the pressure in hPa (=mB), is\n+            available, an adequate estimate of hm can be obtained from the\n+            expression\n+\n+                  hm = -29.3 * tsl * log ( phpa / 1013.25 );\n+\n+            where tsl is the approximate sea-level air temperature in K\n+            (See Astrophysical Quantities, C.W.Allen, 3rd edition, section\n+            52).  Similarly, if the pressure phpa is not known, it can be\n+            estimated from the height of the observing station, hm, as\n+            follows:\n+\n+                  phpa = 1013.25 * exp ( -hm / ( 29.3 * tsl ) );\n+\n+            Note, however, that the refraction is nearly proportional to\n+            the pressure and that an accurate phpa value is important for\n+            precise work.\n+\n+        9)  The argument wl specifies the observing wavelength in\n+            micrometers.  The transition from optical to radio is assumed to\n+            occur at 100 micrometers (about 3000 GHz).\n+\n+        10) The accuracy of the result is limited by the corrections for\n+            refraction, which use a simple A*tan(z) + B*tan^3(z) model.\n+            Providing the meteorological parameters are known accurately and\n+            there are no gross local effects, the predicted astrometric\n+            coordinates should be within 0.05 arcsec (optical) or 1 arcsec\n+            (radio) for a zenith distance of less than 70 degrees, better\n+            than 30 arcsec (optical or radio) at 85 degrees and better\n+            than 20 arcmin (optical) or 30 arcmin (radio) at the horizon.\n+\n+            Without refraction, the complementary functions eraAtco13 and\n+            eraAtoc13 are self-consistent to better than 1 microarcsecond\n+            all over the celestial sphere.  With refraction included,\n+            consistency falls off at high zenith distances, but is still\n+            better than 0.05 arcsec at 85 degrees.\n+\n+        11) It is advisable to take great care with units, as even unlikely\n+            values of the input parameters are accepted and processed in\n+            accordance with the models used.\n+\n+        Called:\n+           eraApco13    astrometry parameters, ICRS-observed\n+           eraAtoiq     quick observed to CIRS\n+           eraAticq     quick CIRS to ICRS\n+\n+        This revision:   2022 August 30\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rc, dc, c_retval = ufunc.atoc13(\n+        type, ob1, ob2, utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    check_errwarn(c_retval, 'atoc13')\n+    return rc, dc\n+\n+\n+STATUS_CODES['atoc13'] = {\n+    1: 'dubious year (Note 4)',\n+    0: 'OK',\n+    -1: 'unacceptable date',\n+}\n+\n+\n+def atoi13(type, ob1, ob2, utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl):\n+    \"\"\"\n+    Observed place to CIRS.  The caller supplies UTC, site coordinates,\n+    ambient air conditions and observing wavelength.\n+\n+    Parameters\n+    ----------\n+    type : const char array\n+    ob1 : double array\n+    ob2 : double array\n+    utc1 : double array\n+    utc2 : double array\n+    dut1 : double array\n+    elong : double array\n+    phi : double array\n+    hm : double array\n+    xp : double array\n+    yp : double array\n+    phpa : double array\n+    tc : double array\n+    rh : double array\n+    wl : double array\n+\n+    Returns\n+    -------\n+    ri : double array\n+    di : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAtoi13``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a A t o i 1 3\n+        - - - - - - - - - -\n+\n+        Observed place to CIRS.  The caller supplies UTC, site coordinates,\n+        ambient air conditions and observing wavelength.\n+\n+        Given:\n+           type   char[]   type of coordinates - \"R\", \"H\" or \"A\" (Notes 1,2)\n+           ob1    double   observed Az, HA or RA (radians; Az is N=0,E=90)\n+           ob2    double   observed ZD or Dec (radians)\n+           utc1   double   UTC as a 2-part...\n+           utc2   double   ...quasi Julian Date (Notes 3,4)\n+           dut1   double   UT1-UTC (seconds, Note 5)\n+           elong  double   longitude (radians, east +ve, Note 6)\n+           phi    double   geodetic latitude (radians, Note 6)\n+           hm     double   height above the ellipsoid (meters, Notes 6,8)\n+           xp,yp  double   polar motion coordinates (radians, Note 7)\n+           phpa   double   pressure at the observer (hPa = mB, Note 8)\n+           tc     double   ambient temperature at the observer (deg C)\n+           rh     double   relative humidity at the observer (range 0-1)\n+           wl     double   wavelength (micrometers, Note 9)\n+\n+        Returned:\n+           ri     double        CIRS right ascension (CIO-based, radians)\n+           di     double        CIRS declination (radians)\n+\n+        Returned (function value):\n+                  int      status: +1 = dubious year (Note 2)\n+                                    0 = OK\n+                                   -1 = unacceptable date\n+\n+        Notes:\n+\n+        1)  \"Observed\" Az,ZD means the position that would be seen by a\n+            perfect geodetically aligned theodolite.  (Zenith distance is\n+            used rather than altitude in order to reflect the fact that no\n+            allowance is made for depression of the horizon.)  This is\n+            related to the observed HA,Dec via the standard rotation, using\n+            the geodetic latitude (corrected for polar motion), while the\n+            observed HA and (CIO-based) RA are related simply through the\n+            Earth rotation angle and the site longitude.  \"Observed\" RA,Dec\n+            or HA,Dec thus means the position that would be seen by a\n+            perfect equatorial with its polar axis aligned to the Earth's\n+            axis of rotation.\n+\n+        2)  Only the first character of the type argument is significant.\n+            \"R\" or \"r\" indicates that ob1 and ob2 are the observed right\n+            ascension and declination;  \"H\" or \"h\" indicates that they are\n+            hour angle (west +ve) and declination;  anything else (\"A\" or\n+            \"a\" is recommended) indicates that ob1 and ob2 are azimuth\n+            (north zero, east 90 deg) and zenith distance.\n+\n+        3)  utc1+utc2 is quasi Julian Date (see Note 2), apportioned in any\n+            convenient way between the two arguments, for example where utc1\n+            is the Julian Day Number and utc2 is the fraction of a day.\n+\n+            However, JD cannot unambiguously represent UTC during a leap\n+            second unless special measures are taken.  The convention in the\n+            present function is that the JD day represents UTC days whether\n+            the length is 86399, 86400 or 86401 SI seconds.\n+\n+            Applications should use the function eraDtf2d to convert from\n+            calendar date and time of day into 2-part quasi Julian Date, as\n+            it implements the leap-second-ambiguity convention just\n+            described.\n+\n+        4)  The warning status \"dubious year\" flags UTCs that predate the\n+            introduction of the time scale or that are too far in the\n+            future to be trusted.  See eraDat for further details.\n+\n+        5)  UT1-UTC is tabulated in IERS bulletins.  It increases by exactly\n+            one second at the end of each positive UTC leap second,\n+            introduced in order to keep UT1-UTC within +/- 0.9s.  n.b. This\n+            practice is under review, and in the future UT1-UTC may grow\n+            essentially without limit.\n+\n+        6)  The geographical coordinates are with respect to the ERFA_WGS84\n+            reference ellipsoid.  TAKE CARE WITH THE LONGITUDE SIGN:  the\n+            longitude required by the present function is east-positive\n+            (i.e. right-handed), in accordance with geographical convention.\n+\n+        7)  The polar motion xp,yp can be obtained from IERS bulletins.  The\n+            values are the coordinates (in radians) of the Celestial\n+            Intermediate Pole with respect to the International Terrestrial\n+            Reference System (see IERS Conventions 2003), measured along the\n+            meridians 0 and 90 deg west respectively.  For many\n+            applications, xp and yp can be set to zero.\n+\n+        8)  If hm, the height above the ellipsoid of the observing station\n+            in meters, is not known but phpa, the pressure in hPa (=mB), is\n+            available, an adequate estimate of hm can be obtained from the\n+            expression\n+\n+                  hm = -29.3 * tsl * log ( phpa / 1013.25 );\n+\n+            where tsl is the approximate sea-level air temperature in K\n+            (See Astrophysical Quantities, C.W.Allen, 3rd edition, section\n+            52).  Similarly, if the pressure phpa is not known, it can be\n+            estimated from the height of the observing station, hm, as\n+            follows:\n+\n+                  phpa = 1013.25 * exp ( -hm / ( 29.3 * tsl ) );\n+\n+            Note, however, that the refraction is nearly proportional to\n+            the pressure and that an accurate phpa value is important for\n+            precise work.\n+\n+        9)  The argument wl specifies the observing wavelength in\n+            micrometers.  The transition from optical to radio is assumed to\n+            occur at 100 micrometers (about 3000 GHz).\n+\n+        10) The accuracy of the result is limited by the corrections for\n+            refraction, which use a simple A*tan(z) + B*tan^3(z) model.\n+            Providing the meteorological parameters are known accurately and\n+            there are no gross local effects, the predicted astrometric\n+            coordinates should be within 0.05 arcsec (optical) or 1 arcsec\n+            (radio) for a zenith distance of less than 70 degrees, better\n+            than 30 arcsec (optical or radio) at 85 degrees and better\n+            than 20 arcmin (optical) or 30 arcmin (radio) at the horizon.\n+\n+            Without refraction, the complementary functions eraAtio13 and\n+            eraAtoi13 are self-consistent to better than 1 microarcsecond\n+            all over the celestial sphere.  With refraction included,\n+            consistency falls off at high zenith distances, but is still\n+            better than 0.05 arcsec at 85 degrees.\n+\n+        12) It is advisable to take great care with units, as even unlikely\n+            values of the input parameters are accepted and processed in\n+            accordance with the models used.\n+\n+        Called:\n+           eraApio13    astrometry parameters, CIRS-observed, 2013\n+           eraAtoiq     quick observed to CIRS\n+\n+        This revision:   2022 August 30\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    ri, di, c_retval = ufunc.atoi13(\n+        type, ob1, ob2, utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    check_errwarn(c_retval, 'atoi13')\n+    return ri, di\n+\n+\n+STATUS_CODES['atoi13'] = {\n+    1: 'dubious year (Note 2)',\n+    0: 'OK',\n+    -1: 'unacceptable date',\n+}\n+\n+\n+def atoiq(type, ob1, ob2, astrom):\n+    \"\"\"\n+    Quick observed place to CIRS, given the star-independent astrometry\n+    parameters.\n+\n+    Parameters\n+    ----------\n+    type : const char array\n+    ob1 : double array\n+    ob2 : double array\n+    astrom : eraASTROM array\n+\n+    Returns\n+    -------\n+    ri : double array\n+    di : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAtoiq``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a A t o i q\n+        - - - - - - - - -\n+\n+        Quick observed place to CIRS, given the star-independent astrometry\n+        parameters.\n+\n+        Use of this function is appropriate when efficiency is important and\n+        where many star positions are all to be transformed for one date.\n+        The star-independent astrometry parameters can be obtained by\n+        calling eraApio[13] or eraApco[13].\n+\n+        Given:\n+           type   char[]     type of coordinates: \"R\", \"H\" or \"A\" (Note 1)\n+           ob1    double     observed Az, HA or RA (radians; Az is N=0,E=90)\n+           ob2    double     observed ZD or Dec (radians)\n+           astrom eraASTROM* star-independent astrometry parameters:\n+            pmt    double       PM time interval (SSB, Julian years)\n+            eb     double[3]    SSB to observer (vector, au)\n+            eh     double[3]    Sun to observer (unit vector)\n+            em     double       distance from Sun to observer (au)\n+            v      double[3]    barycentric observer velocity (vector, c)\n+            bm1    double       sqrt(1-|v|^2): reciprocal of Lorenz factor\n+            bpn    double[3][3] bias-precession-nutation matrix\n+            along  double       longitude + s' (radians)\n+            xpl    double       polar motion xp wrt local meridian (radians)\n+            ypl    double       polar motion yp wrt local meridian (radians)\n+            sphi   double       sine of geodetic latitude\n+            cphi   double       cosine of geodetic latitude\n+            diurab double       magnitude of diurnal aberration vector\n+            eral   double       \"local\" Earth rotation angle (radians)\n+            refa   double       refraction constant A (radians)\n+            refb   double       refraction constant B (radians)\n+\n+        Returned:\n+           ri     double          CIRS right ascension (CIO-based, radians)\n+           di     double          CIRS declination (radians)\n+\n+        Notes:\n+\n+        1) \"Observed\" Az,ZD means the position that would be seen by a\n+           perfect geodetically aligned theodolite.  This is related to\n+           the observed HA,Dec via the standard rotation, using the geodetic\n+           latitude (corrected for polar motion), while the observed HA and\n+           (CIO-based) RA are related simply through the Earth rotation\n+           angle and the site longitude.  \"Observed\" RA,Dec or HA,Dec thus\n+           means the position that would be seen by a perfect equatorial\n+           with its polar axis aligned to the Earth's axis of rotation.\n+\n+        2) Only the first character of the type argument is significant.\n+           \"R\" or \"r\" indicates that ob1 and ob2 are the observed right\n+           ascension (CIO-based) and declination;  \"H\" or \"h\" indicates that\n+           they are hour angle (west +ve) and declination;  anything else\n+           (\"A\" or \"a\" is recommended) indicates that ob1 and ob2 are\n+           azimuth (north zero, east 90 deg) and zenith distance.  (Zenith\n+           distance is used rather than altitude in order to reflect the\n+           fact that no allowance is made for depression of the horizon.)\n+\n+        3) The accuracy of the result is limited by the corrections for\n+           refraction, which use a simple A*tan(z) + B*tan^3(z) model.\n+           Providing the meteorological parameters are known accurately and\n+           there are no gross local effects, the predicted intermediate\n+           coordinates should be within 0.05 arcsec (optical) or 1 arcsec\n+           (radio) for a zenith distance of less than 70 degrees, better\n+           than 30 arcsec (optical or radio) at 85 degrees and better than\n+           20 arcmin (optical) or 25 arcmin (radio) at the horizon.\n+\n+           Without refraction, the complementary functions eraAtioq and\n+           eraAtoiq are self-consistent to better than 1 microarcsecond all\n+           over the celestial sphere.  With refraction included, consistency\n+           falls off at high zenith distances, but is still better than\n+           0.05 arcsec at 85 degrees.\n+\n+        4) It is advisable to take great care with units, as even unlikely\n+           values of the input parameters are accepted and processed in\n+           accordance with the models used.\n+\n+        Called:\n+           eraS2c       spherical coordinates to unit vector\n+           eraC2s       p-vector to spherical\n+           eraAnp       normalize angle into range 0 to 2pi\n+\n+        This revision:   2022 August 30\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    ri, di = ufunc.atoiq(type, ob1, ob2, astrom)\n+    return ri, di\n+\n+\n+def ld(bm, p, q, e, em, dlim):\n+    \"\"\"\n+    Apply light deflection by a solar-system body, as part of\n+    transforming coordinate direction into natural direction.\n+\n+    Parameters\n+    ----------\n+    bm : double array\n+    p : double array\n+    q : double array\n+    e : double array\n+    em : double array\n+    dlim : double array\n+\n+    Returns\n+    -------\n+    p1 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraLd``. The ERFA documentation is::\n+\n+        - - - - - -\n+         e r a L d\n+        - - - - - -\n+\n+        Apply light deflection by a solar-system body, as part of\n+        transforming coordinate direction into natural direction.\n+\n+        Given:\n+           bm     double     mass of the gravitating body (solar masses)\n+           p      double[3]  direction from observer to source (unit vector)\n+           q      double[3]  direction from body to source (unit vector)\n+           e      double[3]  direction from body to observer (unit vector)\n+           em     double     distance from body to observer (au)\n+           dlim   double     deflection limiter (Note 4)\n+\n+        Returned:\n+           p1     double[3]  observer to deflected source (unit vector)\n+\n+        Notes:\n+\n+        1) The algorithm is based on Expr. (70) in Klioner (2003) and\n+           Expr. (7.63) in the Explanatory Supplement (Urban & Seidelmann\n+           2013), with some rearrangement to minimize the effects of machine\n+           precision.\n+\n+        2) The mass parameter bm can, as required, be adjusted in order to\n+           allow for such effects as quadrupole field.\n+\n+        3) The barycentric position of the deflecting body should ideally\n+           correspond to the time of closest approach of the light ray to\n+           the body.\n+\n+        4) The deflection limiter parameter dlim is phi^2/2, where phi is\n+           the angular separation (in radians) between source and body at\n+           which limiting is applied.  As phi shrinks below the chosen\n+           threshold, the deflection is artificially reduced, reaching zero\n+           for phi = 0.\n+\n+        5) The returned vector p1 is not normalized, but the consequential\n+           departure from unit magnitude is always negligible.\n+\n+        6) The arguments p and p1 can be the same array.\n+\n+        7) To accumulate total light deflection taking into account the\n+           contributions from several bodies, call the present function for\n+           each body in succession, in decreasing order of distance from the\n+           observer.\n+\n+        8) For efficiency, validation is omitted.  The supplied vectors must\n+           be of unit magnitude, and the deflection limiter non-zero and\n+           positive.\n+\n+        References:\n+\n+           Urban, S. & Seidelmann, P. K. (eds), Explanatory Supplement to\n+           the Astronomical Almanac, 3rd ed., University Science Books\n+           (2013).\n+\n+           Klioner, Sergei A., \"A practical relativistic model for micro-\n+           arcsecond astrometry in space\", Astr. J. 125, 1580-1597 (2003).\n+\n+        Called:\n+           eraPdp       scalar product of two p-vectors\n+           eraPxp       vector product of two p-vectors\n+\n+        This revision:   2021 February 24\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    p1 = ufunc.ld(bm, p, q, e, em, dlim)\n+    return p1\n+\n+\n+def ldn(b, ob, sc):\n+    \"\"\"\n+    For a star, apply light deflection by multiple solar-system bodies,\n+    as part of transforming coordinate direction into natural direction.\n+\n+    Parameters\n+    ----------\n+    b : eraLDBODY array\n+    ob : double array\n+    sc : double array\n+\n+    Returns\n+    -------\n+    sn : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraLdn``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a L d n\n+        - - - - - - -\n+\n+        For a star, apply light deflection by multiple solar-system bodies,\n+        as part of transforming coordinate direction into natural direction.\n+\n+        Given:\n+           n    int           number of bodies (note 1)\n+           b    eraLDBODY[n]  data for each of the n bodies (Notes 1,2):\n+            bm   double         mass of the body (solar masses, Note 3)\n+            dl   double         deflection limiter (Note 4)\n+            pv   [2][3]         barycentric PV of the body (au, au/day)\n+           ob   double[3]     barycentric position of the observer (au)\n+           sc   double[3]     observer to star coord direction (unit vector)\n+\n+        Returned:\n+           sn    double[3]      observer to deflected star (unit vector)\n+\n+        1) The array b contains n entries, one for each body to be\n+           considered.  If n = 0, no gravitational light deflection will be\n+           applied, not even for the Sun.\n+\n+        2) The array b should include an entry for the Sun as well as for\n+           any planet or other body to be taken into account.  The entries\n+           should be in the order in which the light passes the body.\n+\n+        3) In the entry in the b array for body i, the mass parameter\n+           b[i].bm can, as required, be adjusted in order to allow for such\n+           effects as quadrupole field.\n+\n+        4) The deflection limiter parameter b[i].dl is phi^2/2, where phi is\n+           the angular separation (in radians) between star and body at\n+           which limiting is applied.  As phi shrinks below the chosen\n+           threshold, the deflection is artificially reduced, reaching zero\n+           for phi = 0.   Example values suitable for a terrestrial\n+           observer, together with masses, are as follows:\n+\n+              body i     b[i].bm        b[i].dl\n+\n+              Sun        1.0            6e-6\n+              Jupiter    0.00095435     3e-9\n+              Saturn     0.00028574     3e-10\n+\n+        5) For cases where the starlight passes the body before reaching the\n+           observer, the body is placed back along its barycentric track by\n+           the light time from that point to the observer.  For cases where\n+           the body is \"behind\" the observer no such shift is applied.  If\n+           a different treatment is preferred, the user has the option of\n+           instead using the eraLd function.  Similarly, eraLd can be used\n+           for cases where the source is nearby, not a star.\n+\n+        6) The returned vector sn is not normalized, but the consequential\n+           departure from unit magnitude is always negligible.\n+\n+        7) The arguments sc and sn can be the same array.\n+\n+        8) For efficiency, validation is omitted.  The supplied masses must\n+           be greater than zero, the position and velocity vectors must be\n+           right, and the deflection limiter greater than zero.\n+\n+        Reference:\n+\n+           Urban, S. & Seidelmann, P. K. (eds), Explanatory Supplement to\n+           the Astronomical Almanac, 3rd ed., University Science Books\n+           (2013), Section 7.2.4.\n+\n+        Called:\n+           eraCp        copy p-vector\n+           eraPdp       scalar product of two p-vectors\n+           eraPmp       p-vector minus p-vector\n+           eraPpsp      p-vector plus scaled p-vector\n+           eraPn        decompose p-vector into modulus and direction\n+           eraLd        light deflection by a solar-system body\n+\n+        This revision:   2021 February 24\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    sn = ufunc.ldn(b, ob, sc)\n+    return sn\n+\n+\n+def ldsun(p, e, em):\n+    \"\"\"\n+    Deflection of starlight by the Sun.\n+\n+    Parameters\n+    ----------\n+    p : double array\n+    e : double array\n+    em : double array\n+\n+    Returns\n+    -------\n+    p1 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraLdsun``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a L d s u n\n+        - - - - - - - - -\n+\n+        Deflection of starlight by the Sun.\n+\n+        Given:\n+           p      double[3]  direction from observer to star (unit vector)\n+           e      double[3]  direction from Sun to observer (unit vector)\n+           em     double     distance from Sun to observer (au)\n+\n+        Returned:\n+           p1     double[3]  observer to deflected star (unit vector)\n+\n+        Notes:\n+\n+        1) The source is presumed to be sufficiently distant that its\n+           directions seen from the Sun and the observer are essentially\n+           the same.\n+\n+        2) The deflection is restrained when the angle between the star and\n+           the center of the Sun is less than a threshold value, falling to\n+           zero deflection for zero separation.  The chosen threshold value\n+           is within the solar limb for all solar-system applications, and\n+           is about 5 arcminutes for the case of a terrestrial observer.\n+\n+        3) The arguments p and p1 can be the same array.\n+\n+        Called:\n+           eraLd        light deflection by a solar-system body\n+\n+        This revision:   2016 June 16\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    p1 = ufunc.ldsun(p, e, em)\n+    return p1\n+\n+\n+def pmpx(rc, dc, pr, pd, px, rv, pmt, pob):\n+    \"\"\"\n+    Proper motion and parallax.\n+\n+    Parameters\n+    ----------\n+    rc : double array\n+    dc : double array\n+    pr : double array\n+    pd : double array\n+    px : double array\n+    rv : double array\n+    pmt : double array\n+    pob : double array\n+\n+    Returns\n+    -------\n+    pco : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPmpx``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a P m p x\n+        - - - - - - - -\n+\n+        Proper motion and parallax.\n+\n+        Given:\n+           rc,dc  double     ICRS RA,Dec at catalog epoch (radians)\n+           pr     double     RA proper motion (radians/year, Note 1)\n+           pd     double     Dec proper motion (radians/year)\n+           px     double     parallax (arcsec)\n+           rv     double     radial velocity (km/s, +ve if receding)\n+           pmt    double     proper motion time interval (SSB, Julian years)\n+           pob    double[3]  SSB to observer vector (au)\n+\n+        Returned:\n+           pco    double[3]  coordinate direction (BCRS unit vector)\n+\n+        Notes:\n+\n+        1) The proper motion in RA is dRA/dt rather than cos(Dec)*dRA/dt.\n+\n+        2) The proper motion time interval is for when the starlight\n+           reaches the solar system barycenter.\n+\n+        3) To avoid the need for iteration, the Roemer effect (i.e. the\n+           small annual modulation of the proper motion coming from the\n+           changing light time) is applied approximately, using the\n+           direction of the star at the catalog epoch.\n+\n+        References:\n+\n+           1984 Astronomical Almanac, pp B39-B41.\n+\n+           Urban, S. & Seidelmann, P. K. (eds), Explanatory Supplement to\n+           the Astronomical Almanac, 3rd ed., University Science Books\n+           (2013), Section 7.2.\n+\n+        Called:\n+           eraPdp       scalar product of two p-vectors\n+           eraPn        decompose p-vector into modulus and direction\n+\n+        This revision:   2021 April 3\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    pco = ufunc.pmpx(rc, dc, pr, pd, px, rv, pmt, pob)\n+    return pco\n+\n+\n+def pmsafe(ra1, dec1, pmr1, pmd1, px1, rv1, ep1a, ep1b, ep2a, ep2b):\n+    \"\"\"\n+    Star proper motion:  update star catalog data for space motion, with\n+    special handling to handle the zero parallax case.\n+\n+    Parameters\n+    ----------\n+    ra1 : double array\n+    dec1 : double array\n+    pmr1 : double array\n+    pmd1 : double array\n+    px1 : double array\n+    rv1 : double array\n+    ep1a : double array\n+    ep1b : double array\n+    ep2a : double array\n+    ep2b : double array\n+\n+    Returns\n+    -------\n+    ra2 : double array\n+    dec2 : double array\n+    pmr2 : double array\n+    pmd2 : double array\n+    px2 : double array\n+    rv2 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPmsafe``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a P m s a f e\n+        - - - - - - - - - -\n+\n+        Star proper motion:  update star catalog data for space motion, with\n+        special handling to handle the zero parallax case.\n+\n+        Given:\n+           ra1    double     right ascension (radians), before\n+           dec1   double     declination (radians), before\n+           pmr1   double     RA proper motion (radians/year), before\n+           pmd1   double     Dec proper motion (radians/year), before\n+           px1    double     parallax (arcseconds), before\n+           rv1    double     radial velocity (km/s, +ve = receding), before\n+           ep1a   double     \"before\" epoch, part A (Note 1)\n+           ep1b   double     \"before\" epoch, part B (Note 1)\n+           ep2a   double     \"after\" epoch, part A (Note 1)\n+           ep2b   double     \"after\" epoch, part B (Note 1)\n+\n+        Returned:\n+           ra2    double     right ascension (radians), after\n+           dec2   double     declination (radians), after\n+           pmr2   double     RA proper motion (radians/year), after\n+           pmd2   double     Dec proper motion (radians/year), after\n+           px2    double     parallax (arcseconds), after\n+           rv2    double     radial velocity (km/s, +ve = receding), after\n+\n+        Returned (function value):\n+                  int        status:\n+                                -1 = system error (should not occur)\n+                                 0 = no warnings or errors\n+                                 1 = distance overridden (Note 6)\n+                                 2 = excessive velocity (Note 7)\n+                                 4 = solution didn't converge (Note 8)\n+                              else = binary logical OR of the above warnings\n+\n+        Notes:\n+\n+        1) The starting and ending TDB dates ep1a+ep1b and ep2a+ep2b are\n+           Julian Dates, apportioned in any convenient way between the two\n+           parts (A and B).  For example, JD(TDB)=2450123.7 could be\n+           expressed in any of these ways, among others:\n+\n+                  epNa            epNb\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 method is best matched to the way the\n+           argument is handled internally and will deliver the optimum\n+           resolution.  The MJD method and the date & time methods are both\n+           good compromises between resolution and convenience.\n+\n+        2) In accordance with normal star-catalog conventions, the object's\n+           right ascension and declination are freed from the effects of\n+           secular aberration.  The frame, which is aligned to the catalog\n+           equator and equinox, is Lorentzian and centered on the SSB.\n+\n+           The proper motions are the rate of change of the right ascension\n+           and declination at the catalog epoch and are in radians per TDB\n+           Julian year.\n+\n+           The parallax and radial velocity are in the same frame.\n+\n+        3) Care is needed with units.  The star coordinates are in radians\n+           and the proper motions in radians per Julian year, but the\n+           parallax is in arcseconds.\n+\n+        4) The RA proper motion is in terms of coordinate angle, not true\n+           angle.  If the catalog uses arcseconds for both RA and Dec proper\n+           motions, the RA proper motion will need to be divided by cos(Dec)\n+           before use.\n+\n+        5) Straight-line motion at constant speed, in the inertial frame, is\n+           assumed.\n+\n+        6) An extremely small (or zero or negative) parallax is overridden\n+           to ensure that the object is at a finite but very large distance,\n+           but not so large that the proper motion is equivalent to a large\n+           but safe speed (about 0.1c using the chosen constant).  A warning\n+           status of 1 is added to the status if this action has been taken.\n+\n+        7) If the space velocity is a significant fraction of c (see the\n+           constant VMAX in the function eraStarpv), it is arbitrarily set\n+           to zero.  When this action occurs, 2 is added to the status.\n+\n+        8) The relativistic adjustment carried out in the eraStarpv function\n+           involves an iterative calculation.  If the process fails to\n+           converge within a set number of iterations, 4 is added to the\n+           status.\n+\n+        Called:\n+           eraSeps      angle between two points\n+           eraStarpm    update star catalog data for space motion\n+\n+        This revision:   2023 April 7\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    ra2, dec2, pmr2, pmd2, px2, rv2, c_retval = ufunc.pmsafe(\n+        ra1, dec1, pmr1, pmd1, px1, rv1, ep1a, ep1b, ep2a, ep2b)\n+    check_errwarn(c_retval, 'pmsafe')\n+    return ra2, dec2, pmr2, pmd2, px2, rv2\n+\n+\n+STATUS_CODES['pmsafe'] = {\n+    -1: 'system error (should not occur)',\n+    0: 'no warnings or errors',\n+    1: 'distance overridden (Note 6)',\n+    2: 'excessive velocity (Note 7)',\n+    4: \"solution didn't converge (Note 8)\",\n+    'else': 'binary logical OR of the above warnings',\n+}\n+\n+\n+def pvtob(elong, phi, hm, xp, yp, sp, theta):\n+    \"\"\"\n+    Position and velocity of a terrestrial observing station.\n+\n+    Parameters\n+    ----------\n+    elong : double array\n+    phi : double array\n+    hm : double array\n+    xp : double array\n+    yp : double array\n+    sp : double array\n+    theta : double array\n+\n+    Returns\n+    -------\n+    pv : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPvtob``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a P v t o b\n+        - - - - - - - - -\n+\n+        Position and velocity of a terrestrial observing station.\n+\n+        Given:\n+           elong   double       longitude (radians, east +ve, Note 1)\n+           phi     double       latitude (geodetic, radians, Note 1)\n+           hm      double       height above ref. ellipsoid (geodetic, m)\n+           xp,yp   double       coordinates of the pole (radians, Note 2)\n+           sp      double       the TIO locator s' (radians, Note 2)\n+           theta   double       Earth rotation angle (radians, Note 3)\n+\n+        Returned:\n+           pv      double[2][3] position/velocity vector (m, m/s, CIRS)\n+\n+        Notes:\n+\n+        1) The terrestrial coordinates are with respect to the ERFA_WGS84\n+           reference ellipsoid.\n+\n+        2) xp and yp are the coordinates (in radians) of the Celestial\n+           Intermediate Pole with respect to the International Terrestrial\n+           Reference System (see IERS Conventions), measured along the\n+           meridians 0 and 90 deg west respectively.  sp is the TIO locator\n+           s', in radians, which positions the Terrestrial Intermediate\n+           Origin on the equator.  For many applications, xp, yp and\n+           (especially) sp can be set to zero.\n+\n+        3) If theta is Greenwich apparent sidereal time instead of Earth\n+           rotation angle, the result is with respect to the true equator\n+           and equinox of date, i.e. with the x-axis at the equinox rather\n+           than the celestial intermediate origin.\n+\n+        4) The velocity units are meters per UT1 second, not per SI second.\n+           This is unlikely to have any practical consequences in the modern\n+           era.\n+\n+        5) No validation is performed on the arguments.  Error cases that\n+           could lead to arithmetic exceptions are trapped by the eraGd2gc\n+           function, and the result set to zeros.\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Urban, S. & Seidelmann, P. K. (eds), Explanatory Supplement to\n+           the Astronomical Almanac, 3rd ed., University Science Books\n+           (2013), Section 7.4.3.3.\n+\n+        Called:\n+           eraGd2gc     geodetic to geocentric transformation\n+           eraPom00     polar motion matrix\n+           eraTrxp      product of transpose of r-matrix and p-vector\n+\n+        This revision:   2021 February 24\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    pv = ufunc.pvtob(elong, phi, hm, xp, yp, sp, theta)\n+    return pv\n+\n+\n+def refco(phpa, tc, rh, wl):\n+    \"\"\"\n+    Determine the constants A and B in the atmospheric refraction model\n+    dZ = A tan Z + B tan^3 Z.\n+\n+    Parameters\n+    ----------\n+    phpa : double array\n+    tc : double array\n+    rh : double array\n+    wl : double array\n+\n+    Returns\n+    -------\n+    refa : double array\n+    refb : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraRefco``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a R e f c o\n+        - - - - - - - - -\n+\n+        Determine the constants A and B in the atmospheric refraction model\n+        dZ = A tan Z + B tan^3 Z.\n+\n+        Z is the \"observed\" zenith distance (i.e. affected by refraction)\n+        and dZ is what to add to Z to give the \"topocentric\" (i.e. in vacuo)\n+        zenith distance.\n+\n+        Given:\n+          phpa   double    pressure at the observer (hPa = millibar)\n+          tc     double    ambient temperature at the observer (deg C)\n+          rh     double    relative humidity at the observer (range 0-1)\n+          wl     double    wavelength (micrometers)\n+\n+        Returned:\n+          refa   double         tan Z coefficient (radians)\n+          refb   double         tan^3 Z coefficient (radians)\n+\n+        Notes:\n+\n+        1) The model balances speed and accuracy to give good results in\n+           applications where performance at low altitudes is not paramount.\n+           Performance is maintained across a range of conditions, and\n+           applies to both optical/IR and radio.\n+\n+        2) The model omits the effects of (i) height above sea level (apart\n+           from the reduced pressure itself), (ii) latitude (i.e. the\n+           flattening of the Earth), (iii) variations in tropospheric lapse\n+           rate and (iv) dispersive effects in the radio.\n+\n+           The model was tested using the following range of conditions:\n+\n+             lapse rates 0.0055, 0.0065, 0.0075 deg/meter\n+             latitudes 0, 25, 50, 75 degrees\n+             heights 0, 2500, 5000 meters ASL\n+             pressures mean for height -10% to +5% in steps of 5%\n+             temperatures -10 deg to +20 deg with respect to 280 deg at SL\n+             relative humidity 0, 0.5, 1\n+             wavelengths 0.4, 0.6, ... 2 micron, + radio\n+             zenith distances 15, 45, 75 degrees\n+\n+           The accuracy with respect to raytracing through a model\n+           atmosphere was as follows:\n+\n+                                  worst         RMS\n+\n+             optical/IR           62 mas       8 mas\n+             radio               319 mas      49 mas\n+\n+           For this particular set of conditions:\n+\n+             lapse rate 0.0065 K/meter\n+             latitude 50 degrees\n+             sea level\n+             pressure 1005 mb\n+             temperature 280.15 K\n+             humidity 80%\n+             wavelength 5740 Angstroms\n+\n+           the results were as follows:\n+\n+             ZD       raytrace     eraRefco   Saastamoinen\n+\n+             10         10.27        10.27        10.27\n+             20         21.19        21.20        21.19\n+             30         33.61        33.61        33.60\n+             40         48.82        48.83        48.81\n+             45         58.16        58.18        58.16\n+             50         69.28        69.30        69.27\n+             55         82.97        82.99        82.95\n+             60        100.51       100.54       100.50\n+             65        124.23       124.26       124.20\n+             70        158.63       158.68       158.61\n+             72        177.32       177.37       177.31\n+             74        200.35       200.38       200.32\n+             76        229.45       229.43       229.42\n+             78        267.44       267.29       267.41\n+             80        319.13       318.55       319.10\n+\n+            deg        arcsec       arcsec       arcsec\n+\n+           The values for Saastamoinen's formula (which includes terms\n+           up to tan^5) are taken from Hohenkerk and Sinclair (1985).\n+\n+        3) A wl value in the range 0-100 selects the optical/IR case and is\n+           wavelength in micrometers.  Any value outside this range selects\n+           the radio case.\n+\n+        4) Outlandish input parameters are silently limited to\n+           mathematically safe values.  Zero pressure is permissible, and\n+           causes zeroes to be returned.\n+\n+        5) The algorithm draws on several sources, as follows:\n+\n+           a) The formula for the saturation vapour pressure of water as\n+              a function of temperature and temperature is taken from\n+              Equations (A4.5-A4.7) of Gill (1982).\n+\n+           b) The formula for the water vapour pressure, given the\n+              saturation pressure and the relative humidity, is from\n+              Crane (1976), Equation (2.5.5).\n+\n+           c) The refractivity of air is a function of temperature,\n+              total pressure, water-vapour pressure and, in the case\n+              of optical/IR, wavelength.  The formulae for the two cases are\n+              developed from Hohenkerk & Sinclair (1985) and Rueger (2002).\n+              The IAG (1999) optical refractivity for dry air is used.\n+\n+           d) The formula for beta, the ratio of the scale height of the\n+              atmosphere to the geocentric distance of the observer, is\n+              an adaption of Equation (9) from Stone (1996).  The\n+              adaptations, arrived at empirically, consist of (i) a small\n+              adjustment to the coefficient and (ii) a humidity term for the\n+              radio case only.\n+\n+           e) The formulae for the refraction constants as a function of\n+              n-1 and beta are from Green (1987), Equation (4.31).\n+\n+        References:\n+\n+           Crane, R.K., Meeks, M.L. (ed), \"Refraction Effects in the Neutral\n+           Atmosphere\", Methods of Experimental Physics: Astrophysics 12B,\n+           Academic Press, 1976.\n+\n+           Gill, Adrian E., \"Atmosphere-Ocean Dynamics\", Academic Press,\n+           1982.\n+\n+           Green, R.M., \"Spherical Astronomy\", Cambridge University Press,\n+           1987.\n+\n+           Hohenkerk, C.Y., & Sinclair, A.T., NAO Technical Note No. 63,\n+           1985.\n+\n+           IAG Resolutions adopted at the XXIIth General Assembly in\n+           Birmingham, 1999, Resolution 3.\n+\n+           Rueger, J.M., \"Refractive Index Formulae for Electronic Distance\n+           Measurement with Radio and Millimetre Waves\", in Unisurv Report\n+           S-68, School of Surveying and Spatial Information Systems,\n+           University of New South Wales, Sydney, Australia, 2002.\n+\n+           Stone, Ronald C., P.A.S.P. 108, 1051-1058, 1996.\n+\n+        This revision:   2021 February 24\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    refa, refb = ufunc.refco(phpa, tc, rh, wl)\n+    return refa, refb\n+\n+\n+def epv00(date1, date2):\n+    \"\"\"\n+    Earth position and velocity, heliocentric and barycentric, with\n+    respect to the Barycentric Celestial Reference System.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    pvh : double array\n+    pvb : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEpv00``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a E p v 0 0\n+        - - - - - - - - -\n+\n+        Earth position and velocity, heliocentric and barycentric, with\n+        respect to the Barycentric Celestial Reference System.\n+\n+        Given:\n+           date1,date2  double        TDB date (Note 1)\n+\n+        Returned:\n+           pvh          double[2][3]  heliocentric Earth position/velocity\n+           pvb          double[2][3]  barycentric Earth position/velocity\n+\n+        Returned (function value):\n+                        int           status: 0 = OK\n+                                             +1 = warning: date outside\n+                                                  the range 1900-2100 AD\n+\n+        Notes:\n+\n+        1) The TDB date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TDB)=2450123.7 could be expressed in any of these ways, among\n+           others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 method is best matched to the way the\n+           argument is handled internally and will deliver the optimum\n+           resolution.  The MJD method and the date & time methods are both\n+           good compromises between resolution and convenience.  However,\n+           the accuracy of the result is more likely to be limited by the\n+           algorithm itself than the way the date has been expressed.\n+\n+           n.b. TT can be used instead of TDB in most applications.\n+\n+        2) On return, the arrays pvh and pvb contain the following:\n+\n+              pvh[0][0]  x       }\n+              pvh[0][1]  y       } heliocentric position, au\n+              pvh[0][2]  z       }\n+\n+              pvh[1][0]  xdot    }\n+              pvh[1][1]  ydot    } heliocentric velocity, au/d\n+              pvh[1][2]  zdot    }\n+\n+              pvb[0][0]  x       }\n+              pvb[0][1]  y       } barycentric position, au\n+              pvb[0][2]  z       }\n+\n+              pvb[1][0]  xdot    }\n+              pvb[1][1]  ydot    } barycentric velocity, au/d\n+              pvb[1][2]  zdot    }\n+\n+           The vectors are oriented with respect to the BCRS.  The time unit\n+           is one day in TDB.\n+\n+        3) The function is a SIMPLIFIED SOLUTION from the planetary theory\n+           VSOP2000 (X. Moisson, P. Bretagnon, 2001, Celes. Mechanics &\n+           Dyn. Astron., 80, 3/4, 205-213) and is an adaptation of original\n+           Fortran code supplied by P. Bretagnon (private comm., 2000).\n+\n+        4) Comparisons over the time span 1900-2100 with this simplified\n+           solution and the JPL DE405 ephemeris give the following results:\n+\n+                                      RMS    max\n+                 Heliocentric:\n+                    position error    3.7   11.2   km\n+                    velocity error    1.4    5.0   mm/s\n+\n+                 Barycentric:\n+                    position error    4.6   13.4   km\n+                    velocity error    1.4    4.9   mm/s\n+\n+           Comparisons with the JPL DE406 ephemeris show that by 1800 and\n+           2200 the position errors are approximately double their 1900-2100\n+           size.  By 1500 and 2500 the deterioration is a factor of 10 and\n+           by 1000 and 3000 a factor of 60.  The velocity accuracy falls off\n+           at about half that rate.\n+\n+        5) It is permissible to use the same array for pvh and pvb, which\n+           will receive the barycentric values.\n+\n+        This revision:  2023 March 1\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    pvh, pvb, c_retval = ufunc.epv00(date1, date2)\n+    check_errwarn(c_retval, 'epv00')\n+    return pvh, pvb\n+\n+\n+STATUS_CODES['epv00'] = {\n+    0: 'OK',\n+    1: 'warning: date outsidethe range 1900-2100 AD',\n+}\n+\n+\n+def moon98(date1, date2):\n+    \"\"\"\n+    Approximate geocentric position and velocity of the Moon.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    pv : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraMoon98``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a M o o n 9 8\n+        - - - - - - - - - -\n+\n+        Approximate geocentric position and velocity of the Moon.\n+\n+        n.b. Not IAU-endorsed and without canonical status.\n+\n+        Given:\n+           date1  double         TT date part A (Notes 1,4)\n+           date2  double         TT date part B (Notes 1,4)\n+\n+        Returned:\n+           pv     double[2][3]   Moon p,v, GCRS (au, au/d, Note 5)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways, among\n+           others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 method is best matched to the way the\n+           argument is handled internally and will deliver the optimum\n+           resolution.  The MJD method and the date & time methods are both\n+           good compromises between resolution and convenience.  The limited\n+           accuracy of the present algorithm is such that any of the methods\n+           is satisfactory.\n+\n+        2) This function is a full implementation of the algorithm\n+           published by Meeus (see reference) except that the light-time\n+           correction to the Moon's mean longitude has been omitted.\n+\n+        3) Comparisons with ELP/MPP02 over the interval 1950-2100 gave RMS\n+           errors of 2.9 arcsec in geocentric direction, 6.1 km in position\n+           and 36 mm/s in velocity.  The worst case errors were 18.3 arcsec\n+           in geocentric direction, 31.7 km in position and 172 mm/s in\n+           velocity.\n+\n+        4) The original algorithm is expressed in terms of \"dynamical time\",\n+           which can either be TDB or TT without any significant change in\n+           accuracy.  UT cannot be used without incurring significant errors\n+           (30 arcsec in the present era) due to the Moon's 0.5 arcsec/sec\n+           movement.\n+\n+        5) The result is with respect to the GCRS (the same as J2000.0 mean\n+           equator and equinox to within 23 mas).\n+\n+        6) Velocity is obtained by a complete analytical differentiation\n+           of the Meeus model.\n+\n+        7) The Meeus algorithm generates position and velocity in mean\n+           ecliptic coordinates of date, which the present function then\n+           rotates into GCRS.  Because the ecliptic system is precessing,\n+           there is a coupling between this spin (about 1.4 degrees per\n+           century) and the Moon position that produces a small velocity\n+           contribution.  In the present function this effect is neglected\n+           as it corresponds to a maximum difference of less than 3 mm/s and\n+           increases the RMS error by only 0.4%.\n+\n+        References:\n+\n+           Meeus, J., Astronomical Algorithms, 2nd edition, Willmann-Bell,\n+           1998, p337.\n+\n+           Simon, J.L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G. & Laskar, J., Astron.Astrophys., 1994, 282, 663\n+\n+        Defined in erfam.h:\n+           ERFA_DAU           astronomical unit (m)\n+           ERFA_DJC           days per Julian century\n+           ERFA_DJ00          reference epoch (J2000.0), Julian Date\n+           ERFA_DD2R          degrees to radians\n+\n+        Called:\n+           eraS2pv      spherical coordinates to pv-vector\n+           eraPfw06     bias-precession F-W angles, IAU 2006\n+           eraIr        initialize r-matrix to identity\n+           eraRz        rotate around Z-axis\n+           eraRx        rotate around X-axis\n+           eraRxpv      product of r-matrix and pv-vector\n+\n+        This revision:  2023 March 20\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    pv = ufunc.moon98(date1, date2)\n+    return pv\n+\n+\n+def plan94(date1, date2, np):\n+    \"\"\"\n+    Approximate heliocentric position and velocity of a nominated\n+    planet:  Mercury, Venus, EMB, Mars, Jupiter, Saturn, Uranus or\n+    Neptune (but not the Earth itself).\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+    np : int array\n+\n+    Returns\n+    -------\n+    pv : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPlan94``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a P l a n 9 4\n+        - - - - - - - - - -\n+\n+        Approximate heliocentric position and velocity of a nominated\n+        planet:  Mercury, Venus, EMB, Mars, Jupiter, Saturn, Uranus or\n+        Neptune (but not the Earth itself).\n+\n+        n.b. Not IAU-endorsed and without canonical status.\n+\n+        Given:\n+           date1  double       TDB date part A (Note 1)\n+           date2  double       TDB date part B (Note 1)\n+           np     int          planet (1=Mercury, 2=Venus, 3=EMB, 4=Mars,\n+                                   5=Jupiter, 6=Saturn, 7=Uranus, 8=Neptune)\n+\n+        Returned (argument):\n+           pv     double[2][3] planet p,v (heliocentric, J2000.0, au,au/d)\n+\n+        Returned (function value):\n+                  int          status: -1 = illegal NP (outside 1-8)\n+                                        0 = OK\n+                                       +1 = warning: year outside 1000-3000\n+                                       +2 = warning: failed to converge\n+\n+        Notes:\n+\n+        1) The date date1+date2 is in the TDB time scale (in practice TT can\n+           be used) and is a Julian Date, apportioned in any convenient way\n+           between the two arguments.  For example, JD(TDB)=2450123.7 could\n+           be expressed in any of these ways, among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 method is best matched to the way the\n+           argument is handled internally and will deliver the optimum\n+           resolution.  The MJD method and the date & time methods are both\n+           good compromises between resolution and convenience.  The limited\n+           accuracy of the present algorithm is such that any of the methods\n+           is satisfactory.\n+\n+        2) If an np value outside the range 1-8 is supplied, an error status\n+           (function value -1) is returned and the pv vector set to zeroes.\n+\n+        3) For np=3 the result is for the Earth-Moon barycenter (EMB).  To\n+           obtain the heliocentric position and velocity of the Earth, use\n+           instead the ERFA function eraEpv00.\n+\n+        4) On successful return, the array pv contains the following:\n+\n+              pv[0][0]   x      }\n+              pv[0][1]   y      } heliocentric position, au\n+              pv[0][2]   z      }\n+\n+              pv[1][0]   xdot   }\n+              pv[1][1]   ydot   } heliocentric velocity, au/d\n+              pv[1][2]   zdot   }\n+\n+           The reference frame is equatorial and is with respect to the\n+           mean equator and equinox of epoch J2000.0.\n+\n+        5) The algorithm is due to J.L. Simon, P. Bretagnon, J. Chapront,\n+           M. Chapront-Touze, G. Francou and J. Laskar (Bureau des\n+           Longitudes, Paris, France).  From comparisons with JPL\n+           ephemeris DE102, they quote the following maximum errors\n+           over the interval 1800-2050:\n+\n+                           L (arcsec)    B (arcsec)      R (km)\n+\n+              Mercury          4             1             300\n+              Venus            5             1             800\n+              EMB              6             1            1000\n+              Mars            17             1            7700\n+              Jupiter         71             5           76000\n+              Saturn          81            13          267000\n+              Uranus          86             7          712000\n+              Neptune         11             1          253000\n+\n+           Over the interval 1000-3000, they report that the accuracy is no\n+           worse than 1.5 times that over 1800-2050.  Outside 1000-3000 the\n+           accuracy declines.\n+\n+           Comparisons of the present function with the JPL DE200 ephemeris\n+           give the following RMS errors over the interval 1960-2025:\n+\n+                            position (km)     velocity (m/s)\n+\n+              Mercury            334               0.437\n+              Venus             1060               0.855\n+              EMB               2010               0.815\n+              Mars              7690               1.98\n+              Jupiter          71700               7.70\n+              Saturn          199000              19.4\n+              Uranus          564000              16.4\n+              Neptune         158000              14.4\n+\n+           Comparisons against DE200 over the interval 1800-2100 gave the\n+           following maximum absolute differences (the results using\n+           DE406 were essentially the same):\n+\n+                         L (arcsec)   B (arcsec)     R (km)   Rdot (m/s)\n+\n+              Mercury        7            1            500       0.7\n+              Venus          7            1           1100       0.9\n+              EMB            9            1           1300       1.0\n+              Mars          26            1           9000       2.5\n+              Jupiter       78            6          82000       8.2\n+              Saturn        87           14         263000      24.6\n+              Uranus        86            7         661000      27.4\n+              Neptune       11            2         248000      21.4\n+\n+        6) The present ERFA re-implementation of the original Simon et al.\n+           Fortran code differs from the original in the following respects:\n+\n+                     C instead of Fortran.\n+\n+                     The date is supplied in two parts.\n+\n+                     The result is returned only in equatorial Cartesian form;\n+                the ecliptic longitude, latitude and radius vector are not\n+                returned.\n+\n+                     The result is in the J2000.0 equatorial frame, not ecliptic.\n+\n+                     More is done in-line: there are fewer calls to subroutines.\n+\n+                     Different error/warning status values are used.\n+\n+                     A different Kepler's-equation-solver is used (avoiding\n+                use of double precision complex).\n+\n+                     Polynomials in t are nested to minimize rounding errors.\n+\n+                     Explicit double constants are used to avoid mixed-mode\n+                expressions.\n+\n+           None of the above changes affects the result significantly.\n+\n+        7) The returned status indicates the most serious condition\n+           encountered during execution of the function.  Illegal np is\n+           considered the most serious, overriding failure to converge,\n+           which in turn takes precedence over the remote date warning.\n+\n+        Called:\n+           eraAnpm      normalize angle into range +/- pi\n+\n+        Reference:  Simon, J.L, Bretagnon, P., Chapront, J.,\n+                    Chapront-Touze, M., Francou, G., and Laskar, J.,\n+                    Astron.Astrophys., 282, 663 (1994).\n+\n+        This revision:  2023 May 5\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    pv, c_retval = ufunc.plan94(date1, date2, np)\n+    check_errwarn(c_retval, 'plan94')\n+    return pv\n+\n+\n+STATUS_CODES['plan94'] = {\n+    -1: 'illegal NP (outside 1-8)',\n+    0: 'OK',\n+    1: 'warning: year outside 1000-3000',\n+    2: 'warning: failed to converge',\n+}\n+\n+\n+def fad03(t):\n+    \"\"\"\n+    Fundamental argument, IERS Conventions (2003):\n+    mean elongation of the Moon from the Sun.\n+\n+    Parameters\n+    ----------\n+    t : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFad03``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a F a d 0 3\n+        - - - - - - - - -\n+\n+        Fundamental argument, IERS Conventions (2003):\n+        mean elongation of the Moon from the Sun.\n+\n+        Given:\n+           t     double    TDB, Julian centuries since J2000.0 (Note 1)\n+\n+        Returned (function value):\n+                 double    D, radians (Note 2)\n+\n+        Notes:\n+\n+        1) Though t is strictly TDB, it is usually more convenient to use\n+           TT, which makes no significant difference.\n+\n+        2) The expression used is as adopted in IERS Conventions (2003) and\n+           is from Simon et al. (1994).\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Simon, J.-L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G., Laskar, J. 1994, Astron.Astrophys. 282, 663-683\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.fad03(t)\n+    return c_retval\n+\n+\n+def fae03(t):\n+    \"\"\"\n+    Fundamental argument, IERS Conventions (2003):\n+    mean longitude of Earth.\n+\n+    Parameters\n+    ----------\n+    t : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFae03``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a F a e 0 3\n+        - - - - - - - - -\n+\n+        Fundamental argument, IERS Conventions (2003):\n+        mean longitude of Earth.\n+\n+        Given:\n+           t     double    TDB, Julian centuries since J2000.0 (Note 1)\n+\n+        Returned (function value):\n+                 double    mean longitude of Earth, radians (Note 2)\n+\n+        Notes:\n+\n+        1) Though t is strictly TDB, it is usually more convenient to use\n+           TT, which makes no significant difference.\n+\n+        2) The expression used is as adopted in IERS Conventions (2003) and\n+           comes from Souchay et al. (1999) after Simon et al. (1994).\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Simon, J.-L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G., Laskar, J. 1994, Astron.Astrophys. 282, 663-683\n+\n+           Souchay, J., Loysel, B., Kinoshita, H., Folgueira, M. 1999,\n+           Astron.Astrophys.Supp.Ser. 135, 111\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.fae03(t)\n+    return c_retval\n+\n+\n+def faf03(t):\n+    \"\"\"\n+    Fundamental argument, IERS Conventions (2003):\n+    mean longitude of the Moon minus mean longitude of the ascending\n+    node.\n+\n+    Parameters\n+    ----------\n+    t : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFaf03``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a F a f 0 3\n+        - - - - - - - - -\n+\n+        Fundamental argument, IERS Conventions (2003):\n+        mean longitude of the Moon minus mean longitude of the ascending\n+        node.\n+\n+        Given:\n+           t     double    TDB, Julian centuries since J2000.0 (Note 1)\n+\n+        Returned (function value):\n+                 double    F, radians (Note 2)\n+\n+        Notes:\n+\n+        1) Though t is strictly TDB, it is usually more convenient to use\n+           TT, which makes no significant difference.\n+\n+        2) The expression used is as adopted in IERS Conventions (2003) and\n+           is from Simon et al. (1994).\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Simon, J.-L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G., Laskar, J. 1994, Astron.Astrophys. 282, 663-683\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.faf03(t)\n+    return c_retval\n+\n+\n+def faju03(t):\n+    \"\"\"\n+    Fundamental argument, IERS Conventions (2003):\n+    mean longitude of Jupiter.\n+\n+    Parameters\n+    ----------\n+    t : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFaju03``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a F a j u 0 3\n+        - - - - - - - - - -\n+\n+        Fundamental argument, IERS Conventions (2003):\n+        mean longitude of Jupiter.\n+\n+        Given:\n+           t     double    TDB, Julian centuries since J2000.0 (Note 1)\n+\n+        Returned (function value):\n+                 double    mean longitude of Jupiter, radians (Note 2)\n+\n+        Notes:\n+\n+        1) Though t is strictly TDB, it is usually more convenient to use\n+           TT, which makes no significant difference.\n+\n+        2) The expression used is as adopted in IERS Conventions (2003) and\n+           comes from Souchay et al. (1999) after Simon et al. (1994).\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Simon, J.-L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G., Laskar, J. 1994, Astron.Astrophys. 282, 663-683\n+\n+           Souchay, J., Loysel, B., Kinoshita, H., Folgueira, M. 1999,\n+           Astron.Astrophys.Supp.Ser. 135, 111\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.faju03(t)\n+    return c_retval\n+\n+\n+def fal03(t):\n+    \"\"\"\n+    Fundamental argument, IERS Conventions (2003):\n+    mean anomaly of the Moon.\n+\n+    Parameters\n+    ----------\n+    t : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFal03``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a F a l 0 3\n+        - - - - - - - - -\n+\n+        Fundamental argument, IERS Conventions (2003):\n+        mean anomaly of the Moon.\n+\n+        Given:\n+           t     double    TDB, Julian centuries since J2000.0 (Note 1)\n+\n+        Returned (function value):\n+                 double    l, radians (Note 2)\n+\n+        Notes:\n+\n+        1) Though t is strictly TDB, it is usually more convenient to use\n+           TT, which makes no significant difference.\n+\n+        2) The expression used is as adopted in IERS Conventions (2003) and\n+           is from Simon et al. (1994).\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Simon, J.-L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G., Laskar, J. 1994, Astron.Astrophys. 282, 663-683\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.fal03(t)\n+    return c_retval\n+\n+\n+def falp03(t):\n+    \"\"\"\n+    Fundamental argument, IERS Conventions (2003):\n+    mean anomaly of the Sun.\n+\n+    Parameters\n+    ----------\n+    t : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFalp03``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a F a l p 0 3\n+        - - - - - - - - - -\n+\n+        Fundamental argument, IERS Conventions (2003):\n+        mean anomaly of the Sun.\n+\n+        Given:\n+           t     double    TDB, Julian centuries since J2000.0 (Note 1)\n+\n+        Returned (function value):\n+                 double    l', radians (Note 2)\n+\n+        Notes:\n+\n+        1) Though t is strictly TDB, it is usually more convenient to use\n+           TT, which makes no significant difference.\n+\n+        2) The expression used is as adopted in IERS Conventions (2003) and\n+           is from Simon et al. (1994).\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Simon, J.-L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G., Laskar, J. 1994, Astron.Astrophys. 282, 663-683\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.falp03(t)\n+    return c_retval\n+\n+\n+def fama03(t):\n+    \"\"\"\n+    Fundamental argument, IERS Conventions (2003):\n+    mean longitude of Mars.\n+\n+    Parameters\n+    ----------\n+    t : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFama03``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a F a m a 0 3\n+        - - - - - - - - - -\n+\n+        Fundamental argument, IERS Conventions (2003):\n+        mean longitude of Mars.\n+\n+        Given:\n+           t     double    TDB, Julian centuries since J2000.0 (Note 1)\n+\n+        Returned (function value):\n+                 double    mean longitude of Mars, radians (Note 2)\n+\n+        Notes:\n+\n+        1) Though t is strictly TDB, it is usually more convenient to use\n+           TT, which makes no significant difference.\n+\n+        2) The expression used is as adopted in IERS Conventions (2003) and\n+           comes from Souchay et al. (1999) after Simon et al. (1994).\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Simon, J.-L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G., Laskar, J. 1994, Astron.Astrophys. 282, 663-683\n+\n+           Souchay, J., Loysel, B., Kinoshita, H., Folgueira, M. 1999,\n+           Astron.Astrophys.Supp.Ser. 135, 111\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.fama03(t)\n+    return c_retval\n+\n+\n+def fame03(t):\n+    \"\"\"\n+    Fundamental argument, IERS Conventions (2003):\n+    mean longitude of Mercury.\n+\n+    Parameters\n+    ----------\n+    t : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFame03``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a F a m e 0 3\n+        - - - - - - - - - -\n+\n+        Fundamental argument, IERS Conventions (2003):\n+        mean longitude of Mercury.\n+\n+        Given:\n+           t     double    TDB, Julian centuries since J2000.0 (Note 1)\n+\n+        Returned (function value):\n+                 double    mean longitude of Mercury, radians (Note 2)\n+\n+        Notes:\n+\n+        1) Though t is strictly TDB, it is usually more convenient to use\n+           TT, which makes no significant difference.\n+\n+        2) The expression used is as adopted in IERS Conventions (2003) and\n+           comes from Souchay et al. (1999) after Simon et al. (1994).\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Simon, J.-L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G., Laskar, J. 1994, Astron.Astrophys. 282, 663-683\n+\n+           Souchay, J., Loysel, B., Kinoshita, H., Folgueira, M. 1999,\n+           Astron.Astrophys.Supp.Ser. 135, 111\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.fame03(t)\n+    return c_retval\n+\n+\n+def fane03(t):\n+    \"\"\"\n+    Fundamental argument, IERS Conventions (2003):\n+    mean longitude of Neptune.\n+\n+    Parameters\n+    ----------\n+    t : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFane03``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a F a n e 0 3\n+        - - - - - - - - - -\n+\n+        Fundamental argument, IERS Conventions (2003):\n+        mean longitude of Neptune.\n+\n+        Given:\n+           t     double    TDB, Julian centuries since J2000.0 (Note 1)\n+\n+        Returned (function value):\n+                 double    mean longitude of Neptune, radians (Note 2)\n+\n+        Notes:\n+\n+        1) Though t is strictly TDB, it is usually more convenient to use\n+           TT, which makes no significant difference.\n+\n+        2) The expression used is as adopted in IERS Conventions (2003) and\n+           is adapted from Simon et al. (1994).\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Simon, J.-L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G., Laskar, J. 1994, Astron.Astrophys. 282, 663-683\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.fane03(t)\n+    return c_retval\n+\n+\n+def faom03(t):\n+    \"\"\"\n+    Fundamental argument, IERS Conventions (2003):\n+    mean longitude of the Moon's ascending node.\n+\n+    Parameters\n+    ----------\n+    t : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFaom03``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a F a o m 0 3\n+        - - - - - - - - - -\n+\n+        Fundamental argument, IERS Conventions (2003):\n+        mean longitude of the Moon's ascending node.\n+\n+        Given:\n+           t     double    TDB, Julian centuries since J2000.0 (Note 1)\n+\n+        Returned (function value):\n+                 double    Omega, radians (Note 2)\n+\n+        Notes:\n+\n+        1) Though t is strictly TDB, it is usually more convenient to use\n+           TT, which makes no significant difference.\n+\n+        2) The expression used is as adopted in IERS Conventions (2003) and\n+           is from Simon et al. (1994).\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Simon, J.-L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G., Laskar, J., 1994, Astron.Astrophys. 282, 663-683.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.faom03(t)\n+    return c_retval\n+\n+\n+def fapa03(t):\n+    \"\"\"\n+    Fundamental argument, IERS Conventions (2003):\n+    general accumulated precession in longitude.\n+\n+    Parameters\n+    ----------\n+    t : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFapa03``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a F a p a 0 3\n+        - - - - - - - - - -\n+\n+        Fundamental argument, IERS Conventions (2003):\n+        general accumulated precession in longitude.\n+\n+        Given:\n+           t     double    TDB, Julian centuries since J2000.0 (Note 1)\n+\n+        Returned (function value):\n+                 double    general precession in longitude, radians (Note 2)\n+\n+        Notes:\n+\n+        1) Though t is strictly TDB, it is usually more convenient to use\n+           TT, which makes no significant difference.\n+\n+        2) The expression used is as adopted in IERS Conventions (2003).  It\n+           is taken from Kinoshita & Souchay (1990) and comes originally\n+           from Lieske et al. (1977).\n+\n+        References:\n+\n+           Kinoshita, H. and Souchay J. 1990, Celest.Mech. and Dyn.Astron.\n+           48, 187\n+\n+           Lieske, J.H., Lederle, T., Fricke, W. & Morando, B. 1977,\n+           Astron.Astrophys. 58, 1-16\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.fapa03(t)\n+    return c_retval\n+\n+\n+def fasa03(t):\n+    \"\"\"\n+    Fundamental argument, IERS Conventions (2003):\n+    mean longitude of Saturn.\n+\n+    Parameters\n+    ----------\n+    t : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFasa03``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a F a s a 0 3\n+        - - - - - - - - - -\n+\n+        Fundamental argument, IERS Conventions (2003):\n+        mean longitude of Saturn.\n+\n+        Given:\n+           t     double    TDB, Julian centuries since J2000.0 (Note 1)\n+\n+        Returned (function value):\n+                 double    mean longitude of Saturn, radians (Note 2)\n+\n+        Notes:\n+\n+        1) Though t is strictly TDB, it is usually more convenient to use\n+           TT, which makes no significant difference.\n+\n+        2) The expression used is as adopted in IERS Conventions (2003) and\n+           comes from Souchay et al. (1999) after Simon et al. (1994).\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Simon, J.-L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G., Laskar, J. 1994, Astron.Astrophys. 282, 663-683\n+\n+           Souchay, J., Loysel, B., Kinoshita, H., Folgueira, M. 1999,\n+           Astron.Astrophys.Supp.Ser. 135, 111\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.fasa03(t)\n+    return c_retval\n+\n+\n+def faur03(t):\n+    \"\"\"\n+    Fundamental argument, IERS Conventions (2003):\n+    mean longitude of Uranus.\n+\n+    Parameters\n+    ----------\n+    t : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFaur03``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a F a u r 0 3\n+        - - - - - - - - - -\n+\n+        Fundamental argument, IERS Conventions (2003):\n+        mean longitude of Uranus.\n+\n+        Given:\n+           t     double    TDB, Julian centuries since J2000.0 (Note 1)\n+\n+        Returned  (function value):\n+                 double    mean longitude of Uranus, radians (Note 2)\n+\n+        Notes:\n+\n+        1) Though t is strictly TDB, it is usually more convenient to use\n+           TT, which makes no significant difference.\n+\n+        2) The expression used is as adopted in IERS Conventions (2003) and\n+           is adapted from Simon et al. (1994).\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Simon, J.-L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G., Laskar, J. 1994, Astron.Astrophys. 282, 663-683\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.faur03(t)\n+    return c_retval\n+\n+\n+def fave03(t):\n+    \"\"\"\n+    Fundamental argument, IERS Conventions (2003):\n+    mean longitude of Venus.\n+\n+    Parameters\n+    ----------\n+    t : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFave03``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a F a v e 0 3\n+        - - - - - - - - - -\n+\n+        Fundamental argument, IERS Conventions (2003):\n+        mean longitude of Venus.\n+\n+        Given:\n+           t     double    TDB, Julian centuries since J2000.0 (Note 1)\n+\n+        Returned (function value):\n+                 double    mean longitude of Venus, radians (Note 2)\n+\n+        Notes:\n+\n+        1) Though t is strictly TDB, it is usually more convenient to use\n+           TT, which makes no significant difference.\n+\n+        2) The expression used is as adopted in IERS Conventions (2003) and\n+           comes from Souchay et al. (1999) after Simon et al. (1994).\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Simon, J.-L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G., Laskar, J. 1994, Astron.Astrophys. 282, 663-683\n+\n+           Souchay, J., Loysel, B., Kinoshita, H., Folgueira, M. 1999,\n+           Astron.Astrophys.Supp.Ser. 135, 111\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.fave03(t)\n+    return c_retval\n+\n+\n+def bi00():\n+    \"\"\"\n+    Frame bias components of IAU 2000 precession-nutation models;  part\n+    of the Mathews-Herring-Buffett (MHB2000) nutation series, with\n+    additions.\n+\n+    Returns\n+    -------\n+    dpsibi : double array\n+    depsbi : double array\n+    dra : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraBi00``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a B i 0 0\n+        - - - - - - - -\n+\n+        Frame bias components of IAU 2000 precession-nutation models;  part\n+        of the Mathews-Herring-Buffett (MHB2000) nutation series, with\n+        additions.\n+\n+        Returned:\n+           dpsibi,depsbi  double  longitude and obliquity corrections\n+           dra            double  the ICRS RA of the J2000.0 mean equinox\n+\n+        Notes:\n+\n+        1) The frame bias corrections in longitude and obliquity (radians)\n+           are required in order to correct for the offset between the GCRS\n+           pole and the mean J2000.0 pole.  They define, with respect to the\n+           GCRS frame, a J2000.0 mean pole that is consistent with the rest\n+           of the IAU 2000A precession-nutation model.\n+\n+        2) In addition to the displacement of the pole, the complete\n+           description of the frame bias requires also an offset in right\n+           ascension.  This is not part of the IAU 2000A model, and is from\n+           Chapront et al. (2002).  It is returned in radians.\n+\n+        3) This is a supplemented implementation of one aspect of the IAU\n+           2000A nutation model, formally adopted by the IAU General\n+           Assembly in 2000, namely MHB2000 (Mathews et al. 2002).\n+\n+        References:\n+\n+           Chapront, J., Chapront-Touze, M. & Francou, G., Astron.\n+           Astrophys., 387, 700, 2002.\n+\n+           Mathews, P.M., Herring, T.A., Buffet, B.A., \"Modeling of nutation\n+           and precession:  New nutation series for nonrigid Earth and\n+           insights into the Earth's interior\", J.Geophys.Res., 107, B4,\n+           2002.  The MHB2000 code itself was obtained on 2002 September 9\n+           from ftp://maia.usno.navy.mil/conv2000/chapter5/IAU2000A.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    dpsibi, depsbi, dra = ufunc.bi00()\n+    return dpsibi, depsbi, dra\n+\n+\n+def bp00(date1, date2):\n+    \"\"\"\n+    Frame bias and precession, IAU 2000.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rb : double array\n+    rp : double array\n+    rbp : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraBp00``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a B p 0 0\n+        - - - - - - - -\n+\n+        Frame bias and precession, IAU 2000.\n+\n+        Given:\n+           date1,date2  double         TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           rb           double[3][3]   frame bias matrix (Note 2)\n+           rp           double[3][3]   precession matrix (Note 3)\n+           rbp          double[3][3]   bias-precession matrix (Note 4)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                   date1         date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix rb transforms vectors from GCRS to mean J2000.0 by\n+           applying frame bias.\n+\n+        3) The matrix rp transforms vectors from J2000.0 mean equator and\n+           equinox to mean equator and equinox of date by applying\n+           precession.\n+\n+        4) The matrix rbp transforms vectors from GCRS to mean equator and\n+           equinox of date by applying frame bias then precession.  It is\n+           the product rp x rb.\n+\n+        5) It is permissible to re-use the same array in the returned\n+           arguments.  The arrays are filled in the order given.\n+\n+        Called:\n+           eraBi00      frame bias components, IAU 2000\n+           eraPr00      IAU 2000 precession adjustments\n+           eraIr        initialize r-matrix to identity\n+           eraRx        rotate around X-axis\n+           eraRy        rotate around Y-axis\n+           eraRz        rotate around Z-axis\n+           eraCr        copy r-matrix\n+           eraRxr       product of two r-matrices\n+\n+        Reference:\n+           \"Expressions for the Celestial Intermediate Pole and Celestial\n+           Ephemeris Origin consistent with the IAU 2000A precession-\n+           nutation model\", Astron.Astrophys. 400, 1145-1154 (2003)\n+\n+           n.b. The celestial ephemeris origin (CEO) was renamed \"celestial\n+                intermediate origin\" (CIO) by IAU 2006 Resolution 2.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rb, rp, rbp = ufunc.bp00(date1, date2)\n+    return rb, rp, rbp\n+\n+\n+def bp06(date1, date2):\n+    \"\"\"\n+    Frame bias and precession, IAU 2006.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rb : double array\n+    rp : double array\n+    rbp : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraBp06``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a B p 0 6\n+        - - - - - - - -\n+\n+        Frame bias and precession, IAU 2006.\n+\n+        Given:\n+           date1,date2  double         TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           rb           double[3][3]   frame bias matrix (Note 2)\n+           rp           double[3][3]   precession matrix (Note 3)\n+           rbp          double[3][3]   bias-precession matrix (Note 4)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                   date1         date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix rb transforms vectors from GCRS to mean J2000.0 by\n+           applying frame bias.\n+\n+        3) The matrix rp transforms vectors from mean J2000.0 to mean of\n+           date by applying precession.\n+\n+        4) The matrix rbp transforms vectors from GCRS to mean of date by\n+           applying frame bias then precession.  It is the product rp x rb.\n+\n+        5) It is permissible to re-use the same array in the returned\n+           arguments.  The arrays are filled in the order given.\n+\n+        Called:\n+           eraPfw06     bias-precession F-W angles, IAU 2006\n+           eraFw2m      F-W angles to r-matrix\n+           eraPmat06    PB matrix, IAU 2006\n+           eraTr        transpose r-matrix\n+           eraRxr       product of two r-matrices\n+           eraCr        copy r-matrix\n+\n+        References:\n+\n+           Capitaine, N. & Wallace, P.T., 2006, Astron.Astrophys. 450, 855\n+\n+           Wallace, P.T. & Capitaine, N., 2006, Astron.Astrophys. 459, 981\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rb, rp, rbp = ufunc.bp06(date1, date2)\n+    return rb, rp, rbp\n+\n+\n+def bpn2xy(rbpn):\n+    \"\"\"\n+    Extract from the bias-precession-nutation matrix the X,Y coordinates\n+    of the Celestial Intermediate Pole.\n+\n+    Parameters\n+    ----------\n+    rbpn : double array\n+\n+    Returns\n+    -------\n+    x : double array\n+    y : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraBpn2xy``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a B p n 2 x y\n+        - - - - - - - - - -\n+\n+        Extract from the bias-precession-nutation matrix the X,Y coordinates\n+        of the Celestial Intermediate Pole.\n+\n+        Given:\n+           rbpn      double[3][3]  celestial-to-true matrix (Note 1)\n+\n+        Returned:\n+           x,y       double        Celestial Intermediate Pole (Note 2)\n+\n+        Notes:\n+\n+        1) The matrix rbpn transforms vectors from GCRS to true equator (and\n+           CIO or equinox) of date, and therefore the Celestial Intermediate\n+           Pole unit vector is the bottom row of the matrix.\n+\n+        2) The arguments x,y are components of the Celestial Intermediate\n+           Pole unit vector in the Geocentric Celestial Reference System.\n+\n+        Reference:\n+\n+           \"Expressions for the Celestial Intermediate Pole and Celestial\n+           Ephemeris Origin consistent with the IAU 2000A precession-\n+           nutation model\", Astron.Astrophys. 400, 1145-1154\n+           (2003)\n+\n+           n.b. The celestial ephemeris origin (CEO) was renamed \"celestial\n+                intermediate origin\" (CIO) by IAU 2006 Resolution 2.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    x, y = ufunc.bpn2xy(rbpn)\n+    return x, y\n+\n+\n+def c2i00a(date1, date2):\n+    \"\"\"\n+    Form the celestial-to-intermediate matrix for a given date using the\n+    IAU 2000A precession-nutation model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rc2i : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraC2i00a``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a C 2 i 0 0 a\n+        - - - - - - - - - -\n+\n+        Form the celestial-to-intermediate matrix for a given date using the\n+        IAU 2000A precession-nutation model.\n+\n+        Given:\n+           date1,date2 double       TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           rc2i        double[3][3] celestial-to-intermediate matrix (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix rc2i is the first stage in the transformation from\n+           celestial to terrestrial coordinates:\n+\n+              [TRS]  =  RPOM * R_3(ERA) * rc2i * [CRS]\n+\n+                     =  rc2t * [CRS]\n+\n+           where [CRS] is a vector in the Geocentric Celestial Reference\n+           System and [TRS] is a vector in the International Terrestrial\n+           Reference System (see IERS Conventions 2003), ERA is the Earth\n+           Rotation Angle and RPOM is the polar motion matrix.\n+\n+        3) A faster, but slightly less accurate, result (about 1 mas) can be\n+           obtained by using instead the eraC2i00b function.\n+\n+        Called:\n+           eraPnm00a    classical NPB matrix, IAU 2000A\n+           eraC2ibpn    celestial-to-intermediate matrix, given NPB matrix\n+\n+        References:\n+\n+           \"Expressions for the Celestial Intermediate Pole and Celestial\n+           Ephemeris Origin consistent with the IAU 2000A precession-\n+           nutation model\", Astron.Astrophys. 400, 1145-1154\n+           (2003)\n+\n+           n.b. The celestial ephemeris origin (CEO) was renamed \"celestial\n+                intermediate origin\" (CIO) by IAU 2006 Resolution 2.\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rc2i = ufunc.c2i00a(date1, date2)\n+    return rc2i\n+\n+\n+def c2i00b(date1, date2):\n+    \"\"\"\n+    Form the celestial-to-intermediate matrix for a given date using the\n+    IAU 2000B precession-nutation model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rc2i : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraC2i00b``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a C 2 i 0 0 b\n+        - - - - - - - - - -\n+\n+        Form the celestial-to-intermediate matrix for a given date using the\n+        IAU 2000B precession-nutation model.\n+\n+        Given:\n+           date1,date2 double       TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           rc2i        double[3][3] celestial-to-intermediate matrix (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix rc2i is the first stage in the transformation from\n+           celestial to terrestrial coordinates:\n+\n+              [TRS]  =  RPOM * R_3(ERA) * rc2i * [CRS]\n+\n+                     =  rc2t * [CRS]\n+\n+           where [CRS] is a vector in the Geocentric Celestial Reference\n+           System and [TRS] is a vector in the International Terrestrial\n+           Reference System (see IERS Conventions 2003), ERA is the Earth\n+           Rotation Angle and RPOM is the polar motion matrix.\n+\n+        3) The present function is faster, but slightly less accurate (about\n+           1 mas), than the eraC2i00a function.\n+\n+        Called:\n+           eraPnm00b    classical NPB matrix, IAU 2000B\n+           eraC2ibpn    celestial-to-intermediate matrix, given NPB matrix\n+\n+        References:\n+\n+           \"Expressions for the Celestial Intermediate Pole and Celestial\n+           Ephemeris Origin consistent with the IAU 2000A precession-\n+           nutation model\", Astron.Astrophys. 400, 1145-1154\n+           (2003)\n+\n+           n.b. The celestial ephemeris origin (CEO) was renamed \"celestial\n+                intermediate origin\" (CIO) by IAU 2006 Resolution 2.\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rc2i = ufunc.c2i00b(date1, date2)\n+    return rc2i\n+\n+\n+def c2i06a(date1, date2):\n+    \"\"\"\n+    Form the celestial-to-intermediate matrix for a given date using the\n+    IAU 2006 precession and IAU 2000A nutation models.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rc2i : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraC2i06a``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a C 2 i 0 6 a\n+        - - - - - - - - - -\n+\n+        Form the celestial-to-intermediate matrix for a given date using the\n+        IAU 2006 precession and IAU 2000A nutation models.\n+\n+        Given:\n+           date1,date2 double       TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           rc2i        double[3][3] celestial-to-intermediate matrix (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix rc2i is the first stage in the transformation from\n+           celestial to terrestrial coordinates:\n+\n+              [TRS]  =  RPOM * R_3(ERA) * rc2i * [CRS]\n+\n+                     =  RC2T * [CRS]\n+\n+           where [CRS] is a vector in the Geocentric Celestial Reference\n+           System and [TRS] is a vector in the International Terrestrial\n+           Reference System (see IERS Conventions 2003), ERA is the Earth\n+           Rotation Angle and RPOM is the polar motion matrix.\n+\n+        Called:\n+           eraPnm06a    classical NPB matrix, IAU 2006/2000A\n+           eraBpn2xy    extract CIP X,Y coordinates from NPB matrix\n+           eraS06       the CIO locator s, given X,Y, IAU 2006\n+           eraC2ixys    celestial-to-intermediate matrix, given X,Y and s\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), 2004, IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rc2i = ufunc.c2i06a(date1, date2)\n+    return rc2i\n+\n+\n+def c2ibpn(date1, date2, rbpn):\n+    \"\"\"\n+    Form the celestial-to-intermediate matrix for a given date given\n+    the bias-precession-nutation matrix.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+    rbpn : double array\n+\n+    Returns\n+    -------\n+    rc2i : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraC2ibpn``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a C 2 i b p n\n+        - - - - - - - - - -\n+\n+        Form the celestial-to-intermediate matrix for a given date given\n+        the bias-precession-nutation matrix.  IAU 2000.\n+\n+        Given:\n+           date1,date2 double       TT as a 2-part Julian Date (Note 1)\n+           rbpn        double[3][3] celestial-to-true matrix (Note 2)\n+\n+        Returned:\n+           rc2i        double[3][3] celestial-to-intermediate matrix (Note 3)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix rbpn transforms vectors from GCRS to true equator (and\n+           CIO or equinox) of date.  Only the CIP (bottom row) is used.\n+\n+        3) The matrix rc2i is the first stage in the transformation from\n+           celestial to terrestrial coordinates:\n+\n+              [TRS] = RPOM * R_3(ERA) * rc2i * [CRS]\n+\n+                    = RC2T * [CRS]\n+\n+           where [CRS] is a vector in the Geocentric Celestial Reference\n+           System and [TRS] is a vector in the International Terrestrial\n+           Reference System (see IERS Conventions 2003), ERA is the Earth\n+           Rotation Angle and RPOM is the polar motion matrix.\n+\n+        4) Although its name does not include \"00\", This function is in fact\n+           specific to the IAU 2000 models.\n+\n+        Called:\n+           eraBpn2xy    extract CIP X,Y coordinates from NPB matrix\n+           eraC2ixy     celestial-to-intermediate matrix, given X,Y\n+\n+        References:\n+           \"Expressions for the Celestial Intermediate Pole and Celestial\n+           Ephemeris Origin consistent with the IAU 2000A precession-\n+           nutation model\", Astron.Astrophys. 400, 1145-1154 (2003)\n+\n+           n.b. The celestial ephemeris origin (CEO) was renamed \"celestial\n+                intermediate origin\" (CIO) by IAU 2006 Resolution 2.\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rc2i = ufunc.c2ibpn(date1, date2, rbpn)\n+    return rc2i\n+\n+\n+def c2ixy(date1, date2, x, y):\n+    \"\"\"\n+    Form the celestial to intermediate-frame-of-date matrix for a given\n+    date when the CIP X,Y coordinates are known.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+    x : double array\n+    y : double array\n+\n+    Returns\n+    -------\n+    rc2i : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraC2ixy``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a C 2 i x y\n+        - - - - - - - - -\n+\n+        Form the celestial to intermediate-frame-of-date matrix for a given\n+        date when the CIP X,Y coordinates are known.  IAU 2000.\n+\n+        Given:\n+           date1,date2 double       TT as a 2-part Julian Date (Note 1)\n+           x,y         double       Celestial Intermediate Pole (Note 2)\n+\n+        Returned:\n+           rc2i        double[3][3] celestial-to-intermediate matrix (Note 3)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The Celestial Intermediate Pole coordinates are the x,y components\n+           of the unit vector in the Geocentric Celestial Reference System.\n+\n+        3) The matrix rc2i is the first stage in the transformation from\n+           celestial to terrestrial coordinates:\n+\n+              [TRS] = RPOM * R_3(ERA) * rc2i * [CRS]\n+\n+                    = RC2T * [CRS]\n+\n+           where [CRS] is a vector in the Geocentric Celestial Reference\n+           System and [TRS] is a vector in the International Terrestrial\n+           Reference System (see IERS Conventions 2003), ERA is the Earth\n+           Rotation Angle and RPOM is the polar motion matrix.\n+\n+        4) Although its name does not include \"00\", This function is in fact\n+           specific to the IAU 2000 models.\n+\n+        Called:\n+           eraC2ixys    celestial-to-intermediate matrix, given X,Y and s\n+           eraS00       the CIO locator s, given X,Y, IAU 2000A\n+\n+        Reference:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rc2i = ufunc.c2ixy(date1, date2, x, y)\n+    return rc2i\n+\n+\n+def c2ixys(x, y, s):\n+    \"\"\"\n+    Form the celestial to intermediate-frame-of-date matrix given the CIP\n+    X,Y and the CIO locator s.\n+\n+    Parameters\n+    ----------\n+    x : double array\n+    y : double array\n+    s : double array\n+\n+    Returns\n+    -------\n+    rc2i : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraC2ixys``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a C 2 i x y s\n+        - - - - - - - - - -\n+\n+        Form the celestial to intermediate-frame-of-date matrix given the CIP\n+        X,Y and the CIO locator s.\n+\n+        Given:\n+           x,y      double         Celestial Intermediate Pole (Note 1)\n+           s        double         the CIO locator s (Note 2)\n+\n+        Returned:\n+           rc2i     double[3][3]   celestial-to-intermediate matrix (Note 3)\n+\n+        Notes:\n+\n+        1) The Celestial Intermediate Pole coordinates are the x,y\n+           components of the unit vector in the Geocentric Celestial\n+           Reference System.\n+\n+        2) The CIO locator s (in radians) positions the Celestial\n+           Intermediate Origin on the equator of the CIP.\n+\n+        3) The matrix rc2i is the first stage in the transformation from\n+           celestial to terrestrial coordinates:\n+\n+              [TRS] = RPOM * R_3(ERA) * rc2i * [CRS]\n+\n+                    = RC2T * [CRS]\n+\n+           where [CRS] is a vector in the Geocentric Celestial Reference\n+           System and [TRS] is a vector in the International Terrestrial\n+           Reference System (see IERS Conventions 2003), ERA is the Earth\n+           Rotation Angle and RPOM is the polar motion matrix.\n+\n+        Called:\n+           eraIr        initialize r-matrix to identity\n+           eraRz        rotate around Z-axis\n+           eraRy        rotate around Y-axis\n+\n+        Reference:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rc2i = ufunc.c2ixys(x, y, s)\n+    return rc2i\n+\n+\n+def c2t00a(tta, ttb, uta, utb, xp, yp):\n+    \"\"\"\n+    Form the celestial to terrestrial matrix given the date, the UT1 and\n+    the polar motion, using the IAU 2000A precession-nutation model.\n+\n+    Parameters\n+    ----------\n+    tta : double array\n+    ttb : double array\n+    uta : double array\n+    utb : double array\n+    xp : double array\n+    yp : double array\n+\n+    Returns\n+    -------\n+    rc2t : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraC2t00a``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a C 2 t 0 0 a\n+        - - - - - - - - - -\n+\n+        Form the celestial to terrestrial matrix given the date, the UT1 and\n+        the polar motion, using the IAU 2000A precession-nutation model.\n+\n+        Given:\n+           tta,ttb  double         TT as a 2-part Julian Date (Note 1)\n+           uta,utb  double         UT1 as a 2-part Julian Date (Note 1)\n+           xp,yp    double         CIP coordinates (radians, Note 2)\n+\n+        Returned:\n+           rc2t     double[3][3]   celestial-to-terrestrial matrix (Note 3)\n+\n+        Notes:\n+\n+        1) The TT and UT1 dates tta+ttb and uta+utb are Julian Dates,\n+           apportioned in any convenient way between the arguments uta and\n+           utb.  For example, JD(UT1)=2450123.7 could be expressed in any of\n+           these ways, among others:\n+\n+                   uta            utb\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 and MJD methods are good compromises\n+           between resolution and convenience.  In the case of uta,utb, the\n+           date & time method is best matched to the Earth rotation angle\n+           algorithm used:  maximum precision is delivered when the uta\n+           argument is for 0hrs UT1 on the day in question and the utb\n+           argument lies in the range 0 to 1, or vice versa.\n+\n+        2) The arguments xp and yp are the coordinates (in radians) of the\n+           Celestial Intermediate Pole with respect to the International\n+           Terrestrial Reference System (see IERS Conventions 2003),\n+           measured along the meridians 0 and 90 deg west respectively.\n+\n+        3) The matrix rc2t transforms from celestial to terrestrial\n+           coordinates:\n+\n+              [TRS] = RPOM * R_3(ERA) * RC2I * [CRS]\n+\n+                    = rc2t * [CRS]\n+\n+           where [CRS] is a vector in the Geocentric Celestial Reference\n+           System and [TRS] is a vector in the International Terrestrial\n+           Reference System (see IERS Conventions 2003), RC2I is the\n+           celestial-to-intermediate matrix, ERA is the Earth rotation\n+           angle and RPOM is the polar motion matrix.\n+\n+        4) A faster, but slightly less accurate, result (about 1 mas) can\n+           be obtained by using instead the eraC2t00b function.\n+\n+        Called:\n+           eraC2i00a    celestial-to-intermediate matrix, IAU 2000A\n+           eraEra00     Earth rotation angle, IAU 2000\n+           eraSp00      the TIO locator s', IERS 2000\n+           eraPom00     polar motion matrix\n+           eraC2tcio    form CIO-based celestial-to-terrestrial matrix\n+\n+        Reference:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rc2t = ufunc.c2t00a(tta, ttb, uta, utb, xp, yp)\n+    return rc2t\n+\n+\n+def c2t00b(tta, ttb, uta, utb, xp, yp):\n+    \"\"\"\n+    Form the celestial to terrestrial matrix given the date, the UT1 and\n+    the polar motion, using the IAU 2000B precession-nutation model.\n+\n+    Parameters\n+    ----------\n+    tta : double array\n+    ttb : double array\n+    uta : double array\n+    utb : double array\n+    xp : double array\n+    yp : double array\n+\n+    Returns\n+    -------\n+    rc2t : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraC2t00b``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a C 2 t 0 0 b\n+        - - - - - - - - - -\n+\n+        Form the celestial to terrestrial matrix given the date, the UT1 and\n+        the polar motion, using the IAU 2000B precession-nutation model.\n+\n+        Given:\n+           tta,ttb  double         TT as a 2-part Julian Date (Note 1)\n+           uta,utb  double         UT1 as a 2-part Julian Date (Note 1)\n+           xp,yp    double         coordinates of the pole (radians, Note 2)\n+\n+        Returned:\n+           rc2t     double[3][3]   celestial-to-terrestrial matrix (Note 3)\n+\n+        Notes:\n+\n+        1) The TT and UT1 dates tta+ttb and uta+utb are Julian Dates,\n+           apportioned in any convenient way between the arguments uta and\n+           utb.  For example, JD(UT1)=2450123.7 could be expressed in any of\n+           these ways, among others:\n+\n+                   uta            utb\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 and MJD methods are good compromises\n+           between resolution and convenience.  In the case of uta,utb, the\n+           date & time method is best matched to the Earth rotation angle\n+           algorithm used:  maximum precision is delivered when the uta\n+           argument is for 0hrs UT1 on the day in question and the utb\n+           argument lies in the range 0 to 1, or vice versa.\n+\n+        2) The arguments xp and yp are the coordinates (in radians) of the\n+           Celestial Intermediate Pole with respect to the International\n+           Terrestrial Reference System (see IERS Conventions 2003),\n+           measured along the meridians 0 and 90 deg west respectively.\n+\n+        3) The matrix rc2t transforms from celestial to terrestrial\n+           coordinates:\n+\n+              [TRS] = RPOM * R_3(ERA) * RC2I * [CRS]\n+\n+                    = rc2t * [CRS]\n+\n+           where [CRS] is a vector in the Geocentric Celestial Reference\n+           System and [TRS] is a vector in the International Terrestrial\n+           Reference System (see IERS Conventions 2003), RC2I is the\n+           celestial-to-intermediate matrix, ERA is the Earth rotation\n+           angle and RPOM is the polar motion matrix.\n+\n+        4) The present function is faster, but slightly less accurate (about\n+           1 mas), than the eraC2t00a function.\n+\n+        Called:\n+           eraC2i00b    celestial-to-intermediate matrix, IAU 2000B\n+           eraEra00     Earth rotation angle, IAU 2000\n+           eraPom00     polar motion matrix\n+           eraC2tcio    form CIO-based celestial-to-terrestrial matrix\n+\n+        Reference:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rc2t = ufunc.c2t00b(tta, ttb, uta, utb, xp, yp)\n+    return rc2t\n+\n+\n+def c2t06a(tta, ttb, uta, utb, xp, yp):\n+    \"\"\"\n+    Form the celestial to terrestrial matrix given the date, the UT1 and\n+    the polar motion, using the IAU 2006/2000A precession-nutation\n+    model.\n+\n+    Parameters\n+    ----------\n+    tta : double array\n+    ttb : double array\n+    uta : double array\n+    utb : double array\n+    xp : double array\n+    yp : double array\n+\n+    Returns\n+    -------\n+    rc2t : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraC2t06a``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a C 2 t 0 6 a\n+        - - - - - - - - - -\n+\n+        Form the celestial to terrestrial matrix given the date, the UT1 and\n+        the polar motion, using the IAU 2006/2000A precession-nutation\n+        model.\n+\n+        Given:\n+           tta,ttb  double         TT as a 2-part Julian Date (Note 1)\n+           uta,utb  double         UT1 as a 2-part Julian Date (Note 1)\n+           xp,yp    double         coordinates of the pole (radians, Note 2)\n+\n+        Returned:\n+           rc2t     double[3][3]   celestial-to-terrestrial matrix (Note 3)\n+\n+        Notes:\n+\n+        1) The TT and UT1 dates tta+ttb and uta+utb are Julian Dates,\n+           apportioned in any convenient way between the two arguments.  For\n+           example, JD(UT1)=2450123.7 could be expressed in any of\n+           these ways, among others:\n+\n+                   uta            utb\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 and MJD methods are good compromises\n+           between resolution and convenience.  In the case of uta,utb, the\n+           date & time method is best matched to the Earth rotation angle\n+           algorithm used:  maximum precision is delivered when the uta\n+           argument is for 0hrs UT1 on the day in question and the utb\n+           argument lies in the range 0 to 1, or vice versa.\n+\n+        2) The arguments xp and yp are the coordinates (in radians) of the\n+           Celestial Intermediate Pole with respect to the International\n+           Terrestrial Reference System (see IERS Conventions 2003),\n+           measured along the meridians 0 and 90 deg west respectively.\n+\n+        3) The matrix rc2t transforms from celestial to terrestrial\n+           coordinates:\n+\n+              [TRS] = RPOM * R_3(ERA) * RC2I * [CRS]\n+\n+                    = rc2t * [CRS]\n+\n+           where [CRS] is a vector in the Geocentric Celestial Reference\n+           System and [TRS] is a vector in the International Terrestrial\n+           Reference System (see IERS Conventions 2003), RC2I is the\n+           celestial-to-intermediate matrix, ERA is the Earth rotation\n+           angle and RPOM is the polar motion matrix.\n+\n+        Called:\n+           eraC2i06a    celestial-to-intermediate matrix, IAU 2006/2000A\n+           eraEra00     Earth rotation angle, IAU 2000\n+           eraSp00      the TIO locator s', IERS 2000\n+           eraPom00     polar motion matrix\n+           eraC2tcio    form CIO-based celestial-to-terrestrial matrix\n+\n+        Reference:\n+\n+           McCarthy, D. D., Petit, G. (eds.), 2004, IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG\n+\n+        This revision:  2023 January 18\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rc2t = ufunc.c2t06a(tta, ttb, uta, utb, xp, yp)\n+    return rc2t\n+\n+\n+def c2tcio(rc2i, era, rpom):\n+    \"\"\"\n+    Assemble the celestial to terrestrial matrix from CIO-based\n+    components (the celestial-to-intermediate matrix, the Earth Rotation\n+    Angle and the polar motion matrix).\n+\n+    Parameters\n+    ----------\n+    rc2i : double array\n+    era : double array\n+    rpom : double array\n+\n+    Returns\n+    -------\n+    rc2t : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraC2tcio``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a C 2 t c i o\n+        - - - - - - - - - -\n+\n+        Assemble the celestial to terrestrial matrix from CIO-based\n+        components (the celestial-to-intermediate matrix, the Earth Rotation\n+        Angle and the polar motion matrix).\n+\n+        Given:\n+           rc2i     double[3][3]    celestial-to-intermediate matrix\n+           era      double          Earth rotation angle (radians)\n+           rpom     double[3][3]    polar-motion matrix\n+\n+        Returned:\n+           rc2t     double[3][3]    celestial-to-terrestrial matrix\n+\n+        Notes:\n+\n+        1) This function constructs the rotation matrix that transforms\n+           vectors in the celestial system into vectors in the terrestrial\n+           system.  It does so starting from precomputed components, namely\n+           the matrix which rotates from celestial coordinates to the\n+           intermediate frame, the Earth rotation angle and the polar motion\n+           matrix.  One use of the present function is when generating a\n+           series of celestial-to-terrestrial matrices where only the Earth\n+           Rotation Angle changes, avoiding the considerable overhead of\n+           recomputing the precession-nutation more often than necessary to\n+           achieve given accuracy objectives.\n+\n+        2) The relationship between the arguments is as follows:\n+\n+              [TRS] = RPOM * R_3(ERA) * rc2i * [CRS]\n+\n+                    = rc2t * [CRS]\n+\n+           where [CRS] is a vector in the Geocentric Celestial Reference\n+           System and [TRS] is a vector in the International Terrestrial\n+           Reference System (see IERS Conventions 2003).\n+\n+        Called:\n+           eraCr        copy r-matrix\n+           eraRz        rotate around Z-axis\n+           eraRxr       product of two r-matrices\n+\n+        Reference:\n+\n+           McCarthy, D. D., Petit, G. (eds.), 2004, IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rc2t = ufunc.c2tcio(rc2i, era, rpom)\n+    return rc2t\n+\n+\n+def c2teqx(rbpn, gst, rpom):\n+    \"\"\"\n+    Assemble the celestial to terrestrial matrix from equinox-based\n+    components (the celestial-to-true matrix, the Greenwich Apparent\n+    Sidereal Time and the polar motion matrix).\n+\n+    Parameters\n+    ----------\n+    rbpn : double array\n+    gst : double array\n+    rpom : double array\n+\n+    Returns\n+    -------\n+    rc2t : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraC2teqx``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a C 2 t e q x\n+        - - - - - - - - - -\n+\n+        Assemble the celestial to terrestrial matrix from equinox-based\n+        components (the celestial-to-true matrix, the Greenwich Apparent\n+        Sidereal Time and the polar motion matrix).\n+\n+        Given:\n+           rbpn   double[3][3]  celestial-to-true matrix\n+           gst    double        Greenwich (apparent) Sidereal Time (radians)\n+           rpom   double[3][3]  polar-motion matrix\n+\n+        Returned:\n+           rc2t   double[3][3]  celestial-to-terrestrial matrix (Note 2)\n+\n+        Notes:\n+\n+        1) This function constructs the rotation matrix that transforms\n+           vectors in the celestial system into vectors in the terrestrial\n+           system.  It does so starting from precomputed components, namely\n+           the matrix which rotates from celestial coordinates to the\n+           true equator and equinox of date, the Greenwich Apparent Sidereal\n+           Time and the polar motion matrix.  One use of the present function\n+           is when generating a series of celestial-to-terrestrial matrices\n+           where only the Sidereal Time changes, avoiding the considerable\n+           overhead of recomputing the precession-nutation more often than\n+           necessary to achieve given accuracy objectives.\n+\n+        2) The relationship between the arguments is as follows:\n+\n+              [TRS] = rpom * R_3(gst) * rbpn * [CRS]\n+\n+                    = rc2t * [CRS]\n+\n+           where [CRS] is a vector in the Geocentric Celestial Reference\n+           System and [TRS] is a vector in the International Terrestrial\n+           Reference System (see IERS Conventions 2003).\n+\n+        Called:\n+           eraCr        copy r-matrix\n+           eraRz        rotate around Z-axis\n+           eraRxr       product of two r-matrices\n+\n+        Reference:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rc2t = ufunc.c2teqx(rbpn, gst, rpom)\n+    return rc2t\n+\n+\n+def c2tpe(tta, ttb, uta, utb, dpsi, deps, xp, yp):\n+    \"\"\"\n+    Form the celestial to terrestrial matrix given the date, the UT1,\n+    the nutation and the polar motion.\n+\n+    Parameters\n+    ----------\n+    tta : double array\n+    ttb : double array\n+    uta : double array\n+    utb : double array\n+    dpsi : double array\n+    deps : double array\n+    xp : double array\n+    yp : double array\n+\n+    Returns\n+    -------\n+    rc2t : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraC2tpe``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a C 2 t p e\n+        - - - - - - - - -\n+\n+        Form the celestial to terrestrial matrix given the date, the UT1,\n+        the nutation and the polar motion.  IAU 2000.\n+\n+        Given:\n+           tta,ttb    double        TT as a 2-part Julian Date (Note 1)\n+           uta,utb    double        UT1 as a 2-part Julian Date (Note 1)\n+           dpsi,deps  double        nutation (Note 2)\n+           xp,yp      double        coordinates of the pole (radians, Note 3)\n+\n+        Returned:\n+           rc2t       double[3][3]  celestial-to-terrestrial matrix (Note 4)\n+\n+        Notes:\n+\n+        1) The TT and UT1 dates tta+ttb and uta+utb are Julian Dates,\n+           apportioned in any convenient way between the arguments uta and\n+           utb.  For example, JD(UT1)=2450123.7 could be expressed in any of\n+           these ways, among others:\n+\n+                   uta            utb\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 and MJD methods are good compromises\n+           between resolution and convenience.  In the case of uta,utb, the\n+           date & time method is best matched to the Earth rotation angle\n+           algorithm used:  maximum precision is delivered when the uta\n+           argument is for 0hrs UT1 on the day in question and the utb\n+           argument lies in the range 0 to 1, or vice versa.\n+\n+        2) The caller is responsible for providing the nutation components;\n+           they are in longitude and obliquity, in radians and are with\n+           respect to the equinox and ecliptic of date.  For high-accuracy\n+           applications, free core nutation should be included as well as\n+           any other relevant corrections to the position of the CIP.\n+\n+        3) The arguments xp and yp are the coordinates (in radians) of the\n+           Celestial Intermediate Pole with respect to the International\n+           Terrestrial Reference System (see IERS Conventions 2003),\n+           measured along the meridians 0 and 90 deg west respectively.\n+\n+        4) The matrix rc2t transforms from celestial to terrestrial\n+           coordinates:\n+\n+              [TRS] = RPOM * R_3(GST) * RBPN * [CRS]\n+\n+                    = rc2t * [CRS]\n+\n+           where [CRS] is a vector in the Geocentric Celestial Reference\n+           System and [TRS] is a vector in the International Terrestrial\n+           Reference System (see IERS Conventions 2003), RBPN is the\n+           bias-precession-nutation matrix, GST is the Greenwich (apparent)\n+           Sidereal Time and RPOM is the polar motion matrix.\n+\n+        5) Although its name does not include \"00\", This function is in fact\n+           specific to the IAU 2000 models.\n+\n+        Called:\n+           eraPn00      bias/precession/nutation results, IAU 2000\n+           eraGmst00    Greenwich mean sidereal time, IAU 2000\n+           eraSp00      the TIO locator s', IERS 2000\n+           eraEe00      equation of the equinoxes, IAU 2000\n+           eraPom00     polar motion matrix\n+           eraC2teqx    form equinox-based celestial-to-terrestrial matrix\n+\n+        Reference:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rc2t = ufunc.c2tpe(tta, ttb, uta, utb, dpsi, deps, xp, yp)\n+    return rc2t\n+\n+\n+def c2txy(tta, ttb, uta, utb, x, y, xp, yp):\n+    \"\"\"\n+    Form the celestial to terrestrial matrix given the date, the UT1,\n+    the CIP coordinates and the polar motion.\n+\n+    Parameters\n+    ----------\n+    tta : double array\n+    ttb : double array\n+    uta : double array\n+    utb : double array\n+    x : double array\n+    y : double array\n+    xp : double array\n+    yp : double array\n+\n+    Returns\n+    -------\n+    rc2t : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraC2txy``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a C 2 t x y\n+        - - - - - - - - -\n+\n+        Form the celestial to terrestrial matrix given the date, the UT1,\n+        the CIP coordinates and the polar motion.  IAU 2000.\n+\n+        Given:\n+           tta,ttb  double         TT as a 2-part Julian Date (Note 1)\n+           uta,utb  double         UT1 as a 2-part Julian Date (Note 1)\n+           x,y      double         Celestial Intermediate Pole (Note 2)\n+           xp,yp    double         coordinates of the pole (radians, Note 3)\n+\n+        Returned:\n+           rc2t     double[3][3]   celestial-to-terrestrial matrix (Note 4)\n+\n+        Notes:\n+\n+        1) The TT and UT1 dates tta+ttb and uta+utb are Julian Dates,\n+           apportioned in any convenient way between the arguments uta and\n+           utb.  For example, JD(UT1)=2450123.7 could be expressed in any o\n+           these ways, among others:\n+\n+                   uta            utb\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 and MJD methods are good compromises\n+           between resolution and convenience.  In the case of uta,utb, the\n+           date & time method is best matched to the Earth rotation angle\n+           algorithm used:  maximum precision is delivered when the uta\n+           argument is for 0hrs UT1 on the day in question and the utb\n+           argument lies in the range 0 to 1, or vice versa.\n+\n+        2) The Celestial Intermediate Pole coordinates are the x,y\n+           components of the unit vector in the Geocentric Celestial\n+           Reference System.\n+\n+        3) The arguments xp and yp are the coordinates (in radians) of the\n+           Celestial Intermediate Pole with respect to the International\n+           Terrestrial Reference System (see IERS Conventions 2003),\n+           measured along the meridians 0 and 90 deg west respectively.\n+\n+        4) The matrix rc2t transforms from celestial to terrestrial\n+           coordinates:\n+\n+              [TRS] = RPOM * R_3(ERA) * RC2I * [CRS]\n+\n+                    = rc2t * [CRS]\n+\n+           where [CRS] is a vector in the Geocentric Celestial Reference\n+           System and [TRS] is a vector in the International Terrestrial\n+           Reference System (see IERS Conventions 2003), ERA is the Earth\n+           Rotation Angle and RPOM is the polar motion matrix.\n+\n+        5) Although its name does not include \"00\", This function is in fact\n+           specific to the IAU 2000 models.\n+\n+        Called:\n+           eraC2ixy     celestial-to-intermediate matrix, given X,Y\n+           eraEra00     Earth rotation angle, IAU 2000\n+           eraSp00      the TIO locator s', IERS 2000\n+           eraPom00     polar motion matrix\n+           eraC2tcio    form CIO-based celestial-to-terrestrial matrix\n+\n+       Reference:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rc2t = ufunc.c2txy(tta, ttb, uta, utb, x, y, xp, yp)\n+    return rc2t\n+\n+\n+def eo06a(date1, date2):\n+    \"\"\"\n+    Equation of the origins, IAU 2006 precession and IAU 2000A nutation.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEo06a``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a E o 0 6 a\n+        - - - - - - - - -\n+\n+        Equation of the origins, IAU 2006 precession and IAU 2000A nutation.\n+\n+        Given:\n+           date1,date2  double    TT as a 2-part Julian Date (Note 1)\n+\n+        Returned (function value):\n+                        double    the equation of the origins in radians\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The equation of the origins is the distance between the true\n+           equinox and the celestial intermediate origin and, equivalently,\n+           the difference between Earth rotation angle and Greenwich\n+           apparent sidereal time (ERA-GST).  It comprises the precession\n+           (since J2000.0) in right ascension plus the equation of the\n+           equinoxes (including the small correction terms).\n+\n+        Called:\n+           eraPnm06a    classical NPB matrix, IAU 2006/2000A\n+           eraBpn2xy    extract CIP X,Y coordinates from NPB matrix\n+           eraS06       the CIO locator s, given X,Y, IAU 2006\n+           eraEors      equation of the origins, given NPB matrix and s\n+\n+        References:\n+\n+           Capitaine, N. & Wallace, P.T., 2006, Astron.Astrophys. 450, 855\n+\n+           Wallace, P.T. & Capitaine, N., 2006, Astron.Astrophys. 459, 981\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.eo06a(date1, date2)\n+    return c_retval\n+\n+\n+def eors(rnpb, s):\n+    \"\"\"\n+    Equation of the origins, given the classical NPB matrix and the\n+    quantity s.\n+\n+    Parameters\n+    ----------\n+    rnpb : double array\n+    s : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEors``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a E o r s\n+        - - - - - - - -\n+\n+        Equation of the origins, given the classical NPB matrix and the\n+        quantity s.\n+\n+        Given:\n+           rnpb  double[3][3]  classical nutation x precession x bias matrix\n+           s     double        the quantity s (the CIO locator) in radians\n+\n+        Returned (function value):\n+                 double        the equation of the origins in radians\n+\n+        Notes:\n+\n+        1)  The equation of the origins is the distance between the true\n+            equinox and the celestial intermediate origin and, equivalently,\n+            the difference between Earth rotation angle and Greenwich\n+            apparent sidereal time (ERA-GST).  It comprises the precession\n+            (since J2000.0) in right ascension plus the equation of the\n+            equinoxes (including the small correction terms).\n+\n+        2)  The algorithm is from Wallace & Capitaine (2006).\n+\n+       References:\n+\n+           Capitaine, N. & Wallace, P.T., 2006, Astron.Astrophys. 450, 855\n+\n+           Wallace, P. & Capitaine, N., 2006, Astron.Astrophys. 459, 981\n+\n+        This revision:  2023 May 6\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.eors(rnpb, s)\n+    return c_retval\n+\n+\n+def fw2m(gamb, phib, psi, eps):\n+    \"\"\"\n+    Form rotation matrix given the Fukushima-Williams angles.\n+\n+    Parameters\n+    ----------\n+    gamb : double array\n+    phib : double array\n+    psi : double array\n+    eps : double array\n+\n+    Returns\n+    -------\n+    r : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFw2m``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a F w 2 m\n+        - - - - - - - -\n+\n+        Form rotation matrix given the Fukushima-Williams angles.\n+\n+        Given:\n+           gamb     double         F-W angle gamma_bar (radians)\n+           phib     double         F-W angle phi_bar (radians)\n+           psi      double         F-W angle psi (radians)\n+           eps      double         F-W angle epsilon (radians)\n+\n+        Returned:\n+           r        double[3][3]   rotation matrix\n+\n+        Notes:\n+\n+        1) Naming the following points:\n+\n+                 e = J2000.0 ecliptic pole,\n+                 p = GCRS pole,\n+                 E = ecliptic pole of date,\n+           and   P = CIP,\n+\n+           the four Fukushima-Williams angles are as follows:\n+\n+              gamb = gamma = epE\n+              phib = phi = pE\n+              psi = psi = pEP\n+              eps = epsilon = EP\n+\n+        2) The matrix representing the combined effects of frame bias,\n+           precession and nutation is:\n+\n+              NxPxB = R_1(-eps).R_3(-psi).R_1(phib).R_3(gamb)\n+\n+        3) The present function can construct three different matrices,\n+           depending on which angles are supplied as the arguments gamb,\n+           phib, psi and eps:\n+\n+           o  To obtain the nutation x precession x frame bias matrix,\n+              first generate the four precession angles known conventionally\n+              as gamma_bar, phi_bar, psi_bar and epsilon_A, then generate\n+              the nutation components Dpsi and Depsilon and add them to\n+              psi_bar and epsilon_A, and finally call the present function\n+              using those four angles as arguments.\n+\n+           o  To obtain the precession x frame bias matrix, generate the\n+              four precession angles and call the present function.\n+\n+           o  To obtain the frame bias matrix, generate the four precession\n+              angles for date J2000.0 and call the present function.\n+\n+           The nutation-only and precession-only matrices can if necessary\n+           be obtained by combining these three appropriately.\n+\n+        Called:\n+           eraIr        initialize r-matrix to identity\n+           eraRz        rotate around Z-axis\n+           eraRx        rotate around X-axis\n+\n+        References:\n+\n+           Capitaine, N. & Wallace, P.T., 2006, Astron.Astrophys. 450, 855\n+\n+           Hilton, J. et al., 2006, Celest.Mech.Dyn.Astron. 94, 351\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    r = ufunc.fw2m(gamb, phib, psi, eps)\n+    return r\n+\n+\n+def fw2xy(gamb, phib, psi, eps):\n+    \"\"\"\n+    CIP X,Y given Fukushima-Williams bias-precession-nutation angles.\n+\n+    Parameters\n+    ----------\n+    gamb : double array\n+    phib : double array\n+    psi : double array\n+    eps : double array\n+\n+    Returns\n+    -------\n+    x : double array\n+    y : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFw2xy``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a F w 2 x y\n+        - - - - - - - - -\n+\n+        CIP X,Y given Fukushima-Williams bias-precession-nutation angles.\n+\n+        Given:\n+           gamb     double    F-W angle gamma_bar (radians)\n+           phib     double    F-W angle phi_bar (radians)\n+           psi      double    F-W angle psi (radians)\n+           eps      double    F-W angle epsilon (radians)\n+\n+        Returned:\n+           x,y      double    CIP unit vector X,Y\n+\n+        Notes:\n+\n+        1) Naming the following points:\n+\n+                 e = J2000.0 ecliptic pole,\n+                 p = GCRS pole\n+                 E = ecliptic pole of date,\n+           and   P = CIP,\n+\n+           the four Fukushima-Williams angles are as follows:\n+\n+              gamb = gamma = epE\n+              phib = phi = pE\n+              psi = psi = pEP\n+              eps = epsilon = EP\n+\n+        2) The matrix representing the combined effects of frame bias,\n+           precession and nutation is:\n+\n+              NxPxB = R_1(-epsA).R_3(-psi).R_1(phib).R_3(gamb)\n+\n+           The returned values x,y are elements [2][0] and [2][1] of the\n+           matrix.  Near J2000.0, they are essentially angles in radians.\n+\n+        Called:\n+           eraFw2m      F-W angles to r-matrix\n+           eraBpn2xy    extract CIP X,Y coordinates from NPB matrix\n+\n+        Reference:\n+\n+           Hilton, J. et al., 2006, Celest.Mech.Dyn.Astron. 94, 351\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    x, y = ufunc.fw2xy(gamb, phib, psi, eps)\n+    return x, y\n+\n+\n+def ltp(epj):\n+    \"\"\"\n+    Long-term precession matrix.\n+\n+    Parameters\n+    ----------\n+    epj : double array\n+\n+    Returns\n+    -------\n+    rp : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraLtp``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a L t p\n+        - - - - - - -\n+\n+        Long-term precession matrix.\n+\n+        Given:\n+           epj     double         Julian epoch (TT)\n+\n+        Returned:\n+           rp      double[3][3]   precession matrix, J2000.0 to date\n+\n+        Notes:\n+\n+        1) The matrix is in the sense\n+\n+              P_date = rp x P_J2000,\n+\n+           where P_J2000 is a vector with respect to the J2000.0 mean\n+           equator and equinox and P_date is the same vector with respect to\n+           the mean equator and equinox of epoch epj.\n+\n+        2) The Vondrak et al. (2011, 2012) 400 millennia precession model\n+           agrees with the IAU 2006 precession at J2000.0 and stays within\n+           100 microarcseconds during the 20th and 21st centuries.  It is\n+           accurate to a few arcseconds throughout the historical period,\n+           worsening to a few tenths of a degree at the end of the\n+           +/- 200,000 year time span.\n+\n+        Called:\n+           eraLtpequ    equator pole, long term\n+           eraLtpecl    ecliptic pole, long term\n+           eraPxp       vector product\n+           eraPn        normalize vector\n+\n+        References:\n+\n+          Vondrak, J., Capitaine, N. and Wallace, P., 2011, New precession\n+          expressions, valid for long time intervals, Astron.Astrophys. 534,\n+          A22\n+\n+          Vondrak, J., Capitaine, N. and Wallace, P., 2012, New precession\n+          expressions, valid for long time intervals (Corrigendum),\n+          Astron.Astrophys. 541, C1\n+\n+        This revision:  2023 March 19\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rp = ufunc.ltp(epj)\n+    return rp\n+\n+\n+def ltpb(epj):\n+    \"\"\"\n+    Long-term precession matrix, including ICRS frame bias.\n+\n+    Parameters\n+    ----------\n+    epj : double array\n+\n+    Returns\n+    -------\n+    rpb : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraLtpb``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a L t p b\n+        - - - - - - - -\n+\n+        Long-term precession matrix, including ICRS frame bias.\n+\n+        Given:\n+           epj     double         Julian epoch (TT)\n+\n+        Returned:\n+           rpb     double[3][3]   precession+bias matrix, J2000.0 to date\n+\n+        Notes:\n+\n+        1) The matrix is in the sense\n+\n+              P_date = rpb x P_ICRS,\n+\n+           where P_ICRS is a vector in the Geocentric Celestial Reference\n+           System, and P_date is the vector with respect to the Celestial\n+           Intermediate Reference System at that date but with nutation\n+           neglected.\n+\n+        2) A first order frame bias formulation is used, of sub-\n+           microarcsecond accuracy compared with a full 3D rotation.\n+\n+        3) The Vondrak et al. (2011, 2012) 400 millennia precession model\n+           agrees with the IAU 2006 precession at J2000.0 and stays within\n+           100 microarcseconds during the 20th and 21st centuries.  It is\n+           accurate to a few arcseconds throughout the historical period,\n+           worsening to a few tenths of a degree at the end of the\n+           +/- 200,000 year time span.\n+\n+        References:\n+\n+          Vondrak, J., Capitaine, N. and Wallace, P., 2011, New precession\n+          expressions, valid for long time intervals, Astron.Astrophys. 534,\n+          A22\n+\n+          Vondrak, J., Capitaine, N. and Wallace, P., 2012, New precession\n+          expressions, valid for long time intervals (Corrigendum),\n+          Astron.Astrophys. 541, C1\n+\n+        This revision:  2023 March 20\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rpb = ufunc.ltpb(epj)\n+    return rpb\n+\n+\n+def ltpecl(epj):\n+    \"\"\"\n+    Long-term precession of the ecliptic.\n+\n+    Parameters\n+    ----------\n+    epj : double array\n+\n+    Returns\n+    -------\n+    vec : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraLtpecl``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a L t p e c l\n+        - - - - - - - - - -\n+\n+        Long-term precession of the ecliptic.\n+\n+        Given:\n+           epj     double         Julian epoch (TT)\n+\n+        Returned:\n+           vec     double[3]      ecliptic pole unit vector\n+\n+        Notes:\n+\n+        1) The returned vector is with respect to the J2000.0 mean equator\n+           and equinox.\n+\n+        2) The Vondrak et al. (2011, 2012) 400 millennia precession model\n+           agrees with the IAU 2006 precession at J2000.0 and stays within\n+           100 microarcseconds during the 20th and 21st centuries.  It is\n+           accurate to a few arcseconds throughout the historical period,\n+           worsening to a few tenths of a degree at the end of the\n+           +/- 200,000 year time span.\n+\n+        References:\n+\n+          Vondrak, J., Capitaine, N. and Wallace, P., 2011, New precession\n+          expressions, valid for long time intervals, Astron.Astrophys. 534,\n+          A22\n+\n+          Vondrak, J., Capitaine, N. and Wallace, P., 2012, New precession\n+          expressions, valid for long time intervals (Corrigendum),\n+          Astron.Astrophys. 541, C1\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    vec = ufunc.ltpecl(epj)\n+    return vec\n+\n+\n+def ltpequ(epj):\n+    \"\"\"\n+    Long-term precession of the equator.\n+\n+    Parameters\n+    ----------\n+    epj : double array\n+\n+    Returns\n+    -------\n+    veq : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraLtpequ``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a L t p e q u\n+        - - - - - - - - - -\n+\n+        Long-term precession of the equator.\n+\n+        Given:\n+           epj     double         Julian epoch (TT)\n+\n+        Returned:\n+           veq     double[3]      equator pole unit vector\n+\n+        Notes:\n+\n+        1) The returned vector is with respect to the J2000.0 mean equator\n+           and equinox.\n+\n+        2) The Vondrak et al. (2011, 2012) 400 millennia precession model\n+           agrees with the IAU 2006 precession at J2000.0 and stays within\n+           100 microarcseconds during the 20th and 21st centuries.  It is\n+           accurate to a few arcseconds throughout the historical period,\n+           worsening to a few tenths of a degree at the end of the\n+           +/- 200,000 year time span.\n+\n+        References:\n+\n+          Vondrak, J., Capitaine, N. and Wallace, P., 2011, New precession\n+          expressions, valid for long time intervals, Astron.Astrophys. 534,\n+          A22\n+\n+          Vondrak, J., Capitaine, N. and Wallace, P., 2012, New precession\n+          expressions, valid for long time intervals (Corrigendum),\n+          Astron.Astrophys. 541, C1\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    veq = ufunc.ltpequ(epj)\n+    return veq\n+\n+\n+def num00a(date1, date2):\n+    \"\"\"\n+    Form the matrix of nutation for a given date, IAU 2000A model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rmatn : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraNum00a``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a N u m 0 0 a\n+        - - - - - - - - - -\n+\n+        Form the matrix of nutation for a given date, IAU 2000A model.\n+\n+        Given:\n+           date1,date2  double          TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           rmatn        double[3][3]    nutation matrix\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix operates in the sense V(true) = rmatn * V(mean), where\n+           the p-vector V(true) is with respect to the true equatorial triad\n+           of date and the p-vector V(mean) is with respect to the mean\n+           equatorial triad of date.\n+\n+        3) A faster, but slightly less accurate, result (about 1 mas) can be\n+           obtained by using instead the eraNum00b function.\n+\n+        Called:\n+           eraPn00a     bias/precession/nutation, IAU 2000A\n+\n+        Reference:\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992),\n+           Section 3.222-3 (p114).\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rmatn = ufunc.num00a(date1, date2)\n+    return rmatn\n+\n+\n+def num00b(date1, date2):\n+    \"\"\"\n+    Form the matrix of nutation for a given date, IAU 2000B model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rmatn : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraNum00b``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a N u m 0 0 b\n+        - - - - - - - - - -\n+\n+        Form the matrix of nutation for a given date, IAU 2000B model.\n+\n+        Given:\n+           date1,date2  double         TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           rmatn        double[3][3]   nutation matrix\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix operates in the sense V(true) = rmatn * V(mean), where\n+           the p-vector V(true) is with respect to the true equatorial triad\n+           of date and the p-vector V(mean) is with respect to the mean\n+           equatorial triad of date.\n+\n+        3) The present function is faster, but slightly less accurate (about\n+           1 mas), than the eraNum00a function.\n+\n+        Called:\n+           eraPn00b     bias/precession/nutation, IAU 2000B\n+\n+        Reference:\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992),\n+           Section 3.222-3 (p114).\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rmatn = ufunc.num00b(date1, date2)\n+    return rmatn\n+\n+\n+def num06a(date1, date2):\n+    \"\"\"\n+    Form the matrix of nutation for a given date, IAU 2006/2000A model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rmatn : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraNum06a``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a N u m 0 6 a\n+        - - - - - - - - - -\n+\n+        Form the matrix of nutation for a given date, IAU 2006/2000A model.\n+\n+        Given:\n+           date1,date2   double          TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           rmatn         double[3][3]    nutation matrix\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix operates in the sense V(true) = rmatn * V(mean), where\n+           the p-vector V(true) is with respect to the true equatorial triad\n+           of date and the p-vector V(mean) is with respect to the mean\n+           equatorial triad of date.\n+\n+        Called:\n+           eraObl06     mean obliquity, IAU 2006\n+           eraNut06a    nutation, IAU 2006/2000A\n+           eraNumat     form nutation matrix\n+\n+        Reference:\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992),\n+           Section 3.222-3 (p114).\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rmatn = ufunc.num06a(date1, date2)\n+    return rmatn\n+\n+\n+def numat(epsa, dpsi, deps):\n+    \"\"\"\n+    Form the matrix of nutation.\n+\n+    Parameters\n+    ----------\n+    epsa : double array\n+    dpsi : double array\n+    deps : double array\n+\n+    Returns\n+    -------\n+    rmatn : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraNumat``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a N u m a t\n+        - - - - - - - - -\n+\n+        Form the matrix of nutation.\n+\n+        Given:\n+           epsa        double         mean obliquity of date (Note 1)\n+           dpsi,deps   double         nutation (Note 2)\n+\n+        Returned:\n+           rmatn       double[3][3]   nutation matrix (Note 3)\n+\n+        Notes:\n+\n+\n+        1) The supplied mean obliquity epsa, must be consistent with the\n+           precession-nutation models from which dpsi and deps were obtained.\n+\n+        2) The caller is responsible for providing the nutation components;\n+           they are in longitude and obliquity, in radians and are with\n+           respect to the equinox and ecliptic of date.\n+\n+        3) The matrix operates in the sense V(true) = rmatn * V(mean),\n+           where the p-vector V(true) is with respect to the true\n+           equatorial triad of date and the p-vector V(mean) is with\n+           respect to the mean equatorial triad of date.\n+\n+        Called:\n+           eraIr        initialize r-matrix to identity\n+           eraRx        rotate around X-axis\n+           eraRz        rotate around Z-axis\n+\n+        Reference:\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992),\n+           Section 3.222-3 (p114).\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rmatn = ufunc.numat(epsa, dpsi, deps)\n+    return rmatn\n+\n+\n+def nut00a(date1, date2):\n+    \"\"\"\n+    Nutation, IAU 2000A model (MHB2000 luni-solar and planetary nutation\n+    with free core nutation omitted).\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    dpsi : double array\n+    deps : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraNut00a``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a N u t 0 0 a\n+        - - - - - - - - - -\n+\n+        Nutation, IAU 2000A model (MHB2000 luni-solar and planetary nutation\n+        with free core nutation omitted).\n+\n+        Given:\n+           date1,date2   double   TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           dpsi,deps     double   nutation, luni-solar + planetary (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The nutation components in longitude and obliquity are in radians\n+           and with respect to the equinox and ecliptic of date.  The\n+           obliquity at J2000.0 is assumed to be the Lieske et al. (1977)\n+           value of 84381.448 arcsec.\n+\n+           Both the luni-solar and planetary nutations are included.  The\n+           latter are due to direct planetary nutations and the\n+           perturbations of the lunar and terrestrial orbits.\n+\n+        3) The function computes the MHB2000 nutation series with the\n+           associated corrections for planetary nutations.  It is an\n+           implementation of the nutation part of the IAU 2000A precession-\n+           nutation model, formally adopted by the IAU General Assembly in\n+           2000, namely MHB2000 (Mathews et al. 2002), but with the free\n+           core nutation (FCN - see Note 4) omitted.\n+\n+        4) The full MHB2000 model also contains contributions to the\n+           nutations in longitude and obliquity due to the free-excitation\n+           of the free-core-nutation during the period 1979-2000.  These FCN\n+           terms, which are time-dependent and unpredictable, are NOT\n+           included in the present function and, if required, must be\n+           independently computed.  With the FCN corrections included, the\n+           present function delivers a pole which is at current epochs\n+           accurate to a few hundred microarcseconds.  The omission of FCN\n+           introduces further errors of about that size.\n+\n+        5) The present function provides classical nutation.  The MHB2000\n+           algorithm, from which it is adapted, deals also with (i) the\n+           offsets between the GCRS and mean poles and (ii) the adjustments\n+           in longitude and obliquity due to the changed precession rates.\n+           These additional functions, namely frame bias and precession\n+           adjustments, are supported by the ERFA functions eraBi00  and\n+           eraPr00.\n+\n+        6) The MHB2000 algorithm also provides \"total\" nutations, comprising\n+           the arithmetic sum of the frame bias, precession adjustments,\n+           luni-solar nutation and planetary nutation.  These total\n+           nutations can be used in combination with an existing IAU 1976\n+           precession implementation, such as eraPmat76,  to deliver GCRS-\n+           to-true predictions of sub-mas accuracy at current dates.\n+           However, there are three shortcomings in the MHB2000 model that\n+           must be taken into account if more accurate or definitive results\n+           are required (see Wallace 2002):\n+\n+             (i) The MHB2000 total nutations are simply arithmetic sums,\n+                 yet in reality the various components are successive Euler\n+                 rotations.  This slight lack of rigor leads to cross terms\n+                 that exceed 1 mas after a century.  The rigorous procedure\n+                 is to form the GCRS-to-true rotation matrix by applying the\n+                 bias, precession and nutation in that order.\n+\n+            (ii) Although the precession adjustments are stated to be with\n+                 respect to Lieske et al. (1977), the MHB2000 model does\n+                 not specify which set of Euler angles are to be used and\n+                 how the adjustments are to be applied.  The most literal\n+                 and straightforward procedure is to adopt the 4-rotation\n+                 epsilon_0, psi_A, omega_A, xi_A option, and to add DPSIPR\n+                 to psi_A and DEPSPR to both omega_A and eps_A.\n+\n+           (iii) The MHB2000 model predates the determination by Chapront\n+                 et al. (2002) of a 14.6 mas displacement between the\n+                 J2000.0 mean equinox and the origin of the ICRS frame.  It\n+                 should, however, be noted that neglecting this displacement\n+                 when calculating star coordinates does not lead to a\n+                 14.6 mas change in right ascension, only a small second-\n+                 order distortion in the pattern of the precession-nutation\n+                 effect.\n+\n+           For these reasons, the ERFA functions do not generate the \"total\n+           nutations\" directly, though they can of course easily be\n+           generated by calling eraBi00, eraPr00 and the present function\n+           and adding the results.\n+\n+        7) The MHB2000 model contains 41 instances where the same frequency\n+           appears multiple times, of which 38 are duplicates and three are\n+           triplicates.  To keep the present code close to the original MHB\n+           algorithm, this small inefficiency has not been corrected.\n+\n+        Called:\n+           eraFal03     mean anomaly of the Moon\n+           eraFaf03     mean argument of the latitude of the Moon\n+           eraFaom03    mean longitude of the Moon's ascending node\n+           eraFame03    mean longitude of Mercury\n+           eraFave03    mean longitude of Venus\n+           eraFae03     mean longitude of Earth\n+           eraFama03    mean longitude of Mars\n+           eraFaju03    mean longitude of Jupiter\n+           eraFasa03    mean longitude of Saturn\n+           eraFaur03    mean longitude of Uranus\n+           eraFapa03    general accumulated precession in longitude\n+\n+        References:\n+\n+           Chapront, J., Chapront-Touze, M. & Francou, G. 2002,\n+           Astron.Astrophys. 387, 700\n+\n+           Lieske, J.H., Lederle, T., Fricke, W. & Morando, B. 1977,\n+           Astron.Astrophys. 58, 1-16\n+\n+           Mathews, P.M., Herring, T.A., Buffet, B.A. 2002, J.Geophys.Res.\n+           107, B4.  The MHB_2000 code itself was obtained on 9th September\n+           2002 from ftp//maia.usno.navy.mil/conv2000/chapter5/IAU2000A.\n+\n+           Simon, J.-L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G., Laskar, J. 1994, Astron.Astrophys. 282, 663-683\n+\n+           Souchay, J., Loysel, B., Kinoshita, H., Folgueira, M. 1999,\n+           Astron.Astrophys.Supp.Ser. 135, 111\n+\n+           Wallace, P.T., \"Software for Implementing the IAU 2000\n+           Resolutions\", in IERS Workshop 5.1 (2002)\n+\n+        This revision:  2021 July 20\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    dpsi, deps = ufunc.nut00a(date1, date2)\n+    return dpsi, deps\n+\n+\n+def nut00b(date1, date2):\n+    \"\"\"\n+    Nutation, IAU 2000B model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    dpsi : double array\n+    deps : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraNut00b``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a N u t 0 0 b\n+        - - - - - - - - - -\n+\n+        Nutation, IAU 2000B model.\n+\n+        Given:\n+           date1,date2   double    TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           dpsi,deps     double    nutation, luni-solar + planetary (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The nutation components in longitude and obliquity are in radians\n+           and with respect to the equinox and ecliptic of date.  The\n+           obliquity at J2000.0 is assumed to be the Lieske et al. (1977)\n+           value of 84381.448 arcsec.  (The errors that result from using\n+           this function with the IAU 2006 value of 84381.406 arcsec can be\n+           neglected.)\n+\n+           The nutation model consists only of luni-solar terms, but\n+           includes also a fixed offset which compensates for certain long-\n+           period planetary terms (Note 7).\n+\n+        3) This function is an implementation of the IAU 2000B abridged\n+           nutation model formally adopted by the IAU General Assembly in\n+           2000.  The function computes the MHB_2000_SHORT luni-solar\n+           nutation series (Luzum 2001), but without the associated\n+           corrections for the precession rate adjustments and the offset\n+           between the GCRS and J2000.0 mean poles.\n+\n+        4) The full IAU 2000A (MHB2000) nutation model contains nearly 1400\n+           terms.  The IAU 2000B model (McCarthy & Luzum 2003) contains only\n+           77 terms, plus additional simplifications, yet still delivers\n+           results of 1 mas accuracy at present epochs.  This combination of\n+           accuracy and size makes the IAU 2000B abridged nutation model\n+           suitable for most practical applications.\n+\n+           The function delivers a pole accurate to 1 mas from 1900 to 2100\n+           (usually better than 1 mas, very occasionally just outside\n+           1 mas).  The full IAU 2000A model, which is implemented in the\n+           function eraNut00a (q.v.), delivers considerably greater accuracy\n+           at current dates;  however, to realize this improved accuracy,\n+           corrections for the essentially unpredictable free-core-nutation\n+           (FCN) must also be included.\n+\n+        5) The present function provides classical nutation.  The\n+           MHB_2000_SHORT algorithm, from which it is adapted, deals also\n+           with (i) the offsets between the GCRS and mean poles and (ii) the\n+           adjustments in longitude and obliquity due to the changed\n+           precession rates.  These additional functions, namely frame bias\n+           and precession adjustments, are supported by the ERFA functions\n+           eraBi00  and eraPr00.\n+\n+        6) The MHB_2000_SHORT algorithm also provides \"total\" nutations,\n+           comprising the arithmetic sum of the frame bias, precession\n+           adjustments, and nutation (luni-solar + planetary).  These total\n+           nutations can be used in combination with an existing IAU 1976\n+           precession implementation, such as eraPmat76,  to deliver GCRS-\n+           to-true predictions of mas accuracy at current epochs.  However,\n+           for symmetry with the eraNut00a  function (q.v. for the reasons),\n+           the ERFA functions do not generate the \"total nutations\"\n+           directly.  Should they be required, they could of course easily\n+           be generated by calling eraBi00, eraPr00 and the present function\n+           and adding the results.\n+\n+        7) The IAU 2000B model includes \"planetary bias\" terms that are\n+           fixed in size but compensate for long-period nutations.  The\n+           amplitudes quoted in McCarthy & Luzum (2003), namely\n+           Dpsi = -1.5835 mas and Depsilon = +1.6339 mas, are optimized for\n+           the \"total nutations\" method described in Note 6.  The Luzum\n+           (2001) values used in this ERFA implementation, namely -0.135 mas\n+           and +0.388 mas, are optimized for the \"rigorous\" method, where\n+           frame bias, precession and nutation are applied separately and in\n+           that order.  During the interval 1995-2050, the ERFA\n+           implementation delivers a maximum error of 1.001 mas (not\n+           including FCN).\n+\n+        References:\n+\n+           Lieske, J.H., Lederle, T., Fricke, W., Morando, B., \"Expressions\n+           for the precession quantities based upon the IAU /1976/ system of\n+           astronomical constants\", Astron.Astrophys. 58, 1-2, 1-16. (1977)\n+\n+           Luzum, B., private communication, 2001 (Fortran code\n+           MHB_2000_SHORT)\n+\n+           McCarthy, D.D. & Luzum, B.J., \"An abridged model of the\n+           precession-nutation of the celestial pole\", Cel.Mech.Dyn.Astron.\n+           85, 37-49 (2003)\n+\n+           Simon, J.-L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G., Laskar, J., Astron.Astrophys. 282, 663-683 (1994)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    dpsi, deps = ufunc.nut00b(date1, date2)\n+    return dpsi, deps\n+\n+\n+def nut06a(date1, date2):\n+    \"\"\"\n+    IAU 2000A nutation with adjustments to match the IAU 2006\n+    precession.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    dpsi : double array\n+    deps : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraNut06a``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a N u t 0 6 a\n+        - - - - - - - - - -\n+\n+        IAU 2000A nutation with adjustments to match the IAU 2006\n+        precession.\n+\n+        Given:\n+           date1,date2   double   TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           dpsi,deps     double   nutation, luni-solar + planetary (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The nutation components in longitude and obliquity are in radians\n+           and with respect to the mean equinox and ecliptic of date,\n+           IAU 2006 precession model (Hilton et al. 2006, Capitaine et al.\n+           2005).\n+\n+        3) The function first computes the IAU 2000A nutation, then applies\n+           adjustments for (i) the consequences of the change in obliquity\n+           from the IAU 1980 ecliptic to the IAU 2006 ecliptic and (ii) the\n+           secular variation in the Earth's dynamical form factor J2.\n+\n+        4) The present function provides classical nutation, complementing\n+           the IAU 2000 frame bias and IAU 2006 precession.  It delivers a\n+           pole which is at current epochs accurate to a few tens of\n+           microarcseconds, apart from the free core nutation.\n+\n+        Called:\n+           eraNut00a    nutation, IAU 2000A\n+\n+        References:\n+\n+           Chapront, J., Chapront-Touze, M. & Francou, G. 2002,\n+           Astron.Astrophys. 387, 700\n+\n+           Lieske, J.H., Lederle, T., Fricke, W. & Morando, B. 1977,\n+           Astron.Astrophys. 58, 1-16\n+\n+           Mathews, P.M., Herring, T.A., Buffet, B.A. 2002, J.Geophys.Res.\n+           107, B4.  The MHB_2000 code itself was obtained on 9th September\n+           2002 from ftp//maia.usno.navy.mil/conv2000/chapter5/IAU2000A.\n+\n+           Simon, J.-L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G., Laskar, J. 1994, Astron.Astrophys. 282, 663-683\n+\n+           Souchay, J., Loysel, B., Kinoshita, H., Folgueira, M. 1999,\n+           Astron.Astrophys.Supp.Ser. 135, 111\n+\n+           Wallace, P.T., \"Software for Implementing the IAU 2000\n+           Resolutions\", in IERS Workshop 5.1 (2002)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    dpsi, deps = ufunc.nut06a(date1, date2)\n+    return dpsi, deps\n+\n+\n+def nut80(date1, date2):\n+    \"\"\"\n+    Nutation, IAU 1980 model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    dpsi : double array\n+    deps : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraNut80``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a N u t 8 0\n+        - - - - - - - - -\n+\n+        Nutation, IAU 1980 model.\n+\n+        Given:\n+           date1,date2   double    TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           dpsi          double    nutation in longitude (radians)\n+           deps          double    nutation in obliquity (radians)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The nutation components are with respect to the ecliptic of\n+           date.\n+\n+        Called:\n+           eraAnpm      normalize angle into range +/- pi\n+\n+        Reference:\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992),\n+           Section 3.222 (p111).\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    dpsi, deps = ufunc.nut80(date1, date2)\n+    return dpsi, deps\n+\n+\n+def nutm80(date1, date2):\n+    \"\"\"\n+    Form the matrix of nutation for a given date, IAU 1980 model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rmatn : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraNutm80``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a N u t m 8 0\n+        - - - - - - - - - -\n+\n+        Form the matrix of nutation for a given date, IAU 1980 model.\n+\n+        Given:\n+           date1,date2    double          TDB date (Note 1)\n+\n+        Returned:\n+           rmatn          double[3][3]    nutation matrix\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix operates in the sense V(true) = rmatn * V(mean),\n+           where the p-vector V(true) is with respect to the true\n+           equatorial triad of date and the p-vector V(mean) is with\n+           respect to the mean equatorial triad of date.\n+\n+        Called:\n+           eraNut80     nutation, IAU 1980\n+           eraObl80     mean obliquity, IAU 1980\n+           eraNumat     form nutation matrix\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rmatn = ufunc.nutm80(date1, date2)\n+    return rmatn\n+\n+\n+def obl06(date1, date2):\n+    \"\"\"\n+    Mean obliquity of the ecliptic, IAU 2006 precession model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraObl06``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a O b l 0 6\n+        - - - - - - - - -\n+\n+        Mean obliquity of the ecliptic, IAU 2006 precession model.\n+\n+        Given:\n+           date1,date2  double   TT as a 2-part Julian Date (Note 1)\n+\n+        Returned (function value):\n+                        double   obliquity of the ecliptic (radians, Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The result is the angle between the ecliptic and mean equator of\n+           date date1+date2.\n+\n+        Reference:\n+\n+           Hilton, J. et al., 2006, Celest.Mech.Dyn.Astron. 94, 351\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.obl06(date1, date2)\n+    return c_retval\n+\n+\n+def obl80(date1, date2):\n+    \"\"\"\n+    Mean obliquity of the ecliptic, IAU 1980 model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraObl80``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a O b l 8 0\n+        - - - - - - - - -\n+\n+        Mean obliquity of the ecliptic, IAU 1980 model.\n+\n+        Given:\n+           date1,date2   double    TT as a 2-part Julian Date (Note 1)\n+\n+        Returned (function value):\n+                         double    obliquity of the ecliptic (radians, Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The result is the angle between the ecliptic and mean equator of\n+           date date1+date2.\n+\n+        Reference:\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992),\n+           Expression 3.222-1 (p114).\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.obl80(date1, date2)\n+    return c_retval\n+\n+\n+def p06e(date1, date2):\n+    \"\"\"\n+    Precession angles, IAU 2006, equinox based.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    eps0 : double array\n+    psia : double array\n+    oma : double array\n+    bpa : double array\n+    bqa : double array\n+    pia : double array\n+    bpia : double array\n+    epsa : double array\n+    chia : double array\n+    za : double array\n+    zetaa : double array\n+    thetaa : double array\n+    pa : double array\n+    gam : double array\n+    phi : double array\n+    psi : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraP06e``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a P 0 6 e\n+        - - - - - - - -\n+\n+        Precession angles, IAU 2006, equinox based.\n+\n+        Given:\n+           date1,date2   double   TT as a 2-part Julian Date (Note 1)\n+\n+        Returned (see Note 2):\n+           eps0          double   epsilon_0\n+           psia          double   psi_A\n+           oma           double   omega_A\n+           bpa           double   P_A\n+           bqa           double   Q_A\n+           pia           double   pi_A\n+           bpia          double   Pi_A\n+           epsa          double   obliquity epsilon_A\n+           chia          double   chi_A\n+           za            double   z_A\n+           zetaa         double   zeta_A\n+           thetaa        double   theta_A\n+           pa            double   p_A\n+           gam           double   F-W angle gamma_J2000\n+           phi           double   F-W angle phi_J2000\n+           psi           double   F-W angle psi_J2000\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) This function returns the set of equinox based angles for the\n+           Capitaine et al. \"P03\" precession theory, adopted by the IAU in\n+           2006.  The angles are set out in Table 1 of Hilton et al. (2006):\n+\n+           eps0   epsilon_0   obliquity at J2000.0\n+           psia   psi_A       luni-solar precession\n+           oma    omega_A     inclination of equator wrt J2000.0 ecliptic\n+           bpa    P_A         ecliptic pole x, J2000.0 ecliptic triad\n+           bqa    Q_A         ecliptic pole -y, J2000.0 ecliptic triad\n+           pia    pi_A        angle between moving and J2000.0 ecliptics\n+           bpia   Pi_A        longitude of ascending node of the ecliptic\n+           epsa   epsilon_A   obliquity of the ecliptic\n+           chia   chi_A       planetary precession\n+           za     z_A         equatorial precession: -3rd 323 Euler angle\n+           zetaa  zeta_A      equatorial precession: -1st 323 Euler angle\n+           thetaa theta_A     equatorial precession: 2nd 323 Euler angle\n+           pa     p_A         general precession (n.b. see below)\n+           gam    gamma_J2000 J2000.0 RA difference of ecliptic poles\n+           phi    phi_J2000   J2000.0 codeclination of ecliptic pole\n+           psi    psi_J2000   longitude difference of equator poles, J2000.0\n+\n+           The returned values are all radians.\n+\n+           Note that the t^5 coefficient in the series for p_A from\n+           Capitaine et al. (2003) is incorrectly signed in Hilton et al.\n+           (2006).\n+\n+        3) Hilton et al. (2006) Table 1 also contains angles that depend on\n+           models distinct from the P03 precession theory itself, namely the\n+           IAU 2000A frame bias and nutation.  The quoted polynomials are\n+           used in other ERFA functions:\n+\n+           . eraXy06  contains the polynomial parts of the X and Y series.\n+\n+           . eraS06  contains the polynomial part of the s+XY/2 series.\n+\n+           . eraPfw06  implements the series for the Fukushima-Williams\n+             angles that are with respect to the GCRS pole (i.e. the variants\n+             that include frame bias).\n+\n+        4) The IAU resolution stipulated that the choice of parameterization\n+           was left to the user, and so an IAU compliant precession\n+           implementation can be constructed using various combinations of\n+           the angles returned by the present function.\n+\n+        5) The parameterization used by ERFA is the version of the Fukushima-\n+           Williams angles that refers directly to the GCRS pole.  These\n+           angles may be calculated by calling the function eraPfw06.  ERFA\n+           also supports the direct computation of the CIP GCRS X,Y by\n+           series, available by calling eraXy06.\n+\n+        6) The agreement between the different parameterizations is at the\n+           1 microarcsecond level in the present era.\n+\n+        7) When constructing a precession formulation that refers to the GCRS\n+           pole rather than the dynamical pole, it may (depending on the\n+           choice of angles) be necessary to introduce the frame bias\n+           explicitly.\n+\n+        8) It is permissible to re-use the same variable in the returned\n+           arguments.  The quantities are stored in the stated order.\n+\n+        References:\n+\n+           Capitaine, N., Wallace, P.T. & Chapront, J., 2003,\n+           Astron.Astrophys., 412, 567\n+\n+           Hilton, J. et al., 2006, Celest.Mech.Dyn.Astron. 94, 351\n+\n+        Called:\n+           eraObl06     mean obliquity, IAU 2006\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    (eps0, psia, oma, bpa, bqa, pia, bpia, epsa, chia, za, zetaa, thetaa, pa,\n+     gam, phi, psi) = ufunc.p06e(date1, date2)\n+    return eps0, psia, oma, bpa, bqa, pia, bpia, epsa, chia, za, zetaa, thetaa, pa, gam, phi, psi\n+\n+\n+def pb06(date1, date2):\n+    \"\"\"\n+    This function forms three Euler angles which implement general\n+    precession from epoch J2000.0, using the IAU 2006 model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    bzeta : double array\n+    bz : double array\n+    btheta : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPb06``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a P b 0 6\n+        - - - - - - - -\n+\n+        This function forms three Euler angles which implement general\n+        precession from epoch J2000.0, using the IAU 2006 model.  Frame\n+        bias (the offset between ICRS and mean J2000.0) is included.\n+\n+        Given:\n+           date1,date2  double   TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           bzeta        double   1st rotation: radians cw around z\n+           bz           double   3rd rotation: radians cw around z\n+           btheta       double   2nd rotation: radians ccw around y\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The traditional accumulated precession angles zeta_A, z_A,\n+           theta_A cannot be obtained in the usual way, namely through\n+           polynomial expressions, because of the frame bias.  The latter\n+           means that two of the angles undergo rapid changes near this\n+           date.  They are instead the results of decomposing the\n+           precession-bias matrix obtained by using the Fukushima-Williams\n+           method, which does not suffer from the problem.  The\n+           decomposition returns values which can be used in the\n+           conventional formulation and which include frame bias.\n+\n+        3) The three angles are returned in the conventional order, which\n+           is not the same as the order of the corresponding Euler\n+           rotations.  The precession-bias matrix is\n+           R_3(-z) x R_2(+theta) x R_3(-zeta).\n+\n+        4) Should zeta_A, z_A, theta_A angles be required that do not\n+           contain frame bias, they are available by calling the ERFA\n+           function eraP06e.\n+\n+        Called:\n+           eraPmat06    PB matrix, IAU 2006\n+           eraRz        rotate around Z-axis\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    bzeta, bz, btheta = ufunc.pb06(date1, date2)\n+    return bzeta, bz, btheta\n+\n+\n+def pfw06(date1, date2):\n+    \"\"\"\n+    Precession angles, IAU 2006 (Fukushima-Williams 4-angle formulation).\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    gamb : double array\n+    phib : double array\n+    psib : double array\n+    epsa : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPfw06``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a P f w 0 6\n+        - - - - - - - - -\n+\n+        Precession angles, IAU 2006 (Fukushima-Williams 4-angle formulation).\n+\n+        Given:\n+           date1,date2  double   TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           gamb         double   F-W angle gamma_bar (radians)\n+           phib         double   F-W angle phi_bar (radians)\n+           psib         double   F-W angle psi_bar (radians)\n+           epsa         double   F-W angle epsilon_A (radians)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) Naming the following points:\n+\n+                 e = J2000.0 ecliptic pole,\n+                 p = GCRS pole,\n+                 E = mean ecliptic pole of date,\n+           and   P = mean pole of date,\n+\n+           the four Fukushima-Williams angles are as follows:\n+\n+              gamb = gamma_bar = epE\n+              phib = phi_bar = pE\n+              psib = psi_bar = pEP\n+              epsa = epsilon_A = EP\n+\n+        3) The matrix representing the combined effects of frame bias and\n+           precession is:\n+\n+              PxB = R_1(-epsa).R_3(-psib).R_1(phib).R_3(gamb)\n+\n+        4) The matrix representing the combined effects of frame bias,\n+           precession and nutation is simply:\n+\n+              NxPxB = R_1(-epsa-dE).R_3(-psib-dP).R_1(phib).R_3(gamb)\n+\n+           where dP and dE are the nutation components with respect to the\n+           ecliptic of date.\n+\n+        Reference:\n+\n+           Hilton, J. et al., 2006, Celest.Mech.Dyn.Astron. 94, 351\n+\n+        Called:\n+           eraObl06     mean obliquity, IAU 2006\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    gamb, phib, psib, epsa = ufunc.pfw06(date1, date2)\n+    return gamb, phib, psib, epsa\n+\n+\n+def pmat00(date1, date2):\n+    \"\"\"\n+    Precession matrix (including frame bias) from GCRS to a specified\n+    date, IAU 2000 model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rbp : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPmat00``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a P m a t 0 0\n+        - - - - - - - - - -\n+\n+        Precession matrix (including frame bias) from GCRS to a specified\n+        date, IAU 2000 model.\n+\n+        Given:\n+           date1,date2  double          TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           rbp          double[3][3]    bias-precession matrix (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix operates in the sense V(date) = rbp * V(GCRS), where\n+           the p-vector V(GCRS) is with respect to the Geocentric Celestial\n+           Reference System (IAU, 2000) and the p-vector V(date) is with\n+           respect to the mean equatorial triad of the given date.\n+\n+        Called:\n+           eraBp00      frame bias and precession matrices, IAU 2000\n+\n+        Reference:\n+\n+           IAU: Trans. International Astronomical Union, Vol. XXIVB;  Proc.\n+           24th General Assembly, Manchester, UK.  Resolutions B1.3, B1.6.\n+           (2000)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rbp = ufunc.pmat00(date1, date2)\n+    return rbp\n+\n+\n+def pmat06(date1, date2):\n+    \"\"\"\n+    Precession matrix (including frame bias) from GCRS to a specified\n+    date, IAU 2006 model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rbp : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPmat06``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a P m a t 0 6\n+        - - - - - - - - - -\n+\n+        Precession matrix (including frame bias) from GCRS to a specified\n+        date, IAU 2006 model.\n+\n+        Given:\n+           date1,date2  double          TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           rbp          double[3][3]    bias-precession matrix (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix operates in the sense V(date) = rbp * V(GCRS), where\n+           the p-vector V(GCRS) is with respect to the Geocentric Celestial\n+           Reference System (IAU, 2000) and the p-vector V(date) is with\n+           respect to the mean equatorial triad of the given date.\n+\n+        Called:\n+           eraPfw06     bias-precession F-W angles, IAU 2006\n+           eraFw2m      F-W angles to r-matrix\n+\n+        References:\n+\n+           Capitaine, N. & Wallace, P.T., 2006, Astron.Astrophys. 450, 855\n+\n+           IAU: Trans. International Astronomical Union, Vol. XXIVB;  Proc.\n+           24th General Assembly, Manchester, UK.  Resolutions B1.3, B1.6.\n+           (2000)\n+\n+           Wallace, P.T. & Capitaine, N., 2006, Astron.Astrophys. 459, 981\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rbp = ufunc.pmat06(date1, date2)\n+    return rbp\n+\n+\n+def pmat76(date1, date2):\n+    \"\"\"\n+    Precession matrix from J2000.0 to a specified date, IAU 1976 model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rmatp : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPmat76``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a P m a t 7 6\n+        - - - - - - - - - -\n+\n+        Precession matrix from J2000.0 to a specified date, IAU 1976 model.\n+\n+        Given:\n+           date1,date2 double       ending date, TT (Note 1)\n+\n+        Returned:\n+           rmatp       double[3][3] precession matrix, J2000.0 -> date1+date2\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix operates in the sense V(date) = RMATP * V(J2000),\n+           where the p-vector V(J2000) is with respect to the mean\n+           equatorial triad of epoch J2000.0 and the p-vector V(date)\n+           is with respect to the mean equatorial triad of the given\n+           date.\n+\n+        3) Though the matrix method itself is rigorous, the precession\n+           angles are expressed through canonical polynomials which are\n+           valid only for a limited time span.  In addition, the IAU 1976\n+           precession rate is known to be imperfect.  The absolute accuracy\n+           of the present formulation is better than 0.1 arcsec from\n+           1960AD to 2040AD, better than 1 arcsec from 1640AD to 2360AD,\n+           and remains below 3 arcsec for the whole of the period\n+           500BC to 3000AD.  The errors exceed 10 arcsec outside the\n+           range 1200BC to 3900AD, exceed 100 arcsec outside 4200BC to\n+           5600AD and exceed 1000 arcsec outside 6800BC to 8200AD.\n+\n+        Called:\n+           eraPrec76    accumulated precession angles, IAU 1976\n+           eraIr        initialize r-matrix to identity\n+           eraRz        rotate around Z-axis\n+           eraRy        rotate around Y-axis\n+           eraCr        copy r-matrix\n+\n+        References:\n+\n+           Lieske, J.H., 1979, Astron.Astrophys. 73, 282.\n+            equations (6) & (7), p283.\n+\n+           Kaplan,G.H., 1981. USNO circular no. 163, pA2.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rmatp = ufunc.pmat76(date1, date2)\n+    return rmatp\n+\n+\n+def pn00(date1, date2, dpsi, deps):\n+    \"\"\"\n+    Precession-nutation, IAU 2000 model:  a multi-purpose function,\n+    supporting classical (equinox-based) use directly and CIO-based\n+    use indirectly.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+    dpsi : double array\n+    deps : double array\n+\n+    Returns\n+    -------\n+    epsa : double array\n+    rb : double array\n+    rp : double array\n+    rbp : double array\n+    rn : double array\n+    rbpn : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPn00``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a P n 0 0\n+        - - - - - - - -\n+\n+        Precession-nutation, IAU 2000 model:  a multi-purpose function,\n+        supporting classical (equinox-based) use directly and CIO-based\n+        use indirectly.\n+\n+        Given:\n+           date1,date2  double          TT as a 2-part Julian Date (Note 1)\n+           dpsi,deps    double          nutation (Note 2)\n+\n+        Returned:\n+           epsa         double          mean obliquity (Note 3)\n+           rb           double[3][3]    frame bias matrix (Note 4)\n+           rp           double[3][3]    precession matrix (Note 5)\n+           rbp          double[3][3]    bias-precession matrix (Note 6)\n+           rn           double[3][3]    nutation matrix (Note 7)\n+           rbpn         double[3][3]    GCRS-to-true matrix (Note 8)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The caller is responsible for providing the nutation components;\n+           they are in longitude and obliquity, in radians and are with\n+           respect to the equinox and ecliptic of date.  For high-accuracy\n+           applications, free core nutation should be included as well as\n+           any other relevant corrections to the position of the CIP.\n+\n+        3) The returned mean obliquity is consistent with the IAU 2000\n+           precession-nutation models.\n+\n+        4) The matrix rb transforms vectors from GCRS to J2000.0 mean\n+           equator and equinox by applying frame bias.\n+\n+        5) The matrix rp transforms vectors from J2000.0 mean equator and\n+           equinox to mean equator and equinox of date by applying\n+           precession.\n+\n+        6) The matrix rbp transforms vectors from GCRS to mean equator and\n+           equinox of date by applying frame bias then precession.  It is\n+           the product rp x rb.\n+\n+        7) The matrix rn transforms vectors from mean equator and equinox of\n+           date to true equator and equinox of date by applying the nutation\n+           (luni-solar + planetary).\n+\n+        8) The matrix rbpn transforms vectors from GCRS to true equator and\n+           equinox of date.  It is the product rn x rbp, applying frame\n+           bias, precession and nutation in that order.\n+\n+        9) It is permissible to re-use the same array in the returned\n+           arguments.  The arrays are filled in the order given.\n+\n+        Called:\n+           eraPr00      IAU 2000 precession adjustments\n+           eraObl80     mean obliquity, IAU 1980\n+           eraBp00      frame bias and precession matrices, IAU 2000\n+           eraCr        copy r-matrix\n+           eraNumat     form nutation matrix\n+           eraRxr       product of two r-matrices\n+\n+        Reference:\n+\n+           Capitaine, N., Chapront, J., Lambert, S. and Wallace, P.,\n+           \"Expressions for the Celestial Intermediate Pole and Celestial\n+           Ephemeris Origin consistent with the IAU 2000A precession-\n+           nutation model\", Astron.Astrophys. 400, 1145-1154 (2003)\n+\n+           n.b. The celestial ephemeris origin (CEO) was renamed \"celestial\n+                intermediate origin\" (CIO) by IAU 2006 Resolution 2.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    epsa, rb, rp, rbp, rn, rbpn = ufunc.pn00(date1, date2, dpsi, deps)\n+    return epsa, rb, rp, rbp, rn, rbpn\n+\n+\n+def pn00a(date1, date2):\n+    \"\"\"\n+    Precession-nutation, IAU 2000A model:  a multi-purpose function,\n+    supporting classical (equinox-based) use directly and CIO-based\n+    use indirectly.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    dpsi : double array\n+    deps : double array\n+    epsa : double array\n+    rb : double array\n+    rp : double array\n+    rbp : double array\n+    rn : double array\n+    rbpn : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPn00a``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a P n 0 0 a\n+        - - - - - - - - -\n+\n+        Precession-nutation, IAU 2000A model:  a multi-purpose function,\n+        supporting classical (equinox-based) use directly and CIO-based\n+        use indirectly.\n+\n+        Given:\n+           date1,date2  double          TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           dpsi,deps    double          nutation (Note 2)\n+           epsa         double          mean obliquity (Note 3)\n+           rb           double[3][3]    frame bias matrix (Note 4)\n+           rp           double[3][3]    precession matrix (Note 5)\n+           rbp          double[3][3]    bias-precession matrix (Note 6)\n+           rn           double[3][3]    nutation matrix (Note 7)\n+           rbpn         double[3][3]    GCRS-to-true matrix (Notes 8,9)\n+\n+        Notes:\n+\n+        1)  The TT date date1+date2 is a Julian Date, apportioned in any\n+            convenient way between the two arguments.  For example,\n+            JD(TT)=2450123.7 could be expressed in any of these ways,\n+            among others:\n+\n+                   date1          date2\n+\n+                2450123.7           0.0       (JD method)\n+                2451545.0       -1421.3       (J2000 method)\n+                2400000.5       50123.2       (MJD method)\n+                2450123.5           0.2       (date & time method)\n+\n+            The JD method is the most natural and convenient to use in\n+            cases where the loss of several decimal digits of resolution\n+            is acceptable.  The J2000 method is best matched to the way\n+            the argument is handled internally and will deliver the\n+            optimum resolution.  The MJD method and the date & time methods\n+            are both good compromises between resolution and convenience.\n+\n+        2)  The nutation components (luni-solar + planetary, IAU 2000A) in\n+            longitude and obliquity are in radians and with respect to the\n+            equinox and ecliptic of date.  Free core nutation is omitted;\n+            for the utmost accuracy, use the eraPn00 function, where the\n+            nutation components are caller-specified.  For faster but\n+            slightly less accurate results, use the eraPn00b function.\n+\n+        3)  The mean obliquity is consistent with the IAU 2000 precession.\n+\n+        4)  The matrix rb transforms vectors from GCRS to J2000.0 mean\n+            equator and equinox by applying frame bias.\n+\n+        5)  The matrix rp transforms vectors from J2000.0 mean equator and\n+            equinox to mean equator and equinox of date by applying\n+            precession.\n+\n+        6)  The matrix rbp transforms vectors from GCRS to mean equator and\n+            equinox of date by applying frame bias then precession.  It is\n+            the product rp x rb.\n+\n+        7)  The matrix rn transforms vectors from mean equator and equinox\n+            of date to true equator and equinox of date by applying the\n+            nutation (luni-solar + planetary).\n+\n+        8)  The matrix rbpn transforms vectors from GCRS to true equator and\n+            equinox of date.  It is the product rn x rbp, applying frame\n+            bias, precession and nutation in that order.\n+\n+        9)  The X,Y,Z coordinates of the IAU 2000A Celestial Intermediate\n+            Pole are elements (3,1-3) of the GCRS-to-true matrix,\n+            i.e. rbpn[2][0-2].\n+\n+        10) It is permissible to re-use the same array in the returned\n+            arguments.  The arrays are filled in the stated order.\n+\n+        Called:\n+           eraNut00a    nutation, IAU 2000A\n+           eraPn00      bias/precession/nutation results, IAU 2000\n+\n+        Reference:\n+\n+           Capitaine, N., Chapront, J., Lambert, S. and Wallace, P.,\n+           \"Expressions for the Celestial Intermediate Pole and Celestial\n+           Ephemeris Origin consistent with the IAU 2000A precession-\n+           nutation model\", Astron.Astrophys. 400, 1145-1154 (2003)\n+\n+           n.b. The celestial ephemeris origin (CEO) was renamed \"celestial\n+                intermediate origin\" (CIO) by IAU 2006 Resolution 2.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    dpsi, deps, epsa, rb, rp, rbp, rn, rbpn = ufunc.pn00a(date1, date2)\n+    return dpsi, deps, epsa, rb, rp, rbp, rn, rbpn\n+\n+\n+def pn00b(date1, date2):\n+    \"\"\"\n+    Precession-nutation, IAU 2000B model:  a multi-purpose function,\n+    supporting classical (equinox-based) use directly and CIO-based\n+    use indirectly.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    dpsi : double array\n+    deps : double array\n+    epsa : double array\n+    rb : double array\n+    rp : double array\n+    rbp : double array\n+    rn : double array\n+    rbpn : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPn00b``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a P n 0 0 b\n+        - - - - - - - - -\n+\n+        Precession-nutation, IAU 2000B model:  a multi-purpose function,\n+        supporting classical (equinox-based) use directly and CIO-based\n+        use indirectly.\n+\n+        Given:\n+           date1,date2  double          TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           dpsi,deps    double          nutation (Note 2)\n+           epsa         double          mean obliquity (Note 3)\n+           rb           double[3][3]    frame bias matrix (Note 4)\n+           rp           double[3][3]    precession matrix (Note 5)\n+           rbp          double[3][3]    bias-precession matrix (Note 6)\n+           rn           double[3][3]    nutation matrix (Note 7)\n+           rbpn         double[3][3]    GCRS-to-true matrix (Notes 8,9)\n+\n+        Notes:\n+\n+        1)  The TT date date1+date2 is a Julian Date, apportioned in any\n+            convenient way between the two arguments.  For example,\n+            JD(TT)=2450123.7 could be expressed in any of these ways,\n+            among others:\n+\n+                   date1          date2\n+\n+                2450123.7           0.0       (JD method)\n+                2451545.0       -1421.3       (J2000 method)\n+                2400000.5       50123.2       (MJD method)\n+                2450123.5           0.2       (date & time method)\n+\n+            The JD method is the most natural and convenient to use in\n+            cases where the loss of several decimal digits of resolution\n+            is acceptable.  The J2000 method is best matched to the way\n+            the argument is handled internally and will deliver the\n+            optimum resolution.  The MJD method and the date & time methods\n+            are both good compromises between resolution and convenience.\n+\n+        2)  The nutation components (luni-solar + planetary, IAU 2000B) in\n+            longitude and obliquity are in radians and with respect to the\n+            equinox and ecliptic of date.  For more accurate results, but\n+            at the cost of increased computation, use the eraPn00a function.\n+            For the utmost accuracy, use the eraPn00 function, where the\n+            nutation components are caller-specified.\n+\n+        3)  The mean obliquity is consistent with the IAU 2000 precession.\n+\n+        4)  The matrix rb transforms vectors from GCRS to J2000.0 mean\n+            equator and equinox by applying frame bias.\n+\n+        5)  The matrix rp transforms vectors from J2000.0 mean equator and\n+            equinox to mean equator and equinox of date by applying\n+            precession.\n+\n+        6)  The matrix rbp transforms vectors from GCRS to mean equator and\n+            equinox of date by applying frame bias then precession.  It is\n+            the product rp x rb.\n+\n+        7)  The matrix rn transforms vectors from mean equator and equinox\n+            of date to true equator and equinox of date by applying the\n+            nutation (luni-solar + planetary).\n+\n+        8)  The matrix rbpn transforms vectors from GCRS to true equator and\n+            equinox of date.  It is the product rn x rbp, applying frame\n+            bias, precession and nutation in that order.\n+\n+        9)  The X,Y,Z coordinates of the IAU 2000B Celestial Intermediate\n+            Pole are elements (3,1-3) of the GCRS-to-true matrix,\n+            i.e. rbpn[2][0-2].\n+\n+        10) It is permissible to re-use the same array in the returned\n+            arguments.  The arrays are filled in the stated order.\n+\n+        Called:\n+           eraNut00b    nutation, IAU 2000B\n+           eraPn00      bias/precession/nutation results, IAU 2000\n+\n+        Reference:\n+\n+           Capitaine, N., Chapront, J., Lambert, S. and Wallace, P.,\n+           \"Expressions for the Celestial Intermediate Pole and Celestial\n+           Ephemeris Origin consistent with the IAU 2000A precession-\n+           nutation model\", Astron.Astrophys. 400, 1145-1154 (2003).\n+\n+           n.b. The celestial ephemeris origin (CEO) was renamed \"celestial\n+                intermediate origin\" (CIO) by IAU 2006 Resolution 2.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    dpsi, deps, epsa, rb, rp, rbp, rn, rbpn = ufunc.pn00b(date1, date2)\n+    return dpsi, deps, epsa, rb, rp, rbp, rn, rbpn\n+\n+\n+def pn06(date1, date2, dpsi, deps):\n+    \"\"\"\n+    Precession-nutation, IAU 2006 model:  a multi-purpose function,\n+    supporting classical (equinox-based) use directly and CIO-based use\n+    indirectly.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+    dpsi : double array\n+    deps : double array\n+\n+    Returns\n+    -------\n+    epsa : double array\n+    rb : double array\n+    rp : double array\n+    rbp : double array\n+    rn : double array\n+    rbpn : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPn06``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a P n 0 6\n+        - - - - - - - -\n+\n+        Precession-nutation, IAU 2006 model:  a multi-purpose function,\n+        supporting classical (equinox-based) use directly and CIO-based use\n+        indirectly.\n+\n+        Given:\n+           date1,date2  double          TT as a 2-part Julian Date (Note 1)\n+           dpsi,deps    double          nutation (Note 2)\n+\n+        Returned:\n+           epsa         double          mean obliquity (Note 3)\n+           rb           double[3][3]    frame bias matrix (Note 4)\n+           rp           double[3][3]    precession matrix (Note 5)\n+           rbp          double[3][3]    bias-precession matrix (Note 6)\n+           rn           double[3][3]    nutation matrix (Note 7)\n+           rbpn         double[3][3]    GCRS-to-true matrix (Notes 8,9)\n+\n+        Notes:\n+\n+        1)  The TT date date1+date2 is a Julian Date, apportioned in any\n+            convenient way between the two arguments.  For example,\n+            JD(TT)=2450123.7 could be expressed in any of these ways,\n+            among others:\n+\n+                   date1          date2\n+\n+                2450123.7           0.0       (JD method)\n+                2451545.0       -1421.3       (J2000 method)\n+                2400000.5       50123.2       (MJD method)\n+                2450123.5           0.2       (date & time method)\n+\n+            The JD method is the most natural and convenient to use in\n+            cases where the loss of several decimal digits of resolution\n+            is acceptable.  The J2000 method is best matched to the way\n+            the argument is handled internally and will deliver the\n+            optimum resolution.  The MJD method and the date & time methods\n+            are both good compromises between resolution and convenience.\n+\n+        2)  The caller is responsible for providing the nutation components;\n+            they are in longitude and obliquity, in radians and are with\n+            respect to the equinox and ecliptic of date.  For high-accuracy\n+            applications, free core nutation should be included as well as\n+            any other relevant corrections to the position of the CIP.\n+\n+        3)  The returned mean obliquity is consistent with the IAU 2006\n+            precession.\n+\n+        4)  The matrix rb transforms vectors from GCRS to J2000.0 mean\n+            equator and equinox by applying frame bias.\n+\n+        5)  The matrix rp transforms vectors from J2000.0 mean equator and\n+            equinox to mean equator and equinox of date by applying\n+            precession.\n+\n+        6)  The matrix rbp transforms vectors from GCRS to mean equator and\n+            equinox of date by applying frame bias then precession.  It is\n+            the product rp x rb.\n+\n+        7)  The matrix rn transforms vectors from mean equator and equinox\n+            of date to true equator and equinox of date by applying the\n+            nutation (luni-solar + planetary).\n+\n+        8)  The matrix rbpn transforms vectors from GCRS to true equator and\n+            equinox of date.  It is the product rn x rbp, applying frame\n+            bias, precession and nutation in that order.\n+\n+        9)  The X,Y,Z coordinates of the Celestial Intermediate Pole are\n+            elements (3,1-3) of the GCRS-to-true matrix, i.e. rbpn[2][0-2].\n+\n+        10) It is permissible to re-use the same array in the returned\n+            arguments.  The arrays are filled in the stated order.\n+\n+        Called:\n+           eraPfw06     bias-precession F-W angles, IAU 2006\n+           eraFw2m      F-W angles to r-matrix\n+           eraCr        copy r-matrix\n+           eraTr        transpose r-matrix\n+           eraRxr       product of two r-matrices\n+\n+        References:\n+\n+           Capitaine, N. & Wallace, P.T., 2006, Astron.Astrophys. 450, 855\n+\n+           Wallace, P.T. & Capitaine, N., 2006, Astron.Astrophys. 459, 981\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    epsa, rb, rp, rbp, rn, rbpn = ufunc.pn06(date1, date2, dpsi, deps)\n+    return epsa, rb, rp, rbp, rn, rbpn\n+\n+\n+def pn06a(date1, date2):\n+    \"\"\"\n+    Precession-nutation, IAU 2006/2000A models:  a multi-purpose function,\n+    supporting classical (equinox-based) use directly and CIO-based use\n+    indirectly.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    dpsi : double array\n+    deps : double array\n+    epsa : double array\n+    rb : double array\n+    rp : double array\n+    rbp : double array\n+    rn : double array\n+    rbpn : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPn06a``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a P n 0 6 a\n+        - - - - - - - - -\n+\n+        Precession-nutation, IAU 2006/2000A models:  a multi-purpose function,\n+        supporting classical (equinox-based) use directly and CIO-based use\n+        indirectly.\n+\n+        Given:\n+           date1,date2  double          TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           dpsi,deps    double          nutation (Note 2)\n+           epsa         double          mean obliquity (Note 3)\n+           rb           double[3][3]    frame bias matrix (Note 4)\n+           rp           double[3][3]    precession matrix (Note 5)\n+           rbp          double[3][3]    bias-precession matrix (Note 6)\n+           rn           double[3][3]    nutation matrix (Note 7)\n+           rbpn         double[3][3]    GCRS-to-true matrix (Notes 8,9)\n+\n+        Notes:\n+\n+        1)  The TT date date1+date2 is a Julian Date, apportioned in any\n+            convenient way between the two arguments.  For example,\n+            JD(TT)=2450123.7 could be expressed in any of these ways,\n+            among others:\n+\n+                   date1          date2\n+\n+                2450123.7           0.0       (JD method)\n+                2451545.0       -1421.3       (J2000 method)\n+                2400000.5       50123.2       (MJD method)\n+                2450123.5           0.2       (date & time method)\n+\n+            The JD method is the most natural and convenient to use in\n+            cases where the loss of several decimal digits of resolution\n+            is acceptable.  The J2000 method is best matched to the way\n+            the argument is handled internally and will deliver the\n+            optimum resolution.  The MJD method and the date & time methods\n+            are both good compromises between resolution and convenience.\n+\n+        2)  The nutation components (luni-solar + planetary, IAU 2000A) in\n+            longitude and obliquity are in radians and with respect to the\n+            equinox and ecliptic of date.  Free core nutation is omitted;\n+            for the utmost accuracy, use the eraPn06 function, where the\n+            nutation components are caller-specified.\n+\n+        3)  The mean obliquity is consistent with the IAU 2006 precession.\n+\n+        4)  The matrix rb transforms vectors from GCRS to mean J2000.0 by\n+            applying frame bias.\n+\n+        5)  The matrix rp transforms vectors from mean J2000.0 to mean of\n+            date by applying precession.\n+\n+        6)  The matrix rbp transforms vectors from GCRS to mean of date by\n+            applying frame bias then precession.  It is the product rp x rb.\n+\n+        7)  The matrix rn transforms vectors from mean of date to true of\n+            date by applying the nutation (luni-solar + planetary).\n+\n+        8)  The matrix rbpn transforms vectors from GCRS to true of date\n+            (CIP/equinox).  It is the product rn x rbp, applying frame bias,\n+            precession and nutation in that order.\n+\n+        9)  The X,Y,Z coordinates of the IAU 2006/2000A Celestial\n+            Intermediate Pole are elements (3,1-3) of the GCRS-to-true\n+            matrix, i.e. rbpn[2][0-2].\n+\n+        10) It is permissible to re-use the same array in the returned\n+            arguments.  The arrays are filled in the stated order.\n+\n+        Called:\n+           eraNut06a    nutation, IAU 2006/2000A\n+           eraPn06      bias/precession/nutation results, IAU 2006\n+\n+        Reference:\n+\n+           Capitaine, N. & Wallace, P.T., 2006, Astron.Astrophys. 450, 855\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    dpsi, deps, epsa, rb, rp, rbp, rn, rbpn = ufunc.pn06a(date1, date2)\n+    return dpsi, deps, epsa, rb, rp, rbp, rn, rbpn\n+\n+\n+def pnm00a(date1, date2):\n+    \"\"\"\n+    Form the matrix of precession-nutation for a given date (including\n+    frame bias), equinox based, IAU 2000A model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rbpn : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPnm00a``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a P n m 0 0 a\n+        - - - - - - - - - -\n+\n+        Form the matrix of precession-nutation for a given date (including\n+        frame bias), equinox based, IAU 2000A model.\n+\n+        Given:\n+           date1,date2 double       TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           rbpn        double[3][3] bias-precession-nutation matrix (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways, among\n+           others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix operates in the sense V(date) = rbpn * V(GCRS), where\n+           the p-vector V(date) is with respect to the true equatorial triad\n+           of date date1+date2 and the p-vector V(GCRS) is with respect to\n+           the Geocentric Celestial Reference System (IAU, 2000).\n+\n+        3) A faster, but slightly less accurate, result (about 1 mas) can be\n+           obtained by using instead the eraPnm00b function.\n+\n+        Called:\n+           eraPn00a     bias/precession/nutation, IAU 2000A\n+\n+        Reference:\n+\n+           IAU: Trans. International Astronomical Union, Vol. XXIVB;  Proc.\n+           24th General Assembly, Manchester, UK.  Resolutions B1.3, B1.6.\n+           (2000)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rbpn = ufunc.pnm00a(date1, date2)\n+    return rbpn\n+\n+\n+def pnm00b(date1, date2):\n+    \"\"\"\n+    Form the matrix of precession-nutation for a given date (including\n+    frame bias), equinox-based, IAU 2000B model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rbpn : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPnm00b``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a P n m 0 0 b\n+        - - - - - - - - - -\n+\n+        Form the matrix of precession-nutation for a given date (including\n+        frame bias), equinox-based, IAU 2000B model.\n+\n+        Given:\n+           date1,date2 double       TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           rbpn        double[3][3] bias-precession-nutation matrix (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways, among\n+           others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix operates in the sense V(date) = rbpn * V(GCRS), where\n+           the p-vector V(date) is with respect to the true equatorial triad\n+           of date date1+date2 and the p-vector V(GCRS) is with respect to\n+           the Geocentric Celestial Reference System (IAU, 2000).\n+\n+        3) The present function is faster, but slightly less accurate (about\n+           1 mas), than the eraPnm00a function.\n+\n+        Called:\n+           eraPn00b     bias/precession/nutation, IAU 2000B\n+\n+        Reference:\n+\n+           IAU: Trans. International Astronomical Union, Vol. XXIVB;  Proc.\n+           24th General Assembly, Manchester, UK.  Resolutions B1.3, B1.6.\n+           (2000)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rbpn = ufunc.pnm00b(date1, date2)\n+    return rbpn\n+\n+\n+def pnm06a(date1, date2):\n+    \"\"\"\n+    Form the matrix of precession-nutation for a given date (including\n+    frame bias), equinox based, IAU 2006 precession and IAU 2000A\n+    nutation models.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rbpn : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPnm06a``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a P n m 0 6 a\n+        - - - - - - - - - -\n+\n+        Form the matrix of precession-nutation for a given date (including\n+        frame bias), equinox based, IAU 2006 precession and IAU 2000A\n+        nutation models.\n+\n+        Given:\n+           date1,date2 double       TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           rbpn        double[3][3] bias-precession-nutation matrix (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways, among\n+           others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix operates in the sense V(date) = rbpn * V(GCRS), where\n+           the p-vector V(date) is with respect to the true equatorial triad\n+           of date date1+date2 and the p-vector V(GCRS) is with respect to\n+           the Geocentric Celestial Reference System (IAU, 2000).\n+\n+        Called:\n+           eraPfw06     bias-precession F-W angles, IAU 2006\n+           eraNut06a    nutation, IAU 2006/2000A\n+           eraFw2m      F-W angles to r-matrix\n+\n+        Reference:\n+\n+           Capitaine, N. & Wallace, P.T., 2006, Astron.Astrophys. 450, 855.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rbpn = ufunc.pnm06a(date1, date2)\n+    return rbpn\n+\n+\n+def pnm80(date1, date2):\n+    \"\"\"\n+    Form the matrix of precession/nutation for a given date, IAU 1976\n+    precession model, IAU 1980 nutation model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rmatpn : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPnm80``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a P n m 8 0\n+        - - - - - - - - -\n+\n+        Form the matrix of precession/nutation for a given date, IAU 1976\n+        precession model, IAU 1980 nutation model.\n+\n+        Given:\n+           date1,date2 double       TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           rmatpn         double[3][3]   combined precession/nutation matrix\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix operates in the sense V(date) = rmatpn * V(J2000),\n+           where the p-vector V(date) is with respect to the true equatorial\n+           triad of date date1+date2 and the p-vector V(J2000) is with\n+           respect to the mean equatorial triad of epoch J2000.0.\n+\n+        Called:\n+           eraPmat76    precession matrix, IAU 1976\n+           eraNutm80    nutation matrix, IAU 1980\n+           eraRxr       product of two r-matrices\n+\n+        Reference:\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992),\n+           Section 3.3 (p145).\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rmatpn = ufunc.pnm80(date1, date2)\n+    return rmatpn\n+\n+\n+def pom00(xp, yp, sp):\n+    \"\"\"\n+    Form the matrix of polar motion for a given date, IAU 2000.\n+\n+    Parameters\n+    ----------\n+    xp : double array\n+    yp : double array\n+    sp : double array\n+\n+    Returns\n+    -------\n+    rpom : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPom00``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a P o m 0 0\n+        - - - - - - - - - -\n+\n+        Form the matrix of polar motion for a given date, IAU 2000.\n+\n+        Given:\n+           xp,yp    double    coordinates of the pole (radians, Note 1)\n+           sp       double    the TIO locator s' (radians, Note 2)\n+\n+        Returned:\n+           rpom     double[3][3]   polar-motion matrix (Note 3)\n+\n+        Notes:\n+\n+        1) The arguments xp and yp are the coordinates (in radians) of the\n+           Celestial Intermediate Pole with respect to the International\n+           Terrestrial Reference System (see IERS Conventions 2003),\n+           measured along the meridians 0 and 90 deg west respectively.\n+\n+        2) The argument sp is the TIO locator s', in radians, which\n+           positions the Terrestrial Intermediate Origin on the equator.  It\n+           is obtained from polar motion observations by numerical\n+           integration, and so is in essence unpredictable.  However, it is\n+           dominated by a secular drift of about 47 microarcseconds per\n+           century, and so can be taken into account by using s' = -47*t,\n+           where t is centuries since J2000.0.  The function eraSp00\n+           implements this approximation.\n+\n+        3) The matrix operates in the sense V(TRS) = rpom * V(CIP), meaning\n+           that it is the final rotation when computing the pointing\n+           direction to a celestial source.\n+\n+        Called:\n+           eraIr        initialize r-matrix to identity\n+           eraRz        rotate around Z-axis\n+           eraRy        rotate around Y-axis\n+           eraRx        rotate around X-axis\n+\n+        Reference:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rpom = ufunc.pom00(xp, yp, sp)\n+    return rpom\n+\n+\n+def pr00(date1, date2):\n+    \"\"\"\n+    Precession-rate part of the IAU 2000 precession-nutation models\n+    (part of MHB2000).\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    dpsipr : double array\n+    depspr : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPr00``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a P r 0 0\n+        - - - - - - - -\n+\n+        Precession-rate part of the IAU 2000 precession-nutation models\n+        (part of MHB2000).\n+\n+        Given:\n+           date1,date2    double  TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           dpsipr,depspr  double  precession corrections (Notes 2,3)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The precession adjustments are expressed as \"nutation\n+           components\", corrections in longitude and obliquity with respect\n+           to the J2000.0 equinox and ecliptic.\n+\n+        3) Although the precession adjustments are stated to be with respect\n+           to Lieske et al. (1977), the MHB2000 model does not specify which\n+           set of Euler angles are to be used and how the adjustments are to\n+           be applied.  The most literal and straightforward procedure is to\n+           adopt the 4-rotation epsilon_0, psi_A, omega_A, xi_A option, and\n+           to add dpsipr to psi_A and depspr to both omega_A and eps_A.\n+\n+        4) This is an implementation of one aspect of the IAU 2000A nutation\n+           model, formally adopted by the IAU General Assembly in 2000,\n+           namely MHB2000 (Mathews et al. 2002).\n+\n+        References:\n+\n+           Lieske, J.H., Lederle, T., Fricke, W. & Morando, B., \"Expressions\n+           for the precession quantities based upon the IAU (1976) System of\n+           Astronomical Constants\", Astron.Astrophys., 58, 1-16 (1977)\n+\n+           Mathews, P.M., Herring, T.A., Buffet, B.A., \"Modeling of nutation\n+           and precession   New nutation series for nonrigid Earth and\n+           insights into the Earth's interior\", J.Geophys.Res., 107, B4,\n+           2002.  The MHB2000 code itself was obtained on 9th September 2002\n+           from ftp://maia.usno.navy.mil/conv2000/chapter5/IAU2000A.\n+\n+           Wallace, P.T., \"Software for Implementing the IAU 2000\n+           Resolutions\", in IERS Workshop 5.1 (2002).\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    dpsipr, depspr = ufunc.pr00(date1, date2)\n+    return dpsipr, depspr\n+\n+\n+def prec76(date01, date02, date11, date12):\n+    \"\"\"\n+    IAU 1976 precession model.\n+\n+    Parameters\n+    ----------\n+    date01 : double array\n+    date02 : double array\n+    date11 : double array\n+    date12 : double array\n+\n+    Returns\n+    -------\n+    zeta : double array\n+    z : double array\n+    theta : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPrec76``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a P r e c 7 6\n+        - - - - - - - - - -\n+\n+        IAU 1976 precession model.\n+\n+        This function forms the three Euler angles which implement general\n+        precession between two dates, using the IAU 1976 model (as for the\n+        FK5 catalog).\n+\n+        Given:\n+           date01,date02   double    TDB starting date (Note 1)\n+           date11,date12   double    TDB ending date (Note 1)\n+\n+        Returned:\n+           zeta            double    1st rotation: radians cw around z\n+           z               double    3rd rotation: radians cw around z\n+           theta           double    2nd rotation: radians ccw around y\n+\n+        Notes:\n+\n+        1) The dates date01+date02 and date11+date12 are Julian Dates,\n+           apportioned in any convenient way between the arguments daten1\n+           and daten2.  For example, JD(TDB)=2450123.7 could be expressed in\n+           any of these ways, among others:\n+\n+                 daten1        daten2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 method is best matched to the way the\n+           argument is handled internally and will deliver the optimum\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+           The two dates may be expressed using different methods, but at\n+           the risk of losing some resolution.\n+\n+        2) The accumulated precession angles zeta, z, theta are expressed\n+           through canonical polynomials which are valid only for a limited\n+           time span.  In addition, the IAU 1976 precession rate is known to\n+           be imperfect.  The absolute accuracy of the present formulation\n+           is better than 0.1 arcsec from 1960AD to 2040AD, better than\n+           1 arcsec from 1640AD to 2360AD, and remains below 3 arcsec for\n+           the whole of the period 500BC to 3000AD.  The errors exceed\n+           10 arcsec outside the range 1200BC to 3900AD, exceed 100 arcsec\n+           outside 4200BC to 5600AD and exceed 1000 arcsec outside 6800BC to\n+           8200AD.\n+\n+        3) The three angles are returned in the conventional order, which\n+           is not the same as the order of the corresponding Euler\n+           rotations.  The precession matrix is\n+           R_3(-z) x R_2(+theta) x R_3(-zeta).\n+\n+        Reference:\n+\n+           Lieske, J.H., 1979, Astron.Astrophys. 73, 282, equations\n+           (6) & (7), p283.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    zeta, z, theta = ufunc.prec76(date01, date02, date11, date12)\n+    return zeta, z, theta\n+\n+\n+def s00(date1, date2, x, y):\n+    \"\"\"\n+    The CIO locator s, positioning the Celestial Intermediate Origin on\n+    the equator of the Celestial Intermediate Pole, given the CIP's X,Y\n+    coordinates.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+    x : double array\n+    y : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraS00``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a S 0 0\n+        - - - - - - -\n+\n+        The CIO locator s, positioning the Celestial Intermediate Origin on\n+        the equator of the Celestial Intermediate Pole, given the CIP's X,Y\n+        coordinates.  Compatible with IAU 2000A precession-nutation.\n+\n+        Given:\n+           date1,date2   double    TT as a 2-part Julian Date (Note 1)\n+           x,y           double    CIP coordinates (Note 3)\n+\n+        Returned (function value):\n+                         double    the CIO locator s in radians (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The CIO locator s is the difference between the right ascensions\n+           of the same point in two systems:  the two systems are the GCRS\n+           and the CIP,CIO, and the point is the ascending node of the\n+           CIP equator.  The quantity s remains below 0.1 arcsecond\n+           throughout 1900-2100.\n+\n+        3) The series used to compute s is in fact for s+XY/2, where X and Y\n+           are the x and y components of the CIP unit vector;  this series\n+           is more compact than a direct series for s would be.  This\n+           function requires X,Y to be supplied by the caller, who is\n+           responsible for providing values that are consistent with the\n+           supplied date.\n+\n+        4) The model is consistent with the IAU 2000A precession-nutation.\n+\n+        Called:\n+           eraFal03     mean anomaly of the Moon\n+           eraFalp03    mean anomaly of the Sun\n+           eraFaf03     mean argument of the latitude of the Moon\n+           eraFad03     mean elongation of the Moon from the Sun\n+           eraFaom03    mean longitude of the Moon's ascending node\n+           eraFave03    mean longitude of Venus\n+           eraFae03     mean longitude of Earth\n+           eraFapa03    general accumulated precession in longitude\n+\n+        References:\n+\n+           Capitaine, N., Chapront, J., Lambert, S. and Wallace, P.,\n+           \"Expressions for the Celestial Intermediate Pole and Celestial\n+           Ephemeris Origin consistent with the IAU 2000A precession-\n+           nutation model\", Astron.Astrophys. 400, 1145-1154 (2003)\n+\n+           n.b. The celestial ephemeris origin (CEO) was renamed \"celestial\n+                intermediate origin\" (CIO) by IAU 2006 Resolution 2.\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.s00(date1, date2, x, y)\n+    return c_retval\n+\n+\n+def s00a(date1, date2):\n+    \"\"\"\n+    The CIO locator s, positioning the Celestial Intermediate Origin on\n+    the equator of the Celestial Intermediate Pole, using the IAU 2000A\n+    precession-nutation model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraS00a``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a S 0 0 a\n+        - - - - - - - -\n+\n+        The CIO locator s, positioning the Celestial Intermediate Origin on\n+        the equator of the Celestial Intermediate Pole, using the IAU 2000A\n+        precession-nutation model.\n+\n+        Given:\n+           date1,date2  double    TT as a 2-part Julian Date (Note 1)\n+\n+        Returned (function value):\n+                        double    the CIO locator s in radians (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The CIO locator s is the difference between the right ascensions\n+           of the same point in two systems.  The two systems are the GCRS\n+           and the CIP,CIO, and the point is the ascending node of the\n+           CIP equator.  The CIO locator s remains a small fraction of\n+           1 arcsecond throughout 1900-2100.\n+\n+        3) The series used to compute s is in fact for s+XY/2, where X and Y\n+           are the x and y components of the CIP unit vector;  this series\n+           is more compact than a direct series for s would be.  The present\n+           function uses the full IAU 2000A nutation model when predicting\n+           the CIP position.  Faster results, with no significant loss of\n+           accuracy, can be obtained via the function eraS00b, which uses\n+           instead the IAU 2000B truncated model.\n+\n+        Called:\n+           eraPnm00a    classical NPB matrix, IAU 2000A\n+           eraBnp2xy    extract CIP X,Y from the BPN matrix\n+           eraS00       the CIO locator s, given X,Y, IAU 2000A\n+\n+        References:\n+\n+           Capitaine, N., Chapront, J., Lambert, S. and Wallace, P.,\n+           \"Expressions for the Celestial Intermediate Pole and Celestial\n+           Ephemeris Origin consistent with the IAU 2000A precession-\n+           nutation model\", Astron.Astrophys. 400, 1145-1154 (2003)\n+\n+           n.b. The celestial ephemeris origin (CEO) was renamed \"celestial\n+                intermediate origin\" (CIO) by IAU 2006 Resolution 2.\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.s00a(date1, date2)\n+    return c_retval\n+\n+\n+def s00b(date1, date2):\n+    \"\"\"\n+    The CIO locator s, positioning the Celestial Intermediate Origin on\n+    the equator of the Celestial Intermediate Pole, using the IAU 2000B\n+    precession-nutation model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraS00b``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a S 0 0 b\n+        - - - - - - - -\n+\n+        The CIO locator s, positioning the Celestial Intermediate Origin on\n+        the equator of the Celestial Intermediate Pole, using the IAU 2000B\n+        precession-nutation model.\n+\n+        Given:\n+           date1,date2  double    TT as a 2-part Julian Date (Note 1)\n+\n+        Returned (function value):\n+                        double    the CIO locator s in radians (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The CIO locator s is the difference between the right ascensions\n+           of the same point in two systems.  The two systems are the GCRS\n+           and the CIP,CIO, and the point is the ascending node of the\n+           CIP equator.  The CIO locator s remains a small fraction of\n+           1 arcsecond throughout 1900-2100.\n+\n+        3) The series used to compute s is in fact for s+XY/2, where X and Y\n+           are the x and y components of the CIP unit vector;  this series\n+           is more compact than a direct series for s would be.  The present\n+           function uses the IAU 2000B truncated nutation model when\n+           predicting the CIP position.  The function eraS00a uses instead\n+           the full IAU 2000A model, but with no significant increase in\n+           accuracy and at some cost in speed.\n+\n+        Called:\n+           eraPnm00b    classical NPB matrix, IAU 2000B\n+           eraBnp2xy    extract CIP X,Y from the BPN matrix\n+           eraS00       the CIO locator s, given X,Y, IAU 2000A\n+\n+        References:\n+\n+           Capitaine, N., Chapront, J., Lambert, S. and Wallace, P.,\n+           \"Expressions for the Celestial Intermediate Pole and Celestial\n+           Ephemeris Origin consistent with the IAU 2000A precession-\n+           nutation model\", Astron.Astrophys. 400, 1145-1154 (2003)\n+\n+           n.b. The celestial ephemeris origin (CEO) was renamed \"celestial\n+                intermediate origin\" (CIO) by IAU 2006 Resolution 2.\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.s00b(date1, date2)\n+    return c_retval\n+\n+\n+def s06(date1, date2, x, y):\n+    \"\"\"\n+    The CIO locator s, positioning the Celestial Intermediate Origin on\n+    the equator of the Celestial Intermediate Pole, given the CIP's X,Y\n+    coordinates.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+    x : double array\n+    y : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraS06``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a S 0 6\n+        - - - - - - -\n+\n+        The CIO locator s, positioning the Celestial Intermediate Origin on\n+        the equator of the Celestial Intermediate Pole, given the CIP's X,Y\n+        coordinates.  Compatible with IAU 2006/2000A precession-nutation.\n+\n+        Given:\n+           date1,date2   double    TT as a 2-part Julian Date (Note 1)\n+           x,y           double    CIP coordinates (Note 3)\n+\n+        Returned (function value):\n+                         double    the CIO locator s in radians (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The CIO locator s is the difference between the right ascensions\n+           of the same point in two systems:  the two systems are the GCRS\n+           and the CIP,CIO, and the point is the ascending node of the\n+           CIP equator.  The quantity s remains below 0.1 arcsecond\n+           throughout 1900-2100.\n+\n+        3) The series used to compute s is in fact for s+XY/2, where X and Y\n+           are the x and y components of the CIP unit vector;  this series\n+           is more compact than a direct series for s would be.  This\n+           function requires X,Y to be supplied by the caller, who is\n+           responsible for providing values that are consistent with the\n+           supplied date.\n+\n+        4) The model is consistent with the \"P03\" precession (Capitaine et\n+           al. 2003), adopted by IAU 2006 Resolution 1, 2006, and the\n+           IAU 2000A nutation (with P03 adjustments).\n+\n+        Called:\n+           eraFal03     mean anomaly of the Moon\n+           eraFalp03    mean anomaly of the Sun\n+           eraFaf03     mean argument of the latitude of the Moon\n+           eraFad03     mean elongation of the Moon from the Sun\n+           eraFaom03    mean longitude of the Moon's ascending node\n+           eraFave03    mean longitude of Venus\n+           eraFae03     mean longitude of Earth\n+           eraFapa03    general accumulated precession in longitude\n+\n+        References:\n+\n+           Capitaine, N., Wallace, P.T. & Chapront, J., 2003, Astron.\n+           Astrophys. 432, 355\n+\n+           McCarthy, D.D., Petit, G. (eds.) 2004, IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.s06(date1, date2, x, y)\n+    return c_retval\n+\n+\n+def s06a(date1, date2):\n+    \"\"\"\n+    The CIO locator s, positioning the Celestial Intermediate Origin on\n+    the equator of the Celestial Intermediate Pole, using the IAU 2006\n+    precession and IAU 2000A nutation models.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraS06a``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a S 0 6 a\n+        - - - - - - - -\n+\n+        The CIO locator s, positioning the Celestial Intermediate Origin on\n+        the equator of the Celestial Intermediate Pole, using the IAU 2006\n+        precession and IAU 2000A nutation models.\n+\n+        Given:\n+           date1,date2  double    TT as a 2-part Julian Date (Note 1)\n+\n+        Returned (function value):\n+                        double    the CIO locator s in radians (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The CIO locator s is the difference between the right ascensions\n+           of the same point in two systems.  The two systems are the GCRS\n+           and the CIP,CIO, and the point is the ascending node of the\n+           CIP equator.  The CIO locator s remains a small fraction of\n+           1 arcsecond throughout 1900-2100.\n+\n+        3) The series used to compute s is in fact for s+XY/2, where X and Y\n+           are the x and y components of the CIP unit vector;  this series is\n+           more compact than a direct series for s would be.  The present\n+           function uses the full IAU 2000A nutation model when predicting\n+           the CIP position.\n+\n+        Called:\n+           eraPnm06a    classical NPB matrix, IAU 2006/2000A\n+           eraBpn2xy    extract CIP X,Y coordinates from NPB matrix\n+           eraS06       the CIO locator s, given X,Y, IAU 2006\n+\n+        References:\n+\n+           Capitaine, N., Chapront, J., Lambert, S. and Wallace, P.,\n+           \"Expressions for the Celestial Intermediate Pole and Celestial\n+           Ephemeris Origin consistent with the IAU 2000A precession-\n+           nutation model\", Astron.Astrophys. 400, 1145-1154 (2003)\n+\n+           n.b. The celestial ephemeris origin (CEO) was renamed \"celestial\n+                intermediate origin\" (CIO) by IAU 2006 Resolution 2.\n+\n+           Capitaine, N. & Wallace, P.T., 2006, Astron.Astrophys. 450, 855\n+\n+           McCarthy, D. D., Petit, G. (eds.), 2004, IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG\n+\n+           Wallace, P.T. & Capitaine, N., 2006, Astron.Astrophys. 459, 981\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.s06a(date1, date2)\n+    return c_retval\n+\n+\n+def sp00(date1, date2):\n+    \"\"\"\n+    The TIO locator s', positioning the Terrestrial Intermediate Origin\n+    on the equator of the Celestial Intermediate Pole.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraSp00``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a S p 0 0\n+        - - - - - - - -\n+\n+        The TIO locator s', positioning the Terrestrial Intermediate Origin\n+        on the equator of the Celestial Intermediate Pole.\n+\n+        Given:\n+           date1,date2  double    TT as a 2-part Julian Date (Note 1)\n+\n+        Returned (function value):\n+                        double    the TIO locator s' in radians (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The TIO locator s' is obtained from polar motion observations by\n+           numerical integration, and so is in essence unpredictable.\n+           However, it is dominated by a secular drift of about\n+           47 microarcseconds per century, which is the approximation\n+           evaluated by the present function.\n+\n+        Reference:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.sp00(date1, date2)\n+    return c_retval\n+\n+\n+def xy06(date1, date2):\n+    \"\"\"\n+    X,Y coordinates of celestial intermediate pole from series based\n+    on IAU 2006 precession and IAU 2000A nutation.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    x : double array\n+    y : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraXy06``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a X y 0 6\n+        - - - - - - - -\n+\n+        X,Y coordinates of celestial intermediate pole from series based\n+        on IAU 2006 precession and IAU 2000A nutation.\n+\n+        Given:\n+           date1,date2  double     TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           x,y          double     CIP X,Y coordinates (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The X,Y coordinates are those of the unit vector towards the\n+           celestial intermediate pole.  They represent the combined effects\n+           of frame bias, precession and nutation.\n+\n+        3) The fundamental arguments used are as adopted in IERS Conventions\n+           (2003) and are from Simon et al. (1994) and Souchay et al.\n+           (1999).\n+\n+        4) This is an alternative to the angles-based method, via the ERFA\n+           function eraFw2xy and as used in eraXys06a for example.  The two\n+           methods agree at the 1 microarcsecond level (at present), a\n+           negligible amount compared with the intrinsic accuracy of the\n+           models.  However, it would be unwise to mix the two methods\n+           (angles-based and series-based) in a single application.\n+\n+        Called:\n+           eraFal03     mean anomaly of the Moon\n+           eraFalp03    mean anomaly of the Sun\n+           eraFaf03     mean argument of the latitude of the Moon\n+           eraFad03     mean elongation of the Moon from the Sun\n+           eraFaom03    mean longitude of the Moon's ascending node\n+           eraFame03    mean longitude of Mercury\n+           eraFave03    mean longitude of Venus\n+           eraFae03     mean longitude of Earth\n+           eraFama03    mean longitude of Mars\n+           eraFaju03    mean longitude of Jupiter\n+           eraFasa03    mean longitude of Saturn\n+           eraFaur03    mean longitude of Uranus\n+           eraFane03    mean longitude of Neptune\n+           eraFapa03    general accumulated precession in longitude\n+\n+        References:\n+\n+           Capitaine, N., Wallace, P.T. & Chapront, J., 2003,\n+           Astron.Astrophys., 412, 567\n+\n+           Capitaine, N. & Wallace, P.T., 2006, Astron.Astrophys. 450, 855\n+\n+           McCarthy, D. D., Petit, G. (eds.), 2004, IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG\n+\n+           Simon, J.L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G. & Laskar, J., Astron.Astrophys., 1994, 282, 663\n+\n+           Souchay, J., Loysel, B., Kinoshita, H., Folgueira, M., 1999,\n+           Astron.Astrophys.Supp.Ser. 135, 111\n+\n+           Wallace, P.T. & Capitaine, N., 2006, Astron.Astrophys. 459, 981\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    x, y = ufunc.xy06(date1, date2)\n+    return x, y\n+\n+\n+def xys00a(date1, date2):\n+    \"\"\"\n+    For a given TT date, compute the X,Y coordinates of the Celestial\n+    Intermediate Pole and the CIO locator s, using the IAU 2000A\n+    precession-nutation model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    x : double array\n+    y : double array\n+    s : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraXys00a``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a X y s 0 0 a\n+        - - - - - - - - - -\n+\n+        For a given TT date, compute the X,Y coordinates of the Celestial\n+        Intermediate Pole and the CIO locator s, using the IAU 2000A\n+        precession-nutation model.\n+\n+        Given:\n+           date1,date2  double   TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           x,y          double   Celestial Intermediate Pole (Note 2)\n+           s            double   the CIO locator s (Note 3)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The Celestial Intermediate Pole coordinates are the x,y\n+           components of the unit vector in the Geocentric Celestial\n+           Reference System.\n+\n+        3) The CIO locator s (in radians) positions the Celestial\n+           Intermediate Origin on the equator of the CIP.\n+\n+        4) A faster, but slightly less accurate result (about 1 mas for\n+           X,Y), can be obtained by using instead the eraXys00b function.\n+\n+        Called:\n+           eraPnm00a    classical NPB matrix, IAU 2000A\n+           eraBpn2xy    extract CIP X,Y coordinates from NPB matrix\n+           eraS00       the CIO locator s, given X,Y, IAU 2000A\n+\n+        Reference:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    x, y, s = ufunc.xys00a(date1, date2)\n+    return x, y, s\n+\n+\n+def xys00b(date1, date2):\n+    \"\"\"\n+    For a given TT date, compute the X,Y coordinates of the Celestial\n+    Intermediate Pole and the CIO locator s, using the IAU 2000B\n+    precession-nutation model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    x : double array\n+    y : double array\n+    s : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraXys00b``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a X y s 0 0 b\n+        - - - - - - - - - -\n+\n+        For a given TT date, compute the X,Y coordinates of the Celestial\n+        Intermediate Pole and the CIO locator s, using the IAU 2000B\n+        precession-nutation model.\n+\n+        Given:\n+           date1,date2  double   TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           x,y          double   Celestial Intermediate Pole (Note 2)\n+           s            double   the CIO locator s (Note 3)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The Celestial Intermediate Pole coordinates are the x,y\n+           components of the unit vector in the Geocentric Celestial\n+           Reference System.\n+\n+        3) The CIO locator s (in radians) positions the Celestial\n+           Intermediate Origin on the equator of the CIP.\n+\n+        4) The present function is faster, but slightly less accurate (about\n+           1 mas in X,Y), than the eraXys00a function.\n+\n+        Called:\n+           eraPnm00b    classical NPB matrix, IAU 2000B\n+           eraBpn2xy    extract CIP X,Y coordinates from NPB matrix\n+           eraS00       the CIO locator s, given X,Y, IAU 2000A\n+\n+        Reference:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    x, y, s = ufunc.xys00b(date1, date2)\n+    return x, y, s\n+\n+\n+def xys06a(date1, date2):\n+    \"\"\"\n+    For a given TT date, compute the X,Y coordinates of the Celestial\n+    Intermediate Pole and the CIO locator s, using the IAU 2006\n+    precession and IAU 2000A nutation models.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    x : double array\n+    y : double array\n+    s : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraXys06a``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a X y s 0 6 a\n+        - - - - - - - - - -\n+\n+        For a given TT date, compute the X,Y coordinates of the Celestial\n+        Intermediate Pole and the CIO locator s, using the IAU 2006\n+        precession and IAU 2000A nutation models.\n+\n+        Given:\n+           date1,date2  double  TT as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           x,y          double  Celestial Intermediate Pole (Note 2)\n+           s            double  the CIO locator s (Note 3)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The Celestial Intermediate Pole coordinates are the x,y components\n+           of the unit vector in the Geocentric Celestial Reference System.\n+\n+        3) The CIO locator s (in radians) positions the Celestial\n+           Intermediate Origin on the equator of the CIP.\n+\n+        4) Series-based solutions for generating X and Y are also available:\n+           see Capitaine & Wallace (2006) and eraXy06.\n+\n+        Called:\n+           eraPnm06a    classical NPB matrix, IAU 2006/2000A\n+           eraBpn2xy    extract CIP X,Y coordinates from NPB matrix\n+           eraS06       the CIO locator s, given X,Y, IAU 2006\n+\n+        References:\n+\n+           Capitaine, N. & Wallace, P.T., 2006, Astron.Astrophys. 450, 855\n+\n+           Wallace, P.T. & Capitaine, N., 2006, Astron.Astrophys. 459, 981\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    x, y, s = ufunc.xys06a(date1, date2)\n+    return x, y, s\n+\n+\n+def ee00(date1, date2, epsa, dpsi):\n+    \"\"\"\n+    The equation of the equinoxes, compatible with IAU 2000 resolutions,\n+    given the nutation in longitude and the mean obliquity.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+    epsa : double array\n+    dpsi : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEe00``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a E e 0 0\n+        - - - - - - - -\n+\n+        The equation of the equinoxes, compatible with IAU 2000 resolutions,\n+        given the nutation in longitude and the mean obliquity.\n+\n+        Given:\n+           date1,date2  double    TT as a 2-part Julian Date (Note 1)\n+           epsa         double    mean obliquity (Note 2)\n+           dpsi         double    nutation in longitude (Note 3)\n+\n+        Returned (function value):\n+                        double    equation of the equinoxes (Note 4)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The obliquity, in radians, is mean of date.\n+\n+        3) The result, which is in radians, operates in the following sense:\n+\n+              Greenwich apparent ST = GMST + equation of the equinoxes\n+\n+        4) The result is compatible with the IAU 2000 resolutions.  For\n+           further details, see IERS Conventions 2003 and Capitaine et al.\n+           (2002).\n+\n+        Called:\n+           eraEect00    equation of the equinoxes complementary terms\n+\n+        References:\n+\n+           Capitaine, N., Wallace, P.T. and McCarthy, D.D., \"Expressions to\n+           implement the IAU 2000 definition of UT1\", Astronomy &\n+           Astrophysics, 406, 1135-1149 (2003)\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.ee00(date1, date2, epsa, dpsi)\n+    return c_retval\n+\n+\n+def ee00a(date1, date2):\n+    \"\"\"\n+    Equation of the equinoxes, compatible with IAU 2000 resolutions.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEe00a``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a E e 0 0 a\n+        - - - - - - - - -\n+\n+        Equation of the equinoxes, compatible with IAU 2000 resolutions.\n+\n+        Given:\n+           date1,date2  double    TT as a 2-part Julian Date (Note 1)\n+\n+        Returned (function value):\n+                        double    equation of the equinoxes (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The result, which is in radians, operates in the following sense:\n+\n+              Greenwich apparent ST = GMST + equation of the equinoxes\n+\n+        3) The result is compatible with the IAU 2000 resolutions.  For\n+           further details, see IERS Conventions 2003 and Capitaine et al.\n+           (2002).\n+\n+        Called:\n+           eraPr00      IAU 2000 precession adjustments\n+           eraObl80     mean obliquity, IAU 1980\n+           eraNut00a    nutation, IAU 2000A\n+           eraEe00      equation of the equinoxes, IAU 2000\n+\n+        References:\n+\n+           Capitaine, N., Wallace, P.T. and McCarthy, D.D., \"Expressions to\n+           implement the IAU 2000 definition of UT1\", Astronomy &\n+           Astrophysics, 406, 1135-1149 (2003).\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004).\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.ee00a(date1, date2)\n+    return c_retval\n+\n+\n+def ee00b(date1, date2):\n+    \"\"\"\n+    Equation of the equinoxes, compatible with IAU 2000 resolutions but\n+    using the truncated nutation model IAU 2000B.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEe00b``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a E e 0 0 b\n+        - - - - - - - - -\n+\n+        Equation of the equinoxes, compatible with IAU 2000 resolutions but\n+        using the truncated nutation model IAU 2000B.\n+\n+        Given:\n+           date1,date2  double    TT as a 2-part Julian Date (Note 1)\n+\n+        Returned (function value):\n+                        double    equation of the equinoxes (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The result, which is in radians, operates in the following sense:\n+\n+              Greenwich apparent ST = GMST + equation of the equinoxes\n+\n+        3) The result is compatible with the IAU 2000 resolutions except\n+           that accuracy has been compromised (1 mas) for the sake of speed.\n+           For further details, see McCarthy & Luzum (2003), IERS\n+           Conventions 2003 and Capitaine et al. (2003).\n+\n+        Called:\n+           eraPr00      IAU 2000 precession adjustments\n+           eraObl80     mean obliquity, IAU 1980\n+           eraNut00b    nutation, IAU 2000B\n+           eraEe00      equation of the equinoxes, IAU 2000\n+\n+        References:\n+\n+           Capitaine, N., Wallace, P.T. and McCarthy, D.D., \"Expressions to\n+           implement the IAU 2000 definition of UT1\", Astronomy &\n+           Astrophysics, 406, 1135-1149 (2003)\n+\n+           McCarthy, D.D. & Luzum, B.J., \"An abridged model of the\n+           precession-nutation of the celestial pole\", Celestial Mechanics &\n+           Dynamical Astronomy, 85, 37-49 (2003)\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.ee00b(date1, date2)\n+    return c_retval\n+\n+\n+def ee06a(date1, date2):\n+    \"\"\"\n+    Equation of the equinoxes, compatible with IAU 2000 resolutions and\n+    IAU 2006/2000A precession-nutation.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEe06a``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a E e 0 6 a\n+        - - - - - - - - -\n+\n+        Equation of the equinoxes, compatible with IAU 2000 resolutions and\n+        IAU 2006/2000A precession-nutation.\n+\n+        Given:\n+           date1,date2  double    TT as a 2-part Julian Date (Note 1)\n+\n+        Returned (function value):\n+                        double    equation of the equinoxes (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The result, which is in radians, operates in the following sense:\n+\n+              Greenwich apparent ST = GMST + equation of the equinoxes\n+\n+        Called:\n+           eraAnpm      normalize angle into range +/- pi\n+           eraGst06a    Greenwich apparent sidereal time, IAU 2006/2000A\n+           eraGmst06    Greenwich mean sidereal time, IAU 2006\n+\n+        Reference:\n+\n+           McCarthy, D. D., Petit, G. (eds.), 2004, IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.ee06a(date1, date2)\n+    return c_retval\n+\n+\n+def eect00(date1, date2):\n+    \"\"\"\n+    Equation of the equinoxes complementary terms, consistent with\n+    IAU 2000 resolutions.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEect00``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a E e c t 0 0\n+        - - - - - - - - - -\n+\n+        Equation of the equinoxes complementary terms, consistent with\n+        IAU 2000 resolutions.\n+\n+        Given:\n+           date1,date2  double   TT as a 2-part Julian Date (Note 1)\n+\n+        Returned (function value):\n+                        double   complementary terms (Note 2)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The \"complementary terms\" are part of the equation of the\n+           equinoxes (EE), classically the difference between apparent and\n+           mean Sidereal Time:\n+\n+              GAST = GMST + EE\n+\n+           with:\n+\n+              EE = dpsi * cos(eps)\n+\n+           where dpsi is the nutation in longitude and eps is the obliquity\n+           of date.  However, if the rotation of the Earth were constant in\n+           an inertial frame the classical formulation would lead to\n+           apparent irregularities in the UT1 timescale traceable to side-\n+           effects of precession-nutation.  In order to eliminate these\n+           effects from UT1, \"complementary terms\" were introduced in 1994\n+           (IAU, 1994) and took effect from 1997 (Capitaine and Gontier,\n+           1993):\n+\n+              GAST = GMST + CT + EE\n+\n+           By convention, the complementary terms are included as part of\n+           the equation of the equinoxes rather than as part of the mean\n+           Sidereal Time.  This slightly compromises the \"geometrical\"\n+           interpretation of mean sidereal time but is otherwise\n+           inconsequential.\n+\n+           The present function computes CT in the above expression,\n+           compatible with IAU 2000 resolutions (Capitaine et al., 2002, and\n+           IERS Conventions 2003).\n+\n+        Called:\n+           eraFal03     mean anomaly of the Moon\n+           eraFalp03    mean anomaly of the Sun\n+           eraFaf03     mean argument of the latitude of the Moon\n+           eraFad03     mean elongation of the Moon from the Sun\n+           eraFaom03    mean longitude of the Moon's ascending node\n+           eraFave03    mean longitude of Venus\n+           eraFae03     mean longitude of Earth\n+           eraFapa03    general accumulated precession in longitude\n+\n+        References:\n+\n+           Capitaine, N. & Gontier, A.-M., Astron.Astrophys., 275,\n+           645-650 (1993)\n+\n+           Capitaine, N., Wallace, P.T. and McCarthy, D.D., \"Expressions to\n+           implement the IAU 2000 definition of UT1\", Astron.Astrophys., 406,\n+           1135-1149 (2003)\n+\n+           IAU Resolution C7, Recommendation 3 (1994)\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.eect00(date1, date2)\n+    return c_retval\n+\n+\n+def eqeq94(date1, date2):\n+    \"\"\"\n+    Equation of the equinoxes, IAU 1994 model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEqeq94``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a E q e q 9 4\n+        - - - - - - - - - -\n+\n+        Equation of the equinoxes, IAU 1994 model.\n+\n+        Given:\n+           date1,date2   double     TDB date (Note 1)\n+\n+        Returned (function value):\n+                         double     equation of the equinoxes (Note 2)\n+\n+        Notes:\n+\n+        1) The date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The result, which is in radians, operates in the following sense:\n+\n+              Greenwich apparent ST = GMST + equation of the equinoxes\n+\n+        Called:\n+           eraAnpm      normalize angle into range +/- pi\n+           eraNut80     nutation, IAU 1980\n+           eraObl80     mean obliquity, IAU 1980\n+\n+        References:\n+\n+           IAU Resolution C7, Recommendation 3 (1994).\n+\n+           Capitaine, N. & Gontier, A.-M., 1993, Astron.Astrophys., 275,\n+           645-650.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.eqeq94(date1, date2)\n+    return c_retval\n+\n+\n+def era00(dj1, dj2):\n+    \"\"\"\n+    Earth rotation angle (IAU 2000 model).\n+\n+    Parameters\n+    ----------\n+    dj1 : double array\n+    dj2 : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEra00``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a E r a 0 0\n+        - - - - - - - - -\n+\n+        Earth rotation angle (IAU 2000 model).\n+\n+        Given:\n+           dj1,dj2   double    UT1 as a 2-part Julian Date (see note)\n+\n+        Returned (function value):\n+                     double    Earth rotation angle (radians), range 0-2pi\n+\n+        Notes:\n+\n+        1) The UT1 date dj1+dj2 is a Julian Date, apportioned in any\n+           convenient way between the arguments dj1 and dj2.  For example,\n+           JD(UT1)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                   dj1            dj2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 and MJD methods are good compromises\n+           between resolution and convenience.  The date & time method is\n+           best matched to the algorithm used:  maximum precision is\n+           delivered when the dj1 argument is for 0hrs UT1 on the day in\n+           question and the dj2 argument lies in the range 0 to 1, or vice\n+           versa.\n+\n+        2) The algorithm is adapted from Expression 22 of Capitaine et al.\n+           2000.  The time argument has been expressed in days directly,\n+           and, to retain precision, integer contributions have been\n+           eliminated.  The same formulation is given in IERS Conventions\n+           (2003), Chap. 5, Eq. 14.\n+\n+        Called:\n+           eraAnp       normalize angle into range 0 to 2pi\n+\n+        References:\n+\n+           Capitaine N., Guinot B. and McCarthy D.D, 2000, Astron.\n+           Astrophys., 355, 398-405.\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.era00(dj1, dj2)\n+    return c_retval\n+\n+\n+def gmst00(uta, utb, tta, ttb):\n+    \"\"\"\n+    Greenwich mean sidereal time (model consistent with IAU 2000\n+    resolutions).\n+\n+    Parameters\n+    ----------\n+    uta : double array\n+    utb : double array\n+    tta : double array\n+    ttb : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraGmst00``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a G m s t 0 0\n+        - - - - - - - - - -\n+\n+        Greenwich mean sidereal time (model consistent with IAU 2000\n+        resolutions).\n+\n+        Given:\n+           uta,utb    double    UT1 as a 2-part Julian Date (Notes 1,2)\n+           tta,ttb    double    TT as a 2-part Julian Date (Notes 1,2)\n+\n+        Returned (function value):\n+                      double    Greenwich mean sidereal time (radians)\n+\n+        Notes:\n+\n+        1) The UT1 and TT dates uta+utb and tta+ttb respectively, are both\n+           Julian Dates, apportioned in any convenient way between the\n+           argument pairs.  For example, JD(UT1)=2450123.7 could be\n+           expressed in any of these ways, among others:\n+\n+                  Part A         Part B\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable (in the case of UT;  the TT is not at all critical\n+           in this respect).  The J2000 and MJD methods are good compromises\n+           between resolution and convenience.  For UT, the date & time\n+           method is best matched to the algorithm that is used by the Earth\n+           Rotation Angle function, called internally:  maximum precision is\n+           delivered when the uta argument is for 0hrs UT1 on the day in\n+           question and the utb argument lies in the range 0 to 1, or vice\n+           versa.\n+\n+        2) Both UT1 and TT are required, UT1 to predict the Earth rotation\n+           and TT to predict the effects of precession.  If UT1 is used for\n+           both purposes, errors of order 100 microarcseconds result.\n+\n+        3) This GMST is compatible with the IAU 2000 resolutions and must be\n+           used only in conjunction with other IAU 2000 compatible\n+           components such as precession-nutation and equation of the\n+           equinoxes.\n+\n+        4) The result is returned in the range 0 to 2pi.\n+\n+        5) The algorithm is from Capitaine et al. (2003) and IERS\n+           Conventions 2003.\n+\n+        Called:\n+           eraEra00     Earth rotation angle, IAU 2000\n+           eraAnp       normalize angle into range 0 to 2pi\n+\n+        References:\n+\n+           Capitaine, N., Wallace, P.T. and McCarthy, D.D., \"Expressions to\n+           implement the IAU 2000 definition of UT1\", Astronomy &\n+           Astrophysics, 406, 1135-1149 (2003)\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.gmst00(uta, utb, tta, ttb)\n+    return c_retval\n+\n+\n+def gmst06(uta, utb, tta, ttb):\n+    \"\"\"\n+    Greenwich mean sidereal time (consistent with IAU 2006 precession).\n+\n+    Parameters\n+    ----------\n+    uta : double array\n+    utb : double array\n+    tta : double array\n+    ttb : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraGmst06``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a G m s t 0 6\n+        - - - - - - - - - -\n+\n+        Greenwich mean sidereal time (consistent with IAU 2006 precession).\n+\n+        Given:\n+           uta,utb    double    UT1 as a 2-part Julian Date (Notes 1,2)\n+           tta,ttb    double    TT as a 2-part Julian Date (Notes 1,2)\n+\n+        Returned (function value):\n+                      double    Greenwich mean sidereal time (radians)\n+\n+        Notes:\n+\n+        1) The UT1 and TT dates uta+utb and tta+ttb respectively, are both\n+           Julian Dates, apportioned in any convenient way between the\n+           argument pairs.  For example, JD=2450123.7 could be expressed in\n+           any of these ways, among others:\n+\n+                  Part A        Part B\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable (in the case of UT;  the TT is not at all critical\n+           in this respect).  The J2000 and MJD methods are good compromises\n+           between resolution and convenience.  For UT, the date & time\n+           method is best matched to the algorithm that is used by the Earth\n+           rotation angle function, called internally:  maximum precision is\n+           delivered when the uta argument is for 0hrs UT1 on the day in\n+           question and the utb argument lies in the range 0 to 1, or vice\n+           versa.\n+\n+        2) Both UT1 and TT are required, UT1 to predict the Earth rotation\n+           and TT to predict the effects of precession.  If UT1 is used for\n+           both purposes, errors of order 100 microarcseconds result.\n+\n+        3) This GMST is compatible with the IAU 2006 precession and must not\n+           be used with other precession models.\n+\n+        4) The result is returned in the range 0 to 2pi.\n+\n+        Called:\n+           eraEra00     Earth rotation angle, IAU 2000\n+           eraAnp       normalize angle into range 0 to 2pi\n+\n+        Reference:\n+\n+           Capitaine, N., Wallace, P.T. & Chapront, J., 2005,\n+           Astron.Astrophys. 432, 355\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.gmst06(uta, utb, tta, ttb)\n+    return c_retval\n+\n+\n+def gmst82(dj1, dj2):\n+    \"\"\"\n+    Universal Time to Greenwich mean sidereal time (IAU 1982 model).\n+\n+    Parameters\n+    ----------\n+    dj1 : double array\n+    dj2 : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraGmst82``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a G m s t 8 2\n+        - - - - - - - - - -\n+\n+        Universal Time to Greenwich mean sidereal time (IAU 1982 model).\n+\n+        Given:\n+           dj1,dj2    double    UT1 Julian Date (see note)\n+\n+        Returned (function value):\n+                      double    Greenwich mean sidereal time (radians)\n+\n+        Notes:\n+\n+        1) The UT1 date dj1+dj2 is a Julian Date, apportioned in any\n+           convenient way between the arguments dj1 and dj2.  For example,\n+           JD(UT1)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                   dj1            dj2\n+\n+               2450123.7          0          (JD method)\n+                2451545        -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5         0.2         (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 and MJD methods are good compromises\n+           between resolution and convenience.  The date & time method is\n+           best matched to the algorithm used:  maximum accuracy (or, at\n+           least, minimum noise) is delivered when the dj1 argument is for\n+           0hrs UT1 on the day in question and the dj2 argument lies in the\n+           range 0 to 1, or vice versa.\n+\n+        2) The algorithm is based on the IAU 1982 expression.  This is\n+           always described as giving the GMST at 0 hours UT1.  In fact, it\n+           gives the difference between the GMST and the UT, the steady\n+           4-minutes-per-day drawing-ahead of ST with respect to UT.  When\n+           whole days are ignored, the expression happens to equal the GMST\n+           at 0 hours UT1 each day.\n+\n+        3) In this function, the entire UT1 (the sum of the two arguments\n+           dj1 and dj2) is used directly as the argument for the standard\n+           formula, the constant term of which is adjusted by 12 hours to\n+           take account of the noon phasing of Julian Date.  The UT1 is then\n+           added, but omitting whole days to conserve accuracy.\n+\n+        Called:\n+           eraAnp       normalize angle into range 0 to 2pi\n+\n+        References:\n+\n+           Transactions of the International Astronomical Union,\n+           XVIII B, 67 (1983).\n+\n+           Aoki et al., Astron.Astrophys., 105, 359-361 (1982).\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.gmst82(dj1, dj2)\n+    return c_retval\n+\n+\n+def gst00a(uta, utb, tta, ttb):\n+    \"\"\"\n+    Greenwich apparent sidereal time (consistent with IAU 2000\n+    resolutions).\n+\n+    Parameters\n+    ----------\n+    uta : double array\n+    utb : double array\n+    tta : double array\n+    ttb : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraGst00a``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a G s t 0 0 a\n+        - - - - - - - - - -\n+\n+        Greenwich apparent sidereal time (consistent with IAU 2000\n+        resolutions).\n+\n+        Given:\n+           uta,utb    double    UT1 as a 2-part Julian Date (Notes 1,2)\n+           tta,ttb    double    TT as a 2-part Julian Date (Notes 1,2)\n+\n+        Returned (function value):\n+                      double    Greenwich apparent sidereal time (radians)\n+\n+        Notes:\n+\n+        1) The UT1 and TT dates uta+utb and tta+ttb respectively, are both\n+           Julian Dates, apportioned in any convenient way between the\n+           argument pairs.  For example, JD(UT1)=2450123.7 could be\n+           expressed in any of these ways, among others:\n+\n+                   uta            utb\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable (in the case of UT;  the TT is not at all critical\n+           in this respect).  The J2000 and MJD methods are good compromises\n+           between resolution and convenience.  For UT, the date & time\n+           method is best matched to the algorithm that is used by the Earth\n+           Rotation Angle function, called internally:  maximum precision is\n+           delivered when the uta argument is for 0hrs UT1 on the day in\n+           question and the utb argument lies in the range 0 to 1, or vice\n+           versa.\n+\n+        2) Both UT1 and TT are required, UT1 to predict the Earth rotation\n+           and TT to predict the effects of precession-nutation.  If UT1 is\n+           used for both purposes, errors of order 100 microarcseconds\n+           result.\n+\n+        3) This GAST is compatible with the IAU 2000 resolutions and must be\n+           used only in conjunction with other IAU 2000 compatible\n+           components such as precession-nutation.\n+\n+        4) The result is returned in the range 0 to 2pi.\n+\n+        5) The algorithm is from Capitaine et al. (2003) and IERS\n+           Conventions 2003.\n+\n+        Called:\n+           eraGmst00    Greenwich mean sidereal time, IAU 2000\n+           eraEe00a     equation of the equinoxes, IAU 2000A\n+           eraAnp       normalize angle into range 0 to 2pi\n+\n+        References:\n+\n+           Capitaine, N., Wallace, P.T. and McCarthy, D.D., \"Expressions to\n+           implement the IAU 2000 definition of UT1\", Astronomy &\n+           Astrophysics, 406, 1135-1149 (2003)\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.gst00a(uta, utb, tta, ttb)\n+    return c_retval\n+\n+\n+def gst00b(uta, utb):\n+    \"\"\"\n+    Greenwich apparent sidereal time (consistent with IAU 2000\n+    resolutions but using the truncated nutation model IAU 2000B).\n+\n+    Parameters\n+    ----------\n+    uta : double array\n+    utb : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraGst00b``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a G s t 0 0 b\n+        - - - - - - - - - -\n+\n+        Greenwich apparent sidereal time (consistent with IAU 2000\n+        resolutions but using the truncated nutation model IAU 2000B).\n+\n+        Given:\n+           uta,utb    double    UT1 as a 2-part Julian Date (Notes 1,2)\n+\n+        Returned (function value):\n+                      double    Greenwich apparent sidereal time (radians)\n+\n+        Notes:\n+\n+        1) The UT1 date uta+utb is a Julian Date, apportioned in any\n+           convenient way between the argument pair.  For example,\n+           JD(UT1)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                   uta            utb\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 and MJD methods are good compromises\n+           between resolution and convenience.  For UT, the date & time\n+           method is best matched to the algorithm that is used by the Earth\n+           Rotation Angle function, called internally:  maximum precision is\n+           delivered when the uta argument is for 0hrs UT1 on the day in\n+           question and the utb argument lies in the range 0 to 1, or vice\n+           versa.\n+\n+        2) The result is compatible with the IAU 2000 resolutions, except\n+           that accuracy has been compromised for the sake of speed and\n+           convenience in two respects:\n+\n+           . UT is used instead of TDB (or TT) to compute the precession\n+             component of GMST and the equation of the equinoxes.  This\n+             results in errors of order 0.1 mas at present.\n+\n+           . The IAU 2000B abridged nutation model (McCarthy & Luzum, 2003)\n+             is used, introducing errors of up to 1 mas.\n+\n+        3) This GAST is compatible with the IAU 2000 resolutions and must be\n+           used only in conjunction with other IAU 2000 compatible\n+           components such as precession-nutation.\n+\n+        4) The result is returned in the range 0 to 2pi.\n+\n+        5) The algorithm is from Capitaine et al. (2003) and IERS\n+           Conventions 2003.\n+\n+        Called:\n+           eraGmst00    Greenwich mean sidereal time, IAU 2000\n+           eraEe00b     equation of the equinoxes, IAU 2000B\n+           eraAnp       normalize angle into range 0 to 2pi\n+\n+        References:\n+\n+           Capitaine, N., Wallace, P.T. and McCarthy, D.D., \"Expressions to\n+           implement the IAU 2000 definition of UT1\", Astronomy &\n+           Astrophysics, 406, 1135-1149 (2003)\n+\n+           McCarthy, D.D. & Luzum, B.J., \"An abridged model of the\n+           precession-nutation of the celestial pole\", Celestial Mechanics &\n+           Dynamical Astronomy, 85, 37-49 (2003)\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.gst00b(uta, utb)\n+    return c_retval\n+\n+\n+def gst06(uta, utb, tta, ttb, rnpb):\n+    \"\"\"\n+    Greenwich apparent sidereal time, IAU 2006, given the NPB matrix.\n+\n+    Parameters\n+    ----------\n+    uta : double array\n+    utb : double array\n+    tta : double array\n+    ttb : double array\n+    rnpb : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraGst06``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a G s t 0 6\n+        - - - - - - - - -\n+\n+        Greenwich apparent sidereal time, IAU 2006, given the NPB matrix.\n+\n+        Given:\n+           uta,utb  double        UT1 as a 2-part Julian Date (Notes 1,2)\n+           tta,ttb  double        TT as a 2-part Julian Date (Notes 1,2)\n+           rnpb     double[3][3]  nutation x precession x bias matrix\n+\n+        Returned (function value):\n+                    double        Greenwich apparent sidereal time (radians)\n+\n+        Notes:\n+\n+        1) The UT1 and TT dates uta+utb and tta+ttb respectively, are both\n+           Julian Dates, apportioned in any convenient way between the\n+           argument pairs.  For example, JD(UT1)=2450123.7 could be\n+           expressed in any of these ways, among others:\n+\n+                   uta            utb\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable (in the case of UT;  the TT is not at all critical\n+           in this respect).  The J2000 and MJD methods are good compromises\n+           between resolution and convenience.  For UT, the date & time\n+           method is best matched to the algorithm that is used by the Earth\n+           rotation angle function, called internally:  maximum precision is\n+           delivered when the uta argument is for 0hrs UT1 on the day in\n+           question and the utb argument lies in the range 0 to 1, or vice\n+           versa.\n+\n+        2) Both UT1 and TT are required, UT1 to predict the Earth rotation\n+           and TT to predict the effects of precession-nutation.  If UT1 is\n+           used for both purposes, errors of order 100 microarcseconds\n+           result.\n+\n+        3) Although the function uses the IAU 2006 series for s+XY/2, it is\n+           otherwise independent of the precession-nutation model and can in\n+           practice be used with any equinox-based NPB matrix.\n+\n+        4) The result is returned in the range 0 to 2pi.\n+\n+        Called:\n+           eraBpn2xy    extract CIP X,Y coordinates from NPB matrix\n+           eraS06       the CIO locator s, given X,Y, IAU 2006\n+           eraAnp       normalize angle into range 0 to 2pi\n+           eraEra00     Earth rotation angle, IAU 2000\n+           eraEors      equation of the origins, given NPB matrix and s\n+\n+        Reference:\n+\n+           Wallace, P.T. & Capitaine, N., 2006, Astron.Astrophys. 459, 981\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.gst06(uta, utb, tta, ttb, rnpb)\n+    return c_retval\n+\n+\n+def gst06a(uta, utb, tta, ttb):\n+    \"\"\"\n+    Greenwich apparent sidereal time (consistent with IAU 2000 and 2006\n+    resolutions).\n+\n+    Parameters\n+    ----------\n+    uta : double array\n+    utb : double array\n+    tta : double array\n+    ttb : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraGst06a``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a G s t 0 6 a\n+        - - - - - - - - - -\n+\n+        Greenwich apparent sidereal time (consistent with IAU 2000 and 2006\n+        resolutions).\n+\n+        Given:\n+           uta,utb    double    UT1 as a 2-part Julian Date (Notes 1,2)\n+           tta,ttb    double    TT as a 2-part Julian Date (Notes 1,2)\n+\n+        Returned (function value):\n+                      double    Greenwich apparent sidereal time (radians)\n+\n+        Notes:\n+\n+        1) The UT1 and TT dates uta+utb and tta+ttb respectively, are both\n+           Julian Dates, apportioned in any convenient way between the\n+           argument pairs.  For example, JD(UT1)=2450123.7 could be\n+           expressed in any of these ways, among others:\n+\n+                   uta            utb\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable (in the case of UT;  the TT is not at all critical\n+           in this respect).  The J2000 and MJD methods are good compromises\n+           between resolution and convenience.  For UT, the date & time\n+           method is best matched to the algorithm that is used by the Earth\n+           rotation angle function, called internally:  maximum precision is\n+           delivered when the uta argument is for 0hrs UT1 on the day in\n+           question and the utb argument lies in the range 0 to 1, or vice\n+           versa.\n+\n+        2) Both UT1 and TT are required, UT1 to predict the Earth rotation\n+           and TT to predict the effects of precession-nutation.  If UT1 is\n+           used for both purposes, errors of order 100 microarcseconds\n+           result.\n+\n+        3) This GAST is compatible with the IAU 2000/2006 resolutions and\n+           must be used only in conjunction with IAU 2006 precession and\n+           IAU 2000A nutation.\n+\n+        4) The result is returned in the range 0 to 2pi.\n+\n+        Called:\n+           eraPnm06a    classical NPB matrix, IAU 2006/2000A\n+           eraGst06     Greenwich apparent ST, IAU 2006, given NPB matrix\n+\n+        Reference:\n+\n+           Wallace, P.T. & Capitaine, N., 2006, Astron.Astrophys. 459, 981\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.gst06a(uta, utb, tta, ttb)\n+    return c_retval\n+\n+\n+def gst94(uta, utb):\n+    \"\"\"\n+    Greenwich apparent sidereal time (consistent with IAU 1982/94\n+    resolutions).\n+\n+    Parameters\n+    ----------\n+    uta : double array\n+    utb : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraGst94``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a G s t 9 4\n+        - - - - - - - - -\n+\n+        Greenwich apparent sidereal time (consistent with IAU 1982/94\n+        resolutions).\n+\n+        Given:\n+           uta,utb    double    UT1 as a 2-part Julian Date (Notes 1,2)\n+\n+        Returned (function value):\n+                      double    Greenwich apparent sidereal time (radians)\n+\n+        Notes:\n+\n+        1) The UT1 date uta+utb is a Julian Date, apportioned in any\n+           convenient way between the argument pair.  For example,\n+           JD(UT1)=2450123.7 could be expressed in any of these ways, among\n+           others:\n+\n+                   uta            utb\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 and MJD methods are good compromises\n+           between resolution and convenience.  For UT, the date & time\n+           method is best matched to the algorithm that is used by the Earth\n+           Rotation Angle function, called internally:  maximum precision is\n+           delivered when the uta argument is for 0hrs UT1 on the day in\n+           question and the utb argument lies in the range 0 to 1, or vice\n+           versa.\n+\n+        2) The result is compatible with the IAU 1982 and 1994 resolutions,\n+           except that accuracy has been compromised for the sake of\n+           convenience in that UT is used instead of TDB (or TT) to compute\n+           the equation of the equinoxes.\n+\n+        3) This GAST must be used only in conjunction with contemporaneous\n+           IAU standards such as 1976 precession, 1980 obliquity and 1982\n+           nutation.  It is not compatible with the IAU 2000 resolutions.\n+\n+        4) The result is returned in the range 0 to 2pi.\n+\n+        Called:\n+           eraGmst82    Greenwich mean sidereal time, IAU 1982\n+           eraEqeq94    equation of the equinoxes, IAU 1994\n+           eraAnp       normalize angle into range 0 to 2pi\n+\n+        References:\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992)\n+\n+           IAU Resolution C7, Recommendation 3 (1994)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.gst94(uta, utb)\n+    return c_retval\n+\n+\n+def pvstar(pv):\n+    \"\"\"\n+    Convert star position+velocity vector to catalog coordinates.\n+\n+    Parameters\n+    ----------\n+    pv : double array\n+\n+    Returns\n+    -------\n+    ra : double array\n+    dec : double array\n+    pmr : double array\n+    pmd : double array\n+    px : double array\n+    rv : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPvstar``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a P v s t a r\n+        - - - - - - - - - -\n+\n+        Convert star position+velocity vector to catalog coordinates.\n+\n+        Given (Note 1):\n+           pv     double[2][3]   pv-vector (au, au/day)\n+\n+        Returned (Note 2):\n+           ra     double         right ascension (radians)\n+           dec    double         declination (radians)\n+           pmr    double         RA proper motion (radians/year)\n+           pmd    double         Dec proper motion (radians/year)\n+           px     double         parallax (arcsec)\n+           rv     double         radial velocity (km/s, positive = receding)\n+\n+        Returned (function value):\n+                  int            status:\n+                                    0 = OK\n+                                   -1 = superluminal speed (Note 5)\n+                                   -2 = null position vector\n+\n+        Notes:\n+\n+        1) The specified pv-vector is the coordinate direction (and its rate\n+           of change) for the date at which the light leaving the star\n+           reached the solar-system barycenter.\n+\n+        2) The star data returned by this function are \"observables\" for an\n+           imaginary observer at the solar-system barycenter.  Proper motion\n+           and radial velocity are, strictly, in terms of barycentric\n+           coordinate time, TCB.  For most practical applications, it is\n+           permissible to neglect the distinction between TCB and ordinary\n+           \"proper\" time on Earth (TT/TAI).  The result will, as a rule, be\n+           limited by the intrinsic accuracy of the proper-motion and\n+           radial-velocity data;  moreover, the supplied pv-vector is likely\n+           to be merely an intermediate result (for example generated by the\n+           function eraStarpv), so that a change of time unit will cancel\n+           out overall.\n+\n+           In accordance with normal star-catalog conventions, the object's\n+           right ascension and declination are freed from the effects of\n+           secular aberration.  The frame, which is aligned to the catalog\n+           equator and equinox, is Lorentzian and centered on the SSB.\n+\n+           Summarizing, the specified pv-vector is for most stars almost\n+           identical to the result of applying the standard geometrical\n+           \"space motion\" transformation to the catalog data.  The\n+           differences, which are the subject of the Stumpff paper cited\n+           below, are:\n+\n+           (i) In stars with significant radial velocity and proper motion,\n+           the constantly changing light-time distorts the apparent proper\n+           motion.  Note that this is a classical, not a relativistic,\n+           effect.\n+\n+           (ii) The transformation complies with special relativity.\n+\n+        3) Care is needed with units.  The star coordinates are in radians\n+           and the proper motions in radians per Julian year, but the\n+           parallax is in arcseconds; the radial velocity is in km/s, but\n+           the pv-vector result is in au and au/day.\n+\n+        4) The proper motions are the rate of change of the right ascension\n+           and declination at the catalog epoch and are in radians per Julian\n+           year.  The RA proper motion is in terms of coordinate angle, not\n+           true angle, and will thus be numerically larger at high\n+           declinations.\n+\n+        5) Straight-line motion at constant speed in the inertial frame is\n+           assumed.  If the speed is greater than or equal to the speed of\n+           light, the function aborts with an error status.\n+\n+        6) The inverse transformation is performed by the function eraStarpv.\n+\n+        Called:\n+           eraPn        decompose p-vector into modulus and direction\n+           eraPdp       scalar product of two p-vectors\n+           eraSxp       multiply p-vector by scalar\n+           eraPmp       p-vector minus p-vector\n+           eraPm        modulus of p-vector\n+           eraPpp       p-vector plus p-vector\n+           eraPv2s      pv-vector to spherical\n+           eraAnp       normalize angle into range 0 to 2pi\n+\n+        Reference:\n+\n+           Stumpff, P., 1985, Astron.Astrophys. 144, 232-240.\n+\n+        This revision:  2023 May 4\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    ra, dec, pmr, pmd, px, rv, c_retval = ufunc.pvstar(pv)\n+    check_errwarn(c_retval, 'pvstar')\n+    return ra, dec, pmr, pmd, px, rv\n+\n+\n+STATUS_CODES['pvstar'] = {\n+    0: 'OK',\n+    -1: 'superluminal speed (Note 5)',\n+    -2: 'null position vector',\n+}\n+\n+\n+def starpv(ra, dec, pmr, pmd, px, rv):\n+    \"\"\"\n+    Convert star catalog coordinates to position+velocity vector.\n+\n+    Parameters\n+    ----------\n+    ra : double array\n+    dec : double array\n+    pmr : double array\n+    pmd : double array\n+    px : double array\n+    rv : double array\n+\n+    Returns\n+    -------\n+    pv : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraStarpv``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a S t a r p v\n+        - - - - - - - - - -\n+\n+        Convert star catalog coordinates to position+velocity vector.\n+\n+        Given (Note 1):\n+           ra     double        right ascension (radians)\n+           dec    double        declination (radians)\n+           pmr    double        RA proper motion (radians/year)\n+           pmd    double        Dec proper motion (radians/year)\n+           px     double        parallax (arcseconds)\n+           rv     double        radial velocity (km/s, positive = receding)\n+\n+        Returned (Note 2):\n+           pv     double[2][3]  pv-vector (au, au/day)\n+\n+        Returned (function value):\n+                  int           status:\n+                                    0 = no warnings\n+                                    1 = distance overridden (Note 6)\n+                                    2 = excessive speed (Note 7)\n+                                    4 = solution didn't converge (Note 8)\n+                                 else = binary logical OR of the above\n+\n+        Notes:\n+\n+        1) The star data accepted by this function are \"observables\" for an\n+           imaginary observer at the solar-system barycenter.  Proper motion\n+           and radial velocity are, strictly, in terms of barycentric\n+           coordinate time, TCB.  For most practical applications, it is\n+           permissible to neglect the distinction between TCB and ordinary\n+           \"proper\" time on Earth (TT/TAI).  The result will, as a rule, be\n+           limited by the intrinsic accuracy of the proper-motion and\n+           radial-velocity data;  moreover, the pv-vector is likely to be\n+           merely an intermediate result, so that a change of time unit\n+           would cancel out overall.\n+\n+           In accordance with normal star-catalog conventions, the object's\n+           right ascension and declination are freed from the effects of\n+           secular aberration.  The frame, which is aligned to the catalog\n+           equator and equinox, is Lorentzian and centered on the SSB.\n+\n+        2) The resulting position and velocity pv-vector is with respect to\n+           the same frame and, like the catalog coordinates, is freed from\n+           the effects of secular aberration.  Should the \"coordinate\n+           direction\", where the object was located at the catalog epoch, be\n+           required, it may be obtained by calculating the magnitude of the\n+           position vector pv[0][0-2] dividing by the speed of light in\n+           au/day to give the light-time, and then multiplying the space\n+           velocity pv[1][0-2] by this light-time and adding the result to\n+           pv[0][0-2].\n+\n+           Summarizing, the pv-vector returned is for most stars almost\n+           identical to the result of applying the standard geometrical\n+           \"space motion\" transformation.  The differences, which are the\n+           subject of the Stumpff paper referenced below, are:\n+\n+           (i) In stars with significant radial velocity and proper motion,\n+           the constantly changing light-time distorts the apparent proper\n+           motion.  Note that this is a classical, not a relativistic,\n+           effect.\n+\n+           (ii) The transformation complies with special relativity.\n+\n+        3) Care is needed with units.  The star coordinates are in radians\n+           and the proper motions in radians per Julian year, but the\n+           parallax is in arcseconds; the radial velocity is in km/s, but\n+           the pv-vector result is in au and au/day.\n+\n+        4) The RA proper motion is in terms of coordinate angle, not true\n+           angle.  If the catalog uses arcseconds for both RA and Dec proper\n+           motions, the RA proper motion will need to be divided by cos(Dec)\n+           before use.\n+\n+        5) Straight-line motion at constant speed, in the inertial frame,\n+           is assumed.\n+\n+        6) An extremely small (or zero or negative) parallax is interpreted\n+           to mean that the object is on the \"celestial sphere\", the radius\n+           of which is an arbitrary (large) value (see the constant PXMIN).\n+           When the distance is overridden in this way, the status,\n+           initially zero, has 1 added to it.\n+\n+        7) If the space velocity is a significant fraction of c (see the\n+           constant VMAX), it is arbitrarily set to zero.  When this action\n+           occurs, 2 is added to the status.\n+\n+        8) The relativistic adjustment involves an iterative calculation.\n+           If the process fails to converge within a set number (IMAX) of\n+           iterations, 4 is added to the status.\n+\n+        9) The inverse transformation is performed by the function\n+           eraPvstar.\n+\n+        Called:\n+           eraS2pv      spherical coordinates to pv-vector\n+           eraPm        modulus of p-vector\n+           eraZp        zero p-vector\n+           eraPn        decompose p-vector into modulus and direction\n+           eraPdp       scalar product of two p-vectors\n+           eraSxp       multiply p-vector by scalar\n+           eraPmp       p-vector minus p-vector\n+           eraPpp       p-vector plus p-vector\n+\n+        Reference:\n+\n+           Stumpff, P., 1985, Astron.Astrophys. 144, 232-240.\n+\n+        This revision:  2023 May 4\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    pv, c_retval = ufunc.starpv(ra, dec, pmr, pmd, px, rv)\n+    check_errwarn(c_retval, 'starpv')\n+    return pv\n+\n+\n+STATUS_CODES['starpv'] = {\n+    0: 'no warnings',\n+    1: 'distance overridden (Note 6)',\n+    2: 'excessive speed (Note 7)',\n+    4: \"solution didn't converge (Note 8)\",\n+    'else': 'binary logical OR of the above',\n+}\n+\n+\n+def fk425(r1950, d1950, dr1950, dd1950, p1950, v1950):\n+    \"\"\"\n+    Convert B1950.0 FK4 star catalog data to J2000.0 FK5.\n+\n+    Parameters\n+    ----------\n+    r1950 : double array\n+    d1950 : double array\n+    dr1950 : double array\n+    dd1950 : double array\n+    p1950 : double array\n+    v1950 : double array\n+\n+    Returns\n+    -------\n+    r2000 : double array\n+    d2000 : double array\n+    dr2000 : double array\n+    dd2000 : double array\n+    p2000 : double array\n+    v2000 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFk425``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a F k 4 2 5\n+        - - - - - - - - -\n+\n+        Convert B1950.0 FK4 star catalog data to J2000.0 FK5.\n+\n+        This function converts a star's catalog data from the old FK4\n+        (Bessel-Newcomb) system to the later IAU 1976 FK5 (Fricke) system.\n+\n+        Given: (all B1950.0, FK4)\n+           r1950,d1950    double   B1950.0 RA,Dec (rad)\n+           dr1950,dd1950  double   B1950.0 proper motions (rad/trop.yr)\n+           p1950          double   parallax (arcsec)\n+           v1950          double   radial velocity (km/s, +ve = moving away)\n+\n+        Returned: (all J2000.0, FK5)\n+           r2000,d2000    double   J2000.0 RA,Dec (rad)\n+           dr2000,dd2000  double   J2000.0 proper motions (rad/Jul.yr)\n+           p2000          double   parallax (arcsec)\n+           v2000          double   radial velocity (km/s, +ve = moving away)\n+\n+        Notes:\n+\n+        1) The proper motions in RA are dRA/dt rather than cos(Dec)*dRA/dt,\n+           and are per year rather than per century.\n+\n+        2) The conversion is somewhat complicated, for several reasons:\n+\n+           . Change of standard epoch from B1950.0 to J2000.0.\n+\n+           . An intermediate transition date of 1984 January 1.0 TT.\n+\n+           . A change of precession model.\n+\n+           . Change of time unit for proper motion (tropical to Julian).\n+\n+           . FK4 positions include the E-terms of aberration, to simplify\n+             the hand computation of annual aberration.  FK5 positions\n+             assume a rigorous aberration computation based on the Earth's\n+             barycentric velocity.\n+\n+           . The E-terms also affect proper motions, and in particular cause\n+             objects at large distances to exhibit fictitious proper\n+             motions.\n+\n+           The algorithm is based on Smith et al. (1989) and Yallop et al.\n+           (1989), which presented a matrix method due to Standish (1982) as\n+           developed by Aoki et al. (1983), using Kinoshita's development of\n+           Andoyer's post-Newcomb precession.  The numerical constants from\n+           Seidelmann (1992) are used canonically.\n+\n+        3) Conversion from B1950.0 FK4 to J2000.0 FK5 only is provided for.\n+           Conversions for different epochs and equinoxes would require\n+           additional treatment for precession, proper motion and E-terms.\n+\n+        4) In the FK4 catalog the proper motions of stars within 10 degrees\n+           of the poles do not embody differential E-terms effects and\n+           should, strictly speaking, be handled in a different manner from\n+           stars outside these regions.  However, given the general lack of\n+           homogeneity of the star data available for routine astrometry,\n+           the difficulties of handling positions that may have been\n+           determined from astrometric fields spanning the polar and non-\n+           polar regions, the likelihood that the differential E-terms\n+           effect was not taken into account when allowing for proper motion\n+           in past astrometry, and the undesirability of a discontinuity in\n+           the algorithm, the decision has been made in this ERFA algorithm\n+           to include the effects of differential E-terms on the proper\n+           motions for all stars, whether polar or not.  At epoch J2000.0,\n+           and measuring \"on the sky\" rather than in terms of RA change, the\n+           errors resulting from this simplification are less than\n+           1 milliarcsecond in position and 1 milliarcsecond per century in\n+           proper motion.\n+\n+        Called:\n+           eraAnp       normalize angle into range 0 to 2pi\n+           eraPv2s      pv-vector to spherical coordinates\n+           eraPdp       scalar product of two p-vectors\n+           eraPvmpv     pv-vector minus pv_vector\n+           eraPvppv     pv-vector plus pv_vector\n+           eraS2pv      spherical coordinates to pv-vector\n+           eraSxp       multiply p-vector by scalar\n+\n+        References:\n+\n+           Aoki, S. et al., 1983, \"Conversion matrix of epoch B1950.0\n+           FK4-based positions of stars to epoch J2000.0 positions in\n+           accordance with the new IAU resolutions\".  Astron.Astrophys.\n+           128, 263-267.\n+\n+           Seidelmann, P.K. (ed), 1992, \"Explanatory Supplement to the\n+           Astronomical Almanac\", ISBN 0-935702-68-7.\n+\n+           Smith, C.A. et al., 1989, \"The transformation of astrometric\n+           catalog systems to the equinox J2000.0\".  Astron.J. 97, 265.\n+\n+           Standish, E.M., 1982, \"Conversion of positions and proper motions\n+           from B1950.0 to the IAU system at J2000.0\".  Astron.Astrophys.,\n+           115, 1, 20-22.\n+\n+           Yallop, B.D. et al., 1989, \"Transformation of mean star places\n+           from FK4 B1950.0 to FK5 J2000.0 using matrices in 6-space\".\n+           Astron.J. 97, 274.\n+\n+        This revision:   2023 March 20\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    r2000, d2000, dr2000, dd2000, p2000, v2000 = ufunc.fk425(\n+        r1950, d1950, dr1950, dd1950, p1950, v1950)\n+    return r2000, d2000, dr2000, dd2000, p2000, v2000\n+\n+\n+def fk45z(r1950, d1950, bepoch):\n+    \"\"\"\n+    Convert a B1950.0 FK4 star position to J2000.0 FK5, assuming zero\n+    proper motion in the FK5 system.\n+\n+    Parameters\n+    ----------\n+    r1950 : double array\n+    d1950 : double array\n+    bepoch : double array\n+\n+    Returns\n+    -------\n+    r2000 : double array\n+    d2000 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFk45z``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a F k 4 5 z\n+        - - - - - - - - -\n+\n+        Convert a B1950.0 FK4 star position to J2000.0 FK5, assuming zero\n+        proper motion in the FK5 system.\n+\n+        This function converts a star's catalog data from the old FK4\n+        (Bessel-Newcomb) system to the later IAU 1976 FK5 (Fricke) system,\n+        in such a way that the FK5 proper motion is zero.  Because such a\n+        star has, in general, a non-zero proper motion in the FK4 system,\n+        the function requires the epoch at which the position in the FK4\n+        system was determined.\n+\n+        Given:\n+           r1950,d1950    double   B1950.0 FK4 RA,Dec at epoch (rad)\n+           bepoch         double   Besselian epoch (e.g. 1979.3)\n+\n+        Returned:\n+           r2000,d2000    double   J2000.0 FK5 RA,Dec (rad)\n+\n+        Notes:\n+\n+        1) The epoch bepoch is strictly speaking Besselian, but if a\n+           Julian epoch is supplied the result will be affected only to a\n+           negligible extent.\n+\n+        2) The method is from Appendix 2 of Aoki et al. (1983), but using\n+           the constants of Seidelmann (1992).  See the function eraFk425\n+           for a general introduction to the FK4 to FK5 conversion.\n+\n+        3) Conversion from equinox B1950.0 FK4 to equinox J2000.0 FK5 only\n+           is provided for.  Conversions for different starting and/or\n+           ending epochs would require additional treatment for precession,\n+           proper motion and E-terms.\n+\n+        4) In the FK4 catalog the proper motions of stars within 10 degrees\n+           of the poles do not embody differential E-terms effects and\n+           should, strictly speaking, be handled in a different manner from\n+           stars outside these regions.  However, given the general lack of\n+           homogeneity of the star data available for routine astrometry,\n+           the difficulties of handling positions that may have been\n+           determined from astrometric fields spanning the polar and non-\n+           polar regions, the likelihood that the differential E-terms\n+           effect was not taken into account when allowing for proper motion\n+           in past astrometry, and the undesirability of a discontinuity in\n+           the algorithm, the decision has been made in this ERFA algorithm\n+           to include the effects of differential E-terms on the proper\n+           motions for all stars, whether polar or not.  At epoch J2000.0,\n+           and measuring \"on the sky\" rather than in terms of RA change, the\n+           errors resulting from this simplification are less than\n+           1 milliarcsecond in position and 1 milliarcsecond per century in\n+           proper motion.\n+\n+        References:\n+\n+           Aoki, S. et al., 1983, \"Conversion matrix of epoch B1950.0\n+           FK4-based positions of stars to epoch J2000.0 positions in\n+           accordance with the new IAU resolutions\".  Astron.Astrophys.\n+           128, 263-267.\n+\n+           Seidelmann, P.K. (ed), 1992, \"Explanatory Supplement to the\n+           Astronomical Almanac\", ISBN 0-935702-68-7.\n+\n+        Called:\n+           eraAnp       normalize angle into range 0 to 2pi\n+           eraC2s       p-vector to spherical\n+           eraEpb2jd    Besselian epoch to Julian date\n+           eraEpj       Julian date to Julian epoch\n+           eraPdp       scalar product of two p-vectors\n+           eraPmp       p-vector minus p-vector\n+           eraPpsp      p-vector plus scaled p-vector\n+           eraPvu       update a pv-vector\n+           eraS2c       spherical to p-vector\n+\n+        This revision:   2023 March 4\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    r2000, d2000 = ufunc.fk45z(r1950, d1950, bepoch)\n+    return r2000, d2000\n+\n+\n+def fk524(r2000, d2000, dr2000, dd2000, p2000, v2000):\n+    \"\"\"\n+    Convert J2000.0 FK5 star catalog data to B1950.0 FK4.\n+\n+    Parameters\n+    ----------\n+    r2000 : double array\n+    d2000 : double array\n+    dr2000 : double array\n+    dd2000 : double array\n+    p2000 : double array\n+    v2000 : double array\n+\n+    Returns\n+    -------\n+    r1950 : double array\n+    d1950 : double array\n+    dr1950 : double array\n+    dd1950 : double array\n+    p1950 : double array\n+    v1950 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFk524``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a F k 5 2 4\n+        - - - - - - - - -\n+\n+        Convert J2000.0 FK5 star catalog data to B1950.0 FK4.\n+\n+        Given: (all J2000.0, FK5)\n+           r2000,d2000    double   J2000.0 RA,Dec (rad)\n+           dr2000,dd2000  double   J2000.0 proper motions (rad/Jul.yr)\n+           p2000          double   parallax (arcsec)\n+           v2000          double   radial velocity (km/s, +ve = moving away)\n+\n+        Returned: (all B1950.0, FK4)\n+           r1950,d1950    double   B1950.0 RA,Dec (rad)\n+           dr1950,dd1950  double   B1950.0 proper motions (rad/trop.yr)\n+           p1950          double   parallax (arcsec)\n+           v1950          double   radial velocity (km/s, +ve = moving away)\n+\n+        Notes:\n+\n+        1) The proper motions in RA are dRA/dt rather than cos(Dec)*dRA/dt,\n+           and are per year rather than per century.\n+\n+        2) The conversion is somewhat complicated, for several reasons:\n+\n+           . Change of standard epoch from J2000.0 to B1950.0.\n+\n+           . An intermediate transition date of 1984 January 1.0 TT.\n+\n+           . A change of precession model.\n+\n+           . Change of time unit for proper motion (Julian to tropical).\n+\n+           . FK4 positions include the E-terms of aberration, to simplify\n+             the hand computation of annual aberration.  FK5 positions\n+             assume a rigorous aberration computation based on the Earth's\n+             barycentric velocity.\n+\n+           . The E-terms also affect proper motions, and in particular cause\n+             objects at large distances to exhibit fictitious proper\n+             motions.\n+\n+           The algorithm is based on Smith et al. (1989) and Yallop et al.\n+           (1989), which presented a matrix method due to Standish (1982) as\n+           developed by Aoki et al. (1983), using Kinoshita's development of\n+           Andoyer's post-Newcomb precession.  The numerical constants from\n+           Seidelmann (1992) are used canonically.\n+\n+        4) In the FK4 catalog the proper motions of stars within 10 degrees\n+           of the poles do not embody differential E-terms effects and\n+           should, strictly speaking, be handled in a different manner from\n+           stars outside these regions.  However, given the general lack of\n+           homogeneity of the star data available for routine astrometry,\n+           the difficulties of handling positions that may have been\n+           determined from astrometric fields spanning the polar and non-\n+           polar regions, the likelihood that the differential E-terms\n+           effect was not taken into account when allowing for proper motion\n+           in past astrometry, and the undesirability of a discontinuity in\n+           the algorithm, the decision has been made in this ERFA algorithm\n+           to include the effects of differential E-terms on the proper\n+           motions for all stars, whether polar or not.  At epoch J2000.0,\n+           and measuring \"on the sky\" rather than in terms of RA change, the\n+           errors resulting from this simplification are less than\n+           1 milliarcsecond in position and 1 milliarcsecond per century in\n+           proper motion.\n+\n+        Called:\n+           eraAnp       normalize angle into range 0 to 2pi\n+           eraPdp       scalar product of two p-vectors\n+           eraPm        modulus of p-vector\n+           eraPmp       p-vector minus p-vector\n+           eraPpp       p-vector pluus p-vector\n+           eraPv2s      pv-vector to spherical coordinates\n+           eraS2pv      spherical coordinates to pv-vector\n+           eraSxp       multiply p-vector by scalar\n+\n+        References:\n+\n+           Aoki, S. et al., 1983, \"Conversion matrix of epoch B1950.0\n+           FK4-based positions of stars to epoch J2000.0 positions in\n+           accordance with the new IAU resolutions\".  Astron.Astrophys.\n+           128, 263-267.\n+\n+           Seidelmann, P.K. (ed), 1992, \"Explanatory Supplement to the\n+           Astronomical Almanac\", ISBN 0-935702-68-7.\n+\n+           Smith, C.A. et al., 1989, \"The transformation of astrometric\n+           catalog systems to the equinox J2000.0\".  Astron.J. 97, 265.\n+\n+           Standish, E.M., 1982, \"Conversion of positions and proper motions\n+           from B1950.0 to the IAU system at J2000.0\".  Astron.Astrophys.,\n+           115, 1, 20-22.\n+\n+           Yallop, B.D. et al., 1989, \"Transformation of mean star places\n+           from FK4 B1950.0 to FK5 J2000.0 using matrices in 6-space\".\n+           Astron.J. 97, 274.\n+\n+        This revision:   2023 March 20\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    r1950, d1950, dr1950, dd1950, p1950, v1950 = ufunc.fk524(\n+        r2000, d2000, dr2000, dd2000, p2000, v2000)\n+    return r1950, d1950, dr1950, dd1950, p1950, v1950\n+\n+\n+def fk52h(r5, d5, dr5, dd5, px5, rv5):\n+    \"\"\"\n+    Transform FK5 (J2000.0) star data into the Hipparcos system.\n+\n+    Parameters\n+    ----------\n+    r5 : double array\n+    d5 : double array\n+    dr5 : double array\n+    dd5 : double array\n+    px5 : double array\n+    rv5 : double array\n+\n+    Returns\n+    -------\n+    rh : double array\n+    dh : double array\n+    drh : double array\n+    ddh : double array\n+    pxh : double array\n+    rvh : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFk52h``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a F k 5 2 h\n+        - - - - - - - - -\n+\n+        Transform FK5 (J2000.0) star data into the Hipparcos system.\n+\n+        Given (all FK5, equinox J2000.0, epoch J2000.0):\n+           r5      double    RA (radians)\n+           d5      double    Dec (radians)\n+           dr5     double    proper motion in RA (dRA/dt, rad/Jyear)\n+           dd5     double    proper motion in Dec (dDec/dt, rad/Jyear)\n+           px5     double    parallax (arcsec)\n+           rv5     double    radial velocity (km/s, positive = receding)\n+\n+        Returned (all Hipparcos, epoch J2000.0):\n+           rh      double    RA (radians)\n+           dh      double    Dec (radians)\n+           drh     double    proper motion in RA (dRA/dt, rad/Jyear)\n+           ddh     double    proper motion in Dec (dDec/dt, rad/Jyear)\n+           pxh     double    parallax (arcsec)\n+           rvh     double    radial velocity (km/s, positive = receding)\n+\n+        Notes:\n+\n+        1) This function transforms FK5 star positions and proper motions\n+           into the system of the Hipparcos catalog.\n+\n+        2) The proper motions in RA are dRA/dt rather than\n+           cos(Dec)*dRA/dt, and are per year rather than per century.\n+\n+        3) The FK5 to Hipparcos transformation is modeled as a pure\n+           rotation and spin;  zonal errors in the FK5 catalog are not\n+           taken into account.\n+\n+        4) See also eraH2fk5, eraFk5hz, eraHfk5z.\n+\n+        Called:\n+           eraStarpv    star catalog data to space motion pv-vector\n+           eraFk5hip    FK5 to Hipparcos rotation and spin\n+           eraRxp       product of r-matrix and p-vector\n+           eraPxp       vector product of two p-vectors\n+           eraPpp       p-vector plus p-vector\n+           eraPvstar    space motion pv-vector to star catalog data\n+\n+        Reference:\n+\n+           F.Mignard & M.Froeschle, Astron.Astrophys., 354, 732-739 (2000).\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rh, dh, drh, ddh, pxh, rvh = ufunc.fk52h(r5, d5, dr5, dd5, px5, rv5)\n+    return rh, dh, drh, ddh, pxh, rvh\n+\n+\n+def fk54z(r2000, d2000, bepoch):\n+    \"\"\"\n+    Convert a J2000.0 FK5 star position to B1950.0 FK4, assuming zero\n+    proper motion in FK5 and parallax.\n+\n+    Parameters\n+    ----------\n+    r2000 : double array\n+    d2000 : double array\n+    bepoch : double array\n+\n+    Returns\n+    -------\n+    r1950 : double array\n+    d1950 : double array\n+    dr1950 : double array\n+    dd1950 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFk54z``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a F k 5 4 z\n+        - - - - - - - - -\n+\n+        Convert a J2000.0 FK5 star position to B1950.0 FK4, assuming zero\n+        proper motion in FK5 and parallax.\n+\n+        Given:\n+           r2000,d2000    double   J2000.0 FK5 RA,Dec (rad)\n+           bepoch         double   Besselian epoch (e.g. 1950.0)\n+\n+        Returned:\n+           r1950,d1950    double   B1950.0 FK4 RA,Dec (rad) at epoch BEPOCH\n+           dr1950,dd1950  double   B1950.0 FK4 proper motions (rad/trop.yr)\n+\n+        Notes:\n+\n+        1) In contrast to the eraFk524 function, here the FK5 proper\n+           motions, the parallax and the radial velocity are presumed zero.\n+\n+        2) This function converts a star position from the IAU 1976 FK5\n+          (Fricke) system to the former FK4 (Bessel-Newcomb) system, for\n+           cases such as distant radio sources where it is presumed there is\n+           zero parallax and no proper motion.  Because of the E-terms of\n+           aberration, such objects have (in general) non-zero proper motion\n+           in FK4, and the present function returns those fictitious proper\n+           motions.\n+\n+        3) Conversion from J2000.0 FK5 to B1950.0 FK4 only is provided for.\n+           Conversions involving other equinoxes would require additional\n+           treatment for precession.\n+\n+        4) The position returned by this function is in the B1950.0 FK4\n+           reference system but at Besselian epoch bepoch.  For comparison\n+           with catalogs the bepoch argument will frequently be 1950.0. (In\n+           this context the distinction between Besselian and Julian epoch\n+           is insignificant.)\n+\n+        5) The RA component of the returned (fictitious) proper motion is\n+           dRA/dt rather than cos(Dec)*dRA/dt.\n+\n+        Called:\n+           eraAnp       normalize angle into range 0 to 2pi\n+           eraC2s       p-vector to spherical\n+           eraFk524     FK4 to FK5\n+           eraS2c       spherical to p-vector\n+\n+        This revision:   2023 March 5\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    r1950, d1950, dr1950, dd1950 = ufunc.fk54z(r2000, d2000, bepoch)\n+    return r1950, d1950, dr1950, dd1950\n+\n+\n+def fk5hip():\n+    \"\"\"\n+    FK5 to Hipparcos rotation and spin.\n+\n+    Returns\n+    -------\n+    r5h : double array\n+    s5h : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFk5hip``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a F k 5 h i p\n+        - - - - - - - - - -\n+\n+        FK5 to Hipparcos rotation and spin.\n+\n+        Returned:\n+           r5h   double[3][3]  r-matrix: FK5 rotation wrt Hipparcos (Note 2)\n+           s5h   double[3]     r-vector: FK5 spin wrt Hipparcos (Note 3)\n+\n+        Notes:\n+\n+        1) This function models the FK5 to Hipparcos transformation as a\n+           pure rotation and spin;  zonal errors in the FK5 catalog are not\n+           taken into account.\n+\n+        2) The r-matrix r5h operates in the sense:\n+\n+                 P_Hipparcos = r5h x P_FK5\n+\n+           where P_FK5 is a p-vector in the FK5 frame, and P_Hipparcos is\n+           the equivalent Hipparcos p-vector.\n+\n+        3) The r-vector s5h represents the time derivative of the FK5 to\n+           Hipparcos rotation.  The units are radians per year (Julian,\n+           TDB).\n+\n+        Called:\n+           eraRv2m      r-vector to r-matrix\n+\n+        Reference:\n+\n+           F.Mignard & M.Froeschle, Astron.Astrophys., 354, 732-739 (2000).\n+\n+        This revision:  2023 March 6\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    r5h, s5h = ufunc.fk5hip()\n+    return r5h, s5h\n+\n+\n+def fk5hz(r5, d5, date1, date2):\n+    \"\"\"\n+    Transform an FK5 (J2000.0) star position into the system of the\n+    Hipparcos catalog, assuming zero Hipparcos proper motion.\n+\n+    Parameters\n+    ----------\n+    r5 : double array\n+    d5 : double array\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rh : double array\n+    dh : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraFk5hz``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a F k 5 h z\n+        - - - - - - - - -\n+\n+        Transform an FK5 (J2000.0) star position into the system of the\n+        Hipparcos catalog, assuming zero Hipparcos proper motion.\n+\n+        Given:\n+           r5           double   FK5 RA (radians), equinox J2000.0, at date\n+           d5           double   FK5 Dec (radians), equinox J2000.0, at date\n+           date1,date2  double   TDB date (Notes 1,2)\n+\n+        Returned:\n+           rh           double   Hipparcos RA (radians)\n+           dh           double   Hipparcos Dec (radians)\n+\n+        Notes:\n+\n+        1) This function converts a star position from the FK5 system to\n+           the Hipparcos system, in such a way that the Hipparcos proper\n+           motion is zero.  Because such a star has, in general, a non-zero\n+           proper motion in the FK5 system, the function requires the date\n+           at which the position in the FK5 system was determined.\n+\n+        2) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        3) The FK5 to Hipparcos transformation is modeled as a pure\n+           rotation and spin;  zonal errors in the FK5 catalog are not\n+           taken into account.\n+\n+        4) The position returned by this function is in the Hipparcos\n+           reference system but at date date1+date2.\n+\n+        5) See also eraFk52h, eraH2fk5, eraHfk5z.\n+\n+        Called:\n+           eraS2c       spherical coordinates to unit vector\n+           eraFk5hip    FK5 to Hipparcos rotation and spin\n+           eraSxp       multiply p-vector by scalar\n+           eraRv2m      r-vector to r-matrix\n+           eraTrxp      product of transpose of r-matrix and p-vector\n+           eraPxp       vector product of two p-vectors\n+           eraC2s       p-vector to spherical\n+           eraAnp       normalize angle into range 0 to 2pi\n+\n+        Reference:\n+\n+           F.Mignard & M.Froeschle, 2000, Astron.Astrophys. 354, 732-739.\n+\n+        This revision:  2023 March 6\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rh, dh = ufunc.fk5hz(r5, d5, date1, date2)\n+    return rh, dh\n+\n+\n+def h2fk5(rh, dh, drh, ddh, pxh, rvh):\n+    \"\"\"\n+    Transform Hipparcos star data into the FK5 (J2000.0) system.\n+\n+    Parameters\n+    ----------\n+    rh : double array\n+    dh : double array\n+    drh : double array\n+    ddh : double array\n+    pxh : double array\n+    rvh : double array\n+\n+    Returns\n+    -------\n+    r5 : double array\n+    d5 : double array\n+    dr5 : double array\n+    dd5 : double array\n+    px5 : double array\n+    rv5 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraH2fk5``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a H 2 f k 5\n+        - - - - - - - - -\n+\n+        Transform Hipparcos star data into the FK5 (J2000.0) system.\n+\n+        Given (all Hipparcos, epoch J2000.0):\n+           rh      double    RA (radians)\n+           dh      double    Dec (radians)\n+           drh     double    proper motion in RA (dRA/dt, rad/Jyear)\n+           ddh     double    proper motion in Dec (dDec/dt, rad/Jyear)\n+           pxh     double    parallax (arcsec)\n+           rvh     double    radial velocity (km/s, positive = receding)\n+\n+        Returned (all FK5, equinox J2000.0, epoch J2000.0):\n+           r5      double    RA (radians)\n+           d5      double    Dec (radians)\n+           dr5     double    proper motion in RA (dRA/dt, rad/Jyear)\n+           dd5     double    proper motion in Dec (dDec/dt, rad/Jyear)\n+           px5     double    parallax (arcsec)\n+           rv5     double    radial velocity (km/s, positive = receding)\n+\n+        Notes:\n+\n+        1) This function transforms Hipparcos star positions and proper\n+           motions into FK5 J2000.0.\n+\n+        2) The proper motions in RA are dRA/dt rather than\n+           cos(Dec)*dRA/dt, and are per year rather than per century.\n+\n+        3) The FK5 to Hipparcos transformation is modeled as a pure\n+           rotation and spin;  zonal errors in the FK5 catalog are not\n+           taken into account.\n+\n+        4) See also eraFk52h, eraFk5hz, eraHfk5z.\n+\n+        Called:\n+           eraStarpv    star catalog data to space motion pv-vector\n+           eraFk5hip    FK5 to Hipparcos rotation and spin\n+           eraRv2m      r-vector to r-matrix\n+           eraRxp       product of r-matrix and p-vector\n+           eraTrxp      product of transpose of r-matrix and p-vector\n+           eraPxp       vector product of two p-vectors\n+           eraPmp       p-vector minus p-vector\n+           eraPvstar    space motion pv-vector to star catalog data\n+\n+        Reference:\n+\n+           F.Mignard & M.Froeschle, Astron.Astrophys., 354, 732-739 (2000).\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    r5, d5, dr5, dd5, px5, rv5 = ufunc.h2fk5(rh, dh, drh, ddh, pxh, rvh)\n+    return r5, d5, dr5, dd5, px5, rv5\n+\n+\n+def hfk5z(rh, dh, date1, date2):\n+    \"\"\"\n+    Transform a Hipparcos star position into FK5 J2000.0, assuming\n+    zero Hipparcos proper motion.\n+\n+    Parameters\n+    ----------\n+    rh : double array\n+    dh : double array\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    r5 : double array\n+    d5 : double array\n+    dr5 : double array\n+    dd5 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraHfk5z``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a H f k 5 z\n+        - - - - - - - - -\n+\n+        Transform a Hipparcos star position into FK5 J2000.0, assuming\n+        zero Hipparcos proper motion.\n+\n+        Given:\n+           rh            double    Hipparcos RA (radians)\n+           dh            double    Hipparcos Dec (radians)\n+           date1,date2   double    TDB date (Note 1)\n+\n+        Returned (all FK5, equinox J2000.0, date date1+date2):\n+           r5            double    RA (radians)\n+           d5            double    Dec (radians)\n+           dr5           double    RA proper motion (rad/year, Note 4)\n+           dd5           double    Dec proper motion (rad/year, Note 4)\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The proper motion in RA is dRA/dt rather than cos(Dec)*dRA/dt.\n+\n+        3) The FK5 to Hipparcos transformation is modeled as a pure rotation\n+           and spin;  zonal errors in the FK5 catalog are not taken into\n+           account.\n+\n+        4) It was the intention that Hipparcos should be a close\n+           approximation to an inertial frame, so that distant objects have\n+           zero proper motion;  such objects have (in general) non-zero\n+           proper motion in FK5, and this function returns those fictitious\n+           proper motions.\n+\n+        5) The position returned by this function is in the FK5 J2000.0\n+           reference system but at date date1+date2.\n+\n+        6) See also eraFk52h, eraH2fk5, eraFk5hz.\n+\n+        Called:\n+           eraS2c       spherical coordinates to unit vector\n+           eraFk5hip    FK5 to Hipparcos rotation and spin\n+           eraRxp       product of r-matrix and p-vector\n+           eraSxp       multiply p-vector by scalar\n+           eraRxr       product of two r-matrices\n+           eraTrxp      product of transpose of r-matrix and p-vector\n+           eraPxp       vector product of two p-vectors\n+           eraPv2s      pv-vector to spherical\n+           eraAnp       normalize angle into range 0 to 2pi\n+\n+        Reference:\n+\n+           F.Mignard & M.Froeschle, 2000, Astron.Astrophys. 354, 732-739.\n+\n+        This revision:  2023 March 7\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    r5, d5, dr5, dd5 = ufunc.hfk5z(rh, dh, date1, date2)\n+    return r5, d5, dr5, dd5\n+\n+\n+def starpm(ra1, dec1, pmr1, pmd1, px1, rv1, ep1a, ep1b, ep2a, ep2b):\n+    \"\"\"\n+    Star proper motion:  update star catalog data for space motion.\n+\n+    Parameters\n+    ----------\n+    ra1 : double array\n+    dec1 : double array\n+    pmr1 : double array\n+    pmd1 : double array\n+    px1 : double array\n+    rv1 : double array\n+    ep1a : double array\n+    ep1b : double array\n+    ep2a : double array\n+    ep2b : double array\n+\n+    Returns\n+    -------\n+    ra2 : double array\n+    dec2 : double array\n+    pmr2 : double array\n+    pmd2 : double array\n+    px2 : double array\n+    rv2 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraStarpm``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a S t a r p m\n+        - - - - - - - - - -\n+\n+        Star proper motion:  update star catalog data for space motion.\n+\n+        Given:\n+           ra1    double     right ascension (radians), before\n+           dec1   double     declination (radians), before\n+           pmr1   double     RA proper motion (radians/year), before\n+           pmd1   double     Dec proper motion (radians/year), before\n+           px1    double     parallax (arcseconds), before\n+           rv1    double     radial velocity (km/s, +ve = receding), before\n+           ep1a   double     \"before\" epoch, part A (Note 1)\n+           ep1b   double     \"before\" epoch, part B (Note 1)\n+           ep2a   double     \"after\" epoch, part A (Note 1)\n+           ep2b   double     \"after\" epoch, part B (Note 1)\n+\n+        Returned:\n+           ra2    double     right ascension (radians), after\n+           dec2   double     declination (radians), after\n+           pmr2   double     RA proper motion (radians/year), after\n+           pmd2   double     Dec proper motion (radians/year), after\n+           px2    double     parallax (arcseconds), after\n+           rv2    double     radial velocity (km/s, +ve = receding), after\n+\n+        Returned (function value):\n+                  int        status:\n+                                -1 = system error (should not occur)\n+                                 0 = no warnings or errors\n+                                 1 = distance overridden (Note 6)\n+                                 2 = excessive velocity (Note 7)\n+                                 4 = solution didn't converge (Note 8)\n+                              else = binary logical OR of the above warnings\n+\n+        Notes:\n+\n+        1) The starting and ending TDB dates ep1a+ep1b and ep2a+ep2b are\n+           Julian Dates, apportioned in any convenient way between the two\n+           parts (A and B).  For example, JD(TDB)=2450123.7 could be\n+           expressed in any of these ways, among others:\n+\n+                  epNa            epNb\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in cases\n+           where the loss of several decimal digits of resolution is\n+           acceptable.  The J2000 method is best matched to the way the\n+           argument is handled internally and will deliver the optimum\n+           resolution.  The MJD method and the date & time methods are both\n+           good compromises between resolution and convenience.\n+\n+        2) In accordance with normal star-catalog conventions, the object's\n+           right ascension and declination are freed from the effects of\n+           secular aberration.  The frame, which is aligned to the catalog\n+           equator and equinox, is Lorentzian and centered on the SSB.\n+\n+           The proper motions are the rate of change of the right ascension\n+           and declination at the catalog epoch and are in radians per TDB\n+           Julian year.\n+\n+           The parallax and radial velocity are in the same frame.\n+\n+        3) Care is needed with units.  The star coordinates are in radians\n+           and the proper motions in radians per Julian year, but the\n+           parallax is in arcseconds.\n+\n+        4) The RA proper motion is in terms of coordinate angle, not true\n+           angle.  If the catalog uses arcseconds for both RA and Dec proper\n+           motions, the RA proper motion will need to be divided by cos(Dec)\n+           before use.\n+\n+        5) Straight-line motion at constant speed, in the inertial frame,\n+           is assumed.\n+\n+        6) An extremely small (or zero or negative) parallax is interpreted\n+           to mean that the object is on the \"celestial sphere\", the radius\n+           of which is an arbitrary (large) value (see the eraStarpv\n+           function for the value used).  When the distance is overridden in\n+           this way, the status, initially zero, has 1 added to it.\n+\n+        7) If the space velocity is a significant fraction of c (see the\n+           constant VMAX in the function eraStarpv), it is arbitrarily set\n+           to zero.  When this action occurs, 2 is added to the status.\n+\n+        8) The relativistic adjustment carried out in the eraStarpv function\n+           involves an iterative calculation.  If the process fails to\n+           converge within a set number of iterations, 4 is added to the\n+           status.\n+\n+        Called:\n+           eraStarpv    star catalog data to space motion pv-vector\n+           eraPvu       update a pv-vector\n+           eraPdp       scalar product of two p-vectors\n+           eraPvstar    space motion pv-vector to star catalog data\n+\n+        This revision:  2023 May 3\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    ra2, dec2, pmr2, pmd2, px2, rv2, c_retval = ufunc.starpm(\n+        ra1, dec1, pmr1, pmd1, px1, rv1, ep1a, ep1b, ep2a, ep2b)\n+    check_errwarn(c_retval, 'starpm')\n+    return ra2, dec2, pmr2, pmd2, px2, rv2\n+\n+\n+STATUS_CODES['starpm'] = {\n+    -1: 'system error (should not occur)',\n+    0: 'no warnings or errors',\n+    1: 'distance overridden (Note 6)',\n+    2: 'excessive velocity (Note 7)',\n+    4: \"solution didn't converge (Note 8)\",\n+    'else': 'binary logical OR of the above warnings',\n+}\n+\n+\n+def eceq06(date1, date2, dl, db):\n+    \"\"\"\n+    Transformation from ecliptic coordinates (mean equinox and ecliptic\n+    of date) to ICRS RA,Dec, using the IAU 2006 precession model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+    dl : double array\n+    db : double array\n+\n+    Returns\n+    -------\n+    dr : double array\n+    dd : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEceq06``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a E c e q 0 6\n+        - - - - - - - - - -\n+\n+        Transformation from ecliptic coordinates (mean equinox and ecliptic\n+        of date) to ICRS RA,Dec, using the IAU 2006 precession model.\n+\n+        Given:\n+           date1,date2 double TT as a 2-part Julian date (Note 1)\n+           dl,db       double ecliptic longitude and latitude (radians)\n+\n+        Returned:\n+           dr,dd       double ICRS right ascension and declination (radians)\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) No assumptions are made about whether the coordinates represent\n+           starlight and embody astrometric effects such as parallax or\n+           aberration.\n+\n+        3) The transformation is approximately that from ecliptic longitude\n+           and latitude (mean equinox and ecliptic of date) to mean J2000.0\n+           right ascension and declination, with only frame bias (always\n+           less than 25 mas) to disturb this classical picture.\n+\n+        Called:\n+           eraS2c       spherical coordinates to unit vector\n+           eraEcm06     J2000.0 to ecliptic rotation matrix, IAU 2006\n+           eraTrxp      product of transpose of r-matrix and p-vector\n+           eraC2s       unit vector to spherical coordinates\n+           eraAnp       normalize angle into range 0 to 2pi\n+           eraAnpm      normalize angle into range +/- pi\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    dr, dd = ufunc.eceq06(date1, date2, dl, db)\n+    return dr, dd\n+\n+\n+def ecm06(date1, date2):\n+    \"\"\"\n+    ICRS equatorial to ecliptic rotation matrix, IAU 2006.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+\n+    Returns\n+    -------\n+    rm : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEcm06``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a E c m 0 6\n+        - - - - - - - - -\n+\n+        ICRS equatorial to ecliptic rotation matrix, IAU 2006.\n+\n+        Given:\n+           date1,date2  double         TT as a 2-part Julian date (Note 1)\n+\n+        Returned:\n+           rm           double[3][3]   ICRS to ecliptic rotation matrix\n+\n+        Notes:\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) The matrix is in the sense\n+\n+              E_ep = rm x P_ICRS,\n+\n+           where P_ICRS is a vector with respect to ICRS right ascension\n+           and declination axes and E_ep is the same vector with respect to\n+           the (inertial) ecliptic and equinox of date.\n+\n+           P_ICRS is a free vector, merely a direction, typically of unit\n+           magnitude, and not bound to any particular spatial origin, such\n+           as the Earth, Sun or SSB.  No assumptions are made about whether\n+           it represents starlight and embodies astrometric effects such as\n+           parallax or aberration.  The transformation is approximately that\n+           between mean J2000.0 right ascension and declination and ecliptic\n+           longitude and latitude, with only frame bias (always less than\n+           25 mas) to disturb this classical picture.\n+\n+        Called:\n+           eraObl06     mean obliquity, IAU 2006\n+           eraPmat06    PB matrix, IAU 2006\n+           eraIr        initialize r-matrix to identity\n+           eraRx        rotate around X-axis\n+           eraRxr       product of two r-matrices\n+\n+        This revision:  2023 February 26\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rm = ufunc.ecm06(date1, date2)\n+    return rm\n+\n+\n+def eqec06(date1, date2, dr, dd):\n+    \"\"\"\n+    Transformation from ICRS equatorial coordinates to ecliptic\n+    coordinates (mean equinox and ecliptic of date) using IAU 2006\n+    precession model.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+    dr : double array\n+    dd : double array\n+\n+    Returns\n+    -------\n+    dl : double array\n+    db : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEqec06``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a E q e c 0 6\n+        - - - - - - - - - -\n+\n+        Transformation from ICRS equatorial coordinates to ecliptic\n+        coordinates (mean equinox and ecliptic of date) using IAU 2006\n+        precession model.\n+\n+        Given:\n+           date1,date2 double TT as a 2-part Julian date (Note 1)\n+           dr,dd       double ICRS right ascension and declination (radians)\n+\n+        Returned:\n+           dl,db       double ecliptic longitude and latitude (radians)\n+\n+        1) The TT date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+        2) No assumptions are made about whether the coordinates represent\n+           starlight and embody astrometric effects such as parallax or\n+           aberration.\n+\n+        3) The transformation is approximately that from mean J2000.0 right\n+           ascension and declination to ecliptic longitude and latitude\n+           (mean equinox and ecliptic of date), with only frame bias (always\n+           less than 25 mas) to disturb this classical picture.\n+\n+        Called:\n+           eraS2c       spherical coordinates to unit vector\n+           eraEcm06     J2000.0 to ecliptic rotation matrix, IAU 2006\n+           eraRxp       product of r-matrix and p-vector\n+           eraC2s       unit vector to spherical coordinates\n+           eraAnp       normalize angle into range 0 to 2pi\n+           eraAnpm      normalize angle into range +/- pi\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    dl, db = ufunc.eqec06(date1, date2, dr, dd)\n+    return dl, db\n+\n+\n+def lteceq(epj, dl, db):\n+    \"\"\"\n+    Transformation from ecliptic coordinates (mean equinox and ecliptic\n+    of date) to ICRS RA,Dec, using a long-term precession model.\n+\n+    Parameters\n+    ----------\n+    epj : double array\n+    dl : double array\n+    db : double array\n+\n+    Returns\n+    -------\n+    dr : double array\n+    dd : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraLteceq``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a L t e c e q\n+        - - - - - - - - - -\n+\n+        Transformation from ecliptic coordinates (mean equinox and ecliptic\n+        of date) to ICRS RA,Dec, using a long-term precession model.\n+\n+        Given:\n+           epj     double     Julian epoch (TT)\n+           dl,db   double     ecliptic longitude and latitude (radians)\n+\n+        Returned:\n+           dr,dd   double     ICRS right ascension and declination (radians)\n+\n+        1) No assumptions are made about whether the coordinates represent\n+           starlight and embody astrometric effects such as parallax or\n+           aberration.\n+\n+        2) The transformation is approximately that from ecliptic longitude\n+           and latitude (mean equinox and ecliptic of date) to mean J2000.0\n+           right ascension and declination, with only frame bias (always\n+           less than 25 mas) to disturb this classical picture.\n+\n+        3) The Vondrak et al. (2011, 2012) 400 millennia precession model\n+           agrees with the IAU 2006 precession at J2000.0 and stays within\n+           100 microarcseconds during the 20th and 21st centuries.  It is\n+           accurate to a few arcseconds throughout the historical period,\n+           worsening to a few tenths of a degree at the end of the\n+           +/- 200,000 year time span.\n+\n+        Called:\n+           eraS2c       spherical coordinates to unit vector\n+           eraLtecm     J2000.0 to ecliptic rotation matrix, long term\n+           eraTrxp      product of transpose of r-matrix and p-vector\n+           eraC2s       unit vector to spherical coordinates\n+           eraAnp       normalize angle into range 0 to 2pi\n+           eraAnpm      normalize angle into range +/- pi\n+\n+        References:\n+\n+          Vondrak, J., Capitaine, N. and Wallace, P., 2011, New precession\n+          expressions, valid for long time intervals, Astron.Astrophys. 534,\n+          A22\n+\n+          Vondrak, J., Capitaine, N. and Wallace, P., 2012, New precession\n+          expressions, valid for long time intervals (Corrigendum),\n+          Astron.Astrophys. 541, C1\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    dr, dd = ufunc.lteceq(epj, dl, db)\n+    return dr, dd\n+\n+\n+def ltecm(epj):\n+    \"\"\"\n+    ICRS equatorial to ecliptic rotation matrix, long-term.\n+\n+    Parameters\n+    ----------\n+    epj : double array\n+\n+    Returns\n+    -------\n+    rm : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraLtecm``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a L t e c m\n+        - - - - - - - - -\n+\n+        ICRS equatorial to ecliptic rotation matrix, long-term.\n+\n+        Given:\n+           epj     double         Julian epoch (TT)\n+\n+        Returned:\n+           rm      double[3][3]   ICRS to ecliptic rotation matrix\n+\n+        Notes:\n+\n+        1) The matrix is in the sense\n+\n+              E_ep = rm x P_ICRS,\n+\n+           where P_ICRS is a vector with respect to ICRS right ascension\n+           and declination axes and E_ep is the same vector with respect to\n+           the (inertial) ecliptic and equinox of epoch epj.\n+\n+        2) P_ICRS is a free vector, merely a direction, typically of unit\n+           magnitude, and not bound to any particular spatial origin, such\n+           as the Earth, Sun or SSB.  No assumptions are made about whether\n+           it represents starlight and embodies astrometric effects such as\n+           parallax or aberration.  The transformation is approximately that\n+           between mean J2000.0 right ascension and declination and ecliptic\n+           longitude and latitude, with only frame bias (always less than\n+           25 mas) to disturb this classical picture.\n+\n+        3) The Vondrak et al. (2011, 2012) 400 millennia precession model\n+           agrees with the IAU 2006 precession at J2000.0 and stays within\n+           100 microarcseconds during the 20th and 21st centuries.  It is\n+           accurate to a few arcseconds throughout the historical period,\n+           worsening to a few tenths of a degree at the end of the\n+           +/- 200,000 year time span.\n+\n+        Called:\n+           eraLtpequ    equator pole, long term\n+           eraLtpecl    ecliptic pole, long term\n+           eraPxp       vector product\n+           eraPn        normalize vector\n+\n+        References:\n+\n+          Vondrak, J., Capitaine, N. and Wallace, P., 2011, New precession\n+          expressions, valid for long time intervals, Astron.Astrophys. 534,\n+          A22\n+\n+          Vondrak, J., Capitaine, N. and Wallace, P., 2012, New precession\n+          expressions, valid for long time intervals (Corrigendum),\n+          Astron.Astrophys. 541, C1\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rm = ufunc.ltecm(epj)\n+    return rm\n+\n+\n+def lteqec(epj, dr, dd):\n+    \"\"\"\n+    Transformation from ICRS RA,Dec to ecliptic coordinates (mean equinox\n+    and ecliptic of date), using a long-term precession model.\n+\n+    Parameters\n+    ----------\n+    epj : double array\n+    dr : double array\n+    dd : double array\n+\n+    Returns\n+    -------\n+    dl : double array\n+    db : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraLteqec``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a L t e q e c\n+        - - - - - - - - - -\n+\n+        Transformation from ICRS RA,Dec to ecliptic coordinates (mean equinox\n+        and ecliptic of date), using a long-term precession model.\n+\n+        Given:\n+           epj     double     Julian epoch (TT)\n+           dr,dd   double     ICRS right ascension and declination (radians)\n+\n+        Returned:\n+           dl,db   double     ecliptic longitude and latitude (radians)\n+\n+        1) No assumptions are made about whether the coordinates represent\n+           starlight and embody astrometric effects such as parallax or\n+           aberration.\n+\n+        2) The transformation is approximately that from mean J2000.0 right\n+           ascension and declination to ecliptic longitude and latitude\n+           (mean equinox and ecliptic of date), with only frame bias (always\n+           less than 25 mas) to disturb this classical picture.\n+\n+        3) The Vondrak et al. (2011, 2012) 400 millennia precession model\n+           agrees with the IAU 2006 precession at J2000.0 and stays within\n+           100 microarcseconds during the 20th and 21st centuries.  It is\n+           accurate to a few arcseconds throughout the historical period,\n+           worsening to a few tenths of a degree at the end of the\n+           +/- 200,000 year time span.\n+\n+        Called:\n+           eraS2c       spherical coordinates to unit vector\n+           eraLtecm     J2000.0 to ecliptic rotation matrix, long term\n+           eraRxp       product of r-matrix and p-vector\n+           eraC2s       unit vector to spherical coordinates\n+           eraAnp       normalize angle into range 0 to 2pi\n+           eraAnpm      normalize angle into range +/- pi\n+\n+        References:\n+\n+          Vondrak, J., Capitaine, N. and Wallace, P., 2011, New precession\n+          expressions, valid for long time intervals, Astron.Astrophys. 534,\n+          A22\n+\n+          Vondrak, J., Capitaine, N. and Wallace, P., 2012, New precession\n+          expressions, valid for long time intervals (Corrigendum),\n+          Astron.Astrophys. 541, C1\n+\n+        This revision:  2023 March 18\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    dl, db = ufunc.lteqec(epj, dr, dd)\n+    return dl, db\n+\n+\n+def g2icrs(dl, db):\n+    \"\"\"\n+    Transformation from Galactic coordinates to ICRS.\n+\n+    Parameters\n+    ----------\n+    dl : double array\n+    db : double array\n+\n+    Returns\n+    -------\n+    dr : double array\n+    dd : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraG2icrs``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a G 2 i c r s\n+        - - - - - - - - - -\n+\n+        Transformation from Galactic coordinates to ICRS.\n+\n+        Given:\n+           dl     double      Galactic longitude (radians)\n+           db     double      Galactic latitude (radians)\n+\n+        Returned:\n+           dr     double      ICRS right ascension (radians)\n+           dd     double      ICRS declination (radians)\n+\n+        Notes:\n+\n+        1) The IAU 1958 system of Galactic coordinates was defined with\n+           respect to the now obsolete reference system FK4 B1950.0.  When\n+           interpreting the system in a modern context, several factors have\n+           to be taken into account:\n+\n+           . The inclusion in FK4 positions of the E-terms of aberration.\n+\n+           . The distortion of the FK4 proper motion system by differential\n+             Galactic rotation.\n+\n+           . The use of the B1950.0 equinox rather than the now-standard\n+             J2000.0.\n+\n+           . The frame bias between ICRS and the J2000.0 mean place system.\n+\n+           The Hipparcos Catalogue (Perryman & ESA 1997) provides a rotation\n+           matrix that transforms directly between ICRS and Galactic\n+           coordinates with the above factors taken into account.  The\n+           matrix is derived from three angles, namely the ICRS coordinates\n+           of the Galactic pole and the longitude of the ascending node of\n+           the Galactic equator on the ICRS equator.  They are given in\n+           degrees to five decimal places and for canonical purposes are\n+           regarded as exact.  In the Hipparcos Catalogue the matrix\n+           elements are given to 10 decimal places (about 20 microarcsec).\n+           In the present ERFA function the matrix elements have been\n+           recomputed from the canonical three angles and are given to 30\n+           decimal places.\n+\n+        2) The inverse transformation is performed by the function eraIcrs2g.\n+\n+        Called:\n+           eraAnp       normalize angle into range 0 to 2pi\n+           eraAnpm      normalize angle into range +/- pi\n+           eraS2c       spherical coordinates to unit vector\n+           eraTrxp      product of transpose of r-matrix and p-vector\n+           eraC2s       p-vector to spherical\n+\n+        Reference:\n+           Perryman M.A.C. & ESA, 1997, ESA SP-1200, The Hipparcos and Tycho\n+           catalogues.  Astrometric and photometric star catalogues\n+           derived from the ESA Hipparcos Space Astrometry Mission.  ESA\n+           Publications Division, Noordwijk, Netherlands.\n+\n+        This revision:   2023 April 16\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    dr, dd = ufunc.g2icrs(dl, db)\n+    return dr, dd\n+\n+\n+def icrs2g(dr, dd):\n+    \"\"\"\n+    Transformation from ICRS to Galactic coordinates.\n+\n+    Parameters\n+    ----------\n+    dr : double array\n+    dd : double array\n+\n+    Returns\n+    -------\n+    dl : double array\n+    db : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraIcrs2g``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a I c r s 2 g\n+        - - - - - - - - - -\n+\n+        Transformation from ICRS to Galactic coordinates.\n+\n+        Given:\n+           dr     double      ICRS right ascension (radians)\n+           dd     double      ICRS declination (radians)\n+\n+        Returned:\n+           dl     double      Galactic longitude (radians)\n+           db     double      Galactic latitude (radians)\n+\n+        Notes:\n+\n+        1) The IAU 1958 system of Galactic coordinates was defined with\n+           respect to the now obsolete reference system FK4 B1950.0.  When\n+           interpreting the system in a modern context, several factors have\n+           to be taken into account:\n+\n+           . The inclusion in FK4 positions of the E-terms of aberration.\n+\n+           . The distortion of the FK4 proper motion system by differential\n+             Galactic rotation.\n+\n+           . The use of the B1950.0 equinox rather than the now-standard\n+             J2000.0.\n+\n+           . The frame bias between ICRS and the J2000.0 mean place system.\n+\n+           The Hipparcos Catalogue (Perryman & ESA 1997) provides a rotation\n+           matrix that transforms directly between ICRS and Galactic\n+           coordinates with the above factors taken into account.  The\n+           matrix is derived from three angles, namely the ICRS coordinates\n+           of the Galactic pole and the longitude of the ascending node of\n+           the Galactic equator on the ICRS equator.  They are given in\n+           degrees to five decimal places and for canonical purposes are\n+           regarded as exact.  In the Hipparcos Catalogue the matrix\n+           elements are given to 10 decimal places (about 20 microarcsec).\n+           In the present ERFA function the matrix elements have been\n+           recomputed from the canonical three angles and are given to 30\n+           decimal places.\n+\n+        2) The inverse transformation is performed by the function eraG2icrs.\n+\n+        Called:\n+           eraAnp       normalize angle into range 0 to 2pi\n+           eraAnpm      normalize angle into range +/- pi\n+           eraS2c       spherical coordinates to unit vector\n+           eraRxp       product of r-matrix and p-vector\n+           eraC2s       p-vector to spherical\n+\n+        Reference:\n+           Perryman M.A.C. & ESA, 1997, ESA SP-1200, The Hipparcos and Tycho\n+           catalogues.  Astrometric and photometric star catalogues\n+           derived from the ESA Hipparcos Space Astrometry Mission.  ESA\n+           Publications Division, Noordwijk, Netherlands.\n+\n+        This revision:   2023 April 16\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    dl, db = ufunc.icrs2g(dr, dd)\n+    return dl, db\n+\n+\n+def eform(n):\n+    \"\"\"\n+    Earth reference ellipsoids.\n+\n+    Parameters\n+    ----------\n+    n : int array\n+\n+    Returns\n+    -------\n+    a : double array\n+    f : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraEform``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a E f o r m\n+        - - - - - - - - -\n+\n+        Earth reference ellipsoids.\n+\n+        Given:\n+           n    int         ellipsoid identifier (Note 1)\n+\n+        Returned:\n+           a    double      equatorial radius (meters, Note 2)\n+           f    double      flattening (Note 2)\n+\n+        Returned (function value):\n+                int         status:  0 = OK\n+                                    -1 = illegal identifier (Note 3)\n+\n+        Notes:\n+\n+        1) The identifier n is a number that specifies the choice of\n+           reference ellipsoid.  The following are supported:\n+\n+              n    ellipsoid\n+\n+              1     ERFA_WGS84\n+              2     ERFA_GRS80\n+              3     ERFA_WGS72\n+\n+           The n value has no significance outside the ERFA software.  For\n+           convenience, symbols ERFA_WGS84 etc. are defined in erfam.h.\n+\n+        2) The ellipsoid parameters are returned in the form of equatorial\n+           radius in meters (a) and flattening (f).  The latter is a number\n+           around 0.00335, i.e. around 1/298.\n+\n+        3) For the case where an unsupported n value is supplied, zero a and\n+           f are returned, as well as error status.\n+\n+        References:\n+\n+           Department of Defense World Geodetic System 1984, National\n+           Imagery and Mapping Agency Technical Report 8350.2, Third\n+           Edition, p3-2.\n+\n+           Moritz, H., Bull. Geodesique 66-2, 187 (1992).\n+\n+           The Department of Defense World Geodetic System 1972, World\n+           Geodetic System Committee, May 1974.\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992),\n+           p220.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    a, f, c_retval = ufunc.eform(n)\n+    check_errwarn(c_retval, 'eform')\n+    return a, f\n+\n+\n+STATUS_CODES['eform'] = {\n+    0: 'OK',\n+    -1: 'illegal identifier (Note 3)',\n+}\n+\n+\n+def gc2gd(n, xyz):\n+    \"\"\"\n+    Transform geocentric coordinates to geodetic using the specified\n+    reference ellipsoid.\n+\n+    Parameters\n+    ----------\n+    n : int array\n+    xyz : double array\n+\n+    Returns\n+    -------\n+    elong : double array\n+    phi : double array\n+    height : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraGc2gd``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a G c 2 g d\n+        - - - - - - - - -\n+\n+        Transform geocentric coordinates to geodetic using the specified\n+        reference ellipsoid.\n+\n+        Given:\n+           n       int        ellipsoid identifier (Note 1)\n+           xyz     double[3]  geocentric vector (Note 2)\n+\n+        Returned:\n+           elong   double     longitude (radians, east +ve, Note 3)\n+           phi     double     latitude (geodetic, radians, Note 3)\n+           height  double     height above ellipsoid (geodetic, Notes 2,3)\n+\n+        Returned (function value):\n+                  int         status:  0 = OK\n+                                      -1 = illegal identifier (Note 3)\n+                                      -2 = internal error (Note 3)\n+\n+        Notes:\n+\n+        1) The identifier n is a number that specifies the choice of\n+           reference ellipsoid.  The following are supported:\n+\n+              n    ellipsoid\n+\n+              1     ERFA_WGS84\n+              2     ERFA_GRS80\n+              3     ERFA_WGS72\n+\n+           The n value has no significance outside the ERFA software.  For\n+           convenience, symbols ERFA_WGS84 etc. are defined in erfam.h.\n+\n+        2) The geocentric vector (xyz, given) and height (height, returned)\n+           are in meters.\n+\n+        3) An error status -1 means that the identifier n is illegal.  An\n+           error status -2 is theoretically impossible.  In all error cases,\n+           all three results are set to -1e9.\n+\n+        4) The inverse transformation is performed in the function eraGd2gc.\n+\n+        Called:\n+           eraEform     Earth reference ellipsoids\n+           eraGc2gde    geocentric to geodetic transformation, general\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    elong, phi, height, c_retval = ufunc.gc2gd(n, xyz)\n+    check_errwarn(c_retval, 'gc2gd')\n+    return elong, phi, height\n+\n+\n+STATUS_CODES['gc2gd'] = {\n+    0: 'OK',\n+    -1: 'illegal identifier (Note 3)',\n+    -2: 'internal error (Note 3)',\n+}\n+\n+\n+def gc2gde(a, f, xyz):\n+    \"\"\"\n+    Transform geocentric coordinates to geodetic for a reference\n+    ellipsoid of specified form.\n+\n+    Parameters\n+    ----------\n+    a : double array\n+    f : double array\n+    xyz : double array\n+\n+    Returns\n+    -------\n+    elong : double array\n+    phi : double array\n+    height : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraGc2gde``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a G c 2 g d e\n+        - - - - - - - - - -\n+\n+        Transform geocentric coordinates to geodetic for a reference\n+        ellipsoid of specified form.\n+\n+        Given:\n+           a       double     equatorial radius (Notes 2,4)\n+           f       double     flattening (Note 3)\n+           xyz     double[3]  geocentric vector (Note 4)\n+\n+        Returned:\n+           elong   double     longitude (radians, east +ve)\n+           phi     double     latitude (geodetic, radians)\n+           height  double     height above ellipsoid (geodetic, Note 4)\n+\n+        Returned (function value):\n+                   int        status:  0 = OK\n+                                      -1 = illegal f\n+                                      -2 = illegal a\n+\n+        Notes:\n+\n+        1) This function is based on the GCONV2H Fortran subroutine by\n+           Toshio Fukushima (see reference).\n+\n+        2) The equatorial radius, a, can be in any units, but meters is\n+           the conventional choice.\n+\n+        3) The flattening, f, is (for the Earth) a value around 0.00335,\n+           i.e. around 1/298.\n+\n+        4) The equatorial radius, a, and the geocentric vector, xyz,\n+           must be given in the same units, and determine the units of\n+           the returned height, height.\n+\n+        5) If an error occurs (status < 0), elong, phi and height are\n+           unchanged.\n+\n+        6) The inverse transformation is performed in the function\n+           eraGd2gce.\n+\n+        7) The transformation for a standard ellipsoid (such as ERFA_WGS84) can\n+           more conveniently be performed by calling eraGc2gd, which uses a\n+           numerical code to identify the required A and F values.\n+\n+        Reference:\n+\n+           Fukushima, T., \"Transformation from Cartesian to geodetic\n+           coordinates accelerated by Halley's method\", J.Geodesy (2006)\n+           79: 689-693\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    elong, phi, height, c_retval = ufunc.gc2gde(a, f, xyz)\n+    check_errwarn(c_retval, 'gc2gde')\n+    return elong, phi, height\n+\n+\n+STATUS_CODES['gc2gde'] = {\n+    0: 'OK',\n+    -1: 'illegal f',\n+    -2: 'illegal a',\n+}\n+\n+\n+def gd2gc(n, elong, phi, height):\n+    \"\"\"\n+    Transform geodetic coordinates to geocentric using the specified\n+    reference ellipsoid.\n+\n+    Parameters\n+    ----------\n+    n : int array\n+    elong : double array\n+    phi : double array\n+    height : double array\n+\n+    Returns\n+    -------\n+    xyz : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraGd2gc``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a G d 2 g c\n+        - - - - - - - - -\n+\n+        Transform geodetic coordinates to geocentric using the specified\n+        reference ellipsoid.\n+\n+        Given:\n+           n       int        ellipsoid identifier (Note 1)\n+           elong   double     longitude (radians, east +ve, Note 3)\n+           phi     double     latitude (geodetic, radians, Note 3)\n+           height  double     height above ellipsoid (geodetic, Notes 2,3)\n+\n+        Returned:\n+           xyz     double[3]  geocentric vector (Note 2)\n+\n+        Returned (function value):\n+                   int        status:  0 = OK\n+                                      -1 = illegal identifier (Note 3)\n+                                      -2 = illegal case (Note 3)\n+\n+        Notes:\n+\n+        1) The identifier n is a number that specifies the choice of\n+           reference ellipsoid.  The following are supported:\n+\n+              n    ellipsoid\n+\n+              1     ERFA_WGS84\n+              2     ERFA_GRS80\n+              3     ERFA_WGS72\n+\n+           The n value has no significance outside the ERFA software.  For\n+           convenience, symbols ERFA_WGS84 etc. are defined in erfam.h.\n+\n+        2) The height (height, given) and the geocentric vector (xyz,\n+           returned) are in meters.\n+\n+        3) No validation is performed on the arguments elong, phi and\n+           height.  An error status -1 means that the identifier n is\n+           illegal.  An error status -2 protects against cases that would\n+           lead to arithmetic exceptions.  In all error cases, xyz is set\n+           to zeros.\n+\n+        4) The inverse transformation is performed in the function eraGc2gd.\n+\n+        Called:\n+           eraEform     Earth reference ellipsoids\n+           eraGd2gce    geodetic to geocentric transformation, general\n+           eraZp        zero p-vector\n+\n+        This revision:  2023 March 9\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    xyz, c_retval = ufunc.gd2gc(n, elong, phi, height)\n+    check_errwarn(c_retval, 'gd2gc')\n+    return xyz\n+\n+\n+STATUS_CODES['gd2gc'] = {\n+    0: 'OK',\n+    -1: 'illegal identifier (Note 3)',\n+    -2: 'illegal case (Note 3)',\n+}\n+\n+\n+def gd2gce(a, f, elong, phi, height):\n+    \"\"\"\n+    Transform geodetic coordinates to geocentric for a reference\n+    ellipsoid of specified form.\n+\n+    Parameters\n+    ----------\n+    a : double array\n+    f : double array\n+    elong : double array\n+    phi : double array\n+    height : double array\n+\n+    Returns\n+    -------\n+    xyz : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraGd2gce``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a G d 2 g c e\n+        - - - - - - - - - -\n+\n+        Transform geodetic coordinates to geocentric for a reference\n+        ellipsoid of specified form.\n+\n+        Given:\n+           a       double     equatorial radius (Notes 1,3,4)\n+           f       double     flattening (Notes 2,4)\n+           elong   double     longitude (radians, east +ve, Note 4)\n+           phi     double     latitude (geodetic, radians, Note 4)\n+           height  double     height above ellipsoid (geodetic, Notes 3,4)\n+\n+        Returned:\n+           xyz     double[3]  geocentric vector (Note 3)\n+\n+        Returned (function value):\n+                   int        status:  0 = OK\n+                                      -1 = illegal case (Note 4)\n+        Notes:\n+\n+        1) The equatorial radius, a, can be in any units, but meters is\n+           the conventional choice.\n+\n+        2) The flattening, f, is (for the Earth) a value around 0.00335,\n+           i.e. around 1/298.\n+\n+        3) The equatorial radius, a, and the height, height, must be\n+           given in the same units, and determine the units of the\n+           returned geocentric vector, xyz.\n+\n+        4) No validation is performed on individual arguments.  The error\n+           status -1 protects against (unrealistic) cases that would lead\n+           to arithmetic exceptions.  If an error occurs, xyz is unchanged.\n+\n+        5) The inverse transformation is performed in the function\n+           eraGc2gde.\n+\n+        6) The transformation for a standard ellipsoid (such as ERFA_WGS84) can\n+           more conveniently be performed by calling eraGd2gc,  which uses a\n+           numerical code to identify the required a and f values.\n+\n+        References:\n+\n+           Green, R.M., Spherical Astronomy, Cambridge University Press,\n+           (1985) Section 4.5, p96.\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992),\n+           Section 4.22, p202.\n+\n+        This revision:  2023 March 10\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    xyz, c_retval = ufunc.gd2gce(a, f, elong, phi, height)\n+    check_errwarn(c_retval, 'gd2gce')\n+    return xyz\n+\n+\n+STATUS_CODES['gd2gce'] = {\n+    0: 'OK',\n+    -1: 'illegal case (Note 4)Notes:',\n+}\n+\n+\n+def d2dtf(scale, ndp, d1, d2):\n+    \"\"\"\n+    Format for output a 2-part Julian Date (or in the case of UTC a\n+    quasi-JD form that includes special provision for leap seconds).\n+\n+    Parameters\n+    ----------\n+    scale : const char array\n+    ndp : int array\n+    d1 : double array\n+    d2 : double array\n+\n+    Returns\n+    -------\n+    iy : int array\n+    im : int array\n+    id : int array\n+    ihmsf : int array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraD2dtf``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a D 2 d t f\n+        - - - - - - - - -\n+\n+        Format for output a 2-part Julian Date (or in the case of UTC a\n+        quasi-JD form that includes special provision for leap seconds).\n+\n+        Given:\n+           scale     char[]  time scale ID (Note 1)\n+           ndp       int     resolution (Note 2)\n+           d1,d2     double  time as a 2-part Julian Date (Notes 3,4)\n+\n+        Returned:\n+           iy,im,id  int     year, month, day in Gregorian calendar (Note 5)\n+           ihmsf     int[4]  hours, minutes, seconds, fraction (Note 1)\n+\n+        Returned (function value):\n+                     int     status: +1 = dubious year (Note 5)\n+                                      0 = OK\n+                                     -1 = unacceptable date (Note 6)\n+\n+        Notes:\n+\n+        1) scale identifies the time scale.  Only the value \"UTC\" (in upper\n+           case) is significant, and enables handling of leap seconds (see\n+           Note 4).\n+\n+        2) ndp is the number of decimal places in the seconds field, and can\n+           have negative as well as positive values, such as:\n+\n+           ndp         resolution\n+           -4            1 00 00\n+           -3            0 10 00\n+           -2            0 01 00\n+           -1            0 00 10\n+            0            0 00 01\n+            1            0 00 00.1\n+            2            0 00 00.01\n+            3            0 00 00.001\n+\n+           The limits are platform dependent, but a safe range is -5 to +9.\n+\n+        3) d1+d2 is Julian Date, apportioned in any convenient way between\n+           the two arguments, for example where d1 is the Julian Day Number\n+           and d2 is the fraction of a day.  In the case of UTC, where the\n+           use of JD is problematical, special conventions apply:  see the\n+           next note.\n+\n+        4) JD cannot unambiguously represent UTC during a leap second unless\n+           special measures are taken.  The ERFA internal convention is that\n+           the quasi-JD day represents UTC days whether the length is 86399,\n+           86400 or 86401 SI seconds.  In the 1960-1972 era there were\n+           smaller jumps (in either direction) each time the linear UTC(TAI)\n+           expression was changed, and these \"mini-leaps\" are also included\n+           in the ERFA convention.\n+\n+        5) The warning status \"dubious year\" flags UTCs that predate the\n+           introduction of the time scale or that are too far in the future\n+           to be trusted.  See eraDat for further details.\n+\n+        6) For calendar conventions and limitations, see eraCal2jd.\n+\n+        Called:\n+           eraJd2cal    JD to Gregorian calendar\n+           eraD2tf      decompose days to hms\n+           eraDat       delta(AT) = TAI-UTC\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    iy, im, id, ihmsf, c_retval = ufunc.d2dtf(scale, ndp, d1, d2)\n+    check_errwarn(c_retval, 'd2dtf')\n+    return iy, im, id, ihmsf\n+\n+\n+STATUS_CODES['d2dtf'] = {\n+    1: 'dubious year (Note 5)',\n+    0: 'OK',\n+    -1: 'unacceptable date (Note 6)',\n+}\n+\n+\n+def dat(iy, im, id, fd):\n+    \"\"\"\n+    For a given UTC date, calculate Delta(AT) = TAI-UTC.\n+\n+    Parameters\n+    ----------\n+    iy : int array\n+    im : int array\n+    id : int array\n+    fd : double array\n+\n+    Returns\n+    -------\n+    deltat : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraDat``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a D a t\n+        - - - - - - -\n+\n+        For a given UTC date, calculate Delta(AT) = TAI-UTC.\n+\n+           :------------------------------------------:\n+           :                                          :\n+           :                 IMPORTANT                :\n+           :                                          :\n+           :  A new version of this function must be  :\n+           :  produced whenever a new leap second is  :\n+           :  announced.  There are four items to     :\n+           :  change on each such occasion:           :\n+           :                                          :\n+           :  1) A new line must be added to the set  :\n+           :     of statements that initialize the    :\n+           :     array \"changes\".                     :\n+           :                                          :\n+           :  2) The constant IYV must be set to the  :\n+           :     current year.                        :\n+           :                                          :\n+           :  3) The \"Latest leap second\" comment     :\n+           :     below must be set to the new leap    :\n+           :     second date.                         :\n+           :                                          :\n+           :  4) The \"This revision\" comment, later,  :\n+           :     must be set to the current date.     :\n+           :                                          :\n+           :  Change (2) must also be carried out     :\n+           :  whenever the function is re-issued,     :\n+           :  even if no leap seconds have been       :\n+           :  added.                                  :\n+           :                                          :\n+           :  Latest leap second:  2016 December 31   :\n+           :                                          :\n+           :__________________________________________:\n+\n+        Given:\n+           iy     int      UTC:  year (Notes 1 and 2)\n+           im     int            month (Note 2)\n+           id     int            day (Notes 2 and 3)\n+           fd     double         fraction of day (Note 4)\n+\n+        Returned:\n+           deltat double   TAI minus UTC, seconds\n+\n+        Returned (function value):\n+                  int      status (Note 5):\n+                             1 = dubious year (Note 1)\n+                             0 = OK\n+                            -1 = bad year\n+                            -2 = bad month\n+                            -3 = bad day (Note 3)\n+                            -4 = bad fraction (Note 4)\n+                            -5 = internal error (Note 5)\n+\n+        Notes:\n+\n+        1) UTC began at 1960 January 1.0 (JD 2436934.5) and it is improper\n+           to call the function with an earlier date.  If this is attempted,\n+           zero is returned together with a warning status.\n+\n+           Because leap seconds cannot, in principle, be predicted in\n+           advance, a reliable check for dates beyond the valid range is\n+           impossible.  To guard against gross errors, a year five or more\n+           after the release year of the present function (see the constant\n+           IYV) is considered dubious.  In this case a warning status is\n+           returned but the result is computed in the normal way.\n+\n+           For both too-early and too-late years, the warning status is +1.\n+           This is distinct from the error status -1, which signifies a year\n+           so early that JD could not be computed.\n+\n+        2) If the specified date is for a day which ends with a leap second,\n+           the TAI-UTC value returned is for the period leading up to the\n+           leap second.  If the date is for a day which begins as a leap\n+           second ends, the TAI-UTC returned is for the period following the\n+           leap second.\n+\n+        3) The day number must be in the normal calendar range, for example\n+           1 through 30 for April.  The \"almanac\" convention of allowing\n+           such dates as January 0 and December 32 is not supported in this\n+           function, in order to avoid confusion near leap seconds.\n+\n+        4) The fraction of day is used only for dates before the\n+           introduction of leap seconds, the first of which occurred at the\n+           end of 1971.  It is tested for validity (0 to 1 is the valid\n+           range) even if not used;  if invalid, zero is used and status -4\n+           is returned.  For many applications, setting fd to zero is\n+           acceptable;  the resulting error is always less than 3 ms (and\n+           occurs only pre-1972).\n+\n+        5) The status value returned in the case where there are multiple\n+           errors refers to the first error detected.  For example, if the\n+           month and day are 13 and 32 respectively, status -2 (bad month)\n+           will be returned.  The \"internal error\" status refers to a\n+           case that is impossible but causes some compilers to issue a\n+           warning.\n+\n+        6) In cases where a valid result is not available, zero is returned.\n+\n+        References:\n+\n+        1) For dates from 1961 January 1 onwards, the expressions from the\n+           file ftp://maia.usno.navy.mil/ser7/tai-utc.dat are used.\n+\n+        2) The 5ms timestep at 1961 January 1 is taken from 2.58.1 (p87) of\n+           the 1992 Explanatory Supplement.\n+\n+        Called:\n+           eraCal2jd    Gregorian calendar to JD\n+\n+        This revision:  2023 January 17\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    deltat, c_retval = ufunc.dat(iy, im, id, fd)\n+    check_errwarn(c_retval, 'dat')\n+    return deltat\n+\n+\n+STATUS_CODES['dat'] = {\n+    1: 'dubious year (Note 1)',\n+    0: 'OK',\n+    -1: 'bad year',\n+    -2: 'bad month',\n+    -3: 'bad day (Note 3)',\n+    -4: 'bad fraction (Note 4)',\n+    -5: 'internal error (Note 5)',\n+}\n+\n+\n+def dtdb(date1, date2, ut, elong, u, v):\n+    \"\"\"\n+    An approximation to TDB-TT, the difference between barycentric\n+    dynamical time and terrestrial time, for an observer on the Earth.\n+\n+    Parameters\n+    ----------\n+    date1 : double array\n+    date2 : double array\n+    ut : double array\n+    elong : double array\n+    u : double array\n+    v : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraDtdb``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a D t d b\n+        - - - - - - - -\n+\n+        An approximation to TDB-TT, the difference between barycentric\n+        dynamical time and terrestrial time, for an observer on the Earth.\n+\n+        The different time scales - proper, coordinate and realized - are\n+        related to each other:\n+\n+                  TAI             <-  physically realized\n+                   :\n+                offset            <-  observed (nominally +32.184s)\n+                   :\n+                  TT              <-  terrestrial time\n+                   :\n+          rate adjustment (L_G)   <-  definition of TT\n+                   :\n+                  TCG             <-  time scale for GCRS\n+                   :\n+            \"periodic\" terms      <-  eraDtdb  is an implementation\n+                   :\n+          rate adjustment (L_C)   <-  function of solar-system ephemeris\n+                   :\n+                  TCB             <-  time scale for BCRS\n+                   :\n+          rate adjustment (-L_B)  <-  definition of TDB\n+                   :\n+                  TDB             <-  TCB scaled to track TT\n+                   :\n+            \"periodic\" terms      <-  -eraDtdb is an approximation\n+                   :\n+                  TT              <-  terrestrial time\n+\n+        Adopted values for the various constants can be found in the IERS\n+        Conventions (McCarthy & Petit 2003).\n+\n+        Given:\n+           date1,date2   double  date, TDB (Notes 1-3)\n+           ut            double  universal time (UT1, fraction of one day)\n+           elong         double  longitude (east positive, radians)\n+           u             double  distance from Earth spin axis (km)\n+           v             double  distance north of equatorial plane (km)\n+\n+        Returned (function value):\n+                         double  TDB-TT (seconds)\n+\n+        Notes:\n+\n+        1) The date date1+date2 is a Julian Date, apportioned in any\n+           convenient way between the two arguments.  For example,\n+           JD(TT)=2450123.7 could be expressed in any of these ways,\n+           among others:\n+\n+                  date1          date2\n+\n+               2450123.7           0.0       (JD method)\n+               2451545.0       -1421.3       (J2000 method)\n+               2400000.5       50123.2       (MJD method)\n+               2450123.5           0.2       (date & time method)\n+\n+           The JD method is the most natural and convenient to use in\n+           cases where the loss of several decimal digits of resolution\n+           is acceptable.  The J2000 method is best matched to the way\n+           the argument is handled internally and will deliver the\n+           optimum resolution.  The MJD method and the date & time methods\n+           are both good compromises between resolution and convenience.\n+\n+           Although the date is, formally, barycentric dynamical time (TDB),\n+           the terrestrial dynamical time (TT) can be used with no practical\n+           effect on the accuracy of the prediction.\n+\n+        2) TT can be regarded as a coordinate time that is realized as an\n+           offset of 32.184s from International Atomic Time, TAI.  TT is a\n+           specific linear transformation of geocentric coordinate time TCG,\n+           which is the time scale for the Geocentric Celestial Reference\n+           System, GCRS.\n+\n+        3) TDB is a coordinate time, and is a specific linear transformation\n+           of barycentric coordinate time TCB, which is the time scale for\n+           the Barycentric Celestial Reference System, BCRS.\n+\n+        4) The difference TCG-TCB depends on the masses and positions of the\n+           bodies of the solar system and the velocity of the Earth.  It is\n+           dominated by a rate difference, the residual being of a periodic\n+           character.  The latter, which is modeled by the present function,\n+           comprises a main (annual) sinusoidal term of amplitude\n+           approximately 0.00166 seconds, plus planetary terms up to about\n+           20 microseconds, and lunar and diurnal terms up to 2 microseconds.\n+           These effects come from the changing transverse Doppler effect\n+           and gravitational red-shift as the observer (on the Earth's\n+           surface) experiences variations in speed (with respect to the\n+           BCRS) and gravitational potential.\n+\n+        5) TDB can be regarded as the same as TCB but with a rate adjustment\n+           to keep it close to TT, which is convenient for many applications.\n+           The history of successive attempts to define TDB is set out in\n+           Resolution 3 adopted by the IAU General Assembly in 2006, which\n+           defines a fixed TDB(TCB) transformation that is consistent with\n+           contemporary solar-system ephemerides.  Future ephemerides will\n+           imply slightly changed transformations between TCG and TCB, which\n+           could introduce a linear drift between TDB and TT;  however, any\n+           such drift is unlikely to exceed 1 nanosecond per century.\n+\n+        6) The geocentric TDB-TT model used in the present function is that of\n+           Fairhead & Bretagnon (1990), in its full form.  It was originally\n+           supplied by Fairhead (private communications with P.T.Wallace,\n+           1990) as a Fortran subroutine.  The present C function contains an\n+           adaptation of the Fairhead code.  The numerical results are\n+           essentially unaffected by the changes, the differences with\n+           respect to the Fairhead & Bretagnon original being at the 1e-20 s\n+           level.\n+\n+           The topocentric part of the model is from Moyer (1981) and\n+           Murray (1983), with fundamental arguments adapted from\n+           Simon et al. 1994.  It is an approximation to the expression\n+           ( v / c ) . ( r / c ), where v is the barycentric velocity of\n+           the Earth, r is the geocentric position of the observer and\n+           c is the speed of light.\n+\n+           By supplying zeroes for u and v, the topocentric part of the\n+           model can be nullified, and the function will return the Fairhead\n+           & Bretagnon result alone.\n+\n+        7) During the interval 1950-2050, the absolute accuracy is better\n+           than +/- 3 nanoseconds relative to time ephemerides obtained by\n+           direct numerical integrations based on the JPL DE405 solar system\n+           ephemeris.\n+\n+        8) It must be stressed that the present function is merely a model,\n+           and that numerical integration of solar-system ephemerides is the\n+           definitive method for predicting the relationship between TCG and\n+           TCB and hence between TT and TDB.\n+\n+        References:\n+\n+           Fairhead, L., & Bretagnon, P., Astron.Astrophys., 229, 240-247\n+           (1990).\n+\n+           IAU 2006 Resolution 3.\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Moyer, T.D., Cel.Mech., 23, 33 (1981).\n+\n+           Murray, C.A., Vectorial Astrometry, Adam Hilger (1983).\n+\n+           Seidelmann, P.K. et al., Explanatory Supplement to the\n+           Astronomical Almanac, Chapter 2, University Science Books (1992).\n+\n+           Simon, J.L., Bretagnon, P., Chapront, J., Chapront-Touze, M.,\n+           Francou, G. & Laskar, J., Astron.Astrophys., 282, 663-683 (1994).\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.dtdb(date1, date2, ut, elong, u, v)\n+    return c_retval\n+\n+\n+def dtf2d(scale, iy, im, id, ihr, imn, sec):\n+    \"\"\"\n+    Encode date and time fields into 2-part Julian Date (or in the case\n+    of UTC a quasi-JD form that includes special provision for leap\n+    seconds).\n+\n+    Parameters\n+    ----------\n+    scale : const char array\n+    iy : int array\n+    im : int array\n+    id : int array\n+    ihr : int array\n+    imn : int array\n+    sec : double array\n+\n+    Returns\n+    -------\n+    d1 : double array\n+    d2 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraDtf2d``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a D t f 2 d\n+        - - - - - - - - -\n+\n+        Encode date and time fields into 2-part Julian Date (or in the case\n+        of UTC a quasi-JD form that includes special provision for leap\n+        seconds).\n+\n+        Given:\n+           scale     char[]  time scale ID (Note 1)\n+           iy,im,id  int     year, month, day in Gregorian calendar (Note 2)\n+           ihr,imn   int     hour, minute\n+           sec       double  seconds\n+\n+        Returned:\n+           d1,d2     double  2-part Julian Date (Notes 3,4)\n+\n+        Returned (function value):\n+                     int     status: +3 = both of next two\n+                                     +2 = time is after end of day (Note 5)\n+                                     +1 = dubious year (Note 6)\n+                                      0 = OK\n+                                     -1 = bad year\n+                                     -2 = bad month\n+                                     -3 = bad day\n+                                     -4 = bad hour\n+                                     -5 = bad minute\n+                                     -6 = bad second (<0)\n+\n+        Notes:\n+\n+        1) scale identifies the time scale.  Only the value \"UTC\" (in upper\n+           case) is significant, and enables handling of leap seconds (see\n+           Note 4).\n+\n+        2) For calendar conventions and limitations, see eraCal2jd.\n+\n+        3) The sum of the results, d1+d2, is Julian Date, where normally d1\n+           is the Julian Day Number and d2 is the fraction of a day.  In the\n+           case of UTC, where the use of JD is problematical, special\n+           conventions apply:  see the next note.\n+\n+        4) JD cannot unambiguously represent UTC during a leap second unless\n+           special measures are taken.  The ERFA internal convention is that\n+           the quasi-JD day represents UTC days whether the length is 86399,\n+           86400 or 86401 SI seconds.  In the 1960-1972 era there were\n+           smaller jumps (in either direction) each time the linear UTC(TAI)\n+           expression was changed, and these \"mini-leaps\" are also included\n+           in the ERFA convention.\n+\n+        5) The warning status \"time is after end of day\" usually means that\n+           the sec argument is greater than 60.0.  However, in a day ending\n+           in a leap second the limit changes to 61.0 (or 59.0 in the case\n+           of a negative leap second).\n+\n+        6) The warning status \"dubious year\" flags UTCs that predate the\n+           introduction of the time scale or that are too far in the future\n+           to be trusted.  See eraDat for further details.\n+\n+        7) Only in the case of continuous and regular time scales (TAI, TT,\n+           TCG, TCB and TDB) is the result d1+d2 a Julian Date, strictly\n+           speaking.  In the other cases (UT1 and UTC) the result must be\n+           used with circumspection;  in particular the difference between\n+           two such results cannot be interpreted as a precise time\n+           interval.\n+\n+        Called:\n+           eraCal2jd    Gregorian calendar to JD\n+           eraDat       delta(AT) = TAI-UTC\n+           eraJd2cal    JD to Gregorian calendar\n+\n+        This revision:  2023 May 6\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    d1, d2, c_retval = ufunc.dtf2d(scale, iy, im, id, ihr, imn, sec)\n+    check_errwarn(c_retval, 'dtf2d')\n+    return d1, d2\n+\n+\n+STATUS_CODES['dtf2d'] = {\n+    3: 'both of next two',\n+    2: 'time is after end of day (Note 5)',\n+    1: 'dubious year (Note 6)',\n+    0: 'OK',\n+    -1: 'bad year',\n+    -2: 'bad month',\n+    -3: 'bad day',\n+    -4: 'bad hour',\n+    -5: 'bad minute',\n+    -6: 'bad second (<0)',\n+}\n+\n+\n+def taitt(tai1, tai2):\n+    \"\"\"\n+    Time scale transformation:  International Atomic Time, TAI, to\n+    Terrestrial Time, TT.\n+\n+    Parameters\n+    ----------\n+    tai1 : double array\n+    tai2 : double array\n+\n+    Returns\n+    -------\n+    tt1 : double array\n+    tt2 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTaitt``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a T a i t t\n+        - - - - - - - - -\n+\n+        Time scale transformation:  International Atomic Time, TAI, to\n+        Terrestrial Time, TT.\n+\n+        Given:\n+           tai1,tai2  double    TAI as a 2-part Julian Date\n+\n+        Returned:\n+           tt1,tt2    double    TT as a 2-part Julian Date\n+\n+        Returned (function value):\n+                      int       status:  0 = OK\n+\n+        Note:\n+\n+           tai1+tai2 is Julian Date, apportioned in any convenient way\n+           between the two arguments, for example where tai1 is the Julian\n+           Day Number and tai2 is the fraction of a day.  The returned\n+           tt1,tt2 follow suit.\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    tt1, tt2, c_retval = ufunc.taitt(tai1, tai2)\n+    check_errwarn(c_retval, 'taitt')\n+    return tt1, tt2\n+\n+\n+STATUS_CODES['taitt'] = {\n+    0: 'OK',\n+}\n+\n+\n+def taiut1(tai1, tai2, dta):\n+    \"\"\"\n+    Time scale transformation:  International Atomic Time, TAI, to\n+    Universal Time, UT1.\n+\n+    Parameters\n+    ----------\n+    tai1 : double array\n+    tai2 : double array\n+    dta : double array\n+\n+    Returns\n+    -------\n+    ut11 : double array\n+    ut12 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTaiut1``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a T a i u t 1\n+        - - - - - - - - - -\n+\n+        Time scale transformation:  International Atomic Time, TAI, to\n+        Universal Time, UT1.\n+\n+        Given:\n+           tai1,tai2  double    TAI as a 2-part Julian Date\n+           dta        double    UT1-TAI in seconds\n+\n+        Returned:\n+           ut11,ut12  double    UT1 as a 2-part Julian Date\n+\n+        Returned (function value):\n+                      int       status:  0 = OK\n+\n+        Notes:\n+\n+        1) tai1+tai2 is Julian Date, apportioned in any convenient way\n+           between the two arguments, for example where tai1 is the Julian\n+           Day Number and tai2 is the fraction of a day.  The returned\n+           UT11,UT12 follow suit.\n+\n+        2) The argument dta, i.e. UT1-TAI, is an observed quantity, and is\n+           available from IERS tabulations.\n+\n+        Reference:\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    ut11, ut12, c_retval = ufunc.taiut1(tai1, tai2, dta)\n+    check_errwarn(c_retval, 'taiut1')\n+    return ut11, ut12\n+\n+\n+STATUS_CODES['taiut1'] = {\n+    0: 'OK',\n+}\n+\n+\n+def taiutc(tai1, tai2):\n+    \"\"\"\n+    Time scale transformation:  International Atomic Time, TAI, to\n+    Coordinated Universal Time, UTC.\n+\n+    Parameters\n+    ----------\n+    tai1 : double array\n+    tai2 : double array\n+\n+    Returns\n+    -------\n+    utc1 : double array\n+    utc2 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTaiutc``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a T a i u t c\n+        - - - - - - - - - -\n+\n+        Time scale transformation:  International Atomic Time, TAI, to\n+        Coordinated Universal Time, UTC.\n+\n+        Given:\n+           tai1,tai2  double   TAI as a 2-part Julian Date (Note 1)\n+\n+        Returned:\n+           utc1,utc2  double   UTC as a 2-part quasi Julian Date (Notes 1-3)\n+\n+        Returned (function value):\n+                      int      status: +1 = dubious year (Note 4)\n+                                        0 = OK\n+                                       -1 = unacceptable date\n+\n+        Notes:\n+\n+        1) tai1+tai2 is Julian Date, apportioned in any convenient way\n+           between the two arguments, for example where tai1 is the Julian\n+           Day Number and tai2 is the fraction of a day.  The returned utc1\n+           and utc2 form an analogous pair, except that a special convention\n+           is used, to deal with the problem of leap seconds - see the next\n+           note.\n+\n+        2) JD cannot unambiguously represent UTC during a leap second unless\n+           special measures are taken.  The convention in the present\n+           function is that the JD day represents UTC days whether the\n+           length is 86399, 86400 or 86401 SI seconds.  In the 1960-1972 era\n+           there were smaller jumps (in either direction) each time the\n+           linear UTC(TAI) expression was changed, and these \"mini-leaps\"\n+           are also included in the ERFA convention.\n+\n+        3) The function eraD2dtf can be used to transform the UTC quasi-JD\n+           into calendar date and clock time, including UTC leap second\n+           handling.\n+\n+        4) The warning status \"dubious year\" flags UTCs that predate the\n+           introduction of the time scale or that are too far in the future\n+           to be trusted.  See eraDat for further details.\n+\n+        Called:\n+           eraUtctai    UTC to TAI\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    utc1, utc2, c_retval = ufunc.taiutc(tai1, tai2)\n+    check_errwarn(c_retval, 'taiutc')\n+    return utc1, utc2\n+\n+\n+STATUS_CODES['taiutc'] = {\n+    1: 'dubious year (Note 4)',\n+    0: 'OK',\n+    -1: 'unacceptable date',\n+}\n+\n+\n+def tcbtdb(tcb1, tcb2):\n+    \"\"\"\n+    Time scale transformation:  Barycentric Coordinate Time, TCB, to\n+    Barycentric Dynamical Time, TDB.\n+\n+    Parameters\n+    ----------\n+    tcb1 : double array\n+    tcb2 : double array\n+\n+    Returns\n+    -------\n+    tdb1 : double array\n+    tdb2 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTcbtdb``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a T c b t d b\n+        - - - - - - - - - -\n+\n+        Time scale transformation:  Barycentric Coordinate Time, TCB, to\n+        Barycentric Dynamical Time, TDB.\n+\n+        Given:\n+           tcb1,tcb2  double    TCB as a 2-part Julian Date\n+\n+        Returned:\n+           tdb1,tdb2  double    TDB as a 2-part Julian Date\n+\n+        Returned (function value):\n+                      int       status:  0 = OK\n+\n+        Notes:\n+\n+        1) tcb1+tcb2 is Julian Date, apportioned in any convenient way\n+           between the two arguments, for example where tcb1 is the Julian\n+           Day Number and tcb2 is the fraction of a day.  The returned\n+           tdb1,tdb2 follow suit.\n+\n+        2) The 2006 IAU General Assembly introduced a conventional linear\n+           transformation between TDB and TCB.  This transformation\n+           compensates for the drift between TCB and terrestrial time TT,\n+           and keeps TDB approximately centered on TT.  Because the\n+           relationship between TT and TCB depends on the adopted solar\n+           system ephemeris, the degree of alignment between TDB and TT over\n+           long intervals will vary according to which ephemeris is used.\n+           Former definitions of TDB attempted to avoid this problem by\n+           stipulating that TDB and TT should differ only by periodic\n+           effects.  This is a good description of the nature of the\n+           relationship but eluded precise mathematical formulation.  The\n+           conventional linear relationship adopted in 2006 sidestepped\n+           these difficulties whilst delivering a TDB that in practice was\n+           consistent with values before that date.\n+\n+        3) TDB is essentially the same as Teph, the time argument for the\n+           JPL solar system ephemerides.\n+\n+        Reference:\n+\n+           IAU 2006 Resolution B3\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    tdb1, tdb2, c_retval = ufunc.tcbtdb(tcb1, tcb2)\n+    check_errwarn(c_retval, 'tcbtdb')\n+    return tdb1, tdb2\n+\n+\n+STATUS_CODES['tcbtdb'] = {\n+    0: 'OK',\n+}\n+\n+\n+def tcgtt(tcg1, tcg2):\n+    \"\"\"\n+    Time scale transformation:  Geocentric Coordinate Time, TCG, to\n+    Terrestrial Time, TT.\n+\n+    Parameters\n+    ----------\n+    tcg1 : double array\n+    tcg2 : double array\n+\n+    Returns\n+    -------\n+    tt1 : double array\n+    tt2 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTcgtt``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a T c g t t\n+        - - - - - - - - -\n+\n+        Time scale transformation:  Geocentric Coordinate Time, TCG, to\n+        Terrestrial Time, TT.\n+\n+        Given:\n+           tcg1,tcg2  double    TCG as a 2-part Julian Date\n+\n+        Returned:\n+           tt1,tt2    double    TT as a 2-part Julian Date\n+\n+        Returned (function value):\n+                      int       status:  0 = OK\n+\n+        Note:\n+\n+           tcg1+tcg2 is Julian Date, apportioned in any convenient way\n+           between the two arguments, for example where tcg1 is the Julian\n+           Day Number and tcg22 is the fraction of a day.  The returned\n+           tt1,tt2 follow suit.\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           IAU 2000 Resolution B1.9\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    tt1, tt2, c_retval = ufunc.tcgtt(tcg1, tcg2)\n+    check_errwarn(c_retval, 'tcgtt')\n+    return tt1, tt2\n+\n+\n+STATUS_CODES['tcgtt'] = {\n+    0: 'OK',\n+}\n+\n+\n+def tdbtcb(tdb1, tdb2):\n+    \"\"\"\n+    Time scale transformation:  Barycentric Dynamical Time, TDB, to\n+    Barycentric Coordinate Time, TCB.\n+\n+    Parameters\n+    ----------\n+    tdb1 : double array\n+    tdb2 : double array\n+\n+    Returns\n+    -------\n+    tcb1 : double array\n+    tcb2 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTdbtcb``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a T d b t c b\n+        - - - - - - - - - -\n+\n+        Time scale transformation:  Barycentric Dynamical Time, TDB, to\n+        Barycentric Coordinate Time, TCB.\n+\n+        Given:\n+           tdb1,tdb2  double    TDB as a 2-part Julian Date\n+\n+        Returned:\n+           tcb1,tcb2  double    TCB as a 2-part Julian Date\n+\n+        Returned (function value):\n+                      int       status:  0 = OK\n+\n+        Notes:\n+\n+        1) tdb1+tdb2 is Julian Date, apportioned in any convenient way\n+           between the two arguments, for example where tdb1 is the Julian\n+           Day Number and tdb2 is the fraction of a day.  The returned\n+           tcb1,tcb2 follow suit.\n+\n+        2) The 2006 IAU General Assembly introduced a conventional linear\n+           transformation between TDB and TCB.  This transformation\n+           compensates for the drift between TCB and terrestrial time TT,\n+           and keeps TDB approximately centered on TT.  Because the\n+           relationship between TT and TCB depends on the adopted solar\n+           system ephemeris, the degree of alignment between TDB and TT over\n+           long intervals will vary according to which ephemeris is used.\n+           Former definitions of TDB attempted to avoid this problem by\n+           stipulating that TDB and TT should differ only by periodic\n+           effects.  This is a good description of the nature of the\n+           relationship but eluded precise mathematical formulation.  The\n+           conventional linear relationship adopted in 2006 sidestepped\n+           these difficulties whilst delivering a TDB that in practice was\n+           consistent with values before that date.\n+\n+        3) TDB is essentially the same as Teph, the time argument for the\n+           JPL solar system ephemerides.\n+\n+        Reference:\n+\n+           IAU 2006 Resolution B3\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    tcb1, tcb2, c_retval = ufunc.tdbtcb(tdb1, tdb2)\n+    check_errwarn(c_retval, 'tdbtcb')\n+    return tcb1, tcb2\n+\n+\n+STATUS_CODES['tdbtcb'] = {\n+    0: 'OK',\n+}\n+\n+\n+def tdbtt(tdb1, tdb2, dtr):\n+    \"\"\"\n+    Time scale transformation:  Barycentric Dynamical Time, TDB, to\n+    Terrestrial Time, TT.\n+\n+    Parameters\n+    ----------\n+    tdb1 : double array\n+    tdb2 : double array\n+    dtr : double array\n+\n+    Returns\n+    -------\n+    tt1 : double array\n+    tt2 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTdbtt``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a T d b t t\n+        - - - - - - - - -\n+\n+        Time scale transformation:  Barycentric Dynamical Time, TDB, to\n+        Terrestrial Time, TT.\n+\n+        Given:\n+           tdb1,tdb2  double    TDB as a 2-part Julian Date\n+           dtr        double    TDB-TT in seconds\n+\n+        Returned:\n+           tt1,tt2    double    TT as a 2-part Julian Date\n+\n+        Returned (function value):\n+                      int       status:  0 = OK\n+\n+        Notes:\n+\n+        1) tdb1+tdb2 is Julian Date, apportioned in any convenient way\n+           between the two arguments, for example where tdb1 is the Julian\n+           Day Number and tdb2 is the fraction of a day.  The returned\n+           tt1,tt2 follow suit.\n+\n+        2) The argument dtr represents the quasi-periodic component of the\n+           GR transformation between TT and TCB.  It is dependent upon the\n+           adopted solar-system ephemeris, and can be obtained by numerical\n+           integration, by interrogating a precomputed time ephemeris or by\n+           evaluating a model such as that implemented in the ERFA function\n+           eraDtdb.   The quantity is dominated by an annual term of 1.7 ms\n+           amplitude.\n+\n+        3) TDB is essentially the same as Teph, the time argument for the\n+           JPL solar system ephemerides.\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           IAU 2006 Resolution 3\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    tt1, tt2, c_retval = ufunc.tdbtt(tdb1, tdb2, dtr)\n+    check_errwarn(c_retval, 'tdbtt')\n+    return tt1, tt2\n+\n+\n+STATUS_CODES['tdbtt'] = {\n+    0: 'OK',\n+}\n+\n+\n+def tttai(tt1, tt2):\n+    \"\"\"\n+    Time scale transformation:  Terrestrial Time, TT, to International\n+    Atomic Time, TAI.\n+\n+    Parameters\n+    ----------\n+    tt1 : double array\n+    tt2 : double array\n+\n+    Returns\n+    -------\n+    tai1 : double array\n+    tai2 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTttai``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a T t t a i\n+        - - - - - - - - -\n+\n+        Time scale transformation:  Terrestrial Time, TT, to International\n+        Atomic Time, TAI.\n+\n+        Given:\n+           tt1,tt2    double    TT as a 2-part Julian Date\n+\n+        Returned:\n+           tai1,tai2  double    TAI as a 2-part Julian Date\n+\n+        Returned (function value):\n+                      int       status:  0 = OK\n+\n+        Note:\n+\n+           tt1+tt2 is Julian Date, apportioned in any convenient way between\n+           the two arguments, for example where tt1 is the Julian Day Number\n+           and tt2 is the fraction of a day.  The returned tai1,tai2 follow\n+           suit.\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    tai1, tai2, c_retval = ufunc.tttai(tt1, tt2)\n+    check_errwarn(c_retval, 'tttai')\n+    return tai1, tai2\n+\n+\n+STATUS_CODES['tttai'] = {\n+    0: 'OK',\n+}\n+\n+\n+def tttcg(tt1, tt2):\n+    \"\"\"\n+    Time scale transformation:  Terrestrial Time, TT, to Geocentric\n+    Coordinate Time, TCG.\n+\n+    Parameters\n+    ----------\n+    tt1 : double array\n+    tt2 : double array\n+\n+    Returns\n+    -------\n+    tcg1 : double array\n+    tcg2 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTttcg``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a T t t c g\n+        - - - - - - - - -\n+\n+        Time scale transformation:  Terrestrial Time, TT, to Geocentric\n+        Coordinate Time, TCG.\n+\n+        Given:\n+           tt1,tt2    double    TT as a 2-part Julian Date\n+\n+        Returned:\n+           tcg1,tcg2  double    TCG as a 2-part Julian Date\n+\n+        Returned (function value):\n+                      int       status:  0 = OK\n+\n+        Note:\n+\n+           tt1+tt2 is Julian Date, apportioned in any convenient way between\n+           the two arguments, for example where tt1 is the Julian Day Number\n+           and tt2 is the fraction of a day.  The returned tcg1,tcg2 follow\n+           suit.\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           IAU 2000 Resolution B1.9\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    tcg1, tcg2, c_retval = ufunc.tttcg(tt1, tt2)\n+    check_errwarn(c_retval, 'tttcg')\n+    return tcg1, tcg2\n+\n+\n+STATUS_CODES['tttcg'] = {\n+    0: 'OK',\n+}\n+\n+\n+def tttdb(tt1, tt2, dtr):\n+    \"\"\"\n+    Time scale transformation:  Terrestrial Time, TT, to Barycentric\n+    Dynamical Time, TDB.\n+\n+    Parameters\n+    ----------\n+    tt1 : double array\n+    tt2 : double array\n+    dtr : double array\n+\n+    Returns\n+    -------\n+    tdb1 : double array\n+    tdb2 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTttdb``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a T t t d b\n+        - - - - - - - - -\n+\n+        Time scale transformation:  Terrestrial Time, TT, to Barycentric\n+        Dynamical Time, TDB.\n+\n+        Given:\n+           tt1,tt2    double    TT as a 2-part Julian Date\n+           dtr        double    TDB-TT in seconds\n+\n+        Returned:\n+           tdb1,tdb2  double    TDB as a 2-part Julian Date\n+\n+        Returned (function value):\n+                      int       status:  0 = OK\n+\n+        Notes:\n+\n+        1) tt1+tt2 is Julian Date, apportioned in any convenient way between\n+           the two arguments, for example where tt1 is the Julian Day Number\n+           and tt2 is the fraction of a day.  The returned tdb1,tdb2 follow\n+           suit.\n+\n+        2) The argument dtr represents the quasi-periodic component of the\n+           GR transformation between TT and TCB.  It is dependent upon the\n+           adopted solar-system ephemeris, and can be obtained by numerical\n+           integration, by interrogating a precomputed time ephemeris or by\n+           evaluating a model such as that implemented in the ERFA function\n+           eraDtdb.   The quantity is dominated by an annual term of 1.7 ms\n+           amplitude.\n+\n+        3) TDB is essentially the same as Teph, the time argument for the JPL\n+           solar system ephemerides.\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           IAU 2006 Resolution 3\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    tdb1, tdb2, c_retval = ufunc.tttdb(tt1, tt2, dtr)\n+    check_errwarn(c_retval, 'tttdb')\n+    return tdb1, tdb2\n+\n+\n+STATUS_CODES['tttdb'] = {\n+    0: 'OK',\n+}\n+\n+\n+def ttut1(tt1, tt2, dt):\n+    \"\"\"\n+    Time scale transformation:  Terrestrial Time, TT, to Universal Time,\n+    UT1.\n+\n+    Parameters\n+    ----------\n+    tt1 : double array\n+    tt2 : double array\n+    dt : double array\n+\n+    Returns\n+    -------\n+    ut11 : double array\n+    ut12 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTtut1``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a T t u t 1\n+        - - - - - - - - -\n+\n+        Time scale transformation:  Terrestrial Time, TT, to Universal Time,\n+        UT1.\n+\n+        Given:\n+           tt1,tt2    double    TT as a 2-part Julian Date\n+           dt         double    TT-UT1 in seconds\n+\n+        Returned:\n+           ut11,ut12  double    UT1 as a 2-part Julian Date\n+\n+        Returned (function value):\n+                      int       status:  0 = OK\n+\n+        Notes:\n+\n+        1) tt1+tt2 is Julian Date, apportioned in any convenient way between\n+           the two arguments, for example where tt1 is the Julian Day Number\n+           and tt2 is the fraction of a day.  The returned ut11,ut12 follow\n+           suit.\n+\n+        2) The argument dt is classical Delta T.\n+\n+        Reference:\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    ut11, ut12, c_retval = ufunc.ttut1(tt1, tt2, dt)\n+    check_errwarn(c_retval, 'ttut1')\n+    return ut11, ut12\n+\n+\n+STATUS_CODES['ttut1'] = {\n+    0: 'OK',\n+}\n+\n+\n+def ut1tai(ut11, ut12, dta):\n+    \"\"\"\n+    Time scale transformation:  Universal Time, UT1, to International\n+    Atomic Time, TAI.\n+\n+    Parameters\n+    ----------\n+    ut11 : double array\n+    ut12 : double array\n+    dta : double array\n+\n+    Returns\n+    -------\n+    tai1 : double array\n+    tai2 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraUt1tai``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a U t 1 t a i\n+        - - - - - - - - - -\n+\n+        Time scale transformation:  Universal Time, UT1, to International\n+        Atomic Time, TAI.\n+\n+        Given:\n+           ut11,ut12  double    UT1 as a 2-part Julian Date\n+           dta        double    UT1-TAI in seconds\n+\n+        Returned:\n+           tai1,tai2  double    TAI as a 2-part Julian Date\n+\n+        Returned (function value):\n+                      int       status:  0 = OK\n+\n+        Notes:\n+\n+        1) ut11+ut12 is Julian Date, apportioned in any convenient way\n+           between the two arguments, for example where ut11 is the Julian\n+           Day Number and ut12 is the fraction of a day.  The returned\n+           tai1,tai2 follow suit.\n+\n+        2) The argument dta, i.e. UT1-TAI, is an observed quantity, and is\n+           available from IERS tabulations.\n+\n+        Reference:\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    tai1, tai2, c_retval = ufunc.ut1tai(ut11, ut12, dta)\n+    check_errwarn(c_retval, 'ut1tai')\n+    return tai1, tai2\n+\n+\n+STATUS_CODES['ut1tai'] = {\n+    0: 'OK',\n+}\n+\n+\n+def ut1tt(ut11, ut12, dt):\n+    \"\"\"\n+    Time scale transformation:  Universal Time, UT1, to Terrestrial\n+    Time, TT.\n+\n+    Parameters\n+    ----------\n+    ut11 : double array\n+    ut12 : double array\n+    dt : double array\n+\n+    Returns\n+    -------\n+    tt1 : double array\n+    tt2 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraUt1tt``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a U t 1 t t\n+        - - - - - - - - -\n+\n+        Time scale transformation:  Universal Time, UT1, to Terrestrial\n+        Time, TT.\n+\n+        Given:\n+           ut11,ut12  double    UT1 as a 2-part Julian Date\n+           dt         double    TT-UT1 in seconds\n+\n+        Returned:\n+           tt1,tt2    double    TT as a 2-part Julian Date\n+\n+        Returned (function value):\n+                      int       status:  0 = OK\n+\n+        Notes:\n+\n+        1) ut11+ut12 is Julian Date, apportioned in any convenient way\n+           between the two arguments, for example where ut11 is the Julian\n+           Day Number and ut12 is the fraction of a day.  The returned\n+           tt1,tt2 follow suit.\n+\n+        2) The argument dt is classical Delta T.\n+\n+        Reference:\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    tt1, tt2, c_retval = ufunc.ut1tt(ut11, ut12, dt)\n+    check_errwarn(c_retval, 'ut1tt')\n+    return tt1, tt2\n+\n+\n+STATUS_CODES['ut1tt'] = {\n+    0: 'OK',\n+}\n+\n+\n+def ut1utc(ut11, ut12, dut1):\n+    \"\"\"\n+    Time scale transformation:  Universal Time, UT1, to Coordinated\n+    Universal Time, UTC.\n+\n+    Parameters\n+    ----------\n+    ut11 : double array\n+    ut12 : double array\n+    dut1 : double array\n+\n+    Returns\n+    -------\n+    utc1 : double array\n+    utc2 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraUt1utc``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a U t 1 u t c\n+        - - - - - - - - - -\n+\n+        Time scale transformation:  Universal Time, UT1, to Coordinated\n+        Universal Time, UTC.\n+\n+        Given:\n+           ut11,ut12  double   UT1 as a 2-part Julian Date (Note 1)\n+           dut1       double   Delta UT1: UT1-UTC in seconds (Note 2)\n+\n+        Returned:\n+           utc1,utc2  double   UTC as a 2-part quasi Julian Date (Notes 3,4)\n+\n+        Returned (function value):\n+                      int      status: +1 = dubious year (Note 5)\n+                                        0 = OK\n+                                       -1 = unacceptable date\n+\n+        Notes:\n+\n+        1) ut11+ut12 is Julian Date, apportioned in any convenient way\n+           between the two arguments, for example where ut11 is the Julian\n+           Day Number and ut12 is the fraction of a day.  The returned utc1\n+           and utc2 form an analogous pair, except that a special convention\n+           is used, to deal with the problem of leap seconds - see Note 3.\n+\n+        2) Delta UT1 can be obtained from tabulations provided by the\n+           International Earth Rotation and Reference Systems Service.  The\n+           value changes abruptly by 1s at a leap second;  however, close to\n+           a leap second the algorithm used here is tolerant of the \"wrong\"\n+           choice of value being made.\n+\n+        3) JD cannot unambiguously represent UTC during a leap second unless\n+           special measures are taken.  The convention in the present\n+           function is that the returned quasi-JD UTC1+UTC2 represents UTC\n+           days whether the length is 86399, 86400 or 86401 SI seconds.\n+\n+        4) The function eraD2dtf can be used to transform the UTC quasi-JD\n+           into calendar date and clock time, including UTC leap second\n+           handling.\n+\n+        5) The warning status \"dubious year\" flags UTCs that predate the\n+           introduction of the time scale or that are too far in the future\n+           to be trusted.  See eraDat for further details.\n+\n+        Called:\n+           eraJd2cal    JD to Gregorian calendar\n+           eraDat       delta(AT) = TAI-UTC\n+           eraCal2jd    Gregorian calendar to JD\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992)\n+\n+        This revision:  2023 May 6\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    utc1, utc2, c_retval = ufunc.ut1utc(ut11, ut12, dut1)\n+    check_errwarn(c_retval, 'ut1utc')\n+    return utc1, utc2\n+\n+\n+STATUS_CODES['ut1utc'] = {\n+    1: 'dubious year (Note 5)',\n+    0: 'OK',\n+    -1: 'unacceptable date',\n+}\n+\n+\n+def utctai(utc1, utc2):\n+    \"\"\"\n+    Time scale transformation:  Coordinated Universal Time, UTC, to\n+    International Atomic Time, TAI.\n+\n+    Parameters\n+    ----------\n+    utc1 : double array\n+    utc2 : double array\n+\n+    Returns\n+    -------\n+    tai1 : double array\n+    tai2 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraUtctai``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a U t c t a i\n+        - - - - - - - - - -\n+\n+        Time scale transformation:  Coordinated Universal Time, UTC, to\n+        International Atomic Time, TAI.\n+\n+        Given:\n+           utc1,utc2  double   UTC as a 2-part quasi Julian Date (Notes 1-4)\n+\n+        Returned:\n+           tai1,tai2  double   TAI as a 2-part Julian Date (Note 5)\n+\n+        Returned (function value):\n+                      int      status: +1 = dubious year (Note 3)\n+                                        0 = OK\n+                                       -1 = unacceptable date\n+\n+        Notes:\n+\n+        1) utc1+utc2 is quasi Julian Date (see Note 2), apportioned in any\n+           convenient way between the two arguments, for example where utc1\n+           is the Julian Day Number and utc2 is the fraction of a day.\n+\n+        2) JD cannot unambiguously represent UTC during a leap second unless\n+           special measures are taken.  The convention in the present\n+           function is that the JD day represents UTC days whether the\n+           length is 86399, 86400 or 86401 SI seconds.  In the 1960-1972 era\n+           there were smaller jumps (in either direction) each time the\n+           linear UTC(TAI) expression was changed, and these \"mini-leaps\"\n+           are also included in the ERFA convention.\n+\n+        3) The warning status \"dubious year\" flags UTCs that predate the\n+           introduction of the time scale or that are too far in the future\n+           to be trusted.  See eraDat for further details.\n+\n+        4) The function eraDtf2d converts from calendar date and time of day\n+           into 2-part Julian Date, and in the case of UTC implements the\n+           leap-second-ambiguity convention described above.\n+\n+        5) The returned TAI1,TAI2 are such that their sum is the TAI Julian\n+           Date.\n+\n+        Called:\n+           eraJd2cal    JD to Gregorian calendar\n+           eraDat       delta(AT) = TAI-UTC\n+           eraCal2jd    Gregorian calendar to JD\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992)\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    tai1, tai2, c_retval = ufunc.utctai(utc1, utc2)\n+    check_errwarn(c_retval, 'utctai')\n+    return tai1, tai2\n+\n+\n+STATUS_CODES['utctai'] = {\n+    1: 'dubious year (Note 3)',\n+    0: 'OK',\n+    -1: 'unacceptable date',\n+}\n+\n+\n+def utcut1(utc1, utc2, dut1):\n+    \"\"\"\n+    Time scale transformation:  Coordinated Universal Time, UTC, to\n+    Universal Time, UT1.\n+\n+    Parameters\n+    ----------\n+    utc1 : double array\n+    utc2 : double array\n+    dut1 : double array\n+\n+    Returns\n+    -------\n+    ut11 : double array\n+    ut12 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraUtcut1``. The ERFA documentation is::\n+\n+        - - - - - - - - - -\n+         e r a U t c u t 1\n+        - - - - - - - - - -\n+\n+        Time scale transformation:  Coordinated Universal Time, UTC, to\n+        Universal Time, UT1.\n+\n+        Given:\n+           utc1,utc2  double   UTC as a 2-part quasi Julian Date (Notes 1-4)\n+           dut1       double   Delta UT1 = UT1-UTC in seconds (Note 5)\n+\n+        Returned:\n+           ut11,ut12  double   UT1 as a 2-part Julian Date (Note 6)\n+\n+        Returned (function value):\n+                      int      status: +1 = dubious year (Note 3)\n+                                        0 = OK\n+                                       -1 = unacceptable date\n+\n+        Notes:\n+\n+        1) utc1+utc2 is quasi Julian Date (see Note 2), apportioned in any\n+           convenient way between the two arguments, for example where utc1\n+           is the Julian Day Number and utc2 is the fraction of a day.\n+\n+        2) JD cannot unambiguously represent UTC during a leap second unless\n+           special measures are taken.  The convention in the present\n+           function is that the JD day represents UTC days whether the\n+           length is 86399, 86400 or 86401 SI seconds.\n+\n+        3) The warning status \"dubious year\" flags UTCs that predate the\n+           introduction of the time scale or that are too far in the future\n+           to be trusted.  See eraDat for further details.\n+\n+        4) The function eraDtf2d converts from calendar date and time of\n+           day into 2-part Julian Date, and in the case of UTC implements\n+           the leap-second-ambiguity convention described above.\n+\n+        5) Delta UT1 can be obtained from tabulations provided by the\n+           International Earth Rotation and Reference Systems Service.\n+           It is the caller's responsibility to supply a dut1 argument\n+           containing the UT1-UTC value that matches the given UTC.\n+\n+        6) The returned ut11,ut12 are such that their sum is the UT1 Julian\n+           Date.\n+\n+        References:\n+\n+           McCarthy, D. D., Petit, G. (eds.), IERS Conventions (2003),\n+           IERS Technical Note No. 32, BKG (2004)\n+\n+           Explanatory Supplement to the Astronomical Almanac,\n+           P. Kenneth Seidelmann (ed), University Science Books (1992)\n+\n+        Called:\n+           eraJd2cal    JD to Gregorian calendar\n+           eraDat       delta(AT) = TAI-UTC\n+           eraUtctai    UTC to TAI\n+           eraTaiut1    TAI to UT1\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    ut11, ut12, c_retval = ufunc.utcut1(utc1, utc2, dut1)\n+    check_errwarn(c_retval, 'utcut1')\n+    return ut11, ut12\n+\n+\n+STATUS_CODES['utcut1'] = {\n+    1: 'dubious year (Note 3)',\n+    0: 'OK',\n+    -1: 'unacceptable date',\n+}\n+\n+\n+def ae2hd(az, el, phi):\n+    \"\"\"\n+    Horizon to equatorial coordinates:  transform azimuth and altitude\n+    to hour angle and declination.\n+\n+    Parameters\n+    ----------\n+    az : double array\n+    el : double array\n+    phi : double array\n+\n+    Returns\n+    -------\n+    ha : double array\n+    dec : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAe2hd``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a A e 2 h d\n+        - - - - - - - - -\n+\n+        Horizon to equatorial coordinates:  transform azimuth and altitude\n+        to hour angle and declination.\n+\n+        Given:\n+           az       double       azimuth\n+           el       double       altitude (informally, elevation)\n+           phi      double       site latitude\n+\n+        Returned:\n+           ha       double       hour angle (local)\n+           dec      double       declination\n+\n+        Notes:\n+\n+        1)  All the arguments are angles in radians.\n+\n+        2)  The sign convention for azimuth is north zero, east +pi/2.\n+\n+        3)  HA is returned in the range +/-pi.  Declination is returned in\n+            the range +/-pi/2.\n+\n+        4)  The latitude phi is pi/2 minus the angle between the Earth's\n+            rotation axis and the adopted zenith.  In many applications it\n+            will be sufficient to use the published geodetic latitude of the\n+            site.  In very precise (sub-arcsecond) applications, phi can be\n+            corrected for polar motion.\n+\n+        5)  The azimuth az must be with respect to the rotational north pole,\n+            as opposed to the ITRS pole, and an azimuth with respect to north\n+            on a map of the Earth's surface will need to be adjusted for\n+            polar motion if sub-arcsecond accuracy is required.\n+\n+        6)  Should the user wish to work with respect to the astronomical\n+            zenith rather than the geodetic zenith, phi will need to be\n+            adjusted for deflection of the vertical (often tens of\n+            arcseconds), and the zero point of ha will also be affected.\n+\n+        7)  The transformation is the same as Ve = Ry(phi-pi/2)*Rz(pi)*Vh,\n+            where Ve and Vh are lefthanded unit vectors in the (ha,dec) and\n+            (az,el) systems respectively and Rz and Ry are rotations about\n+            first the z-axis and then the y-axis.  (n.b. Rz(pi) simply\n+            reverses the signs of the x and y components.)  For efficiency,\n+            the algorithm is written out rather than calling other utility\n+            functions.  For applications that require even greater\n+            efficiency, additional savings are possible if constant terms\n+            such as functions of latitude are computed once and for all.\n+\n+        8)  Again for efficiency, no range checking of arguments is carried\n+            out.\n+\n+        Last revision:   2017 September 12\n+\n+        ERFA release 2023-10-11\n+\n+        Copyright (C) 2023 IAU ERFA Board.  See notes at end.\n+\n+    \"\"\"\n+    ha, dec = ufunc.ae2hd(az, el, phi)\n+    return ha, dec\n+\n+\n+def hd2ae(ha, dec, phi):\n+    \"\"\"\n+    Equatorial to horizon coordinates:  transform hour angle and\n+    declination to azimuth and altitude.\n+\n+    Parameters\n+    ----------\n+    ha : double array\n+    dec : double array\n+    phi : double array\n+\n+    Returns\n+    -------\n+    az : double array\n+    el : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraHd2ae``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a H d 2 a e\n+        - - - - - - - - -\n+\n+        Equatorial to horizon coordinates:  transform hour angle and\n+        declination to azimuth and altitude.\n+\n+        Given:\n+           ha       double       hour angle (local)\n+           dec      double       declination\n+           phi      double       site latitude\n+\n+        Returned:\n+           *az      double       azimuth\n+           *el      double       altitude (informally, elevation)\n+\n+        Notes:\n+\n+        1)  All the arguments are angles in radians.\n+\n+        2)  Azimuth is returned in the range 0-2pi;  north is zero, and east\n+            is +pi/2.  Altitude is returned in the range +/- pi/2.\n+\n+        3)  The latitude phi is pi/2 minus the angle between the Earth's\n+            rotation axis and the adopted zenith.  In many applications it\n+            will be sufficient to use the published geodetic latitude of the\n+            site.  In very precise (sub-arcsecond) applications, phi can be\n+            corrected for polar motion.\n+\n+        4)  The returned azimuth az is with respect to the rotational north\n+            pole, as opposed to the ITRS pole, and for sub-arcsecond\n+            accuracy will need to be adjusted for polar motion if it is to\n+            be with respect to north on a map of the Earth's surface.\n+\n+        5)  Should the user wish to work with respect to the astronomical\n+            zenith rather than the geodetic zenith, phi will need to be\n+            adjusted for deflection of the vertical (often tens of\n+            arcseconds), and the zero point of the hour angle ha will also\n+            be affected.\n+\n+        6)  The transformation is the same as Vh = Rz(pi)*Ry(pi/2-phi)*Ve,\n+            where Vh and Ve are lefthanded unit vectors in the (az,el) and\n+            (ha,dec) systems respectively and Ry and Rz are rotations about\n+            first the y-axis and then the z-axis.  (n.b. Rz(pi) simply\n+            reverses the signs of the x and y components.)  For efficiency,\n+            the algorithm is written out rather than calling other utility\n+            functions.  For applications that require even greater\n+            efficiency, additional savings are possible if constant terms\n+            such as functions of latitude are computed once and for all.\n+\n+        7)  Again for efficiency, no range checking of arguments is carried\n+            out.\n+\n+        Last revision:   2021 February 24\n+\n+        ERFA release 2023-10-11\n+\n+        Copyright (C) 2023 IAU ERFA Board.  See notes at end.\n+\n+    \"\"\"\n+    az, el = ufunc.hd2ae(ha, dec, phi)\n+    return az, el\n+\n+\n+def hd2pa(ha, dec, phi):\n+    \"\"\"\n+    Parallactic angle for a given hour angle and declination.\n+\n+    Parameters\n+    ----------\n+    ha : double array\n+    dec : double array\n+    phi : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraHd2pa``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a H d 2 p a\n+        - - - - - - - - -\n+\n+        Parallactic angle for a given hour angle and declination.\n+\n+        Given:\n+           ha     double     hour angle\n+           dec    double     declination\n+           phi    double     site latitude\n+\n+        Returned (function value):\n+                  double     parallactic angle\n+\n+        Notes:\n+\n+        1)  All the arguments are angles in radians.\n+\n+        2)  The parallactic angle at a point in the sky is the position\n+            angle of the vertical, i.e. the angle between the directions to\n+            the north celestial pole and to the zenith respectively.\n+\n+        3)  The result is returned in the range -pi to +pi.\n+\n+        4)  At the pole itself a zero result is returned.\n+\n+        5)  The latitude phi is pi/2 minus the angle between the Earth's\n+            rotation axis and the adopted zenith.  In many applications it\n+            will be sufficient to use the published geodetic latitude of the\n+            site.  In very precise (sub-arcsecond) applications, phi can be\n+            corrected for polar motion.\n+\n+        6)  Should the user wish to work with respect to the astronomical\n+            zenith rather than the geodetic zenith, phi will need to be\n+            adjusted for deflection of the vertical (often tens of\n+            arcseconds), and the zero point of the hour angle ha will also\n+            be affected.\n+\n+        Reference:\n+           Smart, W.M., \"Spherical Astronomy\", Cambridge University Press,\n+           6th edition (Green, 1977), p49.\n+\n+        Last revision:   2017 September 12\n+\n+        ERFA release 2023-10-11\n+\n+        Copyright (C) 2023 IAU ERFA Board.  See notes at end.\n+\n+    \"\"\"\n+    c_retval = ufunc.hd2pa(ha, dec, phi)\n+    return c_retval\n+\n+\n+def tpors(xi, eta, a, b):\n+    \"\"\"\n+    In the tangent plane projection, given the rectangular coordinates\n+    of a star and its spherical coordinates, determine the spherical\n+    coordinates of the tangent point.\n+\n+    Parameters\n+    ----------\n+    xi : double array\n+    eta : double array\n+    a : double array\n+    b : double array\n+\n+    Returns\n+    -------\n+    a01 : double array\n+    b01 : double array\n+    a02 : double array\n+    b02 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTpors``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a T p o r s\n+        - - - - - - - - -\n+\n+        In the tangent plane projection, given the rectangular coordinates\n+        of a star and its spherical coordinates, determine the spherical\n+        coordinates of the tangent point.\n+\n+        Given:\n+           xi,eta     double  rectangular coordinates of star image (Note 2)\n+           a,b        double  star's spherical coordinates (Note 3)\n+\n+        Returned:\n+           *a01,*b01  double  tangent point's spherical coordinates, Soln. 1\n+           *a02,*b02  double  tangent point's spherical coordinates, Soln. 2\n+\n+        Returned (function value):\n+                      int     number of solutions:\n+                              0 = no solutions returned (Note 5)\n+                              1 = only the first solution is useful (Note 6)\n+                              2 = both solutions are useful (Note 6)\n+\n+        Notes:\n+\n+        1) The tangent plane projection is also called the \"gnomonic\n+           projection\" and the \"central projection\".\n+\n+        2) The eta axis points due north in the adopted coordinate system.\n+           If the spherical coordinates are observed (RA,Dec), the tangent\n+           plane coordinates (xi,eta) are conventionally called the\n+           \"standard coordinates\".  If the spherical coordinates are with\n+           respect to a right-handed triad, (xi,eta) are also right-handed.\n+           The units of (xi,eta) are, effectively, radians at the tangent\n+           point.\n+\n+        3) All angular arguments are in radians.\n+\n+        4) The angles a01 and a02 are returned in the range 0-2pi.  The\n+           angles b01 and b02 are returned in the range +/-pi, but in the\n+           usual, non-pole-crossing, case, the range is +/-pi/2.\n+\n+        5) Cases where there is no solution can arise only near the poles.\n+           For example, it is clearly impossible for a star at the pole\n+           itself to have a non-zero xi value, and hence it is meaningless\n+           to ask where the tangent point would have to be to bring about\n+           this combination of xi and dec.\n+\n+        6) Also near the poles, cases can arise where there are two useful\n+           solutions.  The return value indicates whether the second of the\n+           two solutions returned is useful;  1 indicates only one useful\n+           solution, the usual case.\n+\n+        7) The basis of the algorithm is to solve the spherical triangle PSC,\n+           where P is the north celestial pole, S is the star and C is the\n+           tangent point.  The spherical coordinates of the tangent point are\n+           [a0,b0];  writing rho^2 = (xi^2+eta^2) and r^2 = (1+rho^2), side c\n+           is then (pi/2-b), side p is sqrt(xi^2+eta^2) and side s (to be\n+           found) is (pi/2-b0).  Angle C is given by sin(C) = xi/rho and\n+           cos(C) = eta/rho.  Angle P (to be found) is the longitude\n+           difference between star and tangent point (a-a0).\n+\n+        8) This function is a member of the following set:\n+\n+               spherical      vector         solve for\n+\n+               eraTpxes      eraTpxev         xi,eta\n+               eraTpsts      eraTpstv          star\n+             > eraTpors <    eraTporv         origin\n+\n+        Called:\n+           eraAnp       normalize angle into range 0 to 2pi\n+\n+        References:\n+\n+           Calabretta M.R. & Greisen, E.W., 2002, \"Representations of\n+           celestial coordinates in FITS\", Astron.Astrophys. 395, 1077\n+\n+           Green, R.M., \"Spherical Astronomy\", Cambridge University Press,\n+           1987, Chapter 13.\n+\n+        This revision:   2018 January 2\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    a01, b01, a02, b02, c_retval = ufunc.tpors(xi, eta, a, b)\n+    check_errwarn(c_retval, 'tpors')\n+    return a01, b01, a02, b02\n+\n+\n+def tporv(xi, eta, v):\n+    \"\"\"\n+    In the tangent plane projection, given the rectangular coordinates\n+    of a star and its direction cosines, determine the direction\n+    cosines of the tangent point.\n+\n+    Parameters\n+    ----------\n+    xi : double array\n+    eta : double array\n+    v : double array\n+\n+    Returns\n+    -------\n+    v01 : double array\n+    v02 : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTporv``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a T p o r v\n+        - - - - - - - - -\n+\n+        In the tangent plane projection, given the rectangular coordinates\n+        of a star and its direction cosines, determine the direction\n+        cosines of the tangent point.\n+\n+        Given:\n+           xi,eta   double    rectangular coordinates of star image (Note 2)\n+           v        double[3] star's direction cosines (Note 3)\n+\n+        Returned:\n+           v01      double[3] tangent point's direction cosines, Solution 1\n+           v02      double[3] tangent point's direction cosines, Solution 2\n+\n+        Returned (function value):\n+                      int     number of solutions:\n+                              0 = no solutions returned (Note 4)\n+                              1 = only the first solution is useful (Note 5)\n+                              2 = both solutions are useful (Note 5)\n+\n+        Notes:\n+\n+        1) The tangent plane projection is also called the \"gnomonic\n+           projection\" and the \"central projection\".\n+\n+        2) The eta axis points due north in the adopted coordinate system.\n+           If the direction cosines represent observed (RA,Dec), the tangent\n+           plane coordinates (xi,eta) are conventionally called the\n+           \"standard coordinates\".  If the direction cosines are with\n+           respect to a right-handed triad, (xi,eta) are also right-handed.\n+           The units of (xi,eta) are, effectively, radians at the tangent\n+           point.\n+\n+        3) The vector v must be of unit length or the result will be wrong.\n+\n+        4) Cases where there is no solution can arise only near the poles.\n+           For example, it is clearly impossible for a star at the pole\n+           itself to have a non-zero xi value, and hence it is meaningless\n+           to ask where the tangent point would have to be.\n+\n+        5) Also near the poles, cases can arise where there are two useful\n+           solutions.  The return value indicates whether the second of the\n+           two solutions returned is useful;  1 indicates only one useful\n+           solution, the usual case.\n+\n+        6) The basis of the algorithm is to solve the spherical triangle\n+           PSC, where P is the north celestial pole, S is the star and C is\n+           the tangent point.  Calling the celestial spherical coordinates\n+           of the star and tangent point (a,b) and (a0,b0) respectively, and\n+           writing rho^2 = (xi^2+eta^2) and r^2 = (1+rho^2), and\n+           transforming the vector v into (a,b) in the normal way, side c is\n+           then (pi/2-b), side p is sqrt(xi^2+eta^2) and side s (to be\n+           found) is (pi/2-b0), while angle C is given by sin(C) = xi/rho\n+           and cos(C) = eta/rho;  angle P (to be found) is (a-a0).  After\n+           solving the spherical triangle, the result (a0,b0) can be\n+           expressed in vector form as v0.\n+\n+        7) This function is a member of the following set:\n+\n+               spherical      vector         solve for\n+\n+               eraTpxes      eraTpxev         xi,eta\n+               eraTpsts      eraTpstv          star\n+               eraTpors    > eraTporv <       origin\n+\n+        References:\n+\n+           Calabretta M.R. & Greisen, E.W., 2002, \"Representations of\n+           celestial coordinates in FITS\", Astron.Astrophys. 395, 1077\n+\n+           Green, R.M., \"Spherical Astronomy\", Cambridge University Press,\n+           1987, Chapter 13.\n+\n+        This revision:   2018 January 2\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    v01, v02, c_retval = ufunc.tporv(xi, eta, v)\n+    check_errwarn(c_retval, 'tporv')\n+    return v01, v02\n+\n+\n+def tpsts(xi, eta, a0, b0):\n+    \"\"\"\n+    In the tangent plane projection, given the star's rectangular\n+    coordinates and the spherical coordinates of the tangent point,\n+    solve for the spherical coordinates of the star.\n+\n+    Parameters\n+    ----------\n+    xi : double array\n+    eta : double array\n+    a0 : double array\n+    b0 : double array\n+\n+    Returns\n+    -------\n+    a : double array\n+    b : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTpsts``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a T p s t s\n+        - - - - - - - - -\n+\n+        In the tangent plane projection, given the star's rectangular\n+        coordinates and the spherical coordinates of the tangent point,\n+        solve for the spherical coordinates of the star.\n+\n+        Given:\n+           xi,eta    double  rectangular coordinates of star image (Note 2)\n+           a0,b0     double  tangent point's spherical coordinates\n+\n+        Returned:\n+           *a,*b     double  star's spherical coordinates\n+\n+        1) The tangent plane projection is also called the \"gnomonic\n+           projection\" and the \"central projection\".\n+\n+        2) The eta axis points due north in the adopted coordinate system.\n+           If the spherical coordinates are observed (RA,Dec), the tangent\n+           plane coordinates (xi,eta) are conventionally called the\n+           \"standard coordinates\".  If the spherical coordinates are with\n+           respect to a right-handed triad, (xi,eta) are also right-handed.\n+           The units of (xi,eta) are, effectively, radians at the tangent\n+           point.\n+\n+        3) All angular arguments are in radians.\n+\n+        4) This function is a member of the following set:\n+\n+               spherical      vector         solve for\n+\n+               eraTpxes      eraTpxev         xi,eta\n+             > eraTpsts <    eraTpstv          star\n+               eraTpors      eraTporv         origin\n+\n+        Called:\n+           eraAnp       normalize angle into range 0 to 2pi\n+\n+        References:\n+\n+           Calabretta M.R. & Greisen, E.W., 2002, \"Representations of\n+           celestial coordinates in FITS\", Astron.Astrophys. 395, 1077\n+\n+           Green, R.M., \"Spherical Astronomy\", Cambridge University Press,\n+           1987, Chapter 13.\n+\n+        This revision:   2018 January 2\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    a, b = ufunc.tpsts(xi, eta, a0, b0)\n+    return a, b\n+\n+\n+def tpstv(xi, eta, v0):\n+    \"\"\"\n+    In the tangent plane projection, given the star's rectangular\n+    coordinates and the direction cosines of the tangent point, solve\n+    for the direction cosines of the star.\n+\n+    Parameters\n+    ----------\n+    xi : double array\n+    eta : double array\n+    v0 : double array\n+\n+    Returns\n+    -------\n+    v : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTpstv``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a T p s t v\n+        - - - - - - - - -\n+\n+        In the tangent plane projection, given the star's rectangular\n+        coordinates and the direction cosines of the tangent point, solve\n+        for the direction cosines of the star.\n+\n+        Given:\n+           xi,eta  double     rectangular coordinates of star image (Note 2)\n+           v0      double[3]  tangent point's direction cosines\n+\n+        Returned:\n+           v       double[3]  star's direction cosines\n+\n+        1) The tangent plane projection is also called the \"gnomonic\n+           projection\" and the \"central projection\".\n+\n+        2) The eta axis points due north in the adopted coordinate system.\n+           If the direction cosines represent observed (RA,Dec), the tangent\n+           plane coordinates (xi,eta) are conventionally called the\n+           \"standard coordinates\".  If the direction cosines are with\n+           respect to a right-handed triad, (xi,eta) are also right-handed.\n+           The units of (xi,eta) are, effectively, radians at the tangent\n+           point.\n+\n+        3) The method used is to complete the star vector in the (xi,eta)\n+           based triad and normalize it, then rotate the triad to put the\n+           tangent point at the pole with the x-axis aligned to zero\n+           longitude.  Writing (a0,b0) for the celestial spherical\n+           coordinates of the tangent point, the sequence of rotations is\n+           (b-pi/2) around the x-axis followed by (-a-pi/2) around the\n+           z-axis.\n+\n+        4) If vector v0 is not of unit length, the returned vector v will\n+           be wrong.\n+\n+        5) If vector v0 points at a pole, the returned vector v will be\n+           based on the arbitrary assumption that the longitude coordinate\n+           of the tangent point is zero.\n+\n+        6) This function is a member of the following set:\n+\n+               spherical      vector         solve for\n+\n+               eraTpxes      eraTpxev         xi,eta\n+               eraTpsts    > eraTpstv <        star\n+               eraTpors      eraTporv         origin\n+\n+        References:\n+\n+           Calabretta M.R. & Greisen, E.W., 2002, \"Representations of\n+           celestial coordinates in FITS\", Astron.Astrophys. 395, 1077\n+\n+           Green, R.M., \"Spherical Astronomy\", Cambridge University Press,\n+           1987, Chapter 13.\n+\n+        This revision:   2018 January 2\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    v = ufunc.tpstv(xi, eta, v0)\n+    return v\n+\n+\n+def tpxes(a, b, a0, b0):\n+    \"\"\"\n+    In the tangent plane projection, given celestial spherical\n+    coordinates for a star and the tangent point, solve for the star's\n+    rectangular coordinates in the tangent plane.\n+\n+    Parameters\n+    ----------\n+    a : double array\n+    b : double array\n+    a0 : double array\n+    b0 : double array\n+\n+    Returns\n+    -------\n+    xi : double array\n+    eta : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTpxes``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a T p x e s\n+        - - - - - - - - -\n+\n+        In the tangent plane projection, given celestial spherical\n+        coordinates for a star and the tangent point, solve for the star's\n+        rectangular coordinates in the tangent plane.\n+\n+        Given:\n+           a,b       double  star's spherical coordinates\n+           a0,b0     double  tangent point's spherical coordinates\n+\n+        Returned:\n+           *xi,*eta  double  rectangular coordinates of star image (Note 2)\n+\n+        Returned (function value):\n+                     int     status:  0 = OK\n+                                      1 = star too far from axis\n+                                      2 = antistar on tangent plane\n+                                      3 = antistar too far from axis\n+\n+        Notes:\n+\n+        1) The tangent plane projection is also called the \"gnomonic\n+           projection\" and the \"central projection\".\n+\n+        2) The eta axis points due north in the adopted coordinate system.\n+           If the spherical coordinates are observed (RA,Dec), the tangent\n+           plane coordinates (xi,eta) are conventionally called the\n+           \"standard coordinates\".  For right-handed spherical coordinates,\n+           (xi,eta) are also right-handed.  The units of (xi,eta) are,\n+           effectively, radians at the tangent point.\n+\n+        3) All angular arguments are in radians.\n+\n+        4) This function is a member of the following set:\n+\n+               spherical      vector         solve for\n+\n+             > eraTpxes <    eraTpxev         xi,eta\n+               eraTpsts      eraTpstv          star\n+               eraTpors      eraTporv         origin\n+\n+        References:\n+\n+           Calabretta M.R. & Greisen, E.W., 2002, \"Representations of\n+           celestial coordinates in FITS\", Astron.Astrophys. 395, 1077\n+\n+           Green, R.M., \"Spherical Astronomy\", Cambridge University Press,\n+           1987, Chapter 13.\n+\n+        This revision:   2018 January 2\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    xi, eta, c_retval = ufunc.tpxes(a, b, a0, b0)\n+    check_errwarn(c_retval, 'tpxes')\n+    return xi, eta\n+\n+\n+STATUS_CODES['tpxes'] = {\n+    0: 'OK',\n+    1: 'star too far from axis',\n+    2: 'antistar on tangent plane',\n+    3: 'antistar too far from axis',\n+}\n+\n+\n+def tpxev(v, v0):\n+    \"\"\"\n+    In the tangent plane projection, given celestial direction cosines\n+    for a star and the tangent point, solve for the star's rectangular\n+    coordinates in the tangent plane.\n+\n+    Parameters\n+    ----------\n+    v : double array\n+    v0 : double array\n+\n+    Returns\n+    -------\n+    xi : double array\n+    eta : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTpxev``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a T p x e v\n+        - - - - - - - - -\n+\n+        In the tangent plane projection, given celestial direction cosines\n+        for a star and the tangent point, solve for the star's rectangular\n+        coordinates in the tangent plane.\n+\n+        Given:\n+           v         double[3]  direction cosines of star (Note 4)\n+           v0        double[3]  direction cosines of tangent point (Note 4)\n+\n+        Returned:\n+           *xi,*eta  double     tangent plane coordinates of star\n+\n+        Returned (function value):\n+                     int        status: 0 = OK\n+                                        1 = star too far from axis\n+                                        2 = antistar on tangent plane\n+                                        3 = antistar too far from axis\n+\n+        Notes:\n+\n+        1) The tangent plane projection is also called the \"gnomonic\n+           projection\" and the \"central projection\".\n+\n+        2) The eta axis points due north in the adopted coordinate system.\n+           If the direction cosines represent observed (RA,Dec), the tangent\n+           plane coordinates (xi,eta) are conventionally called the\n+           \"standard coordinates\".  If the direction cosines are with\n+           respect to a right-handed triad, (xi,eta) are also right-handed.\n+           The units of (xi,eta) are, effectively, radians at the tangent\n+           point.\n+\n+        3) The method used is to extend the star vector to the tangent\n+           plane and then rotate the triad so that (x,y) becomes (xi,eta).\n+           Writing (a,b) for the celestial spherical coordinates of the\n+           star, the sequence of rotations is (a+pi/2) around the z-axis\n+           followed by (pi/2-b) around the x-axis.\n+\n+        4) If vector v0 is not of unit length, or if vector v is of zero\n+           length, the results will be wrong.\n+\n+        5) If v0 points at a pole, the returned (xi,eta) will be based on\n+           the arbitrary assumption that the longitude coordinate of the\n+           tangent point is zero.\n+\n+        6) This function is a member of the following set:\n+\n+               spherical      vector         solve for\n+\n+               eraTpxes    > eraTpxev <       xi,eta\n+               eraTpsts      eraTpstv          star\n+               eraTpors      eraTporv         origin\n+\n+        References:\n+\n+           Calabretta M.R. & Greisen, E.W., 2002, \"Representations of\n+           celestial coordinates in FITS\", Astron.Astrophys. 395, 1077\n+\n+           Green, R.M., \"Spherical Astronomy\", Cambridge University Press,\n+           1987, Chapter 13.\n+\n+        This revision:   2018 January 2\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    xi, eta, c_retval = ufunc.tpxev(v, v0)\n+    check_errwarn(c_retval, 'tpxev')\n+    return xi, eta\n+\n+\n+STATUS_CODES['tpxev'] = {\n+    0: 'OK',\n+    1: 'star too far from axis',\n+    2: 'antistar on tangent plane',\n+    3: 'antistar too far from axis',\n+}\n+\n+\n+def a2af(ndp, angle):\n+    \"\"\"\n+    Decompose radians into degrees, arcminutes, arcseconds, fraction.\n+\n+    Parameters\n+    ----------\n+    ndp : int array\n+    angle : double array\n+\n+    Returns\n+    -------\n+    sign : char array\n+    idmsf : int array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraA2af``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a A 2 a f\n+        - - - - - - - -\n+\n+        Decompose radians into degrees, arcminutes, arcseconds, fraction.\n+\n+        Given:\n+           ndp     int     resolution (Note 1)\n+           angle   double  angle in radians\n+\n+        Returned:\n+           sign    char         '+' or '-'\n+           idmsf   int[4]  degrees, arcminutes, arcseconds, fraction\n+\n+        Notes:\n+\n+        1) The argument ndp is interpreted as follows:\n+\n+           ndp         resolution\n+            :      ...0000 00 00\n+           -7         1000 00 00\n+           -6          100 00 00\n+           -5           10 00 00\n+           -4            1 00 00\n+           -3            0 10 00\n+           -2            0 01 00\n+           -1            0 00 10\n+            0            0 00 01\n+            1            0 00 00.1\n+            2            0 00 00.01\n+            3            0 00 00.001\n+            :            0 00 00.000...\n+\n+        2) The largest positive useful value for ndp is determined by the\n+           size of angle, the format of doubles on the target platform, and\n+           the risk of overflowing idmsf[3].  On a typical platform, for\n+           angle up to 2pi, the available floating-point precision might\n+           correspond to ndp=12.  However, the practical limit is typically\n+           ndp=9, set by the capacity of a 32-bit int, or ndp=4 if int is\n+           only 16 bits.\n+\n+        3) The absolute value of angle may exceed 2pi.  In cases where it\n+           does not, it is up to the caller to test for and handle the\n+           case where angle is very nearly 2pi and rounds up to 360 degrees,\n+           by testing for idmsf[0]=360 and setting idmsf[0-3] to zero.\n+\n+        Called:\n+           eraD2tf      decompose days to hms\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    sign, idmsf = ufunc.a2af(ndp, angle)\n+    sign = sign.view(dt_bytes1)\n+    return sign, idmsf\n+\n+\n+def a2tf(ndp, angle):\n+    \"\"\"\n+    Decompose radians into hours, minutes, seconds, fraction.\n+\n+    Parameters\n+    ----------\n+    ndp : int array\n+    angle : double array\n+\n+    Returns\n+    -------\n+    sign : char array\n+    ihmsf : int array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraA2tf``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a A 2 t f\n+        - - - - - - - -\n+\n+        Decompose radians into hours, minutes, seconds, fraction.\n+\n+        Given:\n+           ndp     int     resolution (Note 1)\n+           angle   double  angle in radians\n+\n+        Returned:\n+           sign    char         '+' or '-'\n+           ihmsf   int[4]  hours, minutes, seconds, fraction\n+\n+        Notes:\n+\n+        1) The argument ndp is interpreted as follows:\n+\n+           ndp         resolution\n+            :      ...0000 00 00\n+           -7         1000 00 00\n+           -6          100 00 00\n+           -5           10 00 00\n+           -4            1 00 00\n+           -3            0 10 00\n+           -2            0 01 00\n+           -1            0 00 10\n+            0            0 00 01\n+            1            0 00 00.1\n+            2            0 00 00.01\n+            3            0 00 00.001\n+            :            0 00 00.000...\n+\n+        2) The largest positive useful value for ndp is determined by the\n+           size of angle, the format of doubles on the target platform, and\n+           the risk of overflowing ihmsf[3].  On a typical platform, for\n+           angle up to 2pi, the available floating-point precision might\n+           correspond to ndp=12.  However, the practical limit is typically\n+           ndp=9, set by the capacity of a 32-bit int, or ndp=4 if int is\n+           only 16 bits.\n+\n+        3) The absolute value of angle may exceed 2pi.  In cases where it\n+           does not, it is up to the caller to test for and handle the\n+           case where angle is very nearly 2pi and rounds up to 24 hours,\n+           by testing for ihmsf[0]=24 and setting ihmsf[0-3] to zero.\n+\n+        Called:\n+           eraD2tf      decompose days to hms\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    sign, ihmsf = ufunc.a2tf(ndp, angle)\n+    sign = sign.view(dt_bytes1)\n+    return sign, ihmsf\n+\n+\n+def af2a(s, ideg, iamin, asec):\n+    \"\"\"\n+    Convert degrees, arcminutes, arcseconds to radians.\n+\n+    Parameters\n+    ----------\n+    s : char array\n+    ideg : int array\n+    iamin : int array\n+    asec : double array\n+\n+    Returns\n+    -------\n+    rad : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAf2a``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a A f 2 a\n+        - - - - - - - -\n+\n+        Convert degrees, arcminutes, arcseconds to radians.\n+\n+        Given:\n+           s         char    sign:  '-' = negative, otherwise positive\n+           ideg      int     degrees\n+           iamin     int     arcminutes\n+           asec      double  arcseconds\n+\n+        Returned:\n+           rad       double  angle in radians\n+\n+        Returned (function value):\n+                     int     status:  0 = OK\n+                                      1 = ideg outside range 0-359\n+                                      2 = iamin outside range 0-59\n+                                      3 = asec outside range 0-59.999...\n+\n+        Notes:\n+\n+        1)  The result is computed even if any of the range checks fail.\n+\n+        2)  Negative ideg, iamin and/or asec produce a warning status, but\n+            the absolute value is used in the conversion.\n+\n+        3)  If there are multiple errors, the status value reflects only the\n+            first, the smallest taking precedence.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rad, c_retval = ufunc.af2a(s, ideg, iamin, asec)\n+    check_errwarn(c_retval, 'af2a')\n+    return rad\n+\n+\n+STATUS_CODES['af2a'] = {\n+    0: 'OK',\n+    1: 'ideg outside range 0-359',\n+    2: 'iamin outside range 0-59',\n+    3: 'asec outside range 0-59.999...',\n+}\n+\n+\n+def anp(a):\n+    \"\"\"\n+    Normalize angle into the range 0 <= a < 2pi.\n+\n+    Parameters\n+    ----------\n+    a : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAnp``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a A n p\n+        - - - - - - -\n+\n+        Normalize angle into the range 0 <= a < 2pi.\n+\n+        Given:\n+           a        double     angle (radians)\n+\n+        Returned (function value):\n+                    double     angle in range 0-2pi\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.anp(a)\n+    return c_retval\n+\n+\n+def anpm(a):\n+    \"\"\"\n+    Normalize angle into the range -pi <= a < +pi.\n+\n+    Parameters\n+    ----------\n+    a : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraAnpm``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a A n p m\n+        - - - - - - - -\n+\n+        Normalize angle into the range -pi <= a < +pi.\n+\n+        Given:\n+           a        double     angle (radians)\n+\n+        Returned (function value):\n+                    double     angle in range +/-pi\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.anpm(a)\n+    return c_retval\n+\n+\n+def d2tf(ndp, days):\n+    \"\"\"\n+    Decompose days to hours, minutes, seconds, fraction.\n+\n+    Parameters\n+    ----------\n+    ndp : int array\n+    days : double array\n+\n+    Returns\n+    -------\n+    sign : char array\n+    ihmsf : int array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraD2tf``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a D 2 t f\n+        - - - - - - - -\n+\n+        Decompose days to hours, minutes, seconds, fraction.\n+\n+        Given:\n+           ndp     int     resolution (Note 1)\n+           days    double  interval in days\n+\n+        Returned:\n+           sign    char         '+' or '-'\n+           ihmsf   int[4]  hours, minutes, seconds, fraction\n+\n+        Notes:\n+\n+        1) The argument ndp is interpreted as follows:\n+\n+           ndp         resolution\n+            :      ...0000 00 00\n+           -7         1000 00 00\n+           -6          100 00 00\n+           -5           10 00 00\n+           -4            1 00 00\n+           -3            0 10 00\n+           -2            0 01 00\n+           -1            0 00 10\n+            0            0 00 01\n+            1            0 00 00.1\n+            2            0 00 00.01\n+            3            0 00 00.001\n+            :            0 00 00.000...\n+\n+        2) The largest positive useful value for ndp is determined by the\n+           size of days, the format of double on the target platform, and\n+           the risk of overflowing ihmsf[3].  On a typical platform, for\n+           days up to 1.0, the available floating-point precision might\n+           correspond to ndp=12.  However, the practical limit is typically\n+           ndp=9, set by the capacity of a 32-bit int, or ndp=4 if int is\n+           only 16 bits.\n+\n+        3) The absolute value of days may exceed 1.0.  In cases where it\n+           does not, it is up to the caller to test for and handle the\n+           case where days is very nearly 1.0 and rounds up to 24 hours,\n+           by testing for ihmsf[0]=24 and setting ihmsf[0-3] to zero.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    sign, ihmsf = ufunc.d2tf(ndp, days)\n+    sign = sign.view(dt_bytes1)\n+    return sign, ihmsf\n+\n+\n+def tf2a(s, ihour, imin, sec):\n+    \"\"\"\n+    Convert hours, minutes, seconds to radians.\n+\n+    Parameters\n+    ----------\n+    s : char array\n+    ihour : int array\n+    imin : int array\n+    sec : double array\n+\n+    Returns\n+    -------\n+    rad : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTf2a``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a T f 2 a\n+        - - - - - - - -\n+\n+        Convert hours, minutes, seconds to radians.\n+\n+        Given:\n+           s         char    sign:  '-' = negative, otherwise positive\n+           ihour     int     hours\n+           imin      int     minutes\n+           sec       double  seconds\n+\n+        Returned:\n+           rad       double  angle in radians\n+\n+        Returned (function value):\n+                     int     status:  0 = OK\n+                                      1 = ihour outside range 0-23\n+                                      2 = imin outside range 0-59\n+                                      3 = sec outside range 0-59.999...\n+\n+        Notes:\n+\n+        1)  The result is computed even if any of the range checks fail.\n+\n+        2)  Negative ihour, imin and/or sec produce a warning status, but\n+            the absolute value is used in the conversion.\n+\n+        3)  If there are multiple errors, the status value reflects only the\n+            first, the smallest taking precedence.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rad, c_retval = ufunc.tf2a(s, ihour, imin, sec)\n+    check_errwarn(c_retval, 'tf2a')\n+    return rad\n+\n+\n+STATUS_CODES['tf2a'] = {\n+    0: 'OK',\n+    1: 'ihour outside range 0-23',\n+    2: 'imin outside range 0-59',\n+    3: 'sec outside range 0-59.999...',\n+}\n+\n+\n+def tf2d(s, ihour, imin, sec):\n+    \"\"\"\n+    Convert hours, minutes, seconds to days.\n+\n+    Parameters\n+    ----------\n+    s : char array\n+    ihour : int array\n+    imin : int array\n+    sec : double array\n+\n+    Returns\n+    -------\n+    days : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTf2d``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a T f 2 d\n+        - - - - - - - -\n+\n+        Convert hours, minutes, seconds to days.\n+\n+        Given:\n+           s         char    sign:  '-' = negative, otherwise positive\n+           ihour     int     hours\n+           imin      int     minutes\n+           sec       double  seconds\n+\n+        Returned:\n+           days      double  interval in days\n+\n+        Returned (function value):\n+                     int     status:  0 = OK\n+                                      1 = ihour outside range 0-23\n+                                      2 = imin outside range 0-59\n+                                      3 = sec outside range 0-59.999...\n+\n+        Notes:\n+\n+        1)  The result is computed even if any of the range checks fail.\n+\n+        2)  Negative ihour, imin and/or sec produce a warning status, but\n+            the absolute value is used in the conversion.\n+\n+        3)  If there are multiple errors, the status value reflects only the\n+            first, the smallest taking precedence.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    days, c_retval = ufunc.tf2d(s, ihour, imin, sec)\n+    check_errwarn(c_retval, 'tf2d')\n+    return days\n+\n+\n+STATUS_CODES['tf2d'] = {\n+    0: 'OK',\n+    1: 'ihour outside range 0-23',\n+    2: 'imin outside range 0-59',\n+    3: 'sec outside range 0-59.999...',\n+}\n+\n+\n+def rx(phi, r):\n+    \"\"\"\n+    Rotate an r-matrix about the x-axis.\n+\n+    Parameters\n+    ----------\n+    phi : double array\n+    r : double array\n+\n+    Returns\n+    -------\n+    r : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraRx``. Note that, unlike the erfa routine,\n+    the python wrapper does not change r in-place. The ERFA documentation is::\n+\n+        - - - - - -\n+         e r a R x\n+        - - - - - -\n+\n+        Rotate an r-matrix about the x-axis.\n+\n+        Given:\n+           phi    double          angle (radians)\n+\n+        Given and returned:\n+           r      double[3][3]    r-matrix, rotated\n+\n+        Notes:\n+\n+        1) Calling this function with positive phi incorporates in the\n+           supplied r-matrix r an additional rotation, about the x-axis,\n+           anticlockwise as seen looking towards the origin from positive x.\n+\n+        2) The additional rotation can be represented by this matrix:\n+\n+               (  1        0            0      )\n+               (                               )\n+               (  0   + cos(phi)   + sin(phi)  )\n+               (                               )\n+               (  0   - sin(phi)   + cos(phi)  )\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    r = ufunc.rx(phi, r)\n+    return r\n+\n+\n+def ry(theta, r):\n+    \"\"\"\n+    Rotate an r-matrix about the y-axis.\n+\n+    Parameters\n+    ----------\n+    theta : double array\n+    r : double array\n+\n+    Returns\n+    -------\n+    r : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraRy``. Note that, unlike the erfa routine,\n+    the python wrapper does not change r in-place. The ERFA documentation is::\n+\n+        - - - - - -\n+         e r a R y\n+        - - - - - -\n+\n+        Rotate an r-matrix about the y-axis.\n+\n+        Given:\n+           theta  double          angle (radians)\n+\n+        Given and returned:\n+           r      double[3][3]    r-matrix, rotated\n+\n+        Notes:\n+\n+        1) Calling this function with positive theta incorporates in the\n+           supplied r-matrix r an additional rotation, about the y-axis,\n+           anticlockwise as seen looking towards the origin from positive y.\n+\n+        2) The additional rotation can be represented by this matrix:\n+\n+               (  + cos(theta)     0      - sin(theta)  )\n+               (                                        )\n+               (       0           1           0        )\n+               (                                        )\n+               (  + sin(theta)     0      + cos(theta)  )\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    r = ufunc.ry(theta, r)\n+    return r\n+\n+\n+def rz(psi, r):\n+    \"\"\"\n+    Rotate an r-matrix about the z-axis.\n+\n+    Parameters\n+    ----------\n+    psi : double array\n+    r : double array\n+\n+    Returns\n+    -------\n+    r : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraRz``. Note that, unlike the erfa routine,\n+    the python wrapper does not change r in-place. The ERFA documentation is::\n+\n+        - - - - - -\n+         e r a R z\n+        - - - - - -\n+\n+        Rotate an r-matrix about the z-axis.\n+\n+        Given:\n+           psi    double          angle (radians)\n+\n+        Given and returned:\n+           r      double[3][3]    r-matrix, rotated\n+\n+        Notes:\n+\n+        1) Calling this function with positive psi incorporates in the\n+           supplied r-matrix r an additional rotation, about the z-axis,\n+           anticlockwise as seen looking towards the origin from positive z.\n+\n+        2) The additional rotation can be represented by this matrix:\n+\n+               (  + cos(psi)   + sin(psi)     0  )\n+               (                                 )\n+               (  - sin(psi)   + cos(psi)     0  )\n+               (                                 )\n+               (       0            0         1  )\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    r = ufunc.rz(psi, r)\n+    return r\n+\n+\n+def cp(p):\n+    \"\"\"\n+    Copy a p-vector.\n+\n+    Parameters\n+    ----------\n+    p : double array\n+\n+    Returns\n+    -------\n+    c : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraCp``. The ERFA documentation is::\n+\n+        - - - - - -\n+         e r a C p\n+        - - - - - -\n+\n+        Copy a p-vector.\n+\n+        Given:\n+           p        double[3]     p-vector to be copied\n+\n+        Returned:\n+           c        double[3]     copy\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c = ufunc.cp(p)\n+    return c\n+\n+\n+def cpv(pv):\n+    \"\"\"\n+    Copy a position/velocity vector.\n+\n+    Parameters\n+    ----------\n+    pv : double array\n+\n+    Returns\n+    -------\n+    c : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraCpv``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a C p v\n+        - - - - - - -\n+\n+        Copy a position/velocity vector.\n+\n+        Given:\n+           pv     double[2][3]    position/velocity vector to be copied\n+\n+        Returned:\n+           c      double[2][3]    copy\n+\n+        Called:\n+           eraCp        copy p-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c = ufunc.cpv(pv)\n+    return c\n+\n+\n+def cr(r):\n+    \"\"\"\n+    Copy an r-matrix.\n+\n+    Parameters\n+    ----------\n+    r : double array\n+\n+    Returns\n+    -------\n+    c : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraCr``. The ERFA documentation is::\n+\n+        - - - - - -\n+         e r a C r\n+        - - - - - -\n+\n+        Copy an r-matrix.\n+\n+        Given:\n+           r        double[3][3]    r-matrix to be copied\n+\n+        Returned:\n+           c        double[3][3]    copy\n+\n+        Called:\n+           eraCp        copy p-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c = ufunc.cr(r)\n+    return c\n+\n+\n+def p2pv(p):\n+    \"\"\"\n+    Extend a p-vector to a pv-vector by appending a zero velocity.\n+\n+    Parameters\n+    ----------\n+    p : double array\n+\n+    Returns\n+    -------\n+    pv : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraP2pv``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a P 2 p v\n+        - - - - - - - -\n+\n+        Extend a p-vector to a pv-vector by appending a zero velocity.\n+\n+        Given:\n+           p        double[3]       p-vector\n+\n+        Returned:\n+           pv       double[2][3]    pv-vector\n+\n+        Called:\n+           eraCp        copy p-vector\n+           eraZp        zero p-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    pv = ufunc.p2pv(p)\n+    return pv\n+\n+\n+def pv2p(pv):\n+    \"\"\"\n+    Discard velocity component of a pv-vector.\n+\n+    Parameters\n+    ----------\n+    pv : double array\n+\n+    Returns\n+    -------\n+    p : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPv2p``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a P v 2 p\n+        - - - - - - - -\n+\n+        Discard velocity component of a pv-vector.\n+\n+        Given:\n+           pv      double[2][3]     pv-vector\n+\n+        Returned:\n+           p       double[3]        p-vector\n+\n+        Called:\n+           eraCp        copy p-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    p = ufunc.pv2p(pv)\n+    return p\n+\n+\n+def ir():\n+    \"\"\"\n+    Initialize an r-matrix to the identity matrix.\n+\n+    Returns\n+    -------\n+    r : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraIr``. The ERFA documentation is::\n+\n+        - - - - - -\n+         e r a I r\n+        - - - - - -\n+\n+        Initialize an r-matrix to the identity matrix.\n+\n+        Returned:\n+           r       double[3][3]    r-matrix\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    r = ufunc.ir()\n+    return r\n+\n+\n+def zp():\n+    \"\"\"\n+    Zero a p-vector.\n+\n+    Returns\n+    -------\n+    p : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraZp``. The ERFA documentation is::\n+\n+        - - - - - -\n+         e r a Z p\n+        - - - - - -\n+\n+        Zero a p-vector.\n+\n+        Returned:\n+           p        double[3]      zero p-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    p = ufunc.zp()\n+    return p\n+\n+\n+def zpv():\n+    \"\"\"\n+    Zero a pv-vector.\n+\n+    Returns\n+    -------\n+    pv : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraZpv``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a Z p v\n+        - - - - - - -\n+\n+        Zero a pv-vector.\n+\n+        Returned:\n+           pv       double[2][3]      zero pv-vector\n+\n+        Called:\n+           eraZp        zero p-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    pv = ufunc.zpv()\n+    return pv\n+\n+\n+def zr():\n+    \"\"\"\n+    Initialize an r-matrix to the null matrix.\n+\n+    Returns\n+    -------\n+    r : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraZr``. The ERFA documentation is::\n+\n+        - - - - - -\n+         e r a Z r\n+        - - - - - -\n+\n+        Initialize an r-matrix to the null matrix.\n+\n+        Returned:\n+           r        double[3][3]    r-matrix\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    r = ufunc.zr()\n+    return r\n+\n+\n+def rxr(a, b):\n+    \"\"\"\n+    Multiply two r-matrices.\n+\n+    Parameters\n+    ----------\n+    a : double array\n+    b : double array\n+\n+    Returns\n+    -------\n+    atb : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraRxr``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a R x r\n+        - - - - - - -\n+\n+        Multiply two r-matrices.\n+\n+        Given:\n+           a        double[3][3]    first r-matrix\n+           b        double[3][3]    second r-matrix\n+\n+        Returned:\n+           atb      double[3][3]    a * b\n+\n+        Note:\n+           It is permissible to re-use the same array for any of the\n+           arguments.\n+\n+        Called:\n+           eraCr        copy r-matrix\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    atb = ufunc.rxr(a, b)\n+    return atb\n+\n+\n+def tr(r):\n+    \"\"\"\n+    Transpose an r-matrix.\n+\n+    Parameters\n+    ----------\n+    r : double array\n+\n+    Returns\n+    -------\n+    rt : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTr``. The ERFA documentation is::\n+\n+        - - - - - -\n+         e r a T r\n+        - - - - - -\n+\n+        Transpose an r-matrix.\n+\n+        Given:\n+           r        double[3][3]    r-matrix\n+\n+        Returned:\n+           rt       double[3][3]    transpose\n+\n+        Note:\n+           It is permissible for r and rt to be the same array.\n+\n+        Called:\n+           eraCr        copy r-matrix\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rt = ufunc.tr(r)\n+    return rt\n+\n+\n+def rxp(r, p):\n+    \"\"\"\n+    Multiply a p-vector by an r-matrix.\n+\n+    Parameters\n+    ----------\n+    r : double array\n+    p : double array\n+\n+    Returns\n+    -------\n+    rp : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraRxp``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a R x p\n+        - - - - - - -\n+\n+        Multiply a p-vector by an r-matrix.\n+\n+        Given:\n+           r        double[3][3]    r-matrix\n+           p        double[3]       p-vector\n+\n+        Returned:\n+           rp       double[3]       r * p\n+\n+        Note:\n+           It is permissible for p and rp to be the same array.\n+\n+        Called:\n+           eraCp        copy p-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rp = ufunc.rxp(r, p)\n+    return rp\n+\n+\n+def rxpv(r, pv):\n+    \"\"\"\n+    Multiply a pv-vector by an r-matrix.\n+\n+    Parameters\n+    ----------\n+    r : double array\n+    pv : double array\n+\n+    Returns\n+    -------\n+    rpv : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraRxpv``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a R x p v\n+        - - - - - - - -\n+\n+        Multiply a pv-vector by an r-matrix.\n+\n+        Given:\n+           r        double[3][3]    r-matrix\n+           pv       double[2][3]    pv-vector\n+\n+        Returned:\n+           rpv      double[2][3]    r * pv\n+\n+        Notes:\n+\n+        1) The algorithm is for the simple case where the r-matrix r is not\n+           a function of time.  The case where r is a function of time leads\n+           to an additional velocity component equal to the product of the\n+           derivative of r and the position vector.\n+\n+        2) It is permissible for pv and rpv to be the same array.\n+\n+        Called:\n+           eraRxp       product of r-matrix and p-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    rpv = ufunc.rxpv(r, pv)\n+    return rpv\n+\n+\n+def trxp(r, p):\n+    \"\"\"\n+    Multiply a p-vector by the transpose of an r-matrix.\n+\n+    Parameters\n+    ----------\n+    r : double array\n+    p : double array\n+\n+    Returns\n+    -------\n+    trp : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTrxp``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a T r x p\n+        - - - - - - - -\n+\n+        Multiply a p-vector by the transpose of an r-matrix.\n+\n+        Given:\n+           r        double[3][3]   r-matrix\n+           p        double[3]      p-vector\n+\n+        Returned:\n+           trp      double[3]      r^T * p\n+\n+        Note:\n+           It is permissible for p and trp to be the same array.\n+\n+        Called:\n+           eraTr        transpose r-matrix\n+           eraRxp       product of r-matrix and p-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    trp = ufunc.trxp(r, p)\n+    return trp\n+\n+\n+def trxpv(r, pv):\n+    \"\"\"\n+    Multiply a pv-vector by the transpose of an r-matrix.\n+\n+    Parameters\n+    ----------\n+    r : double array\n+    pv : double array\n+\n+    Returns\n+    -------\n+    trpv : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraTrxpv``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a T r x p v\n+        - - - - - - - - -\n+\n+        Multiply a pv-vector by the transpose of an r-matrix.\n+\n+        Given:\n+           r        double[3][3]    r-matrix\n+           pv       double[2][3]    pv-vector\n+\n+        Returned:\n+           trpv     double[2][3]    r^T * pv\n+\n+        Notes:\n+\n+        1) The algorithm is for the simple case where the r-matrix r is not\n+           a function of time.  The case where r is a function of time leads\n+           to an additional velocity component equal to the product of the\n+           derivative of the transpose of r and the position vector.\n+\n+        2) It is permissible for pv and rpv to be the same array.\n+\n+        Called:\n+           eraTr        transpose r-matrix\n+           eraRxpv      product of r-matrix and pv-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    trpv = ufunc.trxpv(r, pv)\n+    return trpv\n+\n+\n+def rm2v(r):\n+    \"\"\"\n+    Express an r-matrix as an r-vector.\n+\n+    Parameters\n+    ----------\n+    r : double array\n+\n+    Returns\n+    -------\n+    w : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraRm2v``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a R m 2 v\n+        - - - - - - - -\n+\n+        Express an r-matrix as an r-vector.\n+\n+        Given:\n+           r        double[3][3]    rotation matrix\n+\n+        Returned:\n+           w        double[3]       rotation vector (Note 1)\n+\n+        Notes:\n+\n+        1) A rotation matrix describes a rotation through some angle about\n+           some arbitrary axis called the Euler axis.  The \"rotation vector\"\n+           returned by this function has the same direction as the Euler axis,\n+           and its magnitude is the angle in radians.  (The magnitude and\n+           direction can be separated by means of the function eraPn.)\n+\n+        2) If r is null, so is the result.  If r is not a rotation matrix\n+           the result is undefined;  r must be proper (i.e. have a positive\n+           determinant) and real orthogonal (inverse = transpose).\n+\n+        3) The reference frame rotates clockwise as seen looking along\n+           the rotation vector from the origin.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    w = ufunc.rm2v(r)\n+    return w\n+\n+\n+def rv2m(w):\n+    \"\"\"\n+    Form the r-matrix corresponding to a given r-vector.\n+\n+    Parameters\n+    ----------\n+    w : double array\n+\n+    Returns\n+    -------\n+    r : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraRv2m``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a R v 2 m\n+        - - - - - - - -\n+\n+        Form the r-matrix corresponding to a given r-vector.\n+\n+        Given:\n+           w        double[3]      rotation vector (Note 1)\n+\n+        Returned:\n+           r        double[3][3]    rotation matrix\n+\n+        Notes:\n+\n+        1) A rotation matrix describes a rotation through some angle about\n+           some arbitrary axis called the Euler axis.  The \"rotation vector\"\n+           supplied to This function has the same direction as the Euler\n+           axis, and its magnitude is the angle in radians.\n+\n+        2) If w is null, the identity matrix is returned.\n+\n+        3) The reference frame rotates clockwise as seen looking along the\n+           rotation vector from the origin.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    r = ufunc.rv2m(w)\n+    return r\n+\n+\n+def pap(a, b):\n+    \"\"\"\n+    Position-angle from two p-vectors.\n+\n+    Parameters\n+    ----------\n+    a : double array\n+    b : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPap``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a P a p\n+        - - - - - - -\n+\n+        Position-angle from two p-vectors.\n+\n+        Given:\n+           a      double[3]  direction of reference point\n+           b      double[3]  direction of point whose PA is required\n+\n+        Returned (function value):\n+                  double     position angle of b with respect to a (radians)\n+\n+        Notes:\n+\n+        1) The result is the position angle, in radians, of direction b with\n+           respect to direction a.  It is in the range -pi to +pi.  The\n+           sense is such that if b is a small distance \"north\" of a the\n+           position angle is approximately zero, and if b is a small\n+           distance \"east\" of a the position angle is approximately +pi/2.\n+\n+        2) The vectors a and b need not be of unit length.\n+\n+        3) Zero is returned if the two directions are the same or if either\n+           vector is null.\n+\n+        4) If vector a is at a pole, the result is ill-defined.\n+\n+        Called:\n+           eraPn        decompose p-vector into modulus and direction\n+           eraPm        modulus of p-vector\n+           eraPxp       vector product of two p-vectors\n+           eraPmp       p-vector minus p-vector\n+           eraPdp       scalar product of two p-vectors\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.pap(a, b)\n+    return c_retval\n+\n+\n+def pas(al, ap, bl, bp):\n+    \"\"\"\n+    Position-angle from spherical coordinates.\n+\n+    Parameters\n+    ----------\n+    al : double array\n+    ap : double array\n+    bl : double array\n+    bp : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPas``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a P a s\n+        - - - - - - -\n+\n+        Position-angle from spherical coordinates.\n+\n+        Given:\n+           al     double     longitude of point A (e.g. RA) in radians\n+           ap     double     latitude of point A (e.g. Dec) in radians\n+           bl     double     longitude of point B\n+           bp     double     latitude of point B\n+\n+        Returned (function value):\n+                  double     position angle of B with respect to A\n+\n+        Notes:\n+\n+        1) The result is the bearing (position angle), in radians, of point\n+           B with respect to point A.  It is in the range -pi to +pi.  The\n+           sense is such that if B is a small distance \"east\" of point A,\n+           the bearing is approximately +pi/2.\n+\n+        2) Zero is returned if the two points are coincident.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.pas(al, ap, bl, bp)\n+    return c_retval\n+\n+\n+def sepp(a, b):\n+    \"\"\"\n+    Angular separation between two p-vectors.\n+\n+    Parameters\n+    ----------\n+    a : double array\n+    b : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraSepp``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a S e p p\n+        - - - - - - - -\n+\n+        Angular separation between two p-vectors.\n+\n+        Given:\n+           a      double[3]    first p-vector (not necessarily unit length)\n+           b      double[3]    second p-vector (not necessarily unit length)\n+\n+        Returned (function value):\n+                  double       angular separation (radians, always positive)\n+\n+        Notes:\n+\n+        1) If either vector is null, a zero result is returned.\n+\n+        2) The angular separation is most simply formulated in terms of\n+           scalar product.  However, this gives poor accuracy for angles\n+           near zero and pi.  The present algorithm uses both cross product\n+           and dot product, to deliver full accuracy whatever the size of\n+           the angle.\n+\n+        Called:\n+           eraPxp       vector product of two p-vectors\n+           eraPm        modulus of p-vector\n+           eraPdp       scalar product of two p-vectors\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.sepp(a, b)\n+    return c_retval\n+\n+\n+def seps(al, ap, bl, bp):\n+    \"\"\"\n+    Angular separation between two sets of spherical coordinates.\n+\n+    Parameters\n+    ----------\n+    al : double array\n+    ap : double array\n+    bl : double array\n+    bp : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraSeps``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a S e p s\n+        - - - - - - - -\n+\n+        Angular separation between two sets of spherical coordinates.\n+\n+        Given:\n+           al     double       first longitude (radians)\n+           ap     double       first latitude (radians)\n+           bl     double       second longitude (radians)\n+           bp     double       second latitude (radians)\n+\n+        Returned (function value):\n+                  double       angular separation (radians)\n+\n+        Called:\n+           eraS2c       spherical coordinates to unit vector\n+           eraSepp      angular separation between two p-vectors\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.seps(al, ap, bl, bp)\n+    return c_retval\n+\n+\n+def c2s(p):\n+    \"\"\"\n+    P-vector to spherical coordinates.\n+\n+    Parameters\n+    ----------\n+    p : double array\n+\n+    Returns\n+    -------\n+    theta : double array\n+    phi : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraC2s``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a C 2 s\n+        - - - - - - -\n+\n+        P-vector to spherical coordinates.\n+\n+        Given:\n+           p      double[3]    p-vector\n+\n+        Returned:\n+           theta  double       longitude angle (radians)\n+           phi    double       latitude angle (radians)\n+\n+        Notes:\n+\n+        1) The vector p can have any magnitude; only its direction is used.\n+\n+        2) If p is null, zero theta and phi are returned.\n+\n+        3) At either pole, zero theta is returned.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    theta, phi = ufunc.c2s(p)\n+    return theta, phi\n+\n+\n+def p2s(p):\n+    \"\"\"\n+    P-vector to spherical polar coordinates.\n+\n+    Parameters\n+    ----------\n+    p : double array\n+\n+    Returns\n+    -------\n+    theta : double array\n+    phi : double array\n+    r : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraP2s``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a P 2 s\n+        - - - - - - -\n+\n+        P-vector to spherical polar coordinates.\n+\n+        Given:\n+           p        double[3]    p-vector\n+\n+        Returned:\n+           theta    double       longitude angle (radians)\n+           phi      double       latitude angle (radians)\n+           r        double       radial distance\n+\n+        Notes:\n+\n+        1) If P is null, zero theta, phi and r are returned.\n+\n+        2) At either pole, zero theta is returned.\n+\n+        Called:\n+           eraC2s       p-vector to spherical\n+           eraPm        modulus of p-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    theta, phi, r = ufunc.p2s(p)\n+    return theta, phi, r\n+\n+\n+def pv2s(pv):\n+    \"\"\"\n+    Convert position/velocity from Cartesian to spherical coordinates.\n+\n+    Parameters\n+    ----------\n+    pv : double array\n+\n+    Returns\n+    -------\n+    theta : double array\n+    phi : double array\n+    r : double array\n+    td : double array\n+    pd : double array\n+    rd : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPv2s``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a P v 2 s\n+        - - - - - - - -\n+\n+        Convert position/velocity from Cartesian to spherical coordinates.\n+\n+        Given:\n+           pv       double[2][3]  pv-vector\n+\n+        Returned:\n+           theta    double        longitude angle (radians)\n+           phi      double        latitude angle (radians)\n+           r        double        radial distance\n+           td       double        rate of change of theta\n+           pd       double        rate of change of phi\n+           rd       double        rate of change of r\n+\n+        Notes:\n+\n+        1) If the position part of pv is null, theta, phi, td and pd\n+           are indeterminate.  This is handled by extrapolating the\n+           position through unit time by using the velocity part of\n+           pv.  This moves the origin without changing the direction\n+           of the velocity component.  If the position and velocity\n+           components of pv are both null, zeroes are returned for all\n+           six results.\n+\n+        2) If the position is a pole, theta, td and pd are indeterminate.\n+           In such cases zeroes are returned for all three.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    theta, phi, r, td, pd, rd = ufunc.pv2s(pv)\n+    return theta, phi, r, td, pd, rd\n+\n+\n+def s2c(theta, phi):\n+    \"\"\"\n+    Convert spherical coordinates to Cartesian.\n+\n+    Parameters\n+    ----------\n+    theta : double array\n+    phi : double array\n+\n+    Returns\n+    -------\n+    c : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraS2c``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a S 2 c\n+        - - - - - - -\n+\n+        Convert spherical coordinates to Cartesian.\n+\n+        Given:\n+           theta    double       longitude angle (radians)\n+           phi      double       latitude angle (radians)\n+\n+        Returned:\n+           c        double[3]    direction cosines\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c = ufunc.s2c(theta, phi)\n+    return c\n+\n+\n+def s2p(theta, phi, r):\n+    \"\"\"\n+    Convert spherical polar coordinates to p-vector.\n+\n+    Parameters\n+    ----------\n+    theta : double array\n+    phi : double array\n+    r : double array\n+\n+    Returns\n+    -------\n+    p : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraS2p``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a S 2 p\n+        - - - - - - -\n+\n+        Convert spherical polar coordinates to p-vector.\n+\n+        Given:\n+           theta   double       longitude angle (radians)\n+           phi     double       latitude angle (radians)\n+           r       double       radial distance\n+\n+        Returned:\n+           p       double[3]    Cartesian coordinates\n+\n+        Called:\n+           eraS2c       spherical coordinates to unit vector\n+           eraSxp       multiply p-vector by scalar\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    p = ufunc.s2p(theta, phi, r)\n+    return p\n+\n+\n+def s2pv(theta, phi, r, td, pd, rd):\n+    \"\"\"\n+    Convert position/velocity from spherical to Cartesian coordinates.\n+\n+    Parameters\n+    ----------\n+    theta : double array\n+    phi : double array\n+    r : double array\n+    td : double array\n+    pd : double array\n+    rd : double array\n+\n+    Returns\n+    -------\n+    pv : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraS2pv``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a S 2 p v\n+        - - - - - - - -\n+\n+        Convert position/velocity from spherical to Cartesian coordinates.\n+\n+        Given:\n+           theta    double          longitude angle (radians)\n+           phi      double          latitude angle (radians)\n+           r        double          radial distance\n+           td       double          rate of change of theta\n+           pd       double          rate of change of phi\n+           rd       double          rate of change of r\n+\n+        Returned:\n+           pv       double[2][3]    pv-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    pv = ufunc.s2pv(theta, phi, r, td, pd, rd)\n+    return pv\n+\n+\n+def pdp(a, b):\n+    \"\"\"\n+    p-vector inner (=scalar=dot) product.\n+\n+    Parameters\n+    ----------\n+    a : double array\n+    b : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPdp``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a P d p\n+        - - - - - - -\n+\n+        p-vector inner (=scalar=dot) product.\n+\n+        Given:\n+           a      double[3]     first p-vector\n+           b      double[3]     second p-vector\n+\n+        Returned (function value):\n+                  double        a . b\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.pdp(a, b)\n+    return c_retval\n+\n+\n+def pm(p):\n+    \"\"\"\n+    Modulus of p-vector.\n+\n+    Parameters\n+    ----------\n+    p : double array\n+\n+    Returns\n+    -------\n+    c_retval : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPm``. The ERFA documentation is::\n+\n+        - - - - - -\n+         e r a P m\n+        - - - - - -\n+\n+        Modulus of p-vector.\n+\n+        Given:\n+           p      double[3]     p-vector\n+\n+        Returned (function value):\n+                  double        modulus\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    c_retval = ufunc.pm(p)\n+    return c_retval\n+\n+\n+def pmp(a, b):\n+    \"\"\"\n+    P-vector subtraction.\n+\n+    Parameters\n+    ----------\n+    a : double array\n+    b : double array\n+\n+    Returns\n+    -------\n+    amb : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPmp``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a P m p\n+        - - - - - - -\n+\n+        P-vector subtraction.\n+\n+        Given:\n+           a        double[3]      first p-vector\n+           b        double[3]      second p-vector\n+\n+        Returned:\n+           amb      double[3]      a - b\n+\n+        Note:\n+           It is permissible to re-use the same array for any of the\n+           arguments.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    amb = ufunc.pmp(a, b)\n+    return amb\n+\n+\n+def pn(p):\n+    \"\"\"\n+    Convert a p-vector into modulus and unit vector.\n+\n+    Parameters\n+    ----------\n+    p : double array\n+\n+    Returns\n+    -------\n+    r : double array\n+    u : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPn``. The ERFA documentation is::\n+\n+        - - - - - -\n+         e r a P n\n+        - - - - - -\n+\n+        Convert a p-vector into modulus and unit vector.\n+\n+        Given:\n+           p        double[3]      p-vector\n+\n+        Returned:\n+           r        double         modulus\n+           u        double[3]      unit vector\n+\n+        Notes:\n+\n+        1) If p is null, the result is null.  Otherwise the result is a unit\n+           vector.\n+\n+        2) It is permissible to re-use the same array for any of the\n+           arguments.\n+\n+        Called:\n+           eraPm        modulus of p-vector\n+           eraZp        zero p-vector\n+           eraSxp       multiply p-vector by scalar\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    r, u = ufunc.pn(p)\n+    return r, u\n+\n+\n+def ppp(a, b):\n+    \"\"\"\n+    P-vector addition.\n+\n+    Parameters\n+    ----------\n+    a : double array\n+    b : double array\n+\n+    Returns\n+    -------\n+    apb : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPpp``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a P p p\n+        - - - - - - -\n+\n+        P-vector addition.\n+\n+        Given:\n+           a        double[3]      first p-vector\n+           b        double[3]      second p-vector\n+\n+        Returned:\n+           apb      double[3]      a + b\n+\n+        Note:\n+           It is permissible to re-use the same array for any of the\n+           arguments.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    apb = ufunc.ppp(a, b)\n+    return apb\n+\n+\n+def ppsp(a, s, b):\n+    \"\"\"\n+    P-vector plus scaled p-vector.\n+\n+    Parameters\n+    ----------\n+    a : double array\n+    s : double array\n+    b : double array\n+\n+    Returns\n+    -------\n+    apsb : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPpsp``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a P p s p\n+        - - - - - - - -\n+\n+        P-vector plus scaled p-vector.\n+\n+        Given:\n+           a      double[3]     first p-vector\n+           s      double        scalar (multiplier for b)\n+           b      double[3]     second p-vector\n+\n+        Returned:\n+           apsb   double[3]     a + s*b\n+\n+        Note:\n+           It is permissible for any of a, b and apsb to be the same array.\n+\n+        Called:\n+           eraSxp       multiply p-vector by scalar\n+           eraPpp       p-vector plus p-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    apsb = ufunc.ppsp(a, s, b)\n+    return apsb\n+\n+\n+def pvdpv(a, b):\n+    \"\"\"\n+    Inner (=scalar=dot) product of two pv-vectors.\n+\n+    Parameters\n+    ----------\n+    a : double array\n+    b : double array\n+\n+    Returns\n+    -------\n+    adb : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPvdpv``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a P v d p v\n+        - - - - - - - - -\n+\n+        Inner (=scalar=dot) product of two pv-vectors.\n+\n+        Given:\n+           a        double[2][3]      first pv-vector\n+           b        double[2][3]      second pv-vector\n+\n+        Returned:\n+           adb      double[2]         a . b (see note)\n+\n+        Note:\n+\n+           If the position and velocity components of the two pv-vectors are\n+           ( ap, av ) and ( bp, bv ), the result, a . b, is the pair of\n+           numbers ( ap . bp , ap . bv + av . bp ).  The two numbers are the\n+           dot-product of the two p-vectors and its derivative.\n+\n+        Called:\n+           eraPdp       scalar product of two p-vectors\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    adb = ufunc.pvdpv(a, b)\n+    return adb\n+\n+\n+def pvm(pv):\n+    \"\"\"\n+    Modulus of pv-vector.\n+\n+    Parameters\n+    ----------\n+    pv : double array\n+\n+    Returns\n+    -------\n+    r : double array\n+    s : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPvm``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a P v m\n+        - - - - - - -\n+\n+        Modulus of pv-vector.\n+\n+        Given:\n+           pv     double[2][3]   pv-vector\n+\n+        Returned:\n+           r      double         modulus of position component\n+           s      double         modulus of velocity component\n+\n+        Called:\n+           eraPm        modulus of p-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    r, s = ufunc.pvm(pv)\n+    return r, s\n+\n+\n+def pvmpv(a, b):\n+    \"\"\"\n+    Subtract one pv-vector from another.\n+\n+    Parameters\n+    ----------\n+    a : double array\n+    b : double array\n+\n+    Returns\n+    -------\n+    amb : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPvmpv``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a P v m p v\n+        - - - - - - - - -\n+\n+        Subtract one pv-vector from another.\n+\n+        Given:\n+           a       double[2][3]      first pv-vector\n+           b       double[2][3]      second pv-vector\n+\n+        Returned:\n+           amb     double[2][3]      a - b\n+\n+        Note:\n+           It is permissible to re-use the same array for any of the\n+           arguments.\n+\n+        Called:\n+           eraPmp       p-vector minus p-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    amb = ufunc.pvmpv(a, b)\n+    return amb\n+\n+\n+def pvppv(a, b):\n+    \"\"\"\n+    Add one pv-vector to another.\n+\n+    Parameters\n+    ----------\n+    a : double array\n+    b : double array\n+\n+    Returns\n+    -------\n+    apb : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPvppv``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a P v p p v\n+        - - - - - - - - -\n+\n+        Add one pv-vector to another.\n+\n+        Given:\n+           a        double[2][3]      first pv-vector\n+           b        double[2][3]      second pv-vector\n+\n+        Returned:\n+           apb      double[2][3]      a + b\n+\n+        Note:\n+           It is permissible to re-use the same array for any of the\n+           arguments.\n+\n+        Called:\n+           eraPpp       p-vector plus p-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    apb = ufunc.pvppv(a, b)\n+    return apb\n+\n+\n+def pvu(dt, pv):\n+    \"\"\"\n+    Update a pv-vector.\n+\n+    Parameters\n+    ----------\n+    dt : double array\n+    pv : double array\n+\n+    Returns\n+    -------\n+    upv : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPvu``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a P v u\n+        - - - - - - -\n+\n+        Update a pv-vector.\n+\n+        Given:\n+           dt       double           time interval\n+           pv       double[2][3]     pv-vector\n+\n+        Returned:\n+           upv      double[2][3]     p updated, v unchanged\n+\n+        Notes:\n+\n+        1) \"Update\" means \"refer the position component of the vector\n+           to a new date dt time units from the existing date\".\n+\n+        2) The time units of dt must match those of the velocity.\n+\n+        3) It is permissible for pv and upv to be the same array.\n+\n+        Called:\n+           eraPpsp      p-vector plus scaled p-vector\n+           eraCp        copy p-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    upv = ufunc.pvu(dt, pv)\n+    return upv\n+\n+\n+def pvup(dt, pv):\n+    \"\"\"\n+    Update a pv-vector, discarding the velocity component.\n+\n+    Parameters\n+    ----------\n+    dt : double array\n+    pv : double array\n+\n+    Returns\n+    -------\n+    p : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPvup``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a P v u p\n+        - - - - - - - -\n+\n+        Update a pv-vector, discarding the velocity component.\n+\n+        Given:\n+           dt       double            time interval\n+           pv       double[2][3]      pv-vector\n+\n+        Returned:\n+           p        double[3]         p-vector\n+\n+        Notes:\n+\n+        1) \"Update\" means \"refer the position component of the vector to a\n+           new date dt time units from the existing date\".\n+\n+        2) The time units of dt must match those of the velocity.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    p = ufunc.pvup(dt, pv)\n+    return p\n+\n+\n+def pvxpv(a, b):\n+    \"\"\"\n+    Outer (=vector=cross) product of two pv-vectors.\n+\n+    Parameters\n+    ----------\n+    a : double array\n+    b : double array\n+\n+    Returns\n+    -------\n+    axb : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPvxpv``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a P v x p v\n+        - - - - - - - - -\n+\n+        Outer (=vector=cross) product of two pv-vectors.\n+\n+        Given:\n+           a        double[2][3]      first pv-vector\n+           b        double[2][3]      second pv-vector\n+\n+        Returned:\n+           axb      double[2][3]      a x b\n+\n+        Notes:\n+\n+        1) If the position and velocity components of the two pv-vectors are\n+           ( ap, av ) and ( bp, bv ), the result, a x b, is the pair of\n+           vectors ( ap x bp, ap x bv + av x bp ).  The two vectors are the\n+           cross-product of the two p-vectors and its derivative.\n+\n+        2) It is permissible to re-use the same array for any of the\n+           arguments.\n+\n+        Called:\n+           eraCpv       copy pv-vector\n+           eraPxp       vector product of two p-vectors\n+           eraPpp       p-vector plus p-vector\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    axb = ufunc.pvxpv(a, b)\n+    return axb\n+\n+\n+def pxp(a, b):\n+    \"\"\"\n+    p-vector outer (=vector=cross) product.\n+\n+    Parameters\n+    ----------\n+    a : double array\n+    b : double array\n+\n+    Returns\n+    -------\n+    axb : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraPxp``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a P x p\n+        - - - - - - -\n+\n+        p-vector outer (=vector=cross) product.\n+\n+        Given:\n+           a        double[3]      first p-vector\n+           b        double[3]      second p-vector\n+\n+        Returned:\n+           axb      double[3]      a x b\n+\n+        Note:\n+           It is permissible to re-use the same array for any of the\n+           arguments.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    axb = ufunc.pxp(a, b)\n+    return axb\n+\n+\n+def s2xpv(s1, s2, pv):\n+    \"\"\"\n+    Multiply a pv-vector by two scalars.\n+\n+    Parameters\n+    ----------\n+    s1 : double array\n+    s2 : double array\n+    pv : double array\n+\n+    Returns\n+    -------\n+    spv : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraS2xpv``. The ERFA documentation is::\n+\n+        - - - - - - - - -\n+         e r a S 2 x p v\n+        - - - - - - - - -\n+\n+        Multiply a pv-vector by two scalars.\n+\n+        Given:\n+           s1     double         scalar to multiply position component by\n+           s2     double         scalar to multiply velocity component by\n+           pv     double[2][3]   pv-vector\n+\n+        Returned:\n+           spv    double[2][3]   pv-vector: p scaled by s1, v scaled by s2\n+\n+        Note:\n+           It is permissible for pv and spv to be the same array.\n+\n+        Called:\n+           eraSxp       multiply p-vector by scalar\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    spv = ufunc.s2xpv(s1, s2, pv)\n+    return spv\n+\n+\n+def sxp(s, p):\n+    \"\"\"\n+    Multiply a p-vector by a scalar.\n+\n+    Parameters\n+    ----------\n+    s : double array\n+    p : double array\n+\n+    Returns\n+    -------\n+    sp : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraSxp``. The ERFA documentation is::\n+\n+        - - - - - - -\n+         e r a S x p\n+        - - - - - - -\n+\n+        Multiply a p-vector by a scalar.\n+\n+        Given:\n+           s      double        scalar\n+           p      double[3]     p-vector\n+\n+        Returned:\n+           sp     double[3]     s * p\n+\n+        Note:\n+           It is permissible for p and sp to be the same array.\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    sp = ufunc.sxp(s, p)\n+    return sp\n+\n+\n+def sxpv(s, pv):\n+    \"\"\"\n+    Multiply a pv-vector by a scalar.\n+\n+    Parameters\n+    ----------\n+    s : double array\n+    pv : double array\n+\n+    Returns\n+    -------\n+    spv : double array\n+\n+    Notes\n+    -----\n+    Wraps ERFA function ``eraSxpv``. The ERFA documentation is::\n+\n+        - - - - - - - -\n+         e r a S x p v\n+        - - - - - - - -\n+\n+        Multiply a pv-vector by a scalar.\n+\n+        Given:\n+           s       double          scalar\n+           pv      double[2][3]    pv-vector\n+\n+        Returned:\n+           spv     double[2][3]    s * pv\n+\n+        Note:\n+           It is permissible for pv and spv to be the same array.\n+\n+        Called:\n+           eraS2xpv     multiply pv-vector by two scalars\n+\n+        This revision:  2021 May 11\n+\n+        Copyright (C) 2013-2023, NumFOCUS Foundation.\n+        Derived, with permission, from the SOFA library.  See notes at end of file.\n+\n+    \"\"\"\n+    spv = ufunc.sxpv(s, pv)\n+    return spv\ndiff --git a/erfa/helpers.py b/erfa/helpers.py\nnew file mode 100644\nindex 0000000000..2beddf126a\n--- /dev/null\n+++ b/erfa/helpers.py\n@@ -0,0 +1,396 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\"\"\"\n+Helpers to interact with the ERFA library, in particular for leap seconds.\n+\"\"\"\n+import functools\n+import threading\n+from datetime import datetime, timedelta\n+from warnings import warn\n+\n+import numpy as np\n+\n+from .core import ErfaWarning\n+\n+from .ufunc import get_leap_seconds, set_leap_seconds, dt_eraLEAPSECOND\n+\n+\n+NUMPY_LT_2_0 = np.__version__.startswith(\"1.\")\n+\n+_NotFound = object()\n+\n+\n+# TODO: This can still be made to work for setters by implementing an\n+# accompanying metaclass that supports it; we just don't need that right this\n+# second\n+class classproperty(property):\n+    \"\"\"\n+    Similar to `property`, but allows class-level properties.  That is,\n+    a property whose getter is like a `classmethod`.\n+\n+    The wrapped method may explicitly use the `classmethod` decorator (which\n+    must become before this decorator), or the `classmethod` may be omitted\n+    (it is implicit through use of this decorator).\n+\n+    .. note::\n+\n+        classproperty only works for *read-only* properties.  It does not\n+        currently allow writeable/deletable properties, due to subtleties of how\n+        Python descriptors work.  In order to implement such properties on a class\n+        a metaclass for that class must be implemented.\n+\n+    Parameters\n+    ----------\n+    fget : callable\n+        The function that computes the value of this property (in particular,\n+        the function when this is used as a decorator) a la `property`.\n+\n+    doc : str, optional\n+        The docstring for the property--by default inherited from the getter\n+        function.\n+\n+    lazy : bool, optional\n+        If True, caches the value returned by the first call to the getter\n+        function, so that it is only called once (used for lazy evaluation\n+        of an attribute).  This is analogous to `lazyproperty`.  The ``lazy``\n+        argument can also be used when `classproperty` is used as a decorator\n+        (see the third example below).  When used in the decorator syntax this\n+        *must* be passed in as a keyword argument.\n+\n+    Examples\n+    --------\n+\n+    ::\n+\n+        >>> class Foo:\n+        ...     _bar_internal = 1\n+        ...     @classproperty\n+        ...     def bar(cls):\n+        ...         return cls._bar_internal + 1\n+        ...\n+        >>> Foo.bar\n+        2\n+        >>> foo_instance = Foo()\n+        >>> foo_instance.bar\n+        2\n+        >>> foo_instance._bar_internal = 2\n+        >>> foo_instance.bar  # Ignores instance attributes\n+        2\n+\n+    As previously noted, a `classproperty` is limited to implementing\n+    read-only attributes::\n+\n+        >>> class Foo:\n+        ...     _bar_internal = 1\n+        ...     @classproperty\n+        ...     def bar(cls):\n+        ...         return cls._bar_internal\n+        ...     @bar.setter\n+        ...     def bar(cls, value):\n+        ...         cls._bar_internal = value\n+        ...\n+        Traceback (most recent call last):\n+        ...\n+        NotImplementedError: classproperty can only be read-only; use a\n+        metaclass to implement modifiable class-level properties\n+\n+    When the ``lazy`` option is used, the getter is only called once::\n+\n+        >>> class Foo:\n+        ...     @classproperty(lazy=True)\n+        ...     def bar(cls):\n+        ...         print(\"Performing complicated calculation\")\n+        ...         return 1\n+        ...\n+        >>> Foo.bar\n+        Performing complicated calculation\n+        1\n+        >>> Foo.bar\n+        1\n+\n+    If a subclass inherits a lazy `classproperty` the property is still\n+    re-evaluated for the subclass::\n+\n+        >>> class FooSub(Foo):\n+        ...     pass\n+        ...\n+        >>> FooSub.bar\n+        Performing complicated calculation\n+        1\n+        >>> FooSub.bar\n+        1\n+    \"\"\"\n+\n+    def __new__(cls, fget=None, doc=None, lazy=False):\n+        if fget is None:\n+            # Being used as a decorator--return a wrapper that implements\n+            # decorator syntax\n+            def wrapper(func):\n+                return cls(func, lazy=lazy)\n+\n+            return wrapper\n+\n+        return super().__new__(cls)\n+\n+    def __init__(self, fget, doc=None, lazy=False):\n+        self._lazy = lazy\n+        if lazy:\n+            self._lock = threading.RLock()   # Protects _cache\n+            self._cache = {}\n+        fget = self._wrap_fget(fget)\n+\n+        super().__init__(fget=fget, doc=doc)\n+\n+        # There is a buglet in Python where self.__doc__ doesn't\n+        # get set properly on instances of property subclasses if\n+        # the doc argument was used rather than taking the docstring\n+        # from fget\n+        # Related Python issue: https://bugs.python.org/issue24766\n+        if doc is not None:\n+            self.__doc__ = doc\n+\n+    def __get__(self, obj, objtype):\n+        if self._lazy:\n+            val = self._cache.get(objtype, _NotFound)\n+            if val is _NotFound:\n+                with self._lock:\n+                    # Check if another thread initialised before we locked.\n+                    val = self._cache.get(objtype, _NotFound)\n+                    if val is _NotFound:\n+                        val = self.fget.__wrapped__(objtype)\n+                        self._cache[objtype] = val\n+        else:\n+            # The base property.__get__ will just return self here;\n+            # instead we pass objtype through to the original wrapped\n+            # function (which takes the class as its sole argument)\n+            val = self.fget.__wrapped__(objtype)\n+        return val\n+\n+    def getter(self, fget):\n+        return super().getter(self._wrap_fget(fget))\n+\n+    def setter(self, fset):\n+        raise NotImplementedError(\n+            \"classproperty can only be read-only; use a metaclass to \"\n+            \"implement modifiable class-level properties\")\n+\n+    def deleter(self, fdel):\n+        raise NotImplementedError(\n+            \"classproperty can only be read-only; use a metaclass to \"\n+            \"implement modifiable class-level properties\")\n+\n+    @staticmethod\n+    def _wrap_fget(orig_fget):\n+        if isinstance(orig_fget, classmethod):\n+            orig_fget = orig_fget.__func__\n+\n+        # Using stock functools.wraps instead of the fancier version\n+        # found later in this module, which is overkill for this purpose\n+\n+        @functools.wraps(orig_fget)\n+        def fget(obj):\n+            return orig_fget(obj.__class__)\n+\n+        return fget\n+\n+\n+class leap_seconds:\n+    \"\"\"Leap second management.\n+\n+    This singleton class allows access to ERFA's leap second table,\n+    using the methods 'get', 'set', and 'update'.\n+\n+    One can also check expiration with 'expires' and 'expired'.\n+\n+    Note that usage of the class is similar to a ``ScienceState`` class,\n+    but it cannot be used as a context manager.\n+    \"\"\"\n+    _expires = None\n+    \"\"\"Explicit expiration date inferred from leap-second table.\"\"\"\n+    _expiration_days = 180\n+    \"\"\"Number of days beyond last leap second at which table expires.\"\"\"\n+\n+    def __init__(self):\n+        raise RuntimeError(\"This class is a singleton.  Do not instantiate.\")\n+\n+    @classmethod\n+    def get(cls):\n+        \"\"\"Get the current leap-second table used internally.\"\"\"\n+        return get_leap_seconds()\n+\n+    @classmethod\n+    def validate(cls, table):\n+        \"\"\"Validate a leap-second table.\n+\n+        Parameters\n+        ----------\n+        table : array_like\n+            Must have 'year', 'month', and 'tai_utc' entries.  If a 'day'\n+            entry is present, it will be checked that it is always 1.\n+            If ``table`` has an 'expires' attribute, it will be interpreted\n+            as an expiration date.\n+\n+        Returns\n+        -------\n+        array : `~numpy.ndarray`\n+            Structures array with 'year', 'month', 'tai_utc'.\n+        expires: `~datetime.datetime` or None\n+            Possible expiration date inferred from the table.  `None` if not\n+            present or if not a `~datetime.datetime` or `~astropy.time.Time`\n+            instance and not parsable as a 'dd month yyyy' string.\n+\n+        Raises\n+        ------\n+        ValueError\n+            If the leap seconds in the table are not on the 1st of January or\n+            July, or if the sorted TAI-UTC do not increase in increments of 1.\n+        \"\"\"\n+        try:\n+            day = table['day']\n+        except Exception:\n+            day = 1\n+\n+        expires = getattr(table, 'expires', None)\n+        if expires is not None and not isinstance(expires, datetime):\n+            # Maybe astropy Time? Cannot go via strftime, since that\n+            # might need leap-seconds.  If not, try standard string\n+            # format from leap_seconds.dat and leap_seconds.list\n+            isot = getattr(expires, 'isot', None)\n+            try:\n+                if isot is not None:\n+                    expires = datetime.strptime(isot.partition('T')[0],\n+                                                '%Y-%m-%d')\n+                else:\n+                    expires = datetime.strptime(expires, '%d %B %Y')\n+\n+            except Exception as exc:\n+                warn(f\"ignoring non-datetime expiration {expires}; \"\n+                     f\"parsing it raised {exc!r}\", ErfaWarning)\n+                expires = None\n+\n+        # Take care of astropy Table.\n+        if hasattr(table, '__array__'):\n+            table = table.__array__()[list(dt_eraLEAPSECOND.names)]\n+\n+        table = np.array(table, dtype=dt_eraLEAPSECOND, ndmin=1,\n+                         copy=False if NUMPY_LT_2_0 else None)\n+\n+        # Simple sanity checks.\n+        if table.ndim > 1:\n+            raise ValueError(\"can only pass in one-dimensional tables.\")\n+\n+        if not np.all(((day == 1) &\n+                       (table['month'] == 1) | (table['month'] == 7)) |\n+                      (table['year'] < 1972)):\n+            raise ValueError(\"leap seconds inferred that are not on \"\n+                             \"1st of January or 1st of July.\")\n+\n+        if np.any((table['year'][:-1] > 1970) &\n+                  (np.diff(table['tai_utc']) != 1)):\n+            raise ValueError(\"jump in TAI-UTC by something else than one.\")\n+\n+        return table, expires\n+\n+    @classmethod\n+    def set(cls, table=None):\n+        \"\"\"Set the ERFA leap second table.\n+\n+        Note that it is generally safer to update the leap-second table than\n+        to set it directly, since most tables do not have the pre-1970 changes\n+        in TAI-UTC that are part of the built-in ERFA table.\n+\n+        Parameters\n+        ----------\n+        table : array_like or `None`\n+            Leap-second table that should at least hold columns of 'year',\n+            'month', and 'tai_utc'.  Only simple validation is done before it\n+            is being used, so care need to be taken that entries are correct.\n+            If `None`, reset the ERFA table to its built-in values.\n+\n+        Raises\n+        ------\n+        ValueError\n+            If the leap seconds in the table are not on the 1st of January or\n+            July, or if the sorted TAI-UTC do not increase in increments of 1.\n+        \"\"\"\n+        if table is None:\n+            expires = None\n+        else:\n+            table, expires = cls.validate(table)\n+\n+        set_leap_seconds(table)\n+        cls._expires = expires\n+\n+    @classproperty\n+    def expires(cls):\n+        \"\"\"The expiration date of the current ERFA table.\n+\n+        This is either a date inferred from the last table used to update or\n+        set the leap-second array, or a number of days beyond the last leap\n+        second.\n+        \"\"\"\n+        if cls._expires is None:\n+            last = cls.get()[-1]\n+            return (datetime(last['year'], last['month'], 1) +\n+                    timedelta(cls._expiration_days))\n+        else:\n+            return cls._expires\n+\n+    @classproperty\n+    def expired(cls):\n+        \"\"\"Whether the leap second table is valid beyond the present.\"\"\"\n+        return cls.expires < datetime.now()\n+\n+    @classmethod\n+    def update(cls, table):\n+        \"\"\"Add any leap seconds not already present to the ERFA table.\n+\n+        This method matches leap seconds with those present in the ERFA table,\n+        and extends the latter as necessary.\n+\n+        If the ERFA leap seconds file was corrupted, it will be reset.\n+\n+        If the table is corrupted, the ERFA file will be unchanged.\n+\n+        Parameters\n+        ----------\n+        table : array_like or `~astropy.utils.iers.LeapSeconds`\n+            Array or table with TAI-UTC from leap seconds.  Should have\n+            'year', 'month', and 'tai_utc' columns.\n+\n+        Returns\n+        -------\n+        n_update : int\n+            Number of items updated.\n+\n+        Raises\n+        ------\n+        ValueError\n+            If the leap seconds in the table are not on the 1st of January or\n+            July, or if the sorted TAI-UTC do not increase in increments of 1.\n+        \"\"\"\n+        table, expires = cls.validate(table)\n+\n+        # Get erfa table and check it is OK; if not, reset it.\n+        try:\n+            erfa_ls, _ = cls.validate(cls.get())\n+        except Exception:\n+            cls.set()\n+            erfa_ls = cls.get()\n+\n+        # Create the combined array and use it (validating the combination).\n+        ls = np.union1d(erfa_ls, table)\n+        cls.set(ls)\n+\n+        # If the update table has an expiration beyond that inferred from\n+        # the new leap second second array, use it (but, now that the new\n+        # array is set, do not allow exceptions due to misformed expires).\n+        try:\n+            if expires is not None and expires > cls.expires:\n+                cls._expires = expires\n+\n+        except Exception as exc:\n+            warn(\"table 'expires' attribute ignored as comparing it \"\n+                 \"with a datetime raised an error:\\n\" + str(exc),\n+                 ErfaWarning)\n+\n+        return len(ls) - len(erfa_ls)\ndiff --git a/erfa/tests/__init__.py b/erfa/tests/__init__.py\nnew file mode 100644\nindex 0000000000..9dce85d06f\n--- /dev/null\n+++ b/erfa/tests/__init__.py\n@@ -0,0 +1 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\ndiff --git a/erfa/tests/test_erfa.py b/erfa/tests/test_erfa.py\nnew file mode 100644\nindex 0000000000..6fd4a32b3a\n--- /dev/null\n+++ b/erfa/tests/test_erfa.py\n@@ -0,0 +1,544 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+from datetime import datetime\n+\n+import pytest\n+import numpy as np\n+from numpy.testing import assert_array_equal, assert_array_almost_equal, assert_allclose\n+\n+import erfa\n+\n+try:\n+    from astropy.time import Time\n+except ImportError:\n+    # astropy not available for testing\n+    class Time:\n+        _DUMMY = True\n+\n+        def __init__(self, *args, **kwargs):\n+            pass\n+\n+\n+def embedded_liberfa(path=erfa.ufunc.__file__):\n+    import platform\n+    import subprocess\n+\n+    command = ['nm', '--defined-only']\n+    if platform.system() == 'Windows':\n+        # command = ['']  # TODO\n+        return None\n+\n+    command.append(path)\n+    try:\n+        out = subprocess.run(command, check=True,\n+                             encoding='utf-8', stdout=subprocess.PIPE)\n+    except (subprocess.SubprocessError, OSError):\n+        return None\n+    else:\n+        return 'eraA2af' in out.stdout\n+\n+\n+class TestVersion:\n+    def test_erfa_version(self):\n+        assert hasattr(erfa.version, 'erfa_version')\n+        erfa_version = erfa.version.erfa_version\n+        assert isinstance(erfa_version, str)\n+        assert len(erfa_version.split('.')) == 3\n+\n+    def test_sofa_version(self):\n+        assert hasattr(erfa.version, 'sofa_version')\n+        sofa_version = erfa.version.sofa_version\n+        assert isinstance(sofa_version, str)\n+        assert (len(sofa_version) == 8\n+                or len(sofa_version) == 10 and sofa_version[8] == '_')\n+        # Sorry, future 22nd century person, you may have to adjust!\n+        assert sofa_version.startswith('20')\n+\n+    def test_version(self):\n+        assert hasattr(erfa, '__version__')\n+        version = erfa.__version__\n+        assert version is erfa.version.version\n+\n+    @pytest.mark.skipif(not embedded_liberfa(), reason='system liberfa')\n+    def test_version_with_embedded_liberfa(self):\n+        version = erfa.__version__\n+        assert version.startswith(erfa.version.erfa_version)\n+\n+\n+def test_erfa_wrapper():\n+    \"\"\"\n+    Runs a set of tests that mostly make sure vectorization is\n+    working as expected\n+    \"\"\"\n+\n+    jd = np.linspace(2456855.5, 2456855.5+1.0/24.0/60.0, 60*2+1)\n+    ra = np.linspace(0.0, np.pi*2.0, 5)\n+    dec = np.linspace(-np.pi/2.0, np.pi/2.0, 4)\n+\n+    aob, zob, hob, dob, rob, eo = erfa.atco13(\n+        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, jd,\n+        0.0, 0.0, 0.0, np.pi/4.0, 0.0, 0.0, 0.0, 1014.0, 0.0, 0.0, 0.5)\n+    assert aob.shape == (121,)\n+\n+    aob, zob, hob, dob, rob, eo = erfa.atco13(\n+        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, jd[0],\n+        0.0, 0.0, 0.0, np.pi/4.0, 0.0, 0.0, 0.0, 1014.0, 0.0, 0.0, 0.5)\n+    assert aob.shape == ()\n+\n+    aob, zob, hob, dob, rob, eo = erfa.atco13(\n+        ra[:, None, None], dec[None, :, None], 0.0, 0.0, 0.0, 0.0, jd[None, None, :],\n+        0.0, 0.0, 0.0, np.pi/4.0, 0.0, 0.0, 0.0, 1014.0, 0.0, 0.0, 0.5)\n+    (aob.shape) == (5, 4, 121)\n+\n+    iy, im, id, ihmsf = erfa.d2dtf(\"UTC\", 3, jd, 0.0)\n+    assert iy.shape == (121,)\n+    assert ihmsf.shape == (121,)\n+    assert ihmsf.dtype == erfa.dt_hmsf\n+\n+    iy, im, id, ihmsf = erfa.d2dtf(\"UTC\", 3, jd[0], 0.0)\n+    assert iy.shape == ()\n+    assert ihmsf.shape == ()\n+    assert ihmsf.dtype == erfa.dt_hmsf\n+\n+\n+def test_angle_ops():\n+\n+    sign, idmsf = erfa.a2af(6, -np.pi)\n+    assert sign == b'-'\n+    assert idmsf.item() == (180, 0, 0, 0)\n+\n+    sign, ihmsf = erfa.a2tf(6, np.pi)\n+    assert sign == b'+'\n+    assert ihmsf.item() == (12, 0, 0, 0)\n+\n+    rad = erfa.af2a('-', 180, 0, 0.0)\n+    np.testing.assert_allclose(rad, -np.pi)\n+\n+    rad = erfa.tf2a('+', 12, 0, 0.0)\n+    np.testing.assert_allclose(rad, np.pi)\n+\n+    rad = erfa.anp(3.*np.pi)\n+    np.testing.assert_allclose(rad, np.pi)\n+\n+    rad = erfa.anpm(3.*np.pi)\n+    np.testing.assert_allclose(rad, -np.pi)\n+\n+    sign, ihmsf = erfa.d2tf(1, -1.5)\n+    assert sign == b'-'\n+    assert ihmsf.item() == (36, 0, 0, 0)\n+\n+    days = erfa.tf2d('+', 3, 0, 0.0)\n+    np.testing.assert_allclose(days, 0.125)\n+\n+\n+def test_spherical_cartesian():\n+\n+    theta, phi = erfa.c2s([0.0, np.sqrt(2.0), np.sqrt(2.0)])\n+    np.testing.assert_allclose(theta, np.pi/2.0)\n+    np.testing.assert_allclose(phi, np.pi/4.0)\n+\n+    theta, phi, r = erfa.p2s([0.0, np.sqrt(2.0), np.sqrt(2.0)])\n+    np.testing.assert_allclose(theta, np.pi/2.0)\n+    np.testing.assert_allclose(phi, np.pi/4.0)\n+    np.testing.assert_allclose(r, 2.0)\n+\n+    pv = np.array(([0.0, np.sqrt(2.0), np.sqrt(2.0)], [1.0, 0.0, 0.0]),\n+                  dtype=erfa.dt_pv)\n+    theta, phi, r, td, pd, rd = erfa.pv2s(pv)\n+    np.testing.assert_allclose(theta, np.pi/2.0)\n+    np.testing.assert_allclose(phi, np.pi/4.0)\n+    np.testing.assert_allclose(r, 2.0)\n+    np.testing.assert_allclose(td, -np.sqrt(2.0)/2.0)\n+    np.testing.assert_allclose(pd, 0.0)\n+    np.testing.assert_allclose(rd, 0.0)\n+\n+    c = erfa.s2c(np.pi/2.0, np.pi/4.0)\n+    np.testing.assert_allclose(c, [0.0, np.sqrt(2.0)/2.0, np.sqrt(2.0)/2.0], atol=1e-14)\n+\n+    c = erfa.s2p(np.pi/2.0, np.pi/4.0, 1.0)\n+    np.testing.assert_allclose(c, [0.0, np.sqrt(2.0)/2.0, np.sqrt(2.0)/2.0], atol=1e-14)\n+\n+    pv = erfa.s2pv(np.pi/2.0, np.pi/4.0, 2.0, np.sqrt(2.0)/2.0, 0.0, 0.0)\n+    np.testing.assert_allclose(pv['p'], [0.0, np.sqrt(2.0), np.sqrt(2.0)], atol=1e-14)\n+    np.testing.assert_allclose(pv['v'],  [-1.0, 0.0, 0.0], atol=1e-14)\n+\n+\n+def test_errwarn_reporting():\n+    \"\"\"\n+    Test that the ERFA error reporting mechanism works as it should\n+    \"\"\"\n+\n+    # no warning\n+    erfa.dat(1990, 1, 1, 0.5)\n+\n+    # check warning is raised for a scalar\n+    with pytest.warns(erfa.ErfaWarning, match=r'1 of \"dubious year \\(Note 1\\)\"') as w:\n+        erfa.dat(100, 1, 1, 0.5)\n+        assert len(w) == 1\n+\n+    # and that the count is right for a vector.\n+    with pytest.warns(erfa.ErfaWarning, match=r'2 of \"dubious year \\(Note 1\\)\"') as w:\n+        erfa.dat([100, 200, 1990], 1, 1, 0.5)\n+        assert len(w) == 1\n+\n+    try:\n+        erfa.dat(1990, [1, 34, 2], [1, 1, 43], 0.5)\n+    except erfa.ErfaError as e:\n+        if '1 of \"bad day (Note 3)\", 1 of \"bad month\"' not in e.args[0]:\n+            assert False, 'Raised the correct type of error, but wrong message: ' + e.args[0]\n+\n+    try:\n+        erfa.dat(200, [1, 34, 2], [1, 1, 43], 0.5)\n+    except erfa.ErfaError as e:\n+        if 'warning' in e.args[0]:\n+            assert False, ('Raised the correct type of error, but there were '\n+                           'warnings mixed in: ' + e.args[0])\n+\n+\n+def test_vector_inouts():\n+    \"\"\"\n+    Tests that ERFA functions working with vectors are correctly consumed and spit out\n+    \"\"\"\n+\n+    # values are from test_erfa.c t_ab function\n+    pnat = [-0.76321968546737951,\n+            -0.60869453983060384,\n+            -0.21676408580639883]\n+    v = [2.1044018893653786e-5,\n+         -8.9108923304429319e-5,\n+         -3.8633714797716569e-5]\n+    s = 0.99980921395708788\n+    bm1 = 0.99999999506209258\n+\n+    expected = [-0.7631631094219556269,\n+                -0.6087553082505590832,\n+                -0.2167926269368471279]\n+\n+    res = erfa.ab(pnat, v, s, bm1)\n+    assert res.shape == (3,)\n+\n+    np.testing.assert_allclose(res, expected)\n+\n+    res2 = erfa.ab([pnat]*4, v, s, bm1)\n+    assert res2.shape == (4, 3)\n+    np.testing.assert_allclose(res2, [expected]*4)\n+\n+    # here we stride an array and also do it Fortran-order to make sure\n+    # it all still works correctly with non-contig arrays\n+    pnata = np.array(pnat)\n+    arrin = np.array([pnata, pnata/2, pnata/3, pnata/4, pnata/5]*4, order='F')\n+    res3 = erfa.ab(arrin[::5], v, s, bm1)\n+    assert res3.shape == (4, 3)\n+    np.testing.assert_allclose(res3, [expected]*4)\n+\n+\n+def test_rz():\n+    # This failed on MacOS (gh-68) because the types were not set correctly.\n+    r = erfa.rz(np.deg2rad(60.), np.eye(3))\n+    assert_array_almost_equal(r, np.array(\n+        [[0.5, 0.8660254, 0.],\n+         [-0.8660254, 0.5, 0.],\n+         [0., 0., 1.]]))\n+\n+\n+def test_pv_in():\n+    jd1 = 2456165.5\n+    jd2 = 0.401182685\n+\n+    pv = np.empty((), dtype=erfa.dt_pv)\n+    pv['p'] = [-6241497.16,\n+               401346.896,\n+               -1251136.04]\n+    pv['v'] = [-29.264597,\n+               -455.021831,\n+               0.0266151194]\n+\n+    astrom = erfa.apcs13(jd1, jd2, pv)\n+    assert astrom.shape == ()\n+\n+    # values from t_erfa_c\n+    np.testing.assert_allclose(astrom['pmt'], 12.65133794027378508)\n+    np.testing.assert_allclose(astrom['em'], 1.010428384373318379)\n+    np.testing.assert_allclose(astrom['eb'], [0.9012691529023298391,\n+                                              -.4173999812023068781,\n+                                              -.1809906511146821008])\n+    np.testing.assert_allclose(astrom['bpn'], np.eye(3))\n+\n+    # first make sure it *fails* if we mess with the input orders\n+    pvbad = np.empty_like(pv)\n+    pvbad['p'], pvbad['v'] = pv['v'], pv['p']\n+    astrombad = erfa.apcs13(jd1, jd2, pvbad)\n+    assert not np.allclose(astrombad['em'], 1.010428384373318379)\n+\n+    pvarr = np.array([pv]*3)\n+    astrom2 = erfa.apcs13(jd1, jd2, pvarr)\n+    assert astrom2.shape == (3,)\n+    np.testing.assert_allclose(astrom2['em'], 1.010428384373318379)\n+\n+    # try striding of the input array to make non-contiguous\n+    pvmatarr = np.array([pv]*9)[::3]\n+    astrom3 = erfa.apcs13(jd1, jd2, pvmatarr)\n+    assert astrom3.shape == (3,)\n+    np.testing.assert_allclose(astrom3['em'], 1.010428384373318379)\n+\n+\n+def test_pv_out():\n+    \"\"\"Test that ufunc can also deal with 'out' argument.\"\"\"\n+    pv = erfa.ufunc.s2pv(np.pi/2.0, np.pi/4.0, 2.0, np.sqrt(2.0)/2.0, 0.0, 0.0)\n+    pv2 = np.empty_like(pv)\n+    out = erfa.ufunc.s2pv(np.pi/2.0, np.pi/4.0, 2.0, np.sqrt(2.0)/2.0, 0.0, 0.0,\n+                          out=pv2)\n+    assert out is pv2\n+    assert np.all(pv2 == pv)\n+\n+\n+def test_zpv_out():\n+    \"\"\"Test that no-input routines work with 'out' argument.\"\"\"\n+    pv = np.zeros(10, erfa.dt_pv)\n+    out = erfa.ufunc.zpv(out=pv)\n+    assert out is pv\n+    np.testing.assert_array_equal(pv, np.zeros(10, erfa.dt_pv))\n+\n+\n+def test_struct_ldbody():\n+    \"\"\"\n+    Check dt_eraLDBODY is correctly defined (regression test; gh-74)\n+    \"\"\"\n+    assert erfa.dt_eraLDBODY.names == ('bm', 'dl', 'pv')\n+    assert erfa.dt_eraLDBODY['bm'] == np.dtype('f8')\n+    assert erfa.dt_eraLDBODY['dl'] == np.dtype('f8')\n+    assert erfa.dt_eraLDBODY['pv'] == erfa.dt_pv\n+\n+    # Test creating a struct, following test_ldn in t_erfa_c.\n+    # Use explicit assignments as otherwise the originally bad dtype\n+    # would work.\n+    b = np.empty(3, erfa.dt_eraLDBODY).view(np.recarray)\n+    b['bm'] = [0.00028574, 0.00095435, 1.0]\n+    b['dl'] = [3e-10, 3e-9, 6e-6]\n+    b['pv'] = np.array([([-7.81014427, -5.60956681, -1.98079819],\n+                         [0.0030723249, -0.00406995477, -0.00181335842]),\n+                        ([0.738098796, 4.63658692, 1.9693136],\n+                         [-0.00755816922, 0.00126913722, 0.000727999001]),\n+                        ([-0.000712174377, -0.00230478303, -0.00105865966],\n+                         [6.29235213e-6, -3.30888387e-7, -2.96486623e-7])],\n+                       dtype=erfa.dt_pv)\n+    ob = np.array([-0.974170437, -0.2115201, -0.0917583114])\n+    sc = np.array([-0.763276255, -0.608633767, -0.216735543])\n+    sn = erfa.ldn(b, ob, sc)\n+    assert_allclose(sn, np.array([-0.7632762579693333866,\n+                                  -0.6086337636093002660,\n+                                  -0.2167355420646328159]))\n+\n+\n+def test_struct_astrom():\n+    \"\"\"\n+    Checks producing and consuming of ERFA c struct astrom\n+    \"\"\"\n+\n+    am, eo = erfa.apci13(2456165.5, [0.401182685, 1])\n+    assert am.shape == (2, )\n+    assert am.dtype == erfa.dt_eraASTROM\n+    assert eo.shape == (2, )\n+\n+    # a few spotchecks from test_erfa.c\n+    np.testing.assert_allclose(am[0]['pmt'], 12.65133794027378508)\n+    np.testing.assert_allclose(am[0]['v'], [0.4289638897157027528e-4,\n+                                            0.8115034002544663526e-4,\n+                                            0.3517555122593144633e-4])\n+\n+    ri, di = erfa.atciqz(2.71, 0.174, am[0])\n+    np.testing.assert_allclose(ri, 2.709994899247599271)\n+    np.testing.assert_allclose(di, 0.1728740720983623469)\n+\n+\n+def test_float32_input():\n+    # Regression test for gh-8615\n+    xyz = np.array([[1, 0, 0], [0.9, 0.1, 0]])\n+    out64 = erfa.p2s(xyz)\n+    out32 = erfa.p2s(xyz.astype('f4'))\n+    assert_allclose(out32, out64, rtol=1.e-5)\n+\n+\n+def test_non_contiguous_matrix():\n+    # Regression test for gh-123 (astropy gh-15503)\n+    matrix = np.array([[1, 0, 0, 5],\n+                       [0, 1, 0, 6],\n+                       [0, 0, 1, 7]], dtype='float')[:, :3]\n+    vector = np.array([1., 2., 3.])\n+    assert_array_equal(matrix, np.eye(3))\n+    conv = erfa.rxp(matrix, vector)\n+    assert_array_equal(matrix @ vector, vector)\n+    assert_array_equal(conv, vector)\n+\n+\n+class TestAstromNotInplace:\n+    def setup_method(self):\n+        self.mjd_array = np.array(\n+            [58827.15925499, 58827.15925499, 58827.15925499,\n+             58827.15925499, 58827.15925499])\n+        self.mjd_scalar = self.mjd_array[0].item()\n+        self.utc2mjd = 2400000.5\n+        paranal_long = -1.228798\n+        paranal_lat = -0.42982\n+        paranal_height = 2669.\n+        self.astrom_scalar, _ = erfa.apco13(\n+            self.utc2mjd, self.mjd_scalar, 0.0, paranal_long, paranal_lat,\n+            paranal_height, 0.0, 0.0, 0.0, 0.0, 0.0, 2.5)\n+        self.astrom_array, _ = erfa.apco13(\n+            self.utc2mjd, self.mjd_array, 0.0, paranal_long, paranal_lat,\n+            paranal_height, 0.0, 0.0, 0.0, 0.0, 0.0, 2.5)\n+\n+    def test_scalar_input(self):\n+        # Regression test for gh-9799, where astrom0 being a void\n+        # caused a TypeError, as it was trying to change it in-place.\n+        assert type(self.astrom_scalar) is np.void\n+        astrom = erfa.aper13(self.utc2mjd, self.mjd_scalar, self.astrom_scalar)\n+        assert astrom is not self.astrom_scalar\n+        assert type(astrom) is np.void\n+\n+    def test_array_input(self):\n+        # Trying to fix gh-9799, it became clear that doing things in-place was\n+        # a bad idea generally (and didn't work), so also for array input we\n+        # now return a copy.\n+        assert type(self.astrom_array) is np.ndarray\n+        astrom = erfa.aper13(self.utc2mjd, self.mjd_array, self.astrom_array)\n+        assert astrom is not self.astrom_array\n+        assert type(astrom) is np.ndarray\n+\n+\n+class TestLeapSecondsBasics:\n+    def test_get_leap_seconds(self):\n+        leap_seconds = erfa.leap_seconds.get()\n+        assert isinstance(leap_seconds, np.ndarray)\n+        assert leap_seconds.dtype is erfa.dt_eraLEAPSECOND\n+        # Very basic sanity checks.\n+        assert np.all((leap_seconds['year'] >= 1960) &\n+                      (leap_seconds['year'] < 3000))\n+        assert np.all((leap_seconds['month'] >= 1) &\n+                      (leap_seconds['month'] <= 12))\n+        assert np.all(abs(leap_seconds['tai_utc'] < 1000.))\n+\n+    def test_leap_seconds_expires(self):\n+        expires = erfa.leap_seconds.expires\n+        assert isinstance(expires, datetime)\n+        last_ls = erfa.leap_seconds.get()[-1]\n+        dt_last = datetime(last_ls['year'], last_ls['month'], 1)\n+        assert expires > dt_last\n+\n+\n+class TestLeapSeconds:\n+    \"\"\"Test basic methods to control the ERFA leap-second table.\"\"\"\n+    def setup_method(self):\n+        self.erfa_ls = erfa.leap_seconds.get()\n+        self.expires = erfa.leap_seconds.expires\n+        self._expires = erfa.leap_seconds._expires\n+\n+    def teardown_method(self):\n+        erfa.leap_seconds.set(self.erfa_ls)\n+        erfa.leap_seconds._expires = self._expires\n+\n+    def test_set_reset_leap_seconds(self):\n+        erfa.leap_seconds.set()\n+        leap_seconds = erfa.leap_seconds.get()\n+\n+        erfa.leap_seconds.set(leap_seconds[:-2])\n+        new_leap_seconds = erfa.leap_seconds.get()\n+        assert_array_equal(new_leap_seconds, leap_seconds[:-2])\n+\n+        erfa.leap_seconds.set()\n+        reset_leap_seconds = erfa.leap_seconds.get()\n+        assert_array_equal(reset_leap_seconds, leap_seconds)\n+\n+    def test_set_leap_seconds(self):\n+        assert erfa.dat(2018, 1, 1, 0.) == 37.0\n+        leap_seconds = erfa.leap_seconds.get()\n+        # Set to a table that misses the 2017 leap second.\n+        part_leap_seconds = leap_seconds[leap_seconds['year'] < 2017]\n+        erfa.leap_seconds.set(part_leap_seconds)\n+        new_leap_seconds = erfa.leap_seconds.get()\n+        assert_array_equal(new_leap_seconds, part_leap_seconds)\n+        # Check the 2017 leap second is indeed missing.\n+        assert erfa.dat(2018, 1, 1, 0.) == 36.0\n+        # And that this would be expected from the expiration date.\n+        assert erfa.leap_seconds.expires < datetime(2018, 1, 1)\n+        assert erfa.leap_seconds.expired\n+        # Reset and check it is back.\n+        erfa.leap_seconds.set()\n+        assert erfa.dat(2018, 1, 1, 0.) == 37.0\n+\n+    @pytest.mark.parametrize('table,match', [\n+        ([(2017, 3, 10.)], 'January'),\n+        ([(2017, 1, 1.),\n+          (2017, 7, 3.)], 'jump'),\n+        ([[(2017, 1, 1.)],\n+          [(2017, 7, 2.)]], 'dimension')])\n+    def test_validation(self, table, match):\n+        with pytest.raises(ValueError, match=match):\n+            erfa.leap_seconds.set(table)\n+        # Check leap-second table is not corrupted.\n+        assert_array_equal(erfa.leap_seconds.get(), self.erfa_ls)\n+        assert erfa.dat(2018, 1, 1, 0.) == 37.0\n+\n+    def test_update_leap_seconds(self):\n+        assert erfa.dat(2018, 1, 1, 0.) == 37.0\n+        leap_seconds = erfa.leap_seconds.get()\n+        # Get old and new leap seconds\n+        old_leap_seconds = leap_seconds[leap_seconds['year'] < 2017]\n+        new_leap_seconds = leap_seconds[leap_seconds['year'] >= 2017]\n+        # Updating with either of these should do nothing.\n+        n_update = erfa.leap_seconds.update(new_leap_seconds)\n+        assert n_update == 0\n+        assert_array_equal(erfa.leap_seconds.get(), self.erfa_ls)\n+        n_update = erfa.leap_seconds.update(old_leap_seconds)\n+        assert n_update == 0\n+        assert_array_equal(erfa.leap_seconds.get(), self.erfa_ls)\n+\n+        # But after setting to older part, update with newer should work.\n+        erfa.leap_seconds.set(old_leap_seconds)\n+        # Check the 2017 leap second is indeed missing.\n+        assert erfa.dat(2018, 1, 1, 0.) == 36.0\n+        # Update with missing leap seconds.\n+        n_update = erfa.leap_seconds.update(new_leap_seconds)\n+        assert n_update == len(new_leap_seconds)\n+        assert erfa.dat(2018, 1, 1, 0.) == 37.0\n+\n+        # Also a final try with overlapping data.\n+        erfa.leap_seconds.set(old_leap_seconds)\n+        n_update = erfa.leap_seconds.update(leap_seconds)\n+        assert n_update == len(new_leap_seconds)\n+        assert erfa.dat(2018, 1, 1, 0.) == 37.0\n+\n+    @pytest.mark.parametrize('expiration', [\n+        datetime(2345, 1, 1),\n+        '1 January 2345',\n+        pytest.param(Time('2345-01-01', scale='tai'),\n+                     marks=pytest.mark.skipif(hasattr(Time, '_DUMMY'),\n+                                              reason='astropy not available'))])\n+    def test_with_expiration(self, expiration):\n+        class ExpiringArray(np.ndarray):\n+            expires = expiration\n+\n+        leap_seconds = erfa.leap_seconds.get()\n+        erfa.leap_seconds.set(leap_seconds.view(ExpiringArray))\n+        assert erfa.leap_seconds.expires == datetime(2345, 1, 1)\n+\n+        # Get old and new leap seconds\n+        old_leap_seconds = leap_seconds[:-10]\n+        new_leap_seconds = leap_seconds[-10:]\n+\n+        erfa.leap_seconds.set(old_leap_seconds)\n+        # Check expiration is reset\n+        assert erfa.leap_seconds.expires != datetime(2345, 1, 1)\n+        # Update with missing leap seconds.\n+        n_update = erfa.leap_seconds.update(\n+            new_leap_seconds.view(ExpiringArray))\n+        assert n_update == len(new_leap_seconds)\n+        assert erfa.leap_seconds.expires == datetime(2345, 1, 1)\n+\n+    def test_with_expiration_warning(self):\n+        class ExpiringArray(np.ndarray):\n+            expires = 'incomprehensible'\n+\n+        leap_seconds = erfa.leap_seconds.get()\n+        with pytest.warns(erfa.ErfaWarning,\n+                          match='non-datetime.*parsing it raised'):\n+            erfa.leap_seconds.set(leap_seconds.view(ExpiringArray))\ndiff --git a/erfa/tests/test_ufunc.py b/erfa/tests/test_ufunc.py\nnew file mode 100644\nindex 0000000000..f7186282bc\n--- /dev/null\n+++ b/erfa/tests/test_ufunc.py\n@@ -0,0 +1,3790 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\n+# \"test_ufunc.py\" is auto-generated by erfa_generator.py from the template\n+# \"test_ufunc.py.templ\". Do *not* edit \"test_ufunc.py\" directly, instead edit\n+# \"test_ufunc.py.templ\" and run erfa_generator.py from the source directory to\n+# update it.\n+\n+\"\"\"\n+Basic tests of the ERFA library routines.\n+\n+These are just the tests bundled with ERFA itself, in ``t_erfa_c.c``,\n+but translated to python to make sure that the code returns the same numbers.\n+\n+The viv and vid functions emulate the corresponding functions in ``t_erfa_c.c``.\n+\n+The tests are skipped if a system library is used that does not match in\n+version number, since in that case the precise numbers may have changed\n+(e.g., due to the earth orientation changes between 1.7.2 and 1.7.3).\n+\"\"\"\n+\n+import numpy as np\n+import pytest\n+\n+import erfa\n+from erfa import ufunc as erfa_ufunc\n+\n+\n+if not erfa.__version__.startswith(erfa.version.erfa_version):\n+    pytest.skip(\"skipping for system library with mismatched version\",\n+                allow_module_level=True)\n+\n+\n+def viv(ival, ivalok, func, test, _):\n+    \"\"\"Validate an integer result.\"\"\"\n+    assert ival == ivalok, f\"{func} failed: {test} want {ivalok} got {ival}\"\n+\n+\n+def vvd(val, valok, dval, func, test, _):\n+    \"\"\"Validate a double result.\"\"\"\n+    a = val - valok\n+    assert a == 0.0 or abs(a) <= abs(dval), (\n+        f\"{func} failed: {test} want {valok:.20g} got {val:.20g} \"\n+        f\"(1/{abs(valok / a):.3g})\")\n+\n+\n+status = np.zeros((), dtype=int)\n+# <--------------------------Actual test-wrapping code------------------------>\n+\n+\n+def test_a2af():\n+    s, idmsf = erfa_ufunc.a2af(4, 2.345)\n+    viv(s[0], b'+', \"a2af\", \"s\", status)\n+    viv(idmsf[0],  134, \"a2af\", \"0\", status)\n+    viv(idmsf[1],   21, \"a2af\", \"1\", status)\n+    viv(idmsf[2],   30, \"a2af\", \"2\", status)\n+    viv(idmsf[3], 9706, \"a2af\", \"3\", status)\n+\n+\n+def test_a2tf():\n+    s, ihmsf = erfa_ufunc.a2tf(4, -3.01234)\n+    viv(s[0], b'-', \"a2tf\", \"s\", status)\n+    viv(ihmsf[0],   11, \"a2tf\", \"0\", status)\n+    viv(ihmsf[1],   30, \"a2tf\", \"1\", status)\n+    viv(ihmsf[2],   22, \"a2tf\", \"2\", status)\n+    viv(ihmsf[3], 6484, \"a2tf\", \"3\", status)\n+\n+\n+def test_ab():\n+    pnat = np.empty((3,), float)\n+    v = np.empty((3,), float)\n+    ppr = np.empty((3,), float)\n+    pnat[0] = -0.76321968546737951\n+    pnat[1] = -0.60869453983060384\n+    pnat[2] = -0.21676408580639883\n+    v[0] =  2.1044018893653786e-5\n+    v[1] = -8.9108923304429319e-5\n+    v[2] = -3.8633714797716569e-5\n+    s = 0.99980921395708788\n+    bm1 = 0.99999999506209258\n+    ppr = erfa_ufunc.ab(pnat, v, s, bm1)\n+    vvd(ppr[0], -0.7631631094219556269, 1e-12, \"ab\", \"1\", status)\n+    vvd(ppr[1], -0.6087553082505590832, 1e-12, \"ab\", \"2\", status)\n+    vvd(ppr[2], -0.2167926269368471279, 1e-12, \"ab\", \"3\", status)\n+\n+\n+def test_ae2hd():\n+    a = 5.5\n+    e = 1.1\n+    p = 0.7\n+    h, d = erfa_ufunc.ae2hd(a, e, p)\n+    vvd(h, 0.5933291115507309663, 1e-14, \"ae2hd\", \"h\", status)\n+    vvd(d, 0.9613934761647817620, 1e-14, \"ae2hd\", \"d\", status)\n+\n+\n+def test_af2a():\n+    a, j = erfa_ufunc.af2a('-', 45, 13, 27.2)\n+    vvd(a, -0.7893115794313644842, 1e-12, \"af2a\", \"a\", status)\n+    viv(j, 0, \"af2a\", \"j\", status)\n+\n+\n+def test_anp():\n+    vvd(erfa_ufunc.anp(-0.1), 6.183185307179586477, 1e-12, \"anp\", \"\", status)\n+\n+\n+def test_anpm():\n+    vvd(erfa_ufunc.anpm(-4.0), 2.283185307179586477, 1e-12, \"anpm\", \"\", status)\n+\n+\n+def test_apcg():\n+    ebpv = np.empty((), erfa_ufunc.dt_pv)\n+    ehp = np.empty((3,), float)\n+    date1 = 2456165.5\n+    date2 = 0.401182685\n+    ebpv['p'][0] = 0.901310875\n+    ebpv['p'][1] = -0.417402664\n+    ebpv['p'][2] = -0.180982288\n+    ebpv['v'][0] = 0.00742727954\n+    ebpv['v'][1] = 0.0140507459\n+    ebpv['v'][2] = 0.00609045792\n+    ehp[0] = 0.903358544\n+    ehp[1] = -0.415395237\n+    ehp[2] = -0.180084014\n+    astrom = erfa_ufunc.apcg(date1, date2, ebpv, ehp)\n+    astrom = astrom.view(np.recarray)\n+    vvd(astrom.pmt, 12.65133794027378508, 1e-11, \"apcg\", \"pmt\", status)\n+    vvd(astrom.eb[0], 0.901310875, 1e-12, \"apcg\", \"eb(1)\", status)\n+    vvd(astrom.eb[1], -0.417402664, 1e-12, \"apcg\", \"eb(2)\", status)\n+    vvd(astrom.eb[2], -0.180982288, 1e-12, \"apcg\", \"eb(3)\", status)\n+    vvd(astrom.eh[0], 0.8940025429324143045, 1e-12, \"apcg\", \"eh(1)\", status)\n+    vvd(astrom.eh[1], -0.4110930268679817955, 1e-12, \"apcg\", \"eh(2)\", status)\n+    vvd(astrom.eh[2], -0.1782189004872870264, 1e-12, \"apcg\", \"eh(3)\", status)\n+    vvd(astrom.em, 1.010465295811013146, 1e-12, \"apcg\", \"em\", status)\n+    vvd(astrom.v[0], 0.4289638913597693554e-4, 1e-16, \"apcg\", \"v(1)\", status)\n+    vvd(astrom.v[1], 0.8115034051581320575e-4, 1e-16, \"apcg\", \"v(2)\", status)\n+    vvd(astrom.v[2], 0.3517555136380563427e-4, 1e-16, \"apcg\", \"v(3)\", status)\n+    vvd(astrom.bm1, 0.9999999951686012981, 1e-12, \"apcg\", \"bm1\", status)\n+    vvd(astrom.bpn[0][0], 1.0, 0.0, \"apcg\", \"bpn(1,1)\", status)\n+    vvd(astrom.bpn[1][0], 0.0, 0.0, \"apcg\", \"bpn(2,1)\", status)\n+    vvd(astrom.bpn[2][0], 0.0, 0.0, \"apcg\", \"bpn(3,1)\", status)\n+    vvd(astrom.bpn[0][1], 0.0, 0.0, \"apcg\", \"bpn(1,2)\", status)\n+    vvd(astrom.bpn[1][1], 1.0, 0.0, \"apcg\", \"bpn(2,2)\", status)\n+    vvd(astrom.bpn[2][1], 0.0, 0.0, \"apcg\", \"bpn(3,2)\", status)\n+    vvd(astrom.bpn[0][2], 0.0, 0.0, \"apcg\", \"bpn(1,3)\", status)\n+    vvd(astrom.bpn[1][2], 0.0, 0.0, \"apcg\", \"bpn(2,3)\", status)\n+    vvd(astrom.bpn[2][2], 1.0, 0.0, \"apcg\", \"bpn(3,3)\", status)\n+\n+\n+def test_apcg13():\n+    date1 = 2456165.5\n+    date2 = 0.401182685\n+    astrom = erfa_ufunc.apcg13(date1, date2)\n+    astrom = astrom.view(np.recarray)\n+    vvd(astrom.pmt, 12.65133794027378508, 1e-11, \"apcg13\", \"pmt\", status)\n+    vvd(astrom.eb[0], 0.9013108747340644755, 1e-12, \"apcg13\", \"eb(1)\", status)\n+    vvd(astrom.eb[1], -0.4174026640406119957, 1e-12, \"apcg13\", \"eb(2)\", status)\n+    vvd(astrom.eb[2], -0.1809822877867817771, 1e-12, \"apcg13\", \"eb(3)\", status)\n+    vvd(astrom.eh[0], 0.8940025429255499549, 1e-12, \"apcg13\", \"eh(1)\", status)\n+    vvd(astrom.eh[1], -0.4110930268331896318, 1e-12, \"apcg13\", \"eh(2)\", status)\n+    vvd(astrom.eh[2], -0.1782189006019749850, 1e-12, \"apcg13\", \"eh(3)\", status)\n+    vvd(astrom.em, 1.010465295964664178, 1e-12, \"apcg13\", \"em\", status)\n+    vvd(astrom.v[0], 0.4289638912941341125e-4, 1e-16, \"apcg13\", \"v(1)\", status)\n+    vvd(astrom.v[1], 0.8115034032405042132e-4, 1e-16, \"apcg13\", \"v(2)\", status)\n+    vvd(astrom.v[2], 0.3517555135536470279e-4, 1e-16, \"apcg13\", \"v(3)\", status)\n+    vvd(astrom.bm1, 0.9999999951686013142, 1e-12, \"apcg13\", \"bm1\", status)\n+    vvd(astrom.bpn[0][0], 1.0, 0.0, \"apcg13\", \"bpn(1,1)\", status)\n+    vvd(astrom.bpn[1][0], 0.0, 0.0, \"apcg13\", \"bpn(2,1)\", status)\n+    vvd(astrom.bpn[2][0], 0.0, 0.0, \"apcg13\", \"bpn(3,1)\", status)\n+    vvd(astrom.bpn[0][1], 0.0, 0.0, \"apcg13\", \"bpn(1,2)\", status)\n+    vvd(astrom.bpn[1][1], 1.0, 0.0, \"apcg13\", \"bpn(2,2)\", status)\n+    vvd(astrom.bpn[2][1], 0.0, 0.0, \"apcg13\", \"bpn(3,2)\", status)\n+    vvd(astrom.bpn[0][2], 0.0, 0.0, \"apcg13\", \"bpn(1,3)\", status)\n+    vvd(astrom.bpn[1][2], 0.0, 0.0, \"apcg13\", \"bpn(2,3)\", status)\n+    vvd(astrom.bpn[2][2], 1.0, 0.0, \"apcg13\", \"bpn(3,3)\", status)\n+\n+\n+def test_apci():\n+    ebpv = np.empty((), erfa_ufunc.dt_pv)\n+    ehp = np.empty((3,), float)\n+    date1 = 2456165.5\n+    date2 = 0.401182685\n+    ebpv['p'][0] = 0.901310875\n+    ebpv['p'][1] = -0.417402664\n+    ebpv['p'][2] = -0.180982288\n+    ebpv['v'][0] = 0.00742727954\n+    ebpv['v'][1] = 0.0140507459\n+    ebpv['v'][2] = 0.00609045792\n+    ehp[0] = 0.903358544\n+    ehp[1] = -0.415395237\n+    ehp[2] = -0.180084014\n+    x = 0.0013122272\n+    y = -2.92808623e-5\n+    s = 3.05749468e-8\n+    astrom = erfa_ufunc.apci(date1, date2, ebpv, ehp, x, y, s)\n+    astrom = astrom.view(np.recarray)\n+    vvd(astrom.pmt, 12.65133794027378508, 1e-11, \"apci\", \"pmt\", status)\n+    vvd(astrom.eb[0], 0.901310875, 1e-12, \"apci\", \"eb(1)\", status)\n+    vvd(astrom.eb[1], -0.417402664, 1e-12, \"apci\", \"eb(2)\", status)\n+    vvd(astrom.eb[2], -0.180982288, 1e-12, \"apci\", \"eb(3)\", status)\n+    vvd(astrom.eh[0], 0.8940025429324143045, 1e-12, \"apci\", \"eh(1)\", status)\n+    vvd(astrom.eh[1], -0.4110930268679817955, 1e-12, \"apci\", \"eh(2)\", status)\n+    vvd(astrom.eh[2], -0.1782189004872870264, 1e-12, \"apci\", \"eh(3)\", status)\n+    vvd(astrom.em, 1.010465295811013146, 1e-12, \"apci\", \"em\", status)\n+    vvd(astrom.v[0], 0.4289638913597693554e-4, 1e-16, \"apci\", \"v(1)\", status)\n+    vvd(astrom.v[1], 0.8115034051581320575e-4, 1e-16, \"apci\", \"v(2)\", status)\n+    vvd(astrom.v[2], 0.3517555136380563427e-4, 1e-16, \"apci\", \"v(3)\", status)\n+    vvd(astrom.bm1, 0.9999999951686012981, 1e-12, \"apci\", \"bm1\", status)\n+    vvd(astrom.bpn[0][0], 0.9999991390295159156, 1e-12, \"apci\", \"bpn(1,1)\", status)\n+    vvd(astrom.bpn[1][0], 0.4978650072505016932e-7, 1e-12, \"apci\", \"bpn(2,1)\", status)\n+    vvd(astrom.bpn[2][0], 0.1312227200000000000e-2, 1e-12, \"apci\", \"bpn(3,1)\", status)\n+    vvd(astrom.bpn[0][1], -0.1136336653771609630e-7, 1e-12, \"apci\", \"bpn(1,2)\", status)\n+    vvd(astrom.bpn[1][1], 0.9999999995713154868, 1e-12, \"apci\", \"bpn(2,2)\", status)\n+    vvd(astrom.bpn[2][1], -0.2928086230000000000e-4, 1e-12, \"apci\", \"bpn(3,2)\", status)\n+    vvd(astrom.bpn[0][2], -0.1312227200895260194e-2, 1e-12, \"apci\", \"bpn(1,3)\", status)\n+    vvd(astrom.bpn[1][2], 0.2928082217872315680e-4, 1e-12, \"apci\", \"bpn(2,3)\", status)\n+    vvd(astrom.bpn[2][2], 0.9999991386008323373, 1e-12, \"apci\", \"bpn(3,3)\", status)\n+\n+\n+def test_apci13():\n+    date1 = 2456165.5\n+    date2 = 0.401182685\n+    astrom, eo = erfa_ufunc.apci13(date1, date2)\n+    astrom = astrom.view(np.recarray)\n+    vvd(astrom.pmt, 12.65133794027378508, 1e-11, \"apci13\", \"pmt\", status)\n+    vvd(astrom.eb[0], 0.9013108747340644755, 1e-12, \"apci13\", \"eb(1)\", status)\n+    vvd(astrom.eb[1], -0.4174026640406119957, 1e-12, \"apci13\", \"eb(2)\", status)\n+    vvd(astrom.eb[2], -0.1809822877867817771, 1e-12, \"apci13\", \"eb(3)\", status)\n+    vvd(astrom.eh[0], 0.8940025429255499549, 1e-12, \"apci13\", \"eh(1)\", status)\n+    vvd(astrom.eh[1], -0.4110930268331896318, 1e-12, \"apci13\", \"eh(2)\", status)\n+    vvd(astrom.eh[2], -0.1782189006019749850, 1e-12, \"apci13\", \"eh(3)\", status)\n+    vvd(astrom.em, 1.010465295964664178, 1e-12, \"apci13\", \"em\", status)\n+    vvd(astrom.v[0], 0.4289638912941341125e-4, 1e-16, \"apci13\", \"v(1)\", status)\n+    vvd(astrom.v[1], 0.8115034032405042132e-4, 1e-16, \"apci13\", \"v(2)\", status)\n+    vvd(astrom.v[2], 0.3517555135536470279e-4, 1e-16, \"apci13\", \"v(3)\", status)\n+    vvd(astrom.bm1, 0.9999999951686013142, 1e-12, \"apci13\", \"bm1\", status)\n+    vvd(astrom.bpn[0][0], 0.9999992060376761710, 1e-12, \"apci13\", \"bpn(1,1)\", status)\n+    vvd(astrom.bpn[1][0], 0.4124244860106037157e-7, 1e-12, \"apci13\", \"bpn(2,1)\", status)\n+    vvd(astrom.bpn[2][0], 0.1260128571051709670e-2, 1e-12, \"apci13\", \"bpn(3,1)\", status)\n+    vvd(astrom.bpn[0][1], -0.1282291987222130690e-7, 1e-12, \"apci13\", \"bpn(1,2)\", status)\n+    vvd(astrom.bpn[1][1], 0.9999999997456835325, 1e-12, \"apci13\", \"bpn(2,2)\", status)\n+    vvd(astrom.bpn[2][1], -0.2255288829420524935e-4, 1e-12, \"apci13\", \"bpn(3,2)\", status)\n+    vvd(astrom.bpn[0][2], -0.1260128571661374559e-2, 1e-12, \"apci13\", \"bpn(1,3)\", status)\n+    vvd(astrom.bpn[1][2], 0.2255285422953395494e-4, 1e-12, \"apci13\", \"bpn(2,3)\", status)\n+    vvd(astrom.bpn[2][2], 0.9999992057833604343, 1e-12, \"apci13\", \"bpn(3,3)\", status)\n+    vvd(eo, -0.2900618712657375647e-2, 1e-12, \"apci13\", \"eo\", status)\n+\n+\n+def test_apco():\n+    ebpv = np.empty((), erfa_ufunc.dt_pv)\n+    ehp = np.empty((3,), float)\n+    date1 = 2456384.5\n+    date2 = 0.970031644\n+    ebpv['p'][0] = -0.974170438\n+    ebpv['p'][1] = -0.211520082\n+    ebpv['p'][2] = -0.0917583024\n+    ebpv['v'][0] = 0.00364365824\n+    ebpv['v'][1] = -0.0154287319\n+    ebpv['v'][2] = -0.00668922024\n+    ehp[0] = -0.973458265\n+    ehp[1] = -0.209215307\n+    ehp[2] = -0.0906996477\n+    x = 0.0013122272\n+    y = -2.92808623e-5\n+    s = 3.05749468e-8\n+    theta = 3.14540971\n+    elong = -0.527800806\n+    phi = -1.2345856\n+    hm = 2738.0\n+    xp = 2.47230737e-7\n+    yp = 1.82640464e-6\n+    sp = -3.01974337e-11\n+    refa = 0.000201418779\n+    refb = -2.36140831e-7\n+    astrom = erfa_ufunc.apco(date1, date2, ebpv, ehp, x, y, s, theta, elong, phi, hm, xp, yp, sp, refa, refb)\n+    astrom = astrom.view(np.recarray)\n+    vvd(astrom.pmt, 13.25248468622587269, 1e-11, \"apco\", \"pmt\", status)\n+    vvd(astrom.eb[0], -0.9741827110630322720, 1e-12, \"apco\", \"eb(1)\", status)\n+    vvd(astrom.eb[1], -0.2115130190135344832, 1e-12, \"apco\", \"eb(2)\", status)\n+    vvd(astrom.eb[2], -0.09179840186949532298, 1e-12, \"apco\", \"eb(3)\", status)\n+    vvd(astrom.eh[0], -0.9736425571689739035, 1e-12, \"apco\", \"eh(1)\", status)\n+    vvd(astrom.eh[1], -0.2092452125849330936, 1e-12, \"apco\", \"eh(2)\", status)\n+    vvd(astrom.eh[2], -0.09075578152243272599, 1e-12, \"apco\", \"eh(3)\", status)\n+    vvd(astrom.em, 0.9998233241709957653, 1e-12, \"apco\", \"em\", status)\n+    vvd(astrom.v[0], 0.2078704992916728762e-4, 1e-16, \"apco\", \"v(1)\", status)\n+    vvd(astrom.v[1], -0.8955360107151952319e-4, 1e-16, \"apco\", \"v(2)\", status)\n+    vvd(astrom.v[2], -0.3863338994288951082e-4, 1e-16, \"apco\", \"v(3)\", status)\n+    vvd(astrom.bm1, 0.9999999950277561236, 1e-12, \"apco\", \"bm1\", status)\n+    vvd(astrom.bpn[0][0], 0.9999991390295159156, 1e-12, \"apco\", \"bpn(1,1)\", status)\n+    vvd(astrom.bpn[1][0], 0.4978650072505016932e-7, 1e-12, \"apco\", \"bpn(2,1)\", status)\n+    vvd(astrom.bpn[2][0], 0.1312227200000000000e-2, 1e-12, \"apco\", \"bpn(3,1)\", status)\n+    vvd(astrom.bpn[0][1], -0.1136336653771609630e-7, 1e-12, \"apco\", \"bpn(1,2)\", status)\n+    vvd(astrom.bpn[1][1], 0.9999999995713154868, 1e-12, \"apco\", \"bpn(2,2)\", status)\n+    vvd(astrom.bpn[2][1], -0.2928086230000000000e-4, 1e-12, \"apco\", \"bpn(3,2)\", status)\n+    vvd(astrom.bpn[0][2], -0.1312227200895260194e-2, 1e-12, \"apco\", \"bpn(1,3)\", status)\n+    vvd(astrom.bpn[1][2], 0.2928082217872315680e-4, 1e-12, \"apco\", \"bpn(2,3)\", status)\n+    vvd(astrom.bpn[2][2], 0.9999991386008323373, 1e-12, \"apco\", \"bpn(3,3)\", status)\n+    vvd(astrom.along, -0.5278008060295995734, 1e-12, \"apco\", \"along\", status)\n+    vvd(astrom.xpl, 0.1133427418130752958e-5, 1e-17, \"apco\", \"xpl\", status)\n+    vvd(astrom.ypl, 0.1453347595780646207e-5, 1e-17, \"apco\", \"ypl\", status)\n+    vvd(astrom.sphi, -0.9440115679003211329, 1e-12, \"apco\", \"sphi\", status)\n+    vvd(astrom.cphi, 0.3299123514971474711, 1e-12, \"apco\", \"cphi\", status)\n+    vvd(astrom.diurab, 0, 0, \"apco\", \"diurab\", status)\n+    vvd(astrom.eral, 2.617608903970400427, 1e-12, \"apco\", \"eral\", status)\n+    vvd(astrom.refa, 0.2014187790000000000e-3, 1e-15, \"apco\", \"refa\", status)\n+    vvd(astrom.refb, -0.2361408310000000000e-6, 1e-18, \"apco\", \"refb\", status)\n+\n+\n+def test_apco13():\n+    utc1 = 2456384.5\n+    utc2 = 0.969254051\n+    dut1 = 0.1550675\n+    elong = -0.527800806\n+    phi = -1.2345856\n+    hm = 2738.0\n+    xp = 2.47230737e-7\n+    yp = 1.82640464e-6\n+    phpa = 731.0\n+    tc = 12.8\n+    rh = 0.59\n+    wl = 0.55\n+    astrom, eo, j = erfa_ufunc.apco13(utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    astrom = astrom.view(np.recarray)\n+    vvd(astrom.pmt, 13.25248468622475727, 1e-11, \"apco13\", \"pmt\", status)\n+    vvd(astrom.eb[0], -0.9741827107320875162, 1e-12, \"apco13\", \"eb(1)\", status)\n+    vvd(astrom.eb[1], -0.2115130190489716682, 1e-12, \"apco13\", \"eb(2)\", status)\n+    vvd(astrom.eb[2], -0.09179840189496755339, 1e-12, \"apco13\", \"eb(3)\", status)\n+    vvd(astrom.eh[0], -0.9736425572586935247, 1e-12, \"apco13\", \"eh(1)\", status)\n+    vvd(astrom.eh[1], -0.2092452121603336166, 1e-12, \"apco13\", \"eh(2)\", status)\n+    vvd(astrom.eh[2], -0.09075578153885665295, 1e-12, \"apco13\", \"eh(3)\", status)\n+    vvd(astrom.em, 0.9998233240913898141, 1e-12, \"apco13\", \"em\", status)\n+    vvd(astrom.v[0], 0.2078704994520489246e-4, 1e-16, \"apco13\", \"v(1)\", status)\n+    vvd(astrom.v[1], -0.8955360133238868938e-4, 1e-16, \"apco13\", \"v(2)\", status)\n+    vvd(astrom.v[2], -0.3863338993055887398e-4, 1e-16, \"apco13\", \"v(3)\", status)\n+    vvd(astrom.bm1, 0.9999999950277561004, 1e-12, \"apco13\", \"bm1\", status)\n+    vvd(astrom.bpn[0][0], 0.9999991390295147999, 1e-12, \"apco13\", \"bpn(1,1)\", status)\n+    vvd(astrom.bpn[1][0], 0.4978650075315529277e-7, 1e-12, \"apco13\", \"bpn(2,1)\", status)\n+    vvd(astrom.bpn[2][0], 0.001312227200850293372, 1e-12, \"apco13\", \"bpn(3,1)\", status)\n+    vvd(astrom.bpn[0][1], -0.1136336652812486604e-7, 1e-12, \"apco13\", \"bpn(1,2)\", status)\n+    vvd(astrom.bpn[1][1], 0.9999999995713154865, 1e-12, \"apco13\", \"bpn(2,2)\", status)\n+    vvd(astrom.bpn[2][1], -0.2928086230975367296e-4, 1e-12, \"apco13\", \"bpn(3,2)\", status)\n+    vvd(astrom.bpn[0][2], -0.001312227201745553566, 1e-12, \"apco13\", \"bpn(1,3)\", status)\n+    vvd(astrom.bpn[1][2], 0.2928082218847679162e-4, 1e-12, \"apco13\", \"bpn(2,3)\", status)\n+    vvd(astrom.bpn[2][2], 0.9999991386008312212, 1e-12, \"apco13\", \"bpn(3,3)\", status)\n+    vvd(astrom.along, -0.5278008060295995733, 1e-12, \"apco13\", \"along\", status)\n+    vvd(astrom.xpl, 0.1133427418130752958e-5, 1e-17, \"apco13\", \"xpl\", status)\n+    vvd(astrom.ypl, 0.1453347595780646207e-5, 1e-17, \"apco13\", \"ypl\", status)\n+    vvd(astrom.sphi, -0.9440115679003211329, 1e-12, \"apco13\", \"sphi\", status)\n+    vvd(astrom.cphi, 0.3299123514971474711, 1e-12, \"apco13\", \"cphi\", status)\n+    vvd(astrom.diurab, 0, 0, \"apco13\", \"diurab\", status)\n+    vvd(astrom.eral, 2.617608909189664000, 1e-12, \"apco13\", \"eral\", status)\n+    vvd(astrom.refa, 0.2014187785940396921e-3, 1e-15, \"apco13\", \"refa\", status)\n+    vvd(astrom.refb, -0.2361408314943696227e-6, 1e-18, \"apco13\", \"refb\", status)\n+    vvd(eo, -0.003020548354802412839, 1e-14, \"apco13\", \"eo\", status)\n+    viv(j, 0, \"apco13\", \"j\", status)\n+\n+\n+def test_apcs():\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    ebpv = np.empty((), erfa_ufunc.dt_pv)\n+    ehp = np.empty((3,), float)\n+    date1 = 2456384.5\n+    date2 = 0.970031644\n+    pv['p'][0] = -1836024.09\n+    pv['p'][1] = 1056607.72\n+    pv['p'][2] = -5998795.26\n+    pv['v'][0] = -77.0361767\n+    pv['v'][1] = -133.310856\n+    pv['v'][2] = 0.0971855934\n+    ebpv['p'][0] = -0.974170438\n+    ebpv['p'][1] = -0.211520082\n+    ebpv['p'][2] = -0.0917583024\n+    ebpv['v'][0] = 0.00364365824\n+    ebpv['v'][1] = -0.0154287319\n+    ebpv['v'][2] = -0.00668922024\n+    ehp[0] = -0.973458265\n+    ehp[1] = -0.209215307\n+    ehp[2] = -0.0906996477\n+    astrom = erfa_ufunc.apcs(date1, date2, pv, ebpv, ehp)\n+    astrom = astrom.view(np.recarray)\n+    vvd(astrom.pmt, 13.25248468622587269, 1e-11, \"apcs\", \"pmt\", status)\n+    vvd(astrom.eb[0], -0.9741827110629881886, 1e-12, \"apcs\", \"eb(1)\", status)\n+    vvd(astrom.eb[1], -0.2115130190136415986, 1e-12, \"apcs\", \"eb(2)\", status)\n+    vvd(astrom.eb[2], -0.09179840186954412099, 1e-12, \"apcs\", \"eb(3)\", status)\n+    vvd(astrom.eh[0], -0.9736425571689454706, 1e-12, \"apcs\", \"eh(1)\", status)\n+    vvd(astrom.eh[1], -0.2092452125850435930, 1e-12, \"apcs\", \"eh(2)\", status)\n+    vvd(astrom.eh[2], -0.09075578152248299218, 1e-12, \"apcs\", \"eh(3)\", status)\n+    vvd(astrom.em, 0.9998233241709796859, 1e-12, \"apcs\", \"em\", status)\n+    vvd(astrom.v[0], 0.2078704993282685510e-4, 1e-16, \"apcs\", \"v(1)\", status)\n+    vvd(astrom.v[1], -0.8955360106989405683e-4, 1e-16, \"apcs\", \"v(2)\", status)\n+    vvd(astrom.v[2], -0.3863338994289409097e-4, 1e-16, \"apcs\", \"v(3)\", status)\n+    vvd(astrom.bm1, 0.9999999950277561237, 1e-12, \"apcs\", \"bm1\", status)\n+    vvd(astrom.bpn[0][0], 1, 0, \"apcs\", \"bpn(1,1)\", status)\n+    vvd(astrom.bpn[1][0], 0, 0, \"apcs\", \"bpn(2,1)\", status)\n+    vvd(astrom.bpn[2][0], 0, 0, \"apcs\", \"bpn(3,1)\", status)\n+    vvd(astrom.bpn[0][1], 0, 0, \"apcs\", \"bpn(1,2)\", status)\n+    vvd(astrom.bpn[1][1], 1, 0, \"apcs\", \"bpn(2,2)\", status)\n+    vvd(astrom.bpn[2][1], 0, 0, \"apcs\", \"bpn(3,2)\", status)\n+    vvd(astrom.bpn[0][2], 0, 0, \"apcs\", \"bpn(1,3)\", status)\n+    vvd(astrom.bpn[1][2], 0, 0, \"apcs\", \"bpn(2,3)\", status)\n+    vvd(astrom.bpn[2][2], 1, 0, \"apcs\", \"bpn(3,3)\", status)\n+\n+\n+def test_apcs13():\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    date1 = 2456165.5\n+    date2 = 0.401182685\n+    pv['p'][0] = -6241497.16\n+    pv['p'][1] = 401346.896\n+    pv['p'][2] = -1251136.04\n+    pv['v'][0] = -29.264597\n+    pv['v'][1] = -455.021831\n+    pv['v'][2] = 0.0266151194\n+    astrom = erfa_ufunc.apcs13(date1, date2, pv)\n+    astrom = astrom.view(np.recarray)\n+    vvd(astrom.pmt, 12.65133794027378508, 1e-11, \"apcs13\", \"pmt\", status)\n+    vvd(astrom.eb[0], 0.9012691529025250644, 1e-12, \"apcs13\", \"eb(1)\", status)\n+    vvd(astrom.eb[1], -0.4173999812023194317, 1e-12, \"apcs13\", \"eb(2)\", status)\n+    vvd(astrom.eb[2], -0.1809906511146429670, 1e-12, \"apcs13\", \"eb(3)\", status)\n+    vvd(astrom.eh[0], 0.8939939101760130792, 1e-12, \"apcs13\", \"eh(1)\", status)\n+    vvd(astrom.eh[1], -0.4111053891734021478, 1e-12, \"apcs13\", \"eh(2)\", status)\n+    vvd(astrom.eh[2], -0.1782336880636997374, 1e-12, \"apcs13\", \"eh(3)\", status)\n+    vvd(astrom.em, 1.010428384373491095, 1e-12, \"apcs13\", \"em\", status)\n+    vvd(astrom.v[0], 0.4279877294121697570e-4, 1e-16, \"apcs13\", \"v(1)\", status)\n+    vvd(astrom.v[1], 0.7963255087052120678e-4, 1e-16, \"apcs13\", \"v(2)\", status)\n+    vvd(astrom.v[2], 0.3517564013384691531e-4, 1e-16, \"apcs13\", \"v(3)\", status)\n+    vvd(astrom.bm1, 0.9999999952947980978, 1e-12, \"apcs13\", \"bm1\", status)\n+    vvd(astrom.bpn[0][0], 1, 0, \"apcs13\", \"bpn(1,1)\", status)\n+    vvd(astrom.bpn[1][0], 0, 0, \"apcs13\", \"bpn(2,1)\", status)\n+    vvd(astrom.bpn[2][0], 0, 0, \"apcs13\", \"bpn(3,1)\", status)\n+    vvd(astrom.bpn[0][1], 0, 0, \"apcs13\", \"bpn(1,2)\", status)\n+    vvd(astrom.bpn[1][1], 1, 0, \"apcs13\", \"bpn(2,2)\", status)\n+    vvd(astrom.bpn[2][1], 0, 0, \"apcs13\", \"bpn(3,2)\", status)\n+    vvd(astrom.bpn[0][2], 0, 0, \"apcs13\", \"bpn(1,3)\", status)\n+    vvd(astrom.bpn[1][2], 0, 0, \"apcs13\", \"bpn(2,3)\", status)\n+    vvd(astrom.bpn[2][2], 1, 0, \"apcs13\", \"bpn(3,3)\", status)\n+\n+\n+def test_aper():\n+    astrom = np.zeros((), erfa_ufunc.dt_eraASTROM).view(np.recarray)\n+    astrom.along = 1.234\n+    theta = 5.678\n+    astrom = erfa_ufunc.aper(theta, astrom)\n+    astrom = astrom.view(np.recarray)\n+    vvd(astrom.eral, 6.912000000000000000, 1e-12, \"aper\", \"pmt\", status)\n+\n+\n+def test_aper13():\n+    astrom = np.zeros((), erfa_ufunc.dt_eraASTROM).view(np.recarray)\n+    astrom.along = 1.234\n+    ut11 = 2456165.5\n+    ut12 = 0.401182685\n+    astrom = erfa_ufunc.aper13(ut11, ut12, astrom)\n+    astrom = astrom.view(np.recarray)\n+    vvd(astrom.eral, 3.316236661789694933, 1e-12, \"aper13\", \"pmt\", status)\n+\n+\n+def test_apio():\n+    sp = -3.01974337e-11\n+    theta = 3.14540971\n+    elong = -0.527800806\n+    phi = -1.2345856\n+    hm = 2738.0\n+    xp = 2.47230737e-7\n+    yp = 1.82640464e-6\n+    refa = 0.000201418779\n+    refb = -2.36140831e-7\n+    astrom = erfa_ufunc.apio(sp, theta, elong, phi, hm, xp, yp, refa, refb)\n+    astrom = astrom.view(np.recarray)\n+    vvd(astrom.along, -0.5278008060295995734, 1e-12, \"apio\", \"along\", status)\n+    vvd(astrom.xpl, 0.1133427418130752958e-5, 1e-17, \"apio\", \"xpl\", status)\n+    vvd(astrom.ypl, 0.1453347595780646207e-5, 1e-17, \"apio\", \"ypl\", status)\n+    vvd(astrom.sphi, -0.9440115679003211329, 1e-12, \"apio\", \"sphi\", status)\n+    vvd(astrom.cphi, 0.3299123514971474711, 1e-12, \"apio\", \"cphi\", status)\n+    vvd(astrom.diurab, 0.5135843661699913529e-6, 1e-12, \"apio\", \"diurab\", status)\n+    vvd(astrom.eral, 2.617608903970400427, 1e-12, \"apio\", \"eral\", status)\n+    vvd(astrom.refa, 0.2014187790000000000e-3, 1e-15, \"apio\", \"refa\", status)\n+    vvd(astrom.refb, -0.2361408310000000000e-6, 1e-18, \"apio\", \"refb\", status)\n+\n+\n+def test_apio13():\n+    utc1 = 2456384.5\n+    utc2 = 0.969254051\n+    dut1 = 0.1550675\n+    elong = -0.527800806\n+    phi = -1.2345856\n+    hm = 2738.0\n+    xp = 2.47230737e-7\n+    yp = 1.82640464e-6\n+    phpa = 731.0\n+    tc = 12.8\n+    rh = 0.59\n+    wl = 0.55\n+    astrom, j = erfa_ufunc.apio13(utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    astrom = astrom.view(np.recarray)\n+    vvd(astrom.along, -0.5278008060295995733, 1e-12, \"apio13\", \"along\", status)\n+    vvd(astrom.xpl, 0.1133427418130752958e-5, 1e-17, \"apio13\", \"xpl\", status)\n+    vvd(astrom.ypl, 0.1453347595780646207e-5, 1e-17, \"apio13\", \"ypl\", status)\n+    vvd(astrom.sphi, -0.9440115679003211329, 1e-12, \"apio13\", \"sphi\", status)\n+    vvd(astrom.cphi, 0.3299123514971474711, 1e-12, \"apio13\", \"cphi\", status)\n+    vvd(astrom.diurab, 0.5135843661699913529e-6, 1e-12, \"apio13\", \"diurab\", status)\n+    vvd(astrom.eral, 2.617608909189664000, 1e-12, \"apio13\", \"eral\", status)\n+    vvd(astrom.refa, 0.2014187785940396921e-3, 1e-15, \"apio13\", \"refa\", status)\n+    vvd(astrom.refb, -0.2361408314943696227e-6, 1e-18, \"apio13\", \"refb\", status)\n+    viv(j, 0, \"apio13\", \"j\", status)\n+\n+\n+def test_atcc13():\n+    rc = 2.71\n+    dc = 0.174\n+    pr = 1e-5\n+    pd = 5e-6\n+    px = 0.1\n+    rv = 55.0\n+    date1 = 2456165.5\n+    date2 = 0.401182685\n+    ra, da = erfa_ufunc.atcc13(rc, dc, pr, pd, px, rv, date1, date2)\n+    vvd(ra,  2.710126504531372384, 1e-12, \"atcc13\", \"ra\", status)\n+    vvd(da, 0.1740632537628350152, 1e-12, \"atcc13\", \"da\", status)\n+\n+\n+def test_atccq():\n+    date1 = 2456165.5\n+    date2 = 0.401182685\n+    astrom, eo = erfa_ufunc.apci13(date1, date2)\n+    rc = 2.71\n+    dc = 0.174\n+    pr = 1e-5\n+    pd = 5e-6\n+    px = 0.1\n+    rv = 55.0\n+    ra, da = erfa_ufunc.atccq(rc, dc, pr, pd, px, rv, astrom)\n+    vvd(ra, 2.710126504531372384, 1e-12, \"atccq\", \"ra\", status)\n+    vvd(da, 0.1740632537628350152, 1e-12, \"atccq\", \"da\", status)\n+\n+\n+def test_atci13():\n+    rc = 2.71\n+    dc = 0.174\n+    pr = 1e-5\n+    pd = 5e-6\n+    px = 0.1\n+    rv = 55.0\n+    date1 = 2456165.5\n+    date2 = 0.401182685\n+    ri, di, eo = erfa_ufunc.atci13(rc, dc, pr, pd, px, rv, date1, date2)\n+    vvd(ri, 2.710121572968696744, 1e-12, \"atci13\", \"ri\", status)\n+    vvd(di, 0.1729371367219539137, 1e-12, \"atci13\", \"di\", status)\n+    vvd(eo, -0.002900618712657375647, 1e-14, \"atci13\", \"eo\", status)\n+\n+\n+def test_atciq():\n+    date1 = 2456165.5\n+    date2 = 0.401182685\n+    astrom, eo = erfa_ufunc.apci13(date1, date2)\n+    rc = 2.71\n+    dc = 0.174\n+    pr = 1e-5\n+    pd = 5e-6\n+    px = 0.1\n+    rv = 55.0\n+    ri, di = erfa_ufunc.atciq(rc, dc, pr, pd, px, rv, astrom)\n+    vvd(ri, 2.710121572968696744, 1e-12, \"atciq\", \"ri\", status)\n+    vvd(di, 0.1729371367219539137, 1e-12, \"atciq\", \"di\", status)\n+\n+\n+def test_atciqn():\n+    b = np.empty(3, erfa_ufunc.dt_eraLDBODY).view(np.recarray)\n+    date1 = 2456165.5\n+    date2 = 0.401182685\n+    astrom, eo = erfa_ufunc.apci13(date1, date2)\n+    rc = 2.71\n+    dc = 0.174\n+    pr = 1e-5\n+    pd = 5e-6\n+    px = 0.1\n+    rv = 55.0\n+    b[0].bm = 0.00028574\n+    b[0].dl = 3e-10\n+    b[0].pv['p'][0] = -7.81014427\n+    b[0].pv['p'][1] = -5.60956681\n+    b[0].pv['p'][2] = -1.98079819\n+    b[0].pv['v'][0] = 0.0030723249\n+    b[0].pv['v'][1] = -0.00406995477\n+    b[0].pv['v'][2] = -0.00181335842\n+    b[1].bm = 0.00095435\n+    b[1].dl = 3e-9\n+    b[1].pv['p'][0] = 0.738098796\n+    b[1].pv['p'][1] = 4.63658692\n+    b[1].pv['p'][2] = 1.9693136\n+    b[1].pv['v'][0] = -0.00755816922\n+    b[1].pv['v'][1] = 0.00126913722\n+    b[1].pv['v'][2] = 0.000727999001\n+    b[2].bm = 1.0\n+    b[2].dl = 6e-6\n+    b[2].pv['p'][0] = -0.000712174377\n+    b[2].pv['p'][1] = -0.00230478303\n+    b[2].pv['p'][2] = -0.00105865966\n+    b[2].pv['v'][0] = 6.29235213e-6\n+    b[2].pv['v'][1] = -3.30888387e-7\n+    b[2].pv['v'][2] = -2.96486623e-7\n+    ri, di = erfa_ufunc.atciqn (rc, dc, pr, pd, px, rv, astrom, b)\n+    vvd(ri, 2.710122008104983335, 1e-12, \"atciqn\", \"ri\", status)\n+    vvd(di, 0.1729371916492767821, 1e-12, \"atciqn\", \"di\", status)\n+\n+\n+def test_atciqz():\n+    date1 = 2456165.5\n+    date2 = 0.401182685\n+    astrom, eo = erfa_ufunc.apci13(date1, date2)\n+    rc = 2.71\n+    dc = 0.174\n+    ri, di = erfa_ufunc.atciqz(rc, dc, astrom)\n+    vvd(ri, 2.709994899247256984, 1e-12, \"atciqz\", \"ri\", status)\n+    vvd(di, 0.1728740720984931891, 1e-12, \"atciqz\", \"di\", status)\n+\n+\n+def test_atco13():\n+    rc = 2.71\n+    dc = 0.174\n+    pr = 1e-5\n+    pd = 5e-6\n+    px = 0.1\n+    rv = 55.0\n+    utc1 = 2456384.5\n+    utc2 = 0.969254051\n+    dut1 = 0.1550675\n+    elong = -0.527800806\n+    phi = -1.2345856\n+    hm = 2738.0\n+    xp = 2.47230737e-7\n+    yp = 1.82640464e-6\n+    phpa = 731.0\n+    tc = 12.8\n+    rh = 0.59\n+    wl = 0.55\n+    aob, zob, hob, dob, rob, eo, j = erfa_ufunc.atco13(rc, dc, pr, pd, px, rv, utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    vvd(aob, 0.9251774485485515207e-1, 1e-12, \"atco13\", \"aob\", status)\n+    vvd(zob, 1.407661405256499357, 1e-12, \"atco13\", \"zob\", status)\n+    vvd(hob, -0.9265154431529724692e-1, 1e-12, \"atco13\", \"hob\", status)\n+    vvd(dob, 0.1716626560072526200, 1e-12, \"atco13\", \"dob\", status)\n+    vvd(rob, 2.710260453504961012, 1e-12, \"atco13\", \"rob\", status)\n+    vvd(eo, -0.003020548354802412839, 1e-14, \"atco13\", \"eo\", status)\n+    viv(j, 0, \"atco13\", \"j\", status)\n+\n+\n+def test_atic13():\n+    ri = 2.710121572969038991\n+    di = 0.1729371367218230438\n+    date1 = 2456165.5\n+    date2 = 0.401182685\n+    rc, dc, eo = erfa_ufunc.atic13(ri, di, date1, date2)\n+    vvd(rc, 2.710126504531716819, 1e-12, \"atic13\", \"rc\", status)\n+    vvd(dc, 0.1740632537627034482, 1e-12, \"atic13\", \"dc\", status)\n+    vvd(eo, -0.002900618712657375647, 1e-14, \"atic13\", \"eo\", status)\n+\n+\n+def test_aticq():\n+    date1 = 2456165.5\n+    date2 = 0.401182685\n+    astrom, eo = erfa_ufunc.apci13(date1, date2)\n+    ri = 2.710121572969038991\n+    di = 0.1729371367218230438\n+    rc, dc = erfa_ufunc.aticq(ri, di, astrom)\n+    vvd(rc, 2.710126504531716819, 1e-12, \"aticq\", \"rc\", status)\n+    vvd(dc, 0.1740632537627034482, 1e-12, \"aticq\", \"dc\", status)\n+\n+\n+def test_aticqn():\n+    b = np.empty(3, erfa_ufunc.dt_eraLDBODY).view(np.recarray)\n+    date1 = 2456165.5\n+    date2 = 0.401182685\n+    astrom, eo = erfa_ufunc.apci13(date1, date2)\n+    ri = 2.709994899247599271\n+    di = 0.1728740720983623469\n+    b[0].bm = 0.00028574\n+    b[0].dl = 3e-10\n+    b[0].pv['p'][0] = -7.81014427\n+    b[0].pv['p'][1] = -5.60956681\n+    b[0].pv['p'][2] = -1.98079819\n+    b[0].pv['v'][0] = 0.0030723249\n+    b[0].pv['v'][1] = -0.00406995477\n+    b[0].pv['v'][2] = -0.00181335842\n+    b[1].bm = 0.00095435\n+    b[1].dl = 3e-9\n+    b[1].pv['p'][0] = 0.738098796\n+    b[1].pv['p'][1] = 4.63658692\n+    b[1].pv['p'][2] = 1.9693136\n+    b[1].pv['v'][0] = -0.00755816922\n+    b[1].pv['v'][1] = 0.00126913722\n+    b[1].pv['v'][2] = 0.000727999001\n+    b[2].bm = 1.0\n+    b[2].dl = 6e-6\n+    b[2].pv['p'][0] = -0.000712174377\n+    b[2].pv['p'][1] = -0.00230478303\n+    b[2].pv['p'][2] = -0.00105865966\n+    b[2].pv['v'][0] = 6.29235213e-6\n+    b[2].pv['v'][1] = -3.30888387e-7\n+    b[2].pv['v'][2] = -2.96486623e-7\n+    rc, dc = erfa_ufunc.aticqn(ri, di, astrom, b)\n+    vvd(rc, 2.709999575033027333, 1e-12, \"eraAtciqn\", \"rc\", status)\n+    vvd(dc, 0.1739999656316469990, 1e-12, \"eraAtciqn\", \"dc\", status)\n+\n+\n+def test_atio13():\n+    ri = 2.710121572969038991\n+    di = 0.1729371367218230438\n+    utc1 = 2456384.5\n+    utc2 = 0.969254051\n+    dut1 = 0.1550675\n+    elong = -0.527800806\n+    phi = -1.2345856\n+    hm = 2738.0\n+    xp = 2.47230737e-7\n+    yp = 1.82640464e-6\n+    phpa = 731.0\n+    tc = 12.8\n+    rh = 0.59\n+    wl = 0.55\n+    aob, zob, hob, dob, rob, j = erfa_ufunc.atio13(ri, di, utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    vvd(aob, 0.9233952224895122499e-1, 1e-12, \"atio13\", \"aob\", status)\n+    vvd(zob, 1.407758704513549991, 1e-12, \"atio13\", \"zob\", status)\n+    vvd(hob, -0.9247619879881698140e-1, 1e-12, \"atio13\", \"hob\", status)\n+    vvd(dob, 0.1717653435756234676, 1e-12, \"atio13\", \"dob\", status)\n+    vvd(rob, 2.710085107988480746, 1e-12, \"atio13\", \"rob\", status)\n+    viv(j, 0, \"atio13\", \"j\", status)\n+\n+\n+def test_atioq():\n+    utc1 = 2456384.5\n+    utc2 = 0.969254051\n+    dut1 = 0.1550675\n+    elong = -0.527800806\n+    phi = -1.2345856\n+    hm = 2738.0\n+    xp = 2.47230737e-7\n+    yp = 1.82640464e-6\n+    phpa = 731.0\n+    tc = 12.8\n+    rh = 0.59\n+    wl = 0.55\n+    astrom, j = erfa_ufunc.apio13(utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    ri = 2.710121572969038991\n+    di = 0.1729371367218230438\n+    aob, zob, hob, dob, rob = erfa_ufunc.atioq(ri, di, astrom)\n+    vvd(aob, 0.9233952224895122499e-1, 1e-12, \"atioq\", \"aob\", status)\n+    vvd(zob, 1.407758704513549991, 1e-12, \"atioq\", \"zob\", status)\n+    vvd(hob, -0.9247619879881698140e-1, 1e-12, \"atioq\", \"hob\", status)\n+    vvd(dob, 0.1717653435756234676, 1e-12, \"atioq\", \"dob\", status)\n+    vvd(rob, 2.710085107988480746, 1e-12, \"atioq\", \"rob\", status)\n+\n+\n+def test_atoc13():\n+    utc1 = 2456384.5\n+    utc2 = 0.969254051\n+    dut1 = 0.1550675\n+    elong = -0.527800806\n+    phi = -1.2345856\n+    hm = 2738.0\n+    xp = 2.47230737e-7\n+    yp = 1.82640464e-6\n+    phpa = 731.0\n+    tc = 12.8\n+    rh = 0.59\n+    wl = 0.55\n+    ob1 = 2.710085107986886201\n+    ob2 = 0.1717653435758265198\n+    rc, dc, j = erfa_ufunc.atoc13 (\"R\", ob1, ob2, utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    vvd(rc, 2.709956744659136129, 1e-12, \"atoc13\", \"R/rc\", status)\n+    vvd(dc, 0.1741696500898471362, 1e-12, \"atoc13\", \"R/dc\", status)\n+    viv(j, 0, \"atoc13\", \"R/j\", status)\n+    ob1 = -0.09247619879782006106\n+    ob2 = 0.1717653435758265198\n+    rc, dc, j = erfa_ufunc.atoc13 (\"H\", ob1, ob2, utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    vvd(rc, 2.709956744659734086, 1e-12, \"atoc13\", \"H/rc\", status)\n+    vvd(dc, 0.1741696500898471362, 1e-12, \"atoc13\", \"H/dc\", status)\n+    viv(j, 0, \"atoc13\", \"H/j\", status)\n+    ob1 = 0.09233952224794989993\n+    ob2 = 1.407758704513722461\n+    rc, dc, j = erfa_ufunc.atoc13 (\"A\", ob1, ob2, utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    vvd(rc, 2.709956744659734086, 1e-12, \"atoc13\", \"A/rc\", status)\n+    vvd(dc, 0.1741696500898471366, 1e-12, \"atoc13\", \"A/dc\", status)\n+    viv(j, 0, \"atoc13\", \"A/j\", status)\n+\n+\n+def test_atoi13():\n+    utc1 = 2456384.5\n+    utc2 = 0.969254051\n+    dut1 = 0.1550675\n+    elong = -0.527800806\n+    phi = -1.2345856\n+    hm = 2738.0\n+    xp = 2.47230737e-7\n+    yp = 1.82640464e-6\n+    phpa = 731.0\n+    tc = 12.8\n+    rh = 0.59\n+    wl = 0.55\n+    ob1 = 2.710085107986886201\n+    ob2 = 0.1717653435758265198\n+    ri, di, j = erfa_ufunc.atoi13 (\"R\", ob1, ob2, utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    vvd(ri, 2.710121574447540810, 1e-12, \"atoi13\", \"R/ri\", status)\n+    vvd(di, 0.1729371839116608778, 1e-12, \"atoi13\", \"R/di\", status)\n+    viv(j, 0, \"atoi13\", \"R/J\", status)\n+    ob1 = -0.09247619879782006106\n+    ob2 = 0.1717653435758265198\n+    ri, di, j = erfa_ufunc.atoi13 (\"H\", ob1, ob2, utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    vvd(ri, 2.710121574448138676, 1e-12, \"atoi13\", \"H/ri\", status)\n+    vvd(di, 0.1729371839116608778, 1e-12, \"atoi13\", \"H/di\", status)\n+    viv(j, 0, \"atoi13\", \"H/J\", status)\n+    ob1 = 0.09233952224794989993\n+    ob2 = 1.407758704513722461\n+    ri, di, j = erfa_ufunc.atoi13 (\"A\", ob1, ob2, utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    vvd(ri, 2.710121574448138676, 1e-12, \"atoi13\", \"A/ri\", status)\n+    vvd(di, 0.1729371839116608781, 1e-12, \"atoi13\", \"A/di\", status)\n+    viv(j, 0, \"atoi13\", \"A/J\", status)\n+\n+\n+def test_atoiq():\n+    utc1 = 2456384.5\n+    utc2 = 0.969254051\n+    dut1 = 0.1550675\n+    elong = -0.527800806\n+    phi = -1.2345856\n+    hm = 2738.0\n+    xp = 2.47230737e-7\n+    yp = 1.82640464e-6\n+    phpa = 731.0\n+    tc = 12.8\n+    rh = 0.59\n+    wl = 0.55\n+    astrom, j = erfa_ufunc.apio13(utc1, utc2, dut1, elong, phi, hm, xp, yp, phpa, tc, rh, wl)\n+    ob1 = 2.710085107986886201\n+    ob2 = 0.1717653435758265198\n+    ri, di = erfa_ufunc.atoiq(\"R\", ob1, ob2, astrom)\n+    vvd(ri, 2.710121574447540810, 1e-12, \"atoiq\", \"R/ri\", status)\n+    vvd(di, 0.17293718391166087785, 1e-12, \"atoiq\", \"R/di\", status)\n+    ob1 = -0.09247619879782006106\n+    ob2 = 0.1717653435758265198\n+    ri, di = erfa_ufunc.atoiq(\"H\", ob1, ob2, astrom)\n+    vvd(ri, 2.710121574448138676, 1e-12, \"atoiq\", \"H/ri\", status)\n+    vvd(di, 0.1729371839116608778, 1e-12, \"atoiq\", \"H/di\", status)\n+    ob1 = 0.09233952224794989993\n+    ob2 = 1.407758704513722461\n+    ri, di = erfa_ufunc.atoiq(\"A\", ob1, ob2, astrom)\n+    vvd(ri, 2.710121574448138676, 1e-12, \"atoiq\", \"A/ri\", status)\n+    vvd(di, 0.1729371839116608781, 1e-12, \"atoiq\", \"A/di\", status)\n+\n+\n+@pytest.mark.xfail(np.__version__ < '1.24', reason='numpy < 1.24 do not support no-input ufuncs')\n+def test_bi00():\n+    dpsibi, depsbi, dra = erfa_ufunc.bi00()\n+    vvd(dpsibi, -0.2025309152835086613e-6, 1e-12, \"bi00\", \"dpsibi\", status)\n+    vvd(depsbi, -0.3306041454222147847e-7, 1e-12, \"bi00\", \"depsbi\", status)\n+    vvd(dra, -0.7078279744199225506e-7, 1e-12, \"bi00\", \"dra\", status)\n+\n+\n+def test_bp00():\n+    rb = np.empty((3, 3), float)\n+    rp = np.empty((3, 3), float)\n+    rbp = np.empty((3, 3), float)\n+    rb, rp, rbp = erfa_ufunc.bp00(2400000.5, 50123.9999)\n+    vvd(rb[0][0], 0.9999999999999942498, 1e-12, \"bp00\", \"rb11\", status)\n+    vvd(rb[0][1], -0.7078279744199196626e-7, 1e-16, \"bp00\", \"rb12\", status)\n+    vvd(rb[0][2], 0.8056217146976134152e-7, 1e-16, \"bp00\", \"rb13\", status)\n+    vvd(rb[1][0], 0.7078279477857337206e-7, 1e-16, \"bp00\", \"rb21\", status)\n+    vvd(rb[1][1], 0.9999999999999969484, 1e-12, \"bp00\", \"rb22\", status)\n+    vvd(rb[1][2], 0.3306041454222136517e-7, 1e-16, \"bp00\", \"rb23\", status)\n+    vvd(rb[2][0], -0.8056217380986972157e-7, 1e-16, \"bp00\", \"rb31\", status)\n+    vvd(rb[2][1], -0.3306040883980552500e-7, 1e-16, \"bp00\", \"rb32\", status)\n+    vvd(rb[2][2], 0.9999999999999962084, 1e-12, \"bp00\", \"rb33\", status)\n+    vvd(rp[0][0], 0.9999995504864048241, 1e-12, \"bp00\", \"rp11\", status)\n+    vvd(rp[0][1], 0.8696113836207084411e-3, 1e-14, \"bp00\", \"rp12\", status)\n+    vvd(rp[0][2], 0.3778928813389333402e-3, 1e-14, \"bp00\", \"rp13\", status)\n+    vvd(rp[1][0], -0.8696113818227265968e-3, 1e-14, \"bp00\", \"rp21\", status)\n+    vvd(rp[1][1], 0.9999996218879365258, 1e-12, \"bp00\", \"rp22\", status)\n+    vvd(rp[1][2], -0.1690679263009242066e-6, 1e-14, \"bp00\", \"rp23\", status)\n+    vvd(rp[2][0], -0.3778928854764695214e-3, 1e-14, \"bp00\", \"rp31\", status)\n+    vvd(rp[2][1], -0.1595521004195286491e-6, 1e-14, \"bp00\", \"rp32\", status)\n+    vvd(rp[2][2], 0.9999999285984682756, 1e-12, \"bp00\", \"rp33\", status)\n+    vvd(rbp[0][0], 0.9999995505175087260, 1e-12, \"bp00\", \"rbp11\", status)\n+    vvd(rbp[0][1], 0.8695405883617884705e-3, 1e-14, \"bp00\", \"rbp12\", status)\n+    vvd(rbp[0][2], 0.3779734722239007105e-3, 1e-14, \"bp00\", \"rbp13\", status)\n+    vvd(rbp[1][0], -0.8695405990410863719e-3, 1e-14, \"bp00\", \"rbp21\", status)\n+    vvd(rbp[1][1], 0.9999996219494925900, 1e-12, \"bp00\", \"rbp22\", status)\n+    vvd(rbp[1][2], -0.1360775820404982209e-6, 1e-14, \"bp00\", \"rbp23\", status)\n+    vvd(rbp[2][0], -0.3779734476558184991e-3, 1e-14, \"bp00\", \"rbp31\", status)\n+    vvd(rbp[2][1], -0.1925857585832024058e-6, 1e-14, \"bp00\", \"rbp32\", status)\n+    vvd(rbp[2][2], 0.9999999285680153377, 1e-12, \"bp00\", \"rbp33\", status)\n+\n+\n+def test_bp06():\n+    rb = np.empty((3, 3), float)\n+    rp = np.empty((3, 3), float)\n+    rbp = np.empty((3, 3), float)\n+    rb, rp, rbp = erfa_ufunc.bp06(2400000.5, 50123.9999)\n+    vvd(rb[0][0], 0.9999999999999942497, 1e-12, \"bp06\", \"rb11\", status)\n+    vvd(rb[0][1], -0.7078368960971557145e-7, 1e-14, \"bp06\", \"rb12\", status)\n+    vvd(rb[0][2], 0.8056213977613185606e-7, 1e-14, \"bp06\", \"rb13\", status)\n+    vvd(rb[1][0], 0.7078368694637674333e-7, 1e-14, \"bp06\", \"rb21\", status)\n+    vvd(rb[1][1], 0.9999999999999969484, 1e-12, \"bp06\", \"rb22\", status)\n+    vvd(rb[1][2], 0.3305943742989134124e-7, 1e-14, \"bp06\", \"rb23\", status)\n+    vvd(rb[2][0], -0.8056214211620056792e-7, 1e-14, \"bp06\", \"rb31\", status)\n+    vvd(rb[2][1], -0.3305943172740586950e-7, 1e-14, \"bp06\", \"rb32\", status)\n+    vvd(rb[2][2], 0.9999999999999962084, 1e-12, \"bp06\", \"rb33\", status)\n+    vvd(rp[0][0], 0.9999995504864960278, 1e-12, \"bp06\", \"rp11\", status)\n+    vvd(rp[0][1], 0.8696112578855404832e-3, 1e-14, \"bp06\", \"rp12\", status)\n+    vvd(rp[0][2], 0.3778929293341390127e-3, 1e-14, \"bp06\", \"rp13\", status)\n+    vvd(rp[1][0], -0.8696112560510186244e-3, 1e-14, \"bp06\", \"rp21\", status)\n+    vvd(rp[1][1], 0.9999996218880458820, 1e-12, \"bp06\", \"rp22\", status)\n+    vvd(rp[1][2], -0.1691646168941896285e-6, 1e-14, \"bp06\", \"rp23\", status)\n+    vvd(rp[2][0], -0.3778929335557603418e-3, 1e-14, \"bp06\", \"rp31\", status)\n+    vvd(rp[2][1], -0.1594554040786495076e-6, 1e-14, \"bp06\", \"rp32\", status)\n+    vvd(rp[2][2], 0.9999999285984501222, 1e-12, \"bp06\", \"rp33\", status)\n+    vvd(rbp[0][0], 0.9999995505176007047, 1e-12, \"bp06\", \"rbp11\", status)\n+    vvd(rbp[0][1], 0.8695404617348208406e-3, 1e-14, \"bp06\", \"rbp12\", status)\n+    vvd(rbp[0][2], 0.3779735201865589104e-3, 1e-14, \"bp06\", \"rbp13\", status)\n+    vvd(rbp[1][0], -0.8695404723772031414e-3, 1e-14, \"bp06\", \"rbp21\", status)\n+    vvd(rbp[1][1], 0.9999996219496027161, 1e-12, \"bp06\", \"rbp22\", status)\n+    vvd(rbp[1][2], -0.1361752497080270143e-6, 1e-14, \"bp06\", \"rbp23\", status)\n+    vvd(rbp[2][0], -0.3779734957034089490e-3, 1e-14, \"bp06\", \"rbp31\", status)\n+    vvd(rbp[2][1], -0.1924880847894457113e-6, 1e-14, \"bp06\", \"rbp32\", status)\n+    vvd(rbp[2][2], 0.9999999285679971958, 1e-12, \"bp06\", \"rbp33\", status)\n+\n+\n+def test_bpn2xy():\n+    rbpn = np.empty((3, 3), float)\n+    rbpn[0][0] = 9.999962358680738e-1\n+    rbpn[0][1] = -2.516417057665452e-3\n+    rbpn[0][2] = -1.093569785342370e-3\n+    rbpn[1][0] = 2.516462370370876e-3\n+    rbpn[1][1] = 9.999968329010883e-1\n+    rbpn[1][2] = 4.006159587358310e-5\n+    rbpn[2][0] = 1.093465510215479e-3\n+    rbpn[2][1] = -4.281337229063151e-5\n+    rbpn[2][2] = 9.999994012499173e-1\n+    x, y = erfa_ufunc.bpn2xy(rbpn)\n+    vvd(x,  1.093465510215479e-3, 1e-12, \"bpn2xy\", \"x\", status)\n+    vvd(y, -4.281337229063151e-5, 1e-12, \"bpn2xy\", \"y\", status)\n+\n+\n+def test_c2i00a():\n+    rc2i = np.empty((3, 3), float)\n+    rc2i = erfa_ufunc.c2i00a(2400000.5, 53736.0)\n+    vvd(rc2i[0][0], 0.9999998323037165557, 1e-12, \"c2i00a\", \"11\", status)\n+    vvd(rc2i[0][1], 0.5581526348992140183e-9, 1e-12, \"c2i00a\", \"12\", status)\n+    vvd(rc2i[0][2], -0.5791308477073443415e-3, 1e-12, \"c2i00a\", \"13\", status)\n+    vvd(rc2i[1][0], -0.2384266227870752452e-7, 1e-12, \"c2i00a\", \"21\", status)\n+    vvd(rc2i[1][1], 0.9999999991917405258, 1e-12, \"c2i00a\", \"22\", status)\n+    vvd(rc2i[1][2], -0.4020594955028209745e-4, 1e-12, \"c2i00a\", \"23\", status)\n+    vvd(rc2i[2][0], 0.5791308472168152904e-3, 1e-12, \"c2i00a\", \"31\", status)\n+    vvd(rc2i[2][1], 0.4020595661591500259e-4, 1e-12, \"c2i00a\", \"32\", status)\n+    vvd(rc2i[2][2], 0.9999998314954572304, 1e-12, \"c2i00a\", \"33\", status)\n+\n+\n+def test_c2i00b():\n+    rc2i = np.empty((3, 3), float)\n+    rc2i = erfa_ufunc.c2i00b(2400000.5, 53736.0)\n+    vvd(rc2i[0][0], 0.9999998323040954356, 1e-12, \"c2i00b\", \"11\", status)\n+    vvd(rc2i[0][1], 0.5581526349131823372e-9, 1e-12, \"c2i00b\", \"12\", status)\n+    vvd(rc2i[0][2], -0.5791301934855394005e-3, 1e-12, \"c2i00b\", \"13\", status)\n+    vvd(rc2i[1][0], -0.2384239285499175543e-7, 1e-12, \"c2i00b\", \"21\", status)\n+    vvd(rc2i[1][1], 0.9999999991917574043, 1e-12, \"c2i00b\", \"22\", status)\n+    vvd(rc2i[1][2], -0.4020552974819030066e-4, 1e-12, \"c2i00b\", \"23\", status)\n+    vvd(rc2i[2][0], 0.5791301929950208873e-3, 1e-12, \"c2i00b\", \"31\", status)\n+    vvd(rc2i[2][1], 0.4020553681373720832e-4, 1e-12, \"c2i00b\", \"32\", status)\n+    vvd(rc2i[2][2], 0.9999998314958529887, 1e-12, \"c2i00b\", \"33\", status)\n+\n+\n+def test_c2i06a():\n+    rc2i = np.empty((3, 3), float)\n+    rc2i = erfa_ufunc.c2i06a(2400000.5, 53736.0)\n+    vvd(rc2i[0][0], 0.9999998323037159379, 1e-12, \"c2i06a\", \"11\", status)\n+    vvd(rc2i[0][1], 0.5581121329587613787e-9, 1e-12, \"c2i06a\", \"12\", status)\n+    vvd(rc2i[0][2], -0.5791308487740529749e-3, 1e-12, \"c2i06a\", \"13\", status)\n+    vvd(rc2i[1][0], -0.2384253169452306581e-7, 1e-12, \"c2i06a\", \"21\", status)\n+    vvd(rc2i[1][1], 0.9999999991917467827, 1e-12, \"c2i06a\", \"22\", status)\n+    vvd(rc2i[1][2], -0.4020579392895682558e-4, 1e-12, \"c2i06a\", \"23\", status)\n+    vvd(rc2i[2][0], 0.5791308482835292617e-3, 1e-12, \"c2i06a\", \"31\", status)\n+    vvd(rc2i[2][1], 0.4020580099454020310e-4, 1e-12, \"c2i06a\", \"32\", status)\n+    vvd(rc2i[2][2], 0.9999998314954628695, 1e-12, \"c2i06a\", \"33\", status)\n+\n+\n+def test_c2ibpn():\n+    rbpn = np.empty((3, 3), float)\n+    rc2i = np.empty((3, 3), float)\n+    rbpn[0][0] = 9.999962358680738e-1\n+    rbpn[0][1] = -2.516417057665452e-3\n+    rbpn[0][2] = -1.093569785342370e-3\n+    rbpn[1][0] = 2.516462370370876e-3\n+    rbpn[1][1] = 9.999968329010883e-1\n+    rbpn[1][2] = 4.006159587358310e-5\n+    rbpn[2][0] = 1.093465510215479e-3\n+    rbpn[2][1] = -4.281337229063151e-5\n+    rbpn[2][2] = 9.999994012499173e-1\n+    rc2i = erfa_ufunc.c2ibpn(2400000.5, 50123.9999, rbpn)\n+    vvd(rc2i[0][0], 0.9999994021664089977, 1e-12, \"c2ibpn\", \"11\", status)\n+    vvd(rc2i[0][1], -0.3869195948017503664e-8, 1e-12, \"c2ibpn\", \"12\", status)\n+    vvd(rc2i[0][2], -0.1093465511383285076e-2, 1e-12, \"c2ibpn\", \"13\", status)\n+    vvd(rc2i[1][0], 0.5068413965715446111e-7, 1e-12, \"c2ibpn\", \"21\", status)\n+    vvd(rc2i[1][1], 0.9999999990835075686, 1e-12, \"c2ibpn\", \"22\", status)\n+    vvd(rc2i[1][2], 0.4281334246452708915e-4, 1e-12, \"c2ibpn\", \"23\", status)\n+    vvd(rc2i[2][0], 0.1093465510215479000e-2, 1e-12, \"c2ibpn\", \"31\", status)\n+    vvd(rc2i[2][1], -0.4281337229063151000e-4, 1e-12, \"c2ibpn\", \"32\", status)\n+    vvd(rc2i[2][2], 0.9999994012499173103, 1e-12, \"c2ibpn\", \"33\", status)\n+\n+\n+def test_c2ixy():\n+    rc2i = np.empty((3, 3), float)\n+    x = 0.5791308486706011000e-3\n+    y = 0.4020579816732961219e-4\n+    rc2i = erfa_ufunc.c2ixy(2400000.5, 53736, x, y)\n+    vvd(rc2i[0][0], 0.9999998323037157138, 1e-12, \"c2ixy\", \"11\", status)\n+    vvd(rc2i[0][1], 0.5581526349032241205e-9, 1e-12, \"c2ixy\", \"12\", status)\n+    vvd(rc2i[0][2], -0.5791308491611263745e-3, 1e-12, \"c2ixy\", \"13\", status)\n+    vvd(rc2i[1][0], -0.2384257057469842953e-7, 1e-12, \"c2ixy\", \"21\", status)\n+    vvd(rc2i[1][1], 0.9999999991917468964, 1e-12, \"c2ixy\", \"22\", status)\n+    vvd(rc2i[1][2], -0.4020579110172324363e-4, 1e-12, \"c2ixy\", \"23\", status)\n+    vvd(rc2i[2][0], 0.5791308486706011000e-3, 1e-12, \"c2ixy\", \"31\", status)\n+    vvd(rc2i[2][1], 0.4020579816732961219e-4, 1e-12, \"c2ixy\", \"32\", status)\n+    vvd(rc2i[2][2], 0.9999998314954627590, 1e-12, \"c2ixy\", \"33\", status)\n+\n+\n+def test_c2ixys():\n+    rc2i = np.empty((3, 3), float)\n+    x = 0.5791308486706011000e-3\n+    y = 0.4020579816732961219e-4\n+    s = -0.1220040848472271978e-7\n+    rc2i = erfa_ufunc.c2ixys(x, y, s)\n+    vvd(rc2i[0][0], 0.9999998323037157138, 1e-12, \"c2ixys\", \"11\", status)\n+    vvd(rc2i[0][1], 0.5581984869168499149e-9, 1e-12, \"c2ixys\", \"12\", status)\n+    vvd(rc2i[0][2], -0.5791308491611282180e-3, 1e-12, \"c2ixys\", \"13\", status)\n+    vvd(rc2i[1][0], -0.2384261642670440317e-7, 1e-12, \"c2ixys\", \"21\", status)\n+    vvd(rc2i[1][1], 0.9999999991917468964, 1e-12, \"c2ixys\", \"22\", status)\n+    vvd(rc2i[1][2], -0.4020579110169668931e-4, 1e-12, \"c2ixys\", \"23\", status)\n+    vvd(rc2i[2][0], 0.5791308486706011000e-3, 1e-12, \"c2ixys\", \"31\", status)\n+    vvd(rc2i[2][1], 0.4020579816732961219e-4, 1e-12, \"c2ixys\", \"32\", status)\n+    vvd(rc2i[2][2], 0.9999998314954627590, 1e-12, \"c2ixys\", \"33\", status)\n+\n+\n+def test_c2s():\n+    p = np.empty((3,), float)\n+    p[0] = 100.0\n+    p[1] = -50.0\n+    p[2] = 25.0\n+    theta, phi = erfa_ufunc.c2s(p)\n+    vvd(theta, -0.4636476090008061162, 1e-14, \"c2s\", \"theta\", status)\n+    vvd(phi, 0.2199879773954594463, 1e-14, \"c2s\", \"phi\", status)\n+\n+\n+def test_c2t00a():\n+    rc2t = np.empty((3, 3), float)\n+    tta = 2400000.5\n+    uta = 2400000.5\n+    ttb = 53736.0\n+    utb = 53736.0\n+    xp = 2.55060238e-7\n+    yp = 1.860359247e-6\n+    rc2t = erfa_ufunc.c2t00a(tta, ttb, uta, utb, xp, yp)\n+    vvd(rc2t[0][0], -0.1810332128307182668, 1e-12, \"c2t00a\", \"11\", status)\n+    vvd(rc2t[0][1], 0.9834769806938457836, 1e-12, \"c2t00a\", \"12\", status)\n+    vvd(rc2t[0][2], 0.6555535638688341725e-4, 1e-12, \"c2t00a\", \"13\", status)\n+    vvd(rc2t[1][0], -0.9834768134135984552, 1e-12, \"c2t00a\", \"21\", status)\n+    vvd(rc2t[1][1], -0.1810332203649520727, 1e-12, \"c2t00a\", \"22\", status)\n+    vvd(rc2t[1][2], 0.5749801116141056317e-3, 1e-12, \"c2t00a\", \"23\", status)\n+    vvd(rc2t[2][0], 0.5773474014081406921e-3, 1e-12, \"c2t00a\", \"31\", status)\n+    vvd(rc2t[2][1], 0.3961832391770163647e-4, 1e-12, \"c2t00a\", \"32\", status)\n+    vvd(rc2t[2][2], 0.9999998325501692289, 1e-12, \"c2t00a\", \"33\", status)\n+\n+\n+def test_c2t00b():\n+    rc2t = np.empty((3, 3), float)\n+    tta = 2400000.5\n+    uta = 2400000.5\n+    ttb = 53736.0\n+    utb = 53736.0\n+    xp = 2.55060238e-7\n+    yp = 1.860359247e-6\n+    rc2t = erfa_ufunc.c2t00b(tta, ttb, uta, utb, xp, yp)\n+    vvd(rc2t[0][0], -0.1810332128439678965, 1e-12, \"c2t00b\", \"11\", status)\n+    vvd(rc2t[0][1], 0.9834769806913872359, 1e-12, \"c2t00b\", \"12\", status)\n+    vvd(rc2t[0][2], 0.6555565082458415611e-4, 1e-12, \"c2t00b\", \"13\", status)\n+    vvd(rc2t[1][0], -0.9834768134115435923, 1e-12, \"c2t00b\", \"21\", status)\n+    vvd(rc2t[1][1], -0.1810332203784001946, 1e-12, \"c2t00b\", \"22\", status)\n+    vvd(rc2t[1][2], 0.5749793922030017230e-3, 1e-12, \"c2t00b\", \"23\", status)\n+    vvd(rc2t[2][0], 0.5773467471863534901e-3, 1e-12, \"c2t00b\", \"31\", status)\n+    vvd(rc2t[2][1], 0.3961790411549945020e-4, 1e-12, \"c2t00b\", \"32\", status)\n+    vvd(rc2t[2][2], 0.9999998325505635738, 1e-12, \"c2t00b\", \"33\", status)\n+\n+\n+def test_c2t06a():\n+    rc2t = np.empty((3, 3), float)\n+    tta = 2400000.5\n+    uta = 2400000.5\n+    ttb = 53736.0\n+    utb = 53736.0\n+    xp = 2.55060238e-7\n+    yp = 1.860359247e-6\n+    rc2t = erfa_ufunc.c2t06a(tta, ttb, uta, utb, xp, yp)\n+    vvd(rc2t[0][0], -0.1810332128305897282, 1e-12, \"c2t06a\", \"11\", status)\n+    vvd(rc2t[0][1], 0.9834769806938592296, 1e-12, \"c2t06a\", \"12\", status)\n+    vvd(rc2t[0][2], 0.6555550962998436505e-4, 1e-12, \"c2t06a\", \"13\", status)\n+    vvd(rc2t[1][0], -0.9834768134136214897, 1e-12, \"c2t06a\", \"21\", status)\n+    vvd(rc2t[1][1], -0.1810332203649130832, 1e-12, \"c2t06a\", \"22\", status)\n+    vvd(rc2t[1][2], 0.5749800844905594110e-3, 1e-12, \"c2t06a\", \"23\", status)\n+    vvd(rc2t[2][0], 0.5773474024748545878e-3, 1e-12, \"c2t06a\", \"31\", status)\n+    vvd(rc2t[2][1], 0.3961816829632690581e-4, 1e-12, \"c2t06a\", \"32\", status)\n+    vvd(rc2t[2][2], 0.9999998325501747785, 1e-12, \"c2t06a\", \"33\", status)\n+\n+\n+def test_c2tcio():\n+    rc2i = np.empty((3, 3), float)\n+    rpom = np.empty((3, 3), float)\n+    rc2t = np.empty((3, 3), float)\n+    rc2i[0][0] = 0.9999998323037164738\n+    rc2i[0][1] = 0.5581526271714303683e-9\n+    rc2i[0][2] = -0.5791308477073443903e-3\n+    rc2i[1][0] = -0.2384266227524722273e-7\n+    rc2i[1][1] = 0.9999999991917404296\n+    rc2i[1][2] = -0.4020594955030704125e-4\n+    rc2i[2][0] = 0.5791308472168153320e-3\n+    rc2i[2][1] = 0.4020595661593994396e-4\n+    rc2i[2][2] = 0.9999998314954572365\n+    era = 1.75283325530307\n+    rpom[0][0] = 0.9999999999999674705\n+    rpom[0][1] = -0.1367174580728847031e-10\n+    rpom[0][2] = 0.2550602379999972723e-6\n+    rpom[1][0] = 0.1414624947957029721e-10\n+    rpom[1][1] = 0.9999999999982694954\n+    rpom[1][2] = -0.1860359246998866338e-5\n+    rpom[2][0] = -0.2550602379741215275e-6\n+    rpom[2][1] = 0.1860359247002413923e-5\n+    rpom[2][2] = 0.9999999999982369658\n+    rc2t = erfa_ufunc.c2tcio(rc2i, era, rpom)\n+    vvd(rc2t[0][0], -0.1810332128307110439, 1e-12, \"c2tcio\", \"11\", status)\n+    vvd(rc2t[0][1], 0.9834769806938470149, 1e-12, \"c2tcio\", \"12\", status)\n+    vvd(rc2t[0][2], 0.6555535638685466874e-4, 1e-12, \"c2tcio\", \"13\", status)\n+    vvd(rc2t[1][0], -0.9834768134135996657, 1e-12, \"c2tcio\", \"21\", status)\n+    vvd(rc2t[1][1], -0.1810332203649448367, 1e-12, \"c2tcio\", \"22\", status)\n+    vvd(rc2t[1][2], 0.5749801116141106528e-3, 1e-12, \"c2tcio\", \"23\", status)\n+    vvd(rc2t[2][0], 0.5773474014081407076e-3, 1e-12, \"c2tcio\", \"31\", status)\n+    vvd(rc2t[2][1], 0.3961832391772658944e-4, 1e-12, \"c2tcio\", \"32\", status)\n+    vvd(rc2t[2][2], 0.9999998325501691969, 1e-12, \"c2tcio\", \"33\", status)\n+\n+\n+def test_c2teqx():\n+    rbpn = np.empty((3, 3), float)\n+    rpom = np.empty((3, 3), float)\n+    rc2t = np.empty((3, 3), float)\n+    rbpn[0][0] = 0.9999989440476103608\n+    rbpn[0][1] = -0.1332881761240011518e-2\n+    rbpn[0][2] = -0.5790767434730085097e-3\n+    rbpn[1][0] = 0.1332858254308954453e-2\n+    rbpn[1][1] = 0.9999991109044505944\n+    rbpn[1][2] = -0.4097782710401555759e-4\n+    rbpn[2][0] = 0.5791308472168153320e-3\n+    rbpn[2][1] = 0.4020595661593994396e-4\n+    rbpn[2][2] = 0.9999998314954572365\n+    gst = 1.754166138040730516\n+    rpom[0][0] = 0.9999999999999674705\n+    rpom[0][1] = -0.1367174580728847031e-10\n+    rpom[0][2] = 0.2550602379999972723e-6\n+    rpom[1][0] = 0.1414624947957029721e-10\n+    rpom[1][1] = 0.9999999999982694954\n+    rpom[1][2] = -0.1860359246998866338e-5\n+    rpom[2][0] = -0.2550602379741215275e-6\n+    rpom[2][1] = 0.1860359247002413923e-5\n+    rpom[2][2] = 0.9999999999982369658\n+    rc2t = erfa_ufunc.c2teqx(rbpn, gst, rpom)\n+    vvd(rc2t[0][0], -0.1810332128528685730, 1e-12, \"c2teqx\", \"11\", status)\n+    vvd(rc2t[0][1], 0.9834769806897685071, 1e-12, \"c2teqx\", \"12\", status)\n+    vvd(rc2t[0][2], 0.6555535639982634449e-4, 1e-12, \"c2teqx\", \"13\", status)\n+    vvd(rc2t[1][0], -0.9834768134095211257, 1e-12, \"c2teqx\", \"21\", status)\n+    vvd(rc2t[1][1], -0.1810332203871023800, 1e-12, \"c2teqx\", \"22\", status)\n+    vvd(rc2t[1][2], 0.5749801116126438962e-3, 1e-12, \"c2teqx\", \"23\", status)\n+    vvd(rc2t[2][0], 0.5773474014081539467e-3, 1e-12, \"c2teqx\", \"31\", status)\n+    vvd(rc2t[2][1], 0.3961832391768640871e-4, 1e-12, \"c2teqx\", \"32\", status)\n+    vvd(rc2t[2][2], 0.9999998325501691969, 1e-12, \"c2teqx\", \"33\", status)\n+\n+\n+def test_c2tpe():\n+    rc2t = np.empty((3, 3), float)\n+    tta = 2400000.5\n+    uta = 2400000.5\n+    ttb = 53736.0\n+    utb = 53736.0\n+    deps = 0.4090789763356509900\n+    dpsi = -0.9630909107115582393e-5\n+    xp = 2.55060238e-7\n+    yp = 1.860359247e-6\n+    rc2t = erfa_ufunc.c2tpe(tta, ttb, uta, utb, dpsi, deps, xp, yp)\n+    vvd(rc2t[0][0], -0.1813677995763029394, 1e-12, \"c2tpe\", \"11\", status)\n+    vvd(rc2t[0][1], 0.9023482206891683275, 1e-12, \"c2tpe\", \"12\", status)\n+    vvd(rc2t[0][2], -0.3909902938641085751, 1e-12, \"c2tpe\", \"13\", status)\n+    vvd(rc2t[1][0], -0.9834147641476804807, 1e-12, \"c2tpe\", \"21\", status)\n+    vvd(rc2t[1][1], -0.1659883635434995121, 1e-12, \"c2tpe\", \"22\", status)\n+    vvd(rc2t[1][2], 0.7309763898042819705e-1, 1e-12, \"c2tpe\", \"23\", status)\n+    vvd(rc2t[2][0], 0.1059685430673215247e-2, 1e-12, \"c2tpe\", \"31\", status)\n+    vvd(rc2t[2][1], 0.3977631855605078674, 1e-12, \"c2tpe\", \"32\", status)\n+    vvd(rc2t[2][2], 0.9174875068792735362, 1e-12, \"c2tpe\", \"33\", status)\n+\n+\n+def test_c2txy():\n+    rc2t = np.empty((3, 3), float)\n+    tta = 2400000.5\n+    uta = 2400000.5\n+    ttb = 53736.0\n+    utb = 53736.0\n+    x = 0.5791308486706011000e-3\n+    y = 0.4020579816732961219e-4\n+    xp = 2.55060238e-7\n+    yp = 1.860359247e-6\n+    rc2t = erfa_ufunc.c2txy(tta, ttb, uta, utb, x, y, xp, yp)\n+    vvd(rc2t[0][0], -0.1810332128306279253, 1e-12, \"c2txy\", \"11\", status)\n+    vvd(rc2t[0][1], 0.9834769806938520084, 1e-12, \"c2txy\", \"12\", status)\n+    vvd(rc2t[0][2], 0.6555551248057665829e-4, 1e-12, \"c2txy\", \"13\", status)\n+    vvd(rc2t[1][0], -0.9834768134136142314, 1e-12, \"c2txy\", \"21\", status)\n+    vvd(rc2t[1][1], -0.1810332203649529312, 1e-12, \"c2txy\", \"22\", status)\n+    vvd(rc2t[1][2], 0.5749800843594139912e-3, 1e-12, \"c2txy\", \"23\", status)\n+    vvd(rc2t[2][0], 0.5773474028619264494e-3, 1e-12, \"c2txy\", \"31\", status)\n+    vvd(rc2t[2][1], 0.3961816546911624260e-4, 1e-12, \"c2txy\", \"32\", status)\n+    vvd(rc2t[2][2], 0.9999998325501746670, 1e-12, \"c2txy\", \"33\", status)\n+\n+\n+def test_cal2jd():\n+    djm0, djm, j = erfa_ufunc.cal2jd(2003, 6, 1)\n+    vvd(djm0, 2400000.5, 0.0, \"cal2jd\", \"djm0\", status)\n+    vvd(djm,    52791.0, 0.0, \"cal2jd\", \"djm\", status)\n+    viv(j, 0, \"cal2jd\", \"j\", status)\n+\n+\n+def test_cp():\n+    p = np.empty((3,), float)\n+    c = np.empty((3,), float)\n+    p[0] = 0.3\n+    p[1] = 1.2\n+    p[2] = -2.5\n+    c = erfa_ufunc.cp(p)\n+    vvd(c[0],  0.3, 0.0, \"cp\", \"1\", status)\n+    vvd(c[1],  1.2, 0.0, \"cp\", \"2\", status)\n+    vvd(c[2], -2.5, 0.0, \"cp\", \"3\", status)\n+\n+\n+def test_cpv():\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    c = np.empty((), erfa_ufunc.dt_pv)\n+    pv['p'][0] = 0.3\n+    pv['p'][1] = 1.2\n+    pv['p'][2] = -2.5\n+    pv['v'][0] = -0.5\n+    pv['v'][1] = 3.1\n+    pv['v'][2] = 0.9\n+    c = erfa_ufunc.cpv(pv)\n+    vvd(c[0][0],  0.3, 0.0, \"cpv\", \"p1\", status)\n+    vvd(c[0][1],  1.2, 0.0, \"cpv\", \"p2\", status)\n+    vvd(c[0][2], -2.5, 0.0, \"cpv\", \"p3\", status)\n+    vvd(c[1][0], -0.5, 0.0, \"cpv\", \"v1\", status)\n+    vvd(c[1][1],  3.1, 0.0, \"cpv\", \"v2\", status)\n+    vvd(c[1][2],  0.9, 0.0, \"cpv\", \"v3\", status)\n+\n+\n+def test_cr():\n+    r = np.empty((3, 3), float)\n+    c = np.empty((3, 3), float)\n+    r[0][0] = 2.0\n+    r[0][1] = 3.0\n+    r[0][2] = 2.0\n+    r[1][0] = 3.0\n+    r[1][1] = 2.0\n+    r[1][2] = 3.0\n+    r[2][0] = 3.0\n+    r[2][1] = 4.0\n+    r[2][2] = 5.0\n+    c = erfa_ufunc.cr(r)\n+    vvd(c[0][0], 2.0, 0.0, \"cr\", \"11\", status)\n+    vvd(c[0][1], 3.0, 0.0, \"cr\", \"12\", status)\n+    vvd(c[0][2], 2.0, 0.0, \"cr\", \"13\", status)\n+    vvd(c[1][0], 3.0, 0.0, \"cr\", \"21\", status)\n+    vvd(c[1][1], 2.0, 0.0, \"cr\", \"22\", status)\n+    vvd(c[1][2], 3.0, 0.0, \"cr\", \"23\", status)\n+    vvd(c[2][0], 3.0, 0.0, \"cr\", \"31\", status)\n+    vvd(c[2][1], 4.0, 0.0, \"cr\", \"32\", status)\n+    vvd(c[2][2], 5.0, 0.0, \"cr\", \"33\", status)\n+\n+\n+def test_d2dtf():\n+    iy, im, id, ihmsf, j = erfa_ufunc.d2dtf(\"UTC\", 5, 2400000.5, 49533.99999)\n+    viv(iy, 1994, \"d2dtf\", \"y\", status)\n+    viv(im, 6, \"d2dtf\", \"mo\", status)\n+    viv(id, 30, \"d2dtf\", \"d\", status)\n+    viv(ihmsf[0], 23, \"d2dtf\", \"h\", status)\n+    viv(ihmsf[1], 59, \"d2dtf\", \"m\", status)\n+    viv(ihmsf[2], 60, \"d2dtf\", \"s\", status)\n+    viv(ihmsf[3], 13599, \"d2dtf\", \"f\", status)\n+    viv(j, 0, \"d2dtf\", \"j\", status)\n+\n+\n+def test_d2tf():\n+    s, ihmsf = erfa_ufunc.d2tf(4, -0.987654321)\n+    viv(s[0], b'-', \"d2tf\", \"s\", status)\n+    viv(ihmsf[0], 23, \"d2tf\", \"0\", status)\n+    viv(ihmsf[1], 42, \"d2tf\", \"1\", status)\n+    viv(ihmsf[2], 13, \"d2tf\", \"2\", status)\n+    viv(ihmsf[3], 3333, \"d2tf\", \"3\", status)\n+\n+\n+def test_dat():\n+    deltat, j = erfa_ufunc.dat(2003, 6, 1, 0.0)\n+    vvd(deltat, 32.0, 0.0, \"dat\", \"d1\", status)\n+    viv(j, 0, \"dat\", \"j1\", status)\n+    deltat, j = erfa_ufunc.dat(2008, 1, 17, 0.0)\n+    vvd(deltat, 33.0, 0.0, \"dat\", \"d2\", status)\n+    viv(j, 0, \"dat\", \"j2\", status)\n+    deltat, j = erfa_ufunc.dat(2017, 9, 1, 0.0)\n+    vvd(deltat, 37.0, 0.0, \"dat\", \"d3\", status)\n+    viv(j, 0, \"dat\", \"j3\", status)\n+\n+\n+def test_dtdb():\n+    dtdb = erfa_ufunc.dtdb(2448939.5, 0.123, 0.76543, 5.0123, 5525.242, 3190.0)\n+    vvd(dtdb, -0.1280368005936998991e-2, 1e-15, \"dtdb\", \"\", status)\n+\n+\n+def test_dtf2d():\n+    u1, u2, j = erfa_ufunc.dtf2d(\"UTC\", 1994, 6, 30, 23, 59, 60.13599)\n+    vvd(u1+u2, 2449534.49999, 1e-6, \"dtf2d\", \"u\", status)\n+    viv(j, 0, \"dtf2d\", \"j\", status)\n+\n+\n+def test_eceq06():\n+    date1 = 2456165.5\n+    date2 = 0.401182685\n+    dl = 5.1\n+    db = -0.9\n+    dr, dd = erfa_ufunc.eceq06(date1, date2, dl, db)\n+    vvd(dr, 5.533459733613627767, 1e-14, \"eceq06\", \"dr\", status)\n+    vvd(dd, -1.246542932554480576, 1e-14, \"eceq06\", \"dd\", status)\n+\n+\n+def test_ecm06():\n+    rm = np.empty((3, 3), float)\n+    date1 = 2456165.5\n+    date2 = 0.401182685\n+    rm = erfa_ufunc.ecm06(date1, date2)\n+    vvd(rm[0][0], 0.9999952427708701137, 1e-14, \"ecm06\", \"rm11\", status)\n+    vvd(rm[0][1], -0.2829062057663042347e-2, 1e-14, \"ecm06\", \"rm12\", status)\n+    vvd(rm[0][2], -0.1229163741100017629e-2, 1e-14, \"ecm06\", \"rm13\", status)\n+    vvd(rm[1][0], 0.3084546876908653562e-2, 1e-14, \"ecm06\", \"rm21\", status)\n+    vvd(rm[1][1], 0.9174891871550392514, 1e-14, \"ecm06\", \"rm22\", status)\n+    vvd(rm[1][2], 0.3977487611849338124, 1e-14, \"ecm06\", \"rm23\", status)\n+    vvd(rm[2][0], 0.2488512951527405928e-5, 1e-14, \"ecm06\", \"rm31\", status)\n+    vvd(rm[2][1], -0.3977506604161195467, 1e-14, \"ecm06\", \"rm32\", status)\n+    vvd(rm[2][2], 0.9174935488232863071, 1e-14, \"ecm06\", \"rm33\", status)\n+\n+\n+def test_ee00():\n+    epsa = 0.4090789763356509900\n+    dpsi = -0.9630909107115582393e-5\n+    ee = erfa_ufunc.ee00(2400000.5, 53736.0, epsa, dpsi)\n+    vvd(ee, -0.8834193235367965479e-5, 1e-18, \"ee00\", \"\", status)\n+\n+\n+def test_ee00a():\n+    ee = erfa_ufunc.ee00a(2400000.5, 53736.0)\n+    vvd(ee, -0.8834192459222588227e-5, 1e-18, \"ee00a\", \"\", status)\n+\n+\n+def test_ee00b():\n+    ee = erfa_ufunc.ee00b(2400000.5, 53736.0)\n+    vvd(ee, -0.8835700060003032831e-5, 1e-18, \"ee00b\", \"\", status)\n+\n+\n+def test_ee06a():\n+    ee = erfa_ufunc.ee06a(2400000.5, 53736.0)\n+    vvd(ee, -0.8834195072043790156e-5, 1e-15, \"ee06a\", \"\", status)\n+\n+\n+def test_eect00():\n+    eect = erfa_ufunc.eect00(2400000.5, 53736.0)\n+    vvd(eect, 0.2046085004885125264e-8, 1e-20, \"eect00\", \"\", status)\n+\n+\n+def test_eform():\n+    a, f, j = erfa_ufunc.eform(0)\n+    viv(j, -1, \"eform\", \"j0\", status)\n+    a, f, j = erfa_ufunc.eform(erfa.WGS84)\n+    viv(j, 0, \"eform\", \"j1\", status)\n+    vvd(a, 6378137.0, 1e-10, \"eform\", \"a1\", status)\n+    vvd(f, 0.3352810664747480720e-2, 1e-18, \"eform\", \"f1\", status)\n+    a, f, j = erfa_ufunc.eform(erfa.GRS80)\n+    viv(j, 0, \"eform\", \"j2\", status)\n+    vvd(a, 6378137.0, 1e-10, \"eform\", \"a2\", status)\n+    vvd(f, 0.3352810681182318935e-2, 1e-18, \"eform\", \"f2\", status)\n+    a, f, j = erfa_ufunc.eform(erfa.WGS72)\n+    viv(j, 0, \"eform\", \"j2\", status)\n+    vvd(a, 6378135.0, 1e-10, \"eform\", \"a3\", status)\n+    vvd(f, 0.3352779454167504862e-2, 1e-18, \"eform\", \"f3\", status)\n+    a, f, j = erfa_ufunc.eform(4)\n+    viv(j, -1, \"eform\", \"j3\", status)\n+\n+\n+def test_eo06a():\n+    eo = erfa_ufunc.eo06a(2400000.5, 53736.0)\n+    vvd(eo, -0.1332882371941833644e-2, 1e-15, \"eo06a\", \"\", status)\n+\n+\n+def test_eors():\n+    rnpb = np.empty((3, 3), float)\n+    rnpb[0][0] = 0.9999989440476103608\n+    rnpb[0][1] = -0.1332881761240011518e-2\n+    rnpb[0][2] = -0.5790767434730085097e-3\n+    rnpb[1][0] = 0.1332858254308954453e-2\n+    rnpb[1][1] = 0.9999991109044505944\n+    rnpb[1][2] = -0.4097782710401555759e-4\n+    rnpb[2][0] = 0.5791308472168153320e-3\n+    rnpb[2][1] = 0.4020595661593994396e-4\n+    rnpb[2][2] = 0.9999998314954572365\n+    s = -0.1220040848472271978e-7\n+    eo = erfa_ufunc.eors(rnpb, s)\n+    vvd(eo, -0.1332882715130744606e-2, 1e-14, \"eors\", \"\", status)\n+\n+\n+def test_epb():\n+    epb = erfa_ufunc.epb(2415019.8135, 30103.18648)\n+    vvd(epb, 1982.418424159278580, 1e-12, \"epb\", \"\", status)\n+\n+\n+def test_epb2jd():\n+    epb = 1957.3\n+    djm0, djm = erfa_ufunc.epb2jd(epb)\n+    vvd(djm0, 2400000.5, 1e-9, \"epb2jd\", \"djm0\", status)\n+    vvd(djm, 35948.1915101513, 1e-9, \"epb2jd\", \"mjd\", status)\n+\n+\n+def test_epj():\n+    epj = erfa_ufunc.epj(2451545, -7392.5)\n+    vvd(epj, 1979.760438056125941, 1e-12, \"epj\", \"\", status)\n+\n+\n+def test_epj2jd():\n+    epj = 1996.8\n+    djm0, djm = erfa_ufunc.epj2jd(epj)\n+    vvd(djm0, 2400000.5, 1e-9, \"epj2jd\", \"djm0\", status)\n+    vvd(djm,    50375.7, 1e-9, \"epj2jd\", \"mjd\",  status)\n+\n+\n+def test_epv00():\n+    pvh = np.empty((), erfa_ufunc.dt_pv)\n+    pvb = np.empty((), erfa_ufunc.dt_pv)\n+    pvh, pvb, j = erfa_ufunc.epv00(2400000.5, 53411.52501161)\n+    vvd(pvh[0][0], -0.7757238809297706813, 1e-14, \"epv00\", \"ph(x)\", status)\n+    vvd(pvh[0][1], 0.5598052241363340596, 1e-14, \"epv00\", \"ph(y)\", status)\n+    vvd(pvh[0][2], 0.2426998466481686993, 1e-14, \"epv00\", \"ph(z)\", status)\n+    vvd(pvh[1][0], -0.1091891824147313846e-1, 1e-15, \"epv00\", \"vh(x)\", status)\n+    vvd(pvh[1][1], -0.1247187268440845008e-1, 1e-15, \"epv00\", \"vh(y)\", status)\n+    vvd(pvh[1][2], -0.5407569418065039061e-2, 1e-15, \"epv00\", \"vh(z)\", status)\n+    vvd(pvb[0][0], -0.7714104440491111971, 1e-14, \"epv00\", \"pb(x)\", status)\n+    vvd(pvb[0][1], 0.5598412061824171323, 1e-14, \"epv00\", \"pb(y)\", status)\n+    vvd(pvb[0][2], 0.2425996277722452400, 1e-14, \"epv00\", \"pb(z)\", status)\n+    vvd(pvb[1][0], -0.1091874268116823295e-1, 1e-15, \"epv00\", \"vb(x)\", status)\n+    vvd(pvb[1][1], -0.1246525461732861538e-1, 1e-15, \"epv00\", \"vb(y)\", status)\n+    vvd(pvb[1][2], -0.5404773180966231279e-2, 1e-15, \"epv00\", \"vb(z)\", status)\n+    viv(j, 0, \"epv00\", \"j\", status)\n+\n+\n+def test_eqec06():\n+    date1 = 1234.5\n+    date2 = 2440000.5\n+    dr = 1.234\n+    dd = 0.987\n+    dl, db = erfa_ufunc.eqec06(date1, date2, dr, dd)\n+    vvd(dl, 1.342509918994654619, 1e-14, \"eqec06\", \"dl\", status)\n+    vvd(db, 0.5926215259704608132, 1e-14, \"eqec06\", \"db\", status)\n+\n+\n+def test_eqeq94():\n+    eqeq = erfa_ufunc.eqeq94(2400000.5, 41234.0)\n+    vvd(eqeq, 0.5357758254609256894e-4, 1e-17, \"eqeq94\", \"\", status)\n+\n+\n+def test_era00():\n+    era00 = erfa_ufunc.era00(2400000.5, 54388.0)\n+    vvd(era00, 0.4022837240028158102, 1e-12, \"era00\", \"\", status)\n+\n+\n+def test_fad03():\n+    vvd(erfa_ufunc.fad03(0.80), 1.946709205396925672, 1e-12, \"fad03\", \"\", status)\n+\n+\n+def test_fae03():\n+    vvd(erfa_ufunc.fae03(0.80), 1.744713738913081846, 1e-12, \"fae03\", \"\", status)\n+\n+\n+def test_faf03():\n+    vvd(erfa_ufunc.faf03(0.80), 0.2597711366745499518, 1e-12, \"faf03\", \"\", status)\n+\n+\n+def test_faju03():\n+    vvd(erfa_ufunc.faju03(0.80), 5.275711665202481138, 1e-12, \"faju03\", \"\", status)\n+\n+\n+def test_fal03():\n+    vvd(erfa_ufunc.fal03(0.80), 5.132369751108684150, 1e-12, \"fal03\", \"\", status)\n+\n+\n+def test_falp03():\n+    vvd(erfa_ufunc.falp03(0.80), 6.226797973505507345, 1e-12, \"falp03\", \"\", status)\n+\n+\n+def test_fama03():\n+    vvd(erfa_ufunc.fama03(0.80), 3.275506840277781492, 1e-12, \"fama03\", \"\", status)\n+\n+\n+def test_fame03():\n+    vvd(erfa_ufunc.fame03(0.80), 5.417338184297289661, 1e-12, \"fame03\", \"\", status)\n+\n+\n+def test_fane03():\n+    vvd(erfa_ufunc.fane03(0.80), 2.079343830860413523, 1e-12, \"fane03\", \"\", status)\n+\n+\n+def test_faom03():\n+    vvd(erfa_ufunc.faom03(0.80), -5.973618440951302183, 1e-12, \"faom03\", \"\", status)\n+\n+\n+def test_fapa03():\n+    vvd(erfa_ufunc.fapa03(0.80), 0.1950884762240000000e-1, 1e-12, \"fapa03\", \"\", status)\n+\n+\n+def test_fasa03():\n+    vvd(erfa_ufunc.fasa03(0.80), 5.371574539440827046, 1e-12, \"fasa03\", \"\", status)\n+\n+\n+def test_faur03():\n+    vvd(erfa_ufunc.faur03(0.80), 5.180636450180413523, 1e-12, \"faur03\", \"\", status)\n+\n+\n+def test_fave03():\n+    vvd(erfa_ufunc.fave03(0.80), 3.424900460533758000, 1e-12, \"fave03\", \"\", status)\n+\n+\n+def test_fk425():\n+    r1950 = 0.07626899753879587532\n+    d1950 = -1.137405378399605780\n+    dr1950 = 0.1973749217849087460e-4\n+    dd1950 = 0.5659714913272723189e-5\n+    p1950 = 0.134\n+    v1950 = 8.7\n+    r2000, d2000, dr2000, dd2000, p2000, v2000 = erfa_ufunc.fk425(r1950, d1950, dr1950, dd1950, p1950, v1950)\n+    vvd(r2000, 0.08757989933556446040, 1e-14, \"fk425\", \"r2000\", status)\n+    vvd(d2000, -1.132279113042091895, 1e-12, \"fk425\", \"d2000\", status)\n+    vvd(dr2000, 0.1953670614474396139e-4, 1e-17, \"fk425\", \"dr2000\", status)\n+    vvd(dd2000, 0.5637686678659640164e-5, 1e-18, \"fk425\", \"dd2000\", status)\n+    vvd(p2000, 0.1339919950582767871, 1e-13, \"fk425\", \"p2000\", status)\n+    vvd(v2000, 8.736999669183529069, 1e-12, \"fk425\", \"v2000\", status)\n+\n+\n+def test_fk45z():\n+    r1950 = 0.01602284975382960982\n+    d1950 = -0.1164347929099906024\n+    bepoch = 1954.677617625256806\n+    r2000, d2000 = erfa_ufunc.fk45z(r1950, d1950, bepoch)\n+    vvd(r2000, 0.02719295911606862303, 1e-15, \"fk45z\", \"r2000\", status)\n+    vvd(d2000, -0.1115766001565926892, 1e-13, \"fk45z\", \"d2000\", status)\n+\n+\n+def test_fk524():\n+    r2000 = 0.8723503576487275595\n+    d2000 = -0.7517076365138887672\n+    dr2000 = 0.2019447755430472323e-4\n+    dd2000 = 0.3541563940505160433e-5\n+    p2000 = 0.1559\n+    v2000 = 86.87\n+    r1950, d1950, dr1950, dd1950, p1950, v1950 = erfa_ufunc.fk524(r2000, d2000, dr2000, dd2000, p2000, v2000)\n+    vvd(r1950, 0.8636359659799603487, 1e-13, \"fk524\", \"r1950\", status)\n+    vvd(d1950, -0.7550281733160843059, 1e-13, \"fk524\", \"d1950\", status)\n+    vvd(dr1950, 0.2023628192747172486e-4, 1e-17, \"fk524\", \"dr1950\", status)\n+    vvd(dd1950, 0.3624459754935334718e-5, 1e-18, \"fk524\", \"dd1950\", status)\n+    vvd(p1950, 0.1560079963299390241, 1e-13, \"fk524\", \"p1950\", status)\n+    vvd(v1950, 86.79606353469163751, 1e-11, \"fk524\", \"v1950\", status)\n+\n+\n+def test_fk52h():\n+    r5  = 1.76779433\n+    d5  = -0.2917517103\n+    dr5 = -1.91851572e-7\n+    dd5 = -5.8468475e-6\n+    px5 = 0.379210\n+    rv5 = -7.6\n+    rh, dh, drh, ddh, pxh, rvh = erfa_ufunc.fk52h(r5, d5, dr5, dd5, px5, rv5)\n+    vvd(rh, 1.767794226299947632, 1e-14, \"fk52h\", \"ra\", status)\n+    vvd(dh,  -0.2917516070530391757, 1e-14, \"fk52h\", \"dec\", status)\n+    vvd(drh, -0.1961874125605721270e-6,1e-19, \"fk52h\", \"dr5\", status)\n+    vvd(ddh, -0.58459905176693911e-5, 1e-19, \"fk52h\", \"dd5\", status)\n+    vvd(pxh,  0.37921, 1e-14, \"fk52h\", \"px\", status)\n+    vvd(rvh, -7.6000000940000254, 1e-11, \"fk52h\", \"rv\", status)\n+\n+\n+def test_fk54z():\n+    r2000 = 0.02719026625066316119\n+    d2000 = -0.1115815170738754813\n+    bepoch = 1954.677308160316374\n+    r1950, d1950, dr1950, dd1950 = erfa_ufunc.fk54z(r2000, d2000, bepoch)\n+    vvd(r1950, 0.01602015588390065476, 1e-14, \"fk54z\", \"r1950\", status)\n+    vvd(d1950, -0.1164397101110765346, 1e-13, \"fk54z\", \"d1950\", status)\n+    vvd(dr1950, -0.1175712648471090704e-7, 1e-20, \"fk54z\", \"dr1950\", status)\n+    vvd(dd1950, 0.2108109051316431056e-7, 1e-20, \"fk54z\", \"dd1950\", status)\n+\n+\n+@pytest.mark.xfail(np.__version__ < '1.24', reason='numpy < 1.24 do not support no-input ufuncs')\n+def test_fk5hip():\n+    r5h = np.empty((3, 3), float)\n+    s5h = np.empty((3,), float)\n+    r5h, s5h = erfa_ufunc.fk5hip()\n+    vvd(r5h[0][0], 0.9999999999999928638, 1e-14, \"fk5hip\", \"11\", status)\n+    vvd(r5h[0][1], 0.1110223351022919694e-6, 1e-17, \"fk5hip\", \"12\", status)\n+    vvd(r5h[0][2], 0.4411803962536558154e-7, 1e-17, \"fk5hip\", \"13\", status)\n+    vvd(r5h[1][0], -0.1110223308458746430e-6, 1e-17, \"fk5hip\", \"21\", status)\n+    vvd(r5h[1][1], 0.9999999999999891830, 1e-14, \"fk5hip\", \"22\", status)\n+    vvd(r5h[1][2], -0.9647792498984142358e-7, 1e-17, \"fk5hip\", \"23\", status)\n+    vvd(r5h[2][0], -0.4411805033656962252e-7, 1e-17, \"fk5hip\", \"31\", status)\n+    vvd(r5h[2][1], 0.9647792009175314354e-7, 1e-17, \"fk5hip\", \"32\", status)\n+    vvd(r5h[2][2], 0.9999999999999943728, 1e-14, \"fk5hip\", \"33\", status)\n+    vvd(s5h[0], -0.1454441043328607981e-8, 1e-17, \"fk5hip\", \"s1\", status)\n+    vvd(s5h[1], 0.2908882086657215962e-8, 1e-17, \"fk5hip\", \"s2\", status)\n+    vvd(s5h[2], 0.3393695767766751955e-8, 1e-17, \"fk5hip\", \"s3\", status)\n+\n+\n+def test_fk5hz():\n+    r5 = 1.76779433\n+    d5 = -0.2917517103\n+    rh, dh = erfa_ufunc.fk5hz(r5, d5, 2400000.5, 54479.0)\n+    vvd(rh,  1.767794191464423978, 1e-12, \"fk5hz\", \"ra\", status)\n+    vvd(dh, -0.2917516001679884419, 1e-12, \"fk5hz\", \"dec\", status)\n+\n+\n+def test_fw2m():\n+    r = np.empty((3, 3), float)\n+    gamb = -0.2243387670997992368e-5\n+    phib = 0.4091014602391312982\n+    psi  = -0.9501954178013015092e-3\n+    eps  = 0.4091014316587367472\n+    r = erfa_ufunc.fw2m(gamb, phib, psi, eps)\n+    vvd(r[0][0], 0.9999995505176007047, 1e-12, \"fw2m\", \"11\", status)\n+    vvd(r[0][1], 0.8695404617348192957e-3, 1e-12, \"fw2m\", \"12\", status)\n+    vvd(r[0][2], 0.3779735201865582571e-3, 1e-12, \"fw2m\", \"13\", status)\n+    vvd(r[1][0], -0.8695404723772016038e-3, 1e-12, \"fw2m\", \"21\", status)\n+    vvd(r[1][1], 0.9999996219496027161, 1e-12, \"fw2m\", \"22\", status)\n+    vvd(r[1][2], -0.1361752496887100026e-6, 1e-12, \"fw2m\", \"23\", status)\n+    vvd(r[2][0], -0.3779734957034082790e-3, 1e-12, \"fw2m\", \"31\", status)\n+    vvd(r[2][1], -0.1924880848087615651e-6, 1e-12, \"fw2m\", \"32\", status)\n+    vvd(r[2][2], 0.9999999285679971958, 1e-12, \"fw2m\", \"33\", status)\n+\n+\n+def test_fw2xy():\n+    gamb = -0.2243387670997992368e-5\n+    phib = 0.4091014602391312982\n+    psi  = -0.9501954178013015092e-3\n+    eps  = 0.4091014316587367472\n+    x, y = erfa_ufunc.fw2xy(gamb, phib, psi, eps)\n+    vvd(x, -0.3779734957034082790e-3, 1e-14, \"fw2xy\", \"x\", status)\n+    vvd(y, -0.1924880848087615651e-6, 1e-14, \"fw2xy\", \"y\", status)\n+\n+\n+def test_g2icrs():\n+    dl = 5.5850536063818546461558105\n+    db = -0.7853981633974483096156608\n+    dr, dd = erfa_ufunc.g2icrs (dl, db)\n+    vvd(dr,  5.9338074302227188048671, 1e-14, \"g2icrs\", \"R\", status)\n+    vvd(dd, -1.1784870613579944551541, 1e-14, \"g2icrs\", \"D\", status)\n+\n+\n+def test_gc2gd():\n+    xyz = np.array([2e6, 3e6, 5.244e6])\n+    e, p, h, j = erfa_ufunc.gc2gd(0, xyz)\n+    viv(j, -1, \"gc2gd\", \"j0\", status)\n+    e, p, h, j = erfa_ufunc.gc2gd(erfa.WGS84, xyz)\n+    viv(j, 0, \"gc2gd\", \"j1\", status)\n+    vvd(e, 0.9827937232473290680, 1e-14, \"gc2gd\", \"e1\", status)\n+    vvd(p, 0.97160184819075459, 1e-14, \"gc2gd\", \"p1\", status)\n+    vvd(h, 331.4172461426059892, 1e-8, \"gc2gd\", \"h1\", status)\n+    e, p, h, j = erfa_ufunc.gc2gd(erfa.GRS80, xyz)\n+    viv(j, 0, \"gc2gd\", \"j2\", status)\n+    vvd(e, 0.9827937232473290680, 1e-14, \"gc2gd\", \"e2\", status)\n+    vvd(p, 0.97160184820607853, 1e-14, \"gc2gd\", \"p2\", status)\n+    vvd(h, 331.41731754844348, 1e-8, \"gc2gd\", \"h2\", status)\n+    e, p, h, j = erfa_ufunc.gc2gd(erfa.WGS72, xyz)\n+    viv(j, 0, \"gc2gd\", \"j3\", status)\n+    vvd(e, 0.9827937232473290680, 1e-14, \"gc2gd\", \"e3\", status)\n+    vvd(p, 0.9716018181101511937, 1e-14, \"gc2gd\", \"p3\", status)\n+    vvd(h, 333.2770726130318123, 1e-8, \"gc2gd\", \"h3\", status)\n+    e, p, h, j = erfa_ufunc.gc2gd(4, xyz)\n+    viv(j, -1, \"gc2gd\", \"j4\", status)\n+\n+\n+def test_gc2gde():\n+    a = 6378136.0\n+    f = 0.0033528\n+    xyz = np.array([2e6, 3e6, 5.244e6])\n+    e, p, h, j = erfa_ufunc.gc2gde(a, f, xyz)\n+    viv(j, 0, \"gc2gde\", \"j\", status)\n+    vvd(e, 0.9827937232473290680, 1e-14, \"gc2gde\", \"e\", status)\n+    vvd(p, 0.9716018377570411532, 1e-14, \"gc2gde\", \"p\", status)\n+    vvd(h, 332.36862495764397, 1e-8, \"gc2gde\", \"h\", status)\n+\n+\n+def test_gd2gc():\n+    e = 3.1\n+    p = -0.5\n+    h = 2500.0\n+    xyz = np.empty((3,), float)\n+    xyz, j = erfa_ufunc.gd2gc(0, e, p, h)\n+    viv(j, -1, \"gd2gc\", \"j0\", status)\n+    xyz, j = erfa_ufunc.gd2gc(erfa.WGS84, e, p, h)\n+    viv(j, 0, \"gd2gc\", \"j1\", status)\n+    vvd(xyz[0], -5599000.5577049947, 1e-7, \"gd2gc\", \"1/1\", status)\n+    vvd(xyz[1], 233011.67223479203, 1e-7, \"gd2gc\", \"2/1\", status)\n+    vvd(xyz[2], -3040909.4706983363, 1e-7, \"gd2gc\", \"3/1\", status)\n+    xyz, j = erfa_ufunc.gd2gc(erfa.GRS80, e, p, h)\n+    viv(j, 0, \"gd2gc\", \"j2\", status)\n+    vvd(xyz[0], -5599000.5577260984, 1e-7, \"gd2gc\", \"1/2\", status)\n+    vvd(xyz[1], 233011.6722356702949, 1e-7, \"gd2gc\", \"2/2\", status)\n+    vvd(xyz[2], -3040909.4706095476, 1e-7, \"gd2gc\", \"3/2\", status)\n+    xyz, j = erfa_ufunc.gd2gc(erfa.WGS72, e, p, h)\n+    viv(j, 0, \"gd2gc\", \"j3\", status)\n+    vvd(xyz[0], -5598998.7626301490, 1e-7, \"gd2gc\", \"1/3\", status)\n+    vvd(xyz[1], 233011.5975297822211, 1e-7, \"gd2gc\", \"2/3\", status)\n+    vvd(xyz[2], -3040908.6861467111, 1e-7, \"gd2gc\", \"3/3\", status)\n+    xyz, j = erfa_ufunc.gd2gc(4, e, p, h)\n+    viv(j, -1, \"gd2gc\", \"j4\", status)\n+\n+\n+def test_gd2gce():\n+    a = 6378136.0\n+    f = 0.0033528\n+    e = 3.1\n+    p = -0.5\n+    h = 2500.0\n+    xyz = np.empty((3,), float)\n+    xyz, j = erfa_ufunc.gd2gce(a, f, e, p, h)\n+    viv(j, 0, \"gd2gce\", \"j\", status)\n+    vvd(xyz[0], -5598999.6665116328, 1e-7, \"gd2gce\", \"1\", status)\n+    vvd(xyz[1], 233011.6351463057189, 1e-7, \"gd2gce\", \"2\", status)\n+    vvd(xyz[2], -3040909.0517314132, 1e-7, \"gd2gce\", \"3\", status)\n+\n+\n+def test_gmst00():\n+    theta = erfa_ufunc.gmst00(2400000.5, 53736.0, 2400000.5, 53736.0)\n+    vvd(theta, 1.754174972210740592, 1e-12, \"gmst00\", \"\", status)\n+\n+\n+def test_gmst06():\n+    theta = erfa_ufunc.gmst06(2400000.5, 53736.0, 2400000.5, 53736.0)\n+    vvd(theta, 1.754174971870091203, 1e-12, \"gmst06\", \"\", status)\n+\n+\n+def test_gmst82():\n+    theta = erfa_ufunc.gmst82(2400000.5, 53736.0)\n+    vvd(theta, 1.754174981860675096, 1e-12, \"gmst82\", \"\", status)\n+\n+\n+def test_gst00a():\n+    theta = erfa_ufunc.gst00a(2400000.5, 53736.0, 2400000.5, 53736.0)\n+    vvd(theta, 1.754166138018281369, 1e-12, \"gst00a\", \"\", status)\n+\n+\n+def test_gst00b():\n+    theta = erfa_ufunc.gst00b(2400000.5, 53736.0)\n+    vvd(theta, 1.754166136510680589, 1e-12, \"gst00b\", \"\", status)\n+\n+\n+def test_gst06():\n+    rnpb = np.empty((3, 3), float)\n+    rnpb[0][0] = 0.9999989440476103608\n+    rnpb[0][1] = -0.1332881761240011518e-2\n+    rnpb[0][2] = -0.5790767434730085097e-3\n+    rnpb[1][0] = 0.1332858254308954453e-2\n+    rnpb[1][1] = 0.9999991109044505944\n+    rnpb[1][2] = -0.4097782710401555759e-4\n+    rnpb[2][0] = 0.5791308472168153320e-3\n+    rnpb[2][1] = 0.4020595661593994396e-4\n+    rnpb[2][2] = 0.9999998314954572365\n+    theta = erfa_ufunc.gst06(2400000.5, 53736.0, 2400000.5, 53736.0, rnpb)\n+    vvd(theta, 1.754166138018167568, 1e-12, \"gst06\", \"\", status)\n+\n+\n+def test_gst06a():\n+    theta = erfa_ufunc.gst06a(2400000.5, 53736.0, 2400000.5, 53736.0)\n+    vvd(theta, 1.754166137675019159, 1e-12, \"gst06a\", \"\", status)\n+\n+\n+def test_gst94():\n+    theta = erfa_ufunc.gst94(2400000.5, 53736.0)\n+    vvd(theta, 1.754166136020645203, 1e-12, \"gst94\", \"\", status)\n+\n+\n+def test_h2fk5():\n+    rh  = 1.767794352\n+    dh  = -0.2917512594\n+    drh = -2.76413026e-6\n+    ddh = -5.92994449e-6\n+    pxh = 0.379210\n+    rvh = -7.6\n+    r5, d5, dr5, dd5, px5, rv5 = erfa_ufunc.h2fk5(rh, dh, drh, ddh, pxh, rvh)\n+    vvd(r5, 1.767794455700065506, 1e-13, \"h2fk5\", \"ra\", status)\n+    vvd(d5, -0.2917513626469638890, 1e-13, \"h2fk5\", \"dec\", status)\n+    vvd(dr5, -0.27597945024511204e-5, 1e-18, \"h2fk5\", \"dr5\", status)\n+    vvd(dd5, -0.59308014093262838e-5, 1e-18, \"h2fk5\", \"dd5\", status)\n+    vvd(px5, 0.37921, 1e-13, \"h2fk5\", \"px\", status)\n+    vvd(rv5, -7.6000001309071126, 1e-11, \"h2fk5\", \"rv\", status)\n+\n+\n+def test_hd2ae():\n+    h = 1.1\n+    d = 1.2\n+    p = 0.3\n+    a, e = erfa_ufunc.hd2ae(h, d, p)\n+    vvd(a, 5.916889243730066194, 1e-13, \"hd2ae\", \"a\", status)\n+    vvd(e, 0.4472186304990486228, 1e-14, \"hd2ae\", \"e\", status)\n+\n+\n+def test_hd2pa():\n+    h = 1.1\n+    d = 1.2\n+    p = 0.3\n+    q = erfa_ufunc.hd2pa(h, d, p)\n+    vvd(q, 1.906227428001995580, 1e-13, \"hd2pa\", \"q\", status)\n+\n+\n+def test_hfk5z():\n+    rh = 1.767794352\n+    dh = -0.2917512594\n+    r5, d5, dr5, dd5 = erfa_ufunc.hfk5z(rh, dh, 2400000.5, 54479.0)\n+    vvd(r5, 1.767794490535581026, 1e-13, \"hfk5z\", \"ra\", status)\n+    vvd(d5, -0.2917513695320114258, 1e-14, \"hfk5z\", \"dec\", status)\n+    vvd(dr5, 0.4335890983539243029e-8, 1e-22, \"hfk5z\", \"dr5\", status)\n+    vvd(dd5, -0.8569648841237745902e-9, 1e-23, \"hfk5z\", \"dd5\", status)\n+\n+\n+def test_icrs2g():\n+    dr = 5.9338074302227188048671087\n+    dd = -1.1784870613579944551540570\n+    dl, db = erfa_ufunc.icrs2g (dr, dd)\n+    vvd(dl,  5.5850536063818546461558, 1e-14, \"icrs2g\", \"L\", status)\n+    vvd(db, -0.7853981633974483096157, 1e-14, \"icrs2g\", \"B\", status)\n+\n+\n+@pytest.mark.xfail(np.__version__ < '1.24', reason='numpy < 1.24 do not support no-input ufuncs')\n+def test_ir():\n+    r = np.empty((3, 3), float)\n+    r[0][0] = 2.0\n+    r[0][1] = 3.0\n+    r[0][2] = 2.0\n+    r[1][0] = 3.0\n+    r[1][1] = 2.0\n+    r[1][2] = 3.0\n+    r[2][0] = 3.0\n+    r[2][1] = 4.0\n+    r[2][2] = 5.0\n+    r = erfa_ufunc.ir()\n+    vvd(r[0][0], 1.0, 0.0, \"ir\", \"11\", status)\n+    vvd(r[0][1], 0.0, 0.0, \"ir\", \"12\", status)\n+    vvd(r[0][2], 0.0, 0.0, \"ir\", \"13\", status)\n+    vvd(r[1][0], 0.0, 0.0, \"ir\", \"21\", status)\n+    vvd(r[1][1], 1.0, 0.0, \"ir\", \"22\", status)\n+    vvd(r[1][2], 0.0, 0.0, \"ir\", \"23\", status)\n+    vvd(r[2][0], 0.0, 0.0, \"ir\", \"31\", status)\n+    vvd(r[2][1], 0.0, 0.0, \"ir\", \"32\", status)\n+    vvd(r[2][2], 1.0, 0.0, \"ir\", \"33\", status)\n+\n+\n+def test_jd2cal():\n+    dj1 = 2400000.5\n+    dj2 = 50123.9999\n+    iy, im, id, fd, j = erfa_ufunc.jd2cal(dj1, dj2)\n+    viv(iy, 1996, \"jd2cal\", \"y\", status)\n+    viv(im, 2, \"jd2cal\", \"m\", status)\n+    viv(id, 10, \"jd2cal\", \"d\", status)\n+    vvd(fd, 0.9999, 1e-7, \"jd2cal\", \"fd\", status)\n+    viv(j, 0, \"jd2cal\", \"j\", status)\n+\n+\n+def test_jdcalf():\n+    dj1 = 2400000.5\n+    dj2 = 50123.9999\n+    iydmf, j = erfa_ufunc.jdcalf(4, dj1, dj2)\n+    viv(iydmf[0], 1996, \"jdcalf\", \"y\", status)\n+    viv(iydmf[1], 2, \"jdcalf\", \"m\", status)\n+    viv(iydmf[2], 10, \"jdcalf\", \"d\", status)\n+    viv(iydmf[3], 9999, \"jdcalf\", \"f\", status)\n+    viv(j, 0, \"jdcalf\", \"j\", status)\n+\n+\n+def test_ld():\n+    p = np.empty((3,), float)\n+    q = np.empty((3,), float)\n+    e = np.empty((3,), float)\n+    p1 = np.empty((3,), float)\n+    bm = 0.00028574\n+    p[0] = -0.763276255\n+    p[1] = -0.608633767\n+    p[2] = -0.216735543\n+    q[0] = -0.763276255\n+    q[1] = -0.608633767\n+    q[2] = -0.216735543\n+    e[0] = 0.76700421\n+    e[1] = 0.605629598\n+    e[2] = 0.211937094\n+    em = 8.91276983\n+    dlim = 3e-10\n+    p1 = erfa_ufunc.ld(bm, p, q, e, em, dlim)\n+    vvd(p1[0], -0.7632762548968159627, 1e-12, \"ld\", \"1\", status)\n+    vvd(p1[1], -0.6086337670823762701, 1e-12, \"ld\", \"2\", status)\n+    vvd(p1[2], -0.2167355431320546947, 1e-12, \"ld\", \"3\", status)\n+\n+\n+def test_ldn():\n+    b = np.empty(3, erfa_ufunc.dt_eraLDBODY).view(np.recarray)\n+    ob = np.empty((3,), float)\n+    sc = np.empty((3,), float)\n+    sn = np.empty((3,), float)\n+    b[0].bm = 0.00028574\n+    b[0].dl = 3e-10\n+    b[0].pv['p'][0] = -7.81014427\n+    b[0].pv['p'][1] = -5.60956681\n+    b[0].pv['p'][2] = -1.98079819\n+    b[0].pv['v'][0] = 0.0030723249\n+    b[0].pv['v'][1] = -0.00406995477\n+    b[0].pv['v'][2] = -0.00181335842\n+    b[1].bm = 0.00095435\n+    b[1].dl = 3e-9\n+    b[1].pv['p'][0] = 0.738098796\n+    b[1].pv['p'][1] = 4.63658692\n+    b[1].pv['p'][2] = 1.9693136\n+    b[1].pv['v'][0] = -0.00755816922\n+    b[1].pv['v'][1] = 0.00126913722\n+    b[1].pv['v'][2] = 0.000727999001\n+    b[2].bm = 1.0\n+    b[2].dl = 6e-6\n+    b[2].pv['p'][0] = -0.000712174377\n+    b[2].pv['p'][1] = -0.00230478303\n+    b[2].pv['p'][2] = -0.00105865966\n+    b[2].pv['v'][0] = 6.29235213e-6\n+    b[2].pv['v'][1] = -3.30888387e-7\n+    b[2].pv['v'][2] = -2.96486623e-7\n+    ob[0] = -0.974170437\n+    ob[1] = -0.2115201\n+    ob[2] = -0.0917583114\n+    sc[0] = -0.763276255\n+    sc[1] = -0.608633767\n+    sc[2] = -0.216735543\n+    sn = erfa_ufunc.ldn(b, ob, sc)\n+    vvd(sn[0], -0.7632762579693333866, 1e-12, \"ldn\", \"1\", status)\n+    vvd(sn[1], -0.6086337636093002660, 1e-12, \"ldn\", \"2\", status)\n+    vvd(sn[2], -0.2167355420646328159, 1e-12, \"ldn\", \"3\", status)\n+\n+\n+def test_ldsun():\n+    p = np.empty((3,), float)\n+    e = np.empty((3,), float)\n+    p1 = np.empty((3,), float)\n+    p[0] = -0.763276255\n+    p[1] = -0.608633767\n+    p[2] = -0.216735543\n+    e[0] = -0.973644023\n+    e[1] = -0.20925523\n+    e[2] = -0.0907169552\n+    em = 0.999809214\n+    p1 = erfa_ufunc.ldsun(p, e, em)\n+    vvd(p1[0], -0.7632762580731413169, 1e-12, \"ldsun\", \"1\", status)\n+    vvd(p1[1], -0.6086337635262647900, 1e-12, \"ldsun\", \"2\", status)\n+    vvd(p1[2], -0.2167355419322321302, 1e-12, \"ldsun\", \"3\", status)\n+\n+\n+def test_lteceq():\n+    epj = 2500.0\n+    dl = 1.5\n+    db = 0.6\n+    dr, dd = erfa_ufunc.lteceq(epj, dl, db)\n+    vvd(dr, 1.275156021861921167, 1e-14, \"lteceq\", \"dr\", status)\n+    vvd(dd, 0.9966573543519204791, 1e-14, \"lteceq\", \"dd\", status)\n+\n+\n+def test_ltecm():\n+    rm = np.empty((3, 3), float)\n+    epj = -3000.0\n+    rm = erfa_ufunc.ltecm(epj)\n+    vvd(rm[0][0], 0.3564105644859788825, 1e-14, \"ltecm\", \"rm11\", status)\n+    vvd(rm[0][1], 0.8530575738617682284, 1e-14, \"ltecm\", \"rm12\", status)\n+    vvd(rm[0][2], 0.3811355207795060435, 1e-14, \"ltecm\", \"rm13\", status)\n+    vvd(rm[1][0], -0.9343283469640709942, 1e-14, \"ltecm\", \"rm21\", status)\n+    vvd(rm[1][1], 0.3247830597681745976, 1e-14, \"ltecm\", \"rm22\", status)\n+    vvd(rm[1][2], 0.1467872751535940865, 1e-14, \"ltecm\", \"rm23\", status)\n+    vvd(rm[2][0], 0.1431636191201167793e-2, 1e-14, \"ltecm\", \"rm31\", status)\n+    vvd(rm[2][1], -0.4084222566960599342, 1e-14, \"ltecm\", \"rm32\", status)\n+    vvd(rm[2][2], 0.9127919865189030899, 1e-14, \"ltecm\", \"rm33\", status)\n+\n+\n+def test_lteqec():\n+    epj = -1500.0\n+    dr = 1.234\n+    dd = 0.987\n+    dl, db = erfa_ufunc.lteqec(epj, dr, dd)\n+    vvd(dl, 0.5039483649047114859, 1e-14, \"lteqec\", \"dl\", status)\n+    vvd(db, 0.5848534459726224882, 1e-14, \"lteqec\", \"db\", status)\n+\n+\n+def test_ltp():\n+    rp = np.empty((3, 3), float)\n+    epj = 1666.666\n+    rp = erfa_ufunc.ltp(epj)\n+    vvd(rp[0][0], 0.9967044141159213819, 1e-14, \"ltp\", \"rp11\", status)\n+    vvd(rp[0][1], 0.7437801893193210840e-1, 1e-14, \"ltp\", \"rp12\", status)\n+    vvd(rp[0][2], 0.3237624409345603401e-1, 1e-14, \"ltp\", \"rp13\", status)\n+    vvd(rp[1][0], -0.7437802731819618167e-1, 1e-14, \"ltp\", \"rp21\", status)\n+    vvd(rp[1][1], 0.9972293894454533070, 1e-14, \"ltp\", \"rp22\", status)\n+    vvd(rp[1][2], -0.1205768842723593346e-2, 1e-14, \"ltp\", \"rp23\", status)\n+    vvd(rp[2][0], -0.3237622482766575399e-1, 1e-14, \"ltp\", \"rp31\", status)\n+    vvd(rp[2][1], -0.1206286039697609008e-2, 1e-14, \"ltp\", \"rp32\", status)\n+    vvd(rp[2][2], 0.9994750246704010914, 1e-14, \"ltp\", \"rp33\", status)\n+\n+\n+def test_ltpb():\n+    rpb = np.empty((3, 3), float)\n+    epj = 1666.666\n+    rpb = erfa_ufunc.ltpb(epj)\n+    vvd(rpb[0][0], 0.9967044167723271851, 1e-14, \"ltpb\", \"rpb11\", status)\n+    vvd(rpb[0][1], 0.7437794731203340345e-1, 1e-14, \"ltpb\", \"rpb12\", status)\n+    vvd(rpb[0][2], 0.3237632684841625547e-1, 1e-14, \"ltpb\", \"rpb13\", status)\n+    vvd(rpb[1][0], -0.7437795663437177152e-1, 1e-14, \"ltpb\", \"rpb21\", status)\n+    vvd(rpb[1][1], 0.9972293947500013666, 1e-14, \"ltpb\", \"rpb22\", status)\n+    vvd(rpb[1][2], -0.1205741865911243235e-2, 1e-14, \"ltpb\", \"rpb23\", status)\n+    vvd(rpb[2][0], -0.3237630543224664992e-1, 1e-14, \"ltpb\", \"rpb31\", status)\n+    vvd(rpb[2][1], -0.1206316791076485295e-2, 1e-14, \"ltpb\", \"rpb32\", status)\n+    vvd(rpb[2][2], 0.9994750220222438819, 1e-14, \"ltpb\", \"rpb33\", status)\n+\n+\n+def test_ltpecl():\n+    vec = np.empty((3,), float)\n+    epj = -1500.0\n+    vec = erfa_ufunc.ltpecl(epj)\n+    vvd(vec[0], 0.4768625676477096525e-3, 1e-14, \"ltpecl\", \"vec1\", status)\n+    vvd(vec[1], -0.4052259533091875112, 1e-14, \"ltpecl\", \"vec2\", status)\n+    vvd(vec[2], 0.9142164401096448012, 1e-14, \"ltpecl\", \"vec3\", status)\n+\n+\n+def test_ltpequ():\n+    veq = np.empty((3,), float)\n+    epj = -2500.0\n+    veq = erfa_ufunc.ltpequ(epj)\n+    vvd(veq[0], -0.3586652560237326659, 1e-14, \"ltpequ\", \"veq1\", status)\n+    vvd(veq[1], -0.1996978910771128475, 1e-14, \"ltpequ\", \"veq2\", status)\n+    vvd(veq[2], 0.9118552442250819624, 1e-14, \"ltpequ\", \"veq3\", status)\n+\n+\n+def test_moon98():\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    pv = erfa_ufunc.moon98(2400000.5, 43999.9)\n+    vvd(pv['p'][0], -0.2601295959971044180e-2, 1e-11, \"moon98\", \"x 4\", status)\n+    vvd(pv['p'][1], 0.6139750944302742189e-3, 1e-11, \"moon98\", \"y 4\", status)\n+    vvd(pv['p'][2], 0.2640794528229828909e-3, 1e-11, \"moon98\", \"z 4\", status)\n+    vvd(pv['v'][0], -0.1244321506649895021e-3, 1e-11, \"moon98\", \"xd 4\", status)\n+    vvd(pv['v'][1], -0.5219076942678119398e-3, 1e-11, \"moon98\", \"yd 4\", status)\n+    vvd(pv['v'][2], -0.1716132214378462047e-3, 1e-11, \"moon98\", \"zd 4\", status)\n+\n+\n+def test_num00a():\n+    rmatn = np.empty((3, 3), float)\n+    rmatn = erfa_ufunc.num00a(2400000.5, 53736.0)\n+    vvd(rmatn[0][0], 0.9999999999536227949, 1e-12, \"num00a\", \"11\", status)\n+    vvd(rmatn[0][1], 0.8836238544090873336e-5, 1e-12, \"num00a\", \"12\", status)\n+    vvd(rmatn[0][2], 0.3830835237722400669e-5, 1e-12, \"num00a\", \"13\", status)\n+    vvd(rmatn[1][0], -0.8836082880798569274e-5, 1e-12, \"num00a\", \"21\", status)\n+    vvd(rmatn[1][1], 0.9999999991354655028, 1e-12, \"num00a\", \"22\", status)\n+    vvd(rmatn[1][2], -0.4063240865362499850e-4, 1e-12, \"num00a\", \"23\", status)\n+    vvd(rmatn[2][0], -0.3831194272065995866e-5, 1e-12, \"num00a\", \"31\", status)\n+    vvd(rmatn[2][1], 0.4063237480216291775e-4, 1e-12, \"num00a\", \"32\", status)\n+    vvd(rmatn[2][2], 0.9999999991671660338, 1e-12, \"num00a\", \"33\", status)\n+\n+\n+def test_num00b():\n+    rmatn = np.empty((3, 3), float)\n+    rmatn = erfa_ufunc.num00b(2400000.5, 53736)\n+    vvd(rmatn[0][0], 0.9999999999536069682, 1e-12, \"num00b\", \"11\", status)\n+    vvd(rmatn[0][1], 0.8837746144871248011e-5, 1e-12, \"num00b\", \"12\", status)\n+    vvd(rmatn[0][2], 0.3831488838252202945e-5, 1e-12, \"num00b\", \"13\", status)\n+    vvd(rmatn[1][0], -0.8837590456632304720e-5, 1e-12, \"num00b\", \"21\", status)\n+    vvd(rmatn[1][1], 0.9999999991354692733, 1e-12, \"num00b\", \"22\", status)\n+    vvd(rmatn[1][2], -0.4063198798559591654e-4, 1e-12, \"num00b\", \"23\", status)\n+    vvd(rmatn[2][0], -0.3831847930134941271e-5, 1e-12, \"num00b\", \"31\", status)\n+    vvd(rmatn[2][1], 0.4063195412258168380e-4, 1e-12, \"num00b\", \"32\", status)\n+    vvd(rmatn[2][2], 0.9999999991671806225, 1e-12, \"num00b\", \"33\", status)\n+\n+\n+def test_num06a():\n+    rmatn = np.empty((3, 3), float)\n+    rmatn = erfa_ufunc.num06a(2400000.5, 53736)\n+    vvd(rmatn[0][0], 0.9999999999536227668, 1e-12, \"num06a\", \"11\", status)\n+    vvd(rmatn[0][1], 0.8836241998111535233e-5, 1e-12, \"num06a\", \"12\", status)\n+    vvd(rmatn[0][2], 0.3830834608415287707e-5, 1e-12, \"num06a\", \"13\", status)\n+    vvd(rmatn[1][0], -0.8836086334870740138e-5, 1e-12, \"num06a\", \"21\", status)\n+    vvd(rmatn[1][1], 0.9999999991354657474, 1e-12, \"num06a\", \"22\", status)\n+    vvd(rmatn[1][2], -0.4063240188248455065e-4, 1e-12, \"num06a\", \"23\", status)\n+    vvd(rmatn[2][0], -0.3831193642839398128e-5, 1e-12, \"num06a\", \"31\", status)\n+    vvd(rmatn[2][1], 0.4063236803101479770e-4, 1e-12, \"num06a\", \"32\", status)\n+    vvd(rmatn[2][2], 0.9999999991671663114, 1e-12, \"num06a\", \"33\", status)\n+\n+\n+def test_numat():\n+    rmatn = np.empty((3, 3), float)\n+    epsa = 0.4090789763356509900\n+    dpsi = -0.9630909107115582393e-5\n+    deps = 0.4063239174001678826e-4\n+    rmatn = erfa_ufunc.numat(epsa, dpsi, deps)\n+    vvd(rmatn[0][0], 0.9999999999536227949, 1e-12, \"numat\", \"11\", status)\n+    vvd(rmatn[0][1], 0.8836239320236250577e-5, 1e-12, \"numat\", \"12\", status)\n+    vvd(rmatn[0][2], 0.3830833447458251908e-5, 1e-12, \"numat\", \"13\", status)\n+    vvd(rmatn[1][0], -0.8836083657016688588e-5, 1e-12, \"numat\", \"21\", status)\n+    vvd(rmatn[1][1], 0.9999999991354654959, 1e-12, \"numat\", \"22\", status)\n+    vvd(rmatn[1][2], -0.4063240865361857698e-4, 1e-12, \"numat\", \"23\", status)\n+    vvd(rmatn[2][0], -0.3831192481833385226e-5, 1e-12, \"numat\", \"31\", status)\n+    vvd(rmatn[2][1], 0.4063237480216934159e-4, 1e-12, \"numat\", \"32\", status)\n+    vvd(rmatn[2][2], 0.9999999991671660407, 1e-12, \"numat\", \"33\", status)\n+\n+\n+def test_nut00a():\n+    dpsi, deps = erfa_ufunc.nut00a(2400000.5, 53736.0)\n+    vvd(dpsi, -0.9630909107115518431e-5, 1e-13, \"nut00a\", \"dpsi\", status)\n+    vvd(deps,  0.4063239174001678710e-4, 1e-13, \"nut00a\", \"deps\", status)\n+\n+\n+def test_nut00b():\n+    dpsi, deps = erfa_ufunc.nut00b(2400000.5, 53736.0)\n+    vvd(dpsi, -0.9632552291148362783e-5, 1e-13, \"nut00b\", \"dpsi\", status)\n+    vvd(deps,  0.4063197106621159367e-4, 1e-13, \"nut00b\", \"deps\", status)\n+\n+\n+def test_nut06a():\n+    dpsi, deps = erfa_ufunc.nut06a(2400000.5, 53736.0)\n+    vvd(dpsi, -0.9630912025820308797e-5, 1e-13, \"nut06a\", \"dpsi\", status)\n+    vvd(deps,  0.4063238496887249798e-4, 1e-13, \"nut06a\", \"deps\", status)\n+\n+\n+def test_nut80():\n+    dpsi, deps = erfa_ufunc.nut80(2400000.5, 53736.0)\n+    vvd(dpsi, -0.9643658353226563966e-5, 1e-13, \"nut80\", \"dpsi\", status)\n+    vvd(deps,  0.4060051006879713322e-4, 1e-13, \"nut80\", \"deps\", status)\n+\n+\n+def test_nutm80():\n+    rmatn = np.empty((3, 3), float)\n+    rmatn = erfa_ufunc.nutm80(2400000.5, 53736.0)\n+    vvd(rmatn[0][0], 0.9999999999534999268, 1e-12, \"nutm80\", \"11\", status)\n+    vvd(rmatn[0][1], 0.8847935789636432161e-5, 1e-12, \"nutm80\", \"12\", status)\n+    vvd(rmatn[0][2], 0.3835906502164019142e-5, 1e-12, \"nutm80\", \"13\", status)\n+    vvd(rmatn[1][0], -0.8847780042583435924e-5, 1e-12, \"nutm80\", \"21\", status)\n+    vvd(rmatn[1][1], 0.9999999991366569963, 1e-12, \"nutm80\", \"22\", status)\n+    vvd(rmatn[1][2], -0.4060052702727130809e-4, 1e-12, \"nutm80\", \"23\", status)\n+    vvd(rmatn[2][0], -0.3836265729708478796e-5, 1e-12, \"nutm80\", \"31\", status)\n+    vvd(rmatn[2][1], 0.4060049308612638555e-4, 1e-12, \"nutm80\", \"32\", status)\n+    vvd(rmatn[2][2], 0.9999999991684415129, 1e-12, \"nutm80\", \"33\", status)\n+\n+\n+def test_obl06():\n+    vvd(erfa_ufunc.obl06(2400000.5, 54388.0), 0.4090749229387258204, 1e-14, \"obl06\", \"\", status)\n+\n+\n+def test_obl80():\n+    eps0 = erfa_ufunc.obl80(2400000.5, 54388.0)\n+    vvd(eps0, 0.4090751347643816218, 1e-14, \"obl80\", \"\", status)\n+\n+\n+def test_p06e():\n+    eps0, psia, oma, bpa, bqa, pia, bpia, epsa, chia, za, zetaa, thetaa, pa, gam, phi, psi = erfa_ufunc.p06e(2400000.5, 52541.0)\n+    vvd(eps0, 0.4090926006005828715, 1e-14, \"p06e\", \"eps0\", status)\n+    vvd(psia, 0.6664369630191613431e-3, 1e-14, \"p06e\", \"psia\", status)\n+    vvd(oma , 0.4090925973783255982, 1e-14, \"p06e\", \"oma\", status)\n+    vvd(bpa, 0.5561149371265209445e-6, 1e-14, \"p06e\", \"bpa\", status)\n+    vvd(bqa, -0.6191517193290621270e-5, 1e-14, \"p06e\", \"bqa\", status)\n+    vvd(pia, 0.6216441751884382923e-5, 1e-14, \"p06e\", \"pia\", status)\n+    vvd(bpia, 3.052014180023779882, 1e-14, \"p06e\", \"bpia\", status)\n+    vvd(epsa, 0.4090864054922431688, 1e-14, \"p06e\", \"epsa\", status)\n+    vvd(chia, 0.1387703379530915364e-5, 1e-14, \"p06e\", \"chia\", status)\n+    vvd(za, 0.2921789846651790546e-3, 1e-14, \"p06e\", \"za\", status)\n+    vvd(zetaa, 0.3178773290332009310e-3, 1e-14, \"p06e\", \"zetaa\", status)\n+    vvd(thetaa, 0.2650932701657497181e-3, 1e-14, \"p06e\", \"thetaa\", status)\n+    vvd(pa, 0.6651637681381016288e-3, 1e-14, \"p06e\", \"pa\", status)\n+    vvd(gam, 0.1398077115963754987e-5, 1e-14, \"p06e\", \"gam\", status)\n+    vvd(phi, 0.4090864090837462602, 1e-14, \"p06e\", \"phi\", status)\n+    vvd(psi, 0.6664464807480920325e-3, 1e-14, \"p06e\", \"psi\", status)\n+\n+\n+def test_p2pv():\n+    p = np.empty((3,), float)\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    p[0] = 0.25\n+    p[1] = 1.2\n+    p[2] = 3.0\n+    pv['p'][0] = 0.3\n+    pv['p'][1] = 1.2\n+    pv['p'][2] = -2.5\n+    pv['v'][0] = -0.5\n+    pv['v'][1] = 3.1\n+    pv['v'][2] = 0.9\n+    pv = erfa_ufunc.p2pv(p)\n+    vvd(pv['p'][0], 0.25, 0.0, \"p2pv\", \"p1\", status)\n+    vvd(pv['p'][1], 1.2,  0.0, \"p2pv\", \"p2\", status)\n+    vvd(pv['p'][2], 3.0,  0.0, \"p2pv\", \"p3\", status)\n+    vvd(pv['v'][0], 0.0,  0.0, \"p2pv\", \"v1\", status)\n+    vvd(pv['v'][1], 0.0,  0.0, \"p2pv\", \"v2\", status)\n+    vvd(pv['v'][2], 0.0,  0.0, \"p2pv\", \"v3\", status)\n+\n+\n+def test_p2s():\n+    p = np.empty((3,), float)\n+    p[0] = 100.0\n+    p[1] = -50.0\n+    p[2] = 25.0\n+    theta, phi, r = erfa_ufunc.p2s(p)\n+    vvd(theta, -0.4636476090008061162, 1e-12, \"p2s\", \"theta\", status)\n+    vvd(phi, 0.2199879773954594463, 1e-12, \"p2s\", \"phi\", status)\n+    vvd(r, 114.5643923738960002, 1e-9, \"p2s\", \"r\", status)\n+\n+\n+def test_pap():\n+    a = np.empty((3,), float)\n+    b = np.empty((3,), float)\n+    a[0] = 1.0\n+    a[1] = 0.1\n+    a[2] = 0.2\n+    b[0] = -3.0\n+    b[1] = 1e-3\n+    b[2] = 0.2\n+    theta = erfa_ufunc.pap(a, b)\n+    vvd(theta, 0.3671514267841113674, 1e-12, \"pap\", \"\", status)\n+\n+\n+def test_pas():\n+    al = 1.0\n+    ap = 0.1\n+    bl = 0.2\n+    bp = -1.0\n+    theta = erfa_ufunc.pas(al, ap, bl, bp)\n+    vvd(theta, -2.724544922932270424, 1e-12, \"pas\", \"\", status)\n+\n+\n+def test_pb06():\n+    bzeta, bz, btheta = erfa_ufunc.pb06(2400000.5, 50123.9999)\n+    vvd(bzeta, -0.5092634016326478238e-3, 1e-12, \"pb06\", \"bzeta\", status)\n+    vvd(bz, -0.3602772060566044413e-3, 1e-12, \"pb06\", \"bz\", status)\n+    vvd(btheta, -0.3779735537167811177e-3, 1e-12, \"pb06\", \"btheta\", status)\n+\n+\n+def test_pdp():\n+    a = np.empty((3,), float)\n+    b = np.empty((3,), float)\n+    a[0] = 2.0\n+    a[1] = 2.0\n+    a[2] = 3.0\n+    b[0] = 1.0\n+    b[1] = 3.0\n+    b[2] = 4.0\n+    adb = erfa_ufunc.pdp(a, b)\n+    vvd(adb, 20, 1e-12, \"pdp\", \"\", status)\n+\n+\n+def test_pfw06():\n+    gamb, phib, psib, epsa = erfa_ufunc.pfw06(2400000.5, 50123.9999)\n+    vvd(gamb, -0.2243387670997995690e-5, 1e-16, \"pfw06\", \"gamb\", status)\n+    vvd(phib,  0.4091014602391312808, 1e-12, \"pfw06\", \"phib\", status)\n+    vvd(psib, -0.9501954178013031895e-3, 1e-14, \"pfw06\", \"psib\", status)\n+    vvd(epsa,  0.4091014316587367491, 1e-12, \"pfw06\", \"epsa\", status)\n+\n+\n+def test_plan94():\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    pv, j = erfa_ufunc.plan94(2400000.5, 1e6, 0)\n+    vvd(pv['p'][0], 0.0, 0.0, \"plan94\", \"x 1\", status)\n+    vvd(pv['p'][1], 0.0, 0.0, \"plan94\", \"y 1\", status)\n+    vvd(pv['p'][2], 0.0, 0.0, \"plan94\", \"z 1\", status)\n+    vvd(pv['v'][0], 0.0, 0.0, \"plan94\", \"xd 1\", status)\n+    vvd(pv['v'][1], 0.0, 0.0, \"plan94\", \"yd 1\", status)\n+    vvd(pv['v'][2], 0.0, 0.0, \"plan94\", \"zd 1\", status)\n+    viv(j, -1, \"plan94\", \"j 1\", status)\n+    pv, j = erfa_ufunc.plan94(2400000.5, 1e6, 10)\n+    viv(j, -1, \"plan94\", \"j 2\", status)\n+    pv, j = erfa_ufunc.plan94(2400000.5, -320000, 3)\n+    vvd(pv['p'][0], 0.9308038666832975759, 1e-11, \"plan94\", \"x 3\", status)\n+    vvd(pv['p'][1], 0.3258319040261346000, 1e-11, \"plan94\", \"y 3\", status)\n+    vvd(pv['p'][2], 0.1422794544481140560, 1e-11, \"plan94\", \"z 3\", status)\n+    vvd(pv['v'][0], -0.6429458958255170006e-2, 1e-11, \"plan94\", \"xd 3\", status)\n+    vvd(pv['v'][1], 0.1468570657704237764e-1, 1e-11, \"plan94\", \"yd 3\", status)\n+    vvd(pv['v'][2], 0.6406996426270981189e-2, 1e-11, \"plan94\", \"zd 3\", status)\n+    viv(j, 1, \"plan94\", \"j 3\", status)\n+    pv, j = erfa_ufunc.plan94(2400000.5, 43999.9, 1)\n+    vvd(pv['p'][0], 0.2945293959257430832, 1e-11, \"plan94\", \"x 4\", status)\n+    vvd(pv['p'][1], -0.2452204176601049596, 1e-11, \"plan94\", \"y 4\", status)\n+    vvd(pv['p'][2], -0.1615427700571978153, 1e-11, \"plan94\", \"z 4\", status)\n+    vvd(pv['v'][0], 0.1413867871404614441e-1, 1e-11, \"plan94\", \"xd 4\", status)\n+    vvd(pv['v'][1], 0.1946548301104706582e-1, 1e-11, \"plan94\", \"yd 4\", status)\n+    vvd(pv['v'][2], 0.8929809783898904786e-2, 1e-11, \"plan94\", \"zd 4\", status)\n+    viv(j, 0, \"plan94\", \"j 4\", status)\n+\n+\n+def test_pm():\n+    p = np.empty((3,), float)\n+    p[0] = 0.3\n+    p[1] = 1.2\n+    p[2] = -2.5\n+    r = erfa_ufunc.pm(p)\n+    vvd(r, 2.789265136196270604, 1e-12, \"pm\", \"\", status)\n+\n+\n+def test_pmat00():\n+    rbp = np.empty((3, 3), float)\n+    rbp = erfa_ufunc.pmat00(2400000.5, 50123.9999)\n+    vvd(rbp[0][0], 0.9999995505175087260, 1e-12, \"pmat00\", \"11\", status)\n+    vvd(rbp[0][1], 0.8695405883617884705e-3, 1e-14, \"pmat00\", \"12\", status)\n+    vvd(rbp[0][2], 0.3779734722239007105e-3, 1e-14, \"pmat00\", \"13\", status)\n+    vvd(rbp[1][0], -0.8695405990410863719e-3, 1e-14, \"pmat00\", \"21\", status)\n+    vvd(rbp[1][1], 0.9999996219494925900, 1e-12, \"pmat00\", \"22\", status)\n+    vvd(rbp[1][2], -0.1360775820404982209e-6, 1e-14, \"pmat00\", \"23\", status)\n+    vvd(rbp[2][0], -0.3779734476558184991e-3, 1e-14, \"pmat00\", \"31\", status)\n+    vvd(rbp[2][1], -0.1925857585832024058e-6, 1e-14, \"pmat00\", \"32\", status)\n+    vvd(rbp[2][2], 0.9999999285680153377, 1e-12, \"pmat00\", \"33\", status)\n+\n+\n+def test_pmat06():\n+    rbp = np.empty((3, 3), float)\n+    rbp = erfa_ufunc.pmat06(2400000.5, 50123.9999)\n+    vvd(rbp[0][0], 0.9999995505176007047, 1e-12, \"pmat06\", \"11\", status)\n+    vvd(rbp[0][1], 0.8695404617348208406e-3, 1e-14, \"pmat06\", \"12\", status)\n+    vvd(rbp[0][2], 0.3779735201865589104e-3, 1e-14, \"pmat06\", \"13\", status)\n+    vvd(rbp[1][0], -0.8695404723772031414e-3, 1e-14, \"pmat06\", \"21\", status)\n+    vvd(rbp[1][1], 0.9999996219496027161, 1e-12, \"pmat06\", \"22\", status)\n+    vvd(rbp[1][2], -0.1361752497080270143e-6, 1e-14, \"pmat06\", \"23\", status)\n+    vvd(rbp[2][0], -0.3779734957034089490e-3, 1e-14, \"pmat06\", \"31\", status)\n+    vvd(rbp[2][1], -0.1924880847894457113e-6, 1e-14, \"pmat06\", \"32\", status)\n+    vvd(rbp[2][2], 0.9999999285679971958, 1e-12, \"pmat06\", \"33\", status)\n+\n+\n+def test_pmat76():\n+    rmatp = np.empty((3, 3), float)\n+    rmatp = erfa_ufunc.pmat76(2400000.5, 50123.9999)\n+    vvd(rmatp[0][0], 0.9999995504328350733, 1e-12, \"pmat76\", \"11\", status)\n+    vvd(rmatp[0][1], 0.8696632209480960785e-3, 1e-14, \"pmat76\", \"12\", status)\n+    vvd(rmatp[0][2], 0.3779153474959888345e-3, 1e-14, \"pmat76\", \"13\", status)\n+    vvd(rmatp[1][0], -0.8696632209485112192e-3, 1e-14, \"pmat76\", \"21\", status)\n+    vvd(rmatp[1][1], 0.9999996218428560614, 1e-12, \"pmat76\", \"22\", status)\n+    vvd(rmatp[1][2], -0.1643284776111886407e-6, 1e-14, \"pmat76\", \"23\", status)\n+    vvd(rmatp[2][0], -0.3779153474950335077e-3, 1e-14, \"pmat76\", \"31\", status)\n+    vvd(rmatp[2][1], -0.1643306746147366896e-6, 1e-14, \"pmat76\", \"32\", status)\n+    vvd(rmatp[2][2], 0.9999999285899790119, 1e-12, \"pmat76\", \"33\", status)\n+\n+\n+def test_pmp():\n+    a = np.empty((3,), float)\n+    b = np.empty((3,), float)\n+    amb = np.empty((3,), float)\n+    a[0] = 2.0\n+    a[1] = 2.0\n+    a[2] = 3.0\n+    b[0] = 1.0\n+    b[1] = 3.0\n+    b[2] = 4.0\n+    amb = erfa_ufunc.pmp(a, b)\n+    vvd(amb[0],  1.0, 1e-12, \"pmp\", \"0\", status)\n+    vvd(amb[1], -1.0, 1e-12, \"pmp\", \"1\", status)\n+    vvd(amb[2], -1.0, 1e-12, \"pmp\", \"2\", status)\n+\n+\n+def test_pmpx():\n+    pob = np.empty((3,), float)\n+    pco = np.empty((3,), float)\n+    rc = 1.234\n+    dc = 0.789\n+    pr = 1e-5\n+    pd = -2e-5\n+    px = 1e-2\n+    rv = 10.0\n+    pmt = 8.75\n+    pob[0] = 0.9\n+    pob[1] = 0.4\n+    pob[2] = 0.1\n+    pco = erfa_ufunc.pmpx(rc, dc, pr, pd, px, rv, pmt, pob)\n+    vvd(pco[0], 0.2328137623960308438, 1e-12, \"pmpx\", \"1\", status)\n+    vvd(pco[1], 0.6651097085397855328, 1e-12, \"pmpx\", \"2\", status)\n+    vvd(pco[2], 0.7095257765896359837, 1e-12, \"pmpx\", \"3\", status)\n+\n+\n+def test_pmsafe():\n+    ra1 = 1.234\n+    dec1 = 0.789\n+    pmr1 = 1e-5\n+    pmd1 = -2e-5\n+    px1 = 1e-2\n+    rv1 = 10.0\n+    ep1a = 2400000.5\n+    ep1b = 48348.5625\n+    ep2a = 2400000.5\n+    ep2b = 51544.5\n+    ra2, dec2, pmr2, pmd2, px2, rv2, j = erfa_ufunc.pmsafe(ra1, dec1, pmr1, pmd1, px1, rv1, ep1a, ep1b, ep2a, ep2b)\n+    vvd(ra2, 1.234087484501017061, 1e-12, \"pmsafe\", \"ra2\", status)\n+    vvd(dec2, 0.7888249982450468567, 1e-12, \"pmsafe\", \"dec2\", status)\n+    vvd(pmr2, 0.9996457663586073988e-5, 1e-12, \"pmsafe\", \"pmr2\", status)\n+    vvd(pmd2, -0.2000040085106754565e-4, 1e-16, \"pmsafe\", \"pmd2\", status)\n+    vvd(px2, 0.9999997295356830666e-2, 1e-12, \"pmsafe\", \"px2\", status)\n+    vvd(rv2, 10.38468380293920069, 1e-10, \"pmsafe\", \"rv2\", status)\n+    viv ( j, 0, \"pmsafe\", \"j\", status)\n+\n+\n+def test_pn():\n+    p = np.empty((3,), float)\n+    u = np.empty((3,), float)\n+    p[0] = 0.3\n+    p[1] = 1.2\n+    p[2] = -2.5\n+    r, u = erfa_ufunc.pn(p)\n+    vvd(r, 2.789265136196270604, 1e-12, \"pn\", \"r\", status)\n+    vvd(u[0], 0.1075552109073112058, 1e-12, \"pn\", \"u1\", status)\n+    vvd(u[1], 0.4302208436292448232, 1e-12, \"pn\", \"u2\", status)\n+    vvd(u[2], -0.8962934242275933816, 1e-12, \"pn\", \"u3\", status)\n+\n+\n+def test_pn00():\n+    rb = np.empty((3, 3), float)\n+    rp = np.empty((3, 3), float)\n+    rbp = np.empty((3, 3), float)\n+    rn = np.empty((3, 3), float)\n+    rbpn = np.empty((3, 3), float)\n+    dpsi = -0.9632552291149335877e-5\n+    deps = 0.4063197106621141414e-4\n+    epsa, rb, rp, rbp, rn, rbpn = erfa_ufunc.pn00(2400000.5, 53736.0, dpsi, deps)\n+    vvd(epsa, 0.4090791789404229916, 1e-12, \"pn00\", \"epsa\", status)\n+    vvd(rb[0][0], 0.9999999999999942498, 1e-12, \"pn00\", \"rb11\", status)\n+    vvd(rb[0][1], -0.7078279744199196626e-7, 1e-18, \"pn00\", \"rb12\", status)\n+    vvd(rb[0][2], 0.8056217146976134152e-7, 1e-18, \"pn00\", \"rb13\", status)\n+    vvd(rb[1][0], 0.7078279477857337206e-7, 1e-18, \"pn00\", \"rb21\", status)\n+    vvd(rb[1][1], 0.9999999999999969484, 1e-12, \"pn00\", \"rb22\", status)\n+    vvd(rb[1][2], 0.3306041454222136517e-7, 1e-18, \"pn00\", \"rb23\", status)\n+    vvd(rb[2][0], -0.8056217380986972157e-7, 1e-18, \"pn00\", \"rb31\", status)\n+    vvd(rb[2][1], -0.3306040883980552500e-7, 1e-18, \"pn00\", \"rb32\", status)\n+    vvd(rb[2][2], 0.9999999999999962084, 1e-12, \"pn00\", \"rb33\", status)\n+    vvd(rp[0][0], 0.9999989300532289018, 1e-12, \"pn00\", \"rp11\", status)\n+    vvd(rp[0][1], -0.1341647226791824349e-2, 1e-14, \"pn00\", \"rp12\", status)\n+    vvd(rp[0][2], -0.5829880927190296547e-3, 1e-14, \"pn00\", \"rp13\", status)\n+    vvd(rp[1][0], 0.1341647231069759008e-2, 1e-14, \"pn00\", \"rp21\", status)\n+    vvd(rp[1][1], 0.9999990999908750433, 1e-12, \"pn00\", \"rp22\", status)\n+    vvd(rp[1][2], -0.3837444441583715468e-6, 1e-14, \"pn00\", \"rp23\", status)\n+    vvd(rp[2][0], 0.5829880828740957684e-3, 1e-14, \"pn00\", \"rp31\", status)\n+    vvd(rp[2][1], -0.3984203267708834759e-6, 1e-14, \"pn00\", \"rp32\", status)\n+    vvd(rp[2][2], 0.9999998300623538046, 1e-12, \"pn00\", \"rp33\", status)\n+    vvd(rbp[0][0], 0.9999989300052243993, 1e-12, \"pn00\", \"rbp11\", status)\n+    vvd(rbp[0][1], -0.1341717990239703727e-2, 1e-14, \"pn00\", \"rbp12\", status)\n+    vvd(rbp[0][2], -0.5829075749891684053e-3, 1e-14, \"pn00\", \"rbp13\", status)\n+    vvd(rbp[1][0], 0.1341718013831739992e-2, 1e-14, \"pn00\", \"rbp21\", status)\n+    vvd(rbp[1][1], 0.9999990998959191343, 1e-12, \"pn00\", \"rbp22\", status)\n+    vvd(rbp[1][2], -0.3505759733565421170e-6, 1e-14, \"pn00\", \"rbp23\", status)\n+    vvd(rbp[2][0], 0.5829075206857717883e-3, 1e-14, \"pn00\", \"rbp31\", status)\n+    vvd(rbp[2][1], -0.4315219955198608970e-6, 1e-14, \"pn00\", \"rbp32\", status)\n+    vvd(rbp[2][2], 0.9999998301093036269, 1e-12, \"pn00\", \"rbp33\", status)\n+    vvd(rn[0][0], 0.9999999999536069682, 1e-12, \"pn00\", \"rn11\", status)\n+    vvd(rn[0][1], 0.8837746144872140812e-5, 1e-16, \"pn00\", \"rn12\", status)\n+    vvd(rn[0][2], 0.3831488838252590008e-5, 1e-16, \"pn00\", \"rn13\", status)\n+    vvd(rn[1][0], -0.8837590456633197506e-5, 1e-16, \"pn00\", \"rn21\", status)\n+    vvd(rn[1][1], 0.9999999991354692733, 1e-12, \"pn00\", \"rn22\", status)\n+    vvd(rn[1][2], -0.4063198798559573702e-4, 1e-16, \"pn00\", \"rn23\", status)\n+    vvd(rn[2][0], -0.3831847930135328368e-5, 1e-16, \"pn00\", \"rn31\", status)\n+    vvd(rn[2][1], 0.4063195412258150427e-4, 1e-16, \"pn00\", \"rn32\", status)\n+    vvd(rn[2][2], 0.9999999991671806225, 1e-12, \"pn00\", \"rn33\", status)\n+    vvd(rbpn[0][0], 0.9999989440499982806, 1e-12, \"pn00\", \"rbpn11\", status)\n+    vvd(rbpn[0][1], -0.1332880253640848301e-2, 1e-14, \"pn00\", \"rbpn12\", status)\n+    vvd(rbpn[0][2], -0.5790760898731087295e-3, 1e-14, \"pn00\", \"rbpn13\", status)\n+    vvd(rbpn[1][0], 0.1332856746979948745e-2, 1e-14, \"pn00\", \"rbpn21\", status)\n+    vvd(rbpn[1][1], 0.9999991109064768883, 1e-12, \"pn00\", \"rbpn22\", status)\n+    vvd(rbpn[1][2], -0.4097740555723063806e-4, 1e-14, \"pn00\", \"rbpn23\", status)\n+    vvd(rbpn[2][0], 0.5791301929950205000e-3, 1e-14, \"pn00\", \"rbpn31\", status)\n+    vvd(rbpn[2][1], 0.4020553681373702931e-4, 1e-14, \"pn00\", \"rbpn32\", status)\n+    vvd(rbpn[2][2], 0.9999998314958529887, 1e-12, \"pn00\", \"rbpn33\", status)\n+\n+\n+def test_pn00a():\n+    rb = np.empty((3, 3), float)\n+    rp = np.empty((3, 3), float)\n+    rbp = np.empty((3, 3), float)\n+    rn = np.empty((3, 3), float)\n+    rbpn = np.empty((3, 3), float)\n+    dpsi, deps, epsa, rb, rp, rbp, rn, rbpn = erfa_ufunc.pn00a(2400000.5, 53736.0)\n+    vvd(dpsi, -0.9630909107115518431e-5, 1e-12, \"pn00a\", \"dpsi\", status)\n+    vvd(deps,  0.4063239174001678710e-4, 1e-12, \"pn00a\", \"deps\", status)\n+    vvd(epsa,  0.4090791789404229916, 1e-12, \"pn00a\", \"epsa\", status)\n+    vvd(rb[0][0], 0.9999999999999942498, 1e-12, \"pn00a\", \"rb11\", status)\n+    vvd(rb[0][1], -0.7078279744199196626e-7, 1e-16, \"pn00a\", \"rb12\", status)\n+    vvd(rb[0][2], 0.8056217146976134152e-7, 1e-16, \"pn00a\", \"rb13\", status)\n+    vvd(rb[1][0], 0.7078279477857337206e-7, 1e-16, \"pn00a\", \"rb21\", status)\n+    vvd(rb[1][1], 0.9999999999999969484, 1e-12, \"pn00a\", \"rb22\", status)\n+    vvd(rb[1][2], 0.3306041454222136517e-7, 1e-16, \"pn00a\", \"rb23\", status)\n+    vvd(rb[2][0], -0.8056217380986972157e-7, 1e-16, \"pn00a\", \"rb31\", status)\n+    vvd(rb[2][1], -0.3306040883980552500e-7, 1e-16, \"pn00a\", \"rb32\", status)\n+    vvd(rb[2][2], 0.9999999999999962084, 1e-12, \"pn00a\", \"rb33\", status)\n+    vvd(rp[0][0], 0.9999989300532289018, 1e-12, \"pn00a\", \"rp11\", status)\n+    vvd(rp[0][1], -0.1341647226791824349e-2, 1e-14, \"pn00a\", \"rp12\", status)\n+    vvd(rp[0][2], -0.5829880927190296547e-3, 1e-14, \"pn00a\", \"rp13\", status)\n+    vvd(rp[1][0], 0.1341647231069759008e-2, 1e-14, \"pn00a\", \"rp21\", status)\n+    vvd(rp[1][1], 0.9999990999908750433, 1e-12, \"pn00a\", \"rp22\", status)\n+    vvd(rp[1][2], -0.3837444441583715468e-6, 1e-14, \"pn00a\", \"rp23\", status)\n+    vvd(rp[2][0], 0.5829880828740957684e-3, 1e-14, \"pn00a\", \"rp31\", status)\n+    vvd(rp[2][1], -0.3984203267708834759e-6, 1e-14, \"pn00a\", \"rp32\", status)\n+    vvd(rp[2][2], 0.9999998300623538046, 1e-12, \"pn00a\", \"rp33\", status)\n+    vvd(rbp[0][0], 0.9999989300052243993, 1e-12, \"pn00a\", \"rbp11\", status)\n+    vvd(rbp[0][1], -0.1341717990239703727e-2, 1e-14, \"pn00a\", \"rbp12\", status)\n+    vvd(rbp[0][2], -0.5829075749891684053e-3, 1e-14, \"pn00a\", \"rbp13\", status)\n+    vvd(rbp[1][0], 0.1341718013831739992e-2, 1e-14, \"pn00a\", \"rbp21\", status)\n+    vvd(rbp[1][1], 0.9999990998959191343, 1e-12, \"pn00a\", \"rbp22\", status)\n+    vvd(rbp[1][2], -0.3505759733565421170e-6, 1e-14, \"pn00a\", \"rbp23\", status)\n+    vvd(rbp[2][0], 0.5829075206857717883e-3, 1e-14, \"pn00a\", \"rbp31\", status)\n+    vvd(rbp[2][1], -0.4315219955198608970e-6, 1e-14, \"pn00a\", \"rbp32\", status)\n+    vvd(rbp[2][2], 0.9999998301093036269, 1e-12, \"pn00a\", \"rbp33\", status)\n+    vvd(rn[0][0], 0.9999999999536227949, 1e-12, \"pn00a\", \"rn11\", status)\n+    vvd(rn[0][1], 0.8836238544090873336e-5, 1e-14, \"pn00a\", \"rn12\", status)\n+    vvd(rn[0][2], 0.3830835237722400669e-5, 1e-14, \"pn00a\", \"rn13\", status)\n+    vvd(rn[1][0], -0.8836082880798569274e-5, 1e-14, \"pn00a\", \"rn21\", status)\n+    vvd(rn[1][1], 0.9999999991354655028, 1e-12, \"pn00a\", \"rn22\", status)\n+    vvd(rn[1][2], -0.4063240865362499850e-4, 1e-14, \"pn00a\", \"rn23\", status)\n+    vvd(rn[2][0], -0.3831194272065995866e-5, 1e-14, \"pn00a\", \"rn31\", status)\n+    vvd(rn[2][1], 0.4063237480216291775e-4, 1e-14, \"pn00a\", \"rn32\", status)\n+    vvd(rn[2][2], 0.9999999991671660338, 1e-12, \"pn00a\", \"rn33\", status)\n+    vvd(rbpn[0][0], 0.9999989440476103435, 1e-12, \"pn00a\", \"rbpn11\", status)\n+    vvd(rbpn[0][1], -0.1332881761240011763e-2, 1e-14, \"pn00a\", \"rbpn12\", status)\n+    vvd(rbpn[0][2], -0.5790767434730085751e-3, 1e-14, \"pn00a\", \"rbpn13\", status)\n+    vvd(rbpn[1][0], 0.1332858254308954658e-2, 1e-14, \"pn00a\", \"rbpn21\", status)\n+    vvd(rbpn[1][1], 0.9999991109044505577, 1e-12, \"pn00a\", \"rbpn22\", status)\n+    vvd(rbpn[1][2], -0.4097782710396580452e-4, 1e-14, \"pn00a\", \"rbpn23\", status)\n+    vvd(rbpn[2][0], 0.5791308472168152904e-3, 1e-14, \"pn00a\", \"rbpn31\", status)\n+    vvd(rbpn[2][1], 0.4020595661591500259e-4, 1e-14, \"pn00a\", \"rbpn32\", status)\n+    vvd(rbpn[2][2], 0.9999998314954572304, 1e-12, \"pn00a\", \"rbpn33\", status)\n+\n+\n+def test_pn00b():\n+    rb = np.empty((3, 3), float)\n+    rp = np.empty((3, 3), float)\n+    rbp = np.empty((3, 3), float)\n+    rn = np.empty((3, 3), float)\n+    rbpn = np.empty((3, 3), float)\n+    dpsi, deps, epsa, rb, rp, rbp, rn, rbpn = erfa_ufunc.pn00b(2400000.5, 53736.0)\n+    vvd(dpsi, -0.9632552291148362783e-5, 1e-12, \"pn00b\", \"dpsi\", status)\n+    vvd(deps,  0.4063197106621159367e-4, 1e-12, \"pn00b\", \"deps\", status)\n+    vvd(epsa,  0.4090791789404229916, 1e-12, \"pn00b\", \"epsa\", status)\n+    vvd(rb[0][0], 0.9999999999999942498, 1e-12, \"pn00b\", \"rb11\", status)\n+    vvd(rb[0][1], -0.7078279744199196626e-7, 1e-16, \"pn00b\", \"rb12\", status)\n+    vvd(rb[0][2], 0.8056217146976134152e-7, 1e-16, \"pn00b\", \"rb13\", status)\n+    vvd(rb[1][0], 0.7078279477857337206e-7, 1e-16, \"pn00b\", \"rb21\", status)\n+    vvd(rb[1][1], 0.9999999999999969484, 1e-12, \"pn00b\", \"rb22\", status)\n+    vvd(rb[1][2], 0.3306041454222136517e-7, 1e-16, \"pn00b\", \"rb23\", status)\n+    vvd(rb[2][0], -0.8056217380986972157e-7, 1e-16, \"pn00b\", \"rb31\", status)\n+    vvd(rb[2][1], -0.3306040883980552500e-7, 1e-16, \"pn00b\", \"rb32\", status)\n+    vvd(rb[2][2], 0.9999999999999962084, 1e-12, \"pn00b\", \"rb33\", status)\n+    vvd(rp[0][0], 0.9999989300532289018, 1e-12, \"pn00b\", \"rp11\", status)\n+    vvd(rp[0][1], -0.1341647226791824349e-2, 1e-14, \"pn00b\", \"rp12\", status)\n+    vvd(rp[0][2], -0.5829880927190296547e-3, 1e-14, \"pn00b\", \"rp13\", status)\n+    vvd(rp[1][0], 0.1341647231069759008e-2, 1e-14, \"pn00b\", \"rp21\", status)\n+    vvd(rp[1][1], 0.9999990999908750433, 1e-12, \"pn00b\", \"rp22\", status)\n+    vvd(rp[1][2], -0.3837444441583715468e-6, 1e-14, \"pn00b\", \"rp23\", status)\n+    vvd(rp[2][0], 0.5829880828740957684e-3, 1e-14, \"pn00b\", \"rp31\", status)\n+    vvd(rp[2][1], -0.3984203267708834759e-6, 1e-14, \"pn00b\", \"rp32\", status)\n+    vvd(rp[2][2], 0.9999998300623538046, 1e-12, \"pn00b\", \"rp33\", status)\n+    vvd(rbp[0][0], 0.9999989300052243993, 1e-12, \"pn00b\", \"rbp11\", status)\n+    vvd(rbp[0][1], -0.1341717990239703727e-2, 1e-14, \"pn00b\", \"rbp12\", status)\n+    vvd(rbp[0][2], -0.5829075749891684053e-3, 1e-14, \"pn00b\", \"rbp13\", status)\n+    vvd(rbp[1][0], 0.1341718013831739992e-2, 1e-14, \"pn00b\", \"rbp21\", status)\n+    vvd(rbp[1][1], 0.9999990998959191343, 1e-12, \"pn00b\", \"rbp22\", status)\n+    vvd(rbp[1][2], -0.3505759733565421170e-6, 1e-14, \"pn00b\", \"rbp23\", status)\n+    vvd(rbp[2][0], 0.5829075206857717883e-3, 1e-14, \"pn00b\", \"rbp31\", status)\n+    vvd(rbp[2][1], -0.4315219955198608970e-6, 1e-14, \"pn00b\", \"rbp32\", status)\n+    vvd(rbp[2][2], 0.9999998301093036269, 1e-12, \"pn00b\", \"rbp33\", status)\n+    vvd(rn[0][0], 0.9999999999536069682, 1e-12, \"pn00b\", \"rn11\", status)\n+    vvd(rn[0][1], 0.8837746144871248011e-5, 1e-14, \"pn00b\", \"rn12\", status)\n+    vvd(rn[0][2], 0.3831488838252202945e-5, 1e-14, \"pn00b\", \"rn13\", status)\n+    vvd(rn[1][0], -0.8837590456632304720e-5, 1e-14, \"pn00b\", \"rn21\", status)\n+    vvd(rn[1][1], 0.9999999991354692733, 1e-12, \"pn00b\", \"rn22\", status)\n+    vvd(rn[1][2], -0.4063198798559591654e-4, 1e-14, \"pn00b\", \"rn23\", status)\n+    vvd(rn[2][0], -0.3831847930134941271e-5, 1e-14, \"pn00b\", \"rn31\", status)\n+    vvd(rn[2][1], 0.4063195412258168380e-4, 1e-14, \"pn00b\", \"rn32\", status)\n+    vvd(rn[2][2], 0.9999999991671806225, 1e-12, \"pn00b\", \"rn33\", status)\n+    vvd(rbpn[0][0], 0.9999989440499982806, 1e-12, \"pn00b\", \"rbpn11\", status)\n+    vvd(rbpn[0][1], -0.1332880253640849194e-2, 1e-14, \"pn00b\", \"rbpn12\", status)\n+    vvd(rbpn[0][2], -0.5790760898731091166e-3, 1e-14, \"pn00b\", \"rbpn13\", status)\n+    vvd(rbpn[1][0], 0.1332856746979949638e-2, 1e-14, \"pn00b\", \"rbpn21\", status)\n+    vvd(rbpn[1][1], 0.9999991109064768883, 1e-12, \"pn00b\", \"rbpn22\", status)\n+    vvd(rbpn[1][2], -0.4097740555723081811e-4, 1e-14, \"pn00b\", \"rbpn23\", status)\n+    vvd(rbpn[2][0], 0.5791301929950208873e-3, 1e-14, \"pn00b\", \"rbpn31\", status)\n+    vvd(rbpn[2][1], 0.4020553681373720832e-4, 1e-14, \"pn00b\", \"rbpn32\", status)\n+    vvd(rbpn[2][2], 0.9999998314958529887, 1e-12, \"pn00b\", \"rbpn33\", status)\n+\n+\n+def test_pn06():\n+    rb = np.empty((3, 3), float)\n+    rp = np.empty((3, 3), float)\n+    rbp = np.empty((3, 3), float)\n+    rn = np.empty((3, 3), float)\n+    rbpn = np.empty((3, 3), float)\n+    dpsi = -0.9632552291149335877e-5\n+    deps = 0.4063197106621141414e-4\n+    epsa, rb, rp, rbp, rn, rbpn = erfa_ufunc.pn06(2400000.5, 53736.0, dpsi, deps)\n+    vvd(epsa, 0.4090789763356509926, 1e-12, \"pn06\", \"epsa\", status)\n+    vvd(rb[0][0], 0.9999999999999942497, 1e-12, \"pn06\", \"rb11\", status)\n+    vvd(rb[0][1], -0.7078368960971557145e-7, 1e-14, \"pn06\", \"rb12\", status)\n+    vvd(rb[0][2], 0.8056213977613185606e-7, 1e-14, \"pn06\", \"rb13\", status)\n+    vvd(rb[1][0], 0.7078368694637674333e-7, 1e-14, \"pn06\", \"rb21\", status)\n+    vvd(rb[1][1], 0.9999999999999969484, 1e-12, \"pn06\", \"rb22\", status)\n+    vvd(rb[1][2], 0.3305943742989134124e-7, 1e-14, \"pn06\", \"rb23\", status)\n+    vvd(rb[2][0], -0.8056214211620056792e-7, 1e-14, \"pn06\", \"rb31\", status)\n+    vvd(rb[2][1], -0.3305943172740586950e-7, 1e-14, \"pn06\", \"rb32\", status)\n+    vvd(rb[2][2], 0.9999999999999962084, 1e-12, \"pn06\", \"rb33\", status)\n+    vvd(rp[0][0], 0.9999989300536854831, 1e-12, \"pn06\", \"rp11\", status)\n+    vvd(rp[0][1], -0.1341646886204443795e-2, 1e-14, \"pn06\", \"rp12\", status)\n+    vvd(rp[0][2], -0.5829880933488627759e-3, 1e-14, \"pn06\", \"rp13\", status)\n+    vvd(rp[1][0], 0.1341646890569782183e-2, 1e-14, \"pn06\", \"rp21\", status)\n+    vvd(rp[1][1], 0.9999990999913319321, 1e-12, \"pn06\", \"rp22\", status)\n+    vvd(rp[1][2], -0.3835944216374477457e-6, 1e-14, \"pn06\", \"rp23\", status)\n+    vvd(rp[2][0], 0.5829880833027867368e-3, 1e-14, \"pn06\", \"rp31\", status)\n+    vvd(rp[2][1], -0.3985701514686976112e-6, 1e-14, \"pn06\", \"rp32\", status)\n+    vvd(rp[2][2], 0.9999998300623534950, 1e-12, \"pn06\", \"rp33\", status)\n+    vvd(rbp[0][0], 0.9999989300056797893, 1e-12, \"pn06\", \"rbp11\", status)\n+    vvd(rbp[0][1], -0.1341717650545059598e-2, 1e-14, \"pn06\", \"rbp12\", status)\n+    vvd(rbp[0][2], -0.5829075756493728856e-3, 1e-14, \"pn06\", \"rbp13\", status)\n+    vvd(rbp[1][0], 0.1341717674223918101e-2, 1e-14, \"pn06\", \"rbp21\", status)\n+    vvd(rbp[1][1], 0.9999990998963748448, 1e-12, \"pn06\", \"rbp22\", status)\n+    vvd(rbp[1][2], -0.3504269280170069029e-6, 1e-14, \"pn06\", \"rbp23\", status)\n+    vvd(rbp[2][0], 0.5829075211461454599e-3, 1e-14, \"pn06\", \"rbp31\", status)\n+    vvd(rbp[2][1], -0.4316708436255949093e-6, 1e-14, \"pn06\", \"rbp32\", status)\n+    vvd(rbp[2][2], 0.9999998301093032943, 1e-12, \"pn06\", \"rbp33\", status)\n+    vvd(rn[0][0], 0.9999999999536069682, 1e-12, \"pn06\", \"rn11\", status)\n+    vvd(rn[0][1], 0.8837746921149881914e-5, 1e-14, \"pn06\", \"rn12\", status)\n+    vvd(rn[0][2], 0.3831487047682968703e-5, 1e-14, \"pn06\", \"rn13\", status)\n+    vvd(rn[1][0], -0.8837591232983692340e-5, 1e-14, \"pn06\", \"rn21\", status)\n+    vvd(rn[1][1], 0.9999999991354692664, 1e-12, \"pn06\", \"rn22\", status)\n+    vvd(rn[1][2], -0.4063198798558931215e-4, 1e-14, \"pn06\", \"rn23\", status)\n+    vvd(rn[2][0], -0.3831846139597250235e-5, 1e-14, \"pn06\", \"rn31\", status)\n+    vvd(rn[2][1], 0.4063195412258792914e-4, 1e-14, \"pn06\", \"rn32\", status)\n+    vvd(rn[2][2], 0.9999999991671806293, 1e-12, \"pn06\", \"rn33\", status)\n+    vvd(rbpn[0][0], 0.9999989440504506688, 1e-12, \"pn06\", \"rbpn11\", status)\n+    vvd(rbpn[0][1], -0.1332879913170492655e-2, 1e-14, \"pn06\", \"rbpn12\", status)\n+    vvd(rbpn[0][2], -0.5790760923225655753e-3, 1e-14, \"pn06\", \"rbpn13\", status)\n+    vvd(rbpn[1][0], 0.1332856406595754748e-2, 1e-14, \"pn06\", \"rbpn21\", status)\n+    vvd(rbpn[1][1], 0.9999991109069366795, 1e-12, \"pn06\", \"rbpn22\", status)\n+    vvd(rbpn[1][2], -0.4097725651142641812e-4, 1e-14, \"pn06\", \"rbpn23\", status)\n+    vvd(rbpn[2][0], 0.5791301952321296716e-3, 1e-14, \"pn06\", \"rbpn31\", status)\n+    vvd(rbpn[2][1], 0.4020538796195230577e-4, 1e-14, \"pn06\", \"rbpn32\", status)\n+    vvd(rbpn[2][2], 0.9999998314958576778, 1e-12, \"pn06\", \"rbpn33\", status)\n+\n+\n+def test_pn06a():\n+    rb = np.empty((3, 3), float)\n+    rp = np.empty((3, 3), float)\n+    rbp = np.empty((3, 3), float)\n+    rn = np.empty((3, 3), float)\n+    rbpn = np.empty((3, 3), float)\n+    dpsi, deps, epsa, rb, rp, rbp, rn, rbpn = erfa_ufunc.pn06a(2400000.5, 53736.0)\n+    vvd(dpsi, -0.9630912025820308797e-5, 1e-12, \"pn06a\", \"dpsi\", status)\n+    vvd(deps,  0.4063238496887249798e-4, 1e-12, \"pn06a\", \"deps\", status)\n+    vvd(epsa,  0.4090789763356509926, 1e-12, \"pn06a\", \"epsa\", status)\n+    vvd(rb[0][0], 0.9999999999999942497, 1e-12, \"pn06a\", \"rb11\", status)\n+    vvd(rb[0][1], -0.7078368960971557145e-7, 1e-14, \"pn06a\", \"rb12\", status)\n+    vvd(rb[0][2], 0.8056213977613185606e-7, 1e-14, \"pn06a\", \"rb13\", status)\n+    vvd(rb[1][0], 0.7078368694637674333e-7, 1e-14, \"pn06a\", \"rb21\", status)\n+    vvd(rb[1][1], 0.9999999999999969484, 1e-12, \"pn06a\", \"rb22\", status)\n+    vvd(rb[1][2], 0.3305943742989134124e-7, 1e-14, \"pn06a\", \"rb23\", status)\n+    vvd(rb[2][0], -0.8056214211620056792e-7, 1e-14, \"pn06a\", \"rb31\", status)\n+    vvd(rb[2][1], -0.3305943172740586950e-7, 1e-14, \"pn06a\", \"rb32\", status)\n+    vvd(rb[2][2], 0.9999999999999962084, 1e-12, \"pn06a\", \"rb33\", status)\n+    vvd(rp[0][0], 0.9999989300536854831, 1e-12, \"pn06a\", \"rp11\", status)\n+    vvd(rp[0][1], -0.1341646886204443795e-2, 1e-14, \"pn06a\", \"rp12\", status)\n+    vvd(rp[0][2], -0.5829880933488627759e-3, 1e-14, \"pn06a\", \"rp13\", status)\n+    vvd(rp[1][0], 0.1341646890569782183e-2, 1e-14, \"pn06a\", \"rp21\", status)\n+    vvd(rp[1][1], 0.9999990999913319321, 1e-12, \"pn06a\", \"rp22\", status)\n+    vvd(rp[1][2], -0.3835944216374477457e-6, 1e-14, \"pn06a\", \"rp23\", status)\n+    vvd(rp[2][0], 0.5829880833027867368e-3, 1e-14, \"pn06a\", \"rp31\", status)\n+    vvd(rp[2][1], -0.3985701514686976112e-6, 1e-14, \"pn06a\", \"rp32\", status)\n+    vvd(rp[2][2], 0.9999998300623534950, 1e-12, \"pn06a\", \"rp33\", status)\n+    vvd(rbp[0][0], 0.9999989300056797893, 1e-12, \"pn06a\", \"rbp11\", status)\n+    vvd(rbp[0][1], -0.1341717650545059598e-2, 1e-14, \"pn06a\", \"rbp12\", status)\n+    vvd(rbp[0][2], -0.5829075756493728856e-3, 1e-14, \"pn06a\", \"rbp13\", status)\n+    vvd(rbp[1][0], 0.1341717674223918101e-2, 1e-14, \"pn06a\", \"rbp21\", status)\n+    vvd(rbp[1][1], 0.9999990998963748448, 1e-12, \"pn06a\", \"rbp22\", status)\n+    vvd(rbp[1][2], -0.3504269280170069029e-6, 1e-14, \"pn06a\", \"rbp23\", status)\n+    vvd(rbp[2][0], 0.5829075211461454599e-3, 1e-14, \"pn06a\", \"rbp31\", status)\n+    vvd(rbp[2][1], -0.4316708436255949093e-6, 1e-14, \"pn06a\", \"rbp32\", status)\n+    vvd(rbp[2][2], 0.9999998301093032943, 1e-12, \"pn06a\", \"rbp33\", status)\n+    vvd(rn[0][0], 0.9999999999536227668, 1e-12, \"pn06a\", \"rn11\", status)\n+    vvd(rn[0][1], 0.8836241998111535233e-5, 1e-14, \"pn06a\", \"rn12\", status)\n+    vvd(rn[0][2], 0.3830834608415287707e-5, 1e-14, \"pn06a\", \"rn13\", status)\n+    vvd(rn[1][0], -0.8836086334870740138e-5, 1e-14, \"pn06a\", \"rn21\", status)\n+    vvd(rn[1][1], 0.9999999991354657474, 1e-12, \"pn06a\", \"rn22\", status)\n+    vvd(rn[1][2], -0.4063240188248455065e-4, 1e-14, \"pn06a\", \"rn23\", status)\n+    vvd(rn[2][0], -0.3831193642839398128e-5, 1e-14, \"pn06a\", \"rn31\", status)\n+    vvd(rn[2][1], 0.4063236803101479770e-4, 1e-14, \"pn06a\", \"rn32\", status)\n+    vvd(rn[2][2], 0.9999999991671663114, 1e-12, \"pn06a\", \"rn33\", status)\n+    vvd(rbpn[0][0], 0.9999989440480669738, 1e-12, \"pn06a\", \"rbpn11\", status)\n+    vvd(rbpn[0][1], -0.1332881418091915973e-2, 1e-14, \"pn06a\", \"rbpn12\", status)\n+    vvd(rbpn[0][2], -0.5790767447612042565e-3, 1e-14, \"pn06a\", \"rbpn13\", status)\n+    vvd(rbpn[1][0], 0.1332857911250989133e-2, 1e-14, \"pn06a\", \"rbpn21\", status)\n+    vvd(rbpn[1][1], 0.9999991109049141908, 1e-12, \"pn06a\", \"rbpn22\", status)\n+    vvd(rbpn[1][2], -0.4097767128546784878e-4, 1e-14, \"pn06a\", \"rbpn23\", status)\n+    vvd(rbpn[2][0], 0.5791308482835292617e-3, 1e-14, \"pn06a\", \"rbpn31\", status)\n+    vvd(rbpn[2][1], 0.4020580099454020310e-4, 1e-14, \"pn06a\", \"rbpn32\", status)\n+    vvd(rbpn[2][2], 0.9999998314954628695, 1e-12, \"pn06a\", \"rbpn33\", status)\n+\n+\n+def test_pnm00a():\n+    rbpn = np.empty((3, 3), float)\n+    rbpn = erfa_ufunc.pnm00a(2400000.5, 50123.9999)\n+    vvd(rbpn[0][0], 0.9999995832793134257, 1e-12, \"pnm00a\", \"11\", status)\n+    vvd(rbpn[0][1], 0.8372384254137809439e-3, 1e-14, \"pnm00a\", \"12\", status)\n+    vvd(rbpn[0][2], 0.3639684306407150645e-3, 1e-14, \"pnm00a\", \"13\", status)\n+    vvd(rbpn[1][0], -0.8372535226570394543e-3, 1e-14, \"pnm00a\", \"21\", status)\n+    vvd(rbpn[1][1], 0.9999996486491582471, 1e-12, \"pnm00a\", \"22\", status)\n+    vvd(rbpn[1][2], 0.4132915262664072381e-4, 1e-14, \"pnm00a\", \"23\", status)\n+    vvd(rbpn[2][0], -0.3639337004054317729e-3, 1e-14, \"pnm00a\", \"31\", status)\n+    vvd(rbpn[2][1], -0.4163386925461775873e-4, 1e-14, \"pnm00a\", \"32\", status)\n+    vvd(rbpn[2][2], 0.9999999329094390695, 1e-12, \"pnm00a\", \"33\", status)\n+\n+\n+def test_pnm00b():\n+    rbpn = np.empty((3, 3), float)\n+    rbpn = erfa_ufunc.pnm00b(2400000.5, 50123.9999)\n+    vvd(rbpn[0][0], 0.9999995832776208280, 1e-12, \"pnm00b\", \"11\", status)\n+    vvd(rbpn[0][1], 0.8372401264429654837e-3, 1e-14, \"pnm00b\", \"12\", status)\n+    vvd(rbpn[0][2], 0.3639691681450271771e-3, 1e-14, \"pnm00b\", \"13\", status)\n+    vvd(rbpn[1][0], -0.8372552234147137424e-3, 1e-14, \"pnm00b\", \"21\", status)\n+    vvd(rbpn[1][1], 0.9999996486477686123, 1e-12, \"pnm00b\", \"22\", status)\n+    vvd(rbpn[1][2], 0.4132832190946052890e-4, 1e-14, \"pnm00b\", \"23\", status)\n+    vvd(rbpn[2][0], -0.3639344385341866407e-3, 1e-14, \"pnm00b\", \"31\", status)\n+    vvd(rbpn[2][1], -0.4163303977421522785e-4, 1e-14, \"pnm00b\", \"32\", status)\n+    vvd(rbpn[2][2], 0.9999999329092049734, 1e-12, \"pnm00b\", \"33\", status)\n+\n+\n+def test_pnm06a():\n+    rbpn = np.empty((3, 3), float)\n+    rbpn = erfa_ufunc.pnm06a(2400000.5, 50123.9999)\n+    vvd(rbpn[0][0], 0.9999995832794205484, 1e-12, \"pnm06a\", \"11\", status)\n+    vvd(rbpn[0][1], 0.8372382772630962111e-3, 1e-14, \"pnm06a\", \"12\", status)\n+    vvd(rbpn[0][2], 0.3639684771140623099e-3, 1e-14, \"pnm06a\", \"13\", status)\n+    vvd(rbpn[1][0], -0.8372533744743683605e-3, 1e-14, \"pnm06a\", \"21\", status)\n+    vvd(rbpn[1][1], 0.9999996486492861646, 1e-12, \"pnm06a\", \"22\", status)\n+    vvd(rbpn[1][2], 0.4132905944611019498e-4, 1e-14, \"pnm06a\", \"23\", status)\n+    vvd(rbpn[2][0], -0.3639337469629464969e-3, 1e-14, \"pnm06a\", \"31\", status)\n+    vvd(rbpn[2][1], -0.4163377605910663999e-4, 1e-14, \"pnm06a\", \"32\", status)\n+    vvd(rbpn[2][2], 0.9999999329094260057, 1e-12, \"pnm06a\", \"33\", status)\n+\n+\n+def test_pnm80():\n+    rmatpn = np.empty((3, 3), float)\n+    rmatpn = erfa_ufunc.pnm80(2400000.5, 50123.9999)\n+    vvd(rmatpn[0][0], 0.9999995831934611169, 1e-12, \"pnm80\", \"11\", status)\n+    vvd(rmatpn[0][1], 0.8373654045728124011e-3, 1e-14, \"pnm80\", \"12\", status)\n+    vvd(rmatpn[0][2], 0.3639121916933106191e-3, 1e-14, \"pnm80\", \"13\", status)\n+    vvd(rmatpn[1][0], -0.8373804896118301316e-3, 1e-14, \"pnm80\", \"21\", status)\n+    vvd(rmatpn[1][1], 0.9999996485439674092, 1e-12, \"pnm80\", \"22\", status)\n+    vvd(rmatpn[1][2], 0.4130202510421549752e-4, 1e-14, \"pnm80\", \"23\", status)\n+    vvd(rmatpn[2][0], -0.3638774789072144473e-3, 1e-14, \"pnm80\", \"31\", status)\n+    vvd(rmatpn[2][1], -0.4160674085851722359e-4, 1e-14, \"pnm80\", \"32\", status)\n+    vvd(rmatpn[2][2], 0.9999999329310274805, 1e-12, \"pnm80\", \"33\", status)\n+\n+\n+def test_pom00():\n+    rpom = np.empty((3, 3), float)\n+    xp = 2.55060238e-7\n+    yp = 1.860359247e-6\n+    sp = -0.1367174580728891460e-10\n+    rpom = erfa_ufunc.pom00(xp, yp, sp)\n+    vvd(rpom[0][0], 0.9999999999999674721, 1e-12, \"pom00\", \"11\", status)\n+    vvd(rpom[0][1], -0.1367174580728846989e-10, 1e-16, \"pom00\", \"12\", status)\n+    vvd(rpom[0][2], 0.2550602379999972345e-6, 1e-16, \"pom00\", \"13\", status)\n+    vvd(rpom[1][0], 0.1414624947957029801e-10, 1e-16, \"pom00\", \"21\", status)\n+    vvd(rpom[1][1], 0.9999999999982695317, 1e-12, \"pom00\", \"22\", status)\n+    vvd(rpom[1][2], -0.1860359246998866389e-5, 1e-16, \"pom00\", \"23\", status)\n+    vvd(rpom[2][0], -0.2550602379741215021e-6, 1e-16, \"pom00\", \"31\", status)\n+    vvd(rpom[2][1], 0.1860359247002414021e-5, 1e-16, \"pom00\", \"32\", status)\n+    vvd(rpom[2][2], 0.9999999999982370039, 1e-12, \"pom00\", \"33\", status)\n+\n+\n+def test_ppp():\n+    a = np.empty((3,), float)\n+    b = np.empty((3,), float)\n+    apb = np.empty((3,), float)\n+    a[0] = 2.0\n+    a[1] = 2.0\n+    a[2] = 3.0\n+    b[0] = 1.0\n+    b[1] = 3.0\n+    b[2] = 4.0\n+    apb = erfa_ufunc.ppp(a, b)\n+    vvd(apb[0], 3.0, 1e-12, \"ppp\", \"0\", status)\n+    vvd(apb[1], 5.0, 1e-12, \"ppp\", \"1\", status)\n+    vvd(apb[2], 7.0, 1e-12, \"ppp\", \"2\", status)\n+\n+\n+def test_ppsp():\n+    a = np.empty((3,), float)\n+    b = np.empty((3,), float)\n+    apsb = np.empty((3,), float)\n+    a[0] = 2.0\n+    a[1] = 2.0\n+    a[2] = 3.0\n+    s = 5.0\n+    b[0] = 1.0\n+    b[1] = 3.0\n+    b[2] = 4.0\n+    apsb = erfa_ufunc.ppsp(a, s, b)\n+    vvd(apsb[0], 7.0, 1e-12, \"ppsp\", \"0\", status)\n+    vvd(apsb[1], 17.0, 1e-12, \"ppsp\", \"1\", status)\n+    vvd(apsb[2], 23.0, 1e-12, \"ppsp\", \"2\", status)\n+\n+\n+def test_pr00():\n+    dpsipr, depspr = erfa_ufunc.pr00(2400000.5, 53736)\n+    vvd(dpsipr, -0.8716465172668347629e-7, 1e-22, \"pr00\", \"dpsipr\", status)\n+    vvd(depspr, -0.7342018386722813087e-8, 1e-22, \"pr00\", \"depspr\", status)\n+\n+\n+def test_prec76():\n+    ep01 = 2400000.5\n+    ep02 = 33282.0\n+    ep11 = 2400000.5\n+    ep12 = 51544.0\n+    zeta, z, theta = erfa_ufunc.prec76(ep01, ep02, ep11, ep12)\n+    vvd(zeta,  0.5588961642000161243e-2, 1e-12, \"prec76\", \"zeta\",  status)\n+    vvd(z,     0.5589922365870680624e-2, 1e-12, \"prec76\", \"z\",     status)\n+    vvd(theta, 0.4858945471687296760e-2, 1e-12, \"prec76\", \"theta\", status)\n+\n+\n+def test_pv2p():\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    p = np.empty((3,), float)\n+    pv['p'][0] = 0.3\n+    pv['p'][1] = 1.2\n+    pv['p'][2] = -2.5\n+    pv['v'][0] = -0.5\n+    pv['v'][1] = 3.1\n+    pv['v'][2] = 0.9\n+    p = erfa_ufunc.pv2p(pv)\n+    vvd(p[0],  0.3, 0.0, \"pv2p\", \"1\", status)\n+    vvd(p[1],  1.2, 0.0, \"pv2p\", \"2\", status)\n+    vvd(p[2], -2.5, 0.0, \"pv2p\", \"3\", status)\n+\n+\n+def test_pv2s():\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    pv['p'][0] = -0.4514964673880165\n+    pv['p'][1] = 0.03093394277342585\n+    pv['p'][2] = 0.05594668105108779\n+    pv['v'][0] = 1.292270850663260e-5\n+    pv['v'][1] = 2.652814182060692e-6\n+    pv['v'][2] = 2.568431853930293e-6\n+    theta, phi, r, td, pd, rd = erfa_ufunc.pv2s(pv)\n+    vvd(theta, 3.073185307179586515, 1e-12, \"pv2s\", \"theta\", status)\n+    vvd(phi, 0.1229999999999999992, 1e-12, \"pv2s\", \"phi\", status)\n+    vvd(r, 0.4559999999999999757, 1e-12, \"pv2s\", \"r\", status)\n+    vvd(td, -0.7800000000000000364e-5, 1e-16, \"pv2s\", \"td\", status)\n+    vvd(pd, 0.9010000000000001639e-5, 1e-16, \"pv2s\", \"pd\", status)\n+    vvd(rd, -0.1229999999999999832e-4, 1e-16, \"pv2s\", \"rd\", status)\n+\n+\n+def test_pvdpv():\n+    a = np.empty((), erfa_ufunc.dt_pv)\n+    b = np.empty((), erfa_ufunc.dt_pv)\n+    adb = np.empty((), erfa_ufunc.dt_pvdpv)\n+    a['p'][0] = 2.0\n+    a['p'][1] = 2.0\n+    a['p'][2] = 3.0\n+    a['v'][0] = 6.0\n+    a['v'][1] = 0.0\n+    a['v'][2] = 4.0\n+    b['p'][0] = 1.0\n+    b['p'][1] = 3.0\n+    b['p'][2] = 4.0\n+    b['v'][0] = 0.0\n+    b['v'][1] = 2.0\n+    b['v'][2] = 8.0\n+    adb = erfa_ufunc.pvdpv(a, b)\n+    vvd(adb[0], 20.0, 1e-12, \"pvdpv\", \"1\", status)\n+    vvd(adb[1], 50.0, 1e-12, \"pvdpv\", \"2\", status)\n+\n+\n+def test_pvm():\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    pv['p'][0] = 0.3\n+    pv['p'][1] = 1.2\n+    pv['p'][2] = -2.5\n+    pv['v'][0] = 0.45\n+    pv['v'][1] = -0.25\n+    pv['v'][2] = 1.1\n+    r, s = erfa_ufunc.pvm(pv)\n+    vvd(r, 2.789265136196270604, 1e-12, \"pvm\", \"r\", status)\n+    vvd(s, 1.214495780149111922, 1e-12, \"pvm\", \"s\", status)\n+\n+\n+def test_pvmpv():\n+    a = np.empty((), erfa_ufunc.dt_pv)\n+    b = np.empty((), erfa_ufunc.dt_pv)\n+    amb = np.empty((), erfa_ufunc.dt_pv)\n+    a['p'][0] = 2.0\n+    a['p'][1] = 2.0\n+    a['p'][2] = 3.0\n+    a['v'][0] = 5.0\n+    a['v'][1] = 6.0\n+    a['v'][2] = 3.0\n+    b['p'][0] = 1.0\n+    b['p'][1] = 3.0\n+    b['p'][2] = 4.0\n+    b['v'][0] = 3.0\n+    b['v'][1] = 2.0\n+    b['v'][2] = 1.0\n+    amb = erfa_ufunc.pvmpv(a, b)\n+    vvd(amb[0][0],  1.0, 1e-12, \"pvmpv\", \"11\", status)\n+    vvd(amb[0][1], -1.0, 1e-12, \"pvmpv\", \"21\", status)\n+    vvd(amb[0][2], -1.0, 1e-12, \"pvmpv\", \"31\", status)\n+    vvd(amb[1][0],  2.0, 1e-12, \"pvmpv\", \"12\", status)\n+    vvd(amb[1][1],  4.0, 1e-12, \"pvmpv\", \"22\", status)\n+    vvd(amb[1][2],  2.0, 1e-12, \"pvmpv\", \"32\", status)\n+\n+\n+def test_pvppv():\n+    a = np.empty((), erfa_ufunc.dt_pv)\n+    b = np.empty((), erfa_ufunc.dt_pv)\n+    apb = np.empty((), erfa_ufunc.dt_pv)\n+    a['p'][0] = 2.0\n+    a['p'][1] = 2.0\n+    a['p'][2] = 3.0\n+    a['v'][0] = 5.0\n+    a['v'][1] = 6.0\n+    a['v'][2] = 3.0\n+    b['p'][0] = 1.0\n+    b['p'][1] = 3.0\n+    b['p'][2] = 4.0\n+    b['v'][0] = 3.0\n+    b['v'][1] = 2.0\n+    b['v'][2] = 1.0\n+    apb = erfa_ufunc.pvppv(a, b)\n+    vvd(apb[0][0], 3.0, 1e-12, \"pvppv\", \"p1\", status)\n+    vvd(apb[0][1], 5.0, 1e-12, \"pvppv\", \"p2\", status)\n+    vvd(apb[0][2], 7.0, 1e-12, \"pvppv\", \"p3\", status)\n+    vvd(apb[1][0], 8.0, 1e-12, \"pvppv\", \"v1\", status)\n+    vvd(apb[1][1], 8.0, 1e-12, \"pvppv\", \"v2\", status)\n+    vvd(apb[1][2], 4.0, 1e-12, \"pvppv\", \"v3\", status)\n+\n+\n+def test_pvstar():\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    pv['p'][0] = 126668.5912743160601\n+    pv['p'][1] = 2136.792716839935195\n+    pv['p'][2] = -245251.2339876830091\n+    pv['v'][0] = -0.4051854035740712739e-2\n+    pv['v'][1] = -0.6253919754866173866e-2\n+    pv['v'][2] = 0.1189353719774107189e-1\n+    ra, dec, pmr, pmd, px, rv, j = erfa_ufunc.pvstar(pv)\n+    vvd(ra, 0.1686756e-1, 1e-12, \"pvstar\", \"ra\", status)\n+    vvd(dec, -1.093989828, 1e-12, \"pvstar\", \"dec\", status)\n+    vvd(pmr, -0.1783235160000472788e-4, 1e-16, \"pvstar\", \"pmr\", status)\n+    vvd(pmd, 0.2336024047000619347e-5, 1e-16, \"pvstar\", \"pmd\", status)\n+    vvd(px, 0.74723, 1e-12, \"pvstar\", \"px\", status)\n+    vvd(rv, -21.60000010107306010, 1e-11, \"pvstar\", \"rv\", status)\n+    viv(j, 0, \"pvstar\", \"j\", status)\n+\n+\n+def test_pvtob():\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    elong = 2.0\n+    phi = 0.5\n+    hm = 3000.0\n+    xp = 1e-6\n+    yp = -0.5e-6\n+    sp = 1e-8\n+    theta = 5.0\n+    pv = erfa_ufunc.pvtob(elong, phi, hm, xp, yp, sp, theta)\n+    vvd(pv['p'][0], 4225081.367071159207, 1e-5, \"pvtob\", \"p(1)\", status)\n+    vvd(pv['p'][1], 3681943.215856198144, 1e-5, \"pvtob\", \"p(2)\", status)\n+    vvd(pv['p'][2], 3041149.399241260785, 1e-5, \"pvtob\", \"p(3)\", status)\n+    vvd(pv['v'][0], -268.4915389365998787, 1e-9, \"pvtob\", \"v(1)\", status)\n+    vvd(pv['v'][1], 308.0977983288903123, 1e-9, \"pvtob\", \"v(2)\", status)\n+    vvd(pv['v'][2], 0, 0, \"pvtob\", \"v(3)\", status)\n+\n+\n+def test_pvu():\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    upv = np.empty((), erfa_ufunc.dt_pv)\n+    pv['p'][0] = 126668.5912743160734\n+    pv['p'][1] = 2136.792716839935565\n+    pv['p'][2] = -245251.2339876830229\n+    pv['v'][0] = -0.4051854035740713039e-2\n+    pv['v'][1] = -0.6253919754866175788e-2\n+    pv['v'][2] = 0.1189353719774107615e-1\n+    upv = erfa_ufunc.pvu(2920.0, pv)\n+    vvd(upv['p'][0], 126656.7598605317105, 1e-6, \"pvu\", \"p1\", status)\n+    vvd(upv['p'][1], 2118.531271155726332, 1e-8, \"pvu\", \"p2\", status)\n+    vvd(upv['p'][2], -245216.5048590656190, 1e-6, \"pvu\", \"p3\", status)\n+    vvd(upv['v'][0], -0.4051854035740713039e-2, 1e-12, \"pvu\", \"v1\", status)\n+    vvd(upv['v'][1], -0.6253919754866175788e-2, 1e-12, \"pvu\", \"v2\", status)\n+    vvd(upv['v'][2], 0.1189353719774107615e-1, 1e-12, \"pvu\", \"v3\", status)\n+\n+\n+def test_pvup():\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    p = np.empty((3,), float)\n+    pv['p'][0] = 126668.5912743160734\n+    pv['p'][1] = 2136.792716839935565\n+    pv['p'][2] = -245251.2339876830229\n+    pv['v'][0] = -0.4051854035740713039e-2\n+    pv['v'][1] = -0.6253919754866175788e-2\n+    pv['v'][2] = 0.1189353719774107615e-1\n+    p = erfa_ufunc.pvup(2920.0, pv)\n+    vvd(p[0],  126656.7598605317105,   1e-6, \"pvup\", \"1\", status)\n+    vvd(p[1],    2118.531271155726332, 1e-8, \"pvup\", \"2\", status)\n+    vvd(p[2], -245216.5048590656190,   1e-6, \"pvup\", \"3\", status)\n+\n+\n+def test_pvxpv():\n+    a = np.empty((), erfa_ufunc.dt_pv)\n+    b = np.empty((), erfa_ufunc.dt_pv)\n+    axb = np.empty((), erfa_ufunc.dt_pv)\n+    a['p'][0] = 2.0\n+    a['p'][1] = 2.0\n+    a['p'][2] = 3.0\n+    a['v'][0] = 6.0\n+    a['v'][1] = 0.0\n+    a['v'][2] = 4.0\n+    b['p'][0] = 1.0\n+    b['p'][1] = 3.0\n+    b['p'][2] = 4.0\n+    b['v'][0] = 0.0\n+    b['v'][1] = 2.0\n+    b['v'][2] = 8.0\n+    axb = erfa_ufunc.pvxpv(a, b)\n+    vvd(axb[0][0],  -1.0, 1e-12, \"pvxpv\", \"p1\", status)\n+    vvd(axb[0][1],  -5.0, 1e-12, \"pvxpv\", \"p2\", status)\n+    vvd(axb[0][2],   4.0, 1e-12, \"pvxpv\", \"p3\", status)\n+    vvd(axb[1][0],  -2.0, 1e-12, \"pvxpv\", \"v1\", status)\n+    vvd(axb[1][1], -36.0, 1e-12, \"pvxpv\", \"v2\", status)\n+    vvd(axb[1][2],  22.0, 1e-12, \"pvxpv\", \"v3\", status)\n+\n+\n+def test_pxp():\n+    a = np.empty((3,), float)\n+    b = np.empty((3,), float)\n+    axb = np.empty((3,), float)\n+    a[0] = 2.0\n+    a[1] = 2.0\n+    a[2] = 3.0\n+    b[0] = 1.0\n+    b[1] = 3.0\n+    b[2] = 4.0\n+    axb = erfa_ufunc.pxp(a, b)\n+    vvd(axb[0], -1.0, 1e-12, \"pxp\", \"1\", status)\n+    vvd(axb[1], -5.0, 1e-12, \"pxp\", \"2\", status)\n+    vvd(axb[2],  4.0, 1e-12, \"pxp\", \"3\", status)\n+\n+\n+def test_refco():\n+    phpa = 800.0\n+    tc = 10.0\n+    rh = 0.9\n+    wl = 0.4\n+    refa, refb = erfa_ufunc.refco(phpa, tc, rh, wl)\n+    vvd(refa, 0.2264949956241415009e-3, 1e-15, \"refco\", \"refa\", status)\n+    vvd(refb, -0.2598658261729343970e-6, 1e-18, \"refco\", \"refb\", status)\n+\n+\n+def test_rm2v():\n+    r = np.empty((3, 3), float)\n+    w = np.empty((3,), float)\n+    r[0][0] = 0.00\n+    r[0][1] = -0.80\n+    r[0][2] = -0.60\n+    r[1][0] = 0.80\n+    r[1][1] = -0.36\n+    r[1][2] = 0.48\n+    r[2][0] = 0.60\n+    r[2][1] = 0.48\n+    r[2][2] = -0.64\n+    w = erfa_ufunc.rm2v(r)\n+    vvd(w[0],  0.0,                  1e-12, \"rm2v\", \"1\", status)\n+    vvd(w[1],  1.413716694115406957, 1e-12, \"rm2v\", \"2\", status)\n+    vvd(w[2], -1.884955592153875943, 1e-12, \"rm2v\", \"3\", status)\n+\n+\n+def test_rv2m():\n+    w = np.empty((3,), float)\n+    r = np.empty((3, 3), float)\n+    w[0] = 0.0\n+    w[1] = 1.41371669\n+    w[2] = -1.88495559\n+    r = erfa_ufunc.rv2m(w)\n+    vvd(r[0][0], -0.7071067782221119905, 1e-14, \"rv2m\", \"11\", status)\n+    vvd(r[0][1], -0.5656854276809129651, 1e-14, \"rv2m\", \"12\", status)\n+    vvd(r[0][2], -0.4242640700104211225, 1e-14, \"rv2m\", \"13\", status)\n+    vvd(r[1][0],  0.5656854276809129651, 1e-14, \"rv2m\", \"21\", status)\n+    vvd(r[1][1], -0.0925483394532274246, 1e-14, \"rv2m\", \"22\", status)\n+    vvd(r[1][2], -0.8194112531408833269, 1e-14, \"rv2m\", \"23\", status)\n+    vvd(r[2][0],  0.4242640700104211225, 1e-14, \"rv2m\", \"31\", status)\n+    vvd(r[2][1], -0.8194112531408833269, 1e-14, \"rv2m\", \"32\", status)\n+    vvd(r[2][2],  0.3854415612311154341, 1e-14, \"rv2m\", \"33\", status)\n+\n+\n+def test_rx():\n+    r = np.empty((3, 3), float)\n+    phi = 0.3456789\n+    r[0][0] = 2.0\n+    r[0][1] = 3.0\n+    r[0][2] = 2.0\n+    r[1][0] = 3.0\n+    r[1][1] = 2.0\n+    r[1][2] = 3.0\n+    r[2][0] = 3.0\n+    r[2][1] = 4.0\n+    r[2][2] = 5.0\n+    r = erfa_ufunc.rx(phi, r)\n+    vvd(r[0][0], 2.0, 0.0, \"rx\", \"11\", status)\n+    vvd(r[0][1], 3.0, 0.0, \"rx\", \"12\", status)\n+    vvd(r[0][2], 2.0, 0.0, \"rx\", \"13\", status)\n+    vvd(r[1][0], 3.839043388235612460, 1e-12, \"rx\", \"21\", status)\n+    vvd(r[1][1], 3.237033249594111899, 1e-12, \"rx\", \"22\", status)\n+    vvd(r[1][2], 4.516714379005982719, 1e-12, \"rx\", \"23\", status)\n+    vvd(r[2][0], 1.806030415924501684, 1e-12, \"rx\", \"31\", status)\n+    vvd(r[2][1], 3.085711545336372503, 1e-12, \"rx\", \"32\", status)\n+    vvd(r[2][2], 3.687721683977873065, 1e-12, \"rx\", \"33\", status)\n+\n+\n+def test_rxp():\n+    r = np.empty((3, 3), float)\n+    p = np.empty((3,), float)\n+    rp = np.empty((3,), float)\n+    r[0][0] = 2.0\n+    r[0][1] = 3.0\n+    r[0][2] = 2.0\n+    r[1][0] = 3.0\n+    r[1][1] = 2.0\n+    r[1][2] = 3.0\n+    r[2][0] = 3.0\n+    r[2][1] = 4.0\n+    r[2][2] = 5.0\n+    p[0] = 0.2\n+    p[1] = 1.5\n+    p[2] = 0.1\n+    rp = erfa_ufunc.rxp(r, p)\n+    vvd(rp[0], 5.1, 1e-12, \"rxp\", \"1\", status)\n+    vvd(rp[1], 3.9, 1e-12, \"rxp\", \"2\", status)\n+    vvd(rp[2], 7.1, 1e-12, \"rxp\", \"3\", status)\n+\n+\n+def test_rxpv():\n+    r = np.empty((3, 3), float)\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    rpv = np.empty((), erfa_ufunc.dt_pv)\n+    r[0][0] = 2.0\n+    r[0][1] = 3.0\n+    r[0][2] = 2.0\n+    r[1][0] = 3.0\n+    r[1][1] = 2.0\n+    r[1][2] = 3.0\n+    r[2][0] = 3.0\n+    r[2][1] = 4.0\n+    r[2][2] = 5.0\n+    pv['p'][0] = 0.2\n+    pv['p'][1] = 1.5\n+    pv['p'][2] = 0.1\n+    pv['v'][0] = 1.5\n+    pv['v'][1] = 0.2\n+    pv['v'][2] = 0.1\n+    rpv = erfa_ufunc.rxpv(r, pv)\n+    vvd(rpv['p'][0], 5.1, 1e-12, \"rxpv\", \"11\", status)\n+    vvd(rpv['v'][0], 3.8, 1e-12, \"rxpv\", \"12\", status)\n+    vvd(rpv['p'][1], 3.9, 1e-12, \"rxpv\", \"21\", status)\n+    vvd(rpv['v'][1], 5.2, 1e-12, \"rxpv\", \"22\", status)\n+    vvd(rpv['p'][2], 7.1, 1e-12, \"rxpv\", \"31\", status)\n+    vvd(rpv['v'][2], 5.8, 1e-12, \"rxpv\", \"32\", status)\n+\n+\n+def test_rxr():\n+    a = np.empty((3, 3), float)\n+    b = np.empty((3, 3), float)\n+    atb = np.empty((3, 3), float)\n+    a[0][0] = 2.0\n+    a[0][1] = 3.0\n+    a[0][2] = 2.0\n+    a[1][0] = 3.0\n+    a[1][1] = 2.0\n+    a[1][2] = 3.0\n+    a[2][0] = 3.0\n+    a[2][1] = 4.0\n+    a[2][2] = 5.0\n+    b[0][0] = 1.0\n+    b[0][1] = 2.0\n+    b[0][2] = 2.0\n+    b[1][0] = 4.0\n+    b[1][1] = 1.0\n+    b[1][2] = 1.0\n+    b[2][0] = 3.0\n+    b[2][1] = 0.0\n+    b[2][2] = 1.0\n+    atb = erfa_ufunc.rxr(a, b)\n+    vvd(atb[0][0], 20.0, 1e-12, \"rxr\", \"11\", status)\n+    vvd(atb[0][1],  7.0, 1e-12, \"rxr\", \"12\", status)\n+    vvd(atb[0][2],  9.0, 1e-12, \"rxr\", \"13\", status)\n+    vvd(atb[1][0], 20.0, 1e-12, \"rxr\", \"21\", status)\n+    vvd(atb[1][1],  8.0, 1e-12, \"rxr\", \"22\", status)\n+    vvd(atb[1][2], 11.0, 1e-12, \"rxr\", \"23\", status)\n+    vvd(atb[2][0], 34.0, 1e-12, \"rxr\", \"31\", status)\n+    vvd(atb[2][1], 10.0, 1e-12, \"rxr\", \"32\", status)\n+    vvd(atb[2][2], 15.0, 1e-12, \"rxr\", \"33\", status)\n+\n+\n+def test_ry():\n+    r = np.empty((3, 3), float)\n+    theta = 0.3456789\n+    r[0][0] = 2.0\n+    r[0][1] = 3.0\n+    r[0][2] = 2.0\n+    r[1][0] = 3.0\n+    r[1][1] = 2.0\n+    r[1][2] = 3.0\n+    r[2][0] = 3.0\n+    r[2][1] = 4.0\n+    r[2][2] = 5.0\n+    r = erfa_ufunc.ry(theta, r)\n+    vvd(r[0][0], 0.8651847818978159930, 1e-12, \"ry\", \"11\", status)\n+    vvd(r[0][1], 1.467194920539316554, 1e-12, \"ry\", \"12\", status)\n+    vvd(r[0][2], 0.1875137911274457342, 1e-12, \"ry\", \"13\", status)\n+    vvd(r[1][0], 3, 1e-12, \"ry\", \"21\", status)\n+    vvd(r[1][1], 2, 1e-12, \"ry\", \"22\", status)\n+    vvd(r[1][2], 3, 1e-12, \"ry\", \"23\", status)\n+    vvd(r[2][0], 3.500207892850427330, 1e-12, \"ry\", \"31\", status)\n+    vvd(r[2][1], 4.779889022262298150, 1e-12, \"ry\", \"32\", status)\n+    vvd(r[2][2], 5.381899160903798712, 1e-12, \"ry\", \"33\", status)\n+\n+\n+def test_rz():\n+    r = np.empty((3, 3), float)\n+    psi = 0.3456789\n+    r[0][0] = 2.0\n+    r[0][1] = 3.0\n+    r[0][2] = 2.0\n+    r[1][0] = 3.0\n+    r[1][1] = 2.0\n+    r[1][2] = 3.0\n+    r[2][0] = 3.0\n+    r[2][1] = 4.0\n+    r[2][2] = 5.0\n+    r = erfa_ufunc.rz(psi, r)\n+    vvd(r[0][0], 2.898197754208926769, 1e-12, \"rz\", \"11\", status)\n+    vvd(r[0][1], 3.500207892850427330, 1e-12, \"rz\", \"12\", status)\n+    vvd(r[0][2], 2.898197754208926769, 1e-12, \"rz\", \"13\", status)\n+    vvd(r[1][0], 2.144865911309686813, 1e-12, \"rz\", \"21\", status)\n+    vvd(r[1][1], 0.865184781897815993, 1e-12, \"rz\", \"22\", status)\n+    vvd(r[1][2], 2.144865911309686813, 1e-12, \"rz\", \"23\", status)\n+    vvd(r[2][0], 3.0, 1e-12, \"rz\", \"31\", status)\n+    vvd(r[2][1], 4.0, 1e-12, \"rz\", \"32\", status)\n+    vvd(r[2][2], 5.0, 1e-12, \"rz\", \"33\", status)\n+\n+\n+def test_s00():\n+    x = 0.5791308486706011000e-3\n+    y = 0.4020579816732961219e-4\n+    s = erfa_ufunc.s00(2400000.5, 53736.0, x, y)\n+    vvd(s, -0.1220036263270905693e-7, 1e-18, \"s00\", \"\", status)\n+\n+\n+def test_s00a():\n+    s = erfa_ufunc.s00a(2400000.5, 52541.0)\n+    vvd(s, -0.1340684448919163584e-7, 1e-18, \"s00a\", \"\", status)\n+\n+\n+def test_s00b():\n+    s = erfa_ufunc.s00b(2400000.5, 52541.0)\n+    vvd(s, -0.1340695782951026584e-7, 1e-18, \"s00b\", \"\", status)\n+\n+\n+def test_s06():\n+    x = 0.5791308486706011000e-3\n+    y = 0.4020579816732961219e-4\n+    s = erfa_ufunc.s06(2400000.5, 53736.0, x, y)\n+    vvd(s, -0.1220032213076463117e-7, 1e-18, \"s06\", \"\", status)\n+\n+\n+def test_s06a():\n+    s = erfa_ufunc.s06a(2400000.5, 52541.0)\n+    vvd(s, -0.1340680437291812383e-7, 1e-18, \"s06a\", \"\", status)\n+\n+\n+def test_s2c():\n+    c = np.empty((3,), float)\n+    c = erfa_ufunc.s2c(3.0123, -0.999)\n+    vvd(c[0], -0.5366267667260523906, 1e-12, \"s2c\", \"1\", status)\n+    vvd(c[1],  0.0697711109765145365, 1e-12, \"s2c\", \"2\", status)\n+    vvd(c[2], -0.8409302618566214041, 1e-12, \"s2c\", \"3\", status)\n+\n+\n+def test_s2p():\n+    p = np.empty((3,), float)\n+    p = erfa_ufunc.s2p(-3.21, 0.123, 0.456)\n+    vvd(p[0], -0.4514964673880165228, 1e-12, \"s2p\", \"x\", status)\n+    vvd(p[1],  0.0309339427734258688, 1e-12, \"s2p\", \"y\", status)\n+    vvd(p[2],  0.0559466810510877933, 1e-12, \"s2p\", \"z\", status)\n+\n+\n+def test_s2pv():\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    pv = erfa_ufunc.s2pv(-3.21, 0.123, 0.456, -7.8e-6, 9.01e-6, -1.23e-5)\n+    vvd(pv['p'][0], -0.4514964673880165228, 1e-12, \"s2pv\", \"x\", status)\n+    vvd(pv['p'][1],  0.0309339427734258688, 1e-12, \"s2pv\", \"y\", status)\n+    vvd(pv['p'][2],  0.0559466810510877933, 1e-12, \"s2pv\", \"z\", status)\n+    vvd(pv['v'][0],  0.1292270850663260170e-4, 1e-16, \"s2pv\", \"vx\", status)\n+    vvd(pv['v'][1],  0.2652814182060691422e-5, 1e-16, \"s2pv\", \"vy\", status)\n+    vvd(pv['v'][2],  0.2568431853930292259e-5, 1e-16, \"s2pv\", \"vz\", status)\n+\n+\n+def test_s2xpv():\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    spv = np.empty((), erfa_ufunc.dt_pv)\n+    s1 = 2.0\n+    s2 = 3.0\n+    pv['p'][0] = 0.3\n+    pv['p'][1] = 1.2\n+    pv['p'][2] = -2.5\n+    pv['v'][0] = 0.5\n+    pv['v'][1] = 2.3\n+    pv['v'][2] = -0.4\n+    spv = erfa_ufunc.s2xpv(s1, s2, pv)\n+    vvd(spv['p'][0],  0.6, 1e-12, \"s2xpv\", \"p1\", status)\n+    vvd(spv['p'][1],  2.4, 1e-12, \"s2xpv\", \"p2\", status)\n+    vvd(spv['p'][2], -5.0, 1e-12, \"s2xpv\", \"p3\", status)\n+    vvd(spv['v'][0],  1.5, 1e-12, \"s2xpv\", \"v1\", status)\n+    vvd(spv['v'][1],  6.9, 1e-12, \"s2xpv\", \"v2\", status)\n+    vvd(spv['v'][2], -1.2, 1e-12, \"s2xpv\", \"v3\", status)\n+\n+\n+def test_sepp():\n+    a = np.empty((3,), float)\n+    b = np.empty((3,), float)\n+    a[0] = 1.0\n+    a[1] = 0.1\n+    a[2] = 0.2\n+    b[0] = -3.0\n+    b[1] = 1e-3\n+    b[2] = 0.2\n+    s = erfa_ufunc.sepp(a, b)\n+    vvd(s, 2.860391919024660768, 1e-12, \"sepp\", \"\", status)\n+\n+\n+def test_seps():\n+    al = 1.0\n+    ap = 0.1\n+    bl = 0.2\n+    bp = -3.0\n+    s = erfa_ufunc.seps(al, ap, bl, bp)\n+    vvd(s, 2.346722016996998842, 1e-14, \"seps\", \"\", status)\n+\n+\n+def test_sp00():\n+    vvd(erfa_ufunc.sp00(2400000.5, 52541.0), -0.6216698469981019309e-11, 1e-12, \"sp00\", \"\", status)\n+\n+\n+def test_starpm():\n+    ra1 =  0.01686756\n+    dec1 = -1.093989828\n+    pmr1 = -1.78323516e-5\n+    pmd1 = 2.336024047e-6\n+    px1 =  0.74723\n+    rv1 = -21.6\n+    ra2, dec2, pmr2, pmd2, px2, rv2, j = erfa_ufunc.starpm(ra1, dec1, pmr1, pmd1, px1, rv1, 2400000.5, 50083.0, 2400000.5, 53736.0)\n+    vvd(ra2, 0.01668919069414256149, 1e-13, \"starpm\", \"ra\", status)\n+    vvd(dec2, -1.093966454217127897, 1e-13, \"starpm\", \"dec\", status)\n+    vvd(pmr2, -0.1783662682153176524e-4, 1e-17, \"starpm\", \"pmr\", status)\n+    vvd(pmd2, 0.2338092915983989595e-5, 1e-17, \"starpm\", \"pmd\", status)\n+    vvd(px2, 0.7473533835317719243, 1e-13, \"starpm\", \"px\", status)\n+    vvd(rv2, -21.59905170476417175, 1e-11, \"starpm\", \"rv\", status)\n+    viv(j, 0, \"starpm\", \"j\", status)\n+\n+\n+def test_starpv():\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    ra =  0.01686756\n+    dec = -1.093989828\n+    pmr = -1.78323516e-5\n+    pmd = 2.336024047e-6\n+    px =  0.74723\n+    rv = -21.6\n+    pv, j = erfa_ufunc.starpv(ra, dec, pmr, pmd, px, rv)\n+    vvd(pv['p'][0], 126668.5912743160601, 1e-10, \"starpv\", \"11\", status)\n+    vvd(pv['p'][1], 2136.792716839935195, 1e-12, \"starpv\", \"12\", status)\n+    vvd(pv['p'][2], -245251.2339876830091, 1e-10, \"starpv\", \"13\", status)\n+    vvd(pv['v'][0], -0.4051854008955659551e-2, 1e-13, \"starpv\", \"21\", status)\n+    vvd(pv['v'][1], -0.6253919754414777970e-2, 1e-15, \"starpv\", \"22\", status)\n+    vvd(pv['v'][2], 0.1189353714588109341e-1, 1e-13, \"starpv\", \"23\", status)\n+    viv(j, 0, \"starpv\", \"j\", status)\n+\n+\n+def test_sxp():\n+    p = np.empty((3,), float)\n+    sp = np.empty((3,), float)\n+    s = 2.0\n+    p[0] = 0.3\n+    p[1] = 1.2\n+    p[2] = -2.5\n+    sp = erfa_ufunc.sxp(s, p)\n+    vvd(sp[0],  0.6, 0.0, \"sxp\", \"1\", status)\n+    vvd(sp[1],  2.4, 0.0, \"sxp\", \"2\", status)\n+    vvd(sp[2], -5.0, 0.0, \"sxp\", \"3\", status)\n+\n+\n+def test_sxpv():\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    spv = np.empty((), erfa_ufunc.dt_pv)\n+    s = 2.0\n+    pv['p'][0] = 0.3\n+    pv['p'][1] = 1.2\n+    pv['p'][2] = -2.5\n+    pv['v'][0] = 0.5\n+    pv['v'][1] = 3.2\n+    pv['v'][2] = -0.7\n+    spv = erfa_ufunc.sxpv(s, pv)\n+    vvd(spv['p'][0],  0.6, 0.0, \"sxpv\", \"p1\", status)\n+    vvd(spv['p'][1],  2.4, 0.0, \"sxpv\", \"p2\", status)\n+    vvd(spv['p'][2], -5.0, 0.0, \"sxpv\", \"p3\", status)\n+    vvd(spv['v'][0],  1.0, 0.0, \"sxpv\", \"v1\", status)\n+    vvd(spv['v'][1],  6.4, 0.0, \"sxpv\", \"v2\", status)\n+    vvd(spv['v'][2], -1.4, 0.0, \"sxpv\", \"v3\", status)\n+\n+\n+def test_taitt():\n+    t1, t2, j = erfa_ufunc.taitt(2453750.5, 0.892482639)\n+    vvd(t1, 2453750.5, 1e-6, \"taitt\", \"t1\", status)\n+    vvd(t2, 0.892855139, 1e-12, \"taitt\", \"t2\", status)\n+    viv(j, 0, \"taitt\", \"j\", status)\n+\n+\n+def test_taiut1():\n+    u1, u2, j = erfa_ufunc.taiut1(2453750.5, 0.892482639, -32.6659)\n+    vvd(u1, 2453750.5, 1e-6, \"taiut1\", \"u1\", status)\n+    vvd(u2, 0.8921045614537037037, 1e-12, \"taiut1\", \"u2\", status)\n+    viv(j, 0, \"taiut1\", \"j\", status)\n+\n+\n+def test_taiutc():\n+    u1, u2, j = erfa_ufunc.taiutc(2453750.5, 0.892482639)\n+    vvd(u1, 2453750.5, 1e-6, \"taiutc\", \"u1\", status)\n+    vvd(u2, 0.8921006945555555556, 1e-12, \"taiutc\", \"u2\", status)\n+    viv(j, 0, \"taiutc\", \"j\", status)\n+\n+\n+def test_tcbtdb():\n+    b1, b2, j = erfa_ufunc.tcbtdb(2453750.5, 0.893019599)\n+    vvd(b1, 2453750.5, 1e-6, \"tcbtdb\", \"b1\", status)\n+    vvd(b2, 0.8928551362746343397, 1e-12, \"tcbtdb\", \"b2\", status)\n+    viv(j, 0, \"tcbtdb\", \"j\", status)\n+\n+\n+def test_tcgtt():\n+    t1, t2, j = erfa_ufunc.tcgtt(2453750.5, 0.892862531)\n+    vvd(t1, 2453750.5, 1e-6, \"tcgtt\", \"t1\", status)\n+    vvd(t2, 0.8928551387488816828, 1e-12, \"tcgtt\", \"t2\", status)\n+    viv(j, 0, \"tcgtt\", \"j\", status)\n+\n+\n+def test_tdbtcb():\n+    b1, b2, j = erfa_ufunc.tdbtcb(2453750.5, 0.892855137)\n+    vvd( b1, 2453750.5, 1e-6, \"tdbtcb\", \"b1\", status)\n+    vvd( b2, 0.8930195997253656716, 1e-12, \"tdbtcb\", \"b2\", status)\n+    viv(j, 0, \"tdbtcb\", \"j\", status)\n+\n+\n+def test_tdbtt():\n+    t1, t2, j = erfa_ufunc.tdbtt(2453750.5, 0.892855137, -0.000201)\n+    vvd(t1, 2453750.5, 1e-6, \"tdbtt\", \"t1\", status)\n+    vvd(t2, 0.8928551393263888889, 1e-12, \"tdbtt\", \"t2\", status)\n+    viv(j, 0, \"tdbtt\", \"j\", status)\n+\n+\n+def test_tf2a():\n+    a, j = erfa_ufunc.tf2a('+', 4, 58, 20.2)\n+    vvd(a, 1.301739278189537429, 1e-12, \"tf2a\", \"a\", status)\n+    viv(j, 0, \"tf2a\", \"j\", status)\n+\n+\n+def test_tf2d():\n+    d, j = erfa_ufunc.tf2d(' ', 23, 55, 10.9)\n+    vvd(d, 0.9966539351851851852, 1e-12, \"tf2d\", \"d\", status)\n+    viv(j, 0, \"tf2d\", \"j\", status)\n+\n+\n+def test_tpors():\n+    xi = -0.03\n+    eta = 0.07\n+    ra = 1.3\n+    dec = 1.5\n+    az1, bz1, az2, bz2, n = erfa_ufunc.tpors(xi, eta, ra, dec)\n+    vvd(az1, 1.736621577783208748, 1e-13, \"tpors\", \"az1\", status)\n+    vvd(bz1, 1.436736561844090323, 1e-13, \"tpors\", \"bz1\", status)\n+    vvd(az2, 4.004971075806584490, 1e-13, \"tpors\", \"az2\", status)\n+    vvd(bz2, 1.565084088476417917, 1e-13, \"tpors\", \"bz2\", status)\n+    viv(n, 2, \"tpors\", \"n\", status)\n+\n+\n+def test_tporv():\n+    v = np.empty((3,), float)\n+    vz1 = np.empty((3,), float)\n+    vz2 = np.empty((3,), float)\n+    xi = -0.03\n+    eta = 0.07\n+    ra = 1.3\n+    dec = 1.5\n+    v = erfa_ufunc.s2c(ra, dec)\n+    vz1, vz2, n = erfa_ufunc.tporv(xi, eta, v)\n+    vvd(vz1[0], -0.02206252822366888610, 1e-15, \"tporv\", \"x1\", status)\n+    vvd(vz1[1], 0.1318251060359645016, 1e-14, \"tporv\", \"y1\", status)\n+    vvd(vz1[2], 0.9910274397144543895, 1e-14, \"tporv\", \"z1\", status)\n+    vvd(vz2[0], -0.003712211763801968173, 1e-16, \"tporv\", \"x2\", status)\n+    vvd(vz2[1], -0.004341519956299836813, 1e-16, \"tporv\", \"y2\", status)\n+    vvd(vz2[2], 0.9999836852110587012, 1e-14, \"tporv\", \"z2\", status)\n+    viv(n, 2, \"tporv\", \"n\", status)\n+\n+\n+def test_tpsts():\n+    xi = -0.03\n+    eta = 0.07\n+    raz = 2.3\n+    decz = 1.5\n+    ra, dec = erfa_ufunc.tpsts(xi, eta, raz, decz)\n+    vvd(ra, 0.7596127167359629775, 1e-14, \"tpsts\", \"ra\", status)\n+    vvd(dec, 1.540864645109263028, 1e-13, \"tpsts\", \"dec\", status)\n+\n+\n+def test_tpstv():\n+    vz = np.empty((3,), float)\n+    v = np.empty((3,), float)\n+    xi = -0.03\n+    eta = 0.07\n+    raz = 2.3\n+    decz = 1.5\n+    vz = erfa_ufunc.s2c(raz, decz)\n+    v = erfa_ufunc.tpstv(xi, eta, vz)\n+    vvd(v[0], 0.02170030454907376677, 1e-15, \"tpstv\", \"x\", status)\n+    vvd(v[1], 0.02060909590535367447, 1e-15, \"tpstv\", \"y\", status)\n+    vvd(v[2], 0.9995520806583523804, 1e-14, \"tpstv\", \"z\", status)\n+\n+\n+def test_tpxes():\n+    ra = 1.3\n+    dec = 1.55\n+    raz = 2.3\n+    decz = 1.5\n+    xi, eta, j = erfa_ufunc.tpxes(ra, dec, raz, decz)\n+    vvd(xi, -0.01753200983236980595, 1e-15, \"tpxes\", \"xi\", status)\n+    vvd(eta, 0.05962940005778712891, 1e-15, \"tpxes\", \"eta\", status)\n+    viv(j, 0, \"tpxes\", \"j\", status)\n+\n+\n+def test_tpxev():\n+    v = np.empty((3,), float)\n+    vz = np.empty((3,), float)\n+    ra = 1.3\n+    dec = 1.55\n+    raz = 2.3\n+    decz = 1.5\n+    v = erfa_ufunc.s2c(ra, dec)\n+    vz = erfa_ufunc.s2c(raz, decz)\n+    xi, eta, j = erfa_ufunc.tpxev(v, vz)\n+    vvd(xi, -0.01753200983236980595, 1e-15, \"tpxev\", \"xi\", status)\n+    vvd(eta, 0.05962940005778712891, 1e-15, \"tpxev\", \"eta\", status)\n+    viv(j, 0, \"tpxev\", \"j\", status)\n+\n+\n+def test_tr():\n+    r = np.empty((3, 3), float)\n+    rt = np.empty((3, 3), float)\n+    r[0][0] = 2.0\n+    r[0][1] = 3.0\n+    r[0][2] = 2.0\n+    r[1][0] = 3.0\n+    r[1][1] = 2.0\n+    r[1][2] = 3.0\n+    r[2][0] = 3.0\n+    r[2][1] = 4.0\n+    r[2][2] = 5.0\n+    rt = erfa_ufunc.tr(r)\n+    vvd(rt[0][0], 2.0, 0.0, \"tr\", \"11\", status)\n+    vvd(rt[0][1], 3.0, 0.0, \"tr\", \"12\", status)\n+    vvd(rt[0][2], 3.0, 0.0, \"tr\", \"13\", status)\n+    vvd(rt[1][0], 3.0, 0.0, \"tr\", \"21\", status)\n+    vvd(rt[1][1], 2.0, 0.0, \"tr\", \"22\", status)\n+    vvd(rt[1][2], 4.0, 0.0, \"tr\", \"23\", status)\n+    vvd(rt[2][0], 2.0, 0.0, \"tr\", \"31\", status)\n+    vvd(rt[2][1], 3.0, 0.0, \"tr\", \"32\", status)\n+    vvd(rt[2][2], 5.0, 0.0, \"tr\", \"33\", status)\n+\n+\n+def test_trxp():\n+    r = np.empty((3, 3), float)\n+    p = np.empty((3,), float)\n+    trp = np.empty((3,), float)\n+    r[0][0] = 2.0\n+    r[0][1] = 3.0\n+    r[0][2] = 2.0\n+    r[1][0] = 3.0\n+    r[1][1] = 2.0\n+    r[1][2] = 3.0\n+    r[2][0] = 3.0\n+    r[2][1] = 4.0\n+    r[2][2] = 5.0\n+    p[0] = 0.2\n+    p[1] = 1.5\n+    p[2] = 0.1\n+    trp = erfa_ufunc.trxp(r, p)\n+    vvd(trp[0], 5.2, 1e-12, \"trxp\", \"1\", status)\n+    vvd(trp[1], 4.0, 1e-12, \"trxp\", \"2\", status)\n+    vvd(trp[2], 5.4, 1e-12, \"trxp\", \"3\", status)\n+\n+\n+def test_trxpv():\n+    r = np.empty((3, 3), float)\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    trpv = np.empty((), erfa_ufunc.dt_pv)\n+    r[0][0] = 2.0\n+    r[0][1] = 3.0\n+    r[0][2] = 2.0\n+    r[1][0] = 3.0\n+    r[1][1] = 2.0\n+    r[1][2] = 3.0\n+    r[2][0] = 3.0\n+    r[2][1] = 4.0\n+    r[2][2] = 5.0\n+    pv['p'][0] = 0.2\n+    pv['p'][1] = 1.5\n+    pv['p'][2] = 0.1\n+    pv['v'][0] = 1.5\n+    pv['v'][1] = 0.2\n+    pv['v'][2] = 0.1\n+    trpv = erfa_ufunc.trxpv(r, pv)\n+    vvd(trpv['p'][0], 5.2, 1e-12, \"trxpv\", \"p1\", status)\n+    vvd(trpv['p'][1], 4.0, 1e-12, \"trxpv\", \"p1\", status)\n+    vvd(trpv['p'][2], 5.4, 1e-12, \"trxpv\", \"p1\", status)\n+    vvd(trpv['v'][0], 3.9, 1e-12, \"trxpv\", \"v1\", status)\n+    vvd(trpv['v'][1], 5.3, 1e-12, \"trxpv\", \"v2\", status)\n+    vvd(trpv['v'][2], 4.1, 1e-12, \"trxpv\", \"v3\", status)\n+\n+\n+def test_tttai():\n+    a1, a2, j = erfa_ufunc.tttai(2453750.5, 0.892482639)\n+    vvd(a1, 2453750.5, 1e-6, \"tttai\", \"a1\", status)\n+    vvd(a2, 0.892110139, 1e-12, \"tttai\", \"a2\", status)\n+    viv(j, 0, \"tttai\", \"j\", status)\n+\n+\n+def test_tttcg():\n+    g1, g2, j = erfa_ufunc.tttcg(2453750.5, 0.892482639)\n+    vvd( g1, 2453750.5, 1e-6, \"tttcg\", \"g1\", status)\n+    vvd( g2, 0.8924900312508587113, 1e-12, \"tttcg\", \"g2\", status)\n+    viv(j, 0, \"tttcg\", \"j\", status)\n+\n+\n+def test_tttdb():\n+    b1, b2, j = erfa_ufunc.tttdb(2453750.5, 0.892855139, -0.000201)\n+    vvd(b1, 2453750.5, 1e-6, \"tttdb\", \"b1\", status)\n+    vvd(b2, 0.8928551366736111111, 1e-12, \"tttdb\", \"b2\", status)\n+    viv(j, 0, \"tttdb\", \"j\", status)\n+\n+\n+def test_ttut1():\n+    u1, u2, j = erfa_ufunc.ttut1(2453750.5, 0.892855139, 64.8499)\n+    vvd(u1, 2453750.5, 1e-6, \"ttut1\", \"u1\", status)\n+    vvd(u2, 0.8921045614537037037, 1e-12, \"ttut1\", \"u2\", status)\n+    viv(j, 0, \"ttut1\", \"j\", status)\n+\n+\n+def test_ut1tai():\n+    a1, a2, j = erfa_ufunc.ut1tai(2453750.5, 0.892104561, -32.6659)\n+    vvd(a1, 2453750.5, 1e-6, \"ut1tai\", \"a1\", status)\n+    vvd(a2, 0.8924826385462962963, 1e-12, \"ut1tai\", \"a2\", status)\n+    viv(j, 0, \"ut1tai\", \"j\", status)\n+\n+\n+def test_ut1tt():\n+    t1, t2, j = erfa_ufunc.ut1tt(2453750.5, 0.892104561, 64.8499)\n+    vvd(t1, 2453750.5, 1e-6, \"ut1tt\", \"t1\", status)\n+    vvd(t2, 0.8928551385462962963, 1e-12, \"ut1tt\", \"t2\", status)\n+    viv(j, 0, \"ut1tt\", \"j\", status)\n+\n+\n+def test_ut1utc():\n+    u1, u2, j = erfa_ufunc.ut1utc(2453750.5, 0.892104561, 0.3341)\n+    vvd(u1, 2453750.5, 1e-6, \"ut1utc\", \"u1\", status)\n+    vvd(u2, 0.8921006941018518519, 1e-12, \"ut1utc\", \"u2\", status)\n+    viv(j, 0, \"ut1utc\", \"j\", status)\n+\n+\n+def test_utctai():\n+    u1, u2, j = erfa_ufunc.utctai(2453750.5, 0.892100694)\n+    vvd(u1, 2453750.5, 1e-6, \"utctai\", \"u1\", status)\n+    vvd(u2, 0.8924826384444444444, 1e-12, \"utctai\", \"u2\", status)\n+    viv(j, 0, \"utctai\", \"j\", status)\n+\n+\n+def test_utcut1():\n+    u1, u2, j = erfa_ufunc.utcut1(2453750.5, 0.892100694, 0.3341)\n+    vvd(u1, 2453750.5, 1e-6, \"utcut1\", \"u1\", status)\n+    vvd(u2, 0.8921045608981481481, 1e-12, \"utcut1\", \"u2\", status)\n+    viv(j, 0, \"utcut1\", \"j\", status)\n+\n+\n+def test_xy06():\n+    x, y = erfa_ufunc.xy06(2400000.5, 53736.0)\n+    vvd(x, 0.5791308486706010975e-3, 1e-15, \"xy06\", \"x\", status)\n+    vvd(y, 0.4020579816732958141e-4, 1e-16, \"xy06\", \"y\", status)\n+\n+\n+def test_xys00a():\n+    x, y, s = erfa_ufunc.xys00a(2400000.5, 53736.0)\n+    vvd(x,  0.5791308472168152904e-3, 1e-14, \"xys00a\", \"x\", status)\n+    vvd(y,  0.4020595661591500259e-4, 1e-15, \"xys00a\", \"y\", status)\n+    vvd(s, -0.1220040848471549623e-7, 1e-18, \"xys00a\", \"s\", status)\n+\n+\n+def test_xys00b():\n+    x, y, s = erfa_ufunc.xys00b(2400000.5, 53736.0)\n+    vvd(x,  0.5791301929950208873e-3, 1e-14, \"xys00b\", \"x\", status)\n+    vvd(y,  0.4020553681373720832e-4, 1e-15, \"xys00b\", \"y\", status)\n+    vvd(s, -0.1220027377285083189e-7, 1e-18, \"xys00b\", \"s\", status)\n+\n+\n+def test_xys06a():\n+    x, y, s = erfa_ufunc.xys06a(2400000.5, 53736.0)\n+    vvd(x,  0.5791308482835292617e-3, 1e-14, \"xys06a\", \"x\", status)\n+    vvd(y,  0.4020580099454020310e-4, 1e-15, \"xys06a\", \"y\", status)\n+    vvd(s, -0.1220032294164579896e-7, 1e-18, \"xys06a\", \"s\", status)\n+\n+\n+@pytest.mark.xfail(np.__version__ < '1.24', reason='numpy < 1.24 do not support no-input ufuncs')\n+def test_zp():\n+    p = np.empty((3,), float)\n+    p[0] = 0.3\n+    p[1] = 1.2\n+    p[2] = -2.5\n+    p = erfa_ufunc.zp()\n+    vvd(p[0], 0.0, 0.0, \"zp\", \"1\", status)\n+    vvd(p[1], 0.0, 0.0, \"zp\", \"2\", status)\n+    vvd(p[2], 0.0, 0.0, \"zp\", \"3\", status)\n+\n+\n+@pytest.mark.xfail(np.__version__ < '1.21', reason='needs numpy >= 1.21')\n+def test_zpv():\n+    pv = np.empty((), erfa_ufunc.dt_pv)\n+    pv['p'][0] = 0.3\n+    pv['p'][1] = 1.2\n+    pv['p'][2] = -2.5\n+    pv['v'][0] = -0.5\n+    pv['v'][1] = 3.1\n+    pv['v'][2] = 0.9\n+    pv = erfa_ufunc.zpv()\n+    vvd(pv['p'][0], 0.0, 0.0, \"zpv\", \"p1\", status)\n+    vvd(pv['p'][1], 0.0, 0.0, \"zpv\", \"p2\", status)\n+    vvd(pv['p'][2], 0.0, 0.0, \"zpv\", \"p3\", status)\n+    vvd(pv['v'][0], 0.0, 0.0, \"zpv\", \"v1\", status)\n+    vvd(pv['v'][1], 0.0, 0.0, \"zpv\", \"v2\", status)\n+    vvd(pv['v'][2], 0.0, 0.0, \"zpv\", \"v3\", status)\n+\n+\n+@pytest.mark.xfail(np.__version__ < '1.24', reason='numpy < 1.24 do not support no-input ufuncs')\n+def test_zr():\n+    r = np.empty((3, 3), float)\n+    r[0][0] = 2.0\n+    r[1][0] = 3.0\n+    r[2][0] = 2.0\n+    r[0][1] = 3.0\n+    r[1][1] = 2.0\n+    r[2][1] = 3.0\n+    r[0][2] = 3.0\n+    r[1][2] = 4.0\n+    r[2][2] = 5.0\n+    r = erfa_ufunc.zr()\n+    vvd(r[0][0], 0.0, 0.0, \"zr\", \"00\", status)\n+    vvd(r[1][0], 0.0, 0.0, \"zr\", \"01\", status)\n+    vvd(r[2][0], 0.0, 0.0, \"zr\", \"02\", status)\n+    vvd(r[0][1], 0.0, 0.0, \"zr\", \"10\", status)\n+    vvd(r[1][1], 0.0, 0.0, \"zr\", \"11\", status)\n+    vvd(r[2][1], 0.0, 0.0, \"zr\", \"12\", status)\n+    vvd(r[0][2], 0.0, 0.0, \"zr\", \"20\", status)\n+    vvd(r[1][2], 0.0, 0.0, \"zr\", \"21\", status)\n+    vvd(r[2][2], 0.0, 0.0, \"zr\", \"22\", status)\n+\n+\n+def test_status():\n+    assert status == 0, \"Sanity check failed!\"\ndiff --git a/erfa/version.py b/erfa/version.py\nnew file mode 100644\nindex 0000000000..3ff8ac8e8d\n--- /dev/null\n+++ b/erfa/version.py\n@@ -0,0 +1,58 @@\n+\"\"\"Wrapper, ERFA and SOFA version information.\"\"\"\n+\n+# NOTE: First try _dev.scm_version if it exists and setuptools_scm is installed\n+# This file is not included in pyerfa wheels/tarballs, so otherwise it will\n+# fall back on the generated _version module.\n+try:\n+    try:\n+        from ._dev.scm_version import get_version as _get_version\n+        _version = _get_version()\n+        del _get_version\n+    except ImportError:\n+        from ._version import version as _version\n+except Exception:\n+    import warnings\n+    warnings.warn(\n+        f'could not determine {__name__.split(\".\")[0]} package version; '\n+        f'this indicates a broken installation')\n+    del warnings\n+\n+    _version = '0.0.0'\n+\n+# Set the version numbers a bit indirectly, so that Sphinx can pick up\n+# up the docstrings and list the values.\n+try:\n+    from . import ufunc\n+except ImportError as exc:\n+    # If compiled to use a system liberfa, that library can be too old, and\n+    # miss functions that are available in newer liberfa. If so, we should\n+    # bail since nothing will work, but let's try to give a more informative\n+    # error message.\n+    try:\n+        from ctypes import CDLL, util, c_char_p\n+        liberfa = CDLL(util.find_library('erfa'))\n+        liberfa.eraVersion.restype = c_char_p\n+        erfa_version = liberfa.eraVersion().decode('ascii')\n+    except Exception:\n+        pass\n+    else:\n+        if erfa_version.split(\".\")[:2] < _version.split(\".\")[:2]:\n+            raise ImportError(\n+                f\"liberfa {erfa_version} too old for PyERFA {_version}. \"\n+                \"This should only be possible if you are using a system liberfa; \"\n+                \"try installing using 'pip install pyerfa', with environment variable \"\n+                \"PYERFA_USE_SYSTEM_LIBERFA unset or 0.\") from exc\n+\n+    raise\n+\n+\n+version = _version\n+'''Version of the python wrappers.'''\n+\n+erfa_version = ufunc.erfa_version\n+'''Version of the C ERFA library that is wrapped.'''\n+\n+sofa_version = ufunc.sofa_version\n+'''Version of the SOFA library the ERFA library is based on.'''\n+\n+del ufunc, _version\n",
                "model_name_or_path": "claude-3-5-sonnet@20240620_maxiter_30_N_v1.8-no-hint"
            },
            "explanation": [
                {
                    "issue_exp": "",
                    "code_span_exp": "",
                    "patch_exp": "",
                    "new_issues_exp": "",
                    "fixes_issue_exp": "",
                    "msg": ""
                },
                {
                    "issue_exp": "",
                    "code_span_exp": "",
                    "patch_exp": "",
                    "new_issues_exp": "",
                    "fixes_issue_exp": "",
                    "msg": ""
                },
                {
                    "issue_exp": "",
                    "code_span_exp": "",
                    "patch_exp": "",
                    "new_issues_exp": "",
                    "fixes_issue_exp": "",
                    "msg": ""
                },
                {
                    "issue_exp": "",
                    "code_span_exp": "",
                    "patch_exp": "",
                    "new_issues_exp": "",
                    "fixes_issue_exp": "",
                    "msg": ""
                },
                {
                    "issue_exp": "",
                    "code_span_exp": "",
                    "patch_exp": "",
                    "new_issues_exp": "",
                    "fixes_issue_exp": "",
                    "msg": ""
                },
                {
                    "issue_exp": "",
                    "code_span_exp": "",
                    "patch_exp": "",
                    "new_issues_exp": "",
                    "fixes_issue_exp": "",
                    "msg": ""
                },
                {
                    "issue_exp": "",
                    "code_span_exp": "",
                    "patch_exp": "",
                    "new_issues_exp": "",
                    "fixes_issue_exp": "",
                    "msg": ""
                },
                {
                    "issue_exp": "",
                    "code_span_exp": "",
                    "patch_exp": "",
                    "new_issues_exp": "",
                    "fixes_issue_exp": "",
                    "msg": ""
                },
                {
                    "issue_exp": "",
                    "code_span_exp": "",
                    "patch_exp": "",
                    "new_issues_exp": "",
                    "fixes_issue_exp": "",
                    "msg": ""
                },
                {
                    "issue_exp": "",
                    "code_span_exp": "",
                    "patch_exp": "",
                    "new_issues_exp": "",
                    "fixes_issue_exp": "",
                    "msg": ""
                }
            ]
        }
    },
    "top 1 pass": false,
    "top 3 pass": false,
    "top 5 pass": false
}