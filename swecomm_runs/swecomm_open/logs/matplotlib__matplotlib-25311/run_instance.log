2024-08-04 16:49:53,473 - INFO - Environment image sweb.env.x86_64.efa6065ed5bf204410fd53:latest found for matplotlib__matplotlib-25311
Building instance image sweb.eval.x86_64.matplotlib__matplotlib-25311:latest for matplotlib__matplotlib-25311
2024-08-04 16:49:53,475 - INFO - Image sweb.eval.x86_64.matplotlib__matplotlib-25311:latest already exists, skipping build.
2024-08-04 16:49:53,475 - INFO - Creating container for matplotlib__matplotlib-25311...
2024-08-04 16:49:53,506 - INFO - Container for matplotlib__matplotlib-25311 created: ee2b246df100feb5822d624d24cc6f2690e84c206bdd51cd41bc75e57073f1bf
2024-08-04 16:49:53,980 - INFO - Container for matplotlib__matplotlib-25311 started: ee2b246df100feb5822d624d24cc6f2690e84c206bdd51cd41bc75e57073f1bf
2024-08-04 16:49:53,980 - INFO - Intermediate patch for matplotlib__matplotlib-25311 written to logs/run_evaluation/swecomm_open/swecomm_open/matplotlib__matplotlib-25311/patch.diff, now applying to container...
2024-08-04 16:49:54,291 - INFO - Failed to apply patch to container, trying again...
2024-08-04 16:49:54,367 - INFO - >>>>> Applied Patch:
patching file .backup.test_draggable_legend.py
patching file doc/users/.backup.next_whats_new.rst
patching file doc/users/next_whats_new.rst
patching file lib/matplotlib/.backup.legend.py
patching file lib/matplotlib/legend.py
patching file test_draggable_legend.py

2024-08-04 16:49:56,942 - INFO - Git diff before:
diff --git a/doc/users/next_whats_new.rst b/doc/users/next_whats_new.rst
index ddd82faf67..1b8ed8b3f3 100644
--- a/doc/users/next_whats_new.rst
+++ b/doc/users/next_whats_new.rst
@@ -11,3 +11,10 @@ Next what's new?
       :maxdepth: 1
 
       next_whats_new/*
+
+Bug fixes
+---------
+
+* Fixed an issue where figures with draggable legends could not be pickled. The
+  ``DraggableLegend`` helper object is now created only when needed, allowing
+  figures with draggable legends to be pickled successfully.
diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py
index ff6abdb958..d2be37aec5 100644
--- a/lib/matplotlib/legend.py
+++ b/lib/matplotlib/legend.py
@@ -740,6 +740,30 @@ class Legend(Artist):
         self.legendPatch.draw(renderer)
         self._legend_box.draw(renderer)
 
+        # Create DraggableLegend instance if needed
+        if hasattr(self, '_draggable_state') and self._draggable_state:
+            if self._draggable is None:
+                from matplotlib.offsetbox import DraggableBase
+                class DraggableLegend(DraggableBase):
+                    def __init__(self, legend, use_blit=False, update='loc'):
+                        self.legend = legend
+                        super().__init__(legend, use_blit=use_blit)
+                        self.update = update
+
+                    def finalize_offset(self):
+                        loc = self.legend._loc
+                        if self.update == 'loc':
+                            self.legend._loc = loc
+                        elif self.update == 'bbox':
+                            bbox = self.legend.get_bbox_to_anchor()
+                            self.legend.set_bbox_to_anchor(
+                                (bbox.x0 + self.dx, bbox.y0 + self.dy,
+                                 bbox.width, bbox.height),
+                                self.legend.get_bbox_transform())
+                        self.legend.stale = True
+
+                self._draggable = DraggableLegend(self, use_blit=self._draggable_use_blit, update=self._draggable_update)
+
         renderer.close_group('legend')
         self.stale = False
 
@@ -1189,24 +1213,43 @@ class Legend(Artist):
 
         Returns
         -------
-        `.DraggableLegend` or *None*
-            If *state* is ``True`` this returns the `.DraggableLegend` helper
-            instance. Otherwise this returns *None*.
+        bool
+            The draggable state.
+
+        Notes
+        -----
+        The DraggableLegend helper object is created and connected only when
+        needed, allowing the figure to be pickled even with draggable enabled.
         """
+        self._draggable_state = state
+        self._draggable_use_blit = use_blit
+        self._draggable_update = update
+
         if state:
-            if self._draggable is None:
-                self._draggable = DraggableLegend(self,
-                                                  use_blit,
-                                                  update=update)
+            if not hasattr(self, '_draggable'):
+                self._draggable = None
         else:
-            if self._draggable is not None:
+            if hasattr(self, '_draggable') and self._draggable is not None:
                 self._draggable.disconnect()
-            self._draggable = None
-        return self._draggable
+                self._draggable = None
+
+        return state
 
     def get_draggable(self):
-        """Return ``True`` if the legend is draggable, ``False`` otherwise."""
-        return self._draggable is not None
+        """
+        Return ``True`` if the legend is draggable, ``False`` otherwise.
+
+        Returns
+        -------
+        bool
+            The draggable state.
+
+        Notes
+        -----
+        This method returns the stored draggable state, which may differ from
+        whether the DraggableLegend helper object has been created or connected.
+        """
+        return getattr(self, '_draggable_state', False)
 
 
 # Helper functions to parse legend arguments for both `figure.legend` and
2024-08-04 16:49:56,942 - INFO - Eval script for matplotlib__matplotlib-25311 written to logs/run_evaluation/swecomm_open/swecomm_open/matplotlib__matplotlib-25311/eval.sh; copying to container...
2024-08-04 16:51:36,895 - INFO - Test runtime: 99.78 seconds
2024-08-04 16:51:36,895 - INFO - Test output for matplotlib__matplotlib-25311 written to logs/run_evaluation/swecomm_open/swecomm_open/matplotlib__matplotlib-25311/test_output.txt
2024-08-04 16:51:36,994 - INFO - Git diff after:
diff --git a/doc/users/next_whats_new.rst b/doc/users/next_whats_new.rst
index ddd82faf67..1b8ed8b3f3 100644
--- a/doc/users/next_whats_new.rst
+++ b/doc/users/next_whats_new.rst
@@ -11,3 +11,10 @@ Next what's new?
       :maxdepth: 1
 
       next_whats_new/*
+
+Bug fixes
+---------
+
+* Fixed an issue where figures with draggable legends could not be pickled. The
+  ``DraggableLegend`` helper object is now created only when needed, allowing
+  figures with draggable legends to be pickled successfully.
diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py
index ff6abdb958..d2be37aec5 100644
--- a/lib/matplotlib/legend.py
+++ b/lib/matplotlib/legend.py
@@ -740,6 +740,30 @@ class Legend(Artist):
         self.legendPatch.draw(renderer)
         self._legend_box.draw(renderer)
 
+        # Create DraggableLegend instance if needed
+        if hasattr(self, '_draggable_state') and self._draggable_state:
+            if self._draggable is None:
+                from matplotlib.offsetbox import DraggableBase
+                class DraggableLegend(DraggableBase):
+                    def __init__(self, legend, use_blit=False, update='loc'):
+                        self.legend = legend
+                        super().__init__(legend, use_blit=use_blit)
+                        self.update = update
+
+                    def finalize_offset(self):
+                        loc = self.legend._loc
+                        if self.update == 'loc':
+                            self.legend._loc = loc
+                        elif self.update == 'bbox':
+                            bbox = self.legend.get_bbox_to_anchor()
+                            self.legend.set_bbox_to_anchor(
+                                (bbox.x0 + self.dx, bbox.y0 + self.dy,
+                                 bbox.width, bbox.height),
+                                self.legend.get_bbox_transform())
+                        self.legend.stale = True
+
+                self._draggable = DraggableLegend(self, use_blit=self._draggable_use_blit, update=self._draggable_update)
+
         renderer.close_group('legend')
         self.stale = False
 
@@ -1189,24 +1213,43 @@ class Legend(Artist):
 
         Returns
         -------
-        `.DraggableLegend` or *None*
-            If *state* is ``True`` this returns the `.DraggableLegend` helper
-            instance. Otherwise this returns *None*.
+        bool
+            The draggable state.
+
+        Notes
+        -----
+        The DraggableLegend helper object is created and connected only when
+        needed, allowing the figure to be pickled even with draggable enabled.
         """
+        self._draggable_state = state
+        self._draggable_use_blit = use_blit
+        self._draggable_update = update
+
         if state:
-            if self._draggable is None:
-                self._draggable = DraggableLegend(self,
-                                                  use_blit,
-                                                  update=update)
+            if not hasattr(self, '_draggable'):
+                self._draggable = None
         else:
-            if self._draggable is not None:
+            if hasattr(self, '_draggable') and self._draggable is not None:
                 self._draggable.disconnect()
-            self._draggable = None
-        return self._draggable
+                self._draggable = None
+
+        return state
 
     def get_draggable(self):
-        """Return ``True`` if the legend is draggable, ``False`` otherwise."""
-        return self._draggable is not None
+        """
+        Return ``True`` if the legend is draggable, ``False`` otherwise.
+
+        Returns
+        -------
+        bool
+            The draggable state.
+
+        Notes
+        -----
+        This method returns the stored draggable state, which may differ from
+        whether the DraggableLegend helper object has been created or connected.
+        """
+        return getattr(self, '_draggable_state', False)
 
 
 # Helper functions to parse legend arguments for both `figure.legend` and
2024-08-04 16:51:36,994 - INFO - Grading answer for matplotlib__matplotlib-25311...
2024-08-04 16:51:36,997 - INFO - report: {'matplotlib__matplotlib-25311': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': True, 'tests_status': {'FAIL_TO_PASS': {'success': ['lib/matplotlib/tests/test_pickle.py::test_complete[png]'], 'failure': []}, 'PASS_TO_PASS': {'success': ['lib/matplotlib/tests/test_pickle.py::test_simple', 'lib/matplotlib/tests/test_pickle.py::test_gcf', 'lib/matplotlib/tests/test_pickle.py::test_no_pyplot', 'lib/matplotlib/tests/test_pickle.py::test_renderer', 'lib/matplotlib/tests/test_pickle.py::test_image', 'lib/matplotlib/tests/test_pickle.py::test_polar', 'lib/matplotlib/tests/test_pickle.py::test_transform', 'lib/matplotlib/tests/test_pickle.py::test_rrulewrapper', 'lib/matplotlib/tests/test_pickle.py::test_shared', 'lib/matplotlib/tests/test_pickle.py::test_inset_and_secondary', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap0]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap1]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap2]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap3]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap4]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap5]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap6]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap7]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap8]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap9]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap10]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap11]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap12]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap13]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap14]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap15]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap16]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap17]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap18]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap19]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap20]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap21]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap22]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap23]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap24]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap25]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap26]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap27]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap28]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap29]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap30]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap31]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap32]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap33]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap34]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap35]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap36]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap37]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap38]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap39]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap40]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap41]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap42]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap43]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap44]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap45]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap46]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap47]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap48]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap49]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap50]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap51]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap52]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap53]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap54]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap55]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap56]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap57]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap58]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap59]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap60]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap61]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap62]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap63]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap64]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap65]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap66]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap67]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap68]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap69]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap70]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap71]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap72]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap73]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap74]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap75]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap76]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap77]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap78]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap79]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap80]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap81]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap82]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap83]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap84]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap85]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap86]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap87]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap88]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap89]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap90]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap91]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap92]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap93]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap94]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap95]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap96]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap97]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap98]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap99]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap100]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap101]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap102]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap103]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap104]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap105]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap106]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap107]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap108]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap109]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap110]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap111]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap112]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap113]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap114]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap115]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap116]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap117]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap118]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap119]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap120]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap121]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap122]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap123]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap124]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap125]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap126]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap127]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap128]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap129]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap130]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap131]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap132]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap133]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap134]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap135]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap136]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap137]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap138]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap139]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap140]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap141]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap142]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap143]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap144]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap145]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap146]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap147]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap148]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap149]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap150]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap151]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap152]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap153]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap154]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap155]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap156]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap157]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap158]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap159]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap160]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap161]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap162]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap163]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap164]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap165]', 'lib/matplotlib/tests/test_pickle.py::test_unpickle_canvas', 'lib/matplotlib/tests/test_pickle.py::test_mpl_toolkits', 'lib/matplotlib/tests/test_pickle.py::test_standard_norm', 'lib/matplotlib/tests/test_pickle.py::test_dynamic_norm', 'lib/matplotlib/tests/test_pickle.py::test_vertexselector'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for matplotlib__matplotlib-25311: resolved: True
2024-08-04 16:51:36,998 - INFO - Attempting to stop container sweb.eval.matplotlib__matplotlib-25311.swecomm_open...
2024-08-04 16:51:52,634 - INFO - Attempting to remove container sweb.eval.matplotlib__matplotlib-25311.swecomm_open...
2024-08-04 16:51:52,664 - INFO - Container sweb.eval.matplotlib__matplotlib-25311.swecomm_open removed.
