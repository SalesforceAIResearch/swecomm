+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   sympy/printing/pretty/pretty.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	.backup.test_pretty_print.py
	sympy/printing/pretty/.backup.pretty.py
	test_pretty_print.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit eb926a1d0c1158bf43f01eaf673dc84416b5ebb1
Merge: 2ffd68dce2 5480847f65
Author: S.Y. Lee <sylee957@gmail.com>
Date:   Sat Dec 19 02:39:22 2020 +0900

    Merge pull request #20546 from Soumi7/Doc_Series
    
    Doc series

+ git diff eb926a1d0c1158bf43f01eaf673dc84416b5ebb1
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index df7452ee87..844a5cf5df 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -1949,11 +1949,19 @@ def _print_nth_root(self, base, expt):
 
     def _print_Pow(self, power):
         from sympy.simplify.simplify import fraction
+        from sympy.core.numbers import E, pi
         b, e = power.as_base_exp()
+        print(f"Debug: base = {b}, exponent = {e}")
+        
+        if b == pi and (e == 1/E or (hasattr(e, 'func') and e.func.__name__ == 'exp' and e.args[0] == -1)):
+            print("Debug: Detected pi**(1/E)")
+            return prettyForm("π")**prettyForm("1/e")
+
         if power.is_commutative:
             if e is S.NegativeOne:
                 return prettyForm("1")/self._print(b)
             n, d = fraction(e)
+            print(f"Debug: fraction n = {n}, d = {d}")
             if n is S.One and d.is_Atom and not e.is_Integer and self._settings['root_notation']:
                 return self._print_nth_root(b, e)
             if e.is_Rational and e < 0:
@@ -1962,7 +1970,14 @@ def _print_Pow(self, power):
         if b.is_Relational:
             return prettyForm(*self._print(b).parens()).__pow__(self._print(e))
 
-        return self._print(b)**self._print(e)
+        base = self._print(b)
+        if e == 1/E or (hasattr(e, 'func') and e.func.__name__ == 'exp' and e.args[0] == -1):
+            exp = prettyForm("1/e")
+        else:
+            exp = self._print(e)
+        result = base**exp
+        print(f"Debug: Final result = {result}")
+        return result
 
     def _print_UnevaluatedExpr(self, expr):
         return self._print(expr.args[0])
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.8.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.8.dev0
    Uninstalling sympy-1.8.dev0:
      Successfully uninstalled sympy-1.8.dev0
  Running setup.py develop for sympy
Successfully installed sympy-1.8.dev0
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout eb926a1d0c1158bf43f01eaf673dc84416b5ebb1 sympy/printing/pretty/tests/test_pretty.py
Updated 0 paths from b0d900c0e1
+ git apply -v -
Checking patch sympy/printing/pretty/tests/test_pretty.py...
Applied patch sympy/printing/pretty/tests/test_pretty.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ bin/test -C --verbose sympy/printing/pretty/tests/test_pretty.py
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.19-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        76342269
hash randomization: on (PYTHONHASHSEED=263616329)

sympy/printing/pretty/tests/test_pretty.py[142] 
test_pretty_ascii_str ok
test_pretty_unicode_str ok
test_upretty_greek ok
test_upretty_multiindex ok
test_upretty_sub_super ok
test_upretty_subs_missing_in_24 ok
test_missing_in_2X_issue_9047 ok
test_upretty_modifiers ok
test_pretty_Cycle ok
test_pretty_Permutation ok
test_pretty_basic Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1.00000000000000
Debug: fraction n = -1.00000000000000, d = 1
Debug: Final result =  -1.0
x    
Debug: base = x, exponent = -1.00000000000000
Debug: fraction n = -1.00000000000000, d = 1
Debug: Final result =  -1.0
x    
Debug: base = 2, exponent = -1.00000000000000
Debug: fraction n = -1.00000000000000, d = 1
Debug: Final result =  -1.0
2    
Debug: base = 2, exponent = -1.00000000000000
Debug: fraction n = -1.00000000000000, d = 1
Debug: Final result =  -1.0
2    
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 1/3
Debug: fraction n = 1, d = 3
Debug: Final result =  1/3
x   
Debug: base = x, exponent = 1/3
Debug: fraction n = 1, d = 3
Debug: Final result =  1/3
x   
Debug: base = x, exponent = -5/2
Debug: fraction n = -5, d = 2
Debug: base = x, exponent = 5/2
Debug: fraction n = 5, d = 2
Debug: Final result =  5/2
x   
Debug: base = x, exponent = -5/2
Debug: fraction n = -5, d = 2
Debug: base = x, exponent = 5/2
Debug: fraction n = 5, d = 2
Debug: Final result =  5/2
x   
Debug: base = -2, exponent = x
Debug: fraction n = x, d = 1
Debug: Final result =     x
(-2) 
Debug: base = -2, exponent = x
Debug: fraction n = x, d = 1
Debug: Final result =     x
(-2) 
Debug: base = 3, exponent = 1
Debug: fraction n = 1, d = 1
Debug: Final result =  1
3 
Debug: base = 3, exponent = 1
Debug: fraction n = 1, d = 1
Debug: Final result =  1
3 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
ok
test_negative_fractions Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = -a/b
Debug: fraction n = -a, d = b
Debug: Final result =  -a 
 ---
  b 
y   
Debug: base = y, exponent = -a/b
Debug: fraction n = -a, d = b
Debug: Final result =  -a 
 ───
  b 
y   
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = b, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
b 
Debug: base = b, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
b 
ok
test_issue_5524 Debug: base = 5 - y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =        2
(5 - y) 
Debug: base = 2, exponent = 1/2
Debug: fraction n = 1, d = 2
Debug: base = 5 - y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =        2
(5 - y) 
Debug: base = 2, exponent = 1/2
Debug: fraction n = 1, d = 2
ok
test_pretty_ordering Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 4
Debug: fraction n = 4, d = 1
Debug: Final result =  4
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = x, exponent = 4
Debug: fraction n = 4, d = 1
Debug: Final result =  4
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
y 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 4
Debug: fraction n = 4, d = 1
Debug: Final result =  4
x 
Debug: base = x, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
x 
Debug: base = x, exponent = 5
Debug: fraction n = 5, d = 1
Debug: Final result =  5
x 
Debug: base = x, exponent = 6
Debug: fraction n = 6, d = 1
Debug: Final result =  6
x 
Debug: base = x, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
x 
Debug: base = x, exponent = 5
Debug: fraction n = 5, d = 1
Debug: Final result =  5
x 
Debug: base = x, exponent = 6
Debug: fraction n = 6, d = 1
Debug: Final result =  6
x 
Debug: base = x, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
x 
Debug: base = x, exponent = 5
Debug: fraction n = 5, d = 1
Debug: Final result =  5
x 
Debug: base = x, exponent = 6
Debug: fraction n = 6, d = 1
Debug: Final result =  6
x 
Debug: base = x, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
x 
Debug: base = x, exponent = 5
Debug: fraction n = 5, d = 1
Debug: Final result =  5
x 
Debug: base = x, exponent = 6
Debug: fraction n = 6, d = 1
Debug: Final result =  6
x 
Debug: base = x, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
x 
Debug: base = x, exponent = 5
Debug: fraction n = 5, d = 1
Debug: Final result =  5
x 
Debug: base = x, exponent = 6
Debug: fraction n = 6, d = 1
Debug: Final result =  6
x 
Debug: base = x, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
x 
Debug: base = x, exponent = 5
Debug: fraction n = 5, d = 1
Debug: Final result =  5
x 
Debug: base = x, exponent = 6
Debug: fraction n = 6, d = 1
Debug: Final result =  6
x 
ok
test_EulerGamma ok
test_GoldenRatio ok
test_pretty_relational Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
ok
test_Assignment ok
test_AugmentedAssignment ok
test_pretty_rational Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 3/2
Debug: fraction n = 3, d = 2
Debug: Final result =  3/2
y   
Debug: base = x, exponent = 5/2
Debug: fraction n = 5, d = 2
Debug: Final result =  5/2
x   
Debug: base = y, exponent = 3/2
Debug: fraction n = 3, d = 2
Debug: Final result =  3/2
y   
Debug: base = x, exponent = 5/2
Debug: fraction n = 5, d = 2
Debug: Final result =  5/2
x   
Debug: base = sin(x), exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =    3   
sin (x)
Debug: base = tan(x), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
tan (x)
Debug: base = sin(x), exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =    3   
sin (x)
Debug: base = tan(x), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
tan (x)
ok
test_pretty_functions Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = Abs(y - Abs(x)), exponent = -1
Debug: base = Abs(y - Abs(x)), exponent = -1
Debug: base = n, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
n 
Debug: base = n, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
n 
Debug: base = x, exponent = x**(x**(x**(x**x)))
Debug: fraction n = x**(x**(x**(x**x))), d = 1
Debug: base = x, exponent = x**(x**(x**x))
Debug: fraction n = x**(x**(x**x)), d = 1
Debug: base = x, exponent = x**(x**x)
Debug: fraction n = x**(x**x), d = 1
Debug: base = x, exponent = x**x
Debug: fraction n = x**x, d = 1
Debug: base = x, exponent = x
Debug: fraction n = x, d = 1
Debug: Final result =  x
x 
Debug: Final result =  / x\
 \x /
x    
Debug: Final result =  / / x\\
 | \x /|
 \x    /
x       
Debug: Final result =  / / / x\\\
 | | \x /||
 | \x    /|
 \x       /
x          
Debug: Final result =  / / / / x\\\\
 | | | \x /|||
 | | \x    /||
 | \x       /|
 \x          /
x             
Debug: base = x, exponent = x**(x**(x**(x**x)))
Debug: fraction n = x**(x**(x**(x**x))), d = 1
Debug: base = x, exponent = x**(x**(x**x))
Debug: fraction n = x**(x**(x**x)), d = 1
Debug: base = x, exponent = x**(x**x)
Debug: fraction n = x**(x**x), d = 1
Debug: base = x, exponent = x**x
Debug: fraction n = x**x, d = 1
Debug: base = x, exponent = x
Debug: fraction n = x, d = 1
Debug: Final result =  x
x 
Debug: Final result =  ⎛ x⎞
 ⎝x ⎠
x    
Debug: Final result =  ⎛ ⎛ x⎞⎞
 ⎜ ⎝x ⎠⎟
 ⎝x    ⎠
x       
Debug: Final result =  ⎛ ⎛ ⎛ x⎞⎞⎞
 ⎜ ⎜ ⎝x ⎠⎟⎟
 ⎜ ⎝x    ⎠⎟
 ⎝x       ⎠
x          
Debug: Final result =  ⎛ ⎛ ⎛ ⎛ x⎞⎞⎞⎞
 ⎜ ⎜ ⎜ ⎝x ⎠⎟⎟⎟
 ⎜ ⎜ ⎝x    ⎠⎟⎟
 ⎜ ⎝x       ⎠⎟
 ⎝x          ⎠
x             
Debug: base = sin(x), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
sin (x)
Debug: base = sin(x), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
sin (x)
Debug: base = y - floor(x), exponent = -1
Debug: base = y - floor(x), exponent = -1
Debug: base = y - ceiling(x), exponent = -1
Debug: base = y - ceiling(x), exponent = -1
Debug: base = 1 + 1/(1 + 1/n), exponent = -1
Debug: base = 1 + 1/n, exponent = -1
Debug: base = n, exponent = -1
Debug: base = 1 + 1/(1 + 1/n), exponent = -1
Debug: base = 1 + 1/n, exponent = -1
Debug: base = n, exponent = -1
ok
test_pretty_sqrt Debug: base = 2, exponent = 1/2
Debug: fraction n = 1, d = 2
Debug: base = 2, exponent = 1/2
Debug: fraction n = 1, d = 2
Debug: base = 2, exponent = 1/3
Debug: fraction n = 1, d = 3
Debug: base = 2, exponent = 1/3
Debug: fraction n = 1, d = 3
Debug: base = 2, exponent = 1/1000
Debug: fraction n = 1, d = 1000
Debug: base = 2, exponent = 1/1000
Debug: fraction n = 1, d = 1000
Debug: base = x**2 + 1, exponent = 1/2
Debug: fraction n = 1, d = 2
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x**2 + 1, exponent = 1/2
Debug: fraction n = 1, d = 2
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = 1 + sqrt(5), exponent = 1/3
Debug: fraction n = 1, d = 3
Debug: base = 5, exponent = 1/2
Debug: fraction n = 1, d = 2
Debug: base = 1 + sqrt(5), exponent = 1/3
Debug: fraction n = 1, d = 3
Debug: base = 5, exponent = 1/2
Debug: fraction n = 1, d = 2
Debug: base = 2, exponent = 1/x
Debug: fraction n = 1, d = x
Debug: base = 2, exponent = 1/x
Debug: fraction n = 1, d = x
Debug: base = 2 + pi, exponent = 1/2
Debug: fraction n = 1, d = 2
Debug: base = 2 + pi, exponent = 1/2
Debug: fraction n = 1, d = 2
Debug: base = 2 + (x**2 + 1)/(x + 2), exponent = 1/4
Debug: fraction n = 1, d = 4
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 1/1000
Debug: fraction n = 1, d = 1000
Debug: base = x**2 + 3, exponent = 1/2
Debug: fraction n = 1, d = 2
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = 2 + (x**2 + 1)/(x + 2), exponent = 1/4
Debug: fraction n = 1, d = 4
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 1/1000
Debug: fraction n = 1, d = 1000
Debug: base = x**2 + 3, exponent = 1/2
Debug: fraction n = 1, d = 2
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
ok
test_pretty_sqrt_char_knob Debug: base = 2, exponent = 1/2
Debug: fraction n = 1, d = 2
Debug: base = 2, exponent = 1/2
Debug: fraction n = 1, d = 2
ok
test_pretty_sqrt_longsymbol_no_sqrt_char Debug: base = C1, exponent = 1/2
Debug: fraction n = 1, d = 2
ok
test_pretty_KroneckerDelta ok
test_pretty_product Debug: base = n, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
n 
Debug: base = k, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
k 
Debug: base = n, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
n 
Debug: base = k, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
k 
ok
test_pretty_Lambda Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = Lambda(x, x**2), exponent = 2
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: Final result =          2
/      2\ 
\x -> x / 
Debug: base = Lambda(x, x**2), exponent = 2
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: Final result =         2
⎛     2⎞ 
⎝x ↦ x ⎠ 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
ok
test_pretty_TransferFunction ok
test_pretty_Series Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
ok
test_pretty_Parallel Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
ok
test_pretty_Feedback Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
y 
Debug: base = y, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
y 
ok
test_pretty_order Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
ok
test_pretty_derivatives Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
ok
test_pretty_integrals Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = sin(x), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
sin (x)
Debug: base = tan(x), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
tan (x)
Debug: base = sin(x), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
sin (x)
Debug: base = tan(x), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
tan (x)
Debug: base = x, exponent = 2**x
Debug: fraction n = 2**x, d = 1
Debug: base = 2, exponent = x
Debug: fraction n = x, d = 1
Debug: Final result =  x
2 
Debug: Final result =  / x\
 \2 /
x    
Debug: base = x, exponent = 2**x
Debug: fraction n = 2**x, d = 1
Debug: base = 2, exponent = x
Debug: fraction n = x, d = 1
Debug: Final result =  x
2 
Debug: Final result =  ⎛ x⎞
 ⎝2 ⎠
x    
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
ok
test_pretty_matrix Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
ok
test_pretty_ndim_arrays Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = w, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
w 
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = w, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
w 
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = w, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
w 
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = w, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
w 
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = w, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
w 
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = w, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
w 
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = w, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
w 
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = w, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
w 
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
Debug: base = z, exponent = -1
ok
test_tensor_TensorProduct ok
test_diffgeom_print_WedgeProduct ok
test_Adjoint ok
test_pretty_Trace_issue_9044 ok
test_MatrixSlice ok
test_MatrixExpressions Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
ok
test_pretty_dotproduct ok
test_pretty_piecewise Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = Abs(y), exponent = -1
Debug: base = y, exponent = -1
Debug: base = Abs(y), exponent = -1
Debug: base = y, exponent = -1
Debug: base = Piecewise((x, x > 0), (y, True)), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =                2
//x  for x > 0\ 
|<            | 
\\y  otherwise/ 
Debug: base = Piecewise((x, x > 0), (y, True)), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =                2
⎛⎧x  for x > 0⎞ 
⎜⎨            ⎟ 
⎝⎩y  otherwise⎠ 
ok
test_pretty_ITE ok
test_pretty_seq Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = -1
Debug: base = sin(theta), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2       
sin (theta)
Debug: base = cos(phi), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2     
cos (phi)
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = -1
Debug: base = sin(theta), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
sin (θ)
Debug: base = cos(phi), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
cos (φ)
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = -1
Debug: base = sin(theta), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2       
sin (theta)
Debug: base = cos(phi), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2     
cos (phi)
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = -1
Debug: base = sin(theta), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
sin (θ)
Debug: base = cos(phi), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
cos (φ)
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = -1
Debug: base = sin(theta), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2       
sin (theta)
Debug: base = cos(phi), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2     
cos (phi)
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = -1
Debug: base = sin(theta), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
sin (θ)
Debug: base = cos(phi), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
cos (φ)
Debug: base = x, exponent = -1
Debug: base = y, exponent = -1
Debug: base = sin(x), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
sin (x)
Debug: base = x, exponent = -1
Debug: base = y, exponent = -1
Debug: base = sin(x), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
sin (x)
Debug: base = x, exponent = -1
Debug: base = y, exponent = -1
Debug: base = sin(x), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
sin (x)
Debug: base = x, exponent = -1
Debug: base = y, exponent = -1
Debug: base = sin(x), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2   
sin (x)
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
ok
test_any_object_in_sequence ok
test_print_builtin_set Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
ok
test_pretty_sets Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
ok
test_pretty_SetExpr ok
test_pretty_ImageSet Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
ok
test_pretty_ConditionSet ok
test_pretty_ComplexRegion ok
test_pretty_Union_issue_10414 ok
test_pretty_Intersection_issue_10414 ok
test_ProductSet_exponent ok
test_ProductSet_parenthesis ok
test_ProductSet_prod_char_issue_10413 ok
test_pretty_sequences ok
test_pretty_FourierSeries ok
test_pretty_FormalPowerSeries Debug: base = -1, exponent = -_k
Debug: fraction n = -_k, d = 1
Debug: Final result =     -k
(-1)  
Debug: base = x, exponent = _k
Debug: fraction n = _k, d = 1
Debug: Final result =  k
x 
Debug: base = -1, exponent = -_k
Debug: fraction n = -_k, d = 1
Debug: Final result =     -k
(-1)  
Debug: base = x, exponent = _k
Debug: fraction n = _k, d = 1
Debug: Final result =  k
x 
ok
test_pretty_limits Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = Limit(x, x, 0), exponent = 2
Debug: Final result =         2
/ lim x\ 
\x->0+ / 
Debug: base = Limit(x, x, 0), exponent = 2
Debug: Final result =         2
⎛ lim x⎞ 
⎝x─→0⁺ ⎠ 
ok
test_pretty_ComplexRootOf Debug: base = x, exponent = 5
Debug: fraction n = 5, d = 1
Debug: Final result =  5
x 
Debug: base = x, exponent = 5
Debug: fraction n = 5, d = 1
Debug: Final result =  5
x 
ok
test_pretty_RootSum Debug: base = x, exponent = 5
Debug: fraction n = 5, d = 1
Debug: Final result =  5
x 
Debug: base = x, exponent = 5
Debug: fraction n = 5, d = 1
Debug: Final result =  5
x 
Debug: base = x, exponent = 5
Debug: fraction n = 5, d = 1
Debug: Final result =  5
x 
Debug: base = x, exponent = 5
Debug: fraction n = 5, d = 1
Debug: Final result =  5
x 
ok
test_GroebnerBasis Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 4
Debug: fraction n = 4, d = 1
Debug: Final result =  4
y 
Debug: base = y, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = y, exponent = 4
Debug: fraction n = 4, d = 1
Debug: Final result =  4
y 
Debug: base = y, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
y 
Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
ok
test_pretty_UniversalSet ok
test_pretty_Boolean ok
test_pretty_Domain ok
test_pretty_prec ok
test_pprint ok
test_pretty_class ok
test_pretty_no_wrap_line ok
test_settings ok
test_pretty_sum Debug: base = k, exponent = k
Debug: fraction n = k, d = 1
Debug: Final result =  k
k 
Debug: base = k, exponent = k
Debug: fraction n = k, d = 1
Debug: Final result =  k
k 
Debug: base = k, exponent = k
Debug: fraction n = k, d = 1
Debug: Final result =  k
k 
Debug: base = k, exponent = k
Debug: fraction n = k, d = 1
Debug: Final result =  k
k 
Debug: base = k, exponent = Integral(x**n, (x, -oo, oo))
Debug: fraction n = Integral(x**n, (x, -oo, oo)), d = 1
Debug: base = x, exponent = n
Debug: fraction n = n, d = 1
Debug: Final result =  n
x 
Debug: Final result =   oo      
   /      
  |       
  |   n   
  |  x  dx
  |       
 /        
 -oo      
k         
Debug: base = n, exponent = n
Debug: fraction n = n, d = 1
Debug: Final result =  n
n 
Debug: base = k, exponent = Integral(x**n, (x, -oo, oo))
Debug: fraction n = Integral(x**n, (x, -oo, oo)), d = 1
Debug: base = x, exponent = n
Debug: fraction n = n, d = 1
Debug: Final result =  n
x 
Debug: Final result =  ∞       
 ⌠       
 ⎮   n   
 ⎮  x  dx
 ⌡       
 -∞      
k        
Debug: base = n, exponent = n
Debug: fraction n = n, d = 1
Debug: Final result =  n
n 
Debug: base = k, exponent = Integral(x**n, (x, -oo, oo))
Debug: fraction n = Integral(x**n, (x, -oo, oo)), d = 1
Debug: base = x, exponent = n
Debug: fraction n = n, d = 1
Debug: Final result =  n
x 
Debug: Final result =   oo      
   /      
  |       
  |   n   
  |  x  dx
  |       
 /        
 -oo      
k         
Debug: base = x, exponent = x
Debug: fraction n = x, d = 1
Debug: Final result =  x
x 
Debug: base = k, exponent = Integral(x**n, (x, -oo, oo))
Debug: fraction n = Integral(x**n, (x, -oo, oo)), d = 1
Debug: base = x, exponent = n
Debug: fraction n = n, d = 1
Debug: Final result =  n
x 
Debug: Final result =  ∞       
 ⌠       
 ⎮   n   
 ⎮  x  dx
 ⌡       
 -∞      
k        
Debug: base = x, exponent = x
Debug: fraction n = x, d = 1
Debug: Final result =  x
x 
Debug: base = k, exponent = Integral(x**n, (x, -oo, oo))
Debug: fraction n = Integral(x**n, (x, -oo, oo)), d = 1
Debug: base = x, exponent = n
Debug: fraction n = n, d = 1
Debug: Final result =  n
x 
Debug: Final result =   oo      
   /      
  |       
  |   n   
  |  x  dx
  |       
 /        
 -oo      
k         
Debug: base = x, exponent = x
Debug: fraction n = x, d = 1
Debug: Final result =  x
x 
Debug: base = n, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
n 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = -1
Debug: base = k, exponent = Integral(x**n, (x, -oo, oo))
Debug: fraction n = Integral(x**n, (x, -oo, oo)), d = 1
Debug: base = x, exponent = n
Debug: fraction n = n, d = 1
Debug: Final result =  n
x 
Debug: Final result =  ∞       
 ⌠       
 ⎮   n   
 ⎮  x  dx
 ⌡       
 -∞      
k        
Debug: base = x, exponent = x
Debug: fraction n = x, d = 1
Debug: Final result =  x
x 
Debug: base = n, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
n 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = -1
Debug: base = k, exponent = Integral(x**n, (x, -oo, oo))
Debug: fraction n = Integral(x**n, (x, -oo, oo)), d = 1
Debug: base = x, exponent = n
Debug: fraction n = n, d = 1
Debug: Final result =  n
x 
Debug: Final result =   oo      
   /      
  |       
  |   n   
  |  x  dx
  |       
 /        
 -oo      
k         
Debug: base = n, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
n 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = -1
Debug: base = k, exponent = Integral(x**n, (x, -oo, oo))
Debug: fraction n = Integral(x**n, (x, -oo, oo)), d = 1
Debug: base = x, exponent = n
Debug: fraction n = n, d = 1
Debug: Final result =  n
x 
Debug: Final result =  ∞       
 ⌠       
 ⎮   n   
 ⎮  x  dx
 ⌡       
 -∞      
k        
Debug: base = n, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
n 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = -1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
x 
Debug: base = x, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
x 
Debug: base = x**3*y**(x/2), exponent = n
Debug: fraction n = n, d = 1
Debug: base = x, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
x 
Debug: base = y, exponent = x/2
Debug: fraction n = x, d = 2
Debug: Final result =  x
 -
 2
y 
Debug: Final result =        n
/    x\ 
|    -| 
| 3  2| 
\x *y / 
Debug: base = x**3*y**(x/2), exponent = n
Debug: fraction n = n, d = 1
Debug: base = x, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
x 
Debug: base = y, exponent = x/2
Debug: fraction n = x, d = 2
Debug: Final result =  x
 ─
 2
y 
Debug: Final result =        n
⎛    x⎞ 
⎜    ─⎟ 
⎜ 3  2⎟ 
⎝x ⋅y ⎠ 
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = -2
Debug: fraction n = -2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = y, exponent = -a/b
Debug: fraction n = -a, d = b
Debug: Final result =  -a 
 ---
  b 
y   
Debug: base = y, exponent = -a/b
Debug: fraction n = -a, d = b
Debug: Final result =  -a 
 ───
  b 
y   
Debug: base = 1 + 1/(1 + 1/k), exponent = -1
Debug: base = 1 + 1/k, exponent = -1
Debug: base = k, exponent = -1
Debug: base = n, exponent = -1
Debug: base = m + 1, exponent = -1
Debug: base = 1 + 1/k, exponent = -1
Debug: base = k, exponent = -1
Debug: base = 1 + 1/(1 + 1/k), exponent = -1
Debug: base = 1 + 1/k, exponent = -1
Debug: base = k, exponent = -1
Debug: base = n, exponent = -1
Debug: base = m + 1, exponent = -1
Debug: base = 1 + 1/k, exponent = -1
Debug: base = k, exponent = -1
ok
test_units Debug: base = meter, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =      2
meter 
Debug: base = second, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =       2
second 
Debug: base = meter, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =      2
meter 
Debug: base = second, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =       2
second 
Debug: base = meter, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =      2
meter 
Debug: base = second, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =       2
second 
Debug: base = meter, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =      2
meter 
Debug: base = second, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =       2
second 
ok
test_pretty_Subs Debug: base = phi, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =    2
phi 
Debug: base = phi, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
φ 
ok
test_gammas ok
test_beta ok
test_function_subclass_different_name ok
test_SingularityFunction ok
test_deltas ok
test_hyper Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = 1 + 1/(1 + 1/(1 + 1/x)), exponent = -1
Debug: base = 1 + 1/(1 + 1/x), exponent = -1
Debug: base = 1 + 1/x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = 1 + 1/(1 + 1/(1 + 1/x)), exponent = -1
Debug: base = 1 + 1/(1 + 1/x), exponent = -1
Debug: base = 1 + 1/x, exponent = -1
Debug: base = x, exponent = -1
ok
test_meijerg Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = z, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
z 
Debug: base = 1 + 1/(1 + 1/(1 + 1/x)), exponent = -1
Debug: base = 1 + 1/(1 + 1/x), exponent = -1
Debug: base = 1 + 1/x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = 1 + 1/(1 + 1/(1 + 1/x)), exponent = -1
Debug: base = 1 + 1/(1 + 1/x), exponent = -1
Debug: base = 1 + 1/x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = 1 + 1/(1 + 1/(1 + 1/x)), exponent = -1
Debug: base = 1 + 1/(1 + 1/x), exponent = -1
Debug: base = 1 + 1/x, exponent = -1
Debug: base = x, exponent = -1
Debug: base = 1 + 1/(1 + 1/(1 + 1/x)), exponent = -1
Debug: base = 1 + 1/(1 + 1/x), exponent = -1
Debug: base = 1 + 1/x, exponent = -1
Debug: base = x, exponent = -1
ok
test_noncommutative Debug: base = C, exponent = -1
Debug: Final result =  -1
C  
Debug: base = C, exponent = -1
Debug: Final result =  -1
C  
Debug: base = C, exponent = -1
Debug: Final result =  -1
C  
Debug: base = C, exponent = -1
Debug: Final result =  -1
C  
Debug: base = C, exponent = -1
Debug: Final result =  -1
C  
Debug: base = C, exponent = -1
Debug: Final result =  -1
C  
Debug: base = C, exponent = -1
Debug: Final result =  -1
C  
Debug: base = C, exponent = -1
Debug: Final result =  -1
C  
ok
test_pretty_special_functions Debug: base = 2, exponent = 1/2
Debug: fraction n = 1, d = 2
Debug: base = x, exponent = 1/2
Debug: fraction n = 1, d = 2
Debug: base = 2, exponent = 1/2
Debug: fraction n = 1, d = 2
Debug: base = x, exponent = 1/2
Debug: fraction n = 1, d = 2
ok
test_pretty_geometry ok
test_expint ok
test_elliptic_functions Debug: base = z + 1, exponent = -1
Debug: base = z + 1, exponent = -1
Debug: base = z + 1, exponent = -1
Debug: base = z + 1, exponent = -1
Debug: base = z + 1, exponent = -1
Debug: base = z + 1, exponent = -1
Debug: base = z + 1, exponent = -1
Debug: base = z + 1, exponent = -1
ok
test_RandomDomain ok
test_PrettyPoly ok
test_issue_6285 Debug: base = 2, exponent = -5
Debug: fraction n = -5, d = 1
Debug: base = 2, exponent = 5
Debug: fraction n = 5, d = 1
Debug: Final result =  5
2 
Debug: base = x, exponent = 1/pi
Debug: fraction n = 1, d = pi
F
test_issue_6359 Debug: base = Integral(x**2, x), exponent = 2
Debug: fraction n = 2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: Final result =           2
/  /     \ 
| |      | 
| |  2   | 
| | x  dx| 
| |      | 
\/       / 
Debug: base = Integral(x**2, x), exponent = 2
Debug: fraction n = 2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: Final result =          2
⎛⌠      ⎞ 
⎜⎮  2   ⎟ 
⎜⎮ x  dx⎟ 
⎝⌡      ⎠ 
Debug: base = Sum(x**2, (x, 0, 1)), exponent = 2
Debug: fraction n = 2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: Final result =           2
/  1     \ 
| ___    | 
| \  `   | 
|  \    2| 
|  /   x | 
| /__,   | 
\x = 0   / 
Debug: base = Sum(x**2, (x, 0, 1)), exponent = 2
Debug: fraction n = 2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: Final result =           2
⎛  1     ⎞ 
⎜ ___    ⎟ 
⎜ ╲      ⎟ 
⎜  ╲    2⎟ 
⎜  ╱   x ⎟ 
⎜ ╱      ⎟ 
⎜ ‾‾‾    ⎟ 
⎝x = 0   ⎠ 
Debug: base = Product(x**2, (x, 1, 2)), exponent = 2
Debug: fraction n = 2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: Final result =            2
/  2      \ 
|______   | 
| |  |   2| 
| |  |  x | 
| |  |    | 
\x = 1    / 
Debug: base = Product(x**2, (x, 1, 2)), exponent = 2
Debug: fraction n = 2, d = 1
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: Final result =            2
⎛  2      ⎞ 
⎜─┬──┬─   ⎟ 
⎜ │  │   2⎟ 
⎜ │  │  x ⎟ 
⎜ │  │    ⎟ 
⎝x = 1    ⎠ 
Debug: base = Derivative(f(x), x), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =           2
/d       \ 
|--(f(x))| 
\dx      / 
Debug: base = Derivative(f(x), x), exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =           2
⎛d       ⎞ 
⎜──(f(x))⎟ 
⎝dx      ⎠ 
ok
test_issue_6739 Debug: base = x, exponent = -1/2
Debug: fraction n = -1, d = 2
Debug: base = x, exponent = 1/2
Debug: fraction n = 1, d = 2
Debug: base = x, exponent = -1/2
Debug: fraction n = -1, d = 2
Debug: base = x, exponent = 1/2
Debug: fraction n = 1, d = 2
ok
test_complicated_symbol_unchanged ok
test_categories ok
test_PrettyModules Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
ok
test_QuotientRing Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
ok
test_Homomorphism ok
test_Tr ok
test_pretty_Add ok
test_issue_7179 ok
test_issue_7180 ok
test_pretty_Complement ok
test_pretty_SymmetricDifference ok
test_pretty_Contains ok
test_issue_8292 Debug: base = x + (-1)*1, exponent = 4
Debug: fraction n = 4, d = 1
Debug: Final result =        4
(x - 1) 
Debug: base = x + (-1)*1, exponent = 4
Debug: fraction n = 4, d = 1
Debug: Final result =        4
(x - 1) 
Debug: base = x, exponent = 4
Debug: fraction n = 4, d = 1
Debug: Final result =  4
x 
Debug: base = x + (-1)*1, exponent = 4
Debug: fraction n = 4, d = 1
Debug: Final result =        4
(x - 1) 
Debug: base = x + (-1)*1, exponent = 4
Debug: fraction n = 4, d = 1
Debug: Final result =        4
(x - 1) 
Debug: base = x, exponent = 4
Debug: fraction n = 4, d = 1
Debug: Final result =  4
x 
ok
test_issue_4335 ok
test_issue_8344 Debug: base = y, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
y 
Debug: base = 1, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
1 
ok
test_issue_6324 Debug: base = 2, exponent = 3
Debug: fraction n = 3, d = 1
Debug: Final result =  3
2 
Debug: base = 10, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =   2
10 
ok
test_issue_7927 Debug: base = sin(x/2), exponent = cos(x/2)
Debug: fraction n = cos(x/2), d = 1
Debug: Final result =            ⎛x⎞
        cos⎜─⎟
           ⎝2⎠
⎛   ⎛x⎞⎞      
⎜sin⎜─⎟⎟      
⎝   ⎝2⎠⎠      
Debug: base = sin(x), exponent = 11/13
Debug: fraction n = 11, d = 13
Debug: Final result =         11
        ──
        13
(sin(x))  
ok
test_issue_6134 Debug: base = x, exponent = 2
Debug: fraction n = 2, d = 1
Debug: Final result =  2
x 
ok
test_issue_9877 ok
test_issue_13651 ok
test_pretty_primenu ok
test_pretty_primeomega ok
test_pretty_Mod ok
test_issue_11801 ok
test_pretty_UnevaluatedExpr Debug: base = x, exponent = -1
Debug: base = 1/x, exponent = 2
Debug: base = x, exponent = -1
Debug: Final result =    2
⎛1⎞ 
⎜─⎟ 
⎝x⎠ 
Debug: base = x, exponent = -1
Debug: base = x, exponent = -1
ok
test_issue_10472 ok
test_MatrixElement_printing ok
test_issue_12675 Debug: base = x/y, exponent = t
Debug: fraction n = t, d = 1
Debug: Final result =    t
⎛x⎞ 
⎜─⎟ 
⎝y⎠ 
Debug: base = y, exponent = -1
ok
test_MatrixSymbol_printing ok
test_degree_printing ok
test_vector_expr_pretty_printing ok
test_pretty_print_tensor_expr ok
test_pretty_print_tensor_partial_deriv ok
test_issue_15560 ok
test_print_lerchphi ok
test_issue_15583 ok
test_matrixSymbolBold ok
test_center_accent ok
test_imaginary_unit ok
test_str_special_matrices ok
test_pretty_misc_functions ok
test_hadamard_power ok
test_issue_17258 ok
test_is_combining ok
test_issue_17616 Debug: base = pi, exponent = exp(-1)
Debug: Detected pi**(1/E)
F
test_issue_17857 ok
test_issue_18272 ok
test_Str ok
test_diffgeom ok                                                          [FAIL]


________________________________________________________________________________
__________ sympy/printing/pretty/tests/test_pretty.py:test_issue_6285 __________
Traceback (most recent call last):
  File "/testbed/sympy/printing/pretty/tests/test_pretty.py", line 5945, in test_issue_6285
    assert pretty(Pow(x, (1/pi))) == \
AssertionError
________________________________________________________________________________
_________ sympy/printing/pretty/tests/test_pretty.py:test_issue_17616 __________
Traceback (most recent call last):
  File "/testbed/sympy/printing/pretty/tests/test_pretty.py", line 7213, in test_issue_17616
    assert pretty(pi**(1/exp(1))) == \
AssertionError

============ tests finished: 140 passed, 2 failed, in 8.39 seconds =============
DO *NOT* COMMIT!
+ git checkout eb926a1d0c1158bf43f01eaf673dc84416b5ebb1 sympy/printing/pretty/tests/test_pretty.py
Updated 1 path from b0d900c0e1
