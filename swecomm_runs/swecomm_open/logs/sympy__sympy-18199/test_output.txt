+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   sympy/ntheory/residue_ntheory.py
	modified:   sympy/ntheory/tests/test_residue.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	sympy/ntheory/.backup.residue_ntheory.py
	sympy/ntheory/tests/.backup.test_residue.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit ba80d1e493f21431b4bf729b3e0452cd47eb9566
Merge: f8e7019fed e3fc1f64ca
Author: Francesco Bonazzi <franz.bonazzi@gmail.com>
Date:   Sat Jan 4 22:23:37 2020 +0100

    Merge pull request #18224 from Upabjojr/fix_tensor_index_structure
    
    Tensor module: refactory to allow mixing PartialDerivative and TensAdd

+ git diff ba80d1e493f21431b4bf729b3e0452cd47eb9566
diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py
index 9a3052d4c3..cf1e58a237 100644
--- a/sympy/ntheory/residue_ntheory.py
+++ b/sympy/ntheory/residue_ntheory.py
@@ -765,9 +765,15 @@ def nthroot_mod(a, n, p, all_roots=False):
     [8, 11]
     >>> nthroot_mod(68, 3, 109)
     23
+    >>> nthroot_mod(0, 5, 17)
+    0
+    >>> nthroot_mod(0, 5, 17, True)
+    [0]
     """
     from sympy.core.numbers import igcdex
     a, n, p = as_int(a), as_int(n), as_int(p)
+    if a % p == 0:
+        return 0 if not all_roots else [0]
     if n == 2:
         return sqrt_mod(a, p, all_roots)
     # see Hackman "Elementary Number Theory" (2009), page 76
diff --git a/sympy/ntheory/tests/test_residue.py b/sympy/ntheory/tests/test_residue.py
index d4854547be..b0f38654cd 100644
--- a/sympy/ntheory/tests/test_residue.py
+++ b/sympy/ntheory/tests/test_residue.py
@@ -1,6 +1,141 @@
 from collections import defaultdict
 from sympy import S, Symbol, Tuple
 from sympy.core.compatibility import range
+import unittest
+
+from sympy.ntheory import n_order, is_primitive_root, is_quad_residue, \
+    legendre_symbol, jacobi_symbol, totient, primerange, sqrt_mod, \
+    primitive_root, quadratic_residues, is_nthpow_residue, nthroot_mod, \
+    sqrt_mod_iter, mobius, discrete_log
+from sympy.ntheory.residue_ntheory import _primitive_root_prime_iter, \
+    _discrete_log_trial_mul, _discrete_log_shanks_steps, \
+    _discrete_log_pollard_rho, _discrete_log_pohlig_hellman
+from sympy.polys.domains import ZZ
+
+class TestResidue(unittest.TestCase):
+    def test_n_order(self):
+        self.assertEqual(n_order(2, 13), 12)
+        self.assertEqual([n_order(a, 7) for a in range(1, 7)], [1, 3, 6, 3, 6, 2])
+        self.assertEqual(n_order(5, 17), 16)
+        self.assertEqual(n_order(17, 11), n_order(6, 11))
+        self.assertEqual(n_order(101, 119), 6)
+        self.assertEqual(n_order(11, (10**50 + 151)**2), 10000000000000000000000000000000000000000000000030100000000000000000000000000000000000000000000022650)
+        with self.assertRaises(ValueError):
+            n_order(6, 9)
+
+    def test_is_primitive_root(self):
+        self.assertFalse(is_primitive_root(2, 7))
+        self.assertFalse(is_primitive_root(3, 8))
+        self.assertFalse(is_primitive_root(11, 14))
+        self.assertEqual(is_primitive_root(12, 17), is_primitive_root(29, 17))
+        with self.assertRaises(ValueError):
+            is_primitive_root(3, 6)
+
+    def test_primitive_root(self):
+        for p in primerange(3, 100):
+            it = _primitive_root_prime_iter(p)
+            self.assertEqual(len(list(it)), totient(totient(p)))
+        self.assertEqual(primitive_root(97), 5)
+        self.assertEqual(primitive_root(97**2), 5)
+        self.assertEqual(primitive_root(40487), 5)
+        self.assertEqual(primitive_root(40487**2), 10)
+        self.assertEqual(primitive_root(82), 7)
+        p = 10**50 + 151
+        self.assertEqual(primitive_root(p), 11)
+        self.assertEqual(primitive_root(2*p), 11)
+        self.assertEqual(primitive_root(p**2), 11)
+        with self.assertRaises(ValueError):
+            primitive_root(-3)
+
+    def test_quad_residue(self):
+        self.assertFalse(is_quad_residue(3, 7))
+        self.assertTrue(is_quad_residue(10, 13))
+        self.assertEqual(is_quad_residue(12364, 139), is_quad_residue(12364 % 139, 139))
+        self.assertTrue(is_quad_residue(207, 251))
+        self.assertTrue(is_quad_residue(0, 1))
+        self.assertTrue(is_quad_residue(1, 1))
+        self.assertTrue(is_quad_residue(0, 2))
+        self.assertTrue(is_quad_residue(1, 4))
+        self.assertFalse(is_quad_residue(2, 27))
+        self.assertTrue(is_quad_residue(13122380800, 13604889600))
+        self.assertEqual([j for j in range(14) if is_quad_residue(j, 14)], [0, 1, 2, 4, 7, 8, 9, 11])
+        with self.assertRaises(ValueError):
+            is_quad_residue(1.1, 2)
+        with self.assertRaises(ValueError):
+            is_quad_residue(2, 0)
+
+    def test_quadratic_residues(self):
+        self.assertEqual(quadratic_residues(S.One), [0])
+        self.assertEqual(quadratic_residues(1), [0])
+        self.assertEqual(quadratic_residues(12), [0, 1, 4, 9])
+        self.assertEqual(quadratic_residues(13), [0, 1, 3, 4, 9, 10, 12])
+        self.assertEqual([len(quadratic_residues(i)) for i in range(1, 20)],
+                         [1, 2, 2, 2, 3, 4, 4, 3, 4, 6, 6, 4, 7, 8, 6, 4, 9, 8, 10])
+
+    def test_sqrt_mod(self):
+        self.assertEqual(list(sqrt_mod_iter(6, 2)), [0])
+        self.assertEqual(sqrt_mod(3, 13), 4)
+        self.assertEqual(sqrt_mod(3, -13), 4)
+        self.assertEqual(sqrt_mod(6, 23), 11)
+        self.assertEqual(sqrt_mod(345, 690), 345)
+        self.assertIsNone(sqrt_mod(67, 101))
+        self.assertIsNone(sqrt_mod(1020, 104729))
+
+        for p in range(3, 100):
+            d = defaultdict(list)
+            for i in range(p):
+                d[pow(i, 2, p)].append(i)
+            for i in range(1, p):
+                it = sqrt_mod_iter(i, p)
+                v = sqrt_mod(i, p, True)
+                if v:
+                    v = sorted(v)
+                    self.assertEqual(d[i], v)
+                else:
+                    self.assertFalse(d[i])
+
+        self.assertEqual(sqrt_mod(9, 27, True), [3, 6, 12, 15, 21, 24])
+        self.assertEqual(sqrt_mod(9, 81, True), [3, 24, 30, 51, 57, 78])
+        self.assertEqual(sqrt_mod(9, 3**5, True), [3, 78, 84, 159, 165, 240])
+        self.assertEqual(sqrt_mod(81, 3**4, True), [0, 9, 18, 27, 36, 45, 54, 63, 72])
+        self.assertEqual(sqrt_mod(81, 3**5, True), [9, 18, 36, 45, 63, 72, 90, 99, 117, 126, 144, 153, 171, 180, 198, 207, 225, 234])
+        self.assertEqual(sqrt_mod(81, 3**6, True), [9, 72, 90, 153, 171, 234, 252, 315, 333, 396, 414, 477, 495, 558, 576, 639, 657, 720])
+
+    def test_nthroot_mod(self):
+        self.assertEqual(nthroot_mod(0, 5, 17), 0)
+        self.assertEqual(nthroot_mod(0, 5, 17, True), [0])
+        self.assertEqual(nthroot_mod(17*17, 5, 17), 0)
+        self.assertEqual(nthroot_mod(17*17, 5, 17, True), [0])
+        self.assertEqual(nthroot_mod(1801, 11, 2663), 44)
+        self.assertIsNone(nthroot_mod(11, 3, 109))
+        with self.assertRaises(NotImplementedError):
+            nthroot_mod(16, 5, 36)
+        with self.assertRaises(NotImplementedError):
+            nthroot_mod(9, 16, 36)
+
+        for a, q, p in [(51922, 2, 203017), (43, 3, 109), (1801, 11, 2663),
+                        (26118163, 1303, 33333347), (1499, 7, 2663), (595, 6, 2663),
+                        (1714, 12, 2663), (28477, 9, 33343)]:
+            r = nthroot_mod(a, q, p)
+            self.assertEqual(pow(r, q, p), a)
+
+        for p in primerange(5, 100):
+            qv = range(3, p, 4)
+            for q in qv:
+                d = defaultdict(list)
+                for i in range(p):
+                    d[pow(i, q, p)].append(i)
+                for a in range(1, p - 1):
+                    res = nthroot_mod(a, q, p, True)
+                    if d[a]:
+                        self.assertEqual(d[a], res)
+                    else:
+                        self.assertIsNone(res)
+
+if __name__ == '__main__':
+    unittest.main()
+from sympy import S, Symbol, Tuple
+from sympy.core.compatibility import range
 
 from sympy.ntheory import n_order, is_primitive_root, is_quad_residue, \
     legendre_symbol, jacobi_symbol, totient, primerange, sqrt_mod, \
@@ -237,6 +372,12 @@ def test_residue():
     assert _discrete_log_pohlig_hellman(78723213, 11**31, 11) == 31
     assert _discrete_log_pohlig_hellman(32942478, 11**98, 11) == 98
     assert _discrete_log_pohlig_hellman(14789363, 11**444, 11) == 444
+    # New tests for nthroot_mod
+    assert nthroot_mod(0, 5, 17) == 0
+    assert nthroot_mod(0, 5, 17, True) == [0]
+    assert nthroot_mod(17*17, 5, 17) == 0
+    assert nthroot_mod(17*17, 5, 17, True) == [0]
+
     assert discrete_log(587, 2**9, 2) == 9
     assert discrete_log(2456747, 3**51, 3) == 51
     assert discrete_log(32942478, 11**127, 11) == 127
@@ -244,3 +385,7 @@ def test_residue():
     args = 5779, 3528, 6215
     assert discrete_log(*args) == 687
     assert discrete_log(*Tuple(*args)) == 687
+
+if __name__ == '__main__':
+    import unittest
+    unittest.main()
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.6.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.6.dev0
    Uninstalling sympy-1.6.dev0:
      Successfully uninstalled sympy-1.6.dev0
  Running setup.py develop for sympy
Successfully installed sympy-1.6.dev0
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout ba80d1e493f21431b4bf729b3e0452cd47eb9566 sympy/ntheory/tests/test_residue.py sympy/solvers/tests/test_solveset.py
Updated 1 path from c922b8dd9a
+ git apply -v -
Checking patch sympy/ntheory/tests/test_residue.py...
Checking patch sympy/solvers/tests/test_solveset.py...
Applied patch sympy/ntheory/tests/test_residue.py cleanly.
Applied patch sympy/solvers/tests/test_solveset.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ bin/test -C --verbose sympy/ntheory/tests/test_residue.py sympy/solvers/tests/test_solveset.py
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.19-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        30939778
hash randomization: on (PYTHONHASHSEED=2457485850)

sympy/ntheory/tests/test_residue.py[1] 
test_residue E                                                            [FAIL]

sympy/solvers/tests/test_solveset.py[131] 
test_invert_real ok
test_invert_complex ok
test_domain_check ok
test_issue_11536 ok
test_issue_17479 ok
test_is_function_class_equation ok
test_garbage_input ok
test_solve_mul ok
test_solve_invert ok
test_errorinverses ok
test_solve_polynomial ok
test_return_root_of ok
test__has_rational_power ok
test_solveset_sqrt_1 ok
test_solveset_sqrt_2 ok
test_solve_sqrt_fail f
test_solve_sqrt_3 Slow w
test_solve_polynomial_symbolic_param ok
test_solve_rational ok
test_solveset_real_gen_is_pow ok
test_no_sol ok
test_sol_zero_real ok
test_no_sol_rational_extragenous ok
test_solve_polynomial_cv_1a ok
test_solveset_real_rational ok
test_solveset_real_log ok
test_poly_gens ok
test_solve_abs ok
test_issue_9565 ok
test_issue_10069 ok
test_real_imag_splitting ok
test_units ok
test_solve_only_exp_1 ok
test_atan2 ok
test_piecewise_solveset ok
test_solveset_complex_polynomial ok
test_sol_zero_complex ok
test_solveset_complex_rational ok
test_solve_quintics This test is too slow s
test_solveset_complex_exp ok
test_solveset_real_exp ok
test_solve_complex_log ok
test_solve_complex_sqrt ok
test_solveset_complex_tan ok
test_solve_trig F
test_solve_hyperbolic F
test_solve_invalid_sol ok
test_solve_trig_simplified f
test_solve_lambert f
test_other_lambert f
test_solveset ok
test__solveset_multi ok
test_conditionset ok
test_conditionset_equality f
test_solveset_domain ok
test_improve_coverage ok
test_issue_9522 ok
test_solvify ok
test_abs_invert_solvify ok
test_linear_eq_to_matrix ok
test_issue_16577 ok
test_linsolve ok
test_linsolve_immutable ok
test_solve_decomposition ok
test_nonlinsolve_basic ok
test_nonlinsolve_abs ok
test_raise_exception_nonlinsolve ok
test_trig_system ok
test_trig_system_fail f
test_nonlinsolve_positive_dimensional ok
test_nonlinsolve_polysys ok
test_nonlinsolve_using_substitution ok
test_nonlinsolve_complex ok
test_solve_nonlinear_trans f
test_issue_5132_1 ok
test_issue_5132_2 ok
test_issue_6752 ok
test_issue_5114_solveset slow s
test_issue_2777 ok
test_issue_8828 ok
test_nonlinsolve_conditionset ok
test_substitution_basic ok
test_issue_5132_substitution ok
test_raises_substitution ok
test_issue_9556 ok
test_issue_9611 ok
test_issue_9557 ok
test_issue_9778 ok
test_issue_10214 ok
test_issue_9849 ok
test_issue_9953 ok
test_issue_9913 ok
test_issue_10397 ok
test_issue_14987 ok
test_simplification ok
test_issue_10555 ok
test_issue_8715 ok
test_issue_11174 ok
test_issue_11534 ok
test_issue_10477 ok
test_issue_10671 ok
test_issue_11064 ok
test_issue_12478 ok
test_issue_12429 ok
test_solveset_arg ok
test__is_finite_with_finite_vars ok
test_issue_13550 ok
test_issue_13849 ok
test_issue_14223 ok
test_issue_10158 ok
test_issue_14300 ok
test_issue_14454 ok
test_term_factors ok
test_transolve ok
test_exponential_real ok
test_exponential_complex f
test_expo_conditionset ok
test_exponential_symbols ok
test_issue_10864 f
test_solve_only_exp_2 f
test_is_exponential ok
test_solve_exponential ok
test_logarithmic ok
test_uselogcombine_2 f
test_is_logarithmic ok
test_solve_logarithm ok
test_linear_coeffs ok
test_is_modular ok
test_invert_modular ok
test_solve_modular F
test_solve_modular_fail f                                                 [FAIL]


________________________________ slowest tests _________________________________
test_solve_decomposition - Took 10.601 seconds
test_issue_17479 - Took 23.711 seconds
________________________________________________________________________________
_______________ sympy/ntheory/tests/test_residue.py:test_residue _______________
Traceback (most recent call last):
  File "/testbed/sympy/ntheory/tests/test_residue.py", line 166, in test_residue
    assert nthroot_mod(29, 31, 74) == [45]
  File "/testbed/sympy/ntheory/residue_ntheory.py", line 783, in nthroot_mod
    raise NotImplementedError("Not implemented for composite p")
NotImplementedError: Not implemented for composite p

________________________________________________________________________________
_____________ sympy/solvers/tests/test_solveset.py:test_solve_trig _____________
Traceback (most recent call last):
  File "/testbed/sympy/solvers/tests/test_solveset.py", line 786, in test_solve_trig
    assert solveset_complex(cos(x) - S.Half, x) == \
AssertionError
________________________________________________________________________________
__________ sympy/solvers/tests/test_solveset.py:test_solve_hyperbolic __________
Traceback (most recent call last):
  File "/testbed/sympy/solvers/tests/test_solveset.py", line 840, in test_solve_hyperbolic
    assert solveset_complex(sinh(x) - I/2, x) == Union(
AssertionError
________________________________________________________________________________
___________ sympy/solvers/tests/test_solveset.py:test_solve_modular ____________
Traceback (most recent call last):
  File "/testbed/sympy/solvers/tests/test_solveset.py", line 2246, in test_solve_modular
    assert solveset(Mod(x**3, 8) - 1, x, S.Integers) == \
AssertionError

 tests finished: 113 passed, 3 failed, 3 skipped, 12 expected to fail, 
1 exceptions, in 131.46 seconds 
DO *NOT* COMMIT!
+ git checkout ba80d1e493f21431b4bf729b3e0452cd47eb9566 sympy/ntheory/tests/test_residue.py sympy/solvers/tests/test_solveset.py
Updated 2 paths from c922b8dd9a
