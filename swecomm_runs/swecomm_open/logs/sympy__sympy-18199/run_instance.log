2024-08-04 16:56:38,714 - INFO - Environment image sweb.env.x86_64.c795f4b88616b8462021ed:latest found for sympy__sympy-18199
Building instance image sweb.eval.x86_64.sympy__sympy-18199:latest for sympy__sympy-18199
2024-08-04 16:56:55,959 - INFO - Creating container for sympy__sympy-18199...
2024-08-04 16:56:55,990 - INFO - Container for sympy__sympy-18199 created: 13560721eb8d6d26ef5f887f108cf99ef6ef031bbc18dd468d0b90d651455830
2024-08-04 16:56:56,331 - INFO - Container for sympy__sympy-18199 started: 13560721eb8d6d26ef5f887f108cf99ef6ef031bbc18dd468d0b90d651455830
2024-08-04 16:56:56,331 - INFO - Intermediate patch for sympy__sympy-18199 written to logs/run_evaluation/swecomm_open/swecomm_open/sympy__sympy-18199/patch.diff, now applying to container...
2024-08-04 16:56:56,508 - INFO - Failed to apply patch to container, trying again...
2024-08-04 16:56:56,553 - INFO - >>>>> Applied Patch:
patching file sympy/ntheory/.backup.residue_ntheory.py
patching file sympy/ntheory/residue_ntheory.py
patching file sympy/ntheory/tests/.backup.test_residue.py
patching file sympy/ntheory/tests/test_residue.py

2024-08-04 16:56:56,965 - INFO - Git diff before:
diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py
index 9a3052d4c3..cf1e58a237 100644
--- a/sympy/ntheory/residue_ntheory.py
+++ b/sympy/ntheory/residue_ntheory.py
@@ -765,9 +765,15 @@ def nthroot_mod(a, n, p, all_roots=False):
     [8, 11]
     >>> nthroot_mod(68, 3, 109)
     23
+    >>> nthroot_mod(0, 5, 17)
+    0
+    >>> nthroot_mod(0, 5, 17, True)
+    [0]
     """
     from sympy.core.numbers import igcdex
     a, n, p = as_int(a), as_int(n), as_int(p)
+    if a % p == 0:
+        return 0 if not all_roots else [0]
     if n == 2:
         return sqrt_mod(a, p, all_roots)
     # see Hackman "Elementary Number Theory" (2009), page 76
diff --git a/sympy/ntheory/tests/test_residue.py b/sympy/ntheory/tests/test_residue.py
index d4854547be..b0f38654cd 100644
--- a/sympy/ntheory/tests/test_residue.py
+++ b/sympy/ntheory/tests/test_residue.py
@@ -1,6 +1,141 @@
 from collections import defaultdict
 from sympy import S, Symbol, Tuple
 from sympy.core.compatibility import range
+import unittest
+
+from sympy.ntheory import n_order, is_primitive_root, is_quad_residue, \
+    legendre_symbol, jacobi_symbol, totient, primerange, sqrt_mod, \
+    primitive_root, quadratic_residues, is_nthpow_residue, nthroot_mod, \
+    sqrt_mod_iter, mobius, discrete_log
+from sympy.ntheory.residue_ntheory import _primitive_root_prime_iter, \
+    _discrete_log_trial_mul, _discrete_log_shanks_steps, \
+    _discrete_log_pollard_rho, _discrete_log_pohlig_hellman
+from sympy.polys.domains import ZZ
+
+class TestResidue(unittest.TestCase):
+    def test_n_order(self):
+        self.assertEqual(n_order(2, 13), 12)
+        self.assertEqual([n_order(a, 7) for a in range(1, 7)], [1, 3, 6, 3, 6, 2])
+        self.assertEqual(n_order(5, 17), 16)
+        self.assertEqual(n_order(17, 11), n_order(6, 11))
+        self.assertEqual(n_order(101, 119), 6)
+        self.assertEqual(n_order(11, (10**50 + 151)**2), 10000000000000000000000000000000000000000000000030100000000000000000000000000000000000000000000022650)
+        with self.assertRaises(ValueError):
+            n_order(6, 9)
+
+    def test_is_primitive_root(self):
+        self.assertFalse(is_primitive_root(2, 7))
+        self.assertFalse(is_primitive_root(3, 8))
+        self.assertFalse(is_primitive_root(11, 14))
+        self.assertEqual(is_primitive_root(12, 17), is_primitive_root(29, 17))
+        with self.assertRaises(ValueError):
+            is_primitive_root(3, 6)
+
+    def test_primitive_root(self):
+        for p in primerange(3, 100):
+            it = _primitive_root_prime_iter(p)
+            self.assertEqual(len(list(it)), totient(totient(p)))
+        self.assertEqual(primitive_root(97), 5)
+        self.assertEqual(primitive_root(97**2), 5)
+        self.assertEqual(primitive_root(40487), 5)
+        self.assertEqual(primitive_root(40487**2), 10)
+        self.assertEqual(primitive_root(82), 7)
+        p = 10**50 + 151
+        self.assertEqual(primitive_root(p), 11)
+        self.assertEqual(primitive_root(2*p), 11)
+        self.assertEqual(primitive_root(p**2), 11)
+        with self.assertRaises(ValueError):
+            primitive_root(-3)
+
+    def test_quad_residue(self):
+        self.assertFalse(is_quad_residue(3, 7))
+        self.assertTrue(is_quad_residue(10, 13))
+        self.assertEqual(is_quad_residue(12364, 139), is_quad_residue(12364 % 139, 139))
+        self.assertTrue(is_quad_residue(207, 251))
+        self.assertTrue(is_quad_residue(0, 1))
+        self.assertTrue(is_quad_residue(1, 1))
+        self.assertTrue(is_quad_residue(0, 2))
+        self.assertTrue(is_quad_residue(1, 4))
+        self.assertFalse(is_quad_residue(2, 27))
+        self.assertTrue(is_quad_residue(13122380800, 13604889600))
+        self.assertEqual([j for j in range(14) if is_quad_residue(j, 14)], [0, 1, 2, 4, 7, 8, 9, 11])
+        with self.assertRaises(ValueError):
+            is_quad_residue(1.1, 2)
+        with self.assertRaises(ValueError):
+            is_quad_residue(2, 0)
+
+    def test_quadratic_residues(self):
+        self.assertEqual(quadratic_residues(S.One), [0])
+        self.assertEqual(quadratic_residues(1), [0])
+        self.assertEqual(quadratic_residues(12), [0, 1, 4, 9])
+        self.assertEqual(quadratic_residues(13), [0, 1, 3, 4, 9, 10, 12])
+        self.assertEqual([len(quadratic_residues(i)) for i in range(1, 20)],
+                         [1, 2, 2, 2, 3, 4, 4, 3, 4, 6, 6, 4, 7, 8, 6, 4, 9, 8, 10])
+
+    def test_sqrt_mod(self):
+        self.assertEqual(list(sqrt_mod_iter(6, 2)), [0])
+        self.assertEqual(sqrt_mod(3, 13), 4)
+        self.assertEqual(sqrt_mod(3, -13), 4)
+        self.assertEqual(sqrt_mod(6, 23), 11)
+        self.assertEqual(sqrt_mod(345, 690), 345)
+        self.assertIsNone(sqrt_mod(67, 101))
+        self.assertIsNone(sqrt_mod(1020, 104729))
+
+        for p in range(3, 100):
+            d = defaultdict(list)
+            for i in range(p):
+                d[pow(i, 2, p)].append(i)
+            for i in range(1, p):
+                it = sqrt_mod_iter(i, p)
+                v = sqrt_mod(i, p, True)
+                if v:
+                    v = sorted(v)
+                    self.assertEqual(d[i], v)
+                else:
+                    self.assertFalse(d[i])
+
+        self.assertEqual(sqrt_mod(9, 27, True), [3, 6, 12, 15, 21, 24])
+        self.assertEqual(sqrt_mod(9, 81, True), [3, 24, 30, 51, 57, 78])
+        self.assertEqual(sqrt_mod(9, 3**5, True), [3, 78, 84, 159, 165, 240])
+        self.assertEqual(sqrt_mod(81, 3**4, True), [0, 9, 18, 27, 36, 45, 54, 63, 72])
+        self.assertEqual(sqrt_mod(81, 3**5, True), [9, 18, 36, 45, 63, 72, 90, 99, 117, 126, 144, 153, 171, 180, 198, 207, 225, 234])
+        self.assertEqual(sqrt_mod(81, 3**6, True), [9, 72, 90, 153, 171, 234, 252, 315, 333, 396, 414, 477, 495, 558, 576, 639, 657, 720])
+
+    def test_nthroot_mod(self):
+        self.assertEqual(nthroot_mod(0, 5, 17), 0)
+        self.assertEqual(nthroot_mod(0, 5, 17, True), [0])
+        self.assertEqual(nthroot_mod(17*17, 5, 17), 0)
+        self.assertEqual(nthroot_mod(17*17, 5, 17, True), [0])
+        self.assertEqual(nthroot_mod(1801, 11, 2663), 44)
+        self.assertIsNone(nthroot_mod(11, 3, 109))
+        with self.assertRaises(NotImplementedError):
+            nthroot_mod(16, 5, 36)
+        with self.assertRaises(NotImplementedError):
+            nthroot_mod(9, 16, 36)
+
+        for a, q, p in [(51922, 2, 203017), (43, 3, 109), (1801, 11, 2663),
+                        (26118163, 1303, 33333347), (1499, 7, 2663), (595, 6, 2663),
+                        (1714, 12, 2663), (28477, 9, 33343)]:
+            r = nthroot_mod(a, q, p)
+            self.assertEqual(pow(r, q, p), a)
+
+        for p in primerange(5, 100):
+            qv = range(3, p, 4)
+            for q in qv:
+                d = defaultdict(list)
+                for i in range(p):
+                    d[pow(i, q, p)].append(i)
+                for a in range(1, p - 1):
+                    res = nthroot_mod(a, q, p, True)
+                    if d[a]:
+                        self.assertEqual(d[a], res)
+                    else:
+                        self.assertIsNone(res)
+
+if __name__ == '__main__':
+    unittest.main()
+from sympy import S, Symbol, Tuple
+from sympy.core.compatibility import range
 
 from sympy.ntheory import n_order, is_primitive_root, is_quad_residue, \
     legendre_symbol, jacobi_symbol, totient, primerange, sqrt_mod, \
@@ -237,6 +372,12 @@ def test_residue():
     assert _discrete_log_pohlig_hellman(78723213, 11**31, 11) == 31
     assert _discrete_log_pohlig_hellman(32942478, 11**98, 11) == 98
     assert _discrete_log_pohlig_hellman(14789363, 11**444, 11) == 444
+    # New tests for nthroot_mod
+    assert nthroot_mod(0, 5, 17) == 0
+    assert nthroot_mod(0, 5, 17, True) == [0]
+    assert nthroot_mod(17*17, 5, 17) == 0
+    assert nthroot_mod(17*17, 5, 17, True) == [0]
+
     assert discrete_log(587, 2**9, 2) == 9
     assert discrete_log(2456747, 3**51, 3) == 51
     assert discrete_log(32942478, 11**127, 11) == 127
@@ -244,3 +385,7 @@ def test_residue():
     args = 5779, 3528, 6215
     assert discrete_log(*args) == 687
     assert discrete_log(*Tuple(*args)) == 687
+
+if __name__ == '__main__':
+    import unittest
+    unittest.main()
2024-08-04 16:56:56,966 - INFO - Eval script for sympy__sympy-18199 written to logs/run_evaluation/swecomm_open/swecomm_open/sympy__sympy-18199/eval.sh; copying to container...
2024-08-04 16:59:12,691 - INFO - Test runtime: 135.59 seconds
2024-08-04 16:59:12,691 - INFO - Test output for sympy__sympy-18199 written to logs/run_evaluation/swecomm_open/swecomm_open/sympy__sympy-18199/test_output.txt
2024-08-04 16:59:12,730 - INFO - Git diff after:
diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py
index 9a3052d4c3..cf1e58a237 100644
--- a/sympy/ntheory/residue_ntheory.py
+++ b/sympy/ntheory/residue_ntheory.py
@@ -765,9 +765,15 @@ def nthroot_mod(a, n, p, all_roots=False):
     [8, 11]
     >>> nthroot_mod(68, 3, 109)
     23
+    >>> nthroot_mod(0, 5, 17)
+    0
+    >>> nthroot_mod(0, 5, 17, True)
+    [0]
     """
     from sympy.core.numbers import igcdex
     a, n, p = as_int(a), as_int(n), as_int(p)
+    if a % p == 0:
+        return 0 if not all_roots else [0]
     if n == 2:
         return sqrt_mod(a, p, all_roots)
     # see Hackman "Elementary Number Theory" (2009), page 76
2024-08-04 16:59:12,730 - INFO - Git diff changed after running eval script
2024-08-04 16:59:12,730 - INFO - Grading answer for sympy__sympy-18199...
2024-08-04 16:59:12,732 - INFO - report: {'sympy__sympy-18199': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_solve_modular']}, 'PASS_TO_PASS': {'success': ['test_invert_real', 'test_invert_complex', 'test_domain_check', 'test_issue_11536', 'test_issue_17479', 'test_is_function_class_equation', 'test_garbage_input', 'test_solve_mul', 'test_solve_invert', 'test_errorinverses', 'test_solve_polynomial', 'test_return_root_of', 'test__has_rational_power', 'test_solveset_sqrt_1', 'test_solveset_sqrt_2', 'test_solve_polynomial_symbolic_param', 'test_solve_rational', 'test_solveset_real_gen_is_pow', 'test_no_sol', 'test_sol_zero_real', 'test_no_sol_rational_extragenous', 'test_solve_polynomial_cv_1a', 'test_solveset_real_rational', 'test_solveset_real_log', 'test_poly_gens', 'test_solve_abs', 'test_issue_9565', 'test_issue_10069', 'test_real_imag_splitting', 'test_units', 'test_solve_only_exp_1', 'test_atan2', 'test_piecewise_solveset', 'test_solveset_complex_polynomial', 'test_sol_zero_complex', 'test_solveset_complex_rational', 'test_solveset_complex_exp', 'test_solveset_real_exp', 'test_solve_complex_log', 'test_solve_complex_sqrt', 'test_solveset_complex_tan', 'test_solve_invalid_sol', 'test_solveset', 'test__solveset_multi', 'test_conditionset', 'test_solveset_domain', 'test_improve_coverage', 'test_issue_9522', 'test_solvify', 'test_abs_invert_solvify', 'test_linear_eq_to_matrix', 'test_issue_16577', 'test_linsolve', 'test_linsolve_immutable', 'test_solve_decomposition', 'test_nonlinsolve_basic', 'test_nonlinsolve_abs', 'test_raise_exception_nonlinsolve', 'test_trig_system', 'test_nonlinsolve_positive_dimensional', 'test_nonlinsolve_polysys', 'test_nonlinsolve_using_substitution', 'test_nonlinsolve_complex', 'test_issue_5132_1', 'test_issue_5132_2', 'test_issue_6752', 'test_issue_2777', 'test_issue_8828', 'test_nonlinsolve_conditionset', 'test_substitution_basic', 'test_issue_5132_substitution', 'test_raises_substitution', 'test_issue_9556', 'test_issue_9611', 'test_issue_9557', 'test_issue_9778', 'test_issue_10214', 'test_issue_9849', 'test_issue_9953', 'test_issue_9913', 'test_issue_10397', 'test_issue_14987', 'test_simplification', 'test_issue_10555', 'test_issue_8715', 'test_issue_11174', 'test_issue_11534', 'test_issue_10477', 'test_issue_10671', 'test_issue_11064', 'test_issue_12478', 'test_issue_12429', 'test_solveset_arg', 'test__is_finite_with_finite_vars', 'test_issue_13550', 'test_issue_13849', 'test_issue_14223', 'test_issue_10158', 'test_issue_14300', 'test_issue_14454', 'test_term_factors', 'test_transolve', 'test_exponential_real', 'test_expo_conditionset', 'test_exponential_symbols', 'test_is_exponential', 'test_solve_exponential', 'test_logarithmic', 'test_is_logarithmic', 'test_solve_logarithm', 'test_linear_coeffs', 'test_is_modular', 'test_invert_modular'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-18199: resolved: False
2024-08-04 16:59:12,732 - INFO - Attempting to stop container sweb.eval.sympy__sympy-18199.swecomm_open...
2024-08-04 16:59:27,931 - INFO - Attempting to remove container sweb.eval.sympy__sympy-18199.swecomm_open...
2024-08-04 16:59:27,957 - INFO - Container sweb.eval.sympy__sympy-18199.swecomm_open removed.
