diff --git a/django/core/management/commands/.backup.inspectdb.py b/django/core/management/commands/.backup.inspectdb.py
new file mode 100644
index 0000000000..74b1159d7b
--- /dev/null
+++ b/django/core/management/commands/.backup.inspectdb.py
@@ -0,0 +1,391 @@
+import keyword
+import re
+
+from django.core.management.base import BaseCommand, CommandError
+from django.db import DEFAULT_DB_ALIAS, connections
+from django.db.models.constants import LOOKUP_SEP
+
+
+class Command(BaseCommand):
+    help = (
+        "Introspects the database tables in the given database and outputs a Django "
+        "model module."
+    )
+    requires_system_checks = []
+    stealth_options = ("table_name_filter",)
+    db_module = "django.db"
+
+    def add_arguments(self, parser):
+        parser.add_argument(
+            "table",
+            nargs="*",
+            type=str,
+            help="Selects what tables or views should be introspected.",
+        )
+        parser.add_argument(
+            "--database",
+            default=DEFAULT_DB_ALIAS,
+            help=(
+                'Nominates a database to introspect. Defaults to using the "default" '
+                "database."
+            ),
+        )
+        parser.add_argument(
+            "--include-partitions",
+            action="store_true",
+            help="Also output models for partition tables.",
+        )
+        parser.add_argument(
+            "--include-views",
+            action="store_true",
+            help="Also output models for database views.",
+        )
+
+    def handle(self, **options):
+        try:
+            for line in self.handle_inspection(options):
+                self.stdout.write(line)
+        except NotImplementedError:
+            raise CommandError(
+                "Database inspection isn't supported for the currently selected "
+                "database backend."
+            )
+
+    def handle_inspection(self, options):
+        connection = connections[options["database"]]
+        # 'table_name_filter' is a stealth option
+        table_name_filter = options.get("table_name_filter")
+
+        def table2model(table_name):
+            return re.sub(r"[^a-zA-Z0-9]", "", table_name.title())
+
+        with connection.cursor() as cursor:
+            yield "# This is an auto-generated Django model module."
+            yield "# You'll have to do the following manually to clean this up:"
+            yield "#   * Rearrange models' order"
+            yield "#   * Make sure each model has one field with primary_key=True"
+            yield (
+                "#   * Make sure each ForeignKey and OneToOneField has `on_delete` set "
+                "to the desired behavior"
+            )
+            yield (
+                "#   * Remove `managed = False` lines if you wish to allow "
+                "Django to create, modify, and delete the table"
+            )
+            yield (
+                "# Feel free to rename the models, but don't rename db_table values or "
+                "field names."
+            )
+            yield "from %s import models" % self.db_module
+            known_models = []
+            table_info = connection.introspection.get_table_list(cursor)
+
+            # Determine types of tables and/or views to be introspected.
+            types = {"t"}
+            if options["include_partitions"]:
+                types.add("p")
+            if options["include_views"]:
+                types.add("v")
+
+            for table_name in options["table"] or sorted(
+                info.name for info in table_info if info.type in types
+            ):
+                if table_name_filter is not None and callable(table_name_filter):
+                    if not table_name_filter(table_name):
+                        continue
+                try:
+                    try:
+                        relations = connection.introspection.get_relations(
+                            cursor, table_name
+                        )
+                    except NotImplementedError:
+                        relations = {}
+                    try:
+                        constraints = connection.introspection.get_constraints(
+                            cursor, table_name
+                        )
+                    except NotImplementedError:
+                        constraints = {}
+                    primary_key_columns = (
+                        connection.introspection.get_primary_key_columns(
+                            cursor, table_name
+                        )
+                    )
+                    primary_key_column = (
+                        primary_key_columns[0] if primary_key_columns else None
+                    )
+                    unique_columns = [
+                        c["columns"][0]
+                        for c in constraints.values()
+                        if c["unique"] and len(c["columns"]) == 1
+                    ]
+                    table_description = connection.introspection.get_table_description(
+                        cursor, table_name
+                    )
+                except Exception as e:
+                    yield "# Unable to inspect table '%s'" % table_name
+                    yield "# The error was: %s" % e
+                    continue
+
+                yield ""
+                yield ""
+                yield "class %s(models.Model):" % table2model(table_name)
+                known_models.append(table2model(table_name))
+                used_column_names = []  # Holds column names used in the table so far
+                column_to_field_name = {}  # Maps column names to names of model fields
+                for row in table_description:
+                    comment_notes = (
+                        []
+                    )  # Holds Field notes, to be displayed in a Python comment.
+                    extra_params = {}  # Holds Field parameters such as 'db_column'.
+                    column_name = row.name
+                    is_relation = column_name in relations
+
+                    att_name, params, notes = self.normalize_col_name(
+                        column_name, used_column_names, is_relation
+                    )
+                    extra_params.update(params)
+                    comment_notes.extend(notes)
+
+                    used_column_names.append(att_name)
+                    column_to_field_name[column_name] = att_name
+
+                    # Add primary_key and unique, if necessary.
+                    if column_name == primary_key_column:
+                        extra_params["primary_key"] = True
+                        if len(primary_key_columns) > 1:
+                            comment_notes.append(
+                                "The composite primary key (%s) found, that is not "
+                                "supported. The first column is selected."
+                                % ", ".join(primary_key_columns)
+                            )
+                    elif column_name in unique_columns:
+                        extra_params["unique"] = True
+
+                    if is_relation:
+                        ref_db_column, ref_db_table = relations[column_name]
+                        if extra_params.pop("unique", False) or extra_params.get(
+                            "primary_key"
+                        ):
+                            rel_type = "OneToOneField"
+                        else:
+                            rel_type = "ForeignKey"
+                            ref_pk_column = (
+                                connection.introspection.get_primary_key_column(
+                                    cursor, ref_db_table
+                                )
+                            )
+                            if ref_pk_column and ref_pk_column != ref_db_column:
+                                extra_params["to_field"] = ref_db_column
+                        rel_to = (
+                            "self"
+                            if ref_db_table == table_name
+                            else table2model(ref_db_table)
+                        )
+                        if rel_to in known_models:
+                            field_type = "%s(%s" % (rel_type, rel_to)
+                        else:
+                            field_type = "%s('%s'" % (rel_type, rel_to)
+                    else:
+                        # Calling `get_field_type` to get the field type string and any
+                        # additional parameters and notes.
+                        field_type, field_params, field_notes = self.get_field_type(
+                            connection, table_name, row
+                        )
+                        extra_params.update(field_params)
+                        comment_notes.extend(field_notes)
+
+                        field_type += "("
+
+                    # Don't output 'id = meta.AutoField(primary_key=True)', because
+                    # that's assumed if it doesn't exist.
+                    if att_name == "id" and extra_params == {"primary_key": True}:
+                        if field_type == "AutoField(":
+                            continue
+                        elif (
+                            field_type
+                            == connection.features.introspected_field_types["AutoField"]
+                            + "("
+                        ):
+                            comment_notes.append("AutoField?")
+
+                    # Add 'null' and 'blank', if the 'null_ok' flag was present in the
+                    # table description.
+                    if row.null_ok:  # If it's NULL...
+                        extra_params["blank"] = True
+                        extra_params["null"] = True
+
+                    field_desc = "%s = %s%s" % (
+                        att_name,
+                        # Custom fields will have a dotted path
+                        "" if "." in field_type else "models.",
+                        field_type,
+                    )
+                    if field_type.startswith(("ForeignKey(", "OneToOneField(")):
+                        field_desc += ", models.DO_NOTHING"
+
+                    if extra_params:
+                        if not field_desc.endswith("("):
+                            field_desc += ", "
+                        field_desc += ", ".join(
+                            "%s=%r" % (k, v) for k, v in extra_params.items()
+                        )
+                    field_desc += ")"
+                    if comment_notes:
+                        field_desc += "  # " + " ".join(comment_notes)
+                    yield "    %s" % field_desc
+                is_view = any(
+                    info.name == table_name and info.type == "v" for info in table_info
+                )
+                is_partition = any(
+                    info.name == table_name and info.type == "p" for info in table_info
+                )
+                yield from self.get_meta(
+                    table_name, constraints, column_to_field_name, is_view, is_partition
+                )
+
+    def normalize_col_name(self, col_name, used_column_names, is_relation):
+        """
+        Modify the column name to make it Python-compatible as a field name
+        """
+        field_params = {}
+        field_notes = []
+
+        new_name = col_name.lower()
+        if new_name != col_name:
+            field_notes.append("Field name made lowercase.")
+
+        if is_relation:
+            if new_name.endswith("_id"):
+                new_name = new_name[:-3]
+            else:
+                field_params["db_column"] = col_name
+
+        new_name, num_repl = re.subn(r"\W", "_", new_name)
+        if num_repl > 0:
+            field_notes.append("Field renamed to remove unsuitable characters.")
+
+        if new_name.find(LOOKUP_SEP) >= 0:
+            while new_name.find(LOOKUP_SEP) >= 0:
+                new_name = new_name.replace(LOOKUP_SEP, "_")
+            if col_name.lower().find(LOOKUP_SEP) >= 0:
+                # Only add the comment if the double underscore was in the original name
+                field_notes.append(
+                    "Field renamed because it contained more than one '_' in a row."
+                )
+
+        if new_name.startswith("_"):
+            new_name = "field%s" % new_name
+            field_notes.append("Field renamed because it started with '_'.")
+
+        if new_name.endswith("_"):
+            new_name = "%sfield" % new_name
+            field_notes.append("Field renamed because it ended with '_'.")
+
+        if keyword.iskeyword(new_name):
+            new_name += "_field"
+            field_notes.append("Field renamed because it was a Python reserved word.")
+
+        if new_name[0].isdigit():
+            new_name = "number_%s" % new_name
+            field_notes.append(
+                "Field renamed because it wasn't a valid Python identifier."
+            )
+
+        if new_name in used_column_names:
+            num = 0
+            while "%s_%d" % (new_name, num) in used_column_names:
+                num += 1
+            new_name = "%s_%d" % (new_name, num)
+            field_notes.append("Field renamed because of name conflict.")
+
+        if col_name != new_name and field_notes:
+            field_params["db_column"] = col_name
+
+        return new_name, field_params, field_notes
+
+    def get_field_type(self, connection, table_name, row):
+        """
+        Given the database connection, the table name, and the cursor row
+        description, this routine will return the given field type name, as
+        well as any additional keyword parameters and notes for the field.
+        """
+        field_params = {}
+        field_notes = []
+
+        try:
+            field_type = connection.introspection.get_field_type(row.type_code, row)
+        except KeyError:
+            field_type = "TextField"
+            field_notes.append("This field type is a guess.")
+
+        # Add max_length for all CharFields.
+        if field_type == "CharField" and row.internal_size:
+            field_params["max_length"] = int(row.internal_size)
+
+        if field_type in {"CharField", "TextField"} and row.collation:
+            field_params["db_collation"] = row.collation
+
+        if field_type == "DecimalField":
+            if row.precision is None or row.scale is None:
+                field_notes.append(
+                    "max_digits and decimal_places have been guessed, as this "
+                    "database handles decimal fields as float"
+                )
+                field_params["max_digits"] = (
+                    row.precision if row.precision is not None else 10
+                )
+                field_params["decimal_places"] = (
+                    row.scale if row.scale is not None else 5
+                )
+            else:
+                field_params["max_digits"] = row.precision
+                field_params["decimal_places"] = row.scale
+
+        # Add related_name for ForeignKey and OneToOneField
+        if field_type in {"ForeignKey", "OneToOneField"}:
+            field_params["related_name"] = f"{table_name}_{row.name}"
+            field_notes.append("Field name made into a related_name.")
+
+        return field_type, field_params, field_notes
+
+    def get_meta(
+        self, table_name, constraints, column_to_field_name, is_view, is_partition
+    ):
+        """
+        Return a sequence comprising the lines of code necessary
+        to construct the inner Meta class for the model corresponding
+        to the given database table name.
+        """
+        unique_together = []
+        has_unsupported_constraint = False
+        for params in constraints.values():
+            if params["unique"]:
+                columns = params["columns"]
+                if None in columns:
+                    has_unsupported_constraint = True
+                columns = [
+                    x for x in columns if x is not None and x in column_to_field_name
+                ]
+                if len(columns) > 1:
+                    unique_together.append(
+                        str(tuple(column_to_field_name[c] for c in columns))
+                    )
+        if is_view:
+            managed_comment = "  # Created from a view. Don't remove."
+        elif is_partition:
+            managed_comment = "  # Created from a partition. Don't remove."
+        else:
+            managed_comment = ""
+        meta = [""]
+        if has_unsupported_constraint:
+            meta.append("    # A unique constraint could not be introspected.")
+        meta += [
+            "    class Meta:",
+            "        managed = False%s" % managed_comment,
+            "        db_table = %r" % table_name,
+        ]
+        if unique_together:
+            tup = "(" + ", ".join(unique_together) + ",)"
+            meta += ["        unique_together = %s" % tup]
+        return meta
diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py
index f33bcbdccf..c55bc0ed2c 100644
--- a/django/core/management/commands/inspectdb.py
+++ b/django/core/management/commands/inspectdb.py
@@ -304,6 +304,10 @@ class Command(BaseCommand):
 
         return new_name, field_params, field_notes
 
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        self.related_name_counters = {}
+
     def get_field_type(self, connection, table_name, row):
         """
         Given the database connection, the table name, and the cursor row
@@ -342,6 +346,14 @@ class Command(BaseCommand):
                 field_params["max_digits"] = row.precision
                 field_params["decimal_places"] = row.scale
 
+        # Add related_name for ForeignKey and OneToOneField
+        if field_type in {"ForeignKey", "OneToOneField"}:
+            if table_name not in self.related_name_counters:
+                self.related_name_counters[table_name] = 0
+            self.related_name_counters[table_name] += 1
+            field_params["related_name"] = f"{table_name}_{row.name}_{self.related_name_counters[table_name]}"
+            field_notes.append("Field name made into a unique related_name.")
+
         return field_type, field_params, field_notes
 
     def get_meta(
diff --git a/tests/.backup.run_related_name_tests.py b/tests/.backup.run_related_name_tests.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/tests/.backup.run_related_name_tests.py
@@ -0,0 +1 @@
+
diff --git a/tests/inspectdb/.backup.models.py b/tests/inspectdb/.backup.models.py
new file mode 100644
index 0000000000..4227299b94
--- /dev/null
+++ b/tests/inspectdb/.backup.models.py
@@ -0,0 +1,133 @@
+from django.db import connection, models
+from django.db.models.functions import Lower
+
+
+class People(models.Model):
+    name = models.CharField(max_length=255)
+    parent = models.ForeignKey("self", models.CASCADE)
+
+
+class Message(models.Model):
+    from_field = models.ForeignKey(People, models.CASCADE, db_column="from_id")
+
+
+class PeopleData(models.Model):
+    people_pk = models.ForeignKey(People, models.CASCADE, primary_key=True)
+    ssn = models.CharField(max_length=11)
+
+
+class PeopleMoreData(models.Model):
+    people_unique = models.ForeignKey(People, models.CASCADE, unique=True)
+    message = models.ForeignKey(Message, models.CASCADE, blank=True, null=True)
+    license = models.CharField(max_length=255)
+
+
+class ForeignKeyToField(models.Model):
+    to_field_fk = models.ForeignKey(
+        PeopleMoreData,
+        models.CASCADE,
+        to_field="people_unique",
+    )
+
+
+class DigitsInColumnName(models.Model):
+    all_digits = models.CharField(max_length=11, db_column="123")
+    leading_digit = models.CharField(max_length=11, db_column="4extra")
+    leading_digits = models.CharField(max_length=11, db_column="45extra")
+
+
+class SpecialName(models.Model):
+    field = models.IntegerField(db_column="field")
+    # Underscores
+    field_field_0 = models.IntegerField(db_column="Field_")
+    field_field_1 = models.IntegerField(db_column="Field__")
+    field_field_2 = models.IntegerField(db_column="__field")
+    # Other chars
+    prc_x = models.IntegerField(db_column="prc(%) x")
+    non_ascii = models.IntegerField(db_column="tamaño")
+
+    class Meta:
+        db_table = "inspectdb_special.table name"
+
+
+class ColumnTypes(models.Model):
+    id = models.AutoField(primary_key=True)
+    big_int_field = models.BigIntegerField()
+    bool_field = models.BooleanField(default=False)
+    null_bool_field = models.BooleanField(null=True)
+    char_field = models.CharField(max_length=10)
+    null_char_field = models.CharField(max_length=10, blank=True, null=True)
+    date_field = models.DateField()
+    date_time_field = models.DateTimeField()
+    decimal_field = models.DecimalField(max_digits=6, decimal_places=1)
+    email_field = models.EmailField()
+    file_field = models.FileField(upload_to="unused")
+    file_path_field = models.FilePathField()
+    float_field = models.FloatField()
+    int_field = models.IntegerField()
+    gen_ip_address_field = models.GenericIPAddressField(protocol="ipv4")
+    pos_big_int_field = models.PositiveBigIntegerField()
+    pos_int_field = models.PositiveIntegerField()
+    pos_small_int_field = models.PositiveSmallIntegerField()
+    slug_field = models.SlugField()
+    small_int_field = models.SmallIntegerField()
+    text_field = models.TextField()
+    time_field = models.TimeField()
+    url_field = models.URLField()
+    uuid_field = models.UUIDField()
+
+
+class JSONFieldColumnType(models.Model):
+    json_field = models.JSONField()
+    null_json_field = models.JSONField(blank=True, null=True)
+
+    class Meta:
+        required_db_features = {
+            "can_introspect_json_field",
+            "supports_json_field",
+        }
+
+
+test_collation = connection.features.test_collations.get("non_default")
+
+
+class CharFieldDbCollation(models.Model):
+    char_field = models.CharField(max_length=10, db_collation=test_collation)
+
+    class Meta:
+        required_db_features = {"supports_collation_on_charfield"}
+
+
+class TextFieldDbCollation(models.Model):
+    text_field = models.TextField(db_collation=test_collation)
+
+    class Meta:
+        required_db_features = {"supports_collation_on_textfield"}
+
+
+class UniqueTogether(models.Model):
+    field1 = models.IntegerField()
+    field2 = models.CharField(max_length=10)
+    from_field = models.IntegerField(db_column="from")
+    non_unique = models.IntegerField(db_column="non__unique_column")
+    non_unique_0 = models.IntegerField(db_column="non_unique__column")
+
+    class Meta:
+        unique_together = [
+            ("field1", "field2"),
+            ("from_field", "field1"),
+            ("non_unique", "non_unique_0"),
+        ]
+
+
+class FuncUniqueConstraint(models.Model):
+    name = models.CharField(max_length=255)
+    rank = models.IntegerField()
+
+    class Meta:
+        constraints = [
+            models.UniqueConstraint(
+                Lower("name"), models.F("rank"), name="index_lower_name"
+            )
+        ]
+        required_db_features = {"supports_expression_indexes"}
diff --git a/tests/inspectdb/.backup.related_name_models.py b/tests/inspectdb/.backup.related_name_models.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/tests/inspectdb/.backup.related_name_models.py
@@ -0,0 +1 @@
+
diff --git a/tests/inspectdb/.backup.test_runner.py b/tests/inspectdb/.backup.test_runner.py
new file mode 100644
index 0000000000..8b13789179
--- /dev/null
+++ b/tests/inspectdb/.backup.test_runner.py
@@ -0,0 +1 @@
+
diff --git a/tests/inspectdb/.backup.tests_related_name.py b/tests/inspectdb/.backup.tests_related_name.py
new file mode 100644
index 0000000000..a7c07cbc86
--- /dev/null
+++ b/tests/inspectdb/.backup.tests_related_name.py
@@ -0,0 +1,49 @@
+from io import StringIO
+
+from django.core.management import call_command
+from django.test import TestCase, override_settings
+import django
+
+django.setup()
+
+@override_settings(INSTALLED_APPS=['tests.inspectdb.related_name_models'])
+class InspectDBRelatedNameTests(TestCase):
+    databases = {'default', 'other'}
+
+    def test_related_name_generation(self):
+        out = StringIO()
+        models = [
+            "inspectdbrelatednamebook",
+        ]
+        with self.temporary_migration_module():
+            call_command(
+                "inspectdb",
+                *models,
+                database="default",
+                stdout=out,
+            )
+        output = out.getvalue()
+        
+        # Check if unique related_names are generated
+        self.assertIn("related_name='inspectdbrelatednamebook_author1_1'", output)
+        self.assertIn("related_name='inspectdbrelatednamebook_author2_2'", output)
+        
+        # Ensure that the related_name is added to field_params
+        self.assertIn("Field name made into a unique related_name.", output)
+
+    def test_no_related_name_for_non_foreign_key(self):
+        out = StringIO()
+        models = [
+            "inspectdbrelatednamesimple",
+        ]
+        with self.temporary_migration_module():
+            call_command(
+                "inspectdb",
+                *models,
+                database="default",
+                stdout=out,
+            )
+        output = out.getvalue()
+        
+        # Check that related_name is not added for non-foreign key fields
+        self.assertNotIn("related_name=", output)
diff --git a/tests/inspectdb/models.py b/tests/inspectdb/models.py
index 4227299b94..42f265eb05 100644
--- a/tests/inspectdb/models.py
+++ b/tests/inspectdb/models.py
@@ -131,3 +131,15 @@ class FuncUniqueConstraint(models.Model):
             )
         ]
         required_db_features = {"supports_expression_indexes"}
+
+
+class InspectDBRelatedNameAuthor(models.Model):
+    name = models.CharField(max_length=100)
+
+class InspectDBRelatedNameBook(models.Model):
+    title = models.CharField(max_length=100)
+    author1 = models.ForeignKey(InspectDBRelatedNameAuthor, models.CASCADE, related_name='books1')
+    author2 = models.ForeignKey(InspectDBRelatedNameAuthor, models.CASCADE, related_name='books2')
+
+class InspectDBRelatedNameSimple(models.Model):
+    name = models.CharField(max_length=100)
diff --git a/tests/inspectdb/related_name_models.py b/tests/inspectdb/related_name_models.py
new file mode 100644
index 0000000000..27a3e92351
--- /dev/null
+++ b/tests/inspectdb/related_name_models.py
@@ -0,0 +1,12 @@
+from django.db import models
+
+class InspectDBRelatedNameAuthor(models.Model):
+    name = models.CharField(max_length=100)
+
+class InspectDBRelatedNameBook(models.Model):
+    title = models.CharField(max_length=100)
+    author1 = models.ForeignKey(InspectDBRelatedNameAuthor, models.CASCADE, related_name='books1')
+    author2 = models.ForeignKey(InspectDBRelatedNameAuthor, models.CASCADE, related_name='books2')
+
+class InspectDBRelatedNameSimple(models.Model):
+    name = models.CharField(max_length=100)
diff --git a/tests/inspectdb/test_runner.py b/tests/inspectdb/test_runner.py
new file mode 100644
index 0000000000..fee002d722
--- /dev/null
+++ b/tests/inspectdb/test_runner.py
@@ -0,0 +1,9 @@
+from django.test.runner import DiscoverRunner
+from django.apps import apps
+from django.conf import settings
+
+class CustomTestRunner(DiscoverRunner):
+    def setup_test_environment(self, **kwargs):
+        super().setup_test_environment(**kwargs)
+        apps.set_installed_apps(settings.INSTALLED_APPS)
+        apps.populate(settings.INSTALLED_APPS)
diff --git a/tests/inspectdb/tests_related_name.py b/tests/inspectdb/tests_related_name.py
new file mode 100644
index 0000000000..ed8261426d
--- /dev/null
+++ b/tests/inspectdb/tests_related_name.py
@@ -0,0 +1,50 @@
+from io import StringIO
+
+from django.core.management import call_command
+from django.test import TestCase, override_settings
+from .test_runner import CustomTestRunner
+
+@override_settings(
+    INSTALLED_APPS=['tests.inspectdb.related_name_models'],
+    TEST_RUNNER='tests.inspectdb.test_runner.CustomTestRunner'
+)
+class InspectDBRelatedNameTests(TestCase):
+    databases = {'default', 'other'}
+
+    def test_related_name_generation(self):
+        out = StringIO()
+        models = [
+            "inspectdbrelatednamebook",
+        ]
+        with self.temporary_migration_module():
+            call_command(
+                "inspectdb",
+                *models,
+                database="default",
+                stdout=out,
+            )
+        output = out.getvalue()
+        
+        # Check if unique related_names are generated
+        self.assertIn("related_name='inspectdbrelatednamebook_author1_1'", output)
+        self.assertIn("related_name='inspectdbrelatednamebook_author2_2'", output)
+        
+        # Ensure that the related_name is added to field_params
+        self.assertIn("Field name made into a unique related_name.", output)
+
+    def test_no_related_name_for_non_foreign_key(self):
+        out = StringIO()
+        models = [
+            "inspectdbrelatednamesimple",
+        ]
+        with self.temporary_migration_module():
+            call_command(
+                "inspectdb",
+                *models,
+                database="default",
+                stdout=out,
+            )
+        output = out.getvalue()
+        
+        # Check that related_name is not added for non-foreign key fields
+        self.assertNotIn("related_name=", output)
diff --git a/tests/run_related_name_tests.py b/tests/run_related_name_tests.py
new file mode 100644
index 0000000000..8666169f03
--- /dev/null
+++ b/tests/run_related_name_tests.py
@@ -0,0 +1,13 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.test.utils import get_runner
+
+if __name__ == "__main__":
+    os.environ['DJANGO_SETTINGS_MODULE'] = 'tests.test_sqlite'
+    django.setup()
+    TestRunner = get_runner(settings)
+    test_runner = TestRunner(verbosity=1, interactive=True)
+    failures = test_runner.run_tests(["inspectdb.tests_related_name"])
+    sys.exit(bool(failures))
