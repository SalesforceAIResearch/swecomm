diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py
index e1f97190c0..4ddb89a235 100644
--- a/sympy/assumptions/refine.py
+++ b/sympy/assumptions/refine.py
@@ -373,6 +373,67 @@ def refine_matrixelement(expr, assumptions):
             return expr
         return MatrixElement(matrix, j, i)
 
+def refine_arg(expr, assumptions):
+    """
+    Handler for the argument function.
+
+    Examples
+    ========
+
+    >>> from sympy import Q, arg
+    >>> from sympy.assumptions.refine import refine_arg
+    >>> from sympy.abc import x
+    >>> refine_arg(arg(x), Q.positive(x))
+    0
+    >>> refine_arg(arg(x), Q.negative(x))
+    pi
+    """
+    from sympy import arg, pi
+    arg_expr = expr.args[0]
+    if ask(Q.positive(arg_expr), assumptions):
+        return S.Zero
+    if ask(Q.negative(arg_expr), assumptions):
+        return pi
+    return expr
+
+def refine_abs(expr, assumptions):
+    """
+    Handler for the absolute value.
+
+    Examples
+    ========
+
+    >>> from sympy import Q, Abs
+    >>> from sympy.assumptions.refine import refine_abs
+    >>> from sympy.abc import x
+    >>> refine_abs(Abs(x), Q.real(x))
+    >>> refine_abs(Abs(x), Q.positive(x))
+    x
+    >>> refine_abs(Abs(x), Q.negative(x))
+    -x
+
+    """
+    from sympy.core.logic import fuzzy_not
+    from sympy import Abs
+    arg = expr.args[0]
+    if ask(Q.real(arg), assumptions) and \
+            fuzzy_not(ask(Q.negative(arg), assumptions)):
+        # if it's nonnegative
+        return arg
+    if ask(Q.negative(arg), assumptions):
+        return -arg
+    # arg is Mul
+    if isinstance(arg, Mul):
+        r = [refine(abs(a), assumptions) for a in arg.args]
+        non_abs = []
+        in_abs = []
+        for i in r:
+            if isinstance(i, Abs):
+                in_abs.append(i.args[0])
+            else:
+                non_abs.append(i)
+        return Mul(*non_abs) * Abs(Mul(*in_abs))
+
 handlers_dict = {
     'Abs': refine_abs,
     'Pow': refine_Pow,
@@ -380,5 +441,6 @@ def refine_matrixelement(expr, assumptions):
     're': refine_re,
     'im': refine_im,
     'sign': refine_sign,
-    'MatrixElement': refine_matrixelement
+    'MatrixElement': refine_matrixelement,
+    'arg': refine_arg
 }  # type: Dict[str, Callable[[Expr, Boolean], Expr]]
