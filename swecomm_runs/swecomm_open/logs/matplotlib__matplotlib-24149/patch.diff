diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py
index fdac0f3560..933603c14e 100644
--- a/lib/matplotlib/axes/_axes.py
+++ b/lib/matplotlib/axes/_axes.py
@@ -2163,8 +2163,8 @@ class Axes(_AxesBase):
         # x should be an array...
         assert type(xconv) is np.ndarray
 
-        if xconv.size == 0:
-            # xconv has already been converted, but maybe empty...
+        if xconv.size == 0 or np.isnan(xconv).all():
+            # xconv has already been converted, but maybe empty or all NaN...
             return convert(dx)
 
         try:
@@ -2239,6 +2239,30 @@ class Axes(_AxesBase):
             To align the bars on the right edge pass a negative *width* and
             ``align='edge'``.
 
+        # Handle NaN values in x and height
+        x = np.asarray(x)
+        height = np.asarray(height)
+        
+        if np.isnan(x).all() or np.isnan(height).all():
+            # If all x or height values are NaN, return an empty BarContainer
+            return BarContainer([], None, None)
+
+        # Filter out NaN values
+        mask = ~(np.isnan(x) | np.isnan(height))
+        x = x[mask]
+        height = height[mask]
+        
+        if np.iterable(width):
+            width = np.asarray(width)[mask]
+        if bottom is not None:
+            bottom = np.asarray(bottom)
+            if np.iterable(bottom):
+                bottom = bottom[mask]
+
+        # If no valid data points remain, return an empty BarContainer
+        if len(x) == 0:
+            return BarContainer([], None, None)
+
         Returns
         -------
         `.BarContainer`
diff --git a/lib/matplotlib/tests/.backup.test_axes_bar.py b/lib/matplotlib/tests/.backup.test_axes_bar.py
new file mode 100644
index 0000000000..c9a47a3bb7
--- /dev/null
+++ b/lib/matplotlib/tests/.backup.test_axes_bar.py
@@ -0,0 +1,33 @@
+
+import numpy as np
+import matplotlib.pyplot as plt
+from matplotlib.container import BarContainer
+import pytest
+
+def test_bar_with_nan_values():
+    fig, ax = plt.subplots()
+    
+    # Test with all NaN values
+    x = [np.nan]
+    height = [np.nan]
+    result = ax.bar(x, height)
+    assert isinstance(result, BarContainer)
+    assert len(result) == 0
+
+    # Test with mixed NaN and non-NaN values
+    x = [1, np.nan, 3]
+    height = [1, 2, np.nan]
+    result = ax.bar(x, height)
+    assert isinstance(result, plt.BarContainer)
+    assert len(result) == 2  # Only non-NaN values should be plotted
+
+    # Test with NaN values in width and bottom
+    x = [1, 2, 3]
+    height = [1, 2, 3]
+    width = [0.8, np.nan, 0.8]
+    bottom = [0, np.nan, 0]
+    result = ax.bar(x, height, width=width, bottom=bottom)
+    assert isinstance(result, plt.BarContainer)
+    assert len(result) == 2  # Only non-NaN values should be plotted
+
+    plt.close(fig)
diff --git a/lib/matplotlib/tests/test_axes_bar.py b/lib/matplotlib/tests/test_axes_bar.py
new file mode 100644
index 0000000000..e00159e32c
--- /dev/null
+++ b/lib/matplotlib/tests/test_axes_bar.py
@@ -0,0 +1,33 @@
+
+import numpy as np
+import matplotlib.pyplot as plt
+from matplotlib.container import BarContainer
+import pytest
+
+def test_bar_with_nan_values():
+    fig, ax = plt.subplots()
+    
+    # Test with all NaN values
+    x = [np.nan]
+    height = [np.nan]
+    result = ax.bar(x, height)
+    assert isinstance(result, BarContainer)
+    assert len(result) == 0
+
+    # Test with mixed NaN and non-NaN values
+    x = [1, np.nan, 3]
+    height = [1, 2, np.nan]
+    result = ax.bar(x, height)
+    assert isinstance(result, BarContainer)
+    assert len(result) == 2  # Only non-NaN values should be plotted
+
+    # Test with NaN values in width and bottom
+    x = [1, 2, 3]
+    height = [1, 2, 3]
+    width = [0.8, np.nan, 0.8]
+    bottom = [0, np.nan, 0]
+    result = ax.bar(x, height, width=width, bottom=bottom)
+    assert isinstance(result, BarContainer)
+    assert len(result) == 2  # Only non-NaN values should be plotted
+
+    plt.close(fig)
