diff --git a/django/contrib/admin/.backup.utils.py b/django/contrib/admin/.backup.utils.py
new file mode 100644
index 0000000000..88b4980cba
--- /dev/null
+++ b/django/contrib/admin/.backup.utils.py
@@ -0,0 +1,552 @@
+import datetime
+import decimal
+from collections import defaultdict
+
+from django.core.exceptions import FieldDoesNotExist
+from django.db import models, router
+from django.db.models import JSONField
+from django.db.models.constants import LOOKUP_SEP
+from django.db.models.deletion import Collector
+from django.forms.utils import pretty_name
+from django.urls import NoReverseMatch, reverse
+from django.utils import formats, timezone
+from django.utils.html import format_html
+from django.utils.regex_helper import _lazy_re_compile
+from django.utils.text import capfirst
+from django.utils.translation import ngettext, override as translation_override
+
+QUOTE_MAP = {i: '_%02X' % i for i in b'":/_#?;@&=+$,"[]<>%\n\\'}
+UNQUOTE_MAP = {v: chr(k) for k, v in QUOTE_MAP.items()}
+UNQUOTE_RE = _lazy_re_compile('_(?:%s)' % '|'.join([x[1:] for x in UNQUOTE_MAP]))
+
+
+class FieldIsAForeignKeyColumnName(Exception):
+    """A field is a foreign key attname, i.e. <FK>_id."""
+    pass
+
+
+def lookup_needs_distinct(opts, lookup_path):
+    """
+    Return True if 'distinct()' should be used to query the given lookup path.
+    """
+    lookup_fields = lookup_path.split(LOOKUP_SEP)
+    # Go through the fields (following all relations) and look for an m2m.
+    for field_name in lookup_fields:
+        if field_name == 'pk':
+            field_name = opts.pk.name
+        try:
+            field = opts.get_field(field_name)
+        except FieldDoesNotExist:
+            # Ignore query lookups.
+            continue
+        else:
+            if hasattr(field, 'get_path_info'):
+                # This field is a relation; update opts to follow the relation.
+                path_info = field.get_path_info()
+                opts = path_info[-1].to_opts
+                if any(path.m2m for path in path_info):
+                    # This field is a m2m relation so distinct must be called.
+                    return True
+    return False
+
+
+def prepare_lookup_value(key, value):
+    """
+    Return a lookup value prepared to be used in queryset filtering.
+    """
+    # if key ends with __in, split parameter into separate values
+    if key.endswith('__in'):
+        value = value.split(',')
+    # if key ends with __isnull, special case '' and the string literals 'false' and '0'
+    elif key.endswith('__isnull'):
+        value = value.lower() not in ('', 'false', '0')
+    return value
+
+
+def quote(s):
+    """
+    Ensure that primary key values do not confuse the admin URLs by escaping
+    any '/', '_' and ':' and similarly problematic characters.
+    Similar to urllib.parse.quote(), except that the quoting is slightly
+    different so that it doesn't get automatically unquoted by the Web browser.
+    """
+    return s.translate(QUOTE_MAP) if isinstance(s, str) else s
+
+
+def unquote(s):
+    """Undo the effects of quote()."""
+    return UNQUOTE_RE.sub(lambda m: UNQUOTE_MAP[m.group(0)], s)
+
+
+def flatten(fields):
+    """
+    Return a list which is a single level of flattening of the original list.
+    """
+    flat = []
+    for field in fields:
+        if isinstance(field, (list, tuple)):
+            flat.extend(field)
+        else:
+            flat.append(field)
+    return flat
+
+
+def flatten_fieldsets(fieldsets):
+    """Return a list of field names from an admin fieldsets structure."""
+    field_names = []
+    for name, opts in fieldsets:
+        field_names.extend(
+            flatten(opts['fields'])
+        )
+    return field_names
+
+
+def get_deleted_objects(objs, request, admin_site):
+    """
+    Find all objects related to ``objs`` that should also be deleted. ``objs``
+    must be a homogeneous iterable of objects (e.g. a QuerySet).
+
+    Return a nested list of strings suitable for display in the
+    template with the ``unordered_list`` filter.
+    """
+    try:
+        obj = objs[0]
+    except IndexError:
+        return [], {}, set(), []
+    else:
+        using = router.db_for_write(obj._meta.model)
+    collector = NestedObjects(using=using)
+    collector.collect(objs)
+    perms_needed = set()
+
+    def format_callback(obj):
+        model = obj.__class__
+        has_admin = model in admin_site._registry
+        opts = obj._meta
+
+        no_edit_link = '%s: %s' % (capfirst(opts.verbose_name), obj)
+
+        if has_admin:
+            if not admin_site._registry[model].has_delete_permission(request, obj):
+                perms_needed.add(opts.verbose_name)
+            try:
+                admin_url = reverse('%s:%s_%s_change'
+                                    % (admin_site.name,
+                                       opts.app_label,
+                                       opts.model_name),
+                                    None, (quote(obj.pk),))
+            except NoReverseMatch:
+                # Change url doesn't exist -- don't display link to edit
+                return no_edit_link
+
+            # Display a link to the admin page.
+            return format_html('{}: <a href="{}">{}</a>',
+                               capfirst(opts.verbose_name),
+                               admin_url,
+                               obj)
+        else:
+            # Don't display link to edit, because it either has no
+            # admin or is edited inline.
+            return no_edit_link
+
+    to_delete = collector.nested(format_callback)
+
+    protected = [format_callback(obj) for obj in collector.protected]
+    model_count = {model._meta.verbose_name_plural: len(objs) for model, objs in collector.model_objs.items()}
+
+    return to_delete, model_count, perms_needed, protected
+
+
+class NestedObjects(Collector):
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        self.edges = {}  # {from_instance: [to_instances]}
+        self.protected = set()
+        self.model_objs = defaultdict(set)
+
+    def add_edge(self, source, target):
+        self.edges.setdefault(source, []).append(target)
+
+    def collect(self, objs, source=None, source_attr=None, **kwargs):
+        for obj in objs:
+            if source_attr and not source_attr.endswith('+'):
+                related_name = source_attr % {
+                    'class': source._meta.model_name,
+                    'app_label': source._meta.app_label,
+                }
+                self.add_edge(getattr(obj, related_name), obj)
+            else:
+                self.add_edge(None, obj)
+            self.model_objs[obj._meta.model].add(obj)
+        try:
+            return super().collect(objs, source_attr=source_attr, **kwargs)
+        except models.ProtectedError as e:
+            self.protected.update(e.protected_objects)
+        except models.RestrictedError as e:
+            self.protected.update(e.restricted_objects)
+
+    def related_objects(self, related_model, related_fields, objs):
+        qs = super().related_objects(related_model, related_fields, objs)
+        return qs.select_related(*[related_field.name for related_field in related_fields])
+
+    def _nested(self, obj, seen, format_callback):
+        if obj in seen:
+            return []
+        seen.add(obj)
+        children = []
+        for child in self.edges.get(obj, ()):
+            children.extend(self._nested(child, seen, format_callback))
+        if format_callback:
+            ret = [format_callback(obj)]
+        else:
+            ret = [obj]
+        if children:
+            ret.append(children)
+        return ret
+
+    def nested(self, format_callback=None):
+        """
+        Return the graph as a nested list.
+        """
+        seen = set()
+        roots = []
+        for root in self.edges.get(None, ()):
+            roots.extend(self._nested(root, seen, format_callback))
+        return roots
+
+    def can_fast_delete(self, *args, **kwargs):
+        """
+        We always want to load the objects into memory so that we can display
+        them to the user in confirm page.
+        """
+        return False
+
+
+def model_format_dict(obj):
+    """
+    Return a `dict` with keys 'verbose_name' and 'verbose_name_plural',
+    typically for use with string formatting.
+
+    `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.
+    """
+    if isinstance(obj, (models.Model, models.base.ModelBase)):
+        opts = obj._meta
+    elif isinstance(obj, models.query.QuerySet):
+        opts = obj.model._meta
+    else:
+        opts = obj
+    return {
+        'verbose_name': opts.verbose_name,
+        'verbose_name_plural': opts.verbose_name_plural,
+    }
+
+
+def model_ngettext(obj, n=None):
+    """
+    Return the appropriate `verbose_name` or `verbose_name_plural` value for
+    `obj` depending on the count `n`.
+
+    `obj` may be a `Model` instance, `Model` subclass, or `QuerySet` instance.
+    If `obj` is a `QuerySet` instance, `n` is optional and the length of the
+    `QuerySet` is used.
+    """
+    if isinstance(obj, models.query.QuerySet):
+        if n is None:
+            n = obj.count()
+        obj = obj.model
+    d = model_format_dict(obj)
+    singular, plural = d["verbose_name"], d["verbose_name_plural"]
+    return ngettext(singular, plural, n or 0)
+
+
+def lookup_field(name, obj, model_admin=None):
+    opts = obj._meta
+    try:
+        f = _get_non_gfk_field(opts, name)
+    except (FieldDoesNotExist, FieldIsAForeignKeyColumnName):
+        # For non-field values, the value is either a method, property or
+        # returned via a callable.
+        if callable(name):
+            attr = name
+            value = attr(obj)
+        elif hasattr(model_admin, name) and name != '__str__':
+            attr = getattr(model_admin, name)
+            value = attr(obj)
+        else:
+            attr = getattr(obj, name)
+            if callable(attr):
+                value = attr()
+            else:
+                value = attr
+        f = None
+    else:
+        attr = None
+        value = getattr(obj, name)
+    return f, attr, value
+
+
+def _get_non_gfk_field(opts, name):
+    """
+    For historical reasons, the admin app relies on GenericForeignKeys as being
+    "not found" by get_field(). This could likely be cleaned up.
+
+    Reverse relations should also be excluded as these aren't attributes of the
+    model (rather something like `foo_set`).
+    """
+    field = opts.get_field(name)
+    if (field.is_relation and
+            # Generic foreign keys OR reverse relations
+            ((field.many_to_one and not field.related_model) or field.one_to_many)):
+        raise FieldDoesNotExist()
+
+    # Avoid coercing <FK>_id fields to FK
+    if field.is_relation and not field.many_to_many and hasattr(field, 'attname') and field.attname == name:
+        raise FieldIsAForeignKeyColumnName()
+
+    return field
+
+
+def label_for_field(name, model, model_admin=None, return_attr=False, form=None):
+    """
+    Return a sensible label for a field name. The name can be a callable,
+    property (but not created with @property decorator), or the name of an
+    object's attribute, as well as a model field. If return_attr is True, also
+    return the resolved attribute (which could be a callable). This will be
+    None if (and only if) the name refers to a field.
+    """
+    attr = None
+    try:
+        field = _get_non_gfk_field(model._meta, name)
+        try:
+            label = field.verbose_name
+        except AttributeError:
+            # field is likely a ForeignObjectRel
+            label = field.related_model._meta.verbose_name
+    except FieldDoesNotExist:
+        if name == "__str__":
+            label = str(model._meta.verbose_name)
+            attr = str
+        else:
+            if callable(name):
+                attr = name
+            elif hasattr(model_admin, name):
+                attr = getattr(model_admin, name)
+            elif hasattr(model, name):
+                attr = getattr(model, name)
+            elif form and name in form.fields:
+                attr = form.fields[name]
+            else:
+                message = "Unable to lookup '%s' on %s" % (name, model._meta.object_name)
+                if model_admin:
+                    message += " or %s" % model_admin.__class__.__name__
+                if form:
+                    message += " or %s" % form.__class__.__name__
+                raise AttributeError(message)
+
+            if hasattr(attr, "short_description"):
+                label = attr.short_description
+            elif (isinstance(attr, property) and
+                  hasattr(attr, "fget") and
+                  hasattr(attr.fget, "short_description")):
+                label = attr.fget.short_description
+            elif callable(attr):
+                if attr.__name__ == "<lambda>":
+                    label = "--"
+                else:
+                    label = pretty_name(attr.__name__)
+            else:
+                label = pretty_name(name)
+    except FieldIsAForeignKeyColumnName:
+        label = pretty_name(name)
+        attr = name
+
+    if return_attr:
+        return (label, attr)
+    else:
+        return label
+
+
+def help_text_for_field(name, model):
+    help_text = ""
+    try:
+        field = _get_non_gfk_field(model._meta, name)
+    except (FieldDoesNotExist, FieldIsAForeignKeyColumnName):
+        pass
+    else:
+        if hasattr(field, 'help_text'):
+            help_text = field.help_text
+    return help_text
+
+
+def display_for_field(value, field, empty_value_display):
+    from django.contrib.admin.templatetags.admin_list import _boolean_icon
+    import json
+
+    if getattr(field, 'flatchoices', None):
+        return dict(field.flatchoices).get(value, empty_value_display)
+    # BooleanField needs special-case null-handling, so it comes before the
+    # general null test.
+    elif isinstance(field, models.BooleanField):
+        return _boolean_icon(value)
+    elif value is None:
+        return empty_value_display
+    elif isinstance(field, models.DateTimeField):
+        return formats.localize(timezone.template_localtime(value))
+    elif isinstance(field, (models.DateField, models.TimeField)):
+        return formats.localize(value)
+    elif isinstance(field, models.DecimalField):
+        return formats.number_format(value, field.decimal_places)
+    elif isinstance(field, (models.IntegerField, models.FloatField)):
+        return formats.number_format(value)
+    elif isinstance(field, models.FileField) and value:
+        return format_html('<a href="{}">{}</a>', value.url, value)
+    elif isinstance(field, JSONField):
+        try:
+            return json.dumps(value, ensure_ascii=False, indent=2)
+        except (TypeError, ValueError):
+            return str(value)
+    else:
+        return display_for_value(value, empty_value_display)
+
+
+def display_for_value(value, empty_value_display, boolean=False):
+    from django.contrib.admin.templatetags.admin_list import _boolean_icon
+
+    if boolean:
+        return _boolean_icon(value)
+    elif value is None:
+        return empty_value_display
+    elif isinstance(value, bool):
+        return str(value)
+    elif isinstance(value, datetime.datetime):
+        return formats.localize(timezone.template_localtime(value))
+    elif isinstance(value, (datetime.date, datetime.time)):
+        return formats.localize(value)
+    elif isinstance(value, (int, decimal.Decimal, float)):
+        return formats.number_format(value)
+    elif isinstance(value, (list, tuple)):
+        return ', '.join(str(v) for v in value)
+    else:
+        return str(value)
+
+
+class NotRelationField(Exception):
+    pass
+
+
+def get_model_from_relation(field):
+    if hasattr(field, 'get_path_info'):
+        return field.get_path_info()[-1].to_opts.model
+    else:
+        raise NotRelationField
+
+
+def reverse_field_path(model, path):
+    """ Create a reversed field path.
+
+    E.g. Given (Order, "user__groups"),
+    return (Group, "user__order").
+
+    Final field must be a related model, not a data field.
+    """
+    reversed_path = []
+    parent = model
+    pieces = path.split(LOOKUP_SEP)
+    for piece in pieces:
+        field = parent._meta.get_field(piece)
+        # skip trailing data field if extant:
+        if len(reversed_path) == len(pieces) - 1:  # final iteration
+            try:
+                get_model_from_relation(field)
+            except NotRelationField:
+                break
+
+        # Field should point to another model
+        if field.is_relation and not (field.auto_created and not field.concrete):
+            related_name = field.related_query_name()
+            parent = field.remote_field.model
+        else:
+            related_name = field.field.name
+            parent = field.related_model
+        reversed_path.insert(0, related_name)
+    return (parent, LOOKUP_SEP.join(reversed_path))
+
+
+def get_fields_from_path(model, path):
+    """ Return list of Fields given path relative to model.
+
+    e.g. (ModelX, "user__groups__name") -> [
+        <django.db.models.fields.related.ForeignKey object at 0x...>,
+        <django.db.models.fields.related.ManyToManyField object at 0x...>,
+        <django.db.models.fields.CharField object at 0x...>,
+    ]
+    """
+    pieces = path.split(LOOKUP_SEP)
+    fields = []
+    for piece in pieces:
+        if fields:
+            parent = get_model_from_relation(fields[-1])
+        else:
+            parent = model
+        fields.append(parent._meta.get_field(piece))
+    return fields
+
+
+def construct_change_message(form, formsets, add):
+    """
+    Construct a JSON structure describing changes from a changed object.
+    Translations are deactivated so that strings are stored untranslated.
+    Translation happens later on LogEntry access.
+    """
+    # Evaluating `form.changed_data` prior to disabling translations is required
+    # to avoid fields affected by localization from being included incorrectly,
+    # e.g. where date formats differ such as MM/DD/YYYY vs DD/MM/YYYY.
+    changed_data = form.changed_data
+    with translation_override(None):
+        # Deactivate translations while fetching verbose_name for form
+        # field labels and using `field_name`, if verbose_name is not provided.
+        # Translations will happen later on LogEntry access.
+        changed_field_labels = _get_changed_field_labels_from_form(form, changed_data)
+
+    change_message = []
+    if add:
+        change_message.append({'added': {}})
+    elif form.changed_data:
+        change_message.append({'changed': {'fields': changed_field_labels}})
+    if formsets:
+        with translation_override(None):
+            for formset in formsets:
+                for added_object in formset.new_objects:
+                    change_message.append({
+                        'added': {
+                            'name': str(added_object._meta.verbose_name),
+                            'object': str(added_object),
+                        }
+                    })
+                for changed_object, changed_fields in formset.changed_objects:
+                    change_message.append({
+                        'changed': {
+                            'name': str(changed_object._meta.verbose_name),
+                            'object': str(changed_object),
+                            'fields': _get_changed_field_labels_from_form(formset.forms[0], changed_fields),
+                        }
+                    })
+                for deleted_object in formset.deleted_objects:
+                    change_message.append({
+                        'deleted': {
+                            'name': str(deleted_object._meta.verbose_name),
+                            'object': str(deleted_object),
+                        }
+                    })
+    return change_message
+
+
+def _get_changed_field_labels_from_form(form, changed_data):
+    changed_field_labels = []
+    for field_name in changed_data:
+        try:
+            verbose_field_name = form.fields[field_name].label or field_name
+        except KeyError:
+            verbose_field_name = field_name
+        changed_field_labels.append(str(verbose_field_name))
+    return changed_field_labels
diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py
index e4ddc8f017..25e1f27ca4 100644
--- a/django/contrib/admin/utils.py
+++ b/django/contrib/admin/utils.py
@@ -4,6 +4,7 @@ from collections import defaultdict
 
 from django.core.exceptions import FieldDoesNotExist
 from django.db import models, router
+from django.db.models import JSONField
 from django.db.models.constants import LOOKUP_SEP
 from django.db.models.deletion import Collector
 from django.forms.utils import pretty_name
@@ -379,6 +380,7 @@ def help_text_for_field(name, model):
 
 def display_for_field(value, field, empty_value_display):
     from django.contrib.admin.templatetags.admin_list import _boolean_icon
+    import json
 
     if getattr(field, 'flatchoices', None):
         return dict(field.flatchoices).get(value, empty_value_display)
@@ -398,6 +400,11 @@ def display_for_field(value, field, empty_value_display):
         return formats.number_format(value)
     elif isinstance(field, models.FileField) and value:
         return format_html('<a href="{}">{}</a>', value.url, value)
+    elif isinstance(field, JSONField):
+        try:
+            return format_html('<pre>{}</pre>', json.dumps(value, ensure_ascii=False, indent=2))
+        except (TypeError, ValueError):
+            return format_html('<pre>{}</pre>', str(value))
     else:
         return display_for_value(value, empty_value_display)
 
diff --git a/testproject/.backup.test_json_display.py b/testproject/.backup.test_json_display.py
new file mode 100644
index 0000000000..eea59af57f
--- /dev/null
+++ b/testproject/.backup.test_json_display.py
@@ -0,0 +1,26 @@
+
+import os
+import django
+import json
+from django.template import Context, Template
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "testproject.settings")
+django.setup()
+
+from jsonfield_test.models import TestModel
+
+# Get the first TestModel instance
+test_instance = TestModel.objects.first()
+
+# Format the JSON field
+formatted_json = json.dumps(test_instance.json_field, ensure_ascii=False, indent=2)
+
+print("Formatted JSON:")
+print(formatted_json)
+
+# Create a simple template to display the JSON
+template = Template('{{ json_value|safe }}')
+context = Context({'json_value': formatted_json})
+
+print("\nRendered template:")
+print(template.render(context))
diff --git a/testproject/db.sqlite3 b/testproject/db.sqlite3
new file mode 100644
index 0000000000..9b459faabb
Binary files /dev/null and b/testproject/db.sqlite3 differ
diff --git a/testproject/jsonfield_test/.backup.admin.py b/testproject/jsonfield_test/.backup.admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/testproject/jsonfield_test/.backup.admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/testproject/jsonfield_test/.backup.models.py b/testproject/jsonfield_test/.backup.models.py
new file mode 100644
index 0000000000..71a8362390
--- /dev/null
+++ b/testproject/jsonfield_test/.backup.models.py
@@ -0,0 +1,3 @@
+from django.db import models
+
+# Create your models here.
diff --git a/testproject/jsonfield_test/__init__.py b/testproject/jsonfield_test/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/jsonfield_test/admin.py b/testproject/jsonfield_test/admin.py
new file mode 100644
index 0000000000..14d405f3de
--- /dev/null
+++ b/testproject/jsonfield_test/admin.py
@@ -0,0 +1,6 @@
+from django.contrib import admin
+from .models import TestModel
+
+@admin.register(TestModel)
+class TestModelAdmin(admin.ModelAdmin):
+    readonly_fields = ('json_field',)
diff --git a/testproject/jsonfield_test/apps.py b/testproject/jsonfield_test/apps.py
new file mode 100644
index 0000000000..59d5871dfb
--- /dev/null
+++ b/testproject/jsonfield_test/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+
+class JsonfieldTestConfig(AppConfig):
+    name = 'jsonfield_test'
diff --git a/testproject/jsonfield_test/migrations/0001_initial.py b/testproject/jsonfield_test/migrations/0001_initial.py
new file mode 100644
index 0000000000..38e750ff82
--- /dev/null
+++ b/testproject/jsonfield_test/migrations/0001_initial.py
@@ -0,0 +1,22 @@
+# Generated by Django 3.1 on 2024-07-18 16:49
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+                ('json_field', models.JSONField()),
+            ],
+        ),
+    ]
diff --git a/testproject/jsonfield_test/migrations/__init__.py b/testproject/jsonfield_test/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/jsonfield_test/models.py b/testproject/jsonfield_test/models.py
new file mode 100644
index 0000000000..074b36a96b
--- /dev/null
+++ b/testproject/jsonfield_test/models.py
@@ -0,0 +1,9 @@
+from django.db import models
+from django.db.models import JSONField
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    json_field = JSONField()
+
+    def __str__(self):
+        return self.name
diff --git a/testproject/jsonfield_test/tests.py b/testproject/jsonfield_test/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/testproject/jsonfield_test/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/testproject/jsonfield_test/views.py b/testproject/jsonfield_test/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/testproject/jsonfield_test/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/testproject/manage.py b/testproject/manage.py
new file mode 100755
index 0000000000..6253a24931
--- /dev/null
+++ b/testproject/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/testproject/server.log b/testproject/server.log
new file mode 100644
index 0000000000..cd8052fc2b
--- /dev/null
+++ b/testproject/server.log
@@ -0,0 +1 @@
+Watching for file changes with StatReloader
diff --git a/testproject/test_json_display.py b/testproject/test_json_display.py
new file mode 100644
index 0000000000..47d525d4e2
--- /dev/null
+++ b/testproject/test_json_display.py
@@ -0,0 +1,30 @@
+
+import os
+import django
+from django.template import Context, Template
+from django.contrib.admin.utils import display_for_field
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "testproject.settings")
+django.setup()
+
+from jsonfield_test.models import TestModel
+from django.db.models import JSONField
+
+# Get the first TestModel instance
+test_instance = TestModel.objects.first()
+
+# Get the JSONField
+json_field = TestModel._meta.get_field('json_field')
+
+# Use display_for_field to get the formatted JSON
+formatted_json = display_for_field(test_instance.json_field, json_field, '')
+
+print("Formatted JSON:")
+print(formatted_json)
+
+# Create a simple template to display the JSON
+template = Template('{{ json_value|safe }}')
+context = Context({'json_value': formatted_json})
+
+print("\nRendered template:")
+print(template.render(context))
diff --git a/testproject/testproject/.backup.settings.py b/testproject/testproject/.backup.settings.py
new file mode 100644
index 0000000000..cf6e7cd0f9
--- /dev/null
+++ b/testproject/testproject/.backup.settings.py
@@ -0,0 +1,120 @@
+"""
+Django settings for testproject project.
+
+Generated by 'django-admin startproject' using Django 3.1.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve(strict=True).parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'on*7v0j2xzy*1$&mi@!fip)%a)t14x90z#cu%8(n#cfhxx2%(n'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'testproject.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'testproject.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = '/static/'
diff --git a/testproject/testproject/__init__.py b/testproject/testproject/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/testproject/asgi.py b/testproject/testproject/asgi.py
new file mode 100644
index 0000000000..90debc9315
--- /dev/null
+++ b/testproject/testproject/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for testproject project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')
+
+application = get_asgi_application()
diff --git a/testproject/testproject/settings.py b/testproject/testproject/settings.py
new file mode 100644
index 0000000000..8b71de6ffe
--- /dev/null
+++ b/testproject/testproject/settings.py
@@ -0,0 +1,121 @@
+"""
+Django settings for testproject project.
+
+Generated by 'django-admin startproject' using Django 3.1.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve(strict=True).parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'on*7v0j2xzy*1$&mi@!fip)%a)t14x90z#cu%8(n#cfhxx2%(n'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'jsonfield_test',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'testproject.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'testproject.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = '/static/'
diff --git a/testproject/testproject/urls.py b/testproject/testproject/urls.py
new file mode 100644
index 0000000000..30a3850b5c
--- /dev/null
+++ b/testproject/testproject/urls.py
@@ -0,0 +1,21 @@
+"""testproject URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/testproject/testproject/wsgi.py b/testproject/testproject/wsgi.py
new file mode 100644
index 0000000000..435e21ceb7
--- /dev/null
+++ b/testproject/testproject/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for testproject project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')
+
+application = get_wsgi_application()
