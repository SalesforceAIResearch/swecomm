diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py
index 2903b8995..fb24daf8f 100644
--- a/src/_pytest/assertion/rewrite.py
+++ b/src/_pytest/assertion/rewrite.py
@@ -606,6 +606,13 @@ def set_location(node, lineno, col_offset):
 
 
 class AssertionRewriter(ast.NodeVisitor):
+    def is_all_or_any_call(self, call):
+        """Check if the call is to the built-in all or any functions."""
+        return (
+            isinstance(call.func, ast.Name)
+            and call.func.id in {"all", "any"}
+            and isinstance(call.args[0], (ast.GeneratorExp, ast.ListComp))
+        )
     """Assertion rewriting implementation.
 
     The main entrypoint is to call .run() with an ast.Module instance,
@@ -965,6 +972,8 @@ warn_explicit(
         return res, explanation
 
     def visit_Call_35(self, call):
+        if self.is_all_or_any_call(call):
+            return self.visit_all_any_call(call)
         """
         visit `ast.Call` nodes on Python3.5 and after
         """
@@ -1027,6 +1036,44 @@ warn_explicit(
         outer_expl = "%s\n{%s = %s\n}" % (res_expl, res_expl, expl)
         return res, outer_expl
 
+    def visit_all_any_call(self, call):
+        """Unroll the iterable for all/any calls to get better reports."""
+        new_func, func_expl = self.visit(call.func)
+        arg = call.args[0]
+        if isinstance(arg, ast.GeneratorExp):
+            iter_expr = arg.iter
+            elt_expr = arg.elt
+        else:  # ast.ListComp
+            iter_expr = arg.generators[0].iter
+            elt_expr = arg.elt
+
+        res_var = self.variable()
+        expl_list = self.assign(ast.List([], ast.Load()))
+        app = ast.Attribute(expl_list, "append", ast.Load())
+        body = save = self.statements
+        fail_save = self.on_failure
+        self.push_format_context()
+
+        loop_var = ast.Name(id="item", ctx=ast.Store())
+        loop_body = []
+        self.statements = loop_body
+        self.on_failure = loop_body
+
+        res, expl = self.visit(elt_expr)
+        loop_body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))
+        expl_format = self.pop_format_context(ast.Str(expl))
+        call = ast_Call(app, [expl_format], [])
+        loop_body.append(ast.Expr(call))
+
+        loop = ast.For(target=loop_var, iter=iter_expr, body=loop_body, orelse=[])
+        self.statements = save
+        self.on_failure = fail_save
+        self.statements.append(loop)
+
+        expl_template = self.helper("_format_boolop", expl_list, ast.Num(isinstance(call.func, ast.Name) and call.func.id == "any"))
+        expl = self.pop_format_context(expl_template)
+        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)
+
     # ast.Call signature changed on 3.5,
     # conditionally change  which methods is named
     # visit_Call depending on Python version
