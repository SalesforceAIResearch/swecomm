+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
+ locale-gen
Generating locales (this might take a while)...
  en_US.UTF-8... done
Generation complete.
+ export LANG=en_US.UTF-8
+ LANG=en_US.UTF-8
+ export LANGUAGE=en_US:en
+ LANGUAGE=en_US:en
+ export LC_ALL=en_US.UTF-8
+ LC_ALL=en_US.UTF-8
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/forms/models.py
	modified:   tests/model_forms/test_modelchoicefield.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	django/forms/.backup.models.py
	tests/model_forms/.backup.test_modelchoicefield.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 36bc47069ce071e80c8129500de3b8664d2058a7
Author: Josh Santos <josh@omnidapps.com>
Date:   Mon Oct 26 18:43:23 2020 +0700

    Fixed #32127 -- Fixed admin change-form textarea layout for mid-sized displays.

diff --git a/django/contrib/admin/static/admin/css/responsive.css b/django/contrib/admin/static/admin/css/responsive.css
index 48e5114fdf..10dc84ed16 100644
--- a/django/contrib/admin/static/admin/css/responsive.css
+++ b/django/contrib/admin/static/admin/css/responsive.css
@@ -217,7 +217,7 @@ input[type="submit"], button {
     }
 
     textarea {
-        max-width: 518px;
+        max-width: 100%;
         max-height: 120px;
     }
 
diff --git a/docs/releases/3.1.3.txt b/docs/releases/3.1.3.txt
index 300e4aff54..ce6cf962c7 100644
--- a/docs/releases/3.1.3.txt
+++ b/docs/releases/3.1.3.txt
@@ -53,3 +53,7 @@ Bugfixes
   reset tokens (:ticket:`32130`).
 
 * Added support for ``asgiref`` 3.3 (:ticket:`32128`).
+
+* Fixed a regression in Django 3.1 that caused incorrect textarea layout on
+  medium-sized screens in the admin change form view with the sidebar open
+  (:ticket:`32127`).
+ git diff 36bc47069ce071e80c8129500de3b8664d2058a7
diff --git a/django/forms/models.py b/django/forms/models.py
index 5d115458a1..c279bf81ad 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -100,7 +100,7 @@ def apply_limit_choices_to_to_formfield(formfield):
     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):
         limit_choices_to = formfield.get_limit_choices_to()
         if limit_choices_to is not None:
-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)
+            formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
 
 
 def fields_for_model(model, fields=None, exclude=None, widgets=None,
diff --git a/tests/model_forms/test_modelchoicefield.py b/tests/model_forms/test_modelchoicefield.py
index 8f41ce9c40..5d6323dfd0 100644
--- a/tests/model_forms/test_modelchoicefield.py
+++ b/tests/model_forms/test_modelchoicefield.py
@@ -16,6 +16,28 @@ class ModelChoiceFieldTests(TestCase):
         cls.c1 = Category.objects.create(name='Entertainment', slug='entertainment', url='entertainment')
         cls.c2 = Category.objects.create(name='A test', slug='test', url='test')
         cls.c3 = Category.objects.create(name='Third', slug='third-test', url='third')
+        cls.writer = Writer.objects.create(name='Test Writer')
+        cls.a1 = Article.objects.create(headline='First', slug='first', pub_date='2023-01-01', created='2023-01-01', writer=cls.writer, article='Content 1')
+        cls.a2 = Article.objects.create(headline='Second', slug='second', pub_date='2023-01-02', created='2023-01-02', writer=cls.writer, article='Content 2')
+        cls.a3 = Article.objects.create(headline='Third', slug='third', pub_date='2023-01-03', created='2023-01-03', writer=cls.writer, article='Content 3')
+        cls.a1.categories.add(cls.c1)
+        cls.a2.categories.add(cls.c2)
+        cls.a3.categories.add(cls.c1)
+
+    def test_limit_choices_to_with_q_object(self):
+        from django.db.models import Q
+        f = forms.ModelChoiceField(
+            Article.objects.all(),
+            limit_choices_to=Q(categories__name__startswith='E') | Q(headline__contains='i')
+        )
+        choices = list(f.choices)
+        self.assertEqual(len(choices), 4)  # '---------' + 3 articles
+        self.assertEqual(choices[0], ('', '---------'))
+        self.assertIn(str(self.a1), [choice[1] for choice in choices])
+        self.assertIn(str(self.a2), [choice[1] for choice in choices])
+        self.assertIn(str(self.a3), [choice[1] for choice in choices])
+        # Check for no duplicates
+        self.assertEqual(len(set(choice[1] for choice in choices[1:])), 3)
 
     def test_basics(self):
         f = forms.ModelChoiceField(Category.objects.all())
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
Requirement already satisfied: asgiref>=3.2.10 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (3.4.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (2024.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from Django==3.2) (0.4.4)
Requirement already satisfied: typing-extensions in /opt/miniconda3/envs/testbed/lib/python3.6/site-packages (from asgiref>=3.2.10->Django==3.2) (4.1.1)
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 3.2
    Uninstalling Django-3.2:
      Successfully uninstalled Django-3.2
  Running setup.py develop for Django
Successfully installed Django-3.2
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 36bc47069ce071e80c8129500de3b8664d2058a7 tests/model_forms/models.py tests/model_forms/tests.py
Updated 0 paths from 290c81b1c3
+ git apply -v -
Checking patch tests/model_forms/models.py...
Checking patch tests/model_forms/tests.py...
Applied patch tests/model_forms/models.py cleanly.
Applied patch tests/model_forms/tests.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 model_forms.models model_forms.tests
Testing against Django installed in '/testbed/django'
Importing application model_forms
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, model_forms, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table model_forms_person
    Creating table model_forms_category
    Creating table model_forms_writer
    Creating table model_forms_article
    Creating table model_forms_improvedarticle
    Creating table model_forms_improvedarticlewithparentlink
    Creating table model_forms_betterwriter
    Creating table model_forms_publication
    Creating table model_forms_publicationdefaults
    Creating table model_forms_author
    Creating table model_forms_author1
    Creating table model_forms_writerprofile
    Creating table model_forms_document
    Creating table model_forms_textfile
    Creating table model_forms_customff
    Creating table model_forms_filepathmodel
    Creating table model_forms_imagefile
    Creating table model_forms_optionalimagefile
    Creating table model_forms_noextensionimagefile
    Creating table model_forms_homepage
    Creating table model_forms_product
    Creating table model_forms_price
    Creating table model_forms_triple
    Creating table model_forms_articlestatus
    Creating table model_forms_inventory
    Creating table model_forms_book
    Creating table model_forms_derivedbook
    Creating table model_forms_explicitpk
    Creating table model_forms_post
    Creating table model_forms_datetimepost
    Creating table model_forms_derivedpost
    Creating table model_forms_bigint
    Creating table model_forms_customfieldforexclusionmodel
    Creating table model_forms_flexibledatepost
    Creating table model_forms_colour
    Creating table model_forms_colourfulitem
    Creating table model_forms_customerrormessage
    Creating table model_forms_character
    Creating table model_forms_stumpjoke
    Creating table model_forms_student
    Creating table model_forms_photo
    Creating table model_forms_uuidpk
    Creating table model_forms_strictassignmentfieldspecific
    Creating table model_forms_strictassignmentall
    Creating table model_forms_award
    Creating table model_forms_nullableuniquecharfieldmodel
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
test_model_form_clean_applies_to_model (model_forms.tests.CustomCleanTests) ... System check identified no issues (0 silenced).
ok
test_override_clean (model_forms.tests.CustomCleanTests) ... ok
test_clean_false (model_forms.tests.FileAndImageFieldTests) ... ok
test_clean_false_required (model_forms.tests.FileAndImageFieldTests) ... ok
test_clear_and_file_contradiction (model_forms.tests.FileAndImageFieldTests) ... ok
test_custom_file_field_save (model_forms.tests.FileAndImageFieldTests) ... ok
test_file_field_data (model_forms.tests.FileAndImageFieldTests) ... ok
test_file_field_multiple_save (model_forms.tests.FileAndImageFieldTests) ... ok
test_file_path_field_blank (model_forms.tests.FileAndImageFieldTests)
FilePathField(blank=True) includes the empty option. ... ok
test_filefield_required_false (model_forms.tests.FileAndImageFieldTests) ... ok
test_full_clear (model_forms.tests.FileAndImageFieldTests) ... ok
test_image_field (model_forms.tests.FileAndImageFieldTests) ... ok
test_render_empty_file_field (model_forms.tests.FileAndImageFieldTests) ... ok
test_callable_called_each_time_form_is_instantiated (model_forms.tests.LimitChoicesToTests) ... ok
test_custom_field_with_queryset_but_no_limit_choices_to (model_forms.tests.LimitChoicesToTests) ... ok
test_fields_for_model_applies_limit_choices_to (model_forms.tests.LimitChoicesToTests) ... ok
test_limit_choices_to_callable_for_fk_rel (model_forms.tests.LimitChoicesToTests) ... ERROR
test_limit_choices_to_callable_for_m2m_rel (model_forms.tests.LimitChoicesToTests) ... ERROR
test_limit_choices_to_no_duplicates (model_forms.tests.LimitChoicesToTests) ... ERROR
test_model_form_applies_localize_to_all_fields (model_forms.tests.LocalizedModelFormTest) ... ok
test_model_form_applies_localize_to_some_fields (model_forms.tests.LocalizedModelFormTest) ... ok
test_model_form_refuses_arbitrary_string (model_forms.tests.LocalizedModelFormTest) ... ok
test_article_form (model_forms.tests.ModelFormBaseTest) ... ok
test_bad_form (model_forms.tests.ModelFormBaseTest) ... ok
test_base_form (model_forms.tests.ModelFormBaseTest) ... ok
test_blank_false_with_null_true_foreign_key_field (model_forms.tests.ModelFormBaseTest) ... ERROR
test_blank_foreign_key_with_radio (model_forms.tests.ModelFormBaseTest) ... ERROR
test_blank_with_null_foreign_key_field (model_forms.tests.ModelFormBaseTest) ... ERROR
test_confused_form (model_forms.tests.ModelFormBaseTest) ... ok
test_default_filefield (model_forms.tests.ModelFormBaseTest) ... ok
test_default_not_populated_on_checkboxselectmultiple (model_forms.tests.ModelFormBaseTest) ... ok
test_default_not_populated_on_non_empty_value_in_cleaned_data (model_forms.tests.ModelFormBaseTest) ... ok
test_default_not_populated_on_optional_checkbox_input (model_forms.tests.ModelFormBaseTest) ... ok
test_default_not_populated_on_selectmultiple (model_forms.tests.ModelFormBaseTest) ... ok
test_default_populated_on_optional_field (model_forms.tests.ModelFormBaseTest) ... ok
test_default_selectdatewidget (model_forms.tests.ModelFormBaseTest) ... ok
test_default_splitdatetime_field (model_forms.tests.ModelFormBaseTest) ... ok
test_empty_fields_on_modelform (model_forms.tests.ModelFormBaseTest) ... ok
test_empty_fields_to_construct_instance (model_forms.tests.ModelFormBaseTest) ... ok
test_empty_fields_to_fields_for_model (model_forms.tests.ModelFormBaseTest) ... ok
test_exclude_and_validation (model_forms.tests.ModelFormBaseTest) ... ok
test_exclude_fields (model_forms.tests.ModelFormBaseTest) ... ok
test_exclude_fields_with_string (model_forms.tests.ModelFormBaseTest) ... ok
test_exclude_nonexistent_field (model_forms.tests.ModelFormBaseTest) ... ok
test_extra_declared_field_model_form (model_forms.tests.ModelFormBaseTest) ... ok
test_extra_field_model_form (model_forms.tests.ModelFormBaseTest) ... ok
test_extra_field_modelform_factory (model_forms.tests.ModelFormBaseTest) ... ok
test_extra_fields (model_forms.tests.ModelFormBaseTest) ... ok
test_invalid_meta_model (model_forms.tests.ModelFormBaseTest) ... ok
test_limit_fields_with_string (model_forms.tests.ModelFormBaseTest) ... ok
test_limit_nonexistent_field (model_forms.tests.ModelFormBaseTest) ... ok
test_missing_fields_attribute (model_forms.tests.ModelFormBaseTest) ... ok
test_mixmodel_form (model_forms.tests.ModelFormBaseTest) ... ok
test_no_model_class (model_forms.tests.ModelFormBaseTest) ... ok
test_non_blank_foreign_key_with_radio (model_forms.tests.ModelFormBaseTest) ... ERROR
test_orderfields2_form (model_forms.tests.ModelFormBaseTest) ... ok
test_orderfields_form (model_forms.tests.ModelFormBaseTest) ... ok
test_override_field (model_forms.tests.ModelFormBaseTest) ... ok
test_prefixed_form_with_default_field (model_forms.tests.ModelFormBaseTest) ... ok
test_renderer_kwarg (model_forms.tests.ModelFormBaseTest) ... ok
test_replace_field (model_forms.tests.ModelFormBaseTest) ... ok
test_replace_field_variant_2 (model_forms.tests.ModelFormBaseTest) ... ok
test_replace_field_variant_3 (model_forms.tests.ModelFormBaseTest) ... ok
test_save_blank_false_with_required_false (model_forms.tests.ModelFormBaseTest) ... ok
test_save_blank_null_unique_charfield_saves_null (model_forms.tests.ModelFormBaseTest) ... ok
test_subcategory_form (model_forms.tests.ModelFormBaseTest) ... ok
test_subclassmeta_form (model_forms.tests.ModelFormBaseTest) ... ok
test_auto_id (model_forms.tests.ModelFormBasicTests) ... ok
test_base_form (model_forms.tests.ModelFormBasicTests) ... ok
test_basic_creation (model_forms.tests.ModelFormBasicTests) ... ok
test_custom_form_fields (model_forms.tests.ModelFormBasicTests) ... ok
test_initial_values (model_forms.tests.ModelFormBasicTests) ... ERROR
test_m2m_editing (model_forms.tests.ModelFormBasicTests) ... ERROR
test_m2m_initial_callable (model_forms.tests.ModelFormBasicTests) ... ERROR
test_multi_fields (model_forms.tests.ModelFormBasicTests) ... ERROR
test_recleaning_model_form_instance (model_forms.tests.ModelFormBasicTests) ... ERROR
test_runtime_choicefield_populated (model_forms.tests.ModelFormBasicTests) ... ERROR
test_save_commit_false (model_forms.tests.ModelFormBasicTests) ... ok
test_save_with_data_errors (model_forms.tests.ModelFormBasicTests) ... ok
test_subset_fields (model_forms.tests.ModelFormBasicTests) ... ok
test_validate_foreign_key_to_model_with_overridden_manager (model_forms.tests.ModelFormBasicTests) ... ERROR
test_validate_foreign_key_uses_default_manager (model_forms.tests.ModelFormBasicTests) ... ERROR
test_clean_does_deduplicate_values (model_forms.tests.ModelMultipleChoiceFieldTests) ... ok
test_model_multiple_choice_field (model_forms.tests.ModelMultipleChoiceFieldTests) ... ok
test_model_multiple_choice_field_22745 (model_forms.tests.ModelMultipleChoiceFieldTests) ... ok
test_model_multiple_choice_number_of_queries (model_forms.tests.ModelMultipleChoiceFieldTests) ... ok
test_model_multiple_choice_required_false (model_forms.tests.ModelMultipleChoiceFieldTests) ... ok
test_model_multiple_choice_run_validators (model_forms.tests.ModelMultipleChoiceFieldTests) ... ok
test_model_multiple_choice_show_hidden_initial (model_forms.tests.ModelMultipleChoiceFieldTests) ... ok
test_show_hidden_initial_changed_queries_efficiently (model_forms.tests.ModelMultipleChoiceFieldTests) ... ok
test_to_field_name_with_initial_data (model_forms.tests.ModelMultipleChoiceFieldTests) ... ok
test_assignment_of_none (model_forms.tests.ModelOneToOneFieldTests) ... ERROR
test_assignment_of_none_null_false (model_forms.tests.ModelOneToOneFieldTests) ... ERROR
test_modelform_onetoonefield (model_forms.tests.ModelOneToOneFieldTests) ... ok
test_modelform_subclassed_model (model_forms.tests.ModelOneToOneFieldTests) ... ok
test_onetoonefield (model_forms.tests.ModelOneToOneFieldTests) ... ERROR
test_many_to_many (model_forms.tests.ModelToDictTests)
Data for a ManyToManyField is a list rather than a lazy QuerySet. ... ok
test_callable_field_default (model_forms.tests.OtherModelFormTests) ... ok
test_choices_type (model_forms.tests.OtherModelFormTests) ... ERROR
test_foreignkeys_which_use_to_field (model_forms.tests.OtherModelFormTests) ... ERROR
test_iterable_model_m2m (model_forms.tests.OtherModelFormTests) ... ERROR
test_media_on_modelform (model_forms.tests.OtherModelFormTests) ... ok
test_model_field_that_returns_none_to_exclude_itself_with_explicit_fields (model_forms.tests.OtherModelFormTests) ... ok
test_prefetch_related_queryset (model_forms.tests.OtherModelFormTests) ... ok
test_abstract_inherited_unique (model_forms.tests.UniqueTest) ... ERROR
test_abstract_inherited_unique_together (model_forms.tests.UniqueTest) ... ERROR
test_explicitpk_unique (model_forms.tests.UniqueTest)
Ensure keys and blank character strings are tested for uniqueness. ... ok
test_explicitpk_unspecified (model_forms.tests.UniqueTest)
Test for primary_key being in the form and failing validation. ... ok
test_inherited_unique (model_forms.tests.UniqueTest) ... ERROR
test_inherited_unique_for_date (model_forms.tests.UniqueTest) ... ok
test_inherited_unique_together (model_forms.tests.UniqueTest) ... ERROR
test_multiple_field_unique_together (model_forms.tests.UniqueTest) ... ok
test_override_unique_for_date_message (model_forms.tests.UniqueTest) ... ok
test_override_unique_message (model_forms.tests.UniqueTest) ... ok
test_override_unique_together_message (model_forms.tests.UniqueTest) ... ok
test_simple_unique (model_forms.tests.UniqueTest) ... ok
test_unique_for_date (model_forms.tests.UniqueTest) ... ok
test_unique_for_date_in_exclude (model_forms.tests.UniqueTest) ... ok
test_unique_for_date_with_nullable_date (model_forms.tests.UniqueTest) ... ok
test_unique_null (model_forms.tests.UniqueTest) ... ERROR
test_unique_together (model_forms.tests.UniqueTest)
ModelForm test of unique_together constraint ... ok
test_unique_together_exclusion (model_forms.tests.UniqueTest) ... ok
test_modelform_factory_metaclass (model_forms.tests.CustomMetaclassTestCase) ... ok
test_bad_callback (model_forms.tests.FormFieldCallbackTests) ... ok
test_baseform_with_widgets_in_meta (model_forms.tests.FormFieldCallbackTests)
Regression for #13095: Using base forms with widgets defined in Meta should not raise errors. ... ok
test_custom_callback (model_forms.tests.FormFieldCallbackTests)
A custom formfield_callback is used if provided ... ok
test_factory_with_widget_argument (model_forms.tests.FormFieldCallbackTests)
Regression for #15315: modelform_factory should accept widgets ... ok
test_inherit_after_custom_callback (model_forms.tests.FormFieldCallbackTests) ... ok
test_modelform_factory_with_all_fields (model_forms.tests.FormFieldCallbackTests)
Regression for #19733 ... ok
test_modelform_factory_without_fields (model_forms.tests.FormFieldCallbackTests)
Regression for #19733 ... ok
test_custom_error_messages (model_forms.tests.ModelFormCustomErrorTests) ... ok
test_model_clean_error_messages (model_forms.tests.ModelFormCustomErrorTests) ... ok
test_field_removal (model_forms.tests.ModelFormInheritanceTests) ... ok
test_field_removal_name_clashes (model_forms.tests.ModelFormInheritanceTests) ... ok
test_form_subclass_inheritance (model_forms.tests.ModelFormInheritanceTests) ... ok
test_big_integer_field (model_forms.tests.ModelOtherFieldTests) ... ok
test_http_prefixing (model_forms.tests.ModelOtherFieldTests) ... ok
test_modelform_non_editable_field (model_forms.tests.ModelOtherFieldTests) ... ERROR
test_url_on_modelform (model_forms.tests.ModelOtherFieldTests)
Check basic URL field validation on model forms ... ok
test_setattr_raises_validation_error_field_specific (model_forms.tests.StrictAssignmentTests) ... ok
test_setattr_raises_validation_error_non_field (model_forms.tests.StrictAssignmentTests) ... ok
test_error_messages_overrides (model_forms.tests.TestFieldOverridesByFormMeta) ... ok
test_field_type_overrides (model_forms.tests.TestFieldOverridesByFormMeta) ... ok
test_help_text_overrides (model_forms.tests.TestFieldOverridesByFormMeta) ... ok
test_label_overrides (model_forms.tests.TestFieldOverridesByFormMeta) ... ok
test_widget_overrides (model_forms.tests.TestFieldOverridesByFormMeta) ... ok
test_notrequired_overrides_notblank (model_forms.tests.ValidationTest) ... ok
test_validates_with_replaced_field_excluded (model_forms.tests.ValidationTest) ... ok
test_validates_with_replaced_field_not_specified (model_forms.tests.ValidationTest) ... ok

======================================================================
ERROR: test_limit_choices_to_callable_for_fk_rel (model_forms.tests.LimitChoicesToTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 2801, in test_limit_choices_to_callable_for_fk_rel
    stumpjokeform = StumpJokeForm()
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_limit_choices_to_callable_for_m2m_rel (model_forms.tests.LimitChoicesToTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 2808, in test_limit_choices_to_callable_for_m2m_rel
    stumpjokeform = StumpJokeForm()
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_limit_choices_to_no_duplicates (model_forms.tests.LimitChoicesToTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 382, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/model_forms/tests.py", line 2885, in test_limit_choices_to_no_duplicates
    form = CharacterDetailsForm()
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_blank_false_with_null_true_foreign_key_field (model_forms.tests.ModelFormBaseTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 257, in test_blank_false_with_null_true_foreign_key_field
    form = AwardForm(data=data, instance=award)
  File "/testbed/tests/model_forms/tests.py", line 251, in __init__
    super().__init__(*args, **kwargs)
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_blank_foreign_key_with_radio (model_forms.tests.ModelFormBaseTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 270, in test_blank_foreign_key_with_radio
    form = BookForm()
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_blank_with_null_foreign_key_field (model_forms.tests.ModelFormBaseTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 231, in test_blank_with_null_foreign_key_field
    f1 = FormForTestingIsValid(data)
  File "/testbed/tests/model_forms/tests.py", line 223, in __init__
    super().__init__(*args, **kwargs)
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_non_blank_foreign_key_with_radio (model_forms.tests.ModelFormBaseTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 287, in test_non_blank_foreign_key_with_radio
    form = AwardForm()
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_initial_values (model_forms.tests.ModelFormBasicTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 1253, in test_initial_values
    'categories': [str(self.c1.id), str(self.c2.id)]
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_m2m_editing (model_forms.tests.ModelFormBasicTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 1527, in test_m2m_editing
    f = ArticleForm(form_data)
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_m2m_initial_callable (model_forms.tests.ModelFormBasicTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 1353, in test_m2m_initial_callable
    form = ModelForm()
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_multi_fields (model_forms.tests.ModelFormBasicTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 1418, in test_multi_fields
    f = ArticleForm(auto_id=False)
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_recleaning_model_form_instance (model_forms.tests.ModelFormBasicTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 1653, in test_recleaning_model_form_instance
    form = AuthorForm({'full_name': 'Bob'})
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_runtime_choicefield_populated (model_forms.tests.ModelFormBasicTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 1592, in test_runtime_choicefield_populated
    f = ArticleForm(auto_id=False)
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_validate_foreign_key_to_model_with_overridden_manager (model_forms.tests.ModelFormBasicTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 1700, in test_validate_foreign_key_to_model_with_overridden_manager
    form = MyForm(data)
  File "/testbed/tests/model_forms/tests.py", line 1688, in __init__
    super().__init__(*args, **kwargs)
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_validate_foreign_key_uses_default_manager (model_forms.tests.ModelFormBasicTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 1674, in test_validate_foreign_key_uses_default_manager
    form = MyForm(data)
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_assignment_of_none (model_forms.tests.ModelOneToOneFieldTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 1994, in test_assignment_of_none
    form = AuthorForm({'publication': '', 'full_name': 'John Doe'}, instance=author)
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_assignment_of_none_null_false (model_forms.tests.ModelOneToOneFieldTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 2011, in test_assignment_of_none_null_false
    form = AuthorForm({'publication': '', 'full_name': 'John Doe'}, instance=author)
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_onetoonefield (model_forms.tests.ModelOneToOneFieldTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 1951, in test_onetoonefield
    form = WriterProfileForm()
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_choices_type (model_forms.tests.OtherModelFormTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 2482, in test_choices_type
    f = ArticleForm()
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_foreignkeys_which_use_to_field (model_forms.tests.OtherModelFormTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 2525, in test_foreignkeys_which_use_to_field
    form = InventoryForm(instance=core)
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_iterable_model_m2m (model_forms.tests.OtherModelFormTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 2580, in test_iterable_model_m2m
    form = ColourfulItemForm()
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_abstract_inherited_unique (model_forms.tests.UniqueTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 1015, in test_abstract_inherited_unique
    'suffix1': '1', 'suffix2': '2',
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_abstract_inherited_unique_together (model_forms.tests.UniqueTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 1030, in test_abstract_inherited_unique_together
    'suffix2': '0'
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_inherited_unique (model_forms.tests.UniqueTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 994, in test_inherited_unique
    form = DerivedBookForm({'title': 'Other', 'author': self.writer.pk, 'special_id': '1', 'isbn': '12345'})
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_inherited_unique_together (model_forms.tests.UniqueTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 1001, in test_inherited_unique_together
    form = BookForm({'title': title, 'author': self.writer.pk})
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_unique_null (model_forms.tests.UniqueTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/testcases.py", line 1288, in skip_wrapper
    return test_func(*args, **kwargs)
  File "/testbed/tests/model_forms/tests.py", line 978, in test_unique_null
    form = BookForm({'title': title, 'author': self.writer.pk})
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

======================================================================
ERROR: test_modelform_non_editable_field (model_forms.tests.ModelOtherFieldTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/model_forms/tests.py", line 2442, in test_modelform_non_editable_field
    self.assertNotIn('created', ArticleForm().fields)
  File "/testbed/django/forms/models.py", line 308, in __init__
    apply_limit_choices_to_to_formfield(formfield)
  File "/testbed/django/forms/models.py", line 103, in apply_limit_choices_to_to_formfield
    formfield.queryset = formfield.queryset.filter(limit_choices_to).distinct()
  File "/testbed/django/db/models/query.py", line 939, in filter
    return self._filter_or_exclude(False, args, kwargs)
  File "/testbed/django/db/models/query.py", line 959, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, args, kwargs)
  File "/testbed/django/db/models/query.py", line 966, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "/testbed/django/db/models/sql/query.py", line 1380, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "/testbed/django/db/models/sql/query.py", line 1402, in _add_q
    split_subq=split_subq, check_filterable=check_filterable,
  File "/testbed/django/db/models/sql/query.py", line 1250, in build_filter
    raise FieldError("Cannot parse keyword query as dict")
django.core.exceptions.FieldError: Cannot parse keyword query as dict

----------------------------------------------------------------------
Ran 149 tests in 0.535s

FAILED (errors=27)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
+ git checkout 36bc47069ce071e80c8129500de3b8664d2058a7 tests/model_forms/models.py tests/model_forms/tests.py
Updated 2 paths from 290c81b1c3
