diff --git a/sympy/assumptions/sathandlers.py b/sympy/assumptions/sathandlers.py
index 61d62d04cf..881a5f9ba8 100644
--- a/sympy/assumptions/sathandlers.py
+++ b/sympy/assumptions/sathandlers.py
@@ -1,6 +1,7 @@
 from __future__ import print_function, division
 
-from collections import MutableMapping, defaultdict
+from collections.abc import MutableMapping
+from collections import defaultdict
 
 from sympy.core import (Add, Mul, Pow, Integer, Number, NumberSymbol,)
 from sympy.core.numbers import ImaginaryUnit
diff --git a/sympy/core/basic.py b/sympy/core/basic.py
index d4ca323e0d..b42fd1d75c 100644
--- a/sympy/core/basic.py
+++ b/sympy/core/basic.py
@@ -1,6 +1,7 @@
 """Base class for all the objects in SymPy"""
 from __future__ import print_function, division
-from collections import Mapping, defaultdict
+from collections.abc import Mapping
+from collections import defaultdict
 from itertools import chain
 
 from .assumptions import BasicMeta, ManagedProperties
diff --git a/sympy/core/containers.py b/sympy/core/containers.py
index 15abd93e3a..8ac11e7ecd 100644
--- a/sympy/core/containers.py
+++ b/sympy/core/containers.py
@@ -268,7 +268,7 @@ def _sorted_args(self):
         return tuple(sorted(self.args, key=default_sort_key))
 
 
-class OrderedSet(collections.MutableSet):
+class OrderedSet(collections.abc.MutableSet):
     def __init__(self, iterable=None):
         if iterable:
             self.map = collections.OrderedDict((item, None) for item in iterable)
diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py
index 056d9bc497..4aa75e4d77 100644
--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -86,7 +86,7 @@ def entry(i, j):
                 return self[i, j]
             elif pos <= j < pos + other.cols:
                 return other[i, j - pos]
-            return self[i, j - pos - other.cols]
+            return self[i, j - other.cols]
 
         return self._new(self.rows, self.cols + other.cols,
                          lambda i, j: entry(i, j))
diff --git a/sympy/matrices/dense.py b/sympy/matrices/dense.py
index 00395585b9..8726153816 100644
--- a/sympy/matrices/dense.py
+++ b/sympy/matrices/dense.py
@@ -1,5 +1,6 @@
 from __future__ import print_function, division
 
+import collections
 import random
 from sympy import Derivative
 
@@ -421,6 +422,11 @@ def _new(cls, *args, **kwargs):
             rows, cols, flat_list = args
         else:
             rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)
+            if len(args) == 3 and isinstance(args[2], collections.abc.Callable):
+                # if we passed in a function, use that to populate the indices
+                mat = list(args[2](i, j) for i in range(rows) for j in range(cols))
+                flat_list = mat
+            flat_list = list(flat_list) # create a shallow copy
             flat_list = list(flat_list) # create a shallow copy
         self = object.__new__(cls)
         self.rows = rows
diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py
index 5e241c68e9..7477971c04 100644
--- a/sympy/matrices/matrices.py
+++ b/sympy/matrices/matrices.py
@@ -2045,7 +2045,7 @@ def _handle_creation_inputs(cls, *args, **kwargs):
                                  "Both dimensions must be positive".format(rows, cols))
 
             # Matrix(2, 2, lambda i, j: i+j)
-            if len(args) == 3 and isinstance(args[2], collections.Callable):
+            if len(args) == 3 and isinstance(args[2], collections.abc.Callable):
                 op = args[2]
                 flat_list = []
                 for i in range(rows):
diff --git a/sympy/plotting/plot.py b/sympy/plotting/plot.py
index b3b0237d19..0b959a43a4 100644
--- a/sympy/plotting/plot.py
+++ b/sympy/plotting/plot.py
@@ -25,7 +25,7 @@
 from __future__ import print_function, division
 
 import inspect
-from collections import Callable
+from collections.abc import Callable
 import warnings
 import sys
 
