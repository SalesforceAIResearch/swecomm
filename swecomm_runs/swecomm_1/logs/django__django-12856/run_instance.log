2024-07-30 17:14:28,672 - INFO - Intermediate patch for django__django-12856 written to /shared/patch.diff, now applying to container...
2024-07-30 17:14:29,077 - INFO - >>>>> Applied Patch:
/shared/patch.diff:9: trailing whitespace.
            
Checking patch django/db/models/base.py...
Checking patch django/db/models/constraints.py...
Applied patch django/db/models/base.py cleanly.
Applied patch django/db/models/constraints.py cleanly.
warning: 1 line adds whitespace errors.

2024-07-30 17:14:43,204 - INFO - Git diff before:
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 7bb3fa4706..cc128251a3 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1926,6 +1926,13 @@ class Model(metaclass=ModelBase):
                         id='models.W038',
                     )
                 )
+            
+            # New check for UniqueConstraint fields
+            for constraint in cls._meta.constraints:
+                if isinstance(constraint, UniqueConstraint):
+                        errors.extend(
+                            cls._check_local_fields(constraint.fields, 'constraints')
+                        )
         return errors
 
 
diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
index 64bd60484e..fe870bbefb 100644
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -77,7 +77,7 @@ class Deferrable(Enum):
 
 
 class UniqueConstraint(BaseConstraint):
-    def __init__(self, *, fields, name, condition=None, deferrable=None):
+    def __init__(self, *, fields, name, condition=None, deferrable=None, model=None):
         if not fields:
             raise ValueError('At least one field is required to define a unique constraint.')
         if not isinstance(condition, (type(None), Q)):
@@ -94,6 +94,10 @@ class UniqueConstraint(BaseConstraint):
         self.condition = condition
         self.deferrable = deferrable
         super().__init__(name)
+        if model:
+            errors = self.check_fields(model)
+            if errors:
+                raise ValueError(errors)
 
     def _get_condition_sql(self, model, schema_editor):
         if self.condition is None:
@@ -151,3 +155,16 @@ class UniqueConstraint(BaseConstraint):
         if self.deferrable:
             kwargs['deferrable'] = self.deferrable
         return path, args, kwargs
+    def check_fields(self, model):
+        from django.core.checks import Error
+        errors = []
+        for field_name in self.fields:
+            try:
+                model._meta.get_field(field_name)
+            except FieldDoesNotExist:
+                errors.append(Error(
+                    "The field '%s' is not present in model '%s'." % (field_name, model._meta.label),
+                    obj=model,
+                    id='models.E012',
+                ))
+        return errors
2024-07-30 17:14:43,205 - INFO - Eval script for django__django-12856 written to /eval.sh
2024-07-30 17:15:34,603 - INFO - Test runtime: 51.40 seconds
2024-07-30 17:15:35,170 - INFO - Git diff after:
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 7bb3fa4706..cc128251a3 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1926,6 +1926,13 @@ class Model(metaclass=ModelBase):
                         id='models.W038',
                     )
                 )
+            
+            # New check for UniqueConstraint fields
+            for constraint in cls._meta.constraints:
+                if isinstance(constraint, UniqueConstraint):
+                        errors.extend(
+                            cls._check_local_fields(constraint.fields, 'constraints')
+                        )
         return errors
 
 
diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
index 64bd60484e..fe870bbefb 100644
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -77,7 +77,7 @@ class Deferrable(Enum):
 
 
 class UniqueConstraint(BaseConstraint):
-    def __init__(self, *, fields, name, condition=None, deferrable=None):
+    def __init__(self, *, fields, name, condition=None, deferrable=None, model=None):
         if not fields:
             raise ValueError('At least one field is required to define a unique constraint.')
         if not isinstance(condition, (type(None), Q)):
@@ -94,6 +94,10 @@ class UniqueConstraint(BaseConstraint):
         self.condition = condition
         self.deferrable = deferrable
         super().__init__(name)
+        if model:
+            errors = self.check_fields(model)
+            if errors:
+                raise ValueError(errors)
 
     def _get_condition_sql(self, model, schema_editor):
         if self.condition is None:
@@ -151,3 +155,16 @@ class UniqueConstraint(BaseConstraint):
         if self.deferrable:
             kwargs['deferrable'] = self.deferrable
         return path, args, kwargs
+    def check_fields(self, model):
+        from django.core.checks import Error
+        errors = []
+        for field_name in self.fields:
+            try:
+                model._meta.get_field(field_name)
+            except FieldDoesNotExist:
+                errors.append(Error(
+                    "The field '%s' is not present in model '%s'." % (field_name, model._meta.label),
+                    obj=model,
+                    id='models.E012',
+                ))
+        return errors
2024-07-30 17:15:35,170 - INFO - Grading answer for django__django-12856...
2024-07-30 17:15:35,180 - INFO - report: {'django__django-12856': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': True, 'tests_status': {'FAIL_TO_PASS': {'success': ['test_unique_constraint_pointing_to_m2m_field (invalid_models_tests.test_models.ConstraintsTests)', 'test_unique_constraint_pointing_to_missing_field (invalid_models_tests.test_models.ConstraintsTests)', 'test_unique_constraint_pointing_to_non_local_field (invalid_models_tests.test_models.ConstraintsTests)'], 'failure': []}, 'PASS_TO_PASS': {'success': ['test_check_jsonfield (invalid_models_tests.test_models.JSONFieldTests)', 'test_check_jsonfield_required_db_features (invalid_models_tests.test_models.JSONFieldTests)', 'test_ordering_pointing_to_json_field_value (invalid_models_tests.test_models.JSONFieldTests)', 'test_db_column_clash (invalid_models_tests.test_models.FieldNamesTests)', 'test_ending_with_underscore (invalid_models_tests.test_models.FieldNamesTests)', 'test_including_separator (invalid_models_tests.test_models.FieldNamesTests)', 'test_pk (invalid_models_tests.test_models.FieldNamesTests)', 'test_list_containing_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests)', 'test_non_iterable (invalid_models_tests.test_models.UniqueTogetherTests)', 'test_non_list (invalid_models_tests.test_models.UniqueTogetherTests)', 'test_pointing_to_fk (invalid_models_tests.test_models.UniqueTogetherTests)', 'test_pointing_to_m2m (invalid_models_tests.test_models.UniqueTogetherTests)', 'test_pointing_to_missing_field (invalid_models_tests.test_models.UniqueTogetherTests)', 'test_valid_model (invalid_models_tests.test_models.UniqueTogetherTests)', 'test_list_containing_non_iterable (invalid_models_tests.test_models.IndexTogetherTests)', 'test_non_iterable (invalid_models_tests.test_models.IndexTogetherTests)', 'test_non_list (invalid_models_tests.test_models.IndexTogetherTests)', 'test_pointing_to_fk (invalid_models_tests.test_models.IndexTogetherTests)', 'test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexTogetherTests)', 'test_pointing_to_missing_field (invalid_models_tests.test_models.IndexTogetherTests)', 'test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexTogetherTests)', 'test_field_name_clash_with_child_accessor (invalid_models_tests.test_models.ShadowingFieldsTests)', 'test_id_clash (invalid_models_tests.test_models.ShadowingFieldsTests)', 'test_inheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests)', 'test_multigeneration_inheritance (invalid_models_tests.test_models.ShadowingFieldsTests)', 'test_multiinheritance_clash (invalid_models_tests.test_models.ShadowingFieldsTests)', 'test_index_with_condition (invalid_models_tests.test_models.IndexesTests)', 'test_index_with_condition_required_db_features (invalid_models_tests.test_models.IndexesTests)', 'test_max_name_length (invalid_models_tests.test_models.IndexesTests)', 'test_name_constraints (invalid_models_tests.test_models.IndexesTests)', 'test_pointing_to_fk (invalid_models_tests.test_models.IndexesTests)', 'test_pointing_to_m2m_field (invalid_models_tests.test_models.IndexesTests)', 'test_pointing_to_missing_field (invalid_models_tests.test_models.IndexesTests)', 'test_pointing_to_non_local_field (invalid_models_tests.test_models.IndexesTests)', 'test_check_constraints (invalid_models_tests.test_models.ConstraintsTests)', 'test_check_constraints_required_db_features (invalid_models_tests.test_models.ConstraintsTests)', 'test_deferrable_unique_constraint (invalid_models_tests.test_models.ConstraintsTests)', 'test_deferrable_unique_constraint_required_db_features (invalid_models_tests.test_models.ConstraintsTests)', 'test_unique_constraint_pointing_to_fk (invalid_models_tests.test_models.ConstraintsTests)', 'test_unique_constraint_with_condition (invalid_models_tests.test_models.ConstraintsTests)', 'test_unique_constraint_with_condition_required_db_features (invalid_models_tests.test_models.ConstraintsTests)', 'test_just_order_with_respect_to_no_errors (invalid_models_tests.test_models.OtherModelTests)', 'test_just_ordering_no_errors (invalid_models_tests.test_models.OtherModelTests)', 'test_lazy_reference_checks (invalid_models_tests.test_models.OtherModelTests)', 'test_m2m_autogenerated_table_name_clash (invalid_models_tests.test_models.OtherModelTests)', 'test_m2m_autogenerated_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests)', 'test_m2m_field_table_name_clash (invalid_models_tests.test_models.OtherModelTests)', 'test_m2m_field_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests)', 'test_m2m_table_name_clash (invalid_models_tests.test_models.OtherModelTests)', 'test_m2m_table_name_clash_database_routers_installed (invalid_models_tests.test_models.OtherModelTests)', 'test_m2m_to_concrete_and_proxy_allowed (invalid_models_tests.test_models.OtherModelTests)', 'test_m2m_unmanaged_shadow_models_not_checked (invalid_models_tests.test_models.OtherModelTests)', 'test_name_beginning_with_underscore (invalid_models_tests.test_models.OtherModelTests)', 'test_name_contains_double_underscores (invalid_models_tests.test_models.OtherModelTests)', 'test_name_ending_with_underscore (invalid_models_tests.test_models.OtherModelTests)', 'test_non_valid (invalid_models_tests.test_models.OtherModelTests)', 'test_onetoone_with_explicit_parent_link_parent_model (invalid_models_tests.test_models.OtherModelTests)', 'test_onetoone_with_parent_model (invalid_models_tests.test_models.OtherModelTests)', 'test_ordering_allows_registered_lookups (invalid_models_tests.test_models.OtherModelTests)', 'test_ordering_non_iterable (invalid_models_tests.test_models.OtherModelTests)', 'test_ordering_pointing_multiple_times_to_model_fields (invalid_models_tests.test_models.OtherModelTests)', 'test_ordering_pointing_to_foreignkey_field (invalid_models_tests.test_models.OtherModelTests)', 'test_ordering_pointing_to_lookup_not_transform (invalid_models_tests.test_models.OtherModelTests)', 'test_ordering_pointing_to_missing_field (invalid_models_tests.test_models.OtherModelTests)', 'test_ordering_pointing_to_missing_foreignkey_field (invalid_models_tests.test_models.OtherModelTests)', 'test_ordering_pointing_to_missing_related_field (invalid_models_tests.test_models.OtherModelTests)', 'test_ordering_pointing_to_missing_related_model_field (invalid_models_tests.test_models.OtherModelTests)', 'test_ordering_pointing_to_non_related_field (invalid_models_tests.test_models.OtherModelTests)', 'test_ordering_pointing_to_related_model_pk (invalid_models_tests.test_models.OtherModelTests)', 'test_ordering_pointing_to_two_related_model_field (invalid_models_tests.test_models.OtherModelTests)', 'test_ordering_with_order_with_respect_to (invalid_models_tests.test_models.OtherModelTests)', 'test_property_and_related_field_accessor_clash (invalid_models_tests.test_models.OtherModelTests)', 'test_single_primary_key (invalid_models_tests.test_models.OtherModelTests)', 'test_swappable_missing_app (invalid_models_tests.test_models.OtherModelTests)', 'test_swappable_missing_app_name (invalid_models_tests.test_models.OtherModelTests)', 'test_two_m2m_through_same_model_with_different_through_fields (invalid_models_tests.test_models.OtherModelTests)', 'test_two_m2m_through_same_relationship (invalid_models_tests.test_models.OtherModelTests)', 'test_unique_primary_key (invalid_models_tests.test_models.OtherModelTests)'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for django__django-12856: resolved: True
