2024-07-30 17:13:58,184 - INFO - Intermediate patch for sympy__sympy-15346 written to /shared/patch.diff, now applying to container...
2024-07-30 17:13:58,689 - INFO - >>>>> Applied Patch:
Checking patch sympy/functions/elementary/trigonometric.py...
Applied patch sympy/functions/elementary/trigonometric.py cleanly.

2024-07-30 17:14:03,690 - INFO - Git diff before:
diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py
index da2e919375..d7a1fdaa57 100644
--- a/sympy/functions/elementary/trigonometric.py
+++ b/sympy/functions/elementary/trigonometric.py
@@ -538,10 +538,6 @@ def eval(cls, arg):
             elif arg is S.Zero:
                 return S.One
             elif arg is S.Infinity or arg is S.NegativeInfinity:
-                # In this case it is better to return AccumBounds(-1, 1)
-                # rather than returning S.NaN, since AccumBounds(-1, 1)
-                # preserves the information that sin(oo) is between
-                # -1 and 1, where S.NaN does not do that.
                 return AccumBounds(-1, 1)
 
         if arg is S.ComplexInfinity:
@@ -576,17 +572,6 @@ def eval(cls, arg):
                     return cls(narg)
                 return None
 
-            # cosine formula #####################
-            # https://github.com/sympy/sympy/issues/6048
-            # explicit calculations are preformed for
-            # cos(k pi/n) for n = 8,10,12,15,20,24,30,40,60,120
-            # Some other exact values like cos(k pi/240) can be
-            # calculated using a partial-fraction decomposition
-            # by calling cos( X ).rewrite(sqrt)
-            cst_table_some = {
-                3: S.Half,
-                5: (sqrt(5) + 1)/4,
-            }
             if pi_coeff.is_Rational:
                 q = pi_coeff.q
                 p = pi_coeff.p % (2*q)
@@ -597,10 +582,6 @@ def eval(cls, arg):
                     narg = (1 - pi_coeff)*S.Pi
                     return -cls(narg)
 
-                # If nested sqrt's are worse than un-evaluation
-                # you can require q to be in (1, 2, 3, 4, 6, 12)
-                # q <= 12, q=15, q=20, q=24, q=30, q=40, q=60, q=120 return
-                # expressions with 2 or fewer sqrt nestings.
                 table2 = {
                     12: (3, 4),
                     20: (4, 5),
@@ -621,6 +602,10 @@ def eval(cls, arg):
                 if q > 12:
                     return None
 
+                cst_table_some = {
+                    3: S.Half,
+                    5: (sqrt(5) + 1)/4,
+                }
                 if q in cst_table_some:
                     cts = cst_table_some[pi_coeff.q]
                     return chebyshevt(pi_coeff.p, cts).expand()
2024-07-30 17:14:03,690 - INFO - Eval script for sympy__sympy-15346 written to /eval.sh
2024-07-30 17:16:42,144 - INFO - Test runtime: 158.45 seconds
2024-07-30 17:16:42,249 - INFO - Git diff after:
diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py
index da2e919375..d7a1fdaa57 100644
--- a/sympy/functions/elementary/trigonometric.py
+++ b/sympy/functions/elementary/trigonometric.py
@@ -538,10 +538,6 @@ def eval(cls, arg):
             elif arg is S.Zero:
                 return S.One
             elif arg is S.Infinity or arg is S.NegativeInfinity:
-                # In this case it is better to return AccumBounds(-1, 1)
-                # rather than returning S.NaN, since AccumBounds(-1, 1)
-                # preserves the information that sin(oo) is between
-                # -1 and 1, where S.NaN does not do that.
                 return AccumBounds(-1, 1)
 
         if arg is S.ComplexInfinity:
@@ -576,17 +572,6 @@ def eval(cls, arg):
                     return cls(narg)
                 return None
 
-            # cosine formula #####################
-            # https://github.com/sympy/sympy/issues/6048
-            # explicit calculations are preformed for
-            # cos(k pi/n) for n = 8,10,12,15,20,24,30,40,60,120
-            # Some other exact values like cos(k pi/240) can be
-            # calculated using a partial-fraction decomposition
-            # by calling cos( X ).rewrite(sqrt)
-            cst_table_some = {
-                3: S.Half,
-                5: (sqrt(5) + 1)/4,
-            }
             if pi_coeff.is_Rational:
                 q = pi_coeff.q
                 p = pi_coeff.p % (2*q)
@@ -597,10 +582,6 @@ def eval(cls, arg):
                     narg = (1 - pi_coeff)*S.Pi
                     return -cls(narg)
 
-                # If nested sqrt's are worse than un-evaluation
-                # you can require q to be in (1, 2, 3, 4, 6, 12)
-                # q <= 12, q=15, q=20, q=24, q=30, q=40, q=60, q=120 return
-                # expressions with 2 or fewer sqrt nestings.
                 table2 = {
                     12: (3, 4),
                     20: (4, 5),
@@ -621,6 +602,10 @@ def eval(cls, arg):
                 if q > 12:
                     return None
 
+                cst_table_some = {
+                    3: S.Half,
+                    5: (sqrt(5) + 1)/4,
+                }
                 if q in cst_table_some:
                     cts = cst_table_some[pi_coeff.q]
                     return chebyshevt(pi_coeff.p, cts).expand()
2024-07-30 17:16:42,249 - INFO - Grading answer for sympy__sympy-15346...
2024-07-30 17:16:42,252 - INFO - report: {'sympy__sympy-15346': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_issue_15129_trigsimp_methods']}, 'PASS_TO_PASS': {'success': ['test_trigsimp1', 'test_trigsimp1a', 'test_trigsimp2', 'test_issue_4373', 'test_trigsimp3', 'test_issue_4661', 'test_issue_4494', 'test_issue_5948', 'test_issue_4775', 'test_issue_4280', 'test_issue_3210', 'test_trigsimp_issues', 'test_trigsimp_issue_2515', 'test_trigsimp_issue_3826', 'test_trigsimp_issue_4032', 'test_trigsimp_issue_7761', 'test_trigsimp_noncommutative', 'test_hyperbolic_simp', 'test_trigsimp_groebner', 'test_issue_2827_trigsimp_methods', 'test_exptrigsimp', 'test_powsimp_on_numbers'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-15346: resolved: False
