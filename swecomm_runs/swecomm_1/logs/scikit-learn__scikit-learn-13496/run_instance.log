2024-07-30 17:13:50,871 - INFO - Intermediate patch for scikit-learn__scikit-learn-13496 written to /shared/patch.diff, now applying to container...
2024-07-30 17:13:51,036 - INFO - >>>>> Applied Patch:
Checking patch sklearn/ensemble/iforest.py...
Applied patch sklearn/ensemble/iforest.py cleanly.

2024-07-30 17:13:53,297 - INFO - Git diff before:
diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py
index 8a1bd3625..af4502ae8 100644
--- a/sklearn/ensemble/iforest.py
+++ b/sklearn/ensemble/iforest.py
@@ -173,7 +173,84 @@ class IsolationForest(BaseBagging, OutlierMixin):
                  n_jobs=None,
                  behaviour='old',
                  random_state=None,
-                 verbose=0):
+                 verbose=0,
+                 warm_start=False):
+        """
+        Parameters
+        ----------
+        n_estimators : int, optional (default=100)
+            The number of base estimators in the ensemble.
+
+        max_samples : int or float, optional (default="auto")
+            The number of samples to draw from X to train each base estimator.
+                - If int, then draw `max_samples` samples.
+                - If float, then draw `max_samples * X.shape[0]` samples.
+                - If "auto", then `max_samples=min(256, n_samples)`.
+
+            If max_samples is larger than the number of samples provided,
+            all samples will be used for all trees (no sampling).
+
+        contamination : float in (0., 0.5), optional (default="legacy")
+            The amount of contamination of the data set, i.e. the proportion
+            of outliers in the data set. Used when fitting to define the threshold
+            on the decision function. If 'auto', the decision function threshold is
+            determined as in the original paper.
+
+            .. versionchanged:: 0.20
+               The default value of ``contamination`` will change from 0.1 in 0.20
+               to ``'auto'`` in 0.22.
+
+        max_features : int or float, optional (default=1.0)
+            The number of features to draw from X to train each base estimator.
+
+                - If int, then draw `max_features` features.
+                - If float, then draw `max_features * X.shape[1]` features.
+
+        bootstrap : boolean, optional (default=False)
+            If True, individual trees are fit on random subsets of the training
+            data sampled with replacement. If False, sampling without replacement
+            is performed.
+
+        n_jobs : int or None, optional (default=None)
+            The number of jobs to run in parallel for both `fit` and `predict`.
+            ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.
+            ``-1`` means using all processors. See :term:`Glossary <n_jobs>`
+            for more details.
+
+        behaviour : str, default='old'
+            Behaviour of the ``decision_function`` which can be either 'old' or
+            'new'. Passing ``behaviour='new'`` makes the ``decision_function``
+            change to match other anomaly detection algorithm API which will be
+            the default behaviour in the future. As explained in details in the
+            ``offset_`` attribute documentation, the ``decision_function`` becomes
+            dependent on the contamination parameter, in such a way that 0 becomes
+            its natural threshold to detect outliers.
+
+            .. versionadded:: 0.20
+               ``behaviour`` is added in 0.20 for back-compatibility purpose.
+
+            .. deprecated:: 0.20
+               ``behaviour='old'`` is deprecated in 0.20 and will not be possible
+               in 0.22.
+
+            .. deprecated:: 0.22
+               ``behaviour`` parameter will be deprecated in 0.22 and removed in
+               0.24.
+
+        random_state : int, RandomState instance or None, optional (default=None)
+            If int, random_state is the seed used by the random number generator;
+            If RandomState instance, random_state is the random number generator;
+            If None, the random number generator is the RandomState instance used
+            by `np.random`.
+
+        verbose : int, optional (default=0)
+            Controls the verbosity of the tree building process.
+
+        warm_start : bool, optional (default=False)
+            When set to ``True``, reuse the solution of the previous call to fit
+            and add more estimators to the ensemble, otherwise, just fit a whole
+            new forest. See :term:`the Glossary <warm_start>`.
+        """
         super().__init__(
             base_estimator=ExtraTreeRegressor(
                 max_features=1,
@@ -187,7 +264,8 @@ class IsolationForest(BaseBagging, OutlierMixin):
             max_features=max_features,
             n_jobs=n_jobs,
             random_state=random_state,
-            verbose=verbose)
+            verbose=verbose,
+            warm_start=warm_start)
 
         self.behaviour = behaviour
         self.contamination = contamination
2024-07-30 17:13:53,298 - INFO - Eval script for scikit-learn__scikit-learn-13496 written to /eval.sh
2024-07-30 17:15:07,753 - INFO - Test runtime: 74.46 seconds
2024-07-30 17:15:07,994 - INFO - Git diff after:
diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py
index 8a1bd3625..af4502ae8 100644
--- a/sklearn/ensemble/iforest.py
+++ b/sklearn/ensemble/iforest.py
@@ -173,7 +173,84 @@ class IsolationForest(BaseBagging, OutlierMixin):
                  n_jobs=None,
                  behaviour='old',
                  random_state=None,
-                 verbose=0):
+                 verbose=0,
+                 warm_start=False):
+        """
+        Parameters
+        ----------
+        n_estimators : int, optional (default=100)
+            The number of base estimators in the ensemble.
+
+        max_samples : int or float, optional (default="auto")
+            The number of samples to draw from X to train each base estimator.
+                - If int, then draw `max_samples` samples.
+                - If float, then draw `max_samples * X.shape[0]` samples.
+                - If "auto", then `max_samples=min(256, n_samples)`.
+
+            If max_samples is larger than the number of samples provided,
+            all samples will be used for all trees (no sampling).
+
+        contamination : float in (0., 0.5), optional (default="legacy")
+            The amount of contamination of the data set, i.e. the proportion
+            of outliers in the data set. Used when fitting to define the threshold
+            on the decision function. If 'auto', the decision function threshold is
+            determined as in the original paper.
+
+            .. versionchanged:: 0.20
+               The default value of ``contamination`` will change from 0.1 in 0.20
+               to ``'auto'`` in 0.22.
+
+        max_features : int or float, optional (default=1.0)
+            The number of features to draw from X to train each base estimator.
+
+                - If int, then draw `max_features` features.
+                - If float, then draw `max_features * X.shape[1]` features.
+
+        bootstrap : boolean, optional (default=False)
+            If True, individual trees are fit on random subsets of the training
+            data sampled with replacement. If False, sampling without replacement
+            is performed.
+
+        n_jobs : int or None, optional (default=None)
+            The number of jobs to run in parallel for both `fit` and `predict`.
+            ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.
+            ``-1`` means using all processors. See :term:`Glossary <n_jobs>`
+            for more details.
+
+        behaviour : str, default='old'
+            Behaviour of the ``decision_function`` which can be either 'old' or
+            'new'. Passing ``behaviour='new'`` makes the ``decision_function``
+            change to match other anomaly detection algorithm API which will be
+            the default behaviour in the future. As explained in details in the
+            ``offset_`` attribute documentation, the ``decision_function`` becomes
+            dependent on the contamination parameter, in such a way that 0 becomes
+            its natural threshold to detect outliers.
+
+            .. versionadded:: 0.20
+               ``behaviour`` is added in 0.20 for back-compatibility purpose.
+
+            .. deprecated:: 0.20
+               ``behaviour='old'`` is deprecated in 0.20 and will not be possible
+               in 0.22.
+
+            .. deprecated:: 0.22
+               ``behaviour`` parameter will be deprecated in 0.22 and removed in
+               0.24.
+
+        random_state : int, RandomState instance or None, optional (default=None)
+            If int, random_state is the seed used by the random number generator;
+            If RandomState instance, random_state is the random number generator;
+            If None, the random number generator is the RandomState instance used
+            by `np.random`.
+
+        verbose : int, optional (default=0)
+            Controls the verbosity of the tree building process.
+
+        warm_start : bool, optional (default=False)
+            When set to ``True``, reuse the solution of the previous call to fit
+            and add more estimators to the ensemble, otherwise, just fit a whole
+            new forest. See :term:`the Glossary <warm_start>`.
+        """
         super().__init__(
             base_estimator=ExtraTreeRegressor(
                 max_features=1,
@@ -187,7 +264,8 @@ class IsolationForest(BaseBagging, OutlierMixin):
             max_features=max_features,
             n_jobs=n_jobs,
             random_state=random_state,
-            verbose=verbose)
+            verbose=verbose,
+            warm_start=warm_start)
 
         self.behaviour = behaviour
         self.contamination = contamination
2024-07-30 17:15:07,994 - INFO - Grading answer for scikit-learn__scikit-learn-13496...
2024-07-30 17:15:08,019 - INFO - report: {'scikit-learn__scikit-learn-13496': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': True, 'tests_status': {'FAIL_TO_PASS': {'success': ['sklearn/ensemble/tests/test_iforest.py::test_iforest_warm_start'], 'failure': []}, 'PASS_TO_PASS': {'success': ['sklearn/ensemble/tests/test_iforest.py::test_iforest', 'sklearn/ensemble/tests/test_iforest.py::test_iforest_sparse', 'sklearn/ensemble/tests/test_iforest.py::test_iforest_error', 'sklearn/ensemble/tests/test_iforest.py::test_recalculate_max_depth', 'sklearn/ensemble/tests/test_iforest.py::test_max_samples_attribute', 'sklearn/ensemble/tests/test_iforest.py::test_iforest_parallel_regression', 'sklearn/ensemble/tests/test_iforest.py::test_iforest_performance', 'sklearn/ensemble/tests/test_iforest.py::test_iforest_works[0.25]', 'sklearn/ensemble/tests/test_iforest.py::test_iforest_works[auto]', 'sklearn/ensemble/tests/test_iforest.py::test_max_samples_consistency', 'sklearn/ensemble/tests/test_iforest.py::test_iforest_subsampled_features', 'sklearn/ensemble/tests/test_iforest.py::test_iforest_average_path_length', 'sklearn/ensemble/tests/test_iforest.py::test_score_samples', 'sklearn/ensemble/tests/test_iforest.py::test_deprecation', 'sklearn/ensemble/tests/test_iforest.py::test_behaviour_param', 'sklearn/ensemble/tests/test_iforest.py::test_iforest_chunks_works1[0.25-3]', 'sklearn/ensemble/tests/test_iforest.py::test_iforest_chunks_works1[auto-2]', 'sklearn/ensemble/tests/test_iforest.py::test_iforest_chunks_works2[0.25-3]', 'sklearn/ensemble/tests/test_iforest.py::test_iforest_chunks_works2[auto-2]'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for scikit-learn__scikit-learn-13496: resolved: True
