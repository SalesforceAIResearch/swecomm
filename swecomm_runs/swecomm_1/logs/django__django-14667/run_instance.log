2024-07-30 17:13:31,053 - INFO - Intermediate patch for django__django-14667 written to /shared/patch.diff, now applying to container...
2024-07-30 17:13:31,281 - INFO - >>>>> Applied Patch:
Checking patch django/db/models/query.py...
Checking patch django/db/models/sql/query.py...
Applied patch django/db/models/query.py cleanly.
Applied patch django/db/models/sql/query.py cleanly.

2024-07-30 17:13:35,562 - INFO - Git diff before:
diff --git a/django/db/models/query.py b/django/db/models/query.py
index 71a52fb754..6213ec6198 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1221,6 +1221,8 @@ class QuerySet:
         if fields == (None,):
             clone.query.clear_deferred_loading()
         else:
+            if clone.query.deferred_loading[0] is True:
+                clone.query.clear_deferred_loading()
             clone.query.add_deferred_loading(fields)
         return clone
 
@@ -1242,6 +1244,7 @@ class QuerySet:
             if field in self.query._filtered_relations:
                 raise ValueError('only() is not supported with FilteredRelation.')
         clone = self._chain()
+        clone.query.clear_deferred_loading()  # Clear any deferred fields
         clone.query.add_immediate_loading(fields)
         return clone
 
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 8837881579..d5b9d9d146 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -2076,11 +2076,12 @@ class Query(BaseExpression):
         are deferred (or removed from any existing field names that are marked
         as the only ones for immediate loading).
         """
-        # Fields on related models are stored in the literal double-underscore
-        # format, so that we can use a set datastructure. We do the foo__bar
-        # splitting and handling when computing the SQL column names (as part of
-        # get_columns()).
         existing, defer = self.deferred_loading
+        field_names = set(field_names)
+        if 'pk' in field_names:
+            field_names.remove('pk')
+            field_names.add(self.get_meta().pk.name)
+
         if defer:
             # Add to existing deferred names.
             self.deferred_loading = existing.union(field_names), True
2024-07-30 17:13:35,563 - INFO - Eval script for django__django-14667 written to /eval.sh
2024-07-30 17:14:21,856 - INFO - Test runtime: 46.29 seconds
2024-07-30 17:14:22,595 - INFO - Git diff after:
diff --git a/django/db/models/query.py b/django/db/models/query.py
index 71a52fb754..6213ec6198 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1221,6 +1221,8 @@ class QuerySet:
         if fields == (None,):
             clone.query.clear_deferred_loading()
         else:
+            if clone.query.deferred_loading[0] is True:
+                clone.query.clear_deferred_loading()
             clone.query.add_deferred_loading(fields)
         return clone
 
@@ -1242,6 +1244,7 @@ class QuerySet:
             if field in self.query._filtered_relations:
                 raise ValueError('only() is not supported with FilteredRelation.')
         clone = self._chain()
+        clone.query.clear_deferred_loading()  # Clear any deferred fields
         clone.query.add_immediate_loading(fields)
         return clone
 
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 8837881579..d5b9d9d146 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -2076,11 +2076,12 @@ class Query(BaseExpression):
         are deferred (or removed from any existing field names that are marked
         as the only ones for immediate loading).
         """
-        # Fields on related models are stored in the literal double-underscore
-        # format, so that we can use a set datastructure. We do the foo__bar
-        # splitting and handling when computing the SQL column names (as part of
-        # get_columns()).
         existing, defer = self.deferred_loading
+        field_names = set(field_names)
+        if 'pk' in field_names:
+            field_names.remove('pk')
+            field_names.add(self.get_meta().pk.name)
+
         if defer:
             # Add to existing deferred names.
             self.deferred_loading = existing.union(field_names), True
2024-07-30 17:14:22,595 - INFO - Grading answer for django__django-14667...
2024-07-30 17:14:22,644 - INFO - report: {'django__django-14667': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_defer_only_chaining (defer.tests.DeferTests)']}, 'PASS_TO_PASS': {'success': ['test_custom_refresh_on_deferred_loading (defer.tests.TestDefer2)', 'When an inherited model is fetched from the DB, its PK is also fetched.', 'Ensure select_related together with only on a proxy model behaves', 'test_eq (defer.tests.TestDefer2)', 'test_refresh_not_loading_deferred_fields (defer.tests.TestDefer2)', 'test_defer_baseclass_when_subclass_has_added_field (defer.tests.BigChildDeferTests)', 'test_defer_subclass (defer.tests.BigChildDeferTests)', 'test_defer_subclass_both (defer.tests.BigChildDeferTests)', 'test_only_baseclass_when_subclass_has_added_field (defer.tests.BigChildDeferTests)', 'test_only_subclass (defer.tests.BigChildDeferTests)', 'test_defer (defer.tests.DeferTests)', 'test_defer_baseclass_when_subclass_has_no_added_fields (defer.tests.DeferTests)', 'test_defer_extra (defer.tests.DeferTests)', 'test_defer_foreign_keys_are_deferred_and_not_traversed (defer.tests.DeferTests)', 'test_defer_none_to_clear_deferred_set (defer.tests.DeferTests)', 'test_defer_of_overridden_scalar (defer.tests.DeferTests)', 'test_defer_on_an_already_deferred_field (defer.tests.DeferTests)', 'test_defer_select_related_raises_invalid_query (defer.tests.DeferTests)', 'test_defer_values_does_not_defer (defer.tests.DeferTests)', 'test_defer_with_select_related (defer.tests.DeferTests)', 'test_get (defer.tests.DeferTests)', 'test_only (defer.tests.DeferTests)', 'test_only_baseclass_when_subclass_has_no_added_fields (defer.tests.DeferTests)', 'test_only_none_raises_error (defer.tests.DeferTests)', 'test_only_select_related_raises_invalid_query (defer.tests.DeferTests)', 'test_only_values_does_not_defer (defer.tests.DeferTests)', 'test_only_with_select_related (defer.tests.DeferTests)', 'test_saving_object_with_deferred_field (defer.tests.DeferTests)'], 'failure': ['test_defer_only_clear (defer.tests.DeferTests)']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for django__django-14667: resolved: False
