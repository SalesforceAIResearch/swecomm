+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/db/backends/postgresql/schema.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 647480166bfe7532e8c471fef0146e3a17e6c0c9
Author: Mariusz Felisiak <felisiak.mariusz@gmail.com>
Date:   Mon May 16 09:32:40 2022 +0200

    Refs #33685 -- Doc'd that using PostgreSQL's service names for testing purposes is not supported.

diff --git a/docs/ref/databases.txt b/docs/ref/databases.txt
index c270f56942..ca6362a7a6 100644
--- a/docs/ref/databases.txt
+++ b/docs/ref/databases.txt
@@ -165,6 +165,11 @@ password from the `password file`_, you must specify them in the
     Support for connecting by a service name, and specifying a password file
     was added.
 
+.. warning::
+
+    Using a service name for testing purposes is not supported. This
+    :ticket:`may be implemented later <33685>`.
+
 Optimizing PostgreSQL's configuration
 -------------------------------------
 
+ git diff 647480166bfe7532e8c471fef0146e3a17e6c0c9
diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py
index a22ae0094f..8d6937ba2e 100644
--- a/django/db/backends/postgresql/schema.py
+++ b/django/db/backends/postgresql/schema.py
@@ -297,3 +297,378 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
             include=include,
             expressions=expressions,
         )
+    def _rename_index(self, model, old_name, new_name):
+        """
+        Rename an index on a model.
+        """
+        table_name = model._meta.db_table
+        if not old_name:
+            # Generate a unique name for the old unnamed index
+            old_name = self._get_index_name(table_name, [field.column for field in model._meta.fields], "idx")
+        if not new_name:
+            # Generate a unique name for the new unnamed index
+            new_name = self._get_index_name(table_name, [field.column for field in model._meta.fields], "idx")
+        self.execute(self.sql_rename_index % {
+            "old_name": self.quote_name(old_name),
+            "new_name": self.quote_name(new_name),
+        })
+
+    def _get_index_name(self, table_name, column_names, suffix):
+        """
+        Generate a unique index name based on the table name, column names, and suffix.
+        Append a numeric suffix if the generated name already exists.
+        """
+        base_name = f"{table_name}_{'_'.join(column_names)}_{suffix}"
+        index_name = base_name
+        counter = 1
+        while self._index_exists(table_name, index_name):
+            index_name = f"{base_name}_{counter}"
+            counter += 1
+        return index_name
+
+    def _index_exists(self, table_name, index_name):
+        """
+        Check if an index with the given name already exists on the table.
+        """
+        with self.connection.cursor() as cursor:
+            cursor.execute(
+                "SELECT 1 FROM pg_indexes WHERE tablename = %s AND indexname = %s",
+                [table_name, index_name],
+            )
+            return cursor.fetchone() is not None
+        """
+        Rename an index on a model.
+        """
+        table_name = model._meta.db_table
+        if not old_name:
+            # Generate a unique name for the old unnamed index
+            old_name = self._get_index_name(table_name, [field.column for field in model._meta.fields], "idx")
+        if not new_name:
+            # Generate a unique name for the new unnamed index
+            new_name = self._get_index_name(table_name, [field.column for field in model._meta.fields], "idx")
+        self.execute(self.sql_rename_index % {
+            "old_name": self.quote_name(old_name),
+            "new_name": self.quote_name(new_name),
+        })
+
+from django.db.backends.base.schema import BaseDatabaseSchemaEditor
+from django.db.backends.ddl_references import IndexColumns
+from django.db.backends.utils import strip_quotes
+
+
+class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
+
+    # Setting all constraints to IMMEDIATE to allow changing data in the same
+    # transaction.
+    sql_update_with_default = (
+        "UPDATE %(table)s SET %(column)s = %(default)s WHERE %(column)s IS NULL"
+        "; SET CONSTRAINTS ALL IMMEDIATE"
+    )
+
+    sql_delete_sequence = "DROP SEQUENCE IF EXISTS %(sequence)s CASCADE"
+
+    sql_create_index = (
+        "CREATE INDEX %(name)s ON %(table)s%(using)s "
+        "(%(columns)s)%(include)s%(extra)s%(condition)s"
+    )
+    sql_create_index_concurrently = (
+        "CREATE INDEX CONCURRENTLY %(name)s ON %(table)s%(using)s "
+        "(%(columns)s)%(include)s%(extra)s%(condition)s"
+    )
+    sql_delete_index = "DROP INDEX IF EXISTS %(name)s"
+    sql_delete_index_concurrently = "DROP INDEX CONCURRENTLY IF EXISTS %(name)s"
+
+    # Setting the constraint to IMMEDIATE to allow changing data in the same
+    # transaction.
+    sql_create_column_inline_fk = (
+        "CONSTRAINT %(name)s REFERENCES %(to_table)s(%(to_column)s)%(deferrable)s"
+        "; SET CONSTRAINTS %(namespace)s%(name)s IMMEDIATE"
+    )
+    # Setting the constraint to IMMEDIATE runs any deferred checks to allow
+    # dropping it in the same transaction.
+    sql_delete_fk = (
+        "SET CONSTRAINTS %(name)s IMMEDIATE; "
+        "ALTER TABLE %(table)s DROP CONSTRAINT %(name)s"
+    )
+    sql_delete_procedure = "DROP FUNCTION %(procedure)s(%(param_types)s)"
+
+    sql_add_identity = (
+        "ALTER TABLE %(table)s ALTER COLUMN %(column)s ADD "
+        "GENERATED BY DEFAULT AS IDENTITY"
+    )
+    sql_drop_indentity = (
+        "ALTER TABLE %(table)s ALTER COLUMN %(column)s DROP IDENTITY IF EXISTS"
+    )
+
+    def quote_value(self, value):
+        if isinstance(value, str):
+            value = value.replace("%", "%%")
+        adapted = psycopg2.extensions.adapt(value)
+        if hasattr(adapted, "encoding"):
+            adapted.encoding = "utf8"
+        # getquoted() returns a quoted bytestring of the adapted value.
+        return adapted.getquoted().decode()
+
+    def _field_indexes_sql(self, model, field):
+        output = super()._field_indexes_sql(model, field)
+        like_index_statement = self._create_like_index_sql(model, field)
+        if like_index_statement is not None:
+            output.append(like_index_statement)
+        return output
+
+    def _field_data_type(self, field):
+        if field.is_relation:
+            return field.rel_db_type(self.connection)
+        return self.connection.data_types.get(
+            field.get_internal_type(),
+            field.db_type(self.connection),
+        )
+
+    def _field_base_data_types(self, field):
+        # Yield base data types for array fields.
+        if field.base_field.get_internal_type() == "ArrayField":
+            yield from self._field_base_data_types(field.base_field)
+        else:
+            yield self._field_data_type(field.base_field)
+
+    def _create_like_index_sql(self, model, field):
+        """
+        Return the statement to create an index with varchar operator pattern
+        when the column type is 'varchar' or 'text', otherwise return None.
+        """
+        db_type = field.db_type(connection=self.connection)
+        if db_type is not None and (field.db_index or field.unique):
+            # Fields with database column types of `varchar` and `text` need
+            # a second index that specifies their operator class, which is
+            # needed when performing correct LIKE queries outside the
+            # C locale. See #12234.
+            #
+            # The same doesn't apply to array fields such as varchar[size]
+            # and text[size], so skip them.
+            if "[" in db_type:
+                return None
+            if db_type.startswith("varchar"):
+                return self._create_index_sql(
+                    model,
+                    fields=[field],
+                    suffix="_like",
+                    opclasses=["varchar_pattern_ops"],
+                )
+            elif db_type.startswith("text"):
+                return self._create_index_sql(
+                    model,
+                    fields=[field],
+                    suffix="_like",
+                    opclasses=["text_pattern_ops"],
+                )
+        return None
+
+    def _alter_column_type_sql(self, model, old_field, new_field, new_type):
+        self.sql_alter_column_type = "ALTER COLUMN %(column)s TYPE %(type)s"
+        # Cast when data type changed.
+        using_sql = " USING %(column)s::%(type)s"
+        new_internal_type = new_field.get_internal_type()
+        old_internal_type = old_field.get_internal_type()
+        if new_internal_type == "ArrayField" and new_internal_type == old_internal_type:
+            # Compare base data types for array fields.
+            if list(self._field_base_data_types(old_field)) != list(
+                self._field_base_data_types(new_field)
+            ):
+                self.sql_alter_column_type += using_sql
+        elif self._field_data_type(old_field) != self._field_data_type(new_field):
+            self.sql_alter_column_type += using_sql
+        # Make ALTER TYPE with IDENTITY make sense.
+        table = strip_quotes(model._meta.db_table)
+        auto_field_types = {
+            "AutoField",
+            "BigAutoField",
+            "SmallAutoField",
+        }
+        old_is_auto = old_internal_type in auto_field_types
+        new_is_auto = new_internal_type in auto_field_types
+        if new_is_auto and not old_is_auto:
+            column = strip_quotes(new_field.column)
+            return (
+                (
+                    self.sql_alter_column_type
+                    % {
+                        "column": self.quote_name(column),
+                        "type": new_type,
+                    },
+                    [],
+                ),
+                [
+                    (
+                        self.sql_add_identity
+                        % {
+                            "table": self.quote_name(table),
+                            "column": self.quote_name(column),
+                        },
+                        [],
+                    ),
+                ],
+            )
+        elif old_is_auto and not new_is_auto:
+            # Drop IDENTITY if exists (pre-Django 4.1 serial columns don't have
+            # it).
+            self.execute(
+                self.sql_drop_indentity
+                % {
+                    "table": self.quote_name(table),
+                    "column": self.quote_name(strip_quotes(old_field.column)),
+                }
+            )
+            column = strip_quotes(new_field.column)
+            sequence_name = "%s_%s_seq" % (table, column)
+            fragment, _ = super()._alter_column_type_sql(
+                model, old_field, new_field, new_type
+            )
+            return fragment, [
+                (
+                    # Drop the sequence if exists (Django 4.1+ identity columns
+                    # don't have it).
+                    self.sql_delete_sequence
+                    % {
+                        "sequence": self.quote_name(sequence_name),
+                    },
+                    [],
+                ),
+            ]
+        else:
+            return super()._alter_column_type_sql(model, old_field, new_field, new_type)
+
+    def _alter_field(
+        self,
+        model,
+        old_field,
+        new_field,
+        old_type,
+        new_type,
+        old_db_params,
+        new_db_params,
+        strict=False,
+    ):
+        # Drop indexes on varchar/text/citext columns that are changing to a
+        # different type.
+        if (old_field.db_index or old_field.unique) and (
+            (old_type.startswith("varchar") and not new_type.startswith("varchar"))
+            or (old_type.startswith("text") and not new_type.startswith("text"))
+            or (old_type.startswith("citext") and not new_type.startswith("citext"))
+        ):
+            index_name = self._create_index_name(
+                model._meta.db_table, [old_field.column], suffix="_like"
+            )
+            self.execute(self._delete_index_sql(model, index_name))
+
+        super()._alter_field(
+            model,
+            old_field,
+            new_field,
+            old_type,
+            new_type,
+            old_db_params,
+            new_db_params,
+            strict,
+        )
+        # Added an index? Create any PostgreSQL-specific indexes.
+        if (not (old_field.db_index or old_field.unique) and new_field.db_index) or (
+            not old_field.unique and new_field.unique
+        ):
+            like_index_statement = self._create_like_index_sql(model, new_field)
+            if like_index_statement is not None:
+                self.execute(like_index_statement)
+
+        # Removed an index? Drop any PostgreSQL-specific indexes.
+        if old_field.unique and not (new_field.db_index or new_field.unique):
+            index_to_remove = self._create_index_name(
+                model._meta.db_table, [old_field.column], suffix="_like"
+            )
+            self.execute(self._delete_index_sql(model, index_to_remove))
+
+    def _index_columns(self, table, columns, col_suffixes, opclasses):
+        if opclasses:
+            return IndexColumns(
+                table,
+                columns,
+                self.quote_name,
+                col_suffixes=col_suffixes,
+                opclasses=opclasses,
+            )
+        return super()._index_columns(table, columns, col_suffixes, opclasses)
+
+    def add_index(self, model, index, concurrently=False):
+        self.execute(
+            index.create_sql(model, self, concurrently=concurrently), params=None
+        )
+
+    def remove_index(self, model, index, concurrently=False):
+        self.execute(index.remove_sql(model, self, concurrently=concurrently))
+
+    def _delete_index_sql(self, model, name, sql=None, concurrently=False):
+        sql = (
+            self.sql_delete_index_concurrently
+            if concurrently
+            else self.sql_delete_index
+        )
+        return super()._delete_index_sql(model, name, sql)
+
+    def _create_index_sql(
+        self,
+        model,
+        *,
+        fields=None,
+        name=None,
+        suffix="",
+        using="",
+        db_tablespace=None,
+        col_suffixes=(),
+        sql=None,
+        opclasses=(),
+        condition=None,
+        concurrently=False,
+        include=None,
+        expressions=None,
+    ):
+        sql = (
+            self.sql_create_index
+            if not concurrently
+            else self.sql_create_index_concurrently
+        )
+        return super()._create_index_sql(
+            model,
+            fields=fields,
+            name=name,
+            suffix=suffix,
+            using=using,
+            db_tablespace=db_tablespace,
+            col_suffixes=col_suffixes,
+            sql=sql,
+            opclasses=opclasses,
+            condition=condition,
+            include=include,
+            expressions=expressions,
+        )
+
+    def _get_index_name(self, table_name, column_names, suffix):
+        """
+        Generate a unique index name based on the table name, column names, and suffix.
+        Append a numeric suffix if the generated name already exists.
+        """
+        base_name = f"{table_name}_{'_'.join(column_names)}_{suffix}"
+        index_name = base_name
+        counter = 1
+        while self._index_exists(table_name, index_name):
+            index_name = f"{base_name}_{counter}"
+            counter += 1
+        return index_name
+
+    def _index_exists(self, table_name, index_name):
+        """
+        Check if an index with the given name already exists on the table.
+        """
+        with self.connection.cursor() as cursor:
+            cursor.execute(
+                "SELECT 1 FROM pg_indexes WHERE tablename = %s AND indexname = %s",
+                [table_name, index_name],
+            )
+            return cursor.fetchone() is not None
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220516073240) (3.8.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220516073240) (0.5.1)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.1.dev20220516073240) (4.12.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=Django-4.1.dev20220516073240-0.editable-py3-none-any.whl size=27004 sha256=211f732e66211686bf4b7b503b431781781c747e4c08dc09c73359c6197c795b
  Stored in directory: /tmp/pip-ephem-wheel-cache-d_uhlg46/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.1.dev20220516073240
    Uninstalling Django-4.1.dev20220516073240:
      Successfully uninstalled Django-4.1.dev20220516073240
Successfully installed Django-4.1.dev20220516073240
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
+ git checkout 647480166bfe7532e8c471fef0146e3a17e6c0c9 tests/migrations/test_operations.py
Updated 0 paths from a9f6b3ab6b
+ git apply -v -
Checking patch tests/migrations/test_operations.py...
Applied patch tests/migrations/test_operations.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 migrations.test_operations
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Testing against Django installed in '/testbed/django'
Importing application migrations
Found 130 test(s).
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, migrations, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table migrations_modelwithcustombase
    Creating table migrations_unmigratedmodel
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
Creating test database for alias 'other' ('file:memorydb_other?mode=memory&cache=shared')...
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, migrations, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table migrations_modelwithcustombase
    Creating table migrations_unmigratedmodel
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).
test_reference_field_by_through_fields (migrations.test_operations.FieldOperationTests) ... ok
test_references_field_by_from_fields (migrations.test_operations.FieldOperationTests) ... ok
test_references_field_by_name (migrations.test_operations.FieldOperationTests) ... ok
test_references_field_by_remote_field_model (migrations.test_operations.FieldOperationTests) ... ok
test_references_field_by_through (migrations.test_operations.FieldOperationTests) ... ok
test_references_field_by_to_fields (migrations.test_operations.FieldOperationTests) ... ok
test_references_model (migrations.test_operations.FieldOperationTests) ... ok
test_add_binaryfield (migrations.test_operations.OperationTests)
Tests the AddField operation on TextField/BinaryField. ... ok
test_add_charfield (migrations.test_operations.OperationTests)
Tests the AddField operation on TextField. ... ok
test_add_constraint (migrations.test_operations.OperationTests) ... ok
test_add_constraint_combinable (migrations.test_operations.OperationTests) ... ok
test_add_constraint_percent_escaping (migrations.test_operations.OperationTests) ... ok
test_add_covering_unique_constraint (migrations.test_operations.OperationTests) ... ok
test_add_deferred_unique_constraint (migrations.test_operations.OperationTests) ... ok
test_add_field (migrations.test_operations.OperationTests)
Tests the AddField operation. ... ok
test_add_field_m2m (migrations.test_operations.OperationTests)
Tests the AddField operation with a ManyToManyField. ... ok
test_add_field_preserve_default (migrations.test_operations.OperationTests)
Tests the AddField operation's state alteration ... ok
test_add_func_index (migrations.test_operations.OperationTests) ... ok
test_add_func_unique_constraint (migrations.test_operations.OperationTests) ... ok
test_add_index (migrations.test_operations.OperationTests)
Test the AddIndex operation. ... ok
test_add_index_state_forwards (migrations.test_operations.OperationTests) ... ok
test_add_or_constraint (migrations.test_operations.OperationTests) ... ok
test_add_partial_unique_constraint (migrations.test_operations.OperationTests) ... ok
test_add_textfield (migrations.test_operations.OperationTests)
Tests the AddField operation on TextField. ... ok
test_alter_field (migrations.test_operations.OperationTests)
Tests the AlterField operation. ... ok
test_alter_field_add_db_column_noop (migrations.test_operations.OperationTests)
AlterField operation is a noop when adding only a db_column and the ... ok
test_alter_field_m2m (migrations.test_operations.OperationTests) ... ok
test_alter_field_pk (migrations.test_operations.OperationTests)
The AlterField operation on primary keys (things like PostgreSQL's ... ok
test_alter_field_pk_fk (migrations.test_operations.OperationTests)
Tests the AlterField operation on primary keys changes any FKs pointing to it. ... ok
test_alter_field_pk_fk_db_collation (migrations.test_operations.OperationTests)
AlterField operation of db_collation on primary keys changes any FKs ... ok
test_alter_field_pk_mti_and_fk_to_base (migrations.test_operations.OperationTests) ... ok
test_alter_field_pk_mti_fk (migrations.test_operations.OperationTests) ... ok
test_alter_field_reloads_state_fk_with_to_field_related_name_target_type_change (migrations.test_operations.OperationTests) ... ok
test_alter_field_reloads_state_on_fk_target_changes (migrations.test_operations.OperationTests)
If AlterField doesn't reload state appropriately, the second AlterField ... ok
test_alter_field_reloads_state_on_fk_with_to_field_target_changes (migrations.test_operations.OperationTests)
If AlterField doesn't reload state appropriately, the second AlterField ... ok
test_alter_field_reloads_state_on_fk_with_to_field_target_type_change (migrations.test_operations.OperationTests) ... ok
test_alter_field_with_func_index (migrations.test_operations.OperationTests) ... ok
test_alter_field_with_func_unique_constraint (migrations.test_operations.OperationTests) ... ok
test_alter_field_with_index (migrations.test_operations.OperationTests)
Test AlterField operation with an index to ensure indexes created via ... ok
test_alter_fk (migrations.test_operations.OperationTests)
Creating and then altering an FK works correctly ... ok
test_alter_fk_non_fk (migrations.test_operations.OperationTests)
Altering an FK to a non-FK works (#23244) ... ok
test_alter_index_together (migrations.test_operations.OperationTests)
Tests the AlterIndexTogether operation. ... ok
test_alter_index_together_remove (migrations.test_operations.OperationTests) ... ok
test_alter_index_together_remove_with_unique_together (migrations.test_operations.OperationTests) ... ok
test_alter_model_managers (migrations.test_operations.OperationTests)
The managers on a model are set. ... ok
test_alter_model_managers_emptying (migrations.test_operations.OperationTests)
The managers on a model are set. ... ok
test_alter_model_options (migrations.test_operations.OperationTests)
Tests the AlterModelOptions operation. ... ok
test_alter_model_options_emptying (migrations.test_operations.OperationTests)
The AlterModelOptions operation removes keys from the dict (#23121) ... ok
test_alter_model_table (migrations.test_operations.OperationTests)
Tests the AlterModelTable operation. ... ok
test_alter_model_table_m2m (migrations.test_operations.OperationTests)
AlterModelTable should rename auto-generated M2M tables. ... ok
test_alter_model_table_none (migrations.test_operations.OperationTests)
Tests the AlterModelTable operation if the table name is set to None. ... ok
test_alter_model_table_noop (migrations.test_operations.OperationTests)
Tests the AlterModelTable operation if the table name is not changed. ... ok
test_alter_order_with_respect_to (migrations.test_operations.OperationTests)
Tests the AlterOrderWithRespectTo operation. ... ok
test_alter_unique_together (migrations.test_operations.OperationTests)
Tests the AlterUniqueTogether operation. ... ok
test_alter_unique_together_remove (migrations.test_operations.OperationTests) ... ok
test_autofield__bigautofield_foreignfield_growth (migrations.test_operations.OperationTests)
A field may be migrated from AutoField to BigAutoField. ... ok
test_column_name_quoting (migrations.test_operations.OperationTests)
Column names that are SQL keywords shouldn't cause problems when used ... ok
test_create_fk_models_to_pk_field_db_collation (migrations.test_operations.OperationTests)
Creation of models with a FK to a PK with db_collation. ... ok
test_create_model (migrations.test_operations.OperationTests)
Tests the CreateModel operation. ... ok
test_create_model_inheritance (migrations.test_operations.OperationTests)
Tests the CreateModel operation on a multi-table inheritance setup. ... ok
test_create_model_m2m (migrations.test_operations.OperationTests)
Test the creation of a model with a ManyToMany field and the ... ok
test_create_model_managers (migrations.test_operations.OperationTests)
The managers on a model are set. ... ok
test_create_model_with_boolean_expression_in_check_constraint (migrations.test_operations.OperationTests) ... ok
test_create_model_with_constraint (migrations.test_operations.OperationTests) ... ok
test_create_model_with_covering_unique_constraint (migrations.test_operations.OperationTests) ... skipped "Database doesn't support feature(s): supports_covering_indexes"
test_create_model_with_deferred_unique_constraint (migrations.test_operations.OperationTests) ... ok
test_create_model_with_duplicate_base (migrations.test_operations.OperationTests) ... ok
test_create_model_with_duplicate_field_name (migrations.test_operations.OperationTests) ... ok
test_create_model_with_duplicate_manager_name (migrations.test_operations.OperationTests) ... ok
test_create_model_with_partial_unique_constraint (migrations.test_operations.OperationTests) ... ok
test_create_model_with_unique_after (migrations.test_operations.OperationTests)
Tests the CreateModel operation directly followed by an ... ok
test_create_proxy_model (migrations.test_operations.OperationTests)
CreateModel ignores proxy models. ... ok
test_create_unmanaged_model (migrations.test_operations.OperationTests)
CreateModel ignores unmanaged models. ... ok
test_delete_model (migrations.test_operations.OperationTests)
Tests the DeleteModel operation. ... ok
test_delete_mti_model (migrations.test_operations.OperationTests) ... ok
test_delete_proxy_model (migrations.test_operations.OperationTests)
Tests the DeleteModel operation ignores proxy models. ... ok
test_model_with_bigautofield (migrations.test_operations.OperationTests)
A model with BigAutoField can be created. ... ok
test_remove_constraint (migrations.test_operations.OperationTests) ... ok
test_remove_covering_unique_constraint (migrations.test_operations.OperationTests) ... ok
test_remove_deferred_unique_constraint (migrations.test_operations.OperationTests) ... ok
test_remove_field (migrations.test_operations.OperationTests)
Tests the RemoveField operation. ... ok
test_remove_field_m2m (migrations.test_operations.OperationTests) ... ok
test_remove_field_m2m_with_through (migrations.test_operations.OperationTests) ... ok
test_remove_fk (migrations.test_operations.OperationTests)
Tests the RemoveField operation on a foreign key. ... ok
test_remove_func_index (migrations.test_operations.OperationTests) ... ok
test_remove_func_unique_constraint (migrations.test_operations.OperationTests) ... ok
test_remove_index (migrations.test_operations.OperationTests)
Test the RemoveIndex operation. ... ok
test_remove_index_state_forwards (migrations.test_operations.OperationTests) ... ok
test_remove_partial_unique_constraint (migrations.test_operations.OperationTests) ... ok
test_rename_field (migrations.test_operations.OperationTests)
Tests the RenameField operation. ... ok
test_rename_field_case (migrations.test_operations.OperationTests) ... ok
test_rename_field_reloads_state_on_fk_target_changes (migrations.test_operations.OperationTests)
If RenameField doesn't reload state appropriately, the AlterField ... ok
test_rename_field_with_db_column (migrations.test_operations.OperationTests) ... ok
test_rename_index (migrations.test_operations.OperationTests) ... ok
test_rename_index_arguments (migrations.test_operations.OperationTests) ... ok
test_rename_index_state_forwards (migrations.test_operations.OperationTests) ... ok
test_rename_index_state_forwards_unnamed_index (migrations.test_operations.OperationTests) ... ok
test_rename_index_unknown_unnamed_index (migrations.test_operations.OperationTests) ... ok
test_rename_index_unnamed_index (migrations.test_operations.OperationTests) ... ERROR
test_rename_m2m_model_after_rename_field (migrations.test_operations.OperationTests)
RenameModel renames a many-to-many column after a RenameField. ... ok
test_rename_m2m_target_model (migrations.test_operations.OperationTests) ... ok
test_rename_m2m_through_model (migrations.test_operations.OperationTests) ... ok
test_rename_missing_field (migrations.test_operations.OperationTests) ... ok
test_rename_model (migrations.test_operations.OperationTests)
Tests the RenameModel operation. ... ok
test_rename_model_state_forwards (migrations.test_operations.OperationTests)
RenameModel operations shouldn't trigger the caching of rendered apps ... ok
test_rename_model_with_db_table_noop (migrations.test_operations.OperationTests) ... ok
test_rename_model_with_m2m (migrations.test_operations.OperationTests) ... ok
test_rename_model_with_self_referential_fk (migrations.test_operations.OperationTests)
Tests the RenameModel operation on model with self referential FK. ... ok
test_rename_model_with_self_referential_m2m (migrations.test_operations.OperationTests) ... ok
test_rename_model_with_superclass_fk (migrations.test_operations.OperationTests)
Tests the RenameModel operation on a model which has a superclass that ... ok
test_rename_referenced_field_state_forward (migrations.test_operations.OperationTests) ... ok
test_repoint_field_m2m (migrations.test_operations.OperationTests) ... ok
test_run_python (migrations.test_operations.OperationTests)
Tests the RunPython operation ... ok
test_run_python_atomic (migrations.test_operations.OperationTests)
Tests the RunPython operation correctly handles the "atomic" keyword ... ok
test_run_python_noop (migrations.test_operations.OperationTests)
#24098 - Tests no-op RunPython operations. ... ok
test_run_python_related_assignment (migrations.test_operations.OperationTests)
#24282 - Model changes to a FK reverse side update the model ... ok
test_run_sql (migrations.test_operations.OperationTests)
Tests the RunSQL operation. ... ok
test_run_sql_add_missing_semicolon_on_collect_sql (migrations.test_operations.OperationTests) ... ok
test_run_sql_noop (migrations.test_operations.OperationTests)
#24098 - Tests no-op RunSQL operations. ... ok
test_run_sql_params (migrations.test_operations.OperationTests)
#23426 - RunSQL should accept parameters. ... ok
test_run_sql_params_invalid (migrations.test_operations.OperationTests)
#23426 - RunSQL should fail when a list of statements with an incorrect ... ok
test_separate_database_and_state (migrations.test_operations.OperationTests)
Tests the SeparateDatabaseAndState operation. ... ok
test_separate_database_and_state2 (migrations.test_operations.OperationTests)
A complex SeparateDatabaseAndState operation: Multiple operations both ... ok
test_smallfield_autofield_foreignfield_growth (migrations.test_operations.OperationTests)
A field may be migrated from SmallAutoField to AutoField. ... ok
test_smallfield_bigautofield_foreignfield_growth (migrations.test_operations.OperationTests)
A field may be migrated from SmallAutoField to BigAutoField. ... ok
test_add_field_ignore_swapped (migrations.test_operations.SwappableOperationTests)
Tests the AddField operation. ... ok
test_create_ignore_swapped (migrations.test_operations.SwappableOperationTests)
The CreateTable operation ignores swapped models. ... ok
test_delete_ignore_swapped (migrations.test_operations.SwappableOperationTests)
Tests the DeleteModel operation ignores swapped models. ... ok
test_indexes_ignore_swapped (migrations.test_operations.SwappableOperationTests)
Add/RemoveIndex operations ignore swapped models. ... ok
test_references_model_mixin (migrations.test_operations.TestCreateModel) ... ok

======================================================================
ERROR: test_rename_index_unnamed_index (migrations.test_operations.OperationTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_operations.py", line 2994, in test_rename_index_unnamed_index
    operation.database_forwards(app_label, editor, new_state, project_state)
  File "/testbed/django/db/migrations/operations/models.py", line 965, in database_forwards
    new_index = to_model_state.get_index_by_name(self.new_name)
  File "/testbed/django/db/migrations/state.py", line 959, in get_index_by_name
    raise ValueError("No index named %s on model %s" % (name, self.name))
ValueError: No index named new_pony_test_idx on model Pony

----------------------------------------------------------------------
Ran 130 tests in 8.892s

FAILED (errors=1, skipped=1)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Destroying test database for alias 'other' ('file:memorydb_other?mode=memory&cache=shared')...
+ git checkout 647480166bfe7532e8c471fef0146e3a17e6c0c9 tests/migrations/test_operations.py
Updated 1 path from a9f6b3ab6b
