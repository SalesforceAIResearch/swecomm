2024-07-30 17:14:29,361 - INFO - Intermediate patch for sympy__sympy-17630 written to /shared/patch.diff, now applying to container...
2024-07-30 17:14:29,573 - INFO - >>>>> Applied Patch:
Checking patch sympy/matrices/expressions/blockmatrix.py...
Applied patch sympy/matrices/expressions/blockmatrix.py cleanly.

2024-07-30 17:14:32,922 - INFO - Git diff before:
diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..f49b674307 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -152,7 +152,11 @@ def rowblocksizes(self):
 
     @property
     def colblocksizes(self):
-        return [self.blocks[0, i].cols for i in range(self.blockshape[1])]
+        return [
+            self.blocks[0, i].cols if isinstance(self.blocks[0, i], MatrixExpr)
+            else self.shape[1] // self.blockshape[1]
+            for i in range(self.blockshape[1])
+        ]
 
     def structurally_equal(self, other):
         return (isinstance(other, BlockMatrix)
@@ -162,9 +166,21 @@ def structurally_equal(self, other):
             and self.colblocksizes == other.colblocksizes)
 
     def _blockmul(self, other):
-        if (isinstance(other, BlockMatrix) and
-                self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
+        if isinstance(other, BlockMatrix) and self.colblocksizes == other.rowblocksizes:
+            result_blocks = []
+            for i in range(self.blockshape[0]):
+                result_row = []
+                for j in range(other.blockshape[1]):
+                    block_sum = ZeroMatrix(self.rowblocksizes[i], other.colblocksizes[j])
+                    for k in range(self.blockshape[1]):
+                        A = self.blocks[i, k]
+                        B = other.blocks[k, j]
+                        if isinstance(A, ZeroMatrix) or isinstance(B, ZeroMatrix):
+                            continue
+                        block_sum += A * B
+                    result_row.append(block_sum)
+                result_blocks.append(result_row)
+            return BlockMatrix(result_blocks)
 
         return self * other
 
@@ -369,6 +385,11 @@ def block_collapse(expr):
     """
     from sympy.strategies.util import expr_fns
 
+    def convert_zero_to_zeromatrix(expr):
+        if isinstance(expr, Zero):
+            return ZeroMatrix(expr.shape[0], expr.shape[1])
+        return expr
+
     hasbm = lambda expr: isinstance(expr, MatrixExpr) and expr.has(BlockMatrix)
 
     conditioned_rl = condition(
@@ -379,7 +400,8 @@ def block_collapse(expr):
              MatPow: bc_matmul,
              Transpose: bc_transpose,
              Inverse: bc_inverse,
-             BlockMatrix: do_one(bc_unpack, deblock)}
+             BlockMatrix: do_one(bc_unpack, deblock),
+             Zero: convert_zero_to_zeromatrix}
         )
     )
2024-07-30 17:14:32,923 - INFO - Eval script for sympy__sympy-17630 written to /eval.sh
2024-07-30 17:15:07,172 - INFO - Test runtime: 34.25 seconds
2024-07-30 17:15:07,524 - INFO - Git diff after:
diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..f49b674307 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -152,7 +152,11 @@ def rowblocksizes(self):
 
     @property
     def colblocksizes(self):
-        return [self.blocks[0, i].cols for i in range(self.blockshape[1])]
+        return [
+            self.blocks[0, i].cols if isinstance(self.blocks[0, i], MatrixExpr)
+            else self.shape[1] // self.blockshape[1]
+            for i in range(self.blockshape[1])
+        ]
 
     def structurally_equal(self, other):
         return (isinstance(other, BlockMatrix)
@@ -162,9 +166,21 @@ def structurally_equal(self, other):
             and self.colblocksizes == other.colblocksizes)
 
     def _blockmul(self, other):
-        if (isinstance(other, BlockMatrix) and
-                self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
+        if isinstance(other, BlockMatrix) and self.colblocksizes == other.rowblocksizes:
+            result_blocks = []
+            for i in range(self.blockshape[0]):
+                result_row = []
+                for j in range(other.blockshape[1]):
+                    block_sum = ZeroMatrix(self.rowblocksizes[i], other.colblocksizes[j])
+                    for k in range(self.blockshape[1]):
+                        A = self.blocks[i, k]
+                        B = other.blocks[k, j]
+                        if isinstance(A, ZeroMatrix) or isinstance(B, ZeroMatrix):
+                            continue
+                        block_sum += A * B
+                    result_row.append(block_sum)
+                result_blocks.append(result_row)
+            return BlockMatrix(result_blocks)
 
         return self * other
 
@@ -369,6 +385,11 @@ def block_collapse(expr):
     """
     from sympy.strategies.util import expr_fns
 
+    def convert_zero_to_zeromatrix(expr):
+        if isinstance(expr, Zero):
+            return ZeroMatrix(expr.shape[0], expr.shape[1])
+        return expr
+
     hasbm = lambda expr: isinstance(expr, MatrixExpr) and expr.has(BlockMatrix)
 
     conditioned_rl = condition(
@@ -379,7 +400,8 @@ def block_collapse(expr):
              MatPow: bc_matmul,
              Transpose: bc_transpose,
              Inverse: bc_inverse,
-             BlockMatrix: do_one(bc_unpack, deblock)}
+             BlockMatrix: do_one(bc_unpack, deblock),
+             Zero: convert_zero_to_zeromatrix}
         )
     )
2024-07-30 17:15:07,524 - INFO - Grading answer for sympy__sympy-17630...
2024-07-30 17:15:07,527 - INFO - report: {'sympy__sympy-17630': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_issue_17624', 'test_zero_matrix_add']}, 'PASS_TO_PASS': {'success': ['test_bc_matmul', 'test_bc_matadd', 'test_bc_dist_diag', 'test_block_plus_ident', 'test_BlockMatrix_trace', 'test_BlockMatrix_Determinant', 'test_blockcut', 'test_reblock_2x2', 'test_deblock', 'test_sort_key', 'test_matadd_sympify', 'test_matadd_of_matrices', 'test_doit_args', 'test_generic_identity'], 'failure': ['test_bc_transpose', 'test_BlockMatrix', 'test_block_collapse_explicit_matrices', 'test_squareBlockMatrix', 'test_BlockDiagMatrix']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-17630: resolved: False
