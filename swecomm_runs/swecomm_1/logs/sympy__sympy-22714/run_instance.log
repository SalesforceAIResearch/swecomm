2024-07-30 17:13:46,385 - INFO - Intermediate patch for sympy__sympy-22714 written to /shared/patch.diff, now applying to container...
2024-07-30 17:13:46,716 - INFO - >>>>> Applied Patch:
Checking patch sympy/geometry/point.py...
Applied patch sympy/geometry/point.py cleanly.

2024-07-30 17:13:52,836 - INFO - Git diff before:
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 73c20334d0..e226172d9a 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -152,7 +152,7 @@ def __new__(cls, *args, **kwargs):
                         'warn' or 'ignore'.'''))
         if any(coords[dim:]):
             raise ValueError('Nonzero coordinates cannot be removed.')
-        if any(a.is_number and im(a) for a in coords):
+        if evaluate and any(a.is_number and im(a) for a in coords):
             raise ValueError('Imaginary coordinates are not permitted.')
         if not all(isinstance(a, Expr) for a in coords):
             raise TypeError('Coordinates must be valid SymPy expressions.')
@@ -911,6 +911,12 @@ class Point2D(Point):
 
     def __new__(cls, *args, _nocheck=False, **kwargs):
         if not _nocheck:
+            evaluate = kwargs.get('evaluate', global_parameters.evaluate)
+            if not evaluate:
+                coords = Tuple(*args)
+                if len(coords) != 2:
+                    raise ValueError("Point2D requires exactly 2 coordinates.")
+                return GeometryEntity.__new__(cls, *coords)
             kwargs['dim'] = 2
             args = Point(*args, **kwargs)
         return GeometryEntity.__new__(cls, *args)
2024-07-30 17:13:52,836 - INFO - Eval script for sympy__sympy-22714 written to /eval.sh
2024-07-30 17:15:04,348 - INFO - Test runtime: 71.51 seconds
2024-07-30 17:15:04,527 - INFO - Git diff after:
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 73c20334d0..e226172d9a 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -152,7 +152,7 @@ def __new__(cls, *args, **kwargs):
                         'warn' or 'ignore'.'''))
         if any(coords[dim:]):
             raise ValueError('Nonzero coordinates cannot be removed.')
-        if any(a.is_number and im(a) for a in coords):
+        if evaluate and any(a.is_number and im(a) for a in coords):
             raise ValueError('Imaginary coordinates are not permitted.')
         if not all(isinstance(a, Expr) for a in coords):
             raise TypeError('Coordinates must be valid SymPy expressions.')
@@ -911,6 +911,12 @@ class Point2D(Point):
 
     def __new__(cls, *args, _nocheck=False, **kwargs):
         if not _nocheck:
+            evaluate = kwargs.get('evaluate', global_parameters.evaluate)
+            if not evaluate:
+                coords = Tuple(*args)
+                if len(coords) != 2:
+                    raise ValueError("Point2D requires exactly 2 coordinates.")
+                return GeometryEntity.__new__(cls, *coords)
             kwargs['dim'] = 2
             args = Point(*args, **kwargs)
         return GeometryEntity.__new__(cls, *args)
2024-07-30 17:15:04,527 - INFO - Grading answer for sympy__sympy-22714...
2024-07-30 17:15:04,528 - INFO - report: {'sympy__sympy-22714': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': True, 'tests_status': {'FAIL_TO_PASS': {'success': ['test_issue_22684'], 'failure': []}, 'PASS_TO_PASS': {'success': ['test_point', 'test_point3D', 'test_Point2D', 'test_issue_9214', 'test_issue_11617', 'test_transform', 'test_concyclic_doctest_bug', 'test_arguments', 'test_unit', 'test_dot', 'test__normalize_dimension'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-22714: resolved: True
