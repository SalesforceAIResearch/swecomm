2024-07-30 17:15:49,524 - INFO - Intermediate patch for pylint-dev__pylint-6506 written to /shared/patch.diff, now applying to container...
2024-07-30 17:15:51,070 - INFO - >>>>> Applied Patch:
Checking patch pylint/config/config_initialization.py...
Applied patch pylint/config/config_initialization.py cleanly.

2024-07-30 17:15:53,456 - INFO - Git diff before:
diff --git a/pylint/config/config_initialization.py b/pylint/config/config_initialization.py
index 24e453a73..782f27052 100644
--- a/pylint/config/config_initialization.py
+++ b/pylint/config/config_initialization.py
@@ -38,7 +38,7 @@ def _config_initialization(
     try:
         config_data, config_args = config_file_parser.parse_config_file(
             file_path=config_file
-        )
+          )
     except OSError as ex:
         print(ex, file=sys.stderr)
         sys.exit(32)
@@ -80,9 +80,7 @@ def _config_initialization(
         elif opt.startswith("-"):
             unrecognized_options.append(opt[1:])
     if unrecognized_options:
-        msg = ", ".join(unrecognized_options)
-        linter.add_message("unrecognized-option", line=0, args=msg)
-        raise _UnrecognizedOptionError(options=unrecognized_options)
+        _print_usage_and_exit(unrecognized_options, verbose_mode, linter)
 
     # Set the current module to configuration as we don't know where
     # the --load-plugins key is coming from
@@ -104,3 +102,13 @@ def _config_initialization(
     linter._parse_error_mode()
 
     return parsed_args_list
+
+def _print_usage_and_exit(unrecognized_options: list[str], verbose_mode, linter) -> None:
+    """Print a usage message for unrecognized options and exit."""
+    msg = f"Unrecognized option(s): {', '.join(unrecognized_options)}"
+    if verbose_mode:
+        linter.add_message("unrecognized-option", line=0, args=msg)
+    print("\nUsage:", file=sys.stderr)
+    print(f"Error: {msg}", file=sys.stderr)
+    print(linter.help(), file=sys.stderr)
+    sys.exit(2)
\ No newline at end of file
2024-07-30 17:15:53,456 - INFO - Eval script for pylint-dev__pylint-6506 written to /eval.sh
2024-07-30 17:16:35,648 - INFO - Test runtime: 42.19 seconds
2024-07-30 17:16:36,008 - INFO - Git diff after:
diff --git a/pylint/config/config_initialization.py b/pylint/config/config_initialization.py
index 24e453a73..782f27052 100644
--- a/pylint/config/config_initialization.py
+++ b/pylint/config/config_initialization.py
@@ -38,7 +38,7 @@ def _config_initialization(
     try:
         config_data, config_args = config_file_parser.parse_config_file(
             file_path=config_file
-        )
+          )
     except OSError as ex:
         print(ex, file=sys.stderr)
         sys.exit(32)
@@ -80,9 +80,7 @@ def _config_initialization(
         elif opt.startswith("-"):
             unrecognized_options.append(opt[1:])
     if unrecognized_options:
-        msg = ", ".join(unrecognized_options)
-        linter.add_message("unrecognized-option", line=0, args=msg)
-        raise _UnrecognizedOptionError(options=unrecognized_options)
+        _print_usage_and_exit(unrecognized_options, verbose_mode, linter)
 
     # Set the current module to configuration as we don't know where
     # the --load-plugins key is coming from
@@ -104,3 +102,13 @@ def _config_initialization(
     linter._parse_error_mode()
 
     return parsed_args_list
+
+def _print_usage_and_exit(unrecognized_options: list[str], verbose_mode, linter) -> None:
+    """Print a usage message for unrecognized options and exit."""
+    msg = f"Unrecognized option(s): {', '.join(unrecognized_options)}"
+    if verbose_mode:
+        linter.add_message("unrecognized-option", line=0, args=msg)
+    print("\nUsage:", file=sys.stderr)
+    print(f"Error: {msg}", file=sys.stderr)
+    print(linter.help(), file=sys.stderr)
+    sys.exit(2)
\ No newline at end of file
2024-07-30 17:16:36,008 - INFO - Grading answer for pylint-dev__pylint-6506...
2024-07-30 17:16:36,052 - INFO - report: {'pylint-dev__pylint-6506': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': True, 'tests_status': {'FAIL_TO_PASS': {'success': ['tests/config/test_config.py::test_unknown_option_name', 'tests/config/test_config.py::test_unknown_short_option_name'], 'failure': []}, 'PASS_TO_PASS': {'success': ['tests/config/test_config.py::test_can_read_toml_env_variable', 'tests/config/test_config.py::test_unknown_message_id', 'tests/config/test_config.py::test_unknown_confidence', 'tests/config/test_config.py::test_unknown_yes_no', 'tests/config/test_config.py::test_unknown_py_version', 'tests/config/test_config.py::test_short_verbose'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for pylint-dev__pylint-6506: resolved: True
