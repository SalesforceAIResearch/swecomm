2024-07-30 17:17:02,796 - INFO - Intermediate patch for sympy__sympy-18698 written to /shared/patch.diff, now applying to container...
2024-07-30 17:17:03,073 - INFO - >>>>> Applied Patch:
Checking patch sympy/polys/polytools.py...
Applied patch sympy/polys/polytools.py cleanly.

2024-07-30 17:17:06,172 - INFO - Git diff before:
diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py
index c9e77a901f..f32576da4a 100644
--- a/sympy/polys/polytools.py
+++ b/sympy/polys/polytools.py
@@ -6215,7 +6215,270 @@ def sqf_list(f, *gens, **args):
     (2, [(x + 1, 2), (x + 2, 3)])
 
     """
-    return _generic_factor_list(f, gens, args, method='sqf')
+    options.allowed_flags(args,['frac','polys'])
+    opt = options.build_options(gens,args)
+
+    expr = sympify(f)
+
+    if isinstance(expr,(Expr)):
+        numer = together(expr).as_numer_denom()[0]
+        numer = Poly(numer)
+        if len(numer.gens) !=1:
+            raise ValueError("Multivariate polynomials are not supported")
+        numer = numer.as_expr()
+        cp , fp = _symbolic_factor_list(numer,opt,'sqf')
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+    if isinstance(expr,(Expr)):
+        numer = together(expr).as_numer_denom()[0]
+        numer = Poly(numer)
+        if len(numer.gens) !=1:
+            raise ValueError("Multivariate polynomials are not supported")
+        numer = numer.as_expr()
+        cp , fp = _symbolic_factor_list(numer,opt,'sqf')
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+    if isinstance(expr,(Expr)):
+        numer = together(expr).as_numer_denom()[0]
+        numer = Poly(numer)
+        if len(numer.gens) !=1:
+            raise ValueError("Multivariate polynomials are not supported")
+        numer = numer.as_expr()
+        cp , fp = _symbolic_factor_list(numer,opt,'sqf')
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+    if isinstance(expr,(Expr)):
+        numer = together(expr).as_numer_denom()[0]
+        numer = Poly(numer)
+        if len(numer.gens) !=1:
+            raise ValueError("Multivariate polynomials are not supported")
+        numer = numer.as_expr()
+        cp , fp = _symbolic_factor_list(numer,opt,'sqf')
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+    options.allowed_flags(args,['frac','polys'])
+    opt = options.build_options(gens,args)
+
+    expr = sympify(f)
+
+    if isinstance(expr,(Expr)):
+        numer = together(expr).as_numer_denom()[0]
+        numer = Poly(numer)
+        if len(numer.gens) !=1:
+            raise ValueError("Multivariate polynomials are not supported")
+        numer = numer.as_expr()
+        cp , fp = _symbolic_factor_list(numer,opt,'sqf')
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+    options.allowed_flags(args, ['frac', 'polys'])
+    opt = options.build_options(gens, args)
+
+    expr = sympify(f)
+
+    if isinstance(expr,(Expr)):
+        numer = together(expr).as_numer_denom()[0]
+        numer = Poly(numer)
+        if len(numer.gens) !=1:
+            raise ValueError("Multivariate polynomials are not supported")
+        numer = numer.as_expr()
+        cp, fp = _symbolic_factor_list(numer,opt,'sqf')
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+#       Combining factors of same multiplicity
+#       and returning list
+
+#       return cp,_sorted_factors(fp,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
 
 
 @public
2024-07-30 17:17:06,188 - INFO - Eval script for sympy__sympy-18698 written to /eval.sh
2024-07-30 17:19:34,052 - INFO - Test runtime: 147.86 seconds
2024-07-30 17:19:34,276 - INFO - Git diff after:
diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py
index c9e77a901f..f32576da4a 100644
--- a/sympy/polys/polytools.py
+++ b/sympy/polys/polytools.py
@@ -6215,7 +6215,270 @@ def sqf_list(f, *gens, **args):
     (2, [(x + 1, 2), (x + 2, 3)])
 
     """
-    return _generic_factor_list(f, gens, args, method='sqf')
+    options.allowed_flags(args,['frac','polys'])
+    opt = options.build_options(gens,args)
+
+    expr = sympify(f)
+
+    if isinstance(expr,(Expr)):
+        numer = together(expr).as_numer_denom()[0]
+        numer = Poly(numer)
+        if len(numer.gens) !=1:
+            raise ValueError("Multivariate polynomials are not supported")
+        numer = numer.as_expr()
+        cp , fp = _symbolic_factor_list(numer,opt,'sqf')
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+    if isinstance(expr,(Expr)):
+        numer = together(expr).as_numer_denom()[0]
+        numer = Poly(numer)
+        if len(numer.gens) !=1:
+            raise ValueError("Multivariate polynomials are not supported")
+        numer = numer.as_expr()
+        cp , fp = _symbolic_factor_list(numer,opt,'sqf')
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+    if isinstance(expr,(Expr)):
+        numer = together(expr).as_numer_denom()[0]
+        numer = Poly(numer)
+        if len(numer.gens) !=1:
+            raise ValueError("Multivariate polynomials are not supported")
+        numer = numer.as_expr()
+        cp , fp = _symbolic_factor_list(numer,opt,'sqf')
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+    if isinstance(expr,(Expr)):
+        numer = together(expr).as_numer_denom()[0]
+        numer = Poly(numer)
+        if len(numer.gens) !=1:
+            raise ValueError("Multivariate polynomials are not supported")
+        numer = numer.as_expr()
+        cp , fp = _symbolic_factor_list(numer,opt,'sqf')
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+    options.allowed_flags(args,['frac','polys'])
+    opt = options.build_options(gens,args)
+
+    expr = sympify(f)
+
+    if isinstance(expr,(Expr)):
+        numer = together(expr).as_numer_denom()[0]
+        numer = Poly(numer)
+        if len(numer.gens) !=1:
+            raise ValueError("Multivariate polynomials are not supported")
+        numer = numer.as_expr()
+        cp , fp = _symbolic_factor_list(numer,opt,'sqf')
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+    options.allowed_flags(args, ['frac', 'polys'])
+    opt = options.build_options(gens, args)
+
+    expr = sympify(f)
+
+    if isinstance(expr,(Expr)):
+        numer = together(expr).as_numer_denom()[0]
+        numer = Poly(numer)
+        if len(numer.gens) !=1:
+            raise ValueError("Multivariate polynomials are not supported")
+        numer = numer.as_expr()
+        cp, fp = _symbolic_factor_list(numer,opt,'sqf')
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (Poly(fp[i][0]),fp[i][1])
+
+        for i in range(len(fp)):
+            fp[i] = (fp[i][0].as_expr(),fp[i][1])
+
+#       Combining factors of same multiplicity
+#       and returning list
+
+#       return cp,_sorted_factors(fp,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
+#       return cp,_sorted_factors(fq,'sqf')
 
 
 @public
2024-07-30 17:19:34,276 - INFO - Grading answer for sympy__sympy-18698...
2024-07-30 17:19:34,331 - INFO - report: {'sympy__sympy-18698': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_factor_terms']}, 'PASS_TO_PASS': {'success': ['test_Poly_mixed_operations', 'test_Poly_from_dict', 'test_Poly_from_list', 'test_Poly_from_poly', 'test_Poly_from_expr', 'test_Poly__new__', 'test_Poly__args', 'test_Poly__gens', 'test_Poly_zero', 'test_Poly_one', 'test_Poly__unify', 'test_Poly_free_symbols', 'test_PurePoly_free_symbols', 'test_Poly__eq__', 'test_PurePoly__eq__', 'test_PurePoly_Poly', 'test_Poly_get_domain', 'test_Poly_set_domain', 'test_Poly_get_modulus', 'test_Poly_set_modulus', 'test_Poly_add_ground', 'test_Poly_sub_ground', 'test_Poly_mul_ground', 'test_Poly_quo_ground', 'test_Poly_exquo_ground', 'test_Poly_abs', 'test_Poly_neg', 'test_Poly_add', 'test_Poly_sub', 'test_Poly_mul', 'test_issue_13079', 'test_Poly_sqr', 'test_Poly_pow', 'test_Poly_divmod', 'test_Poly_eq_ne', 'test_Poly_nonzero', 'test_Poly_properties', 'test_Poly_is_irreducible', 'test_Poly_subs', 'test_Poly_replace', 'test_Poly_reorder', 'test_Poly_ltrim', 'test_Poly_has_only_gens', 'test_Poly_to_ring', 'test_Poly_to_field', 'test_Poly_to_exact', 'test_Poly_retract', 'test_Poly_slice', 'test_Poly_coeffs', 'test_Poly_monoms', 'test_Poly_terms', 'test_Poly_all_coeffs', 'test_Poly_all_monoms', 'test_Poly_all_terms', 'test_Poly_termwise', 'test_Poly_length', 'test_Poly_as_dict', 'test_Poly_as_expr', 'test_Poly_lift', 'test_Poly_deflate', 'test_Poly_inject', 'test_Poly_eject', 'test_Poly_exclude', 'test_Poly__gen_to_level', 'test_Poly_degree', 'test_Poly_degree_list', 'test_Poly_total_degree', 'test_Poly_homogenize', 'test_Poly_homogeneous_order', 'test_Poly_LC', 'test_Poly_TC', 'test_Poly_EC', 'test_Poly_coeff', 'test_Poly_nth', 'test_Poly_LM', 'test_Poly_LM_custom_order', 'test_Poly_EM', 'test_Poly_LT', 'test_Poly_ET', 'test_Poly_max_norm', 'test_Poly_l1_norm', 'test_Poly_clear_denoms', 'test_Poly_rat_clear_denoms', 'test_Poly_integrate', 'test_Poly_diff', 'test_issue_9585', 'test_Poly_eval', 'test_Poly___call__', 'test_parallel_poly_from_expr', 'test_pdiv', 'test_div', 'test_issue_7864', 'test_gcdex', 'test_revert', 'test_subresultants', 'test_resultant', 'test_discriminant', 'test_dispersion', 'test_gcd_list', 'test_lcm_list', 'test_gcd', 'test_gcd_numbers_vs_polys', 'test_terms_gcd', 'test_trunc', 'test_monic', 'test_content', 'test_primitive', 'test_compose', 'test_shift', 'test_transform', 'test_sturm', 'test_gff', 'test_norm', 'test_sqf_norm', 'test_factor', 'test_factor_large', 'test_factor_noeval', 'test_intervals', 'test_refine_root', 'test_count_roots', 'test_Poly_root', 'test_real_roots', 'test_all_roots', 'test_nroots', 'test_ground_roots', 'test_nth_power_roots_poly', 'test_torational_factor_list', 'test_cancel', 'test_reduced', 'test_groebner', 'test_fglm', 'test_is_zero_dimensional', 'test_GroebnerBasis', 'test_poly', 'test_keep_coeff', 'test_poly_matching_consistency', 'test_noncommutative', 'test_to_rational_coeffs', 'test_as_list', 'test_issue_11198', 'test_Poly_precision', 'test_issue_12400', 'test_issue_14364', 'test_issue_15669', 'test_issue_17988', 'test_issue_18205'], 'failure': ['test_sqf']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-18698: resolved: False
