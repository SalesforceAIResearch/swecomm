2024-07-30 17:17:46,921 - INFO - Intermediate patch for matplotlib__matplotlib-25079 written to /shared/patch.diff, now applying to container...
2024-07-30 17:17:47,178 - INFO - >>>>> Applied Patch:
Checking patch lib/matplotlib/cm.py...
Checking patch lib/matplotlib/collections.py...
Applied patch lib/matplotlib/cm.py cleanly.
Applied patch lib/matplotlib/collections.py cleanly.

2024-07-30 17:18:05,499 - INFO - Git diff before:
diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py
index 0f3b25d4e4..74137166e6 100644
--- a/lib/matplotlib/cm.py
+++ b/lib/matplotlib/cm.py
@@ -490,7 +490,13 @@ class ScalarMappable:
         # This is the normal case, mapping a scalar array:
         x = ma.asarray(x)
         if norm:
-            x = self.norm(x)
+            try:
+                x = self.norm(x)
+            except ValueError as e:
+                raise ValueError(
+                    "Normalization failed. Ensure that vmin and vmax are "
+                    "valid for the given norm, especially for LogNorm."
+                ) from e
         rgba = self.cmap(x, alpha=alpha, bytes=bytes)
         return rgba
 
@@ -590,6 +596,38 @@ class ScalarMappable:
     def norm(self):
         return self._norm
 
+    @norm.setter
+    def norm(self, norm):
+        _api.check_isinstance((colors.Normalize, str, None), norm=norm)
+        if norm is None:
+            norm = colors.Normalize()
+        elif isinstance(norm, str):
+            try:
+                scale_cls = scale._scale_mapping[norm]
+            except KeyError:
+                raise ValueError(
+                    "Invalid norm str name; the following values are "
+                    f"supported: {', '.join(scale._scale_mapping)}"
+                ) from None
+            norm = _auto_norm_from_scale(scale_cls)()
+
+        if norm is self.norm:
+            # We aren't updating anything
+            return
+
+        in_init = self.norm is None
+        # Remove the current callback and connect to the new one
+        if not in_init:
+            self.norm.callbacks.disconnect(self._id_norm)
+        self._norm = norm
+        self._id_norm = self.norm.callbacks.connect('changed',
+                                                    self.changed)
+        if not in_init:
+            self.changed()
+            # Ensure the colorbar is updated with the new norm
+            if self.colorbar is not None:
+                self.colorbar.update_normal(self)
+
     @norm.setter
     def norm(self, norm):
         _api.check_isinstance((colors.Normalize, str, None), norm=norm)
@@ -633,7 +671,38 @@ class ScalarMappable:
         the norm of the mappable will reset the norm, locator, and formatters
         on the colorbar to default.
         """
-        self.norm = norm
+        _api.check_isinstance((colors.Normalize, str, None), norm=norm)
+        if norm is None:
+            norm = colors.Normalize()
+        elif isinstance(norm, str):
+            try:
+                scale_cls = scale._scale_mapping[norm]
+            except KeyError:
+                raise ValueError(
+                    "Invalid norm str name; the following values are "
+                    f"supported: {', '.join(scale._scale_mapping)}"
+                ) from None
+            norm = _auto_norm_from_scale(scale_cls)()
+
+        if norm is self.norm:
+            # We aren't updating anything
+            return
+
+        in_init = self.norm is None
+        # Remove the current callback and connect to the new one
+        if not in_init:
+            self.norm.callbacks.disconnect(self._id_norm)
+        self._norm = norm
+        self._id_norm = self.norm.callbacks.connect('changed',
+                                                    self.changed)
+        if not in_init:
+            self.changed()
+            # Ensure the colorbar is updated with the new norm
+            if self.colorbar is not None:
+                self.colorbar.update_normal(self)
+                self.colorbar.locator = None
+                self.colorbar.formatter = None
+                self.colorbar.update_ticks()
 
     def autoscale(self):
         """
diff --git a/lib/matplotlib/collections.py b/lib/matplotlib/collections.py
index bf88dd2b68..a4f3d072f7 100644
--- a/lib/matplotlib/collections.py
+++ b/lib/matplotlib/collections.py
@@ -1983,6 +1983,9 @@ class QuadMesh(Collection):
                     f"For X ({width}) and Y ({height}) with {self._shading} "
                     f"shading, A should have shape "
                     f"{' or '.join(map(str, ok_shapes))}, not {A.shape}")
+            # Ensure values are valid for the given norm
+            if isinstance(self.norm, mpl.colors.LogNorm) and np.any(A <= 0):
+                raise ValueError("Data values must be positive for LogNorm.")
         return super().set_array(A)
 
     def get_datalim(self, transData):
@@ -2071,6 +2074,11 @@ class QuadMesh(Collection):
             ys = self.convert_yunits(offsets[:, 1])
             offsets = np.column_stack([xs, ys])
 
+        # Check if norm is LogNorm and ensure data values are valid
+        if isinstance(self.norm, mpl.colors.LogNorm):
+            if self._A is not None:
+                self._A = np.where(self._A > 0, self._A, np.nan)
+
         self.update_scalarmappable()
 
         if not transform.is_affine:
2024-07-30 17:18:05,500 - INFO - Eval script for matplotlib__matplotlib-25079 written to /eval.sh
2024-07-30 17:23:08,941 - INFO - Test runtime: 303.44 seconds
2024-07-30 17:23:09,112 - INFO - Git diff after:
diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py
index 0f3b25d4e4..74137166e6 100644
--- a/lib/matplotlib/cm.py
+++ b/lib/matplotlib/cm.py
@@ -490,7 +490,13 @@ class ScalarMappable:
         # This is the normal case, mapping a scalar array:
         x = ma.asarray(x)
         if norm:
-            x = self.norm(x)
+            try:
+                x = self.norm(x)
+            except ValueError as e:
+                raise ValueError(
+                    "Normalization failed. Ensure that vmin and vmax are "
+                    "valid for the given norm, especially for LogNorm."
+                ) from e
         rgba = self.cmap(x, alpha=alpha, bytes=bytes)
         return rgba
 
@@ -590,6 +596,38 @@ class ScalarMappable:
     def norm(self):
         return self._norm
 
+    @norm.setter
+    def norm(self, norm):
+        _api.check_isinstance((colors.Normalize, str, None), norm=norm)
+        if norm is None:
+            norm = colors.Normalize()
+        elif isinstance(norm, str):
+            try:
+                scale_cls = scale._scale_mapping[norm]
+            except KeyError:
+                raise ValueError(
+                    "Invalid norm str name; the following values are "
+                    f"supported: {', '.join(scale._scale_mapping)}"
+                ) from None
+            norm = _auto_norm_from_scale(scale_cls)()
+
+        if norm is self.norm:
+            # We aren't updating anything
+            return
+
+        in_init = self.norm is None
+        # Remove the current callback and connect to the new one
+        if not in_init:
+            self.norm.callbacks.disconnect(self._id_norm)
+        self._norm = norm
+        self._id_norm = self.norm.callbacks.connect('changed',
+                                                    self.changed)
+        if not in_init:
+            self.changed()
+            # Ensure the colorbar is updated with the new norm
+            if self.colorbar is not None:
+                self.colorbar.update_normal(self)
+
     @norm.setter
     def norm(self, norm):
         _api.check_isinstance((colors.Normalize, str, None), norm=norm)
@@ -633,7 +671,38 @@ class ScalarMappable:
         the norm of the mappable will reset the norm, locator, and formatters
         on the colorbar to default.
         """
-        self.norm = norm
+        _api.check_isinstance((colors.Normalize, str, None), norm=norm)
+        if norm is None:
+            norm = colors.Normalize()
+        elif isinstance(norm, str):
+            try:
+                scale_cls = scale._scale_mapping[norm]
+            except KeyError:
+                raise ValueError(
+                    "Invalid norm str name; the following values are "
+                    f"supported: {', '.join(scale._scale_mapping)}"
+                ) from None
+            norm = _auto_norm_from_scale(scale_cls)()
+
+        if norm is self.norm:
+            # We aren't updating anything
+            return
+
+        in_init = self.norm is None
+        # Remove the current callback and connect to the new one
+        if not in_init:
+            self.norm.callbacks.disconnect(self._id_norm)
+        self._norm = norm
+        self._id_norm = self.norm.callbacks.connect('changed',
+                                                    self.changed)
+        if not in_init:
+            self.changed()
+            # Ensure the colorbar is updated with the new norm
+            if self.colorbar is not None:
+                self.colorbar.update_normal(self)
+                self.colorbar.locator = None
+                self.colorbar.formatter = None
+                self.colorbar.update_ticks()
 
     def autoscale(self):
         """
diff --git a/lib/matplotlib/collections.py b/lib/matplotlib/collections.py
index bf88dd2b68..a4f3d072f7 100644
--- a/lib/matplotlib/collections.py
+++ b/lib/matplotlib/collections.py
@@ -1983,6 +1983,9 @@ class QuadMesh(Collection):
                     f"For X ({width}) and Y ({height}) with {self._shading} "
                     f"shading, A should have shape "
                     f"{' or '.join(map(str, ok_shapes))}, not {A.shape}")
+            # Ensure values are valid for the given norm
+            if isinstance(self.norm, mpl.colors.LogNorm) and np.any(A <= 0):
+                raise ValueError("Data values must be positive for LogNorm.")
         return super().set_array(A)
 
     def get_datalim(self, transData):
@@ -2071,6 +2074,11 @@ class QuadMesh(Collection):
             ys = self.convert_yunits(offsets[:, 1])
             offsets = np.column_stack([xs, ys])
 
+        # Check if norm is LogNorm and ensure data values are valid
+        if isinstance(self.norm, mpl.colors.LogNorm):
+            if self._A is not None:
+                self._A = np.where(self._A > 0, self._A, np.nan)
+
         self.update_scalarmappable()
 
         if not transform.is_affine:
2024-07-30 17:23:09,112 - INFO - Grading answer for matplotlib__matplotlib-25079...
2024-07-30 17:23:09,116 - INFO - report: {'matplotlib__matplotlib-25079': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['lib/matplotlib/tests/test_colors.py::test_norm_callback']}, 'PASS_TO_PASS': {'success': ['lib/matplotlib/tests/test_colors.py::test_create_lookup_table[5-result0]', 'lib/matplotlib/tests/test_colors.py::test_create_lookup_table[2-result1]', 'lib/matplotlib/tests/test_colors.py::test_create_lookup_table[1-result2]', 'lib/matplotlib/tests/test_colors.py::test_index_dtype[uint8]', 'lib/matplotlib/tests/test_colors.py::test_index_dtype[int]', 'lib/matplotlib/tests/test_colors.py::test_index_dtype[float16]', 'lib/matplotlib/tests/test_colors.py::test_index_dtype[float]', 'lib/matplotlib/tests/test_colors.py::test_resampled', 'lib/matplotlib/tests/test_colors.py::test_register_cmap', 'lib/matplotlib/tests/test_colors.py::test_colormaps_get_cmap', 'lib/matplotlib/tests/test_colors.py::test_unregister_builtin_cmap', 'lib/matplotlib/tests/test_colors.py::test_colormap_copy', 'lib/matplotlib/tests/test_colors.py::test_colormap_equals', 'lib/matplotlib/tests/test_colors.py::test_colormap_endian', 'lib/matplotlib/tests/test_colors.py::test_colormap_invalid', 'lib/matplotlib/tests/test_colors.py::test_colormap_return_types', 'lib/matplotlib/tests/test_colors.py::test_BoundaryNorm', 'lib/matplotlib/tests/test_colors.py::test_CenteredNorm', 'lib/matplotlib/tests/test_colors.py::test_lognorm_invalid[-1-2]', 'lib/matplotlib/tests/test_colors.py::test_lognorm_invalid[3-1]', 'lib/matplotlib/tests/test_colors.py::test_LogNorm', 'lib/matplotlib/tests/test_colors.py::test_LogNorm_inverse', 'lib/matplotlib/tests/test_colors.py::test_PowerNorm', 'lib/matplotlib/tests/test_colors.py::test_PowerNorm_translation_invariance', 'lib/matplotlib/tests/test_colors.py::test_Normalize', 'lib/matplotlib/tests/test_colors.py::test_FuncNorm', 'lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale', 'lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale_None_vmin', 'lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_autoscale_None_vmax', 'lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scale', 'lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scaleout_center', 'lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_scaleout_center_max', 'lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_Even', 'lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_Odd', 'lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VminEqualsVcenter', 'lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VmaxEqualsVcenter', 'lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VminGTVcenter', 'lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_TwoSlopeNorm_VminGTVmax', 'lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_VcenterGTVmax', 'lib/matplotlib/tests/test_colors.py::test_TwoSlopeNorm_premature_scaling', 'lib/matplotlib/tests/test_colors.py::test_SymLogNorm', 'lib/matplotlib/tests/test_colors.py::test_SymLogNorm_colorbar', 'lib/matplotlib/tests/test_colors.py::test_SymLogNorm_single_zero', 'lib/matplotlib/tests/test_colors.py::TestAsinhNorm::test_init', 'lib/matplotlib/tests/test_colors.py::TestAsinhNorm::test_norm', 'lib/matplotlib/tests/test_colors.py::test_cmap_and_norm_from_levels_and_colors[png]', 'lib/matplotlib/tests/test_colors.py::test_boundarynorm_and_colorbarbase[png]', 'lib/matplotlib/tests/test_colors.py::test_cmap_and_norm_from_levels_and_colors2', 'lib/matplotlib/tests/test_colors.py::test_rgb_hsv_round_trip', 'lib/matplotlib/tests/test_colors.py::test_autoscale_masked', 'lib/matplotlib/tests/test_colors.py::test_light_source_topo_surface[png]', 'lib/matplotlib/tests/test_colors.py::test_light_source_shading_default', 'lib/matplotlib/tests/test_colors.py::test_light_source_shading_empty_mask', 'lib/matplotlib/tests/test_colors.py::test_light_source_masked_shading', 'lib/matplotlib/tests/test_colors.py::test_light_source_hillshading', 'lib/matplotlib/tests/test_colors.py::test_light_source_planar_hillshading', 'lib/matplotlib/tests/test_colors.py::test_color_names', 'lib/matplotlib/tests/test_colors.py::test_pandas_iterable', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Accent]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Accent_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Blues]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Blues_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BrBG]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BrBG_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuGn]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuGn_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuPu]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[BuPu_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[CMRmap]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[CMRmap_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Dark2]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Dark2_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[GnBu]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[GnBu_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greens]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greens_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greys]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Greys_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[OrRd]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[OrRd_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Oranges]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Oranges_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PRGn]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PRGn_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Paired]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Paired_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel1]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel1_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel2]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Pastel2_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PiYG]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PiYG_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBu]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBuGn]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBuGn_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuBu_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuOr]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuOr_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuRd]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[PuRd_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Purples]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Purples_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdBu]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdBu_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdGy]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdGy_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdPu]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdPu_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlBu]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlBu_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlGn]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[RdYlGn_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Reds]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Reds_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set1]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set1_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set2]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set2_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set3]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Set3_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Spectral]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Spectral_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Wistia]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[Wistia_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGn]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGnBu]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGnBu_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlGn_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrBr]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrBr_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrRd]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[YlOrRd_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[afmhot]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[afmhot_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[autumn]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[autumn_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[binary]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[binary_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bone]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bone_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[brg]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[brg_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bwr]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[bwr_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cividis]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cividis_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cool]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cool_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[coolwarm]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[coolwarm_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[copper]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[copper_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cubehelix]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[cubehelix_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[flag]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[flag_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_earth]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_earth_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_gray]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_gray_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_heat]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_heat_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_ncar]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_ncar_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_rainbow]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_rainbow_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_stern]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_stern_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_yarg]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gist_yarg_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot2]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot2_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gnuplot_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gray]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[gray_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hot]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hot_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hsv]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[hsv_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[inferno]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[inferno_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[jet]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[jet_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[magma]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[magma_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[nipy_spectral]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[nipy_spectral_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[ocean]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[ocean_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[pink]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[pink_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[plasma]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[plasma_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[prism]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[prism_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[rainbow]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[rainbow_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[seismic]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[seismic_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[spring]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[spring_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[summer]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[summer_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab10]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab10_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20b]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20b_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20c]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[tab20c_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[terrain]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[terrain_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[turbo]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[turbo_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_shifted]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[twilight_shifted_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[viridis]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[viridis_r]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[winter]', 'lib/matplotlib/tests/test_colors.py::test_colormap_reversing[winter_r]', 'lib/matplotlib/tests/test_colors.py::test_has_alpha_channel', 'lib/matplotlib/tests/test_colors.py::test_cn', 'lib/matplotlib/tests/test_colors.py::test_conversions', 'lib/matplotlib/tests/test_colors.py::test_conversions_masked', 'lib/matplotlib/tests/test_colors.py::test_to_rgba_array_single_str', 'lib/matplotlib/tests/test_colors.py::test_to_rgba_array_alpha_array', 'lib/matplotlib/tests/test_colors.py::test_failed_conversions', 'lib/matplotlib/tests/test_colors.py::test_grey_gray', 'lib/matplotlib/tests/test_colors.py::test_tableau_order', 'lib/matplotlib/tests/test_colors.py::test_ndarray_subclass_norm', 'lib/matplotlib/tests/test_colors.py::test_same_color', 'lib/matplotlib/tests/test_colors.py::test_hex_shorthand_notation', 'lib/matplotlib/tests/test_colors.py::test_repr_png', 'lib/matplotlib/tests/test_colors.py::test_repr_html', 'lib/matplotlib/tests/test_colors.py::test_get_under_over_bad', 'lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[over]', 'lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[under]', 'lib/matplotlib/tests/test_colors.py::test_non_mutable_get_values[bad]', 'lib/matplotlib/tests/test_colors.py::test_colormap_alpha_array', 'lib/matplotlib/tests/test_colors.py::test_colormap_bad_data_with_alpha', 'lib/matplotlib/tests/test_colors.py::test_2d_to_rgba', 'lib/matplotlib/tests/test_colors.py::test_set_dict_to_rgba', 'lib/matplotlib/tests/test_colors.py::test_norm_deepcopy', 'lib/matplotlib/tests/test_colors.py::test_scalarmappable_norm_update', 'lib/matplotlib/tests/test_colors.py::test_norm_update_figs[png]', 'lib/matplotlib/tests/test_colors.py::test_norm_update_figs[pdf]', 'lib/matplotlib/tests/test_colors.py::test_make_norm_from_scale_name', 'lib/matplotlib/tests/test_colors.py::test_color_sequences', 'lib/matplotlib/tests/test_colors.py::test_cm_set_cmap_error'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for matplotlib__matplotlib-25079: resolved: False
