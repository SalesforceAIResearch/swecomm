2024-07-30 17:13:00,281 - INFO - Intermediate patch for sympy__sympy-15345 written to /shared/patch.diff, now applying to container...
2024-07-30 17:13:00,459 - INFO - >>>>> Applied Patch:
Checking patch sympy/printing/mathematica.py...
Applied patch sympy/printing/mathematica.py cleanly.

2024-07-30 17:13:05,348 - INFO - Git diff before:
diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py
index ea7e3a2d94..227c020279 100644
--- a/sympy/printing/mathematica.py
+++ b/sympy/printing/mathematica.py
@@ -94,6 +94,8 @@ def _print_list(self, expr):
     _print_Tuple = _print_list
 
     def _print_Function(self, expr):
+        if expr.func.__name__ == "Max":
+            return "Max[%s]" % self.stringify(expr.args, ", ")
         if expr.func.__name__ in self.known_functions:
             cond_mfunc = self.known_functions[expr.func.__name__]
             for cond, mfunc in cond_mfunc:
@@ -115,7 +117,8 @@ def _print_Derivative(self, expr):
         dexpr = expr.expr
         dvars = [i[0] if i[1] == 1 else i for i in expr.variable_count]
         return "Hold[D[" + ', '.join(self.doprint(a) for a in [dexpr] + dvars) + "]]"
-
+    def _print_Max(self, expr):
+        return "Max[%s]" % self.stringify(expr.args, ", ")
 
 def mathematica_code(expr, **settings):
     r"""Converts an expr to a string of the Wolfram Mathematica code
2024-07-30 17:13:05,348 - INFO - Eval script for sympy__sympy-15345 written to /eval.sh
2024-07-30 17:13:59,730 - INFO - Test runtime: 54.38 seconds
2024-07-30 17:14:00,240 - INFO - Git diff after:
diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py
index ea7e3a2d94..227c020279 100644
--- a/sympy/printing/mathematica.py
+++ b/sympy/printing/mathematica.py
@@ -94,6 +94,8 @@ def _print_list(self, expr):
     _print_Tuple = _print_list
 
     def _print_Function(self, expr):
+        if expr.func.__name__ == "Max":
+            return "Max[%s]" % self.stringify(expr.args, ", ")
         if expr.func.__name__ in self.known_functions:
             cond_mfunc = self.known_functions[expr.func.__name__]
             for cond, mfunc in cond_mfunc:
@@ -115,7 +117,8 @@ def _print_Derivative(self, expr):
         dexpr = expr.expr
         dvars = [i[0] if i[1] == 1 else i for i in expr.variable_count]
         return "Hold[D[" + ', '.join(self.doprint(a) for a in [dexpr] + dvars) + "]]"
-
+    def _print_Max(self, expr):
+        return "Max[%s]" % self.stringify(expr.args, ", ")
 
 def mathematica_code(expr, **settings):
     r"""Converts an expr to a string of the Wolfram Mathematica code
2024-07-30 17:14:00,249 - INFO - Grading answer for sympy__sympy-15345...
2024-07-30 17:14:00,297 - INFO - report: {'sympy__sympy-15345': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_Function']}, 'PASS_TO_PASS': {'success': ['test_Integer', 'test_Rational', 'test_Pow', 'test_Mul', 'test_constants', 'test_containers', 'test_Integral', 'test_Derivative'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-15345: resolved: False
