2024-07-30 17:13:45,060 - INFO - Intermediate patch for sympy__sympy-21847 written to /shared/patch.diff, now applying to container...
2024-07-30 17:13:45,371 - INFO - >>>>> Applied Patch:
Checking patch sympy/polys/monomials.py...
Applied patch sympy/polys/monomials.py cleanly.

2024-07-30 17:13:51,195 - INFO - Git diff before:
diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py
index 0e84403307..52bb59c341 100644
--- a/sympy/polys/monomials.py
+++ b/sympy/polys/monomials.py
@@ -11,7 +11,6 @@
 from sympy.utilities import public
 from sympy.core.compatibility import is_sequence
 
-@public
 def itermonomials(variables, max_degrees, min_degrees=None):
     r"""
     ``max_degrees`` and ``min_degrees`` are either both integers or both lists.
@@ -50,9 +49,6 @@ def itermonomials(variables, max_degrees, min_degrees=None):
         >>> from sympy.polys.orderings import monomial_key
         >>> from sympy.abc import x, y
 
-        >>> sorted(itermonomials([x, y], 2), key=monomial_key('grlex', [y, x]))
-        [1, x, y, x**2, x*y, y**2]
-
         >>> sorted(itermonomials([x, y], 3), key=monomial_key('grlex', [y, x]))
         [1, x, y, x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3]
 
@@ -119,7 +115,6 @@ def itermonomials(variables, max_degrees, min_degrees=None):
         # Force to list in case of passed tuple or other incompatible collection
         variables = list(variables) + [S.One]
         if all(variable.is_commutative for variable in variables):
-            monomials_list_comm = []
             for item in combinations_with_replacement(variables, max_degree):
                 powers = dict()
                 for variable in variables:
@@ -127,11 +122,9 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 for variable in item:
                     if variable != 1:
                         powers[variable] += 1
-                if max(powers.values()) >= min_degree:
-                    monomials_list_comm.append(Mul(*item))
-            yield from set(monomials_list_comm)
+                if sum(powers.values()) >= min_degree:
+                    yield Mul(*item)
         else:
-            monomials_list_non_comm = []
             for item in product(variables, repeat=max_degree):
                 powers = dict()
                 for variable in variables:
@@ -139,9 +132,8 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 for variable in item:
                     if variable != 1:
                         powers[variable] += 1
-                if max(powers.values()) >= min_degree:
-                    monomials_list_non_comm.append(Mul(*item))
-            yield from set(monomials_list_non_comm)
+                if sum(powers.values()) >= min_degree:
+                    yield Mul(*item)
     else:
         if any(min_degrees[i] > max_degrees[i] for i in range(n)):
             raise ValueError('min_degrees[i] must be <= max_degrees[i] for all i')
2024-07-30 17:13:51,196 - INFO - Eval script for sympy__sympy-21847 written to /eval.sh
2024-07-30 17:14:29,483 - INFO - Test runtime: 38.29 seconds
2024-07-30 17:14:29,943 - INFO - Git diff after:
diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py
index 0e84403307..52bb59c341 100644
--- a/sympy/polys/monomials.py
+++ b/sympy/polys/monomials.py
@@ -11,7 +11,6 @@
 from sympy.utilities import public
 from sympy.core.compatibility import is_sequence
 
-@public
 def itermonomials(variables, max_degrees, min_degrees=None):
     r"""
     ``max_degrees`` and ``min_degrees`` are either both integers or both lists.
@@ -50,9 +49,6 @@ def itermonomials(variables, max_degrees, min_degrees=None):
         >>> from sympy.polys.orderings import monomial_key
         >>> from sympy.abc import x, y
 
-        >>> sorted(itermonomials([x, y], 2), key=monomial_key('grlex', [y, x]))
-        [1, x, y, x**2, x*y, y**2]
-
         >>> sorted(itermonomials([x, y], 3), key=monomial_key('grlex', [y, x]))
         [1, x, y, x**2, x*y, y**2, x**3, x**2*y, x*y**2, y**3]
 
@@ -119,7 +115,6 @@ def itermonomials(variables, max_degrees, min_degrees=None):
         # Force to list in case of passed tuple or other incompatible collection
         variables = list(variables) + [S.One]
         if all(variable.is_commutative for variable in variables):
-            monomials_list_comm = []
             for item in combinations_with_replacement(variables, max_degree):
                 powers = dict()
                 for variable in variables:
@@ -127,11 +122,9 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 for variable in item:
                     if variable != 1:
                         powers[variable] += 1
-                if max(powers.values()) >= min_degree:
-                    monomials_list_comm.append(Mul(*item))
-            yield from set(monomials_list_comm)
+                if sum(powers.values()) >= min_degree:
+                    yield Mul(*item)
         else:
-            monomials_list_non_comm = []
             for item in product(variables, repeat=max_degree):
                 powers = dict()
                 for variable in variables:
@@ -139,9 +132,8 @@ def itermonomials(variables, max_degrees, min_degrees=None):
                 for variable in item:
                     if variable != 1:
                         powers[variable] += 1
-                if max(powers.values()) >= min_degree:
-                    monomials_list_non_comm.append(Mul(*item))
-            yield from set(monomials_list_non_comm)
+                if sum(powers.values()) >= min_degree:
+                    yield Mul(*item)
     else:
         if any(min_degrees[i] > max_degrees[i] for i in range(n)):
             raise ValueError('min_degrees[i] must be <= max_degrees[i] for all i')
2024-07-30 17:14:29,943 - INFO - Grading answer for sympy__sympy-21847...
2024-07-30 17:14:29,945 - INFO - report: {'sympy__sympy-21847': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': True, 'tests_status': {'FAIL_TO_PASS': {'success': ['test_monomials'], 'failure': []}, 'PASS_TO_PASS': {'success': ['test_monomial_count', 'test_monomial_mul', 'test_monomial_div', 'test_monomial_gcd', 'test_monomial_lcm', 'test_monomial_max', 'test_monomial_pow', 'test_monomial_min', 'test_monomial_divides'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-21847: resolved: True
